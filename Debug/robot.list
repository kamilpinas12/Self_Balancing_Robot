
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bebc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800bfd0  0800bfd0  0001bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c560  0800c560  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c560  0800c560  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c560  0800c560  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c560  0800c560  0001c560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c564  0800c564  0001c564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001d4  0800c73c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800c73c  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012eb7  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003262  00000000  00000000  000330f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00036360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfa  00000000  00000000  00037550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa79  00000000  00000000  0003834a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f4e  00000000  00000000  00052dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fbc3  00000000  00000000  0006ad11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f40  00000000  00000000  000fa8d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00100814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bfb4 	.word	0x0800bfb4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800bfb4 	.word	0x0800bfb4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_DMA_Init+0x38>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <MX_DMA_Init+0x38>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_DMA_Init+0x38>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 15, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	210f      	movs	r1, #15
 8001202:	200f      	movs	r0, #15
 8001204:	f002 fbbf 	bl	8003986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001208:	200f      	movs	r0, #15
 800120a:	f002 fbd8 	bl	80039be <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <MX_GPIO_Init+0x118>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <MX_GPIO_Init+0x118>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <MX_GPIO_Init+0x118>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <MX_GPIO_Init+0x118>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a39      	ldr	r2, [pc, #228]	; (8001334 <MX_GPIO_Init+0x118>)
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <MX_GPIO_Init+0x118>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <MX_GPIO_Init+0x118>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a33      	ldr	r2, [pc, #204]	; (8001334 <MX_GPIO_Init+0x118>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <MX_GPIO_Init+0x118>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_GPIO_Init+0x118>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <MX_GPIO_Init+0x118>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_GPIO_Init+0x118>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001296:	4828      	ldr	r0, [pc, #160]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001298:	f002 ffd2 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2108      	movs	r1, #8
 80012a0:	4826      	ldr	r0, [pc, #152]	; (800133c <MX_GPIO_Init+0x120>)
 80012a2:	f002 ffcd 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4824      	ldr	r0, [pc, #144]	; (800133c <MX_GPIO_Init+0x120>)
 80012ac:	f002 ffc8 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2102      	movs	r1, #2
 80012b4:	4822      	ldr	r0, [pc, #136]	; (8001340 <MX_GPIO_Init+0x124>)
 80012b6:	f002 ffc3 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4819      	ldr	r0, [pc, #100]	; (8001338 <MX_GPIO_Init+0x11c>)
 80012d4:	f002 fe30 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 80012d8:	2388      	movs	r3, #136	; 0x88
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <MX_GPIO_Init+0x120>)
 80012f0:	f002 fe22 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2302      	movs	r3, #2
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_GPIO_Init+0x124>)
 800130c:	f002 fe14 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_STATE_Pin;
 8001310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_GPIO_Init+0x120>)
 8001326:	f002 fe07 	bl	8003f38 <HAL_GPIO_Init>

}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40011000 	.word	0x40011000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00

08001344 <saturation>:
#include "helpers.h"

#define RET_FUN_SATURATION 100.0f


void saturation(float min, float max, float* val){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	if(*val > max) *val = max;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff febc 	bl	80010d4 <__aeabi_fcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <saturation+0x24>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	601a      	str	r2, [r3, #0]
	if(*val < min) *val = min;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff fece 	bl	8001110 <__aeabi_fcmpgt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d100      	bne.n	800137c <saturation+0x38>
}
 800137a:	e002      	b.n	8001382 <saturation+0x3e>
	if(*val < min) *val = min;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_I2C1_Init+0x50>)
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <MX_I2C1_Init+0x54>)
 8001394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_I2C1_Init+0x50>)
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_I2C1_Init+0x58>)
 800139a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_I2C1_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_I2C1_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_I2C1_Init+0x50>)
 80013aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_I2C1_Init+0x50>)
 80013ca:	f002 ff51 	bl	8004270 <HAL_I2C_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d4:	f000 fd60 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200001f0 	.word	0x200001f0
 80013e0:	40005400 	.word	0x40005400
 80013e4:	000186a0 	.word	0x000186a0

080013e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_I2C2_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_I2C2_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_I2C2_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_I2C2_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_I2C2_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_I2C2_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_I2C2_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_I2C2_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_I2C2_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_I2C2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_I2C2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_I2C2_Init+0x50>)
 8001426:	f002 ff23 	bl	8004270 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 fd32 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000244 	.word	0x20000244
 800143c:	40005800 	.word	0x40005800
 8001440:	000186a0 	.word	0x000186a0

08001444 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <HAL_I2C_MspInit+0xc8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d124      	bne.n	80014ae <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a29      	ldr	r2, [pc, #164]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147c:	23c0      	movs	r3, #192	; 0xc0
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4619      	mov	r1, r3
 800148e:	4821      	ldr	r0, [pc, #132]	; (8001514 <HAL_I2C_MspInit+0xd0>)
 8001490:	f002 fd52 	bl	8003f38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 800149a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149e:	61d3      	str	r3, [r2, #28]
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014ac:	e029      	b.n	8001502 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_I2C_MspInit+0xd4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d124      	bne.n	8001502 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	2312      	movs	r3, #18
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4619      	mov	r1, r3
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <HAL_I2C_MspInit+0xd0>)
 80014e6:	f002 fd27 	bl	8003f38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40005400 	.word	0x40005400
 8001510:	40021000 	.word	0x40021000
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40005800 	.word	0x40005800

0800151c <filter_init>:
 */

#include "low_pass_filter.h"


filter_typedef filter_init(float alpha){
 800151c:	b490      	push	{r4, r7}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
	filter_typedef f = {alpha, 0, 1};
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	2301      	movs	r3, #1
 8001532:	753b      	strb	r3, [r7, #20]
	return f;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	461c      	mov	r4, r3
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bc90      	pop	{r4, r7}
 800154c:	4770      	bx	lr

0800154e <filter>:


float filter(filter_typedef* filter, float new_value){
 800154e:	b590      	push	{r4, r7, lr}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
	if(filter->reset){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7a1b      	ldrb	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <filter+0x22>
		filter->reset = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	721a      	strb	r2, [r3, #8]
		filter->prev_value = new_value;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	605a      	str	r2, [r3, #4]
		return new_value;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	e021      	b.n	80015b4 <filter+0x66>
	}
	else{
		float filtered_value = (filter->alpha) * new_value + (1 - filter->alpha) * filter->prev_value;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fc0e 	bl	8000d98 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	461c      	mov	r4, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800158a:	f7ff fafb 	bl	8000b84 <__aeabi_fsub>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff fbfd 	bl	8000d98 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff faf0 	bl	8000b88 <__addsf3>
 80015a8:	4603      	mov	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]
		filter->prev_value = filtered_value;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
		return filtered_value;
 80015b2:	68fb      	ldr	r3, [r7, #12]
	}
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <reset_filter>:


void reset_filter(filter_typedef* filter){
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	filter->reset = 1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	721a      	strb	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b0a      	cmp	r3, #10
 80015e0:	d109      	bne.n	80015f6 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80015e2:	230d      	movs	r3, #13
 80015e4:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 80015e6:	f107 010f 	add.w	r1, r7, #15
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	2201      	movs	r2, #1
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <__io_putchar+0x3c>)
 80015f2:	f005 fa5d 	bl	8006ab0 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80015f6:	1d39      	adds	r1, r7, #4
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	2201      	movs	r2, #1
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <__io_putchar+0x3c>)
 8001600:	f005 fa56 	bl	8006ab0 <HAL_UART_Transmit>
    return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000430 	.word	0x20000430

08001614 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	if(htim == stepper1.htim){
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d103      	bne.n	800162e <HAL_TIM_PeriodElapsedCallback+0x1a>
		stepper_update(&stepper1);
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001628:	f001 fa20 	bl	8002a6c <stepper_update>
	}
	else if(htim == stepper2.htim){
		stepper_update(&stepper2);
	}
}
 800162c:	e007      	b.n	800163e <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == stepper2.htim){
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	d102      	bne.n	800163e <HAL_TIM_PeriodElapsedCallback+0x2a>
		stepper_update(&stepper2);
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800163a:	f001 fa17 	bl	8002a6c <stepper_update>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000298 	.word	0x20000298
 800164c:	200002cc 	.word	0x200002cc

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001654:	b0e2      	sub	sp, #392	; 0x188
 8001656:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001658:	f002 f838 	bl	80036cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165c:	f000 fbd6 	bl	8001e0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001660:	f7ff fddc 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 8001664:	f7ff fdbc 	bl	80011e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001668:	f7ff fe90 	bl	800138c <MX_I2C1_Init>
  MX_TIM2_Init();
 800166c:	f001 fb8c 	bl	8002d88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001670:	f001 fc00 	bl	8002e74 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001674:	f001 feb6 	bl	80033e4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001678:	f7ff feb6 	bl	80013e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // stepper motor setup
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	9304      	str	r3, [sp, #16]
 8001682:	f241 7370 	movw	r3, #6000	; 0x1770
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	2308      	movs	r3, #8
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	4b6c      	ldr	r3, [pc, #432]	; (8001840 <main+0x1f0>)
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <main+0x1f0>)
 8001696:	2200      	movs	r2, #0
 8001698:	496a      	ldr	r1, [pc, #424]	; (8001844 <main+0x1f4>)
 800169a:	486b      	ldr	r0, [pc, #428]	; (8001848 <main+0x1f8>)
 800169c:	f001 f85d 	bl	800275a <stepper_init>
		  DIR1_GPIO_Port, DIR1_Pin, 6000, -1);
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 80016a0:	2301      	movs	r3, #1
 80016a2:	9304      	str	r3, [sp, #16]
 80016a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80016a8:	9303      	str	r3, [sp, #12]
 80016aa:	2302      	movs	r3, #2
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	4b67      	ldr	r3, [pc, #412]	; (800184c <main+0x1fc>)
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	4b62      	ldr	r3, [pc, #392]	; (8001840 <main+0x1f0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	4965      	ldr	r1, [pc, #404]	; (8001850 <main+0x200>)
 80016bc:	4865      	ldr	r0, [pc, #404]	; (8001854 <main+0x204>)
 80016be:	f001 f84c 	bl	800275a <stepper_init>
		  DIR2_GPIO_Port, DIR2_Pin, 6000, 1);


  // MPU setup
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 80016c2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016c6:	22d0      	movs	r2, #208	; 0xd0
 80016c8:	4963      	ldr	r1, [pc, #396]	; (8001858 <main+0x208>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd56 	bl	800217c <mpu_init>

  if(mpu_who_am_i(&mpu) != HAL_OK)
 80016d0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fd3d 	bl	8002154 <mpu_who_am_i>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <main+0xa0>
  {
	  while(1)
	  {
		  printf("Error while connecting to mpu 6050\n");
 80016e0:	485e      	ldr	r0, [pc, #376]	; (800185c <main+0x20c>)
 80016e2:	f007 fde5 	bl	80092b0 <puts>
		  HAL_Delay(1000);
 80016e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ea:	f002 f851 	bl	8003790 <HAL_Delay>
		  printf("Error while connecting to mpu 6050\n");
 80016ee:	e7f7      	b.n	80016e0 <main+0x90>
	  }
  }

  set_gyro_scale(&mpu, range_250);
 80016f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fc6c 	bl	8001fd4 <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 80016fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fcb4 	bl	8002070 <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc44Hz_Gyro42Hz);
 8001708:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800170c:	2103      	movs	r1, #3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fcfc 	bl	800210c <mpu_low_pass_filter>
  HAL_Delay(300);
 8001714:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001718:	f002 f83a 	bl	8003790 <HAL_Delay>


  mpu_gyro_calibration(&mpu);
 800171c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fe1f 	bl	8002364 <mpu_gyro_calibration>



  user_function_typedef user_function_array[] = {
 8001726:	4a4e      	ldr	r2, [pc, #312]	; (8001860 <main+0x210>)
 8001728:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800172c:	4611      	mov	r1, r2
 800172e:	2278      	movs	r2, #120	; 0x78
 8001730:	4618      	mov	r0, r3
 8001732:	f007 ff3b 	bl	80095ac <memcpy>
		{&rotate, "rotate", 2},
		{&change_pid, "pid", 3}
  };


  uart_interface_init(&uart_interface, &huart1, &hdma_usart1_rx, user_function_array, sizeof(user_function_array) / sizeof(user_function_typedef));
 8001736:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800173a:	2205      	movs	r2, #5
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	4a49      	ldr	r2, [pc, #292]	; (8001864 <main+0x214>)
 8001740:	4949      	ldr	r1, [pc, #292]	; (8001868 <main+0x218>)
 8001742:	484a      	ldr	r0, [pc, #296]	; (800186c <main+0x21c>)
 8001744:	f001 fcc8 	bl	80030d8 <uart_interface_init>

  start_uart_interface(&uart_interface);
 8001748:	4848      	ldr	r0, [pc, #288]	; (800186c <main+0x21c>)
 800174a:	f001 fc99 	bl	8003080 <start_uart_interface>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // balancing parameters
  int delay = 4;
 800174e:	2304      	movs	r3, #4
 8001750:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168


  pid_typedef angle_pid = pid_init(480, 6, 1200);
 8001754:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001758:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 800175c:	4b44      	ldr	r3, [pc, #272]	; (8001870 <main+0x220>)
 800175e:	4a45      	ldr	r2, [pc, #276]	; (8001874 <main+0x224>)
 8001760:	4945      	ldr	r1, [pc, #276]	; (8001878 <main+0x228>)
 8001762:	f000 ff95 	bl	8002690 <pid_init>
  pid_typedef pos_pid = pid_init(0.001, 0.0000001, 0.01);
 8001766:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800176a:	f5a3 7092 	sub.w	r0, r3, #292	; 0x124
 800176e:	4b43      	ldr	r3, [pc, #268]	; (800187c <main+0x22c>)
 8001770:	4a43      	ldr	r2, [pc, #268]	; (8001880 <main+0x230>)
 8001772:	4944      	ldr	r1, [pc, #272]	; (8001884 <main+0x234>)
 8001774:	f000 ff8c 	bl	8002690 <pid_init>

  float k_tacho_feedback = 0.003;
 8001778:	4b43      	ldr	r3, [pc, #268]	; (8001888 <main+0x238>)
 800177a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164


  filter_typedef speed_filter = filter_init(0.01);
 800177e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001786:	493d      	ldr	r1, [pc, #244]	; (800187c <main+0x22c>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fec7 	bl	800151c <filter_init>
  filter_typedef pos_pid_derivative_filter = filter_init(0.2);
 800178e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001792:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001796:	493d      	ldr	r1, [pc, #244]	; (800188c <main+0x23c>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff febf 	bl	800151c <filter_init>
  filter_typedef pos_pid_filter = filter_init(0.1);
 800179e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80017a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017a6:	493a      	ldr	r1, [pc, #232]	; (8001890 <main+0x240>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff feb7 	bl	800151c <filter_init>
  filter_typedef angle_pid_derivative_filter = filter_init(0.2);
 80017ae:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80017b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017b6:	4935      	ldr	r1, [pc, #212]	; (800188c <main+0x23c>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff feaf 	bl	800151c <filter_init>
  filter_typedef target_angle_filter = filter_init(1);
 80017be:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80017c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80017c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fea6 	bl	800151c <filter_init>
  //filter_typedef tacho_filter = filter_init()


  unsigned long lst_time = HAL_GetTick();
 80017d0:	f001 ffd4 	bl	800377c <HAL_GetTick>
 80017d4:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c


  while (1)
  {
	  mpu_calc_x_angle(&mpu);
 80017d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 feb3 	bl	8002548 <mpu_calc_x_angle>

	  execute_uart_command(&uart_interface);
 80017e2:	4822      	ldr	r0, [pc, #136]	; (800186c <main+0x21c>)
 80017e4:	f001 fc9e 	bl	8003124 <execute_uart_command>
	  start_uart_interface(&uart_interface);
 80017e8:	4820      	ldr	r0, [pc, #128]	; (800186c <main+0x21c>)
 80017ea:	f001 fc49 	bl	8003080 <start_uart_interface>


	  if(fabsf(mpu.x_angle) < 0.01){
 80017ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80017f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe20 	bl	800043c <__aeabi_f2d>
 80017fc:	a30e      	add	r3, pc, #56	; (adr r3, 8001838 <main+0x1e8>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7ff f8e5 	bl	80009d0 <__aeabi_dcmplt>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 82e7 	beq.w	8001ddc <main+0x78c>
		  // set up before entering main loop

		  lst_time = HAL_GetTick();
 800180e:	f001 ffb5 	bl	800377c <HAL_GetTick>
 8001812:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c


		  // start motors
		  stepper_enable(&stepper1, 1);
 8001816:	2101      	movs	r1, #1
 8001818:	480b      	ldr	r0, [pc, #44]	; (8001848 <main+0x1f8>)
 800181a:	f000 ffe4 	bl	80027e6 <stepper_enable>
		  stepper_enable(&stepper2, 1);
 800181e:	2101      	movs	r1, #1
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <main+0x204>)
 8001822:	f000 ffe0 	bl	80027e6 <stepper_enable>

		  //restart motor position
		  stepper1.step_counter = 0;
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <main+0x1f8>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
		  stepper2.step_counter = 0;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <main+0x204>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]

		  // main loop
		  while(fabsf(mpu.x_angle) < 0.5){
 8001832:	e28a      	b.n	8001d4a <main+0x6fa>
 8001834:	f3af 8000 	nop.w
 8001838:	47ae147b 	.word	0x47ae147b
 800183c:	3f847ae1 	.word	0x3f847ae1
 8001840:	40010800 	.word	0x40010800
 8001844:	200003a0 	.word	0x200003a0
 8001848:	20000298 	.word	0x20000298
 800184c:	40010c00 	.word	0x40010c00
 8001850:	200003e8 	.word	0x200003e8
 8001854:	200002cc 	.word	0x200002cc
 8001858:	200001f0 	.word	0x200001f0
 800185c:	0800bfd0 	.word	0x0800bfd0
 8001860:	0800bff4 	.word	0x0800bff4
 8001864:	20000478 	.word	0x20000478
 8001868:	20000430 	.word	0x20000430
 800186c:	20000324 	.word	0x20000324
 8001870:	44960000 	.word	0x44960000
 8001874:	40c00000 	.word	0x40c00000
 8001878:	43f00000 	.word	0x43f00000
 800187c:	3c23d70a 	.word	0x3c23d70a
 8001880:	33d6bf95 	.word	0x33d6bf95
 8001884:	3a83126f 	.word	0x3a83126f
 8001888:	3b449ba6 	.word	0x3b449ba6
 800188c:	3e4ccccd 	.word	0x3e4ccccd
 8001890:	3dcccccd 	.word	0x3dcccccd
			  if((HAL_GetTick() - mpu.lst_time_x_angle) >= delay){
 8001894:	f001 ff72 	bl	800377c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800189e:	1ad2      	subs	r2, r2, r3
 80018a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018a4:	429a      	cmp	r2, r3
 80018a6:	f0c0 8250 	bcc.w	8001d4a <main+0x6fa>

				  mpu_calc_x_angle(&mpu);
 80018aa:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fe4a 	bl	8002548 <mpu_calc_x_angle>
				  float time_delta = (mpu.lst_time_x_angle - lst_time);
 80018b4:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80018b8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fa12 	bl	8000ce8 <__aeabi_ui2f>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
				  lst_time = mpu.lst_time_x_angle;
 80018ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80018ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c


				  float robot_speed = (stepper1.speed + stepper2.speed) / 2;
 80018d2:	4bc7      	ldr	r3, [pc, #796]	; (8001bf0 <main+0x5a0>)
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	4ac7      	ldr	r2, [pc, #796]	; (8001bf4 <main+0x5a4>)
 80018d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff f953 	bl	8000b88 <__addsf3>
 80018e2:	4603      	mov	r3, r0
 80018e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fb09 	bl	8000f00 <__aeabi_fdiv>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

				  float position_error = stepper1.step_counter-set_pos;
 80018f4:	4bbe      	ldr	r3, [pc, #760]	; (8001bf0 <main+0x5a0>)
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	4bbf      	ldr	r3, [pc, #764]	; (8001bf8 <main+0x5a8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f9f6 	bl	8000cf0 <__aeabi_i2f>
 8001904:	4603      	mov	r3, r0
 8001906:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

				  float desired_speed = (position_error * 0.05);
 800190a:	f8d7 0158 	ldr.w	r0, [r7, #344]	; 0x158
 800190e:	f7fe fd95 	bl	800043c <__aeabi_f2d>
 8001912:	a3b5      	add	r3, pc, #724	; (adr r3, 8001be8 <main+0x598>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7fe fde8 	bl	80004ec <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f8da 	bl	8000adc <__aeabi_d2f>
 8001928:	4602      	mov	r2, r0
 800192a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800192e:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001932:	601a      	str	r2, [r3, #0]
				  saturation(-40, 40, &desired_speed);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	461a      	mov	r2, r3
 800193a:	49b0      	ldr	r1, [pc, #704]	; (8001bfc <main+0x5ac>)
 800193c:	48b0      	ldr	r0, [pc, #704]	; (8001c00 <main+0x5b0>)
 800193e:	f7ff fd01 	bl	8001344 <saturation>

				  pos_pid.error = filter(&pos_pid_filter, robot_speed - desired_speed);
 8001942:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001946:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001952:	f7ff f917 	bl	8000b84 <__aeabi_fsub>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fdf4 	bl	800154e <filter>
 8001966:	4602      	mov	r2, r0
 8001968:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800196c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001970:	611a      	str	r2, [r3, #16]


				  // pos P
				  float p_pos = pos_pid.error * pos_pid.kp;
 8001972:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001976:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001980:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	4610      	mov	r0, r2
 800198a:	f7ff fa05 	bl	8000d98 <__aeabi_fmul>
 800198e:	4603      	mov	r3, r0
 8001990:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

				  // pos I
				  pos_pid.i += 0.5 * (pos_pid.error + pos_pid.prev_error) * pos_pid.ki * time_delta;
 8001994:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001998:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fd4c 	bl	800043c <__aeabi_f2d>
 80019a4:	4604      	mov	r4, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80019ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80019b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7ff f8e2 	bl	8000b88 <__addsf3>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fd38 	bl	800043c <__aeabi_f2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <main+0x5b4>)
 80019d2:	f7fe fd8b 	bl	80004ec <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4690      	mov	r8, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80019e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd27 	bl	800043c <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4640      	mov	r0, r8
 80019f4:	4649      	mov	r1, r9
 80019f6:	f7fe fd79 	bl	80004ec <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4690      	mov	r8, r2
 8001a00:	4699      	mov	r9, r3
 8001a02:	f8d7 0160 	ldr.w	r0, [r7, #352]	; 0x160
 8001a06:	f7fe fd19 	bl	800043c <__aeabi_f2d>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4649      	mov	r1, r9
 8001a12:	f7fe fd6b 	bl	80004ec <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe fbaf 	bl	8000180 <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f857 	bl	8000adc <__aeabi_d2f>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001a34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a38:	60da      	str	r2, [r3, #12]
				  saturation(-0.2, 0.2, &pos_pid.i);
 8001a3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a3e:	330c      	adds	r3, #12
 8001a40:	461a      	mov	r2, r3
 8001a42:	4971      	ldr	r1, [pc, #452]	; (8001c08 <main+0x5b8>)
 8001a44:	4871      	ldr	r0, [pc, #452]	; (8001c0c <main+0x5bc>)
 8001a46:	f7ff fc7d 	bl	8001344 <saturation>

				  // pos D
				  float filtered_error = filter(&pos_pid_derivative_filter, pos_pid.error);
 8001a4a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001a4e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fd77 	bl	800154e <filter>
 8001a60:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
				  float d_pos = pos_pid.kd * (filtered_error - pos_pid.prev_error) / time_delta;
 8001a64:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001a68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a6c:	689c      	ldr	r4, [r3, #8]
 8001a6e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001a72:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8001a7e:	f7ff f881 	bl	8000b84 <__aeabi_fsub>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff f986 	bl	8000d98 <__aeabi_fmul>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fa34 	bl	8000f00 <__aeabi_fdiv>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

				  //tacho feedback
				  float tacho_feedback_angle = filter(&speed_filter, robot_speed) * k_tacho_feedback;
 8001a9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aa2:	f8d7 115c 	ldr.w	r1, [r7, #348]	; 0x15c
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fd51 	bl	800154e <filter>
 8001aac:	4603      	mov	r3, r0
 8001aae:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f970 	bl	8000d98 <__aeabi_fmul>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001ac0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001ac4:	601a      	str	r2, [r3, #0]
				  saturation(-0.15, 0.15, &tacho_feedback_angle);
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	461a      	mov	r2, r3
 8001acc:	4950      	ldr	r1, [pc, #320]	; (8001c10 <main+0x5c0>)
 8001ace:	4851      	ldr	r0, [pc, #324]	; (8001c14 <main+0x5c4>)
 8001ad0:	f7ff fc38 	bl	8001344 <saturation>

//				  if(fabs(robot_speed) < 5){
//					 tacho_feedback_angle = 0;
//				  }

				  float target_angle = filter(&target_angle_filter, p_pos + pos_pid.i + d_pos + tacho_feedback_angle);
 8001ad4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001ad8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff f850 	bl	8000b88 <__addsf3>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f84a 	bl	8000b88 <__addsf3>
 8001af4:	4603      	mov	r3, r0
 8001af6:	461a      	mov	r2, r3
 8001af8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001afc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4610      	mov	r0, r2
 8001b06:	f7ff f83f 	bl	8000b88 <__addsf3>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fd1a 	bl	800154e <filter>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b24:	601a      	str	r2, [r3, #0]

				  saturation(-0.25, 0.25, &target_angle);
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	461a      	mov	r2, r3
 8001b2a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001b2e:	483a      	ldr	r0, [pc, #232]	; (8001c18 <main+0x5c8>)
 8001b30:	f7ff fc08 	bl	8001344 <saturation>



				  // angle PID
				  angle_pid.error =  target_angle - mpu.x_angle;
 8001b34:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b38:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f81d 	bl	8000b84 <__aeabi_fsub>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b56:	611a      	str	r2, [r3, #16]

				  // P
				  float p = angle_pid.error * angle_pid.kp;
 8001b58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b60:	691a      	ldr	r2, [r3, #16]
 8001b62:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f7ff f912 	bl	8000d98 <__aeabi_fmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

				  // I with staturation
				  angle_pid.i += ((angle_pid.error + angle_pid.prev_error) * time_delta * angle_pid.ki) / 2;
 8001b7a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b82:	68dc      	ldr	r4, [r3, #12]
 8001b84:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f7fe fff4 	bl	8000b88 <__addsf3>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff f8f6 	bl	8000d98 <__aeabi_fmul>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f7ff f8eb 	bl	8000d98 <__aeabi_fmul>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff f999 	bl	8000f00 <__aeabi_fdiv>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7fe ffd8 	bl	8000b88 <__addsf3>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001be4:	e01a      	b.n	8001c1c <main+0x5cc>
 8001be6:	bf00      	nop
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	3fa99999 	.word	0x3fa99999
 8001bf0:	20000298 	.word	0x20000298
 8001bf4:	200002cc 	.word	0x200002cc
 8001bf8:	20000300 	.word	0x20000300
 8001bfc:	42200000 	.word	0x42200000
 8001c00:	c2200000 	.word	0xc2200000
 8001c04:	3fe00000 	.word	0x3fe00000
 8001c08:	3e4ccccd 	.word	0x3e4ccccd
 8001c0c:	be4ccccd 	.word	0xbe4ccccd
 8001c10:	3e19999a 	.word	0x3e19999a
 8001c14:	be19999a 	.word	0xbe19999a
 8001c18:	be800000 	.word	0xbe800000
 8001c1c:	60da      	str	r2, [r3, #12]
				  saturation(-60, 60, &angle_pid.i);
 8001c1e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c22:	330c      	adds	r3, #12
 8001c24:	461a      	mov	r2, r3
 8001c26:	4970      	ldr	r1, [pc, #448]	; (8001de8 <main+0x798>)
 8001c28:	4870      	ldr	r0, [pc, #448]	; (8001dec <main+0x79c>)
 8001c2a:	f7ff fb8b 	bl	8001344 <saturation>

				  // D
				  filtered_error = filter(&angle_pid_derivative_filter, angle_pid.error);
 8001c2e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fc85 	bl	800154e <filter>
 8001c44:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
				  float d = angle_pid.kd * (filtered_error - angle_pid.prev_error)/time_delta;
 8001c48:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c50:	689c      	ldr	r4, [r3, #8]
 8001c52:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001c56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8001c62:	f7fe ff8f 	bl	8000b84 <__aeabi_fsub>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff f894 	bl	8000d98 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f8d7 1160 	ldr.w	r1, [r7, #352]	; 0x160
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f942 	bl	8000f00 <__aeabi_fdiv>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

				  float pid = p + angle_pid.i + d;
 8001c82:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe ff79 	bl	8000b88 <__addsf3>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f8d7 0144 	ldr.w	r0, [r7, #324]	; 0x144
 8001c9e:	f7fe ff73 	bl	8000b88 <__addsf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140


				  if(spin_duration_ms > 0){
 8001ca8:	4b51      	ldr	r3, [pc, #324]	; (8001df0 <main+0x7a0>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d028      	beq.n	8001d02 <main+0x6b2>
					  stepper_set_speed(&stepper1, pid + spin_value);
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <main+0x7a4>)
 8001cb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f81a 	bl	8000cf0 <__aeabi_i2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe ff60 	bl	8000b88 <__addsf3>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	484a      	ldr	r0, [pc, #296]	; (8001df8 <main+0x7a8>)
 8001cce:	f000 fdbf 	bl	8002850 <stepper_set_speed>
				  	  stepper_set_speed(&stepper2, pid - spin_value);
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <main+0x7a4>)
 8001cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f809 	bl	8000cf0 <__aeabi_i2f>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8001ce6:	f7fe ff4d 	bl	8000b84 <__aeabi_fsub>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4843      	ldr	r0, [pc, #268]	; (8001dfc <main+0x7ac>)
 8001cf0:	f000 fdae 	bl	8002850 <stepper_set_speed>
				  	  spin_duration_ms --;
 8001cf4:	4b3e      	ldr	r3, [pc, #248]	; (8001df0 <main+0x7a0>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <main+0x7a0>)
 8001cfe:	801a      	strh	r2, [r3, #0]
 8001d00:	e009      	b.n	8001d16 <main+0x6c6>
				  }
				  else{
					  stepper_set_speed(&stepper1, pid);
 8001d02:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d06:	483c      	ldr	r0, [pc, #240]	; (8001df8 <main+0x7a8>)
 8001d08:	f000 fda2 	bl	8002850 <stepper_set_speed>
				  	  stepper_set_speed(&stepper2, pid);
 8001d0c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d10:	483a      	ldr	r0, [pc, #232]	; (8001dfc <main+0x7ac>)
 8001d12:	f000 fd9d 	bl	8002850 <stepper_set_speed>
				  }

				  angle_pid.prev_error = angle_pid.error;
 8001d16:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d28:	615a      	str	r2, [r3, #20]
				  pos_pid.prev_error = pos_pid.error;
 8001d2a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d2e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001d38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d3c:	615a      	str	r2, [r3, #20]


				  execute_uart_command(&uart_interface);
 8001d3e:	4830      	ldr	r0, [pc, #192]	; (8001e00 <main+0x7b0>)
 8001d40:	f001 f9f0 	bl	8003124 <execute_uart_command>
				  start_uart_interface(&uart_interface);
 8001d44:	482e      	ldr	r0, [pc, #184]	; (8001e00 <main+0x7b0>)
 8001d46:	f001 f99b 	bl	8003080 <start_uart_interface>
		  while(fabsf(mpu.x_angle) < 0.5){
 8001d4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff f9bc 	bl	80010d4 <__aeabi_fcmplt>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f47f ad98 	bne.w	8001894 <main+0x244>
			  }


		  }
		  //stop motors
		  stepper_set_speed(&stepper1, 0);
 8001d64:	f04f 0100 	mov.w	r1, #0
 8001d68:	4823      	ldr	r0, [pc, #140]	; (8001df8 <main+0x7a8>)
 8001d6a:	f000 fd71 	bl	8002850 <stepper_set_speed>
		  stepper_set_speed(&stepper2, 0);
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	4822      	ldr	r0, [pc, #136]	; (8001dfc <main+0x7ac>)
 8001d74:	f000 fd6c 	bl	8002850 <stepper_set_speed>
		  stepper_enable(&stepper1, 0);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	481f      	ldr	r0, [pc, #124]	; (8001df8 <main+0x7a8>)
 8001d7c:	f000 fd33 	bl	80027e6 <stepper_enable>
		  stepper_enable(&stepper2, 0);
 8001d80:	2100      	movs	r1, #0
 8001d82:	481e      	ldr	r0, [pc, #120]	; (8001dfc <main+0x7ac>)
 8001d84:	f000 fd2f 	bl	80027e6 <stepper_enable>

		  pid_reset(&angle_pid);
 8001d88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fca8 	bl	80026e2 <pid_reset>
		  pid_reset(&pos_pid);
 8001d92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 fca3 	bl	80026e2 <pid_reset>

		  reset_filter(&speed_filter);
 8001d9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fc0b 	bl	80015bc <reset_filter>
		  reset_filter(&pos_pid_derivative_filter);
 8001da6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fc06 	bl	80015bc <reset_filter>
		  reset_filter(&pos_pid_filter);
 8001db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fc01 	bl	80015bc <reset_filter>
		  reset_filter(&angle_pid_derivative_filter);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fbfc 	bl	80015bc <reset_filter>
		  reset_filter(&target_angle_filter);
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fbf7 	bl	80015bc <reset_filter>


		  set_pos = 0;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <main+0x7b4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
		  set_speed = 0;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <main+0x7b8>)
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

	  }


	  HAL_Delay(delay);
 8001ddc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 fcd5 	bl	8003790 <HAL_Delay>
	  mpu_calc_x_angle(&mpu);
 8001de6:	e4f7      	b.n	80017d8 <main+0x188>
 8001de8:	42700000 	.word	0x42700000
 8001dec:	c2700000 	.word	0xc2700000
 8001df0:	20000398 	.word	0x20000398
 8001df4:	2000039a 	.word	0x2000039a
 8001df8:	20000298 	.word	0x20000298
 8001dfc:	200002cc 	.word	0x200002cc
 8001e00:	20000324 	.word	0x20000324
 8001e04:	20000300 	.word	0x20000300
 8001e08:	20000304 	.word	0x20000304

08001e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b090      	sub	sp, #64	; 0x40
 8001e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e12:	f107 0318 	add.w	r3, r7, #24
 8001e16:	2228      	movs	r2, #40	; 0x28
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f007 fb28 	bl	8009470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e40:	2302      	movs	r3, #2
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e50:	f107 0318 	add.w	r3, r7, #24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fa71 	bl	800533c <HAL_RCC_OscConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e60:	f000 f81a 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e64:	230f      	movs	r3, #15
 8001e66:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2102      	movs	r1, #2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fcde 	bl	8005840 <HAL_RCC_ClockConfig>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e8a:	f000 f805 	bl	8001e98 <Error_Handler>
  }
}
 8001e8e:	bf00      	nop
 8001e90:	3740      	adds	r7, #64	; 0x40
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  stepper_set_speed(&stepper1, 0);
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <Error_Handler+0x30>)
 8001ea2:	f000 fcd5 	bl	8002850 <stepper_set_speed>
  stepper_set_speed(&stepper2, 0);
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	4808      	ldr	r0, [pc, #32]	; (8001ecc <Error_Handler+0x34>)
 8001eac:	f000 fcd0 	bl	8002850 <stepper_set_speed>
  stepper_enable(&stepper1, 0);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <Error_Handler+0x30>)
 8001eb4:	f000 fc97 	bl	80027e6 <stepper_enable>
  stepper_enable(&stepper2, 0);
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4804      	ldr	r0, [pc, #16]	; (8001ecc <Error_Handler+0x34>)
 8001ebc:	f000 fc93 	bl	80027e6 <stepper_enable>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec0:	b672      	cpsid	i
}
 8001ec2:	bf00      	nop

  __disable_irq();
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <Error_Handler+0x2c>
 8001ec6:	bf00      	nop
 8001ec8:	20000298 	.word	0x20000298
 8001ecc:	200002cc 	.word	0x200002cc

08001ed0 <mpu_write_reg>:




static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af04      	add	r7, sp, #16
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	70fb      	strb	r3, [r7, #3]
 8001edc:	4613      	mov	r3, r2
 8001ede:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	791b      	ldrb	r3, [r3, #4]
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	9302      	str	r3, [sp, #8]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	1cbb      	adds	r3, r7, #2
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	2301      	movs	r3, #1
 8001efe:	f002 fafb 	bl	80044f8 <HAL_I2C_Mem_Write>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b088      	sub	sp, #32
 8001f0e:	af04      	add	r7, sp, #16
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	791b      	ldrb	r3, [r3, #4]
 8001f1e:	b299      	uxth	r1, r3
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f04f 33ff 	mov.w	r3, #4294967295
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f107 030f 	add.w	r3, r7, #15
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2301      	movs	r3, #1
 8001f36:	f002 fbd9 	bl	80046ec <HAL_I2C_Mem_Read>
	return tmp;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001f50:	216b      	movs	r1, #107	; 0x6b
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff ffd9 	bl	8001f0a <mpu_read_reg>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f62:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	01db      	lsls	r3, r3, #7
 8001f68:	b25a      	sxtb	r2, r3
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	b25b      	sxtb	r3, r3
 8001f72:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	461a      	mov	r2, r3
 8001f78:	216b      	movs	r1, #107	; 0x6b
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffa8 	bl	8001ed0 <mpu_write_reg>
}
 8001f80:	bf00      	nop
 8001f82:	3710      	adds	r7, #16
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001f94:	216b      	movs	r1, #107	; 0x6b
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffb7 	bl	8001f0a <mpu_read_reg>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fa6:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	019b      	lsls	r3, r3, #6
 8001fac:	b25b      	sxtb	r3, r3
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	b25a      	sxtb	r2, r3
 8001fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	216b      	movs	r1, #107	; 0x6b
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff ff83 	bl	8001ed0 <mpu_write_reg>
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 8001fe0:	211b      	movs	r1, #27
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ff91 	bl	8001f0a <mpu_read_reg>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	f023 0318 	bic.w	r3, r3, #24
 8001ff2:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	f003 0318 	and.w	r3, r3, #24
 8001ffe:	b25a      	sxtb	r2, r3
 8002000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002004:	4313      	orrs	r3, r2
 8002006:	b25b      	sxtb	r3, r3
 8002008:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	461a      	mov	r2, r3
 800200e:	211b      	movs	r1, #27
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff5d 	bl	8001ed0 <mpu_write_reg>

	switch (range){
 8002016:	78fb      	ldrb	r3, [r7, #3]
 8002018:	2b03      	cmp	r3, #3
 800201a:	d81b      	bhi.n	8002054 <set_gyro_scale+0x80>
 800201c:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <set_gyro_scale+0x50>)
 800201e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002022:	bf00      	nop
 8002024:	08002035 	.word	0x08002035
 8002028:	0800203d 	.word	0x0800203d
 800202c:	08002045 	.word	0x08002045
 8002030:	0800204d 	.word	0x0800204d
	case range_250:
		mpu->gyro_scale = 0.007633;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <set_gyro_scale+0x8c>)
 8002038:	609a      	str	r2, [r3, #8]
		break;
 800203a:	e00c      	b.n	8002056 <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <set_gyro_scale+0x90>)
 8002040:	609a      	str	r2, [r3, #8]
		break;
 8002042:	e008      	b.n	8002056 <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a08      	ldr	r2, [pc, #32]	; (8002068 <set_gyro_scale+0x94>)
 8002048:	609a      	str	r2, [r3, #8]
		break;
 800204a:	e004      	b.n	8002056 <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <set_gyro_scale+0x98>)
 8002050:	609a      	str	r2, [r3, #8]
		break;
 8002052:	e000      	b.n	8002056 <set_gyro_scale+0x82>
	default:
		break;
 8002054:	bf00      	nop
	}
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	3bfa1e3f 	.word	0x3bfa1e3f
 8002064:	3c7a2270 	.word	0x3c7a2270
 8002068:	3cf9bfdf 	.word	0x3cf9bfdf
 800206c:	3d79c0ec 	.word	0x3d79c0ec

08002070 <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 800207c:	211c      	movs	r1, #28
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff43 	bl	8001f0a <mpu_read_reg>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	f023 0318 	bic.w	r3, r3, #24
 800208e:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	b25b      	sxtb	r3, r3
 8002096:	f003 0318 	and.w	r3, r3, #24
 800209a:	b25a      	sxtb	r2, r3
 800209c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	461a      	mov	r2, r3
 80020aa:	211c      	movs	r1, #28
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff0f 	bl	8001ed0 <mpu_write_reg>

	switch (range)
 80020b2:	78fb      	ldrb	r3, [r7, #3]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d81b      	bhi.n	80020f0 <set_accelerometer_scale+0x80>
 80020b8:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <set_accelerometer_scale+0x50>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	080020d9 	.word	0x080020d9
 80020c8:	080020e1 	.word	0x080020e1
 80020cc:	080020e9 	.word	0x080020e9
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a0a      	ldr	r2, [pc, #40]	; (80020fc <set_accelerometer_scale+0x8c>)
 80020d4:	60da      	str	r2, [r3, #12]
		break;
 80020d6:	e00c      	b.n	80020f2 <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a09      	ldr	r2, [pc, #36]	; (8002100 <set_accelerometer_scale+0x90>)
 80020dc:	60da      	str	r2, [r3, #12]
		break;
 80020de:	e008      	b.n	80020f2 <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <set_accelerometer_scale+0x94>)
 80020e4:	60da      	str	r2, [r3, #12]
		break;
 80020e6:	e004      	b.n	80020f2 <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <set_accelerometer_scale+0x98>)
 80020ec:	60da      	str	r2, [r3, #12]
		break;
 80020ee:	e000      	b.n	80020f2 <set_accelerometer_scale+0x82>
	default:
		break;
 80020f0:	bf00      	nop
	}
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	387fda40 	.word	0x387fda40
 8002100:	38ffda40 	.word	0x38ffda40
 8002104:	397fda40 	.word	0x397fda40
 8002108:	39fff518 	.word	0x39fff518

0800210c <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 8002118:	211a      	movs	r1, #26
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fef5 	bl	8001f0a <mpu_read_reg>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	f023 0307 	bic.w	r3, r3, #7
 800212a:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 800212c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	b25a      	sxtb	r2, r3
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4313      	orrs	r3, r2
 800213c:	b25b      	sxtb	r3, r3
 800213e:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	461a      	mov	r2, r3
 8002144:	211a      	movs	r1, #26
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fec2 	bl	8001ed0 <mpu_write_reg>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 800215c:	2175      	movs	r1, #117	; 0x75
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7ff fed3 	bl	8001f0a <mpu_read_reg>
 8002164:	4603      	mov	r3, r0
 8002166:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b68      	cmp	r3, #104	; 0x68
 800216c:	d101      	bne.n	8002172 <mpu_who_am_i+0x1e>
		return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
	}
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b096      	sub	sp, #88	; 0x58
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	71fb      	strb	r3, [r7, #7]
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	617b      	str	r3, [r7, #20]
	mpu.i2c_address = i2c_address;
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	763b      	strb	r3, [r7, #24]


	mpu_reset(&mpu, 1);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	2101      	movs	r1, #1
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fed3 	bl	8001f44 <mpu_reset>

	HAL_Delay(1000);
 800219e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021a2:	f001 faf5 	bl	8003790 <HAL_Delay>

	mpu_sleep_mode(&mpu, 0);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff feeb 	bl	8001f88 <mpu_sleep_mode>

	set_gyro_scale(&mpu, range_250);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff0b 	bl	8001fd4 <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff53 	bl	8002070 <set_accelerometer_scale>

	mpu.gx_bias = 0;
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
	mpu.gy_bias = 0;
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
	mpu.gz_bias = 0;
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
	mpu.lst_time_x_angle = HAL_GetTick();
 80021dc:	f001 face 	bl	800377c <HAL_GetTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	653b      	str	r3, [r7, #80]	; 0x50
	mpu.lst_time_y_angle = HAL_GetTick();
 80021e4:	f001 faca 	bl	800377c <HAL_GetTick>
 80021e8:	4603      	mov	r3, r0
 80021ea:	657b      	str	r3, [r7, #84]	; 0x54


	return mpu;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f107 0314 	add.w	r3, r7, #20
 80021f4:	2244      	movs	r2, #68	; 0x44
 80021f6:	4619      	mov	r1, r3
 80021f8:	f007 f9d8 	bl	80095ac <memcpy>
}
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	3758      	adds	r7, #88	; 0x58
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <mpu_get_data>:



void mpu_get_data(mpu6050_typedef *mpu)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af04      	add	r7, sp, #16
 800220a:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	b299      	uxth	r1, r3
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	9302      	str	r3, [sp, #8]
 800221c:	230e      	movs	r3, #14
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2301      	movs	r3, #1
 8002228:	223b      	movs	r2, #59	; 0x3b
 800222a:	f002 fa5f 	bl	80046ec <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 800222e:	7a3b      	ldrb	r3, [r7, #8]
 8002230:	021b      	lsls	r3, r3, #8
 8002232:	b21a      	sxth	r2, r3
 8002234:	7a7b      	ldrb	r3, [r7, #9]
 8002236:	b21b      	sxth	r3, r3
 8002238:	4313      	orrs	r3, r2
 800223a:	b21b      	sxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fd57 	bl	8000cf0 <__aeabi_i2f>
 8002242:	4602      	mov	r2, r0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f7fe fda4 	bl	8000d98 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 8002258:	7abb      	ldrb	r3, [r7, #10]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	b21a      	sxth	r2, r3
 800225e:	7afb      	ldrb	r3, [r7, #11]
 8002260:	b21b      	sxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fd42 	bl	8000cf0 <__aeabi_i2f>
 800226c:	4602      	mov	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fe fd8f 	bl	8000d98 <__aeabi_fmul>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 8002282:	7b3b      	ldrb	r3, [r7, #12]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	b21a      	sxth	r2, r3
 8002288:	7b7b      	ldrb	r3, [r7, #13]
 800228a:	b21b      	sxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b21b      	sxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fd2d 	bl	8000cf0 <__aeabi_i2f>
 8002296:	4602      	mov	r2, r0
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4619      	mov	r1, r3
 800229e:	4610      	mov	r0, r2
 80022a0:	f7fe fd7a 	bl	8000d98 <__aeabi_fmul>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 80022ac:	7c3b      	ldrb	r3, [r7, #16]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	7c7b      	ldrb	r3, [r7, #17]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fd18 	bl	8000cf0 <__aeabi_i2f>
 80022c0:	4602      	mov	r2, r0
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7fe fd65 	bl	8000d98 <__aeabi_fmul>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	4619      	mov	r1, r3
 80022d8:	4610      	mov	r0, r2
 80022da:	f7fe fc53 	bl	8000b84 <__aeabi_fsub>
 80022de:	4603      	mov	r3, r0
 80022e0:	461a      	mov	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 80022e6:	7cbb      	ldrb	r3, [r7, #18]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	4313      	orrs	r3, r2
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe fcfb 	bl	8000cf0 <__aeabi_i2f>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	4619      	mov	r1, r3
 8002302:	4610      	mov	r0, r2
 8002304:	f7fe fd48 	bl	8000d98 <__aeabi_fmul>
 8002308:	4603      	mov	r3, r0
 800230a:	461a      	mov	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4619      	mov	r1, r3
 8002312:	4610      	mov	r0, r2
 8002314:	f7fe fc36 	bl	8000b84 <__aeabi_fsub>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 8002320:	7d3b      	ldrb	r3, [r7, #20]
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	b21a      	sxth	r2, r3
 8002326:	7d7b      	ldrb	r3, [r7, #21]
 8002328:	b21b      	sxth	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	b21b      	sxth	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fcde 	bl	8000cf0 <__aeabi_i2f>
 8002334:	4602      	mov	r2, r0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7fe fd2b 	bl	8000d98 <__aeabi_fmul>
 8002342:	4603      	mov	r3, r0
 8002344:	461a      	mov	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	4619      	mov	r1, r3
 800234c:	4610      	mov	r0, r2
 800234e:	f7fe fc19 	bl	8000b84 <__aeabi_fsub>
 8002352:	4603      	mov	r3, r0
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	631a      	str	r2, [r3, #48]	; 0x30
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <mpu_gyro_calibration>:


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800236c:	2200      	movs	r2, #0
 800236e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002372:	485e      	ldr	r0, [pc, #376]	; (80024ec <mpu_gyro_calibration+0x188>)
 8002374:	f001 ff64 	bl	8004240 <HAL_GPIO_WritePin>
	uint8_t counter = 100;
 8002378:	2364      	movs	r3, #100	; 0x64
 800237a:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	e060      	b.n	8002456 <mpu_gyro_calibration+0xf2>
	{
		mpu_get_data(mpu);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff35 	bl	8002204 <mpu_get_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe feb2 	bl	8001110 <__aeabi_fcmpgt>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d117      	bne.n	80023e2 <mpu_gyro_calibration+0x7e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ba:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fea6 	bl	8001110 <__aeabi_fcmpgt>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10b      	bne.n	80023e2 <mpu_gyro_calibration+0x7e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fe9a 	bl	8001110 <__aeabi_fcmpgt>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01b      	beq.n	800241a <mpu_gyro_calibration+0xb6>
			i = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
			gx_sum = 0;
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
			gy_sum = 0;
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
			gz_sum = 0;
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023fe:	483b      	ldr	r0, [pc, #236]	; (80024ec <mpu_gyro_calibration+0x188>)
 8002400:	f001 ff1e 	bl	8004240 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002408:	f001 f9c2 	bl	8003790 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002412:	4836      	ldr	r0, [pc, #216]	; (80024ec <mpu_gyro_calibration+0x188>)
 8002414:	f001 ff14 	bl	8004240 <HAL_GPIO_WritePin>
			continue;
 8002418:	e01a      	b.n	8002450 <mpu_gyro_calibration+0xec>
		}

		gx_sum += mpu->gx;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241e:	4619      	mov	r1, r3
 8002420:	69f8      	ldr	r0, [r7, #28]
 8002422:	f7fe fbb1 	bl	8000b88 <__addsf3>
 8002426:	4603      	mov	r3, r0
 8002428:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	4619      	mov	r1, r3
 8002430:	69b8      	ldr	r0, [r7, #24]
 8002432:	f7fe fba9 	bl	8000b88 <__addsf3>
 8002436:	4603      	mov	r3, r0
 8002438:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4619      	mov	r1, r3
 8002440:	6978      	ldr	r0, [r7, #20]
 8002442:	f7fe fba1 	bl	8000b88 <__addsf3>
 8002446:	4603      	mov	r3, r0
 8002448:	617b      	str	r3, [r7, #20]

		HAL_Delay(4);
 800244a:	2004      	movs	r0, #4
 800244c:	f001 f9a0 	bl	8003790 <HAL_Delay>
	for(int i = 0; i < counter; i++)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	3301      	adds	r3, #1
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	429a      	cmp	r2, r3
 800245c:	db9a      	blt.n	8002394 <mpu_gyro_calibration+0x30>
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691c      	ldr	r4, [r3, #16]
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fc43 	bl	8000cf0 <__aeabi_i2f>
 800246a:	4603      	mov	r3, r0
 800246c:	4619      	mov	r1, r3
 800246e:	69f8      	ldr	r0, [r7, #28]
 8002470:	f7fe fd46 	bl	8000f00 <__aeabi_fdiv>
 8002474:	4603      	mov	r3, r0
 8002476:	4619      	mov	r1, r3
 8002478:	4620      	mov	r0, r4
 800247a:	f7fe fb85 	bl	8000b88 <__addsf3>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695c      	ldr	r4, [r3, #20]
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fc2f 	bl	8000cf0 <__aeabi_i2f>
 8002492:	4603      	mov	r3, r0
 8002494:	4619      	mov	r1, r3
 8002496:	69b8      	ldr	r0, [r7, #24]
 8002498:	f7fe fd32 	bl	8000f00 <__aeabi_fdiv>
 800249c:	4603      	mov	r3, r0
 800249e:	4619      	mov	r1, r3
 80024a0:	4620      	mov	r0, r4
 80024a2:	f7fe fb71 	bl	8000b88 <__addsf3>
 80024a6:	4603      	mov	r3, r0
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699c      	ldr	r4, [r3, #24]
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc1b 	bl	8000cf0 <__aeabi_i2f>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4619      	mov	r1, r3
 80024be:	6978      	ldr	r0, [r7, #20]
 80024c0:	f7fe fd1e 	bl	8000f00 <__aeabi_fdiv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4619      	mov	r1, r3
 80024c8:	4620      	mov	r0, r4
 80024ca:	f7fe fb5d 	bl	8000b88 <__addsf3>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80024d6:	2201      	movs	r2, #1
 80024d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <mpu_gyro_calibration+0x188>)
 80024de:	f001 feaf 	bl	8004240 <HAL_GPIO_WritePin>
}
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40011000 	.word	0x40011000

080024f0 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ax, mpu->az) + M_PI/2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd ff9d 	bl	800043c <__aeabi_f2d>
 8002502:	4604      	mov	r4, r0
 8002504:	460d      	mov	r5, r1
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd ff96 	bl	800043c <__aeabi_f2d>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4620      	mov	r0, r4
 8002516:	4629      	mov	r1, r5
 8002518:	f009 faea 	bl	800baf0 <atan2>
 800251c:	a308      	add	r3, pc, #32	; (adr r3, 8002540 <mpu_get_acc_x_angle+0x50>)
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f7fd fe2d 	bl	8000180 <__adddf3>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f7fe fad5 	bl	8000adc <__aeabi_d2f>
 8002532:	4603      	mov	r3, r0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bdb0      	pop	{r4, r5, r7, pc}
 800253c:	f3af 8000 	nop.w
 8002540:	54442d18 	.word	0x54442d18
 8002544:	3ff921fb 	.word	0x3ff921fb

08002548 <mpu_calc_x_angle>:

}


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
	mpu_get_data(mpu);
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff fe56 	bl	8002204 <mpu_get_data>
	float delta = (HAL_GetTick() - mpu->lst_time_x_angle) / 1000.0;
 8002558:	f001 f910 	bl	800377c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4618      	mov	r0, r3
 8002566:	f7fd ff47 	bl	80003f8 <__aeabi_ui2d>
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	4b46      	ldr	r3, [pc, #280]	; (8002688 <mpu_calc_x_angle+0x140>)
 8002570:	f7fe f8e6 	bl	8000740 <__aeabi_ddiv>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	f7fe faae 	bl	8000adc <__aeabi_d2f>
 8002580:	4603      	mov	r3, r0
 8002582:	617b      	str	r3, [r7, #20]
	mpu->lst_time_x_angle = HAL_GetTick();
 8002584:	f001 f8fa 	bl	800377c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	63da      	str	r2, [r3, #60]	; 0x3c
	if(delta > 0.01)
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f7fd ff54 	bl	800043c <__aeabi_f2d>
 8002594:	a338      	add	r3, pc, #224	; (adr r3, 8002678 <mpu_calc_x_angle+0x130>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fe fa37 	bl	8000a0c <__aeabi_dcmpgt>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <mpu_calc_x_angle+0x74>
	{
		mpu->x_angle = mpu_get_acc_x_angle(mpu);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff ffa3 	bl	80024f0 <mpu_get_acc_x_angle>
 80025aa:	4602      	mov	r2, r0
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	635a      	str	r2, [r3, #52]	; 0x34
		mpu->lst_time_x_angle = HAL_GetTick();
 80025b0:	f001 f8e4 	bl	800377c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		//complementary filter
		float alpha = 0.005;
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
	}
}
 80025ba:	e055      	b.n	8002668 <mpu_calc_x_angle+0x120>
		float alpha = 0.005;
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <mpu_calc_x_angle+0x144>)
 80025be:	613b      	str	r3, [r7, #16]
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff ff95 	bl	80024f0 <mpu_get_acc_x_angle>
 80025c6:	4603      	mov	r3, r0
 80025c8:	6939      	ldr	r1, [r7, #16]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fbe4 	bl	8000d98 <__aeabi_fmul>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd ff32 	bl	800043c <__aeabi_f2d>
 80025d8:	4604      	mov	r4, r0
 80025da:	460d      	mov	r5, r1
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80025e2:	f7fe facf 	bl	8000b84 <__aeabi_fsub>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff27 	bl	800043c <__aeabi_f2d>
 80025ee:	4680      	mov	r8, r0
 80025f0:	4689      	mov	r9, r1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff20 	bl	800043c <__aeabi_f2d>
 80025fc:	4682      	mov	sl, r0
 80025fe:	468b      	mov	fp, r1
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ff17 	bl	800043c <__aeabi_f2d>
 800260e:	a31c      	add	r3, pc, #112	; (adr r3, 8002680 <mpu_calc_x_angle+0x138>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f7fd ff6a 	bl	80004ec <__aeabi_dmul>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	e9c7 2300 	strd	r2, r3, [r7]
 8002620:	6978      	ldr	r0, [r7, #20]
 8002622:	f7fd ff0b 	bl	800043c <__aeabi_f2d>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800262e:	f7fd ff5d 	bl	80004ec <__aeabi_dmul>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4650      	mov	r0, sl
 8002638:	4659      	mov	r1, fp
 800263a:	f7fd fda1 	bl	8000180 <__adddf3>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4640      	mov	r0, r8
 8002644:	4649      	mov	r1, r9
 8002646:	f7fd ff51 	bl	80004ec <__aeabi_dmul>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	f7fd fd95 	bl	8000180 <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fa3d 	bl	8000adc <__aeabi_d2f>
 8002662:	4602      	mov	r2, r0
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002668:	bf00      	nop
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002672:	bf00      	nop
 8002674:	f3af 8000 	nop.w
 8002678:	47ae147b 	.word	0x47ae147b
 800267c:	3f847ae1 	.word	0x3f847ae1
 8002680:	22d4405f 	.word	0x22d4405f
 8002684:	3f91df47 	.word	0x3f91df47
 8002688:	408f4000 	.word	0x408f4000
 800268c:	3ba3d70a 	.word	0x3ba3d70a

08002690 <pid_init>:
#include "pid_lib.h"




pid_typedef pid_init(float kp, float ki, float kd){
 8002690:	b4b0      	push	{r4, r5, r7}
 8002692:	b08d      	sub	sp, #52	; 0x34
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
	pid_typedef pid = {kp, ki, kd, 0, 0, 1};
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
 80026ac:	611a      	str	r2, [r3, #16]
 80026ae:	615a      	str	r2, [r3, #20]
 80026b0:	619a      	str	r2, [r3, #24]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	61bb      	str	r3, [r7, #24]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	61fb      	str	r3, [r7, #28]
 80026be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026c2:	62bb      	str	r3, [r7, #40]	; 0x28
	return pid;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	461d      	mov	r5, r3
 80026c8:	f107 0414 	add.w	r4, r7, #20
 80026cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026d4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	3734      	adds	r7, #52	; 0x34
 80026dc:	46bd      	mov	sp, r7
 80026de:	bcb0      	pop	{r4, r5, r7}
 80026e0:	4770      	bx	lr

080026e2 <pid_reset>:


void pid_reset(pid_typedef* pid){
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
	pid->i = 0;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <set_dir>:


extern volatile uint8_t spin_duration_ms;


static void set_dir(stepper_typedef *stepper, int dir){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	if((dir * stepper->dir_polarity) == 1){
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10d      	bne.n	8002738 <set_dir+0x34>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6918      	ldr	r0, [r3, #16]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8a9b      	ldrh	r3, [r3, #20]
 8002724:	b29b      	uxth	r3, r3
 8002726:	2201      	movs	r2, #1
 8002728:	4619      	mov	r1, r3
 800272a:	f001 fd89 	bl	8004240 <HAL_GPIO_WritePin>
		stepper->dir = 1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -1;
	}
}
 8002736:	e00c      	b.n	8002752 <set_dir+0x4e>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6918      	ldr	r0, [r3, #16]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	8a9b      	ldrh	r3, [r3, #20]
 8002740:	b29b      	uxth	r3, r3
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	f001 fd7b 	bl	8004240 <HAL_GPIO_WritePin>
		stepper->dir = -1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	22ff      	movs	r2, #255	; 0xff
 800274e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <stepper_init>:


//dir pin polarity : 1 or -1
void stepper_init(stepper_typedef *stepper, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *EN_Port, uint16_t EN_Pin,
		GPIO_TypeDef *DIR_Port, uint16_t DIR_Pin, unsigned int max_speed, int dir_polarity)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]
	stepper->htim = htim;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	601a      	str	r2, [r3, #0]
	stepper->Channel = Channel;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	605a      	str	r2, [r3, #4]

	stepper->EN_Port = EN_Port;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	609a      	str	r2, [r3, #8]
	stepper->EN_Pin = EN_Pin;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8b3a      	ldrh	r2, [r7, #24]
 800277e:	819a      	strh	r2, [r3, #12]
	stepper->DIR_Port = DIR_Port;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	611a      	str	r2, [r3, #16]
	stepper->DIR_Pin = DIR_Pin;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8c3a      	ldrh	r2, [r7, #32]
 800278a:	829a      	strh	r2, [r3, #20]

	stepper->step_counter = 0;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
	stepper->on_off = 0;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2020 	strb.w	r2, [r3, #32]
	stepper-> new_counter = 65000;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

	stepper->dir_polarity = dir_polarity;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
	stepper->max_speed = max_speed;
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	619a      	str	r2, [r3, #24]

	set_dir(stepper, 1);
 80027ae:	2101      	movs	r1, #1
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff ffa7 	bl	8002704 <set_dir>
	stepper_enable(stepper, 0);
 80027b6:	2100      	movs	r1, #0
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f814 	bl	80027e6 <stepper_enable>
	stepper_set_speed(stepper, 0);
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 f844 	bl	8002850 <stepper_set_speed>
	stepper->speed = 0;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28


	// start timer
	HAL_TIM_Base_Start_IT(htim);
 80027d0:	68b8      	ldr	r0, [r7, #8]
 80027d2:	f003 fa13 	bl	8005bfc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	68b8      	ldr	r0, [r7, #8]
 80027da:	f003 fab9 	bl	8005d50 <HAL_TIM_PWM_Start>
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <stepper_enable>:



void stepper_enable(stepper_typedef *stepper, bool en)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	70fb      	strb	r3, [r7, #3]
	if(en){
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <stepper_enable+0x2e>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6898      	ldr	r0, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	899b      	ldrh	r3, [r3, #12]
 8002800:	b29b      	uxth	r3, r3
 8002802:	2200      	movs	r2, #0
 8002804:	4619      	mov	r1, r3
 8002806:	f001 fd1b 	bl	8004240 <HAL_GPIO_WritePin>
		stepper->enable = 1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		stepper_set_speed(stepper, 0);
		stepper->enable = 0;
		stepper->on_off = 0;
		stepper->speed = 0;
	}
}
 8002812:	e019      	b.n	8002848 <stepper_enable+0x62>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6898      	ldr	r0, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	899b      	ldrh	r3, [r3, #12]
 800281c:	b29b      	uxth	r3, r3
 800281e:	2201      	movs	r2, #1
 8002820:	4619      	mov	r1, r3
 8002822:	f001 fd0d 	bl	8004240 <HAL_GPIO_WritePin>
		stepper_set_speed(stepper, 0);
 8002826:	f04f 0100 	mov.w	r1, #0
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f810 	bl	8002850 <stepper_set_speed>
		stepper->enable = 0;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		stepper->on_off = 0;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2020 	strb.w	r2, [r3, #32]
		stepper->speed = 0;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <stepper_set_speed>:



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 8002850:	b5b0      	push	{r4, r5, r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
	saturation(-100, 100, &speed);
 800285a:	463b      	mov	r3, r7
 800285c:	461a      	mov	r2, r3
 800285e:	497e      	ldr	r1, [pc, #504]	; (8002a58 <stepper_set_speed+0x208>)
 8002860:	487e      	ldr	r0, [pc, #504]	; (8002a5c <stepper_set_speed+0x20c>)
 8002862:	f7fe fd6f 	bl	8001344 <saturation>

	stepper->speed = speed;
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28

	if(speed == 0){
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f04f 0100 	mov.w	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fc24 	bl	80010c0 <__aeabi_fcmpeq>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d032      	beq.n	80028e4 <stepper_set_speed+0x94>
		stepper->on_off = 0;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2020 	strb.w	r2, [r3, #32]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d105      	bne.n	800289a <stepper_set_speed+0x4a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2200      	movs	r2, #0
 8002896:	635a      	str	r2, [r3, #52]	; 0x34
 8002898:	e018      	b.n	80028cc <stepper_set_speed+0x7c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d105      	bne.n	80028ae <stepper_set_speed+0x5e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	6393      	str	r3, [r2, #56]	; 0x38
 80028ac:	e00e      	b.n	80028cc <stepper_set_speed+0x7c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d105      	bne.n	80028c2 <stepper_set_speed+0x72>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2300      	movs	r3, #0
 80028be:	63d3      	str	r3, [r2, #60]	; 0x3c
 80028c0:	e004      	b.n	80028cc <stepper_set_speed+0x7c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	2300      	movs	r3, #0
 80028ca:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028e0:	60da      	str	r2, [r3, #12]
		if(speed > 0) set_dir(stepper, 1);
		else set_dir(stepper, -1);

	}

}
 80028e2:	e0ae      	b.n	8002a42 <stepper_set_speed+0x1f2>
		stepper->on_off = 1;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]
		speed = stepper->max_speed * (speed / 100.0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fd91 	bl	8000418 <__aeabi_i2d>
 80028f6:	4604      	mov	r4, r0
 80028f8:	460d      	mov	r5, r1
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fd9d 	bl	800043c <__aeabi_f2d>
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	4b56      	ldr	r3, [pc, #344]	; (8002a60 <stepper_set_speed+0x210>)
 8002908:	f7fd ff1a 	bl	8000740 <__aeabi_ddiv>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	f7fd fdea 	bl	80004ec <__aeabi_dmul>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe f8dc 	bl	8000adc <__aeabi_d2f>
 8002924:	4603      	mov	r3, r0
 8002926:	603b      	str	r3, [r7, #0]
		if(speed > stepper->max_speed) speed = stepper->max_speed;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe f9df 	bl	8000cf0 <__aeabi_i2f>
 8002932:	4602      	mov	r2, r0
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f7fe fbcb 	bl	80010d4 <__aeabi_fcmplt>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <stepper_set_speed+0x102>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe f9d1 	bl	8000cf0 <__aeabi_i2f>
 800294e:	4603      	mov	r3, r0
 8002950:	603b      	str	r3, [r7, #0]
		if(speed < -stepper->max_speed) speed = -stepper->max_speed;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	425b      	negs	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f9c9 	bl	8000cf0 <__aeabi_i2f>
 800295e:	4602      	mov	r2, r0
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7fe fbd3 	bl	8001110 <__aeabi_fcmpgt>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d007      	beq.n	8002980 <stepper_set_speed+0x130>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	425b      	negs	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f9ba 	bl	8000cf0 <__aeabi_i2f>
 800297c:	4603      	mov	r3, r0
 800297e:	603b      	str	r3, [r7, #0]
		if(speed > 0 && speed < 16) speed = 16;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f04f 0100 	mov.w	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe fbc2 	bl	8001110 <__aeabi_fcmpgt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <stepper_set_speed+0x15a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fb9b 	bl	80010d4 <__aeabi_fcmplt>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <stepper_set_speed+0x15a>
 80029a4:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80029a8:	603b      	str	r3, [r7, #0]
		if(speed < 0 && speed >-16) speed = -16;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fb8f 	bl	80010d4 <__aeabi_fcmplt>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d009      	beq.n	80029d0 <stepper_set_speed+0x180>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4929      	ldr	r1, [pc, #164]	; (8002a64 <stepper_set_speed+0x214>)
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fe fba5 	bl	8001110 <__aeabi_fcmpgt>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <stepper_set_speed+0x180>
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <stepper_set_speed+0x214>)
 80029ce:	603b      	str	r3, [r7, #0]
		uint16_t counter = (1.0/abs(speed)) * SEC2uSEC;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fba6 	bl	8001124 <__aeabi_f2iz>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bfb8      	it	lt
 80029de:	425b      	neglt	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fd19 	bl	8000418 <__aeabi_i2d>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	f04f 0000 	mov.w	r0, #0
 80029ee:	491e      	ldr	r1, [pc, #120]	; (8002a68 <stepper_set_speed+0x218>)
 80029f0:	f7fd fea6 	bl	8000740 <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	a314      	add	r3, pc, #80	; (adr r3, 8002a50 <stepper_set_speed+0x200>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fd73 	bl	80004ec <__aeabi_dmul>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4610      	mov	r0, r2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f7fe f845 	bl	8000a9c <__aeabi_d2uiz>
 8002a12:	4603      	mov	r3, r0
 8002a14:	81fb      	strh	r3, [r7, #14]
		stepper->new_counter = counter;
 8002a16:	89fa      	ldrh	r2, [r7, #14]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24
		if(speed > 0) set_dir(stepper, 1);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fb74 	bl	8001110 <__aeabi_fcmpgt>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <stepper_set_speed+0x1e8>
 8002a2e:	2101      	movs	r1, #1
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff fe67 	bl	8002704 <set_dir>
}
 8002a36:	e004      	b.n	8002a42 <stepper_set_speed+0x1f2>
		else set_dir(stepper, -1);
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fe61 	bl	8002704 <set_dir>
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	f3af 8000 	nop.w
 8002a50:	00000000 	.word	0x00000000
 8002a54:	412e8480 	.word	0x412e8480
 8002a58:	42c80000 	.word	0x42c80000
 8002a5c:	c2c80000 	.word	0xc2c80000
 8002a60:	40590000 	.word	0x40590000
 8002a64:	c1800000 	.word	0xc1800000
 8002a68:	3ff00000 	.word	0x3ff00000

08002a6c <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	if(stepper->on_off){
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d036      	beq.n	8002aee <stepper_update+0x82>
		stepper->step_counter += stepper->dir;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002a86:	b25a      	sxtb	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	441a      	add	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	61da      	str	r2, [r3, #28]

		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <stepper_update+0x50>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2264      	movs	r2, #100	; 0x64
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002aba:	e018      	b.n	8002aee <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b04      	cmp	r3, #4
 8002ac2:	d105      	bne.n	8002ad0 <stepper_update+0x64>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2364      	movs	r3, #100	; 0x64
 8002acc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ace:	e00e      	b.n	8002aee <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d105      	bne.n	8002ae4 <stepper_update+0x78>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	2364      	movs	r3, #100	; 0x64
 8002ae0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002ae2:	e004      	b.n	8002aee <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002afe:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <HAL_MspInit+0x5c>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	4a14      	ldr	r2, [pc, #80]	; (8002b54 <HAL_MspInit+0x5c>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6193      	str	r3, [r2, #24]
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_MspInit+0x5c>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	4b0f      	ldr	r3, [pc, #60]	; (8002b54 <HAL_MspInit+0x5c>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <HAL_MspInit+0x5c>)
 8002b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b20:	61d3      	str	r3, [r2, #28]
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <HAL_MspInit+0x5c>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <HAL_MspInit+0x60>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_MspInit+0x60>)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40010000 	.word	0x40010000

08002b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba2:	f000 fdd9 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <DMA1_Channel5_IRQHandler+0x10>)
 8002bb2:	f001 f88d 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000478 	.word	0x20000478

08002bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <TIM2_IRQHandler+0x10>)
 8002bc6:	f003 f965 	bl	8005e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200003a0 	.word	0x200003a0

08002bd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <TIM3_IRQHandler+0x10>)
 8002bda:	f003 f95b 	bl	8005e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200003e8 	.word	0x200003e8

08002be8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bec:	4802      	ldr	r0, [pc, #8]	; (8002bf8 <USART1_IRQHandler+0x10>)
 8002bee:	f004 f843 	bl	8006c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	20000430 	.word	0x20000430

08002bfc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return 1;
 8002c00:	2301      	movs	r3, #1
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <_kill>:

int _kill(int pid, int sig)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c14:	f006 fc90 	bl	8009538 <__errno>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2216      	movs	r2, #22
 8002c1c:	601a      	str	r2, [r3, #0]
  return -1;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <_exit>:

void _exit (int status)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c32:	f04f 31ff 	mov.w	r1, #4294967295
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff ffe7 	bl	8002c0a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c3c:	e7fe      	b.n	8002c3c <_exit+0x12>

08002c3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e00a      	b.n	8002c66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c50:	f3af 8000 	nop.w
 8002c54:	4601      	mov	r1, r0
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	60ba      	str	r2, [r7, #8]
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	3301      	adds	r3, #1
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	dbf0      	blt.n	8002c50 <_read+0x12>
  }

  return len;
 8002c6e:	687b      	ldr	r3, [r7, #4]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	e009      	b.n	8002c9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	60ba      	str	r2, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fe fc9e 	bl	80015d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	dbf1      	blt.n	8002c8a <_write+0x12>
  }
  return len;
 8002ca6:	687b      	ldr	r3, [r7, #4]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3718      	adds	r7, #24
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_close>:

int _close(int file)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr

08002cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
 8002cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <_isatty>:

int _isatty(int file)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cec:	2301      	movs	r3, #1
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <_sbrk+0x5c>)
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <_sbrk+0x60>)
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d24:	4b13      	ldr	r3, [pc, #76]	; (8002d74 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <_sbrk+0x64>)
 8002d2e:	4a12      	ldr	r2, [pc, #72]	; (8002d78 <_sbrk+0x68>)
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d32:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <_sbrk+0x64>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d40:	f006 fbfa 	bl	8009538 <__errno>
 8002d44:	4603      	mov	r3, r0
 8002d46:	220c      	movs	r2, #12
 8002d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	e009      	b.n	8002d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <_sbrk+0x64>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <_sbrk+0x64>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <_sbrk+0x64>)
 8002d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d62:	68fb      	ldr	r3, [r7, #12]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20005000 	.word	0x20005000
 8002d70:	00000400 	.word	0x00000400
 8002d74:	2000039c 	.word	0x2000039c
 8002d78:	20000610 	.word	0x20000610

08002d7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9c:	f107 0320 	add.w	r3, r7, #32
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002da6:	1d3b      	adds	r3, r7, #4
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	611a      	str	r2, [r3, #16]
 8002db4:	615a      	str	r2, [r3, #20]
 8002db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002dc2:	2247      	movs	r2, #71	; 0x47
 8002dc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002dcc:	4b28      	ldr	r3, [pc, #160]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dda:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002de0:	4823      	ldr	r0, [pc, #140]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002de2:	f002 febb 	bl	8005b5c <HAL_TIM_Base_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002dec:	f7ff f854 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002df6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	481c      	ldr	r0, [pc, #112]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002dfe:	f003 f9fb 	bl	80061f8 <HAL_TIM_ConfigClockSource>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002e08:	f7ff f846 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e0c:	4818      	ldr	r0, [pc, #96]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002e0e:	f002 ff47 	bl	8005ca0 <HAL_TIM_PWM_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002e18:	f7ff f83e 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e24:	f107 0320 	add.w	r3, r7, #32
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4811      	ldr	r0, [pc, #68]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002e2c:	f003 fd80 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e36:	f7ff f82f 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3a:	2360      	movs	r3, #96	; 0x60
 8002e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4a:	1d3b      	adds	r3, r7, #4
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4807      	ldr	r0, [pc, #28]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002e52:	f003 f90f 	bl	8006074 <HAL_TIM_PWM_ConfigChannel>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e5c:	f7ff f81c 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e60:	4803      	ldr	r0, [pc, #12]	; (8002e70 <MX_TIM2_Init+0xe8>)
 8002e62:	f000 f8bd 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8002e66:	bf00      	nop
 8002e68:	3738      	adds	r7, #56	; 0x38
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200003a0 	.word	0x200003a0

08002e74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08e      	sub	sp, #56	; 0x38
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e88:	f107 0320 	add.w	r3, r7, #32
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
 8002ea0:	615a      	str	r2, [r3, #20]
 8002ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002ea6:	4a2d      	ldr	r2, [pc, #180]	; (8002f5c <MX_TIM3_Init+0xe8>)
 8002ea8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002eac:	2247      	movs	r2, #71	; 0x47
 8002eae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002eb6:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ebc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ebe:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002eca:	4823      	ldr	r0, [pc, #140]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002ecc:	f002 fe46 	bl	8005b5c <HAL_TIM_Base_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002ed6:	f7fe ffdf 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	481c      	ldr	r0, [pc, #112]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002ee8:	f003 f986 	bl	80061f8 <HAL_TIM_ConfigClockSource>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002ef2:	f7fe ffd1 	bl	8001e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ef6:	4818      	ldr	r0, [pc, #96]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002ef8:	f002 fed2 	bl	8005ca0 <HAL_TIM_PWM_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002f02:	f7fe ffc9 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f0e:	f107 0320 	add.w	r3, r7, #32
 8002f12:	4619      	mov	r1, r3
 8002f14:	4810      	ldr	r0, [pc, #64]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002f16:	f003 fd0b 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f20:	f7fe ffba 	bl	8001e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f24:	2360      	movs	r3, #96	; 0x60
 8002f26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2200      	movs	r2, #0
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4807      	ldr	r0, [pc, #28]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002f3c:	f003 f89a 	bl	8006074 <HAL_TIM_PWM_ConfigChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f46:	f7fe ffa7 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f4a:	4803      	ldr	r0, [pc, #12]	; (8002f58 <MX_TIM3_Init+0xe4>)
 8002f4c:	f000 f848 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8002f50:	bf00      	nop
 8002f52:	3738      	adds	r7, #56	; 0x38
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	200003e8 	.word	0x200003e8
 8002f5c:	40000400 	.word	0x40000400

08002f60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f70:	d114      	bne.n	8002f9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_TIM_Base_MspInit+0x78>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <HAL_TIM_Base_MspInit+0x78>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	61d3      	str	r3, [r2, #28]
 8002f7e:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <HAL_TIM_Base_MspInit+0x78>)
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	60fb      	str	r3, [r7, #12]
 8002f88:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	201c      	movs	r0, #28
 8002f90:	f000 fcf9 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f94:	201c      	movs	r0, #28
 8002f96:	f000 fd12 	bl	80039be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f9a:	e018      	b.n	8002fce <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <HAL_TIM_Base_MspInit+0x7c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d113      	bne.n	8002fce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <HAL_TIM_Base_MspInit+0x78>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <HAL_TIM_Base_MspInit+0x78>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	61d3      	str	r3, [r2, #28]
 8002fb2:	4b09      	ldr	r3, [pc, #36]	; (8002fd8 <HAL_TIM_Base_MspInit+0x78>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	201d      	movs	r0, #29
 8002fc4:	f000 fcdf 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fc8:	201d      	movs	r0, #29
 8002fca:	f000 fcf8 	bl	80039be <HAL_NVIC_EnableIRQ>
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	40000400 	.word	0x40000400

08002fe0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffe:	d118      	bne.n	8003032 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003000:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <HAL_TIM_MspPostInit+0x94>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <HAL_TIM_MspPostInit+0x94>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_TIM_MspPostInit+0x94>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 8003018:	2301      	movs	r3, #1
 800301a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2302      	movs	r3, #2
 8003022:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003024:	f107 0310 	add.w	r3, r7, #16
 8003028:	4619      	mov	r1, r3
 800302a:	4813      	ldr	r0, [pc, #76]	; (8003078 <HAL_TIM_MspPostInit+0x98>)
 800302c:	f000 ff84 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003030:	e01c      	b.n	800306c <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a11      	ldr	r2, [pc, #68]	; (800307c <HAL_TIM_MspPostInit+0x9c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d117      	bne.n	800306c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <HAL_TIM_MspPostInit+0x94>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_TIM_MspPostInit+0x94>)
 8003042:	f043 0304 	orr.w	r3, r3, #4
 8003046:	6193      	str	r3, [r2, #24]
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_TIM_MspPostInit+0x94>)
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003054:	2340      	movs	r3, #64	; 0x40
 8003056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2302      	movs	r3, #2
 800305e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 0310 	add.w	r3, r7, #16
 8003064:	4619      	mov	r1, r3
 8003066:	4804      	ldr	r0, [pc, #16]	; (8003078 <HAL_TIM_MspPostInit+0x98>)
 8003068:	f000 ff66 	bl	8003f38 <HAL_GPIO_Init>
}
 800306c:	bf00      	nop
 800306e:	3720      	adds	r7, #32
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	40010800 	.word	0x40010800
 800307c:	40000400 	.word	0x40000400

08003080 <start_uart_interface>:
extern uart_interface_typedef uart_interface;




void start_uart_interface(uart_interface_typedef* uart_int){
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_int->huart, uart_int->receive_buffer, BUFFER_SIZE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	2264      	movs	r2, #100	; 0x64
 8003092:	4619      	mov	r1, r3
 8003094:	f003 fd97 	bl	8006bc6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_UARTEx_RxEventCallback>:
// UART IDLE interrupt
//if you want to receive data from multiple uart add another if statement for your uart and uart_interface_typedef structure


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == uart_interface.huart->Instance)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <HAL_UARTEx_RxEventCallback+0x34>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d107      	bne.n	80030ca <HAL_UARTEx_RxEventCallback+0x2a>
    {
    	uart_interface.command_received_flag = 1;
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <HAL_UARTEx_RxEventCallback+0x34>)
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    	uart_interface.commnad_size = Size;
 80030c2:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_UARTEx_RxEventCallback+0x34>)
 80030c4:	887b      	ldrh	r3, [r7, #2]
 80030c6:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68

    }
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	20000324 	.word	0x20000324

080030d8 <uart_interface_init>:


void uart_interface_init(uart_interface_typedef* uart_int, UART_HandleTypeDef *huart, DMA_HandleTypeDef* hdma_usart_rx, user_function_typedef* functions_array, uint8_t num_functions){
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
	__HAL_DMA_DISABLE_IT(hdma_usart_rx, DMA_IT_HT); //disable half transfer dma interrupt
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0204 	bic.w	r2, r2, #4
 80030f4:	601a      	str	r2, [r3, #0]

	uart_int->huart = huart;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	601a      	str	r2, [r3, #0]
	uart_int->commnad_size = 0;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	uart_int->command_received_flag = 0;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	uart_int->functions_array = functions_array;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	66da      	str	r2, [r3, #108]	; 0x6c
	uart_int->num_functions = num_functions;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	7e3a      	ldrb	r2, [r7, #24]
 8003116:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

}
 800311a:	bf00      	nop
 800311c:	3714      	adds	r7, #20
 800311e:	46bd      	mov	sp, r7
 8003120:	bc80      	pop	{r7}
 8003122:	4770      	bx	lr

08003124 <execute_uart_command>:
 * can't parse command (error), returns 0
 * successful command read,  returns 1
 * command not found , returns 2
 */

int execute_uart_command(uart_interface_typedef* uart_int){
 8003124:	b580      	push	{r7, lr}
 8003126:	b09c      	sub	sp, #112	; 0x70
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	if(!uart_int->command_received_flag) return -1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f083 0301 	eor.w	r3, r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <execute_uart_command+0x20>
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	e119      	b.n	8003378 <execute_uart_command+0x254>

	uart_int->command_received_flag = 0;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

	char function_code[FUNCTION_CODE_MAX_LENGTH];
	char args[MAX_NUM_ARGS][ARG_MAX_LENGTH];


	uint8_t idx = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	// parse function code
	for(int i = 0; i < uart_int->commnad_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8003152:	2300      	movs	r3, #0
 8003154:	66bb      	str	r3, [r7, #104]	; 0x68
 8003156:	e02c      	b.n	80031b2 <execute_uart_command+0x8e>
		idx ++;
 8003158:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800315c:	3301      	adds	r3, #1
 800315e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		char elem = uart_int->receive_buffer[i];
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if(elem == '\0' || elem == '\r' || elem == '\n' || elem == '('){
 8003170:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00b      	beq.n	8003190 <execute_uart_command+0x6c>
 8003178:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800317c:	2b0d      	cmp	r3, #13
 800317e:	d007      	beq.n	8003190 <execute_uart_command+0x6c>
 8003180:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003184:	2b0a      	cmp	r3, #10
 8003186:	d003      	beq.n	8003190 <execute_uart_command+0x6c>
 8003188:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800318c:	2b28      	cmp	r3, #40	; 0x28
 800318e:	d106      	bne.n	800319e <execute_uart_command+0x7a>
			function_code[i] = '\0';
 8003190:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003196:	4413      	add	r3, r2
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
			break;
 800319c:	e013      	b.n	80031c6 <execute_uart_command+0xa2>
		}
		else function_code[i] = elem;
 800319e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80031a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a4:	4413      	add	r3, r2
 80031a6:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80031aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < uart_int->commnad_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 80031ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ae:	3301      	adds	r3, #1
 80031b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80031b8:	461a      	mov	r2, r3
 80031ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031bc:	4293      	cmp	r3, r2
 80031be:	dbcb      	blt.n	8003158 <execute_uart_command+0x34>
 80031c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031c2:	2b0f      	cmp	r3, #15
 80031c4:	ddc8      	ble.n	8003158 <execute_uart_command+0x34>
	}


	//parse arguments
	bool no_args = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t arg_len = 0;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t arg_counter = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	for(int i = idx; i < uart_int->commnad_size; i++)
 80031d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031dc:	663b      	str	r3, [r7, #96]	; 0x60
 80031de:	e06c      	b.n	80032ba <execute_uart_command+0x196>
	{
		//safety checks
		if(arg_counter >= MAX_NUM_ARGS || arg_len >= ARG_MAX_LENGTH) return 0; //error, to many argumenst/to long argument
 80031e0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d803      	bhi.n	80031f0 <execute_uart_command+0xcc>
 80031e8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80031ec:	2b0b      	cmp	r3, #11
 80031ee:	d901      	bls.n	80031f4 <execute_uart_command+0xd0>
 80031f0:	2300      	movs	r3, #0
 80031f2:	e0c1      	b.n	8003378 <execute_uart_command+0x254>

		char elem = uart_int->receive_buffer[i];
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031f8:	4413      	add	r3, r2
 80031fa:	3304      	adds	r3, #4
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		if(elem == '\0' || elem == '\r' || elem == '\n') return 0; //error, commands ends with ')'
 8003202:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <execute_uart_command+0xf6>
 800320a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800320e:	2b0d      	cmp	r3, #13
 8003210:	d003      	beq.n	800321a <execute_uart_command+0xf6>
 8003212:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003216:	2b0a      	cmp	r3, #10
 8003218:	d101      	bne.n	800321e <execute_uart_command+0xfa>
 800321a:	2300      	movs	r3, #0
 800321c:	e0ac      	b.n	8003378 <execute_uart_command+0x254>

		else if(elem == ')'){
 800321e:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003222:	2b29      	cmp	r3, #41	; 0x29
 8003224:	d10e      	bne.n	8003244 <execute_uart_command+0x120>
			args[arg_counter][arg_len] = '\0';
 8003226:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800322a:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3370      	adds	r3, #112	; 0x70
 8003238:	443b      	add	r3, r7
 800323a:	440b      	add	r3, r1
 800323c:	3b64      	subs	r3, #100	; 0x64
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
			break;
 8003242:	e041      	b.n	80032c8 <execute_uart_command+0x1a4>
		}
		else if(elem == ','){
 8003244:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003248:	2b2c      	cmp	r3, #44	; 0x2c
 800324a:	d116      	bne.n	800327a <execute_uart_command+0x156>
			args[arg_counter][arg_len] = '\0';
 800324c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8003250:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	3370      	adds	r3, #112	; 0x70
 800325e:	443b      	add	r3, r7
 8003260:	440b      	add	r3, r1
 8003262:	3b64      	subs	r3, #100	; 0x64
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
			arg_counter++;
 8003268:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800326c:	3301      	adds	r3, #1
 800326e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			arg_len = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003278:	e01c      	b.n	80032b4 <execute_uart_command+0x190>
		}
		else if(elem == ' '){
 800327a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800327e:	2b20      	cmp	r3, #32
 8003280:	d017      	beq.n	80032b2 <execute_uart_command+0x18e>
			continue;
		}
		else{
			no_args = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			args[arg_counter][arg_len] = elem;
 8003288:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800328c:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3370      	adds	r3, #112	; 0x70
 800329a:	443b      	add	r3, r7
 800329c:	440b      	add	r3, r1
 800329e:	3b64      	subs	r3, #100	; 0x64
 80032a0:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 80032a4:	701a      	strb	r2, [r3, #0]
			arg_len ++;
 80032a6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80032aa:	3301      	adds	r3, #1
 80032ac:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80032b0:	e000      	b.n	80032b4 <execute_uart_command+0x190>
			continue;
 80032b2:	bf00      	nop
	for(int i = idx; i < uart_int->commnad_size; i++)
 80032b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032b6:	3301      	adds	r3, #1
 80032b8:	663b      	str	r3, [r7, #96]	; 0x60
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80032c0:	461a      	mov	r2, r3
 80032c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032c4:	4293      	cmp	r3, r2
 80032c6:	db8b      	blt.n	80031e0 <execute_uart_command+0xbc>
		}
	}
	if(!no_args) arg_counter++;
 80032c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <execute_uart_command+0x1bc>
 80032d6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80032da:	3301      	adds	r3, #1
 80032dc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	if(strcmp(function_code, "help") == 0){
 80032e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032e4:	4926      	ldr	r1, [pc, #152]	; (8003380 <execute_uart_command+0x25c>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fc ff32 	bl	8000150 <strcmp>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <execute_uart_command+0x1d8>
		help(uart_int);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f846 	bl	8003384 <help>
		return 1;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e03d      	b.n	8003378 <execute_uart_command+0x254>
	}



	//run
	for(int i = 0; i < uart_int->num_functions; i++){
 80032fc:	2300      	movs	r3, #0
 80032fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003300:	e030      	b.n	8003364 <execute_uart_command+0x240>
		if(strcmp(function_code, uart_int->functions_array[i].function_code) == 0){
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	1d1a      	adds	r2, r3, #4
 8003314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f7fc ff18 	bl	8000150 <strcmp>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d11b      	bne.n	800335e <execute_uart_command+0x23a>
			if(uart_int->functions_array[i].num_args == arg_counter){
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800332a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	7d1b      	ldrb	r3, [r3, #20]
 8003338:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800333c:	429a      	cmp	r2, r3
 800333e:	d119      	bne.n	8003374 <execute_uart_command+0x250>
				(*uart_int->functions_array[i].function_pointer)(args);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003344:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f107 020c 	add.w	r2, r7, #12
 8003356:	4610      	mov	r0, r2
 8003358:	4798      	blx	r3
				return 1;
 800335a:	2301      	movs	r3, #1
 800335c:	e00c      	b.n	8003378 <execute_uart_command+0x254>
	for(int i = 0; i < uart_int->num_functions; i++){
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	3301      	adds	r3, #1
 8003362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800336a:	461a      	mov	r2, r3
 800336c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800336e:	4293      	cmp	r3, r2
 8003370:	dbc7      	blt.n	8003302 <execute_uart_command+0x1de>
 8003372:	e000      	b.n	8003376 <execute_uart_command+0x252>
			}
			break;
 8003374:	bf00      	nop
//
//	for(int i = 0; i < arg_counter; i++){
//		printf("arg%d = [%s]\n", i, args[i]);
//	}

	return 2;
 8003376:	2302      	movs	r3, #2
}
 8003378:	4618      	mov	r0, r3
 800337a:	3770      	adds	r7, #112	; 0x70
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	0800c06c 	.word	0x0800c06c

08003384 <help>:




void help(uart_interface_typedef* uart_int){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < uart_int->num_functions; i++){
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e019      	b.n	80033c6 <help+0x42>
		printf("%s : %d arg\n", uart_int->functions_array[i].function_code, uart_int->functions_array[i].num_args);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	1d18      	adds	r0, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	7d1b      	ldrb	r3, [r3, #20]
 80033b6:	461a      	mov	r2, r3
 80033b8:	4601      	mov	r1, r0
 80033ba:	4809      	ldr	r0, [pc, #36]	; (80033e0 <help+0x5c>)
 80033bc:	f005 ff12 	bl	80091e4 <iprintf>
	for(int i = 0; i < uart_int->num_functions; i++){
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	3301      	adds	r3, #1
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4293      	cmp	r3, r2
 80033d2:	dbde      	blt.n	8003392 <help+0xe>
	}
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	0800c074 	.word	0x0800c074

080033e4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033e8:	4b11      	ldr	r3, [pc, #68]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 80033ea:	4a12      	ldr	r2, [pc, #72]	; (8003434 <MX_USART1_UART_Init+0x50>)
 80033ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80033ee:	4b10      	ldr	r3, [pc, #64]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 80033f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033f6:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033fc:	4b0c      	ldr	r3, [pc, #48]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003402:	4b0b      	ldr	r3, [pc, #44]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003408:	4b09      	ldr	r3, [pc, #36]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 800340a:	220c      	movs	r2, #12
 800340c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800340e:	4b08      	ldr	r3, [pc, #32]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 8003416:	2200      	movs	r2, #0
 8003418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800341a:	4805      	ldr	r0, [pc, #20]	; (8003430 <MX_USART1_UART_Init+0x4c>)
 800341c:	f003 faf8 	bl	8006a10 <HAL_UART_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003426:	f7fe fd37 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000430 	.word	0x20000430
 8003434:	40013800 	.word	0x40013800

08003438 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0310 	add.w	r3, r7, #16
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a33      	ldr	r2, [pc, #204]	; (8003520 <HAL_UART_MspInit+0xe8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d15f      	bne.n	8003518 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003458:	4b32      	ldr	r3, [pc, #200]	; (8003524 <HAL_UART_MspInit+0xec>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a31      	ldr	r2, [pc, #196]	; (8003524 <HAL_UART_MspInit+0xec>)
 800345e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003462:	6193      	str	r3, [r2, #24]
 8003464:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <HAL_UART_MspInit+0xec>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_UART_MspInit+0xec>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	4a2b      	ldr	r2, [pc, #172]	; (8003524 <HAL_UART_MspInit+0xec>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6193      	str	r3, [r2, #24]
 800347c:	4b29      	ldr	r3, [pc, #164]	; (8003524 <HAL_UART_MspInit+0xec>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003496:	f107 0310 	add.w	r3, r7, #16
 800349a:	4619      	mov	r1, r3
 800349c:	4822      	ldr	r0, [pc, #136]	; (8003528 <HAL_UART_MspInit+0xf0>)
 800349e:	f000 fd4b 	bl	8003f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	4619      	mov	r1, r3
 80034b6:	481c      	ldr	r0, [pc, #112]	; (8003528 <HAL_UART_MspInit+0xf0>)
 80034b8:	f000 fd3e 	bl	8003f38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034be:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <HAL_UART_MspInit+0xf8>)
 80034c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c2:	4b1a      	ldr	r3, [pc, #104]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c8:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034dc:	2200      	movs	r2, #0
 80034de:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034e0:	4b12      	ldr	r3, [pc, #72]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034ec:	480f      	ldr	r0, [pc, #60]	; (800352c <HAL_UART_MspInit+0xf4>)
 80034ee:	f000 fa81 	bl	80039f4 <HAL_DMA_Init>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80034f8:	f7fe fcce 	bl	8001e98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0b      	ldr	r2, [pc, #44]	; (800352c <HAL_UART_MspInit+0xf4>)
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
 8003502:	4a0a      	ldr	r2, [pc, #40]	; (800352c <HAL_UART_MspInit+0xf4>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003508:	2200      	movs	r2, #0
 800350a:	2100      	movs	r1, #0
 800350c:	2025      	movs	r0, #37	; 0x25
 800350e:	f000 fa3a 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003512:	2025      	movs	r0, #37	; 0x25
 8003514:	f000 fa53 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003518:	bf00      	nop
 800351a:	3720      	adds	r7, #32
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40013800 	.word	0x40013800
 8003524:	40021000 	.word	0x40021000
 8003528:	40010800 	.word	0x40010800
 800352c:	20000478 	.word	0x20000478
 8003530:	40020058 	.word	0x40020058

08003534 <led>:
extern pid_typedef pos_pid;




void led(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	if(strcmp(args[0], "1") == 0){
 800353c:	490e      	ldr	r1, [pc, #56]	; (8003578 <led+0x44>)
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fc fe06 	bl	8000150 <strcmp>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <led+0x22>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800354a:	2200      	movs	r2, #0
 800354c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003550:	480a      	ldr	r0, [pc, #40]	; (800357c <led+0x48>)
 8003552:	f000 fe75 	bl	8004240 <HAL_GPIO_WritePin>
	}
	if(strcmp(args[0], "0") == 0){
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <led+0x4c>)
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fc fdf9 	bl	8000150 <strcmp>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <led+0x3c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003564:	2201      	movs	r2, #1
 8003566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800356a:	4804      	ldr	r0, [pc, #16]	; (800357c <led+0x48>)
 800356c:	f000 fe68 	bl	8004240 <HAL_GPIO_WritePin>
	}
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	0800c084 	.word	0x0800c084
 800357c:	40011000 	.word	0x40011000
 8003580:	0800c088 	.word	0x0800c088

08003584 <comunication_test>:

void comunication_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
	printf("Czesc ;)\n");
 800358c:	4803      	ldr	r0, [pc, #12]	; (800359c <comunication_test+0x18>)
 800358e:	f005 fe8f 	bl	80092b0 <puts>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	0800c08c 	.word	0x0800c08c

080035a0 <set_position>:




void set_position(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

	if(strcmp(args[0], "0") == 0){
 80035a8:	490c      	ldr	r1, [pc, #48]	; (80035dc <set_position+0x3c>)
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7fc fdd0 	bl	8000150 <strcmp>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <set_position+0x1e>
		set_pos = 0;
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <set_position+0x40>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	e00b      	b.n	80035d6 <set_position+0x36>
	}
	else{
		int32_t val = atoi(args[0]);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f004 fa55 	bl	8007a6e <atoi>
 80035c4:	60f8      	str	r0, [r7, #12]
		if(val == 0) return;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <set_position+0x34>
		set_pos = val;
 80035cc:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <set_position+0x40>)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e000      	b.n	80035d6 <set_position+0x36>
		if(val == 0) return;
 80035d4:	bf00      	nop
	}
}
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	0800c088 	.word	0x0800c088
 80035e0:	20000300 	.word	0x20000300

080035e4 <rotate>:



void rotate(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	spin_duration_ms = atoi(args[0]);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f004 fa3e 	bl	8007a6e <atoi>
 80035f2:	4603      	mov	r3, r0
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <rotate+0x30>)
 80035f8:	701a      	strb	r2, [r3, #0]
	spin_value = atoi(args[1]);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	330c      	adds	r3, #12
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fa35 	bl	8007a6e <atoi>
 8003604:	4603      	mov	r3, r0
 8003606:	b25a      	sxtb	r2, r3
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <rotate+0x34>)
 800360a:	701a      	strb	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000398 	.word	0x20000398
 8003618:	2000039a 	.word	0x2000039a

0800361c <change_pid>:



void change_pid(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	pos_pid.kp = atof(args[0]);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f004 fa1f 	bl	8007a68 <atof>
 800362a:	4602      	mov	r2, r0
 800362c:	460b      	mov	r3, r1
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	f7fd fa53 	bl	8000adc <__aeabi_d2f>
 8003636:	4603      	mov	r3, r0
 8003638:	4a10      	ldr	r2, [pc, #64]	; (800367c <change_pid+0x60>)
 800363a:	6013      	str	r3, [r2, #0]
	pos_pid.ki = atof(args[1]);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	330c      	adds	r3, #12
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fa11 	bl	8007a68 <atof>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f7fd fa45 	bl	8000adc <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <change_pid+0x60>)
 8003656:	6053      	str	r3, [r2, #4]
	pos_pid.kd = atof(args[2]);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3318      	adds	r3, #24
 800365c:	4618      	mov	r0, r3
 800365e:	f004 fa03 	bl	8007a68 <atof>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fa37 	bl	8000adc <__aeabi_d2f>
 800366e:	4603      	mov	r3, r0
 8003670:	4a02      	ldr	r2, [pc, #8]	; (800367c <change_pid+0x60>)
 8003672:	6093      	str	r3, [r2, #8]


}
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20000308 	.word	0x20000308

08003680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003680:	f7ff fb7c 	bl	8002d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003684:	480b      	ldr	r0, [pc, #44]	; (80036b4 <LoopFillZerobss+0xe>)
   ldr r1, =_edata
 8003686:	490c      	ldr	r1, [pc, #48]	; (80036b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003688:	4a0c      	ldr	r2, [pc, #48]	; (80036bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800368a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800368c:	e002      	b.n	8003694 <LoopCopyDataInit>

0800368e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003690:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003692:	3304      	adds	r3, #4

08003694 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003694:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003696:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003698:	d3f9      	bcc.n	800368e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369a:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800369c:	4c09      	ldr	r4, [pc, #36]	; (80036c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800369e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a0:	e001      	b.n	80036a6 <LoopFillZerobss>

080036a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a4:	3204      	adds	r2, #4

080036a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a8:	d3fb      	bcc.n	80036a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036aa:	f005 ff4b 	bl	8009544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ae:	f7fd ffcf 	bl	8001650 <main>
  bx lr
 80036b2:	4770      	bx	lr
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
   ldr r1, =_edata
 80036b8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80036bc:	0800c568 	.word	0x0800c568
  ldr r2, =_sbss
 80036c0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80036c4:	2000060c 	.word	0x2000060c

080036c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC1_2_IRQHandler>
	...

080036cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_Init+0x28>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_Init+0x28>)
 80036d6:	f043 0310 	orr.w	r3, r3, #16
 80036da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f000 f947 	bl	8003970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e2:	200f      	movs	r0, #15
 80036e4:	f000 f808 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e8:	f7ff fa06 	bl	8002af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000

080036f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_InitTick+0x54>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x58>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800370e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f95f 	bl	80039da <HAL_SYSTICK_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00e      	b.n	8003744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d80a      	bhi.n	8003742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372c:	2200      	movs	r2, #0
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f000 f927 	bl	8003986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_InitTick+0x5c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000000 	.word	0x20000000
 8003750:	20000008 	.word	0x20000008
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_IncTick+0x1c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x20>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <HAL_IncTick+0x20>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000008 	.word	0x20000008
 8003778:	200004bc 	.word	0x200004bc

0800377c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_GetTick+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	200004bc 	.word	0x200004bc

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff fff0 	bl	800377c <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <HAL_Delay+0x44>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037b6:	bf00      	nop
 80037b8:	f7ff ffe0 	bl	800377c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000008 	.word	0x20000008

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0b      	blt.n	8003866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4906      	ldr	r1, [pc, #24]	; (8003870 <__NVIC_EnableIRQ+0x34>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393c:	d301      	bcc.n	8003942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393e:	2301      	movs	r3, #1
 8003940:	e00f      	b.n	8003962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <SysTick_Config+0x40>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394a:	210f      	movs	r1, #15
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f7ff ff90 	bl	8003874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <SysTick_Config+0x40>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <SysTick_Config+0x40>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff2d 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff42 	bl	8003820 <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff90 	bl	80038c8 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5f 	bl	8003874 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff35 	bl	800383c <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa2 	bl	800392c <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e043      	b.n	8003a92 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_DMA_Init+0xa8>)
 8003a12:	4413      	add	r3, r2
 8003a14:	4a22      	ldr	r2, [pc, #136]	; (8003aa0 <HAL_DMA_Init+0xac>)
 8003a16:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <HAL_DMA_Init+0xb0>)
 8003a26:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	bffdfff8 	.word	0xbffdfff8
 8003aa0:	cccccccd 	.word	0xcccccccd
 8003aa4:	40020000 	.word	0x40020000

08003aa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_Start_IT+0x20>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e04b      	b.n	8003b60 <HAL_DMA_Start_IT+0xb8>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d13a      	bne.n	8003b52 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f9eb 	bl	8003edc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 020e 	orr.w	r2, r2, #14
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e00f      	b.n	8003b40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f042 020a 	orr.w	r2, r2, #10
 8003b3e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e005      	b.n	8003b5e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3718      	adds	r7, #24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2204      	movs	r2, #4
 8003b84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e020      	b.n	8003bd4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 020e 	bic.w	r2, r2, #14
 8003ba0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2101      	movs	r1, #1
 8003bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d005      	beq.n	8003c04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e051      	b.n	8003ca8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 020e 	bic.w	r2, r2, #14
 8003c12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a22      	ldr	r2, [pc, #136]	; (8003cb4 <HAL_DMA_Abort_IT+0xd4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d029      	beq.n	8003c82 <HAL_DMA_Abort_IT+0xa2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <HAL_DMA_Abort_IT+0xd8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_DMA_Abort_IT+0x9e>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <HAL_DMA_Abort_IT+0xdc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01a      	beq.n	8003c78 <HAL_DMA_Abort_IT+0x98>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_DMA_Abort_IT+0xe0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d012      	beq.n	8003c72 <HAL_DMA_Abort_IT+0x92>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_DMA_Abort_IT+0xe4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00a      	beq.n	8003c6c <HAL_DMA_Abort_IT+0x8c>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_DMA_Abort_IT+0xe8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d102      	bne.n	8003c66 <HAL_DMA_Abort_IT+0x86>
 8003c60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c64:	e00e      	b.n	8003c84 <HAL_DMA_Abort_IT+0xa4>
 8003c66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c6a:	e00b      	b.n	8003c84 <HAL_DMA_Abort_IT+0xa4>
 8003c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c70:	e008      	b.n	8003c84 <HAL_DMA_Abort_IT+0xa4>
 8003c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c76:	e005      	b.n	8003c84 <HAL_DMA_Abort_IT+0xa4>
 8003c78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c7c:	e002      	b.n	8003c84 <HAL_DMA_Abort_IT+0xa4>
 8003c7e:	2310      	movs	r3, #16
 8003c80:	e000      	b.n	8003c84 <HAL_DMA_Abort_IT+0xa4>
 8003c82:	2301      	movs	r3, #1
 8003c84:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <HAL_DMA_Abort_IT+0xec>)
 8003c86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	4798      	blx	r3
    } 
  }
  return status;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40020008 	.word	0x40020008
 8003cb8:	4002001c 	.word	0x4002001c
 8003cbc:	40020030 	.word	0x40020030
 8003cc0:	40020044 	.word	0x40020044
 8003cc4:	40020058 	.word	0x40020058
 8003cc8:	4002006c 	.word	0x4002006c
 8003ccc:	40020000 	.word	0x40020000

08003cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	2204      	movs	r2, #4
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d04f      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xc8>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d04a      	beq.n	8003d98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0204 	bic.w	r2, r2, #4
 8003d1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d029      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xae>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a65      	ldr	r2, [pc, #404]	; (8003ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_DMA_IRQHandler+0xaa>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a63      	ldr	r2, [pc, #396]	; (8003ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01a      	beq.n	8003d74 <HAL_DMA_IRQHandler+0xa4>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a62      	ldr	r2, [pc, #392]	; (8003ecc <HAL_DMA_IRQHandler+0x1fc>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d012      	beq.n	8003d6e <HAL_DMA_IRQHandler+0x9e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a60      	ldr	r2, [pc, #384]	; (8003ed0 <HAL_DMA_IRQHandler+0x200>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00a      	beq.n	8003d68 <HAL_DMA_IRQHandler+0x98>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a5f      	ldr	r2, [pc, #380]	; (8003ed4 <HAL_DMA_IRQHandler+0x204>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d102      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x92>
 8003d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d60:	e00e      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d66:	e00b      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d6c:	e008      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d72:	e005      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d78:	e002      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	e000      	b.n	8003d80 <HAL_DMA_IRQHandler+0xb0>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	4a55      	ldr	r2, [pc, #340]	; (8003ed8 <HAL_DMA_IRQHandler+0x208>)
 8003d82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8094 	beq.w	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d96:	e08e      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d056      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x186>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d051      	beq.n	8003e56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 020a 	bic.w	r2, r2, #10
 8003dce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a38      	ldr	r2, [pc, #224]	; (8003ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d029      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x166>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a37      	ldr	r2, [pc, #220]	; (8003ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d022      	beq.n	8003e32 <HAL_DMA_IRQHandler+0x162>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a35      	ldr	r2, [pc, #212]	; (8003ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01a      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x15c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a34      	ldr	r2, [pc, #208]	; (8003ecc <HAL_DMA_IRQHandler+0x1fc>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d012      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x156>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a32      	ldr	r2, [pc, #200]	; (8003ed0 <HAL_DMA_IRQHandler+0x200>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00a      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x150>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a31      	ldr	r2, [pc, #196]	; (8003ed4 <HAL_DMA_IRQHandler+0x204>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d102      	bne.n	8003e1a <HAL_DMA_IRQHandler+0x14a>
 8003e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003e18:	e00e      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1e:	e00b      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e24:	e008      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e2a:	e005      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e30:	e002      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e32:	2320      	movs	r3, #32
 8003e34:	e000      	b.n	8003e38 <HAL_DMA_IRQHandler+0x168>
 8003e36:	2302      	movs	r3, #2
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <HAL_DMA_IRQHandler+0x208>)
 8003e3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d034      	beq.n	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e54:	e02f      	b.n	8003eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	409a      	lsls	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4013      	ands	r3, r2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d028      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x1e8>
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d023      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 020e 	bic.w	r2, r2, #14
 8003e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	2101      	movs	r1, #1
 8003e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
    }
  }
  return;
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
}
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40020008 	.word	0x40020008
 8003ec4:	4002001c 	.word	0x4002001c
 8003ec8:	40020030 	.word	0x40020030
 8003ecc:	40020044 	.word	0x40020044
 8003ed0:	40020058 	.word	0x40020058
 8003ed4:	4002006c 	.word	0x4002006c
 8003ed8:	40020000 	.word	0x40020000

08003edc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b10      	cmp	r3, #16
 8003f08:	d108      	bne.n	8003f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f1a:	e007      	b.n	8003f2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	60da      	str	r2, [r3, #12]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bc80      	pop	{r7}
 8003f34:	4770      	bx	lr
	...

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b08b      	sub	sp, #44	; 0x2c
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4a:	e169      	b.n	8004220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f040 8158 	bne.w	800421a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a9a      	ldr	r2, [pc, #616]	; (80041d8 <HAL_GPIO_Init+0x2a0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d05e      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f74:	4a98      	ldr	r2, [pc, #608]	; (80041d8 <HAL_GPIO_Init+0x2a0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d875      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f7a:	4a98      	ldr	r2, [pc, #608]	; (80041dc <HAL_GPIO_Init+0x2a4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d058      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f80:	4a96      	ldr	r2, [pc, #600]	; (80041dc <HAL_GPIO_Init+0x2a4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d86f      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f86:	4a96      	ldr	r2, [pc, #600]	; (80041e0 <HAL_GPIO_Init+0x2a8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d052      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f8c:	4a94      	ldr	r2, [pc, #592]	; (80041e0 <HAL_GPIO_Init+0x2a8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d869      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f92:	4a94      	ldr	r2, [pc, #592]	; (80041e4 <HAL_GPIO_Init+0x2ac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04c      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f98:	4a92      	ldr	r2, [pc, #584]	; (80041e4 <HAL_GPIO_Init+0x2ac>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d863      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f9e:	4a92      	ldr	r2, [pc, #584]	; (80041e8 <HAL_GPIO_Init+0x2b0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d046      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003fa4:	4a90      	ldr	r2, [pc, #576]	; (80041e8 <HAL_GPIO_Init+0x2b0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d85d      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003faa:	2b12      	cmp	r3, #18
 8003fac:	d82a      	bhi.n	8004004 <HAL_GPIO_Init+0xcc>
 8003fae:	2b12      	cmp	r3, #18
 8003fb0:	d859      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <HAL_GPIO_Init+0x80>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08004033 	.word	0x08004033
 8003fbc:	0800400d 	.word	0x0800400d
 8003fc0:	0800401f 	.word	0x0800401f
 8003fc4:	08004061 	.word	0x08004061
 8003fc8:	08004067 	.word	0x08004067
 8003fcc:	08004067 	.word	0x08004067
 8003fd0:	08004067 	.word	0x08004067
 8003fd4:	08004067 	.word	0x08004067
 8003fd8:	08004067 	.word	0x08004067
 8003fdc:	08004067 	.word	0x08004067
 8003fe0:	08004067 	.word	0x08004067
 8003fe4:	08004067 	.word	0x08004067
 8003fe8:	08004067 	.word	0x08004067
 8003fec:	08004067 	.word	0x08004067
 8003ff0:	08004067 	.word	0x08004067
 8003ff4:	08004067 	.word	0x08004067
 8003ff8:	08004067 	.word	0x08004067
 8003ffc:	08004015 	.word	0x08004015
 8004000:	08004029 	.word	0x08004029
 8004004:	4a79      	ldr	r2, [pc, #484]	; (80041ec <HAL_GPIO_Init+0x2b4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800400a:	e02c      	b.n	8004066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	623b      	str	r3, [r7, #32]
          break;
 8004012:	e029      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	3304      	adds	r3, #4
 800401a:	623b      	str	r3, [r7, #32]
          break;
 800401c:	e024      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	3308      	adds	r3, #8
 8004024:	623b      	str	r3, [r7, #32]
          break;
 8004026:	e01f      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	330c      	adds	r3, #12
 800402e:	623b      	str	r3, [r7, #32]
          break;
 8004030:	e01a      	b.n	8004068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800403a:	2304      	movs	r3, #4
 800403c:	623b      	str	r3, [r7, #32]
          break;
 800403e:	e013      	b.n	8004068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004048:	2308      	movs	r3, #8
 800404a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	611a      	str	r2, [r3, #16]
          break;
 8004052:	e009      	b.n	8004068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004054:	2308      	movs	r3, #8
 8004056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	615a      	str	r2, [r3, #20]
          break;
 800405e:	e003      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
          break;
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x130>
          break;
 8004066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d801      	bhi.n	8004072 <HAL_GPIO_Init+0x13a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	e001      	b.n	8004076 <HAL_GPIO_Init+0x13e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2bff      	cmp	r3, #255	; 0xff
 800407c:	d802      	bhi.n	8004084 <HAL_GPIO_Init+0x14c>
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	e002      	b.n	800408a <HAL_GPIO_Init+0x152>
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	3b08      	subs	r3, #8
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	210f      	movs	r1, #15
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	6a39      	ldr	r1, [r7, #32]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	431a      	orrs	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80b1 	beq.w	800421a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040b8:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4a4c      	ldr	r2, [pc, #304]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6193      	str	r3, [r2, #24]
 80040c4:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040d0:	4a48      	ldr	r2, [pc, #288]	; (80041f4 <HAL_GPIO_Init+0x2bc>)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4013      	ands	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <HAL_GPIO_Init+0x2c0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_GPIO_Init+0x1ec>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3f      	ldr	r2, [pc, #252]	; (80041fc <HAL_GPIO_Init+0x2c4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00d      	beq.n	8004120 <HAL_GPIO_Init+0x1e8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <HAL_GPIO_Init+0x2c8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <HAL_GPIO_Init+0x1e4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3d      	ldr	r2, [pc, #244]	; (8004204 <HAL_GPIO_Init+0x2cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_GPIO_Init+0x1e0>
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004118:	2304      	movs	r3, #4
 800411a:	e004      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 800411c:	2302      	movs	r3, #2
 800411e:	e002      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004124:	2300      	movs	r3, #0
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	f002 0203 	and.w	r2, r2, #3
 800412c:	0092      	lsls	r2, r2, #2
 800412e:	4093      	lsls	r3, r2
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004136:	492f      	ldr	r1, [pc, #188]	; (80041f4 <HAL_GPIO_Init+0x2bc>)
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	3302      	adds	r3, #2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	492c      	ldr	r1, [pc, #176]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]
 800415c:	e006      	b.n	800416c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	43db      	mvns	r3, r3
 8004166:	4928      	ldr	r1, [pc, #160]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004168:	4013      	ands	r3, r2
 800416a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4922      	ldr	r1, [pc, #136]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	60cb      	str	r3, [r1, #12]
 8004184:	e006      	b.n	8004194 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	43db      	mvns	r3, r3
 800418e:	491e      	ldr	r1, [pc, #120]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004190:	4013      	ands	r3, r2
 8004192:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	4918      	ldr	r1, [pc, #96]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
 80041ac:	e006      	b.n	80041bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	4914      	ldr	r1, [pc, #80]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d021      	beq.n	800420c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]
 80041d4:	e021      	b.n	800421a <HAL_GPIO_Init+0x2e2>
 80041d6:	bf00      	nop
 80041d8:	10320000 	.word	0x10320000
 80041dc:	10310000 	.word	0x10310000
 80041e0:	10220000 	.word	0x10220000
 80041e4:	10210000 	.word	0x10210000
 80041e8:	10120000 	.word	0x10120000
 80041ec:	10110000 	.word	0x10110000
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010800 	.word	0x40010800
 80041fc:	40010c00 	.word	0x40010c00
 8004200:	40011000 	.word	0x40011000
 8004204:	40011400 	.word	0x40011400
 8004208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_GPIO_Init+0x304>)
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	43db      	mvns	r3, r3
 8004214:	4909      	ldr	r1, [pc, #36]	; (800423c <HAL_GPIO_Init+0x304>)
 8004216:	4013      	ands	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	3301      	adds	r3, #1
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f ae8e 	bne.w	8003f4c <HAL_GPIO_Init+0x14>
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	372c      	adds	r7, #44	; 0x2c
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40010400 	.word	0x40010400

08004240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
 800424c:	4613      	mov	r3, r2
 800424e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800425c:	e003      	b.n	8004266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800425e:	887b      	ldrh	r3, [r7, #2]
 8004260:	041a      	lsls	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	611a      	str	r2, [r3, #16]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e12b      	b.n	80044da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f8d4 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0201 	bic.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042d4:	f001 fbfc 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 80042d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	4a81      	ldr	r2, [pc, #516]	; (80044e4 <HAL_I2C_Init+0x274>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d807      	bhi.n	80042f4 <HAL_I2C_Init+0x84>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a80      	ldr	r2, [pc, #512]	; (80044e8 <HAL_I2C_Init+0x278>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	e006      	b.n	8004302 <HAL_I2C_Init+0x92>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a7d      	ldr	r2, [pc, #500]	; (80044ec <HAL_I2C_Init+0x27c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bf94      	ite	ls
 80042fc:	2301      	movls	r3, #1
 80042fe:	2300      	movhi	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0e7      	b.n	80044da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a78      	ldr	r2, [pc, #480]	; (80044f0 <HAL_I2C_Init+0x280>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0c9b      	lsrs	r3, r3, #18
 8004314:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <HAL_I2C_Init+0x274>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d802      	bhi.n	8004344 <HAL_I2C_Init+0xd4>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3301      	adds	r3, #1
 8004342:	e009      	b.n	8004358 <HAL_I2C_Init+0xe8>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	4a69      	ldr	r2, [pc, #420]	; (80044f4 <HAL_I2C_Init+0x284>)
 8004350:	fba2 2303 	umull	r2, r3, r2, r3
 8004354:	099b      	lsrs	r3, r3, #6
 8004356:	3301      	adds	r3, #1
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	430b      	orrs	r3, r1
 800435e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800436a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	495c      	ldr	r1, [pc, #368]	; (80044e4 <HAL_I2C_Init+0x274>)
 8004374:	428b      	cmp	r3, r1
 8004376:	d819      	bhi.n	80043ac <HAL_I2C_Init+0x13c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1e59      	subs	r1, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	fbb1 f3f3 	udiv	r3, r1, r3
 8004386:	1c59      	adds	r1, r3, #1
 8004388:	f640 73fc 	movw	r3, #4092	; 0xffc
 800438c:	400b      	ands	r3, r1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_I2C_Init+0x138>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1e59      	subs	r1, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a6:	e051      	b.n	800444c <HAL_I2C_Init+0x1dc>
 80043a8:	2304      	movs	r3, #4
 80043aa:	e04f      	b.n	800444c <HAL_I2C_Init+0x1dc>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d111      	bne.n	80043d8 <HAL_I2C_Init+0x168>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	1e58      	subs	r0, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e012      	b.n	80043fe <HAL_I2C_Init+0x18e>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1e58      	subs	r0, r3, #1
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	0099      	lsls	r1, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_Init+0x196>
 8004402:	2301      	movs	r3, #1
 8004404:	e022      	b.n	800444c <HAL_I2C_Init+0x1dc>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10e      	bne.n	800442c <HAL_I2C_Init+0x1bc>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1e58      	subs	r0, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	460b      	mov	r3, r1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	440b      	add	r3, r1
 800441c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004420:	3301      	adds	r3, #1
 8004422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004426:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800442a:	e00f      	b.n	800444c <HAL_I2C_Init+0x1dc>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1e58      	subs	r0, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6859      	ldr	r1, [r3, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	0099      	lsls	r1, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	6809      	ldr	r1, [r1, #0]
 8004450:	4313      	orrs	r3, r2
 8004452:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800447a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6911      	ldr	r1, [r2, #16]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	68d2      	ldr	r2, [r2, #12]
 8004486:	4311      	orrs	r1, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	430b      	orrs	r3, r1
 800448e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	430a      	orrs	r2, r1
 80044aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	000186a0 	.word	0x000186a0
 80044e8:	001e847f 	.word	0x001e847f
 80044ec:	003d08ff 	.word	0x003d08ff
 80044f0:	431bde83 	.word	0x431bde83
 80044f4:	10624dd3 	.word	0x10624dd3

080044f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	461a      	mov	r2, r3
 8004506:	4603      	mov	r3, r0
 8004508:	817b      	strh	r3, [r7, #10]
 800450a:	460b      	mov	r3, r1
 800450c:	813b      	strh	r3, [r7, #8]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004512:	f7ff f933 	bl	800377c <HAL_GetTick>
 8004516:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b20      	cmp	r3, #32
 8004522:	f040 80d9 	bne.w	80046d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2319      	movs	r3, #25
 800452c:	2201      	movs	r2, #1
 800452e:	496d      	ldr	r1, [pc, #436]	; (80046e4 <HAL_I2C_Mem_Write+0x1ec>)
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fccd 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
 800453e:	e0cc      	b.n	80046da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_I2C_Mem_Write+0x56>
 800454a:	2302      	movs	r3, #2
 800454c:	e0c5      	b.n	80046da <HAL_I2C_Mem_Write+0x1e2>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d007      	beq.n	8004574 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004582:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2221      	movs	r2, #33	; 0x21
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2240      	movs	r2, #64	; 0x40
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a3a      	ldr	r2, [r7, #32]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4a4d      	ldr	r2, [pc, #308]	; (80046e8 <HAL_I2C_Mem_Write+0x1f0>)
 80045b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045b6:	88f8      	ldrh	r0, [r7, #6]
 80045b8:	893a      	ldrh	r2, [r7, #8]
 80045ba:	8979      	ldrh	r1, [r7, #10]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	4603      	mov	r3, r0
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fb04 	bl	8004bd4 <I2C_RequestMemoryWrite>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d052      	beq.n	8004678 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e081      	b.n	80046da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fd92 	bl	8005104 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d107      	bne.n	80045fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e06b      	b.n	80046da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	3b01      	subs	r3, #1
 800462c:	b29a      	uxth	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b04      	cmp	r3, #4
 800463e:	d11b      	bne.n	8004678 <HAL_I2C_Mem_Write+0x180>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d017      	beq.n	8004678 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1aa      	bne.n	80045d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fd85 	bl	8005194 <I2C_WaitOnBTFFlagUntilTimeout>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00d      	beq.n	80046ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2b04      	cmp	r3, #4
 8004696:	d107      	bne.n	80046a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e016      	b.n	80046da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	00100002 	.word	0x00100002
 80046e8:	ffff0000 	.word	0xffff0000

080046ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08c      	sub	sp, #48	; 0x30
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	817b      	strh	r3, [r7, #10]
 80046fe:	460b      	mov	r3, r1
 8004700:	813b      	strh	r3, [r7, #8]
 8004702:	4613      	mov	r3, r2
 8004704:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800470a:	f7ff f837 	bl	800377c <HAL_GetTick>
 800470e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b20      	cmp	r3, #32
 800471a:	f040 8250 	bne.w	8004bbe <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2319      	movs	r3, #25
 8004724:	2201      	movs	r2, #1
 8004726:	4982      	ldr	r1, [pc, #520]	; (8004930 <HAL_I2C_Mem_Read+0x244>)
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fbd1 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	e243      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_I2C_Mem_Read+0x5a>
 8004742:	2302      	movs	r3, #2
 8004744:	e23c      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d007      	beq.n	800476c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2222      	movs	r2, #34	; 0x22
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2240      	movs	r2, #64	; 0x40
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800479c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a62      	ldr	r2, [pc, #392]	; (8004934 <HAL_I2C_Mem_Read+0x248>)
 80047ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ae:	88f8      	ldrh	r0, [r7, #6]
 80047b0:	893a      	ldrh	r2, [r7, #8]
 80047b2:	8979      	ldrh	r1, [r7, #10]
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	9301      	str	r3, [sp, #4]
 80047b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	4603      	mov	r3, r0
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa9e 	bl	8004d00 <I2C_RequestMemoryRead>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e1f8      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d113      	bne.n	80047fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	61fb      	str	r3, [r7, #28]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	61fb      	str	r3, [r7, #28]
 80047ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e1cc      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004802:	2b01      	cmp	r3, #1
 8004804:	d11e      	bne.n	8004844 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004814:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004816:	b672      	cpsid	i
}
 8004818:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	61bb      	str	r3, [r7, #24]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800483e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004840:	b662      	cpsie	i
}
 8004842:	e035      	b.n	80048b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004848:	2b02      	cmp	r3, #2
 800484a:	d11e      	bne.n	800488a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800485a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800485c:	b672      	cpsid	i
}
 800485e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004860:	2300      	movs	r3, #0
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004884:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004886:	b662      	cpsie	i
}
 8004888:	e012      	b.n	80048b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004898:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80048b0:	e172      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	f200 811f 	bhi.w	8004afa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d123      	bne.n	800490c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fcab 	bl	8005224 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e173      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	855a      	strh	r2, [r3, #42]	; 0x2a
 800490a:	e145      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	2b02      	cmp	r3, #2
 8004912:	d152      	bne.n	80049ba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491a:	2200      	movs	r2, #0
 800491c:	4906      	ldr	r1, [pc, #24]	; (8004938 <HAL_I2C_Mem_Read+0x24c>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fad6 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e148      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
 800492e:	bf00      	nop
 8004930:	00100002 	.word	0x00100002
 8004934:	ffff0000 	.word	0xffff0000
 8004938:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800493c:	b672      	cpsid	i
}
 800493e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691a      	ldr	r2, [r3, #16]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004978:	b29b      	uxth	r3, r3
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004982:	b662      	cpsie	i
}
 8004984:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049b8:	e0ee      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c0:	2200      	movs	r2, #0
 80049c2:	4981      	ldr	r1, [pc, #516]	; (8004bc8 <HAL_I2C_Mem_Read+0x4dc>)
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fa83 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0f5      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049e4:	b672      	cpsid	i
}
 80049e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691a      	ldr	r2, [r3, #16]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a1a:	4b6c      	ldr	r3, [pc, #432]	; (8004bcc <HAL_I2C_Mem_Read+0x4e0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	08db      	lsrs	r3, r3, #3
 8004a20:	4a6b      	ldr	r2, [pc, #428]	; (8004bd0 <HAL_I2C_Mem_Read+0x4e4>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	0a1a      	lsrs	r2, r3, #8
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00da      	lsls	r2, r3, #3
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d118      	bne.n	8004a72 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0220 	orr.w	r2, r3, #32
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a62:	b662      	cpsie	i
}
 8004a64:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e0a6      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d1d9      	bne.n	8004a34 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004ac2:	b662      	cpsie	i
}
 8004ac4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004af8:	e04e      	b.n	8004b98 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f000 fb90 	bl	8005224 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e058      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d124      	bne.n	8004b98 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d107      	bne.n	8004b66 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b64:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b82:	3b01      	subs	r3, #1
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f47f ae88 	bne.w	80048b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3728      	adds	r7, #40	; 0x28
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	00010004 	.word	0x00010004
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	14f8b589 	.word	0x14f8b589

08004bd4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	4608      	mov	r0, r1
 8004bde:	4611      	mov	r1, r2
 8004be0:	461a      	mov	r2, r3
 8004be2:	4603      	mov	r3, r0
 8004be4:	817b      	strh	r3, [r7, #10]
 8004be6:	460b      	mov	r3, r1
 8004be8:	813b      	strh	r3, [r7, #8]
 8004bea:	4613      	mov	r3, r2
 8004bec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f960 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c24:	d103      	bne.n	8004c2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e05f      	b.n	8004cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c32:	897b      	ldrh	r3, [r7, #10]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	6a3a      	ldr	r2, [r7, #32]
 8004c46:	492d      	ldr	r1, [pc, #180]	; (8004cfc <I2C_RequestMemoryWrite+0x128>)
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f9bb 	bl	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e04c      	b.n	8004cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	6a39      	ldr	r1, [r7, #32]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fa46 	bl	8005104 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00d      	beq.n	8004c9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d107      	bne.n	8004c96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e02b      	b.n	8004cf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ca0:	893b      	ldrh	r3, [r7, #8]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	611a      	str	r2, [r3, #16]
 8004caa:	e021      	b.n	8004cf0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cac:	893b      	ldrh	r3, [r7, #8]
 8004cae:	0a1b      	lsrs	r3, r3, #8
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbc:	6a39      	ldr	r1, [r7, #32]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fa20 	bl	8005104 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d107      	bne.n	8004ce2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ce0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e005      	b.n	8004cf2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce6:	893b      	ldrh	r3, [r7, #8]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	00010002 	.word	0x00010002

08004d00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	4608      	mov	r0, r1
 8004d0a:	4611      	mov	r1, r2
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4603      	mov	r3, r0
 8004d10:	817b      	strh	r3, [r7, #10]
 8004d12:	460b      	mov	r3, r1
 8004d14:	813b      	strh	r3, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f8c2 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00d      	beq.n	8004d6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d60:	d103      	bne.n	8004d6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e0aa      	b.n	8004ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d6e:	897b      	ldrh	r3, [r7, #10]
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	461a      	mov	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	4952      	ldr	r1, [pc, #328]	; (8004ecc <I2C_RequestMemoryRead+0x1cc>)
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f91d 	bl	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e097      	b.n	8004ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	6a39      	ldr	r1, [r7, #32]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f9a8 	bl	8005104 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00d      	beq.n	8004dd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d107      	bne.n	8004dd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e076      	b.n	8004ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d105      	bne.n	8004de8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ddc:	893b      	ldrh	r3, [r7, #8]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	611a      	str	r2, [r3, #16]
 8004de6:	e021      	b.n	8004e2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004de8:	893b      	ldrh	r3, [r7, #8]
 8004dea:	0a1b      	lsrs	r3, r3, #8
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df8:	6a39      	ldr	r1, [r7, #32]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f982 	bl	8005104 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d107      	bne.n	8004e1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e050      	b.n	8004ec4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e22:	893b      	ldrh	r3, [r7, #8]
 8004e24:	b2da      	uxtb	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2e:	6a39      	ldr	r1, [r7, #32]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f967 	bl	8005104 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	2b04      	cmp	r3, #4
 8004e42:	d107      	bne.n	8004e54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e035      	b.n	8004ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 f82b 	bl	8004ed0 <I2C_WaitOnFlagUntilTimeout>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8e:	d103      	bne.n	8004e98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e013      	b.n	8004ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e9c:	897b      	ldrh	r3, [r7, #10]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	6a3a      	ldr	r2, [r7, #32]
 8004eb0:	4906      	ldr	r1, [pc, #24]	; (8004ecc <I2C_RequestMemoryRead+0x1cc>)
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f886 	bl	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	00010002 	.word	0x00010002

08004ed0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4613      	mov	r3, r2
 8004ede:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee0:	e048      	b.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d044      	beq.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eea:	f7fe fc47 	bl	800377c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d302      	bcc.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d139      	bne.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10d      	bne.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	43da      	mvns	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	e00c      	b.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d116      	bne.n	8004f74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e023      	b.n	8004fbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d10d      	bne.n	8004f9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	43da      	mvns	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	e00c      	b.n	8004fb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	43da      	mvns	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d093      	beq.n	8004ee2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fd2:	e071      	b.n	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe2:	d123      	bne.n	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ffc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	f043 0204 	orr.w	r2, r3, #4
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e067      	b.n	80050fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005032:	d041      	beq.n	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005034:	f7fe fba2 	bl	800377c <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d136      	bne.n	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d10c      	bne.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	43da      	mvns	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e00b      	b.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	43da      	mvns	r2, r3
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4013      	ands	r3, r2
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	bf14      	ite	ne
 8005080:	2301      	movne	r3, #1
 8005082:	2300      	moveq	r3, #0
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	f043 0220 	orr.w	r2, r3, #32
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e021      	b.n	80050fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	0c1b      	lsrs	r3, r3, #16
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d10c      	bne.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	43da      	mvns	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	4013      	ands	r3, r2
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e00b      	b.n	80050f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	43da      	mvns	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bf14      	ite	ne
 80050ee:	2301      	movne	r3, #1
 80050f0:	2300      	moveq	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f47f af6d 	bne.w	8004fd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005110:	e034      	b.n	800517c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f8e3 	bl	80052de <I2C_IsAcknowledgeFailed>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e034      	b.n	800518c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d028      	beq.n	800517c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fe fb27 	bl	800377c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d11d      	bne.n	800517c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d016      	beq.n	800517c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f043 0220 	orr.w	r2, r3, #32
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e007      	b.n	800518c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b80      	cmp	r3, #128	; 0x80
 8005188:	d1c3      	bne.n	8005112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051a0:	e034      	b.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f89b 	bl	80052de <I2C_IsAcknowledgeFailed>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e034      	b.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d028      	beq.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fe fadf 	bl	800377c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d11d      	bne.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d016      	beq.n	800520c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f8:	f043 0220 	orr.w	r2, r3, #32
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e007      	b.n	800521c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b04      	cmp	r3, #4
 8005218:	d1c3      	bne.n	80051a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005230:	e049      	b.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b10      	cmp	r3, #16
 800523e:	d119      	bne.n	8005274 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0210 	mvn.w	r2, #16
 8005248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e030      	b.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005274:	f7fe fa82 	bl	800377c <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d11d      	bne.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b40      	cmp	r3, #64	; 0x40
 8005296:	d016      	beq.n	80052c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e007      	b.n	80052d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d1ae      	bne.n	8005232 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f4:	d11b      	bne.n	800532e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f043 0204 	orr.w	r2, r3, #4
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
	...

0800533c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e272      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	f000 8087 	beq.w	800546a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800535c:	4b92      	ldr	r3, [pc, #584]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b04      	cmp	r3, #4
 8005366:	d00c      	beq.n	8005382 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005368:	4b8f      	ldr	r3, [pc, #572]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b08      	cmp	r3, #8
 8005372:	d112      	bne.n	800539a <HAL_RCC_OscConfig+0x5e>
 8005374:	4b8c      	ldr	r3, [pc, #560]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d10b      	bne.n	800539a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005382:	4b89      	ldr	r3, [pc, #548]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d06c      	beq.n	8005468 <HAL_RCC_OscConfig+0x12c>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d168      	bne.n	8005468 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e24c      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a2:	d106      	bne.n	80053b2 <HAL_RCC_OscConfig+0x76>
 80053a4:	4b80      	ldr	r3, [pc, #512]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7f      	ldr	r2, [pc, #508]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	e02e      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x98>
 80053ba:	4b7b      	ldr	r3, [pc, #492]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a7a      	ldr	r2, [pc, #488]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	4b78      	ldr	r3, [pc, #480]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a77      	ldr	r2, [pc, #476]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	e01d      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053dc:	d10c      	bne.n	80053f8 <HAL_RCC_OscConfig+0xbc>
 80053de:	4b72      	ldr	r3, [pc, #456]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a71      	ldr	r2, [pc, #452]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	4b6f      	ldr	r3, [pc, #444]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a6e      	ldr	r2, [pc, #440]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	e00b      	b.n	8005410 <HAL_RCC_OscConfig+0xd4>
 80053f8:	4b6b      	ldr	r3, [pc, #428]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a6a      	ldr	r2, [pc, #424]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80053fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b68      	ldr	r3, [pc, #416]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a67      	ldr	r2, [pc, #412]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800540a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800540e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005418:	f7fe f9b0 	bl	800377c <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005420:	f7fe f9ac 	bl	800377c <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b64      	cmp	r3, #100	; 0x64
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e200      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	4b5d      	ldr	r3, [pc, #372]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0xe4>
 800543e:	e014      	b.n	800546a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005440:	f7fe f99c 	bl	800377c <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005448:	f7fe f998 	bl	800377c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e1ec      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800545a:	4b53      	ldr	r3, [pc, #332]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x10c>
 8005466:	e000      	b.n	800546a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d063      	beq.n	800553e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005476:	4b4c      	ldr	r3, [pc, #304]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005482:	4b49      	ldr	r3, [pc, #292]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b08      	cmp	r3, #8
 800548c:	d11c      	bne.n	80054c8 <HAL_RCC_OscConfig+0x18c>
 800548e:	4b46      	ldr	r3, [pc, #280]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d116      	bne.n	80054c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800549a:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_RCC_OscConfig+0x176>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d001      	beq.n	80054b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e1c0      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b2:	4b3d      	ldr	r3, [pc, #244]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4939      	ldr	r1, [pc, #228]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054c6:	e03a      	b.n	800553e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d020      	beq.n	8005512 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054d0:	4b36      	ldr	r3, [pc, #216]	; (80055ac <HAL_RCC_OscConfig+0x270>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d6:	f7fe f951 	bl	800377c <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054de:	f7fe f94d 	bl	800377c <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e1a1      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f0:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0302 	and.w	r3, r3, #2
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fc:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4927      	ldr	r1, [pc, #156]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]
 8005510:	e015      	b.n	800553e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_RCC_OscConfig+0x270>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fe f930 	bl	800377c <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005520:	f7fe f92c 	bl	800377c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e180      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005532:	4b1d      	ldr	r3, [pc, #116]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d03a      	beq.n	80055c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d019      	beq.n	8005586 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005552:	4b17      	ldr	r3, [pc, #92]	; (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005554:	2201      	movs	r2, #1
 8005556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005558:	f7fe f910 	bl	800377c <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005560:	f7fe f90c 	bl	800377c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e160      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <HAL_RCC_OscConfig+0x26c>)
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d0f0      	beq.n	8005560 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800557e:	2001      	movs	r0, #1
 8005580:	f000 face 	bl	8005b20 <RCC_Delay>
 8005584:	e01c      	b.n	80055c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <HAL_RCC_OscConfig+0x274>)
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558c:	f7fe f8f6 	bl	800377c <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005592:	e00f      	b.n	80055b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005594:	f7fe f8f2 	bl	800377c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d908      	bls.n	80055b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e146      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
 80055a6:	bf00      	nop
 80055a8:	40021000 	.word	0x40021000
 80055ac:	42420000 	.word	0x42420000
 80055b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b4:	4b92      	ldr	r3, [pc, #584]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e9      	bne.n	8005594 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80a6 	beq.w	800571a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ce:	2300      	movs	r3, #0
 80055d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055d2:	4b8b      	ldr	r3, [pc, #556]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055de:	4b88      	ldr	r3, [pc, #544]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4a87      	ldr	r2, [pc, #540]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055e8:	61d3      	str	r3, [r2, #28]
 80055ea:	4b85      	ldr	r3, [pc, #532]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	60bb      	str	r3, [r7, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b82      	ldr	r3, [pc, #520]	; (8005804 <HAL_RCC_OscConfig+0x4c8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	2b00      	cmp	r3, #0
 8005604:	d118      	bne.n	8005638 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005606:	4b7f      	ldr	r3, [pc, #508]	; (8005804 <HAL_RCC_OscConfig+0x4c8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7e      	ldr	r2, [pc, #504]	; (8005804 <HAL_RCC_OscConfig+0x4c8>)
 800560c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005612:	f7fe f8b3 	bl	800377c <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561a:	f7fe f8af 	bl	800377c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b64      	cmp	r3, #100	; 0x64
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e103      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562c:	4b75      	ldr	r3, [pc, #468]	; (8005804 <HAL_RCC_OscConfig+0x4c8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005634:	2b00      	cmp	r3, #0
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d106      	bne.n	800564e <HAL_RCC_OscConfig+0x312>
 8005640:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	6213      	str	r3, [r2, #32]
 800564c:	e02d      	b.n	80056aa <HAL_RCC_OscConfig+0x36e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10c      	bne.n	8005670 <HAL_RCC_OscConfig+0x334>
 8005656:	4b6a      	ldr	r3, [pc, #424]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	4a69      	ldr	r2, [pc, #420]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	6213      	str	r3, [r2, #32]
 8005662:	4b67      	ldr	r3, [pc, #412]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4a66      	ldr	r2, [pc, #408]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005668:	f023 0304 	bic.w	r3, r3, #4
 800566c:	6213      	str	r3, [r2, #32]
 800566e:	e01c      	b.n	80056aa <HAL_RCC_OscConfig+0x36e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b05      	cmp	r3, #5
 8005676:	d10c      	bne.n	8005692 <HAL_RCC_OscConfig+0x356>
 8005678:	4b61      	ldr	r3, [pc, #388]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	4a60      	ldr	r2, [pc, #384]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 800567e:	f043 0304 	orr.w	r3, r3, #4
 8005682:	6213      	str	r3, [r2, #32]
 8005684:	4b5e      	ldr	r3, [pc, #376]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	4a5d      	ldr	r2, [pc, #372]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6213      	str	r3, [r2, #32]
 8005690:	e00b      	b.n	80056aa <HAL_RCC_OscConfig+0x36e>
 8005692:	4b5b      	ldr	r3, [pc, #364]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	4a5a      	ldr	r2, [pc, #360]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	6213      	str	r3, [r2, #32]
 800569e:	4b58      	ldr	r3, [pc, #352]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	4a57      	ldr	r2, [pc, #348]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80056a4:	f023 0304 	bic.w	r3, r3, #4
 80056a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d015      	beq.n	80056de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fe f863 	bl	800377c <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b8:	e00a      	b.n	80056d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ba:	f7fe f85f 	bl	800377c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e0b1      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d0:	4b4b      	ldr	r3, [pc, #300]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ee      	beq.n	80056ba <HAL_RCC_OscConfig+0x37e>
 80056dc:	e014      	b.n	8005708 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056de:	f7fe f84d 	bl	800377c <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e4:	e00a      	b.n	80056fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fe f849 	bl	800377c <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e09b      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056fc:	4b40      	ldr	r3, [pc, #256]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ee      	bne.n	80056e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d105      	bne.n	800571a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800570e:	4b3c      	ldr	r3, [pc, #240]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	4a3b      	ldr	r2, [pc, #236]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005718:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 8087 	beq.w	8005832 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005724:	4b36      	ldr	r3, [pc, #216]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b08      	cmp	r3, #8
 800572e:	d061      	beq.n	80057f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d146      	bne.n	80057c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005738:	4b33      	ldr	r3, [pc, #204]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800573e:	f7fe f81d 	bl	800377c <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005746:	f7fe f819 	bl	800377c <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e06d      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005758:	4b29      	ldr	r3, [pc, #164]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f0      	bne.n	8005746 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576c:	d108      	bne.n	8005780 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800576e:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	4921      	ldr	r1, [pc, #132]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 800577c:	4313      	orrs	r3, r2
 800577e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005780:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a19      	ldr	r1, [r3, #32]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	430b      	orrs	r3, r1
 8005792:	491b      	ldr	r1, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 8005794:	4313      	orrs	r3, r2
 8005796:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579e:	f7fd ffed 	bl	800377c <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fd ffe9 	bl	800377c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e03d      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057b8:	4b11      	ldr	r3, [pc, #68]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0f0      	beq.n	80057a6 <HAL_RCC_OscConfig+0x46a>
 80057c4:	e035      	b.n	8005832 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b10      	ldr	r3, [pc, #64]	; (8005808 <HAL_RCC_OscConfig+0x4cc>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057cc:	f7fd ffd6 	bl	800377c <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fd ffd2 	bl	800377c <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e026      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <HAL_RCC_OscConfig+0x4c4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x498>
 80057f2:	e01e      	b.n	8005832 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d107      	bne.n	800580c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e019      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
 8005800:	40021000 	.word	0x40021000
 8005804:	40007000 	.word	0x40007000
 8005808:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800580c:	4b0b      	ldr	r3, [pc, #44]	; (800583c <HAL_RCC_OscConfig+0x500>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	429a      	cmp	r2, r3
 800581e:	d106      	bne.n	800582e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d001      	beq.n	8005832 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40021000 	.word	0x40021000

08005840 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0d0      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005854:	4b6a      	ldr	r3, [pc, #424]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d910      	bls.n	8005884 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005862:	4b67      	ldr	r3, [pc, #412]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 0207 	bic.w	r2, r3, #7
 800586a:	4965      	ldr	r1, [pc, #404]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005872:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0b8      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d020      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800589c:	4b59      	ldr	r3, [pc, #356]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a58      	ldr	r2, [pc, #352]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0308 	and.w	r3, r3, #8
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058b4:	4b53      	ldr	r3, [pc, #332]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a52      	ldr	r2, [pc, #328]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80058ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c0:	4b50      	ldr	r3, [pc, #320]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	494d      	ldr	r1, [pc, #308]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d040      	beq.n	8005960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058e6:	4b47      	ldr	r3, [pc, #284]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d115      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e07f      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d107      	bne.n	800590e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058fe:	4b41      	ldr	r3, [pc, #260]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e073      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800590e:	4b3d      	ldr	r3, [pc, #244]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e06b      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800591e:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f023 0203 	bic.w	r2, r3, #3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4936      	ldr	r1, [pc, #216]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 800592c:	4313      	orrs	r3, r2
 800592e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005930:	f7fd ff24 	bl	800377c <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005936:	e00a      	b.n	800594e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005938:	f7fd ff20 	bl	800377c <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	f241 3288 	movw	r2, #5000	; 0x1388
 8005946:	4293      	cmp	r3, r2
 8005948:	d901      	bls.n	800594e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e053      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800594e:	4b2d      	ldr	r3, [pc, #180]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f003 020c 	and.w	r2, r3, #12
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	429a      	cmp	r2, r3
 800595e:	d1eb      	bne.n	8005938 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005960:	4b27      	ldr	r3, [pc, #156]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d210      	bcs.n	8005990 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f023 0207 	bic.w	r2, r3, #7
 8005976:	4922      	ldr	r1, [pc, #136]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	4313      	orrs	r3, r2
 800597c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597e:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_RCC_ClockConfig+0x1c0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e032      	b.n	80059f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	4916      	ldr	r1, [pc, #88]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ba:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	490e      	ldr	r1, [pc, #56]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ce:	f000 f821 	bl	8005a14 <HAL_RCC_GetSysClockFreq>
 80059d2:	4602      	mov	r2, r0
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_RCC_ClockConfig+0x1c4>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	091b      	lsrs	r3, r3, #4
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	490a      	ldr	r1, [pc, #40]	; (8005a08 <HAL_RCC_ClockConfig+0x1c8>)
 80059e0:	5ccb      	ldrb	r3, [r1, r3]
 80059e2:	fa22 f303 	lsr.w	r3, r2, r3
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <HAL_RCC_ClockConfig+0x1cc>)
 80059e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_RCC_ClockConfig+0x1d0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fd fe82 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	40022000 	.word	0x40022000
 8005a04:	40021000 	.word	0x40021000
 8005a08:	0800c098 	.word	0x0800c098
 8005a0c:	20000000 	.word	0x20000000
 8005a10:	20000004 	.word	0x20000004

08005a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	2300      	movs	r3, #0
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d002      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x30>
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d003      	beq.n	8005a4a <HAL_RCC_GetSysClockFreq+0x36>
 8005a42:	e027      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a44:	4b19      	ldr	r3, [pc, #100]	; (8005aac <HAL_RCC_GetSysClockFreq+0x98>)
 8005a46:	613b      	str	r3, [r7, #16]
      break;
 8005a48:	e027      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	0c9b      	lsrs	r3, r3, #18
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	4a17      	ldr	r2, [pc, #92]	; (8005ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a54:	5cd3      	ldrb	r3, [r2, r3]
 8005a56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d010      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a62:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	0c5b      	lsrs	r3, r3, #17
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a6e:	5cd3      	ldrb	r3, [r2, r3]
 8005a70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a0d      	ldr	r2, [pc, #52]	; (8005aac <HAL_RCC_GetSysClockFreq+0x98>)
 8005a76:	fb03 f202 	mul.w	r2, r3, r2
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e004      	b.n	8005a8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a0c      	ldr	r2, [pc, #48]	; (8005ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
 8005a8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	613b      	str	r3, [r7, #16]
      break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_RCC_GetSysClockFreq+0x98>)
 8005a96:	613b      	str	r3, [r7, #16]
      break;
 8005a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a9a:	693b      	ldr	r3, [r7, #16]
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	007a1200 	.word	0x007a1200
 8005ab0:	0800c0b0 	.word	0x0800c0b0
 8005ab4:	0800c0c0 	.word	0x0800c0c0
 8005ab8:	003d0900 	.word	0x003d0900

08005abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ac0:	4b02      	ldr	r3, [pc, #8]	; (8005acc <HAL_RCC_GetHCLKFreq+0x10>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	20000000 	.word	0x20000000

08005ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ad4:	f7ff fff2 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4903      	ldr	r1, [pc, #12]	; (8005af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	40021000 	.word	0x40021000
 8005af4:	0800c0a8 	.word	0x0800c0a8

08005af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005afc:	f7ff ffde 	bl	8005abc <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	0adb      	lsrs	r3, r3, #11
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	; (8005b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	0800c0a8 	.word	0x0800c0a8

08005b20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <RCC_Delay+0x34>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a0a      	ldr	r2, [pc, #40]	; (8005b58 <RCC_Delay+0x38>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	0a5b      	lsrs	r3, r3, #9
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	fb02 f303 	mul.w	r3, r2, r3
 8005b3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b3c:	bf00      	nop
  }
  while (Delay --);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	60fa      	str	r2, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f9      	bne.n	8005b3c <RCC_Delay+0x1c>
}
 8005b48:	bf00      	nop
 8005b4a:	bf00      	nop
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bc80      	pop	{r7}
 8005b52:	4770      	bx	lr
 8005b54:	20000000 	.word	0x20000000
 8005b58:	10624dd3 	.word	0x10624dd3

08005b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e041      	b.n	8005bf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fd f9ec 	bl	8002f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f000 fc18 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d001      	beq.n	8005c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e03a      	b.n	8005c8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0201 	orr.w	r2, r2, #1
 8005c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <HAL_TIM_Base_Start_IT+0x98>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00e      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x58>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c3e:	d009      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x58>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a14      	ldr	r2, [pc, #80]	; (8005c98 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d004      	beq.n	8005c54 <HAL_TIM_Base_Start_IT+0x58>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <HAL_TIM_Base_Start_IT+0xa0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d111      	bne.n	8005c78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b06      	cmp	r3, #6
 8005c64:	d010      	beq.n	8005c88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f042 0201 	orr.w	r2, r2, #1
 8005c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c76:	e007      	b.n	8005c88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr
 8005c94:	40012c00 	.word	0x40012c00
 8005c98:	40000400 	.word	0x40000400
 8005c9c:	40000800 	.word	0x40000800

08005ca0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e041      	b.n	8005d36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f839 	bl	8005d3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f000 fb76 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bc80      	pop	{r7}
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d109      	bne.n	8005d74 <HAL_TIM_PWM_Start+0x24>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	bf14      	ite	ne
 8005d6c:	2301      	movne	r3, #1
 8005d6e:	2300      	moveq	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	e022      	b.n	8005dba <HAL_TIM_PWM_Start+0x6a>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d109      	bne.n	8005d8e <HAL_TIM_PWM_Start+0x3e>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	e015      	b.n	8005dba <HAL_TIM_PWM_Start+0x6a>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b08      	cmp	r3, #8
 8005d92:	d109      	bne.n	8005da8 <HAL_TIM_PWM_Start+0x58>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	bf14      	ite	ne
 8005da0:	2301      	movne	r3, #1
 8005da2:	2300      	moveq	r3, #0
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	e008      	b.n	8005dba <HAL_TIM_PWM_Start+0x6a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e05e      	b.n	8005e80 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_PWM_Start+0x82>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd0:	e013      	b.n	8005dfa <HAL_TIM_PWM_Start+0xaa>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	2b04      	cmp	r3, #4
 8005dd6:	d104      	bne.n	8005de2 <HAL_TIM_PWM_Start+0x92>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005de0:	e00b      	b.n	8005dfa <HAL_TIM_PWM_Start+0xaa>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d104      	bne.n	8005df2 <HAL_TIM_PWM_Start+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df0:	e003      	b.n	8005dfa <HAL_TIM_PWM_Start+0xaa>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fd70 	bl	80068e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <HAL_TIM_PWM_Start+0x138>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d107      	bne.n	8005e22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <HAL_TIM_PWM_Start+0x138>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_TIM_PWM_Start+0xfa>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e34:	d009      	beq.n	8005e4a <HAL_TIM_PWM_Start+0xfa>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <HAL_TIM_PWM_Start+0x13c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_TIM_PWM_Start+0xfa>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <HAL_TIM_PWM_Start+0x140>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d111      	bne.n	8005e6e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b06      	cmp	r3, #6
 8005e5a:	d010      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6c:	e007      	b.n	8005e7e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f042 0201 	orr.w	r2, r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40000800 	.word	0x40000800

08005e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d020      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01b      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0202 	mvn.w	r2, #2
 8005ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fa5a 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8005ee4:	e005      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa4d 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa5c 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d020      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01b      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0204 	mvn.w	r2, #4
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa34 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fa27 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fa36 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d020      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f003 0308 	and.w	r3, r3, #8
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d01b      	beq.n	8005f90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0208 	mvn.w	r2, #8
 8005f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2204      	movs	r2, #4
 8005f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa0e 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa01 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 fa10 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d020      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d01b      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0210 	mvn.w	r2, #16
 8005fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9e8 	bl	8006398 <HAL_TIM_IC_CaptureCallback>
 8005fc8:	e005      	b.n	8005fd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f9db 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f9ea 	bl	80063aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0201 	mvn.w	r2, #1
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fb fb0a 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fced 	bl	80069fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f9ba 	bl	80063bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d007      	beq.n	800606c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0220 	mvn.w	r2, #32
 8006064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fcc0 	bl	80069ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800608e:	2302      	movs	r3, #2
 8006090:	e0ae      	b.n	80061f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b0c      	cmp	r3, #12
 800609e:	f200 809f 	bhi.w	80061e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060dd 	.word	0x080060dd
 80060ac:	080061e1 	.word	0x080061e1
 80060b0:	080061e1 	.word	0x080061e1
 80060b4:	080061e1 	.word	0x080061e1
 80060b8:	0800611d 	.word	0x0800611d
 80060bc:	080061e1 	.word	0x080061e1
 80060c0:	080061e1 	.word	0x080061e1
 80060c4:	080061e1 	.word	0x080061e1
 80060c8:	0800615f 	.word	0x0800615f
 80060cc:	080061e1 	.word	0x080061e1
 80060d0:	080061e1 	.word	0x080061e1
 80060d4:	080061e1 	.word	0x080061e1
 80060d8:	0800619f 	.word	0x0800619f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f9e2 	bl	80064ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699a      	ldr	r2, [r3, #24]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0208 	orr.w	r2, r2, #8
 80060f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0204 	bic.w	r2, r2, #4
 8006106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6999      	ldr	r1, [r3, #24]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	691a      	ldr	r2, [r3, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	430a      	orrs	r2, r1
 8006118:	619a      	str	r2, [r3, #24]
      break;
 800611a:	e064      	b.n	80061e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fa28 	bl	8006578 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699a      	ldr	r2, [r3, #24]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6999      	ldr	r1, [r3, #24]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	021a      	lsls	r2, r3, #8
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	619a      	str	r2, [r3, #24]
      break;
 800615c:	e043      	b.n	80061e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68b9      	ldr	r1, [r7, #8]
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fa71 	bl	800664c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f042 0208 	orr.w	r2, r2, #8
 8006178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0204 	bic.w	r2, r2, #4
 8006188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69d9      	ldr	r1, [r3, #28]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	691a      	ldr	r2, [r3, #16]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	61da      	str	r2, [r3, #28]
      break;
 800619c:	e023      	b.n	80061e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fabb 	bl	8006720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69da      	ldr	r2, [r3, #28]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	69da      	ldr	r2, [r3, #28]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69d9      	ldr	r1, [r3, #28]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	021a      	lsls	r2, r3, #8
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	61da      	str	r2, [r3, #28]
      break;
 80061de:	e002      	b.n	80061e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
      break;
 80061e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_TIM_ConfigClockSource+0x1c>
 8006210:	2302      	movs	r3, #2
 8006212:	e0b4      	b.n	800637e <HAL_TIM_ConfigClockSource+0x186>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800623a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624c:	d03e      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0xd4>
 800624e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006252:	f200 8087 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800625a:	f000 8086 	beq.w	800636a <HAL_TIM_ConfigClockSource+0x172>
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006262:	d87f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006264:	2b70      	cmp	r3, #112	; 0x70
 8006266:	d01a      	beq.n	800629e <HAL_TIM_ConfigClockSource+0xa6>
 8006268:	2b70      	cmp	r3, #112	; 0x70
 800626a:	d87b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b60      	cmp	r3, #96	; 0x60
 800626e:	d050      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0x11a>
 8006270:	2b60      	cmp	r3, #96	; 0x60
 8006272:	d877      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b50      	cmp	r3, #80	; 0x50
 8006276:	d03c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006278:	2b50      	cmp	r3, #80	; 0x50
 800627a:	d873      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d058      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x13a>
 8006280:	2b40      	cmp	r3, #64	; 0x40
 8006282:	d86f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b30      	cmp	r3, #48	; 0x30
 8006286:	d064      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 8006288:	2b30      	cmp	r3, #48	; 0x30
 800628a:	d86b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d060      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 8006290:	2b20      	cmp	r3, #32
 8006292:	d867      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05c      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	2b10      	cmp	r3, #16
 800629a:	d05a      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 800629c:	e062      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ae:	f000 fafc 	bl	80068aa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	609a      	str	r2, [r3, #8]
      break;
 80062ca:	e04f      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062dc:	f000 fae5 	bl	80068aa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ee:	609a      	str	r2, [r3, #8]
      break;
 80062f0:	e03c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fe:	461a      	mov	r2, r3
 8006300:	f000 fa5c 	bl	80067bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2150      	movs	r1, #80	; 0x50
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fab3 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006310:	e02c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631e:	461a      	mov	r2, r3
 8006320:	f000 fa7a 	bl	8006818 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2160      	movs	r1, #96	; 0x60
 800632a:	4618      	mov	r0, r3
 800632c:	f000 faa3 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006330:	e01c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	461a      	mov	r2, r3
 8006340:	f000 fa3c 	bl	80067bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2140      	movs	r1, #64	; 0x40
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fa93 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006350:	e00c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f000 fa8a 	bl	8006876 <TIM_ITRx_SetConfig>
      break;
 8006362:	e003      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
      break;
 8006368:	e000      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800636a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr
	...

080063d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a2f      	ldr	r2, [pc, #188]	; (80064a0 <TIM_Base_SetConfig+0xd0>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_Base_SetConfig+0x30>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ee:	d007      	beq.n	8006400 <TIM_Base_SetConfig+0x30>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2c      	ldr	r2, [pc, #176]	; (80064a4 <TIM_Base_SetConfig+0xd4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_Base_SetConfig+0x30>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2b      	ldr	r2, [pc, #172]	; (80064a8 <TIM_Base_SetConfig+0xd8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a22      	ldr	r2, [pc, #136]	; (80064a0 <TIM_Base_SetConfig+0xd0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00b      	beq.n	8006432 <TIM_Base_SetConfig+0x62>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006420:	d007      	beq.n	8006432 <TIM_Base_SetConfig+0x62>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <TIM_Base_SetConfig+0xd4>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d003      	beq.n	8006432 <TIM_Base_SetConfig+0x62>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1e      	ldr	r2, [pc, #120]	; (80064a8 <TIM_Base_SetConfig+0xd8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d108      	bne.n	8006444 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006438:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a0d      	ldr	r2, [pc, #52]	; (80064a0 <TIM_Base_SetConfig+0xd0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d103      	bne.n	8006478 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f023 0201 	bic.w	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	611a      	str	r2, [r3, #16]
  }
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr
 80064a0:	40012c00 	.word	0x40012c00
 80064a4:	40000400 	.word	0x40000400
 80064a8:	40000800 	.word	0x40000800

080064ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	f023 0201 	bic.w	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0303 	bic.w	r3, r3, #3
 80064e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f023 0302 	bic.w	r3, r3, #2
 80064f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <TIM_OC1_SetConfig+0xc8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d10c      	bne.n	8006522 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0308 	bic.w	r3, r3, #8
 800650e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a13      	ldr	r2, [pc, #76]	; (8006574 <TIM_OC1_SetConfig+0xc8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d111      	bne.n	800654e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	621a      	str	r2, [r3, #32]
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00

08006578 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	f023 0210 	bic.w	r2, r3, #16
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 0320 	bic.w	r3, r3, #32
 80065c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	; (8006648 <TIM_OC2_SetConfig+0xd0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10d      	bne.n	80065f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a14      	ldr	r2, [pc, #80]	; (8006648 <TIM_OC2_SetConfig+0xd0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d113      	bne.n	8006624 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800660a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr
 8006648:	40012c00 	.word	0x40012c00

0800664c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f023 0303 	bic.w	r3, r3, #3
 8006682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	4313      	orrs	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <TIM_OC3_SetConfig+0xd0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10d      	bne.n	80066c6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a14      	ldr	r2, [pc, #80]	; (800671c <TIM_OC3_SetConfig+0xd0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d113      	bne.n	80066f6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685a      	ldr	r2, [r3, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	621a      	str	r2, [r3, #32]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40012c00 	.word	0x40012c00

08006720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800676a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	031b      	lsls	r3, r3, #12
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a0f      	ldr	r2, [pc, #60]	; (80067b8 <TIM_OC4_SetConfig+0x98>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d109      	bne.n	8006794 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	40012c00 	.word	0x40012c00

080067bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f023 0201 	bic.w	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f023 030a 	bic.w	r3, r3, #10
 80067f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	bf00      	nop
 8006810:	371c      	adds	r7, #28
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f023 0210 	bic.w	r2, r3, #16
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	031b      	lsls	r3, r3, #12
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006854:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr

08006876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	f043 0307 	orr.w	r3, r3, #7
 8006898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	609a      	str	r2, [r3, #8]
}
 80068a0:	bf00      	nop
 80068a2:	3714      	adds	r7, #20
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bc80      	pop	{r7}
 80068a8:	4770      	bx	lr

080068aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b087      	sub	sp, #28
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	607a      	str	r2, [r7, #4]
 80068b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	021a      	lsls	r2, r3, #8
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	431a      	orrs	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	609a      	str	r2, [r3, #8]
}
 80068de:	bf00      	nop
 80068e0:	371c      	adds	r7, #28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	2201      	movs	r2, #1
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a1a      	ldr	r2, [r3, #32]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	43db      	mvns	r3, r3
 800690a:	401a      	ands	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1a      	ldr	r2, [r3, #32]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	fa01 f303 	lsl.w	r3, r1, r3
 8006920:	431a      	orrs	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	621a      	str	r2, [r3, #32]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	bc80      	pop	{r7}
 800692e:	4770      	bx	lr

08006930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006944:	2302      	movs	r3, #2
 8006946:	e046      	b.n	80069d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00e      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006994:	d009      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a12      	ldr	r2, [pc, #72]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a10      	ldr	r2, [pc, #64]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d10c      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	bc80      	pop	{r7}
 80069de:	4770      	bx	lr
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800

080069ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bc80      	pop	{r7}
 80069fc:	4770      	bx	lr

080069fe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e042      	b.n	8006aa8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d106      	bne.n	8006a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f7fc fcfe 	bl	8003438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68da      	ldr	r2, [r3, #12]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 ff79 	bl	800794c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af02      	add	r7, sp, #8
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	603b      	str	r3, [r7, #0]
 8006abc:	4613      	mov	r3, r2
 8006abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d175      	bne.n	8006bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_UART_Transmit+0x2c>
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e06e      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2221      	movs	r2, #33	; 0x21
 8006aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aee:	f7fc fe45 	bl	800377c <HAL_GetTick>
 8006af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	88fa      	ldrh	r2, [r7, #6]
 8006af8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b08:	d108      	bne.n	8006b1c <HAL_UART_Transmit+0x6c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	61bb      	str	r3, [r7, #24]
 8006b1a:	e003      	b.n	8006b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b24:	e02e      	b.n	8006b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 fc55 	bl	80073e0 <UART_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e03a      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	3302      	adds	r3, #2
 8006b62:	61bb      	str	r3, [r7, #24]
 8006b64:	e007      	b.n	8006b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	3301      	adds	r3, #1
 8006b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1cb      	bne.n	8006b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	2140      	movs	r1, #64	; 0x40
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fc21 	bl	80073e0 <UART_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e006      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08c      	sub	sp, #48	; 0x30
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d146      	bne.n	8006c6e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e03f      	b.n	8006c70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fc46 	bl	8007494 <UART_Start_Receive_DMA>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d125      	bne.n	8006c62 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	330c      	adds	r3, #12
 8006c32:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f043 0310 	orr.w	r3, r3, #16
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	330c      	adds	r3, #12
 8006c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8006c4e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e5      	bne.n	8006c2c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006c60:	e002      	b.n	8006c68 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8006c68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c6c:	e000      	b.n	8006c70 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006c6e:	2302      	movs	r3, #2
  }
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3730      	adds	r7, #48	; 0x30
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b0ba      	sub	sp, #232	; 0xe8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10f      	bne.n	8006cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_UART_IRQHandler+0x66>
 8006cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fd7a 	bl	80077d0 <UART_Receive_IT>
      return;
 8006cdc:	e25b      	b.n	8007196 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80de 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x22c>
 8006ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d106      	bne.n	8006d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80d1 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <HAL_UART_IRQHandler+0xae>
 8006d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f043 0201 	orr.w	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00b      	beq.n	8006d4a <HAL_UART_IRQHandler+0xd2>
 8006d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	f043 0202 	orr.w	r2, r3, #2
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00b      	beq.n	8006d6e <HAL_UART_IRQHandler+0xf6>
 8006d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d66:	f043 0204 	orr.w	r2, r3, #4
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d011      	beq.n	8006d9e <HAL_UART_IRQHandler+0x126>
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d005      	beq.n	8006d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f043 0208 	orr.w	r2, r3, #8
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 81f2 	beq.w	800718c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x14e>
 8006db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fd05 	bl	80077d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	bf14      	ite	ne
 8006dd4:	2301      	movne	r3, #1
 8006dd6:	2300      	moveq	r3, #0
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d103      	bne.n	8006df2 <HAL_UART_IRQHandler+0x17a>
 8006dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d04f      	beq.n	8006e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fc0f 	bl	8007616 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d041      	beq.n	8006e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3314      	adds	r3, #20
 8006e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1d9      	bne.n	8006e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d013      	beq.n	8006e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	4a7e      	ldr	r2, [pc, #504]	; (8007058 <HAL_UART_IRQHandler+0x3e0>)
 8006e60:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fc feba 	bl	8003be0 <HAL_DMA_Abort_IT>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d016      	beq.n	8006ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	e00e      	b.n	8006ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f9a5 	bl	80071d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e88:	e00a      	b.n	8006ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9a1 	bl	80071d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e90:	e006      	b.n	8006ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f99d 	bl	80071d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006e9e:	e175      	b.n	800718c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea0:	bf00      	nop
    return;
 8006ea2:	e173      	b.n	800718c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	f040 814f 	bne.w	800714c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8148 	beq.w	800714c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8141 	beq.w	800714c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60bb      	str	r3, [r7, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	60bb      	str	r3, [r7, #8]
 8006ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80b6 	beq.w	800705c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 8145 	beq.w	8007190 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	f080 813e 	bcs.w	8007190 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	f000 8088 	beq.w	8007038 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1d9      	bne.n	8006f28 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3314      	adds	r3, #20
 8006f94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fa0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e1      	bne.n	8006f74 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3314      	adds	r3, #20
 8006fb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3314      	adds	r3, #20
 8006fd0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fd6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e3      	bne.n	8006fb0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	330c      	adds	r3, #12
 8006ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007008:	f023 0310 	bic.w	r3, r3, #16
 800700c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	330c      	adds	r3, #12
 8007016:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800701a:	65ba      	str	r2, [r7, #88]	; 0x58
 800701c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007020:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e3      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	4618      	mov	r0, r3
 8007034:	f7fc fd98 	bl	8003b68 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007046:	b29b      	uxth	r3, r3
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	b29b      	uxth	r3, r3
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7fc f826 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007054:	e09c      	b.n	8007190 <HAL_UART_IRQHandler+0x518>
 8007056:	bf00      	nop
 8007058:	080076db 	.word	0x080076db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007064:	b29b      	uxth	r3, r3
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007070:	b29b      	uxth	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 808e 	beq.w	8007194 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8089 	beq.w	8007194 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80070a6:	647a      	str	r2, [r7, #68]	; 0x44
 80070a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e3      	bne.n	8007082 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3314      	adds	r3, #20
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	623b      	str	r3, [r7, #32]
   return(result);
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3314      	adds	r3, #20
 80070da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070de:	633a      	str	r2, [r7, #48]	; 0x30
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e3      	bne.n	80070ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0310 	bic.w	r3, r3, #16
 8007116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	330c      	adds	r3, #12
 8007120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007124:	61fa      	str	r2, [r7, #28]
 8007126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	69b9      	ldr	r1, [r7, #24]
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	617b      	str	r3, [r7, #20]
   return(result);
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e3      	bne.n	8007100 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800713e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7fb ffab 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800714a:	e023      	b.n	8007194 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800714c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007154:	2b00      	cmp	r3, #0
 8007156:	d009      	beq.n	800716c <HAL_UART_IRQHandler+0x4f4>
 8007158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 facc 	bl	8007702 <UART_Transmit_IT>
    return;
 800716a:	e014      	b.n	8007196 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800716c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00e      	beq.n	8007196 <HAL_UART_IRQHandler+0x51e>
 8007178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d008      	beq.n	8007196 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fb0b 	bl	80077a0 <UART_EndTransmit_IT>
    return;
 800718a:	e004      	b.n	8007196 <HAL_UART_IRQHandler+0x51e>
    return;
 800718c:	bf00      	nop
 800718e:	e002      	b.n	8007196 <HAL_UART_IRQHandler+0x51e>
      return;
 8007190:	bf00      	nop
 8007192:	e000      	b.n	8007196 <HAL_UART_IRQHandler+0x51e>
      return;
 8007194:	bf00      	nop
  }
}
 8007196:	37e8      	adds	r7, #232	; 0xe8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bc80      	pop	{r7}
 80071ac:	4770      	bx	lr

080071ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr

080071d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	bc80      	pop	{r7}
 80071e2:	4770      	bx	lr

080071e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b09c      	sub	sp, #112	; 0x70
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d172      	bne.n	80072e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007202:	2200      	movs	r2, #0
 8007204:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	330c      	adds	r3, #12
 800720c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800721c:	66bb      	str	r3, [r7, #104]	; 0x68
 800721e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	330c      	adds	r3, #12
 8007224:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007226:	65ba      	str	r2, [r7, #88]	; 0x58
 8007228:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800722c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e5      	bne.n	8007206 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800723a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3314      	adds	r3, #20
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	e853 3f00 	ldrex	r3, [r3]
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	f023 0301 	bic.w	r3, r3, #1
 8007250:	667b      	str	r3, [r7, #100]	; 0x64
 8007252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3314      	adds	r3, #20
 8007258:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800725a:	647a      	str	r2, [r7, #68]	; 0x44
 800725c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007260:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007262:	e841 2300 	strex	r3, r2, [r1]
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1e5      	bne.n	800723a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800726e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3314      	adds	r3, #20
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	e853 3f00 	ldrex	r3, [r3]
 800727c:	623b      	str	r3, [r7, #32]
   return(result);
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007284:	663b      	str	r3, [r7, #96]	; 0x60
 8007286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3314      	adds	r3, #20
 800728c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800728e:	633a      	str	r2, [r7, #48]	; 0x30
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007296:	e841 2300 	strex	r3, r2, [r1]
 800729a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1e5      	bne.n	800726e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d119      	bne.n	80072e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	330c      	adds	r3, #12
 80072b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f023 0310 	bic.w	r3, r3, #16
 80072c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072d2:	61fa      	str	r2, [r7, #28]
 80072d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	69b9      	ldr	r1, [r7, #24]
 80072d8:	69fa      	ldr	r2, [r7, #28]
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	617b      	str	r3, [r7, #20]
   return(result);
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e5      	bne.n	80072b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e8:	2200      	movs	r2, #0
 80072ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d106      	bne.n	8007302 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072f8:	4619      	mov	r1, r3
 80072fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072fc:	f7fb fed0 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007300:	e002      	b.n	8007308 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007302:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007304:	f7ff ff53 	bl	80071ae <HAL_UART_RxCpltCallback>
}
 8007308:	bf00      	nop
 800730a:	3770      	adds	r7, #112	; 0x70
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	2b01      	cmp	r3, #1
 800732a:	d108      	bne.n	800733e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007330:	085b      	lsrs	r3, r3, #1
 8007332:	b29b      	uxth	r3, r3
 8007334:	4619      	mov	r1, r3
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f7fb feb2 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800733c:	e002      	b.n	8007344 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff ff3e 	bl	80071c0 <HAL_UART_RxHalfCpltCallback>
}
 8007344:	bf00      	nop
 8007346:	3710      	adds	r7, #16
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007368:	2b00      	cmp	r3, #0
 800736a:	bf14      	ite	ne
 800736c:	2301      	movne	r3, #1
 800736e:	2300      	moveq	r3, #0
 8007370:	b2db      	uxtb	r3, r3
 8007372:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b21      	cmp	r3, #33	; 0x21
 800737e:	d108      	bne.n	8007392 <UART_DMAError+0x46>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2200      	movs	r2, #0
 800738a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800738c:	68b8      	ldr	r0, [r7, #8]
 800738e:	f000 f91b 	bl	80075c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	bf14      	ite	ne
 80073a0:	2301      	movne	r3, #1
 80073a2:	2300      	moveq	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b22      	cmp	r3, #34	; 0x22
 80073b2:	d108      	bne.n	80073c6 <UART_DMAError+0x7a>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d005      	beq.n	80073c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2200      	movs	r2, #0
 80073be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073c0:	68b8      	ldr	r0, [r7, #8]
 80073c2:	f000 f928 	bl	8007616 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	f043 0210 	orr.w	r2, r3, #16
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073d2:	68b8      	ldr	r0, [r7, #8]
 80073d4:	f7ff fefd 	bl	80071d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073d8:	bf00      	nop
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f0:	e03b      	b.n	800746a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d037      	beq.n	800746a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073fa:	f7fc f9bf 	bl	800377c <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	6a3a      	ldr	r2, [r7, #32]
 8007406:	429a      	cmp	r2, r3
 8007408:	d302      	bcc.n	8007410 <UART_WaitOnFlagUntilTimeout+0x30>
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e03a      	b.n	800748a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f003 0304 	and.w	r3, r3, #4
 800741e:	2b00      	cmp	r3, #0
 8007420:	d023      	beq.n	800746a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	2b80      	cmp	r3, #128	; 0x80
 8007426:	d020      	beq.n	800746a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2b40      	cmp	r3, #64	; 0x40
 800742c:	d01d      	beq.n	800746a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	2b08      	cmp	r3, #8
 800743a:	d116      	bne.n	800746a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f8df 	bl	8007616 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2208      	movs	r2, #8
 800745c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e00f      	b.n	800748a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	4013      	ands	r3, r2
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	429a      	cmp	r2, r3
 8007478:	bf0c      	ite	eq
 800747a:	2301      	moveq	r3, #1
 800747c:	2300      	movne	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	461a      	mov	r2, r3
 8007482:	79fb      	ldrb	r3, [r7, #7]
 8007484:	429a      	cmp	r2, r3
 8007486:	d0b4      	beq.n	80073f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b098      	sub	sp, #96	; 0x60
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	88fa      	ldrh	r2, [r7, #6]
 80074ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2222      	movs	r2, #34	; 0x22
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	4a3e      	ldr	r2, [pc, #248]	; (80075bc <UART_Start_Receive_DMA+0x128>)
 80074c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c8:	4a3d      	ldr	r2, [pc, #244]	; (80075c0 <UART_Start_Receive_DMA+0x12c>)
 80074ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d0:	4a3c      	ldr	r2, [pc, #240]	; (80075c4 <UART_Start_Receive_DMA+0x130>)
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d8:	2200      	movs	r2, #0
 80074da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80074dc:	f107 0308 	add.w	r3, r7, #8
 80074e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	f7fc fad8 	bl	8003aa8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	613b      	str	r3, [r7, #16]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d019      	beq.n	800754a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	330c      	adds	r3, #12
 800751c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800752c:	65bb      	str	r3, [r7, #88]	; 0x58
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	330c      	adds	r3, #12
 8007534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007536:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007538:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800753c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3314      	adds	r3, #20
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	657b      	str	r3, [r7, #84]	; 0x54
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3314      	adds	r3, #20
 8007568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800756a:	63ba      	str	r2, [r7, #56]	; 0x38
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3314      	adds	r3, #20
 8007584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	617b      	str	r3, [r7, #20]
   return(result);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007594:	653b      	str	r3, [r7, #80]	; 0x50
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3314      	adds	r3, #20
 800759c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800759e:	627a      	str	r2, [r7, #36]	; 0x24
 80075a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a2:	6a39      	ldr	r1, [r7, #32]
 80075a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075a6:	e841 2300 	strex	r3, r2, [r1]
 80075aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e5      	bne.n	800757e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3760      	adds	r7, #96	; 0x60
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	080071e5 	.word	0x080071e5
 80075c0:	08007311 	.word	0x08007311
 80075c4:	0800734d 	.word	0x0800734d

080075c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b089      	sub	sp, #36	; 0x24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	330c      	adds	r3, #12
 80075d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	60bb      	str	r3, [r7, #8]
   return(result);
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	330c      	adds	r3, #12
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	61ba      	str	r2, [r7, #24]
 80075f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	6979      	ldr	r1, [r7, #20]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	613b      	str	r3, [r7, #16]
   return(result);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e5      	bne.n	80075d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2220      	movs	r2, #32
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800760c:	bf00      	nop
 800760e:	3724      	adds	r7, #36	; 0x24
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr

08007616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007616:	b480      	push	{r7}
 8007618:	b095      	sub	sp, #84	; 0x54
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	330c      	adds	r3, #12
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007634:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	330c      	adds	r3, #12
 800763c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800763e:	643a      	str	r2, [r7, #64]	; 0x40
 8007640:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e5      	bne.n	800761e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3314      	adds	r3, #20
 8007658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	61fb      	str	r3, [r7, #28]
   return(result);
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	f023 0301 	bic.w	r3, r3, #1
 8007668:	64bb      	str	r3, [r7, #72]	; 0x48
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3314      	adds	r3, #20
 8007670:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767a:	e841 2300 	strex	r3, r2, [r1]
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1e5      	bne.n	8007652 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768a:	2b01      	cmp	r3, #1
 800768c:	d119      	bne.n	80076c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	60bb      	str	r3, [r7, #8]
   return(result);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f023 0310 	bic.w	r3, r3, #16
 80076a4:	647b      	str	r3, [r7, #68]	; 0x44
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	330c      	adds	r3, #12
 80076ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ae:	61ba      	str	r2, [r7, #24]
 80076b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6979      	ldr	r1, [r7, #20]
 80076b4:	69ba      	ldr	r2, [r7, #24]
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	613b      	str	r3, [r7, #16]
   return(result);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076d0:	bf00      	nop
 80076d2:	3754      	adds	r7, #84	; 0x54
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bc80      	pop	{r7}
 80076d8:	4770      	bx	lr

080076da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f7ff fd6c 	bl	80071d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076fa:	bf00      	nop
 80076fc:	3710      	adds	r7, #16
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b21      	cmp	r3, #33	; 0x21
 8007714:	d13e      	bne.n	8007794 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800771e:	d114      	bne.n	800774a <UART_Transmit_IT+0x48>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d110      	bne.n	800774a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800773c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	621a      	str	r2, [r3, #32]
 8007748:	e008      	b.n	800775c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	1c59      	adds	r1, r3, #1
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6211      	str	r1, [r2, #32]
 8007754:	781a      	ldrb	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29b      	uxth	r3, r3
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4619      	mov	r1, r3
 800776a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10f      	bne.n	8007790 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800777e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800778e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	e000      	b.n	8007796 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007794:	2302      	movs	r3, #2
  }
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr

080077a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff fceb 	bl	800719c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08c      	sub	sp, #48	; 0x30
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b22      	cmp	r3, #34	; 0x22
 80077e2:	f040 80ae 	bne.w	8007942 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ee:	d117      	bne.n	8007820 <UART_Receive_IT+0x50>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d113      	bne.n	8007820 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780e:	b29a      	uxth	r2, r3
 8007810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007812:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007818:	1c9a      	adds	r2, r3, #2
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	629a      	str	r2, [r3, #40]	; 0x28
 800781e:	e026      	b.n	800786e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007824:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007832:	d007      	beq.n	8007844 <UART_Receive_IT+0x74>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <UART_Receive_IT+0x82>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d106      	bne.n	8007852 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b2da      	uxtb	r2, r3
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e008      	b.n	8007864 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785e:	b2da      	uxtb	r2, r3
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29b      	uxth	r3, r3
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	4619      	mov	r1, r3
 800787c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800787e:	2b00      	cmp	r3, #0
 8007880:	d15d      	bne.n	800793e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0220 	bic.w	r2, r2, #32
 8007890:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	695a      	ldr	r2, [r3, #20]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f022 0201 	bic.w	r2, r2, #1
 80078b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d135      	bne.n	8007934 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	330c      	adds	r3, #12
 80078d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	613b      	str	r3, [r7, #16]
   return(result);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f023 0310 	bic.w	r3, r3, #16
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	330c      	adds	r3, #12
 80078ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ee:	623a      	str	r2, [r7, #32]
 80078f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	69f9      	ldr	r1, [r7, #28]
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e5      	bne.n	80078ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b10      	cmp	r3, #16
 800790e:	d10a      	bne.n	8007926 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7fb fbb7 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
 8007932:	e002      	b.n	800793a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff fc3a 	bl	80071ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800793a:	2300      	movs	r3, #0
 800793c:	e002      	b.n	8007944 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	e000      	b.n	8007944 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007942:	2302      	movs	r3, #2
  }
}
 8007944:	4618      	mov	r0, r3
 8007946:	3730      	adds	r7, #48	; 0x30
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	4313      	orrs	r3, r2
 800797a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007986:	f023 030c 	bic.w	r3, r3, #12
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6812      	ldr	r2, [r2, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	430b      	orrs	r3, r1
 8007992:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a2c      	ldr	r2, [pc, #176]	; (8007a60 <UART_SetConfig+0x114>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d103      	bne.n	80079bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80079b4:	f7fe f8a0 	bl	8005af8 <HAL_RCC_GetPCLK2Freq>
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	e002      	b.n	80079c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80079bc:	f7fe f888 	bl	8005ad0 <HAL_RCC_GetPCLK1Freq>
 80079c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009a      	lsls	r2, r3, #2
 80079cc:	441a      	add	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <UART_SetConfig+0x118>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	0119      	lsls	r1, r3, #4
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	009a      	lsls	r2, r3, #2
 80079ec:	441a      	add	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079f8:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <UART_SetConfig+0x118>)
 80079fa:	fba3 0302 	umull	r0, r3, r3, r2
 80079fe:	095b      	lsrs	r3, r3, #5
 8007a00:	2064      	movs	r0, #100	; 0x64
 8007a02:	fb00 f303 	mul.w	r3, r0, r3
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	3332      	adds	r3, #50	; 0x32
 8007a0c:	4a15      	ldr	r2, [pc, #84]	; (8007a64 <UART_SetConfig+0x118>)
 8007a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a12:	095b      	lsrs	r3, r3, #5
 8007a14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a18:	4419      	add	r1, r3
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009a      	lsls	r2, r3, #2
 8007a24:	441a      	add	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <UART_SetConfig+0x118>)
 8007a32:	fba3 0302 	umull	r0, r3, r3, r2
 8007a36:	095b      	lsrs	r3, r3, #5
 8007a38:	2064      	movs	r0, #100	; 0x64
 8007a3a:	fb00 f303 	mul.w	r3, r0, r3
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	3332      	adds	r3, #50	; 0x32
 8007a44:	4a07      	ldr	r2, [pc, #28]	; (8007a64 <UART_SetConfig+0x118>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	f003 020f 	and.w	r2, r3, #15
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	440a      	add	r2, r1
 8007a56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40013800 	.word	0x40013800
 8007a64:	51eb851f 	.word	0x51eb851f

08007a68 <atof>:
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f000 be19 	b.w	80086a0 <strtod>

08007a6e <atoi>:
 8007a6e:	220a      	movs	r2, #10
 8007a70:	2100      	movs	r1, #0
 8007a72:	f000 be9f 	b.w	80087b4 <strtol>

08007a76 <sulp>:
 8007a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7a:	460f      	mov	r7, r1
 8007a7c:	4690      	mov	r8, r2
 8007a7e:	f003 fbeb 	bl	800b258 <__ulp>
 8007a82:	4604      	mov	r4, r0
 8007a84:	460d      	mov	r5, r1
 8007a86:	f1b8 0f00 	cmp.w	r8, #0
 8007a8a:	d011      	beq.n	8007ab0 <sulp+0x3a>
 8007a8c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dd0b      	ble.n	8007ab0 <sulp+0x3a>
 8007a98:	2400      	movs	r4, #0
 8007a9a:	051b      	lsls	r3, r3, #20
 8007a9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007aa0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	462b      	mov	r3, r5
 8007aa8:	f7f8 fd20 	bl	80004ec <__aeabi_dmul>
 8007aac:	4604      	mov	r4, r0
 8007aae:	460d      	mov	r5, r1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007ab8 <_strtod_l>:
 8007ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007abc:	b09f      	sub	sp, #124	; 0x7c
 8007abe:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	921a      	str	r2, [sp, #104]	; 0x68
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	f04f 0800 	mov.w	r8, #0
 8007acc:	f04f 0900 	mov.w	r9, #0
 8007ad0:	460a      	mov	r2, r1
 8007ad2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ad4:	7811      	ldrb	r1, [r2, #0]
 8007ad6:	292b      	cmp	r1, #43	; 0x2b
 8007ad8:	d04a      	beq.n	8007b70 <_strtod_l+0xb8>
 8007ada:	d838      	bhi.n	8007b4e <_strtod_l+0x96>
 8007adc:	290d      	cmp	r1, #13
 8007ade:	d832      	bhi.n	8007b46 <_strtod_l+0x8e>
 8007ae0:	2908      	cmp	r1, #8
 8007ae2:	d832      	bhi.n	8007b4a <_strtod_l+0x92>
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d03b      	beq.n	8007b60 <_strtod_l+0xa8>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	920e      	str	r2, [sp, #56]	; 0x38
 8007aec:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007aee:	7832      	ldrb	r2, [r6, #0]
 8007af0:	2a30      	cmp	r2, #48	; 0x30
 8007af2:	f040 80b2 	bne.w	8007c5a <_strtod_l+0x1a2>
 8007af6:	7872      	ldrb	r2, [r6, #1]
 8007af8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007afc:	2a58      	cmp	r2, #88	; 0x58
 8007afe:	d16e      	bne.n	8007bde <_strtod_l+0x126>
 8007b00:	9302      	str	r3, [sp, #8]
 8007b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b04:	4620      	mov	r0, r4
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	ab1a      	add	r3, sp, #104	; 0x68
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4a8c      	ldr	r2, [pc, #560]	; (8007d40 <_strtod_l+0x288>)
 8007b0e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007b10:	a919      	add	r1, sp, #100	; 0x64
 8007b12:	f002 fc7d 	bl	800a410 <__gethex>
 8007b16:	f010 070f 	ands.w	r7, r0, #15
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	d005      	beq.n	8007b2a <_strtod_l+0x72>
 8007b1e:	2f06      	cmp	r7, #6
 8007b20:	d128      	bne.n	8007b74 <_strtod_l+0xbc>
 8007b22:	2300      	movs	r3, #0
 8007b24:	3601      	adds	r6, #1
 8007b26:	9619      	str	r6, [sp, #100]	; 0x64
 8007b28:	930e      	str	r3, [sp, #56]	; 0x38
 8007b2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f040 85a0 	bne.w	8008672 <_strtod_l+0xbba>
 8007b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b34:	b1cb      	cbz	r3, 8007b6a <_strtod_l+0xb2>
 8007b36:	4642      	mov	r2, r8
 8007b38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4619      	mov	r1, r3
 8007b40:	b01f      	add	sp, #124	; 0x7c
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	2920      	cmp	r1, #32
 8007b48:	d1ce      	bne.n	8007ae8 <_strtod_l+0x30>
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	e7c1      	b.n	8007ad2 <_strtod_l+0x1a>
 8007b4e:	292d      	cmp	r1, #45	; 0x2d
 8007b50:	d1ca      	bne.n	8007ae8 <_strtod_l+0x30>
 8007b52:	2101      	movs	r1, #1
 8007b54:	910e      	str	r1, [sp, #56]	; 0x38
 8007b56:	1c51      	adds	r1, r2, #1
 8007b58:	9119      	str	r1, [sp, #100]	; 0x64
 8007b5a:	7852      	ldrb	r2, [r2, #1]
 8007b5c:	2a00      	cmp	r2, #0
 8007b5e:	d1c5      	bne.n	8007aec <_strtod_l+0x34>
 8007b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b62:	9519      	str	r5, [sp, #100]	; 0x64
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 8582 	bne.w	800866e <_strtod_l+0xbb6>
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	464b      	mov	r3, r9
 8007b6e:	e7e5      	b.n	8007b3c <_strtod_l+0x84>
 8007b70:	2100      	movs	r1, #0
 8007b72:	e7ef      	b.n	8007b54 <_strtod_l+0x9c>
 8007b74:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b76:	b13a      	cbz	r2, 8007b88 <_strtod_l+0xd0>
 8007b78:	2135      	movs	r1, #53	; 0x35
 8007b7a:	a81c      	add	r0, sp, #112	; 0x70
 8007b7c:	f003 fc58 	bl	800b430 <__copybits>
 8007b80:	4620      	mov	r0, r4
 8007b82:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b84:	f003 f83c 	bl	800ac00 <_Bfree>
 8007b88:	3f01      	subs	r7, #1
 8007b8a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b8c:	2f04      	cmp	r7, #4
 8007b8e:	d806      	bhi.n	8007b9e <_strtod_l+0xe6>
 8007b90:	e8df f007 	tbb	[pc, r7]
 8007b94:	201d0314 	.word	0x201d0314
 8007b98:	14          	.byte	0x14
 8007b99:	00          	.byte	0x00
 8007b9a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007b9e:	05e9      	lsls	r1, r5, #23
 8007ba0:	bf48      	it	mi
 8007ba2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007ba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007baa:	0d1b      	lsrs	r3, r3, #20
 8007bac:	051b      	lsls	r3, r3, #20
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1bb      	bne.n	8007b2a <_strtod_l+0x72>
 8007bb2:	f001 fcc1 	bl	8009538 <__errno>
 8007bb6:	2322      	movs	r3, #34	; 0x22
 8007bb8:	6003      	str	r3, [r0, #0]
 8007bba:	e7b6      	b.n	8007b2a <_strtod_l+0x72>
 8007bbc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007bc0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007bc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bc8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007bcc:	e7e7      	b.n	8007b9e <_strtod_l+0xe6>
 8007bce:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007d44 <_strtod_l+0x28c>
 8007bd2:	e7e4      	b.n	8007b9e <_strtod_l+0xe6>
 8007bd4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007bd8:	f04f 38ff 	mov.w	r8, #4294967295
 8007bdc:	e7df      	b.n	8007b9e <_strtod_l+0xe6>
 8007bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	9219      	str	r2, [sp, #100]	; 0x64
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b30      	cmp	r3, #48	; 0x30
 8007be8:	d0f9      	beq.n	8007bde <_strtod_l+0x126>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d09d      	beq.n	8007b2a <_strtod_l+0x72>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f04f 0a00 	mov.w	sl, #0
 8007bf4:	220a      	movs	r2, #10
 8007bf6:	46d3      	mov	fp, sl
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bfc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c02:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007c04:	7806      	ldrb	r6, [r0, #0]
 8007c06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007c0a:	b2d9      	uxtb	r1, r3
 8007c0c:	2909      	cmp	r1, #9
 8007c0e:	d926      	bls.n	8007c5e <_strtod_l+0x1a6>
 8007c10:	2201      	movs	r2, #1
 8007c12:	494d      	ldr	r1, [pc, #308]	; (8007d48 <_strtod_l+0x290>)
 8007c14:	f001 fc34 	bl	8009480 <strncmp>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d030      	beq.n	8007c7e <_strtod_l+0x1c6>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	4632      	mov	r2, r6
 8007c20:	4603      	mov	r3, r0
 8007c22:	465e      	mov	r6, fp
 8007c24:	9008      	str	r0, [sp, #32]
 8007c26:	2a65      	cmp	r2, #101	; 0x65
 8007c28:	d001      	beq.n	8007c2e <_strtod_l+0x176>
 8007c2a:	2a45      	cmp	r2, #69	; 0x45
 8007c2c:	d113      	bne.n	8007c56 <_strtod_l+0x19e>
 8007c2e:	b91e      	cbnz	r6, 8007c38 <_strtod_l+0x180>
 8007c30:	9a05      	ldr	r2, [sp, #20]
 8007c32:	4302      	orrs	r2, r0
 8007c34:	d094      	beq.n	8007b60 <_strtod_l+0xa8>
 8007c36:	2600      	movs	r6, #0
 8007c38:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007c3a:	1c6a      	adds	r2, r5, #1
 8007c3c:	9219      	str	r2, [sp, #100]	; 0x64
 8007c3e:	786a      	ldrb	r2, [r5, #1]
 8007c40:	2a2b      	cmp	r2, #43	; 0x2b
 8007c42:	d074      	beq.n	8007d2e <_strtod_l+0x276>
 8007c44:	2a2d      	cmp	r2, #45	; 0x2d
 8007c46:	d078      	beq.n	8007d3a <_strtod_l+0x282>
 8007c48:	f04f 0c00 	mov.w	ip, #0
 8007c4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c50:	2909      	cmp	r1, #9
 8007c52:	d97f      	bls.n	8007d54 <_strtod_l+0x29c>
 8007c54:	9519      	str	r5, [sp, #100]	; 0x64
 8007c56:	2700      	movs	r7, #0
 8007c58:	e09e      	b.n	8007d98 <_strtod_l+0x2e0>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e7c8      	b.n	8007bf0 <_strtod_l+0x138>
 8007c5e:	f1bb 0f08 	cmp.w	fp, #8
 8007c62:	bfd8      	it	le
 8007c64:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007c66:	f100 0001 	add.w	r0, r0, #1
 8007c6a:	bfd6      	itet	le
 8007c6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c70:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007c74:	930a      	strle	r3, [sp, #40]	; 0x28
 8007c76:	f10b 0b01 	add.w	fp, fp, #1
 8007c7a:	9019      	str	r0, [sp, #100]	; 0x64
 8007c7c:	e7c1      	b.n	8007c02 <_strtod_l+0x14a>
 8007c7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	9219      	str	r2, [sp, #100]	; 0x64
 8007c84:	785a      	ldrb	r2, [r3, #1]
 8007c86:	f1bb 0f00 	cmp.w	fp, #0
 8007c8a:	d037      	beq.n	8007cfc <_strtod_l+0x244>
 8007c8c:	465e      	mov	r6, fp
 8007c8e:	9008      	str	r0, [sp, #32]
 8007c90:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c94:	2b09      	cmp	r3, #9
 8007c96:	d912      	bls.n	8007cbe <_strtod_l+0x206>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e7c4      	b.n	8007c26 <_strtod_l+0x16e>
 8007c9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ca4:	785a      	ldrb	r2, [r3, #1]
 8007ca6:	2a30      	cmp	r2, #48	; 0x30
 8007ca8:	d0f8      	beq.n	8007c9c <_strtod_l+0x1e4>
 8007caa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	f200 84e4 	bhi.w	800867c <_strtod_l+0xbc4>
 8007cb4:	9008      	str	r0, [sp, #32]
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	4606      	mov	r6, r0
 8007cba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cbe:	3a30      	subs	r2, #48	; 0x30
 8007cc0:	f100 0301 	add.w	r3, r0, #1
 8007cc4:	d014      	beq.n	8007cf0 <_strtod_l+0x238>
 8007cc6:	9908      	ldr	r1, [sp, #32]
 8007cc8:	eb00 0c06 	add.w	ip, r0, r6
 8007ccc:	4419      	add	r1, r3
 8007cce:	9108      	str	r1, [sp, #32]
 8007cd0:	4633      	mov	r3, r6
 8007cd2:	210a      	movs	r1, #10
 8007cd4:	4563      	cmp	r3, ip
 8007cd6:	d113      	bne.n	8007d00 <_strtod_l+0x248>
 8007cd8:	1833      	adds	r3, r6, r0
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	f106 0601 	add.w	r6, r6, #1
 8007ce0:	4406      	add	r6, r0
 8007ce2:	dc1a      	bgt.n	8007d1a <_strtod_l+0x262>
 8007ce4:	230a      	movs	r3, #10
 8007ce6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ce8:	fb03 2301 	mla	r3, r3, r1, r2
 8007cec:	930a      	str	r3, [sp, #40]	; 0x28
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	1c51      	adds	r1, r2, #1
 8007cf6:	9119      	str	r1, [sp, #100]	; 0x64
 8007cf8:	7852      	ldrb	r2, [r2, #1]
 8007cfa:	e7c9      	b.n	8007c90 <_strtod_l+0x1d8>
 8007cfc:	4658      	mov	r0, fp
 8007cfe:	e7d2      	b.n	8007ca6 <_strtod_l+0x1ee>
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	f103 0301 	add.w	r3, r3, #1
 8007d06:	dc03      	bgt.n	8007d10 <_strtod_l+0x258>
 8007d08:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007d0a:	434f      	muls	r7, r1
 8007d0c:	970a      	str	r7, [sp, #40]	; 0x28
 8007d0e:	e7e1      	b.n	8007cd4 <_strtod_l+0x21c>
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	bfd8      	it	le
 8007d14:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007d18:	e7dc      	b.n	8007cd4 <_strtod_l+0x21c>
 8007d1a:	2e10      	cmp	r6, #16
 8007d1c:	bfdc      	itt	le
 8007d1e:	230a      	movle	r3, #10
 8007d20:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007d24:	e7e3      	b.n	8007cee <_strtod_l+0x236>
 8007d26:	2300      	movs	r3, #0
 8007d28:	9308      	str	r3, [sp, #32]
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e780      	b.n	8007c30 <_strtod_l+0x178>
 8007d2e:	f04f 0c00 	mov.w	ip, #0
 8007d32:	1caa      	adds	r2, r5, #2
 8007d34:	9219      	str	r2, [sp, #100]	; 0x64
 8007d36:	78aa      	ldrb	r2, [r5, #2]
 8007d38:	e788      	b.n	8007c4c <_strtod_l+0x194>
 8007d3a:	f04f 0c01 	mov.w	ip, #1
 8007d3e:	e7f8      	b.n	8007d32 <_strtod_l+0x27a>
 8007d40:	0800c0c4 	.word	0x0800c0c4
 8007d44:	7ff00000 	.word	0x7ff00000
 8007d48:	0800c0c2 	.word	0x0800c0c2
 8007d4c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d4e:	1c51      	adds	r1, r2, #1
 8007d50:	9119      	str	r1, [sp, #100]	; 0x64
 8007d52:	7852      	ldrb	r2, [r2, #1]
 8007d54:	2a30      	cmp	r2, #48	; 0x30
 8007d56:	d0f9      	beq.n	8007d4c <_strtod_l+0x294>
 8007d58:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d5c:	2908      	cmp	r1, #8
 8007d5e:	f63f af7a 	bhi.w	8007c56 <_strtod_l+0x19e>
 8007d62:	3a30      	subs	r2, #48	; 0x30
 8007d64:	9209      	str	r2, [sp, #36]	; 0x24
 8007d66:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d68:	920c      	str	r2, [sp, #48]	; 0x30
 8007d6a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d6c:	1c57      	adds	r7, r2, #1
 8007d6e:	9719      	str	r7, [sp, #100]	; 0x64
 8007d70:	7852      	ldrb	r2, [r2, #1]
 8007d72:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d76:	f1be 0f09 	cmp.w	lr, #9
 8007d7a:	d938      	bls.n	8007dee <_strtod_l+0x336>
 8007d7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d7e:	1a7f      	subs	r7, r7, r1
 8007d80:	2f08      	cmp	r7, #8
 8007d82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007d86:	dc03      	bgt.n	8007d90 <_strtod_l+0x2d8>
 8007d88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d8a:	428f      	cmp	r7, r1
 8007d8c:	bfa8      	it	ge
 8007d8e:	460f      	movge	r7, r1
 8007d90:	f1bc 0f00 	cmp.w	ip, #0
 8007d94:	d000      	beq.n	8007d98 <_strtod_l+0x2e0>
 8007d96:	427f      	negs	r7, r7
 8007d98:	2e00      	cmp	r6, #0
 8007d9a:	d14f      	bne.n	8007e3c <_strtod_l+0x384>
 8007d9c:	9905      	ldr	r1, [sp, #20]
 8007d9e:	4301      	orrs	r1, r0
 8007da0:	f47f aec3 	bne.w	8007b2a <_strtod_l+0x72>
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f47f aedb 	bne.w	8007b60 <_strtod_l+0xa8>
 8007daa:	2a69      	cmp	r2, #105	; 0x69
 8007dac:	d029      	beq.n	8007e02 <_strtod_l+0x34a>
 8007dae:	dc26      	bgt.n	8007dfe <_strtod_l+0x346>
 8007db0:	2a49      	cmp	r2, #73	; 0x49
 8007db2:	d026      	beq.n	8007e02 <_strtod_l+0x34a>
 8007db4:	2a4e      	cmp	r2, #78	; 0x4e
 8007db6:	f47f aed3 	bne.w	8007b60 <_strtod_l+0xa8>
 8007dba:	499a      	ldr	r1, [pc, #616]	; (8008024 <_strtod_l+0x56c>)
 8007dbc:	a819      	add	r0, sp, #100	; 0x64
 8007dbe:	f002 fd69 	bl	800a894 <__match>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f43f aecc 	beq.w	8007b60 <_strtod_l+0xa8>
 8007dc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b28      	cmp	r3, #40	; 0x28
 8007dce:	d12f      	bne.n	8007e30 <_strtod_l+0x378>
 8007dd0:	4995      	ldr	r1, [pc, #596]	; (8008028 <_strtod_l+0x570>)
 8007dd2:	aa1c      	add	r2, sp, #112	; 0x70
 8007dd4:	a819      	add	r0, sp, #100	; 0x64
 8007dd6:	f002 fd71 	bl	800a8bc <__hexnan>
 8007dda:	2805      	cmp	r0, #5
 8007ddc:	d128      	bne.n	8007e30 <_strtod_l+0x378>
 8007dde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007de0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007de4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007de8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007dec:	e69d      	b.n	8007b2a <_strtod_l+0x72>
 8007dee:	210a      	movs	r1, #10
 8007df0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007df2:	fb01 2107 	mla	r1, r1, r7, r2
 8007df6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfc:	e7b5      	b.n	8007d6a <_strtod_l+0x2b2>
 8007dfe:	2a6e      	cmp	r2, #110	; 0x6e
 8007e00:	e7d9      	b.n	8007db6 <_strtod_l+0x2fe>
 8007e02:	498a      	ldr	r1, [pc, #552]	; (800802c <_strtod_l+0x574>)
 8007e04:	a819      	add	r0, sp, #100	; 0x64
 8007e06:	f002 fd45 	bl	800a894 <__match>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	f43f aea8 	beq.w	8007b60 <_strtod_l+0xa8>
 8007e10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e12:	4987      	ldr	r1, [pc, #540]	; (8008030 <_strtod_l+0x578>)
 8007e14:	3b01      	subs	r3, #1
 8007e16:	a819      	add	r0, sp, #100	; 0x64
 8007e18:	9319      	str	r3, [sp, #100]	; 0x64
 8007e1a:	f002 fd3b 	bl	800a894 <__match>
 8007e1e:	b910      	cbnz	r0, 8007e26 <_strtod_l+0x36e>
 8007e20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e22:	3301      	adds	r3, #1
 8007e24:	9319      	str	r3, [sp, #100]	; 0x64
 8007e26:	f04f 0800 	mov.w	r8, #0
 8007e2a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008034 <_strtod_l+0x57c>
 8007e2e:	e67c      	b.n	8007b2a <_strtod_l+0x72>
 8007e30:	4881      	ldr	r0, [pc, #516]	; (8008038 <_strtod_l+0x580>)
 8007e32:	f001 fbc9 	bl	80095c8 <nan>
 8007e36:	4680      	mov	r8, r0
 8007e38:	4689      	mov	r9, r1
 8007e3a:	e676      	b.n	8007b2a <_strtod_l+0x72>
 8007e3c:	9b08      	ldr	r3, [sp, #32]
 8007e3e:	f1bb 0f00 	cmp.w	fp, #0
 8007e42:	bf08      	it	eq
 8007e44:	46b3      	moveq	fp, r6
 8007e46:	1afb      	subs	r3, r7, r3
 8007e48:	2e10      	cmp	r6, #16
 8007e4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e4c:	4635      	mov	r5, r6
 8007e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e50:	bfa8      	it	ge
 8007e52:	2510      	movge	r5, #16
 8007e54:	f7f8 fad0 	bl	80003f8 <__aeabi_ui2d>
 8007e58:	2e09      	cmp	r6, #9
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	4689      	mov	r9, r1
 8007e5e:	dd13      	ble.n	8007e88 <_strtod_l+0x3d0>
 8007e60:	4b76      	ldr	r3, [pc, #472]	; (800803c <_strtod_l+0x584>)
 8007e62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e6a:	f7f8 fb3f 	bl	80004ec <__aeabi_dmul>
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4650      	mov	r0, sl
 8007e72:	4689      	mov	r9, r1
 8007e74:	f7f8 fac0 	bl	80003f8 <__aeabi_ui2d>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	460b      	mov	r3, r1
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4649      	mov	r1, r9
 8007e80:	f7f8 f97e 	bl	8000180 <__adddf3>
 8007e84:	4680      	mov	r8, r0
 8007e86:	4689      	mov	r9, r1
 8007e88:	2e0f      	cmp	r6, #15
 8007e8a:	dc36      	bgt.n	8007efa <_strtod_l+0x442>
 8007e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f43f ae4b 	beq.w	8007b2a <_strtod_l+0x72>
 8007e94:	dd22      	ble.n	8007edc <_strtod_l+0x424>
 8007e96:	2b16      	cmp	r3, #22
 8007e98:	dc09      	bgt.n	8007eae <_strtod_l+0x3f6>
 8007e9a:	4968      	ldr	r1, [pc, #416]	; (800803c <_strtod_l+0x584>)
 8007e9c:	4642      	mov	r2, r8
 8007e9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea8:	f7f8 fb20 	bl	80004ec <__aeabi_dmul>
 8007eac:	e7c3      	b.n	8007e36 <_strtod_l+0x37e>
 8007eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	db20      	blt.n	8007efa <_strtod_l+0x442>
 8007eb8:	4c60      	ldr	r4, [pc, #384]	; (800803c <_strtod_l+0x584>)
 8007eba:	f1c6 060f 	rsb	r6, r6, #15
 8007ebe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007ec2:	4642      	mov	r2, r8
 8007ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec8:	464b      	mov	r3, r9
 8007eca:	f7f8 fb0f 	bl	80004ec <__aeabi_dmul>
 8007ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed0:	1b9e      	subs	r6, r3, r6
 8007ed2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007ed6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007eda:	e7e5      	b.n	8007ea8 <_strtod_l+0x3f0>
 8007edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ede:	3316      	adds	r3, #22
 8007ee0:	db0b      	blt.n	8007efa <_strtod_l+0x442>
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	1bdf      	subs	r7, r3, r7
 8007ee8:	4b54      	ldr	r3, [pc, #336]	; (800803c <_strtod_l+0x584>)
 8007eea:	4649      	mov	r1, r9
 8007eec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ef4:	f7f8 fc24 	bl	8000740 <__aeabi_ddiv>
 8007ef8:	e79d      	b.n	8007e36 <_strtod_l+0x37e>
 8007efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007efc:	1b75      	subs	r5, r6, r5
 8007efe:	441d      	add	r5, r3
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	dd70      	ble.n	8007fe6 <_strtod_l+0x52e>
 8007f04:	f015 030f 	ands.w	r3, r5, #15
 8007f08:	d00a      	beq.n	8007f20 <_strtod_l+0x468>
 8007f0a:	494c      	ldr	r1, [pc, #304]	; (800803c <_strtod_l+0x584>)
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f16:	464b      	mov	r3, r9
 8007f18:	f7f8 fae8 	bl	80004ec <__aeabi_dmul>
 8007f1c:	4680      	mov	r8, r0
 8007f1e:	4689      	mov	r9, r1
 8007f20:	f035 050f 	bics.w	r5, r5, #15
 8007f24:	d04d      	beq.n	8007fc2 <_strtod_l+0x50a>
 8007f26:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007f2a:	dd22      	ble.n	8007f72 <_strtod_l+0x4ba>
 8007f2c:	2600      	movs	r6, #0
 8007f2e:	46b3      	mov	fp, r6
 8007f30:	960b      	str	r6, [sp, #44]	; 0x2c
 8007f32:	9608      	str	r6, [sp, #32]
 8007f34:	2322      	movs	r3, #34	; 0x22
 8007f36:	f04f 0800 	mov.w	r8, #0
 8007f3a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008034 <_strtod_l+0x57c>
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f43f adf1 	beq.w	8007b2a <_strtod_l+0x72>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f4c:	f002 fe58 	bl	800ac00 <_Bfree>
 8007f50:	4620      	mov	r0, r4
 8007f52:	9908      	ldr	r1, [sp, #32]
 8007f54:	f002 fe54 	bl	800ac00 <_Bfree>
 8007f58:	4659      	mov	r1, fp
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f002 fe50 	bl	800ac00 <_Bfree>
 8007f60:	4620      	mov	r0, r4
 8007f62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f64:	f002 fe4c 	bl	800ac00 <_Bfree>
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f002 fe48 	bl	800ac00 <_Bfree>
 8007f70:	e5db      	b.n	8007b2a <_strtod_l+0x72>
 8007f72:	4b33      	ldr	r3, [pc, #204]	; (8008040 <_strtod_l+0x588>)
 8007f74:	4640      	mov	r0, r8
 8007f76:	9305      	str	r3, [sp, #20]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	112d      	asrs	r5, r5, #4
 8007f80:	2d01      	cmp	r5, #1
 8007f82:	dc21      	bgt.n	8007fc8 <_strtod_l+0x510>
 8007f84:	b10b      	cbz	r3, 8007f8a <_strtod_l+0x4d2>
 8007f86:	4680      	mov	r8, r0
 8007f88:	4689      	mov	r9, r1
 8007f8a:	492d      	ldr	r1, [pc, #180]	; (8008040 <_strtod_l+0x588>)
 8007f8c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f94:	4642      	mov	r2, r8
 8007f96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	f7f8 faa6 	bl	80004ec <__aeabi_dmul>
 8007fa0:	4b24      	ldr	r3, [pc, #144]	; (8008034 <_strtod_l+0x57c>)
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	400b      	ands	r3, r1
 8007fa6:	4927      	ldr	r1, [pc, #156]	; (8008044 <_strtod_l+0x58c>)
 8007fa8:	4680      	mov	r8, r0
 8007faa:	428b      	cmp	r3, r1
 8007fac:	d8be      	bhi.n	8007f2c <_strtod_l+0x474>
 8007fae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007fb2:	428b      	cmp	r3, r1
 8007fb4:	bf86      	itte	hi
 8007fb6:	f04f 38ff 	movhi.w	r8, #4294967295
 8007fba:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008048 <_strtod_l+0x590>
 8007fbe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	9305      	str	r3, [sp, #20]
 8007fc6:	e07b      	b.n	80080c0 <_strtod_l+0x608>
 8007fc8:	07ea      	lsls	r2, r5, #31
 8007fca:	d505      	bpl.n	8007fd8 <_strtod_l+0x520>
 8007fcc:	9b05      	ldr	r3, [sp, #20]
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f7f8 fa8b 	bl	80004ec <__aeabi_dmul>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	9a05      	ldr	r2, [sp, #20]
 8007fda:	f10a 0a01 	add.w	sl, sl, #1
 8007fde:	3208      	adds	r2, #8
 8007fe0:	106d      	asrs	r5, r5, #1
 8007fe2:	9205      	str	r2, [sp, #20]
 8007fe4:	e7cc      	b.n	8007f80 <_strtod_l+0x4c8>
 8007fe6:	d0ec      	beq.n	8007fc2 <_strtod_l+0x50a>
 8007fe8:	426d      	negs	r5, r5
 8007fea:	f015 020f 	ands.w	r2, r5, #15
 8007fee:	d00a      	beq.n	8008006 <_strtod_l+0x54e>
 8007ff0:	4b12      	ldr	r3, [pc, #72]	; (800803c <_strtod_l+0x584>)
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 fb9f 	bl	8000740 <__aeabi_ddiv>
 8008002:	4680      	mov	r8, r0
 8008004:	4689      	mov	r9, r1
 8008006:	112d      	asrs	r5, r5, #4
 8008008:	d0db      	beq.n	8007fc2 <_strtod_l+0x50a>
 800800a:	2d1f      	cmp	r5, #31
 800800c:	dd1e      	ble.n	800804c <_strtod_l+0x594>
 800800e:	2600      	movs	r6, #0
 8008010:	46b3      	mov	fp, r6
 8008012:	960b      	str	r6, [sp, #44]	; 0x2c
 8008014:	9608      	str	r6, [sp, #32]
 8008016:	2322      	movs	r3, #34	; 0x22
 8008018:	f04f 0800 	mov.w	r8, #0
 800801c:	f04f 0900 	mov.w	r9, #0
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	e78d      	b.n	8007f40 <_strtod_l+0x488>
 8008024:	0800c226 	.word	0x0800c226
 8008028:	0800c0d8 	.word	0x0800c0d8
 800802c:	0800c21e 	.word	0x0800c21e
 8008030:	0800c258 	.word	0x0800c258
 8008034:	7ff00000 	.word	0x7ff00000
 8008038:	0800c4e8 	.word	0x0800c4e8
 800803c:	0800c3c8 	.word	0x0800c3c8
 8008040:	0800c3a0 	.word	0x0800c3a0
 8008044:	7ca00000 	.word	0x7ca00000
 8008048:	7fefffff 	.word	0x7fefffff
 800804c:	f015 0310 	ands.w	r3, r5, #16
 8008050:	bf18      	it	ne
 8008052:	236a      	movne	r3, #106	; 0x6a
 8008054:	4640      	mov	r0, r8
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	4649      	mov	r1, r9
 800805a:	2300      	movs	r3, #0
 800805c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008328 <_strtod_l+0x870>
 8008060:	07ea      	lsls	r2, r5, #31
 8008062:	d504      	bpl.n	800806e <_strtod_l+0x5b6>
 8008064:	e9da 2300 	ldrd	r2, r3, [sl]
 8008068:	f7f8 fa40 	bl	80004ec <__aeabi_dmul>
 800806c:	2301      	movs	r3, #1
 800806e:	106d      	asrs	r5, r5, #1
 8008070:	f10a 0a08 	add.w	sl, sl, #8
 8008074:	d1f4      	bne.n	8008060 <_strtod_l+0x5a8>
 8008076:	b10b      	cbz	r3, 800807c <_strtod_l+0x5c4>
 8008078:	4680      	mov	r8, r0
 800807a:	4689      	mov	r9, r1
 800807c:	9b05      	ldr	r3, [sp, #20]
 800807e:	b1bb      	cbz	r3, 80080b0 <_strtod_l+0x5f8>
 8008080:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008084:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008088:	2b00      	cmp	r3, #0
 800808a:	4649      	mov	r1, r9
 800808c:	dd10      	ble.n	80080b0 <_strtod_l+0x5f8>
 800808e:	2b1f      	cmp	r3, #31
 8008090:	f340 8128 	ble.w	80082e4 <_strtod_l+0x82c>
 8008094:	2b34      	cmp	r3, #52	; 0x34
 8008096:	bfd8      	it	le
 8008098:	f04f 33ff 	movle.w	r3, #4294967295
 800809c:	f04f 0800 	mov.w	r8, #0
 80080a0:	bfcf      	iteee	gt
 80080a2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80080a6:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80080aa:	4093      	lslle	r3, r2
 80080ac:	ea03 0901 	andle.w	r9, r3, r1
 80080b0:	2200      	movs	r2, #0
 80080b2:	2300      	movs	r3, #0
 80080b4:	4640      	mov	r0, r8
 80080b6:	4649      	mov	r1, r9
 80080b8:	f7f8 fc80 	bl	80009bc <__aeabi_dcmpeq>
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1a6      	bne.n	800800e <_strtod_l+0x556>
 80080c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080c2:	465a      	mov	r2, fp
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4620      	mov	r0, r4
 80080c8:	4633      	mov	r3, r6
 80080ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080cc:	f002 fe00 	bl	800acd0 <__s2b>
 80080d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f43f af2a 	beq.w	8007f2c <_strtod_l+0x474>
 80080d8:	2600      	movs	r6, #0
 80080da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080dc:	9b08      	ldr	r3, [sp, #32]
 80080de:	2a00      	cmp	r2, #0
 80080e0:	eba3 0307 	sub.w	r3, r3, r7
 80080e4:	bfa8      	it	ge
 80080e6:	2300      	movge	r3, #0
 80080e8:	46b3      	mov	fp, r6
 80080ea:	9312      	str	r3, [sp, #72]	; 0x48
 80080ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080f0:	9316      	str	r3, [sp, #88]	; 0x58
 80080f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f4:	4620      	mov	r0, r4
 80080f6:	6859      	ldr	r1, [r3, #4]
 80080f8:	f002 fd42 	bl	800ab80 <_Balloc>
 80080fc:	9008      	str	r0, [sp, #32]
 80080fe:	2800      	cmp	r0, #0
 8008100:	f43f af18 	beq.w	8007f34 <_strtod_l+0x47c>
 8008104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008106:	300c      	adds	r0, #12
 8008108:	691a      	ldr	r2, [r3, #16]
 800810a:	f103 010c 	add.w	r1, r3, #12
 800810e:	3202      	adds	r2, #2
 8008110:	0092      	lsls	r2, r2, #2
 8008112:	f001 fa4b 	bl	80095ac <memcpy>
 8008116:	ab1c      	add	r3, sp, #112	; 0x70
 8008118:	9301      	str	r3, [sp, #4]
 800811a:	ab1b      	add	r3, sp, #108	; 0x6c
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	4642      	mov	r2, r8
 8008120:	464b      	mov	r3, r9
 8008122:	4620      	mov	r0, r4
 8008124:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008128:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800812c:	f003 f8fc 	bl	800b328 <__d2b>
 8008130:	901a      	str	r0, [sp, #104]	; 0x68
 8008132:	2800      	cmp	r0, #0
 8008134:	f43f aefe 	beq.w	8007f34 <_strtod_l+0x47c>
 8008138:	2101      	movs	r1, #1
 800813a:	4620      	mov	r0, r4
 800813c:	f002 fe60 	bl	800ae00 <__i2b>
 8008140:	4683      	mov	fp, r0
 8008142:	2800      	cmp	r0, #0
 8008144:	f43f aef6 	beq.w	8007f34 <_strtod_l+0x47c>
 8008148:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800814a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800814c:	2f00      	cmp	r7, #0
 800814e:	bfab      	itete	ge
 8008150:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008152:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008154:	eb07 0a03 	addge.w	sl, r7, r3
 8008158:	1bdd      	sublt	r5, r3, r7
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	bfa8      	it	ge
 800815e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008160:	eba7 0703 	sub.w	r7, r7, r3
 8008164:	4417      	add	r7, r2
 8008166:	4b71      	ldr	r3, [pc, #452]	; (800832c <_strtod_l+0x874>)
 8008168:	f107 37ff 	add.w	r7, r7, #4294967295
 800816c:	bfb8      	it	lt
 800816e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008172:	429f      	cmp	r7, r3
 8008174:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008178:	f280 80c7 	bge.w	800830a <_strtod_l+0x852>
 800817c:	1bdb      	subs	r3, r3, r7
 800817e:	2b1f      	cmp	r3, #31
 8008180:	f04f 0101 	mov.w	r1, #1
 8008184:	eba2 0203 	sub.w	r2, r2, r3
 8008188:	f300 80b3 	bgt.w	80082f2 <_strtod_l+0x83a>
 800818c:	fa01 f303 	lsl.w	r3, r1, r3
 8008190:	9313      	str	r3, [sp, #76]	; 0x4c
 8008192:	2300      	movs	r3, #0
 8008194:	9310      	str	r3, [sp, #64]	; 0x40
 8008196:	eb0a 0702 	add.w	r7, sl, r2
 800819a:	9b05      	ldr	r3, [sp, #20]
 800819c:	45ba      	cmp	sl, r7
 800819e:	4415      	add	r5, r2
 80081a0:	441d      	add	r5, r3
 80081a2:	4653      	mov	r3, sl
 80081a4:	bfa8      	it	ge
 80081a6:	463b      	movge	r3, r7
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	bfa8      	it	ge
 80081ac:	462b      	movge	r3, r5
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfc2      	ittt	gt
 80081b2:	1aff      	subgt	r7, r7, r3
 80081b4:	1aed      	subgt	r5, r5, r3
 80081b6:	ebaa 0a03 	subgt.w	sl, sl, r3
 80081ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dd17      	ble.n	80081f0 <_strtod_l+0x738>
 80081c0:	4659      	mov	r1, fp
 80081c2:	461a      	mov	r2, r3
 80081c4:	4620      	mov	r0, r4
 80081c6:	f002 fed9 	bl	800af7c <__pow5mult>
 80081ca:	4683      	mov	fp, r0
 80081cc:	2800      	cmp	r0, #0
 80081ce:	f43f aeb1 	beq.w	8007f34 <_strtod_l+0x47c>
 80081d2:	4601      	mov	r1, r0
 80081d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80081d6:	4620      	mov	r0, r4
 80081d8:	f002 fe28 	bl	800ae2c <__multiply>
 80081dc:	900a      	str	r0, [sp, #40]	; 0x28
 80081de:	2800      	cmp	r0, #0
 80081e0:	f43f aea8 	beq.w	8007f34 <_strtod_l+0x47c>
 80081e4:	4620      	mov	r0, r4
 80081e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081e8:	f002 fd0a 	bl	800ac00 <_Bfree>
 80081ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ee:	931a      	str	r3, [sp, #104]	; 0x68
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	f300 808f 	bgt.w	8008314 <_strtod_l+0x85c>
 80081f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	dd08      	ble.n	800820e <_strtod_l+0x756>
 80081fc:	4620      	mov	r0, r4
 80081fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008200:	9908      	ldr	r1, [sp, #32]
 8008202:	f002 febb 	bl	800af7c <__pow5mult>
 8008206:	9008      	str	r0, [sp, #32]
 8008208:	2800      	cmp	r0, #0
 800820a:	f43f ae93 	beq.w	8007f34 <_strtod_l+0x47c>
 800820e:	2d00      	cmp	r5, #0
 8008210:	dd08      	ble.n	8008224 <_strtod_l+0x76c>
 8008212:	462a      	mov	r2, r5
 8008214:	4620      	mov	r0, r4
 8008216:	9908      	ldr	r1, [sp, #32]
 8008218:	f002 ff0a 	bl	800b030 <__lshift>
 800821c:	9008      	str	r0, [sp, #32]
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae88 	beq.w	8007f34 <_strtod_l+0x47c>
 8008224:	f1ba 0f00 	cmp.w	sl, #0
 8008228:	dd08      	ble.n	800823c <_strtod_l+0x784>
 800822a:	4659      	mov	r1, fp
 800822c:	4652      	mov	r2, sl
 800822e:	4620      	mov	r0, r4
 8008230:	f002 fefe 	bl	800b030 <__lshift>
 8008234:	4683      	mov	fp, r0
 8008236:	2800      	cmp	r0, #0
 8008238:	f43f ae7c 	beq.w	8007f34 <_strtod_l+0x47c>
 800823c:	4620      	mov	r0, r4
 800823e:	9a08      	ldr	r2, [sp, #32]
 8008240:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008242:	f002 ff7d 	bl	800b140 <__mdiff>
 8008246:	4606      	mov	r6, r0
 8008248:	2800      	cmp	r0, #0
 800824a:	f43f ae73 	beq.w	8007f34 <_strtod_l+0x47c>
 800824e:	2500      	movs	r5, #0
 8008250:	68c3      	ldr	r3, [r0, #12]
 8008252:	4659      	mov	r1, fp
 8008254:	60c5      	str	r5, [r0, #12]
 8008256:	930a      	str	r3, [sp, #40]	; 0x28
 8008258:	f002 ff56 	bl	800b108 <__mcmp>
 800825c:	42a8      	cmp	r0, r5
 800825e:	da6b      	bge.n	8008338 <_strtod_l+0x880>
 8008260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008262:	ea53 0308 	orrs.w	r3, r3, r8
 8008266:	f040 808f 	bne.w	8008388 <_strtod_l+0x8d0>
 800826a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 808a 	bne.w	8008388 <_strtod_l+0x8d0>
 8008274:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008278:	0d1b      	lsrs	r3, r3, #20
 800827a:	051b      	lsls	r3, r3, #20
 800827c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008280:	f240 8082 	bls.w	8008388 <_strtod_l+0x8d0>
 8008284:	6973      	ldr	r3, [r6, #20]
 8008286:	b913      	cbnz	r3, 800828e <_strtod_l+0x7d6>
 8008288:	6933      	ldr	r3, [r6, #16]
 800828a:	2b01      	cmp	r3, #1
 800828c:	dd7c      	ble.n	8008388 <_strtod_l+0x8d0>
 800828e:	4631      	mov	r1, r6
 8008290:	2201      	movs	r2, #1
 8008292:	4620      	mov	r0, r4
 8008294:	f002 fecc 	bl	800b030 <__lshift>
 8008298:	4659      	mov	r1, fp
 800829a:	4606      	mov	r6, r0
 800829c:	f002 ff34 	bl	800b108 <__mcmp>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	dd71      	ble.n	8008388 <_strtod_l+0x8d0>
 80082a4:	9905      	ldr	r1, [sp, #20]
 80082a6:	464b      	mov	r3, r9
 80082a8:	4a21      	ldr	r2, [pc, #132]	; (8008330 <_strtod_l+0x878>)
 80082aa:	2900      	cmp	r1, #0
 80082ac:	f000 808d 	beq.w	80083ca <_strtod_l+0x912>
 80082b0:	ea02 0109 	and.w	r1, r2, r9
 80082b4:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082b8:	f300 8087 	bgt.w	80083ca <_strtod_l+0x912>
 80082bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082c0:	f77f aea9 	ble.w	8008016 <_strtod_l+0x55e>
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <_strtod_l+0x87c>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	f7f8 f90e 	bl	80004ec <__aeabi_dmul>
 80082d0:	4b17      	ldr	r3, [pc, #92]	; (8008330 <_strtod_l+0x878>)
 80082d2:	4680      	mov	r8, r0
 80082d4:	400b      	ands	r3, r1
 80082d6:	4689      	mov	r9, r1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f47f ae35 	bne.w	8007f48 <_strtod_l+0x490>
 80082de:	2322      	movs	r3, #34	; 0x22
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	e631      	b.n	8007f48 <_strtod_l+0x490>
 80082e4:	f04f 32ff 	mov.w	r2, #4294967295
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	ea03 0808 	and.w	r8, r3, r8
 80082f0:	e6de      	b.n	80080b0 <_strtod_l+0x5f8>
 80082f2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80082f6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80082fa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80082fe:	37e2      	adds	r7, #226	; 0xe2
 8008300:	fa01 f307 	lsl.w	r3, r1, r7
 8008304:	9310      	str	r3, [sp, #64]	; 0x40
 8008306:	9113      	str	r1, [sp, #76]	; 0x4c
 8008308:	e745      	b.n	8008196 <_strtod_l+0x6de>
 800830a:	2300      	movs	r3, #0
 800830c:	9310      	str	r3, [sp, #64]	; 0x40
 800830e:	2301      	movs	r3, #1
 8008310:	9313      	str	r3, [sp, #76]	; 0x4c
 8008312:	e740      	b.n	8008196 <_strtod_l+0x6de>
 8008314:	463a      	mov	r2, r7
 8008316:	4620      	mov	r0, r4
 8008318:	991a      	ldr	r1, [sp, #104]	; 0x68
 800831a:	f002 fe89 	bl	800b030 <__lshift>
 800831e:	901a      	str	r0, [sp, #104]	; 0x68
 8008320:	2800      	cmp	r0, #0
 8008322:	f47f af68 	bne.w	80081f6 <_strtod_l+0x73e>
 8008326:	e605      	b.n	8007f34 <_strtod_l+0x47c>
 8008328:	0800c0f0 	.word	0x0800c0f0
 800832c:	fffffc02 	.word	0xfffffc02
 8008330:	7ff00000 	.word	0x7ff00000
 8008334:	39500000 	.word	0x39500000
 8008338:	46ca      	mov	sl, r9
 800833a:	d165      	bne.n	8008408 <_strtod_l+0x950>
 800833c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800833e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008342:	b352      	cbz	r2, 800839a <_strtod_l+0x8e2>
 8008344:	4a9e      	ldr	r2, [pc, #632]	; (80085c0 <_strtod_l+0xb08>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d12a      	bne.n	80083a0 <_strtod_l+0x8e8>
 800834a:	9b05      	ldr	r3, [sp, #20]
 800834c:	4641      	mov	r1, r8
 800834e:	b1fb      	cbz	r3, 8008390 <_strtod_l+0x8d8>
 8008350:	4b9c      	ldr	r3, [pc, #624]	; (80085c4 <_strtod_l+0xb0c>)
 8008352:	f04f 32ff 	mov.w	r2, #4294967295
 8008356:	ea09 0303 	and.w	r3, r9, r3
 800835a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800835e:	d81a      	bhi.n	8008396 <_strtod_l+0x8de>
 8008360:	0d1b      	lsrs	r3, r3, #20
 8008362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008366:	fa02 f303 	lsl.w	r3, r2, r3
 800836a:	4299      	cmp	r1, r3
 800836c:	d118      	bne.n	80083a0 <_strtod_l+0x8e8>
 800836e:	4b96      	ldr	r3, [pc, #600]	; (80085c8 <_strtod_l+0xb10>)
 8008370:	459a      	cmp	sl, r3
 8008372:	d102      	bne.n	800837a <_strtod_l+0x8c2>
 8008374:	3101      	adds	r1, #1
 8008376:	f43f addd 	beq.w	8007f34 <_strtod_l+0x47c>
 800837a:	f04f 0800 	mov.w	r8, #0
 800837e:	4b91      	ldr	r3, [pc, #580]	; (80085c4 <_strtod_l+0xb0c>)
 8008380:	ea0a 0303 	and.w	r3, sl, r3
 8008384:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008388:	9b05      	ldr	r3, [sp, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d19a      	bne.n	80082c4 <_strtod_l+0x80c>
 800838e:	e5db      	b.n	8007f48 <_strtod_l+0x490>
 8008390:	f04f 33ff 	mov.w	r3, #4294967295
 8008394:	e7e9      	b.n	800836a <_strtod_l+0x8b2>
 8008396:	4613      	mov	r3, r2
 8008398:	e7e7      	b.n	800836a <_strtod_l+0x8b2>
 800839a:	ea53 0308 	orrs.w	r3, r3, r8
 800839e:	d081      	beq.n	80082a4 <_strtod_l+0x7ec>
 80083a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083a2:	b1e3      	cbz	r3, 80083de <_strtod_l+0x926>
 80083a4:	ea13 0f0a 	tst.w	r3, sl
 80083a8:	d0ee      	beq.n	8008388 <_strtod_l+0x8d0>
 80083aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ac:	4640      	mov	r0, r8
 80083ae:	4649      	mov	r1, r9
 80083b0:	9a05      	ldr	r2, [sp, #20]
 80083b2:	b1c3      	cbz	r3, 80083e6 <_strtod_l+0x92e>
 80083b4:	f7ff fb5f 	bl	8007a76 <sulp>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083be:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083c0:	f7f7 fede 	bl	8000180 <__adddf3>
 80083c4:	4680      	mov	r8, r0
 80083c6:	4689      	mov	r9, r1
 80083c8:	e7de      	b.n	8008388 <_strtod_l+0x8d0>
 80083ca:	4013      	ands	r3, r2
 80083cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80083d4:	f04f 38ff 	mov.w	r8, #4294967295
 80083d8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80083dc:	e7d4      	b.n	8008388 <_strtod_l+0x8d0>
 80083de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083e0:	ea13 0f08 	tst.w	r3, r8
 80083e4:	e7e0      	b.n	80083a8 <_strtod_l+0x8f0>
 80083e6:	f7ff fb46 	bl	8007a76 <sulp>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083f2:	f7f7 fec3 	bl	800017c <__aeabi_dsub>
 80083f6:	2200      	movs	r2, #0
 80083f8:	2300      	movs	r3, #0
 80083fa:	4680      	mov	r8, r0
 80083fc:	4689      	mov	r9, r1
 80083fe:	f7f8 fadd 	bl	80009bc <__aeabi_dcmpeq>
 8008402:	2800      	cmp	r0, #0
 8008404:	d0c0      	beq.n	8008388 <_strtod_l+0x8d0>
 8008406:	e606      	b.n	8008016 <_strtod_l+0x55e>
 8008408:	4659      	mov	r1, fp
 800840a:	4630      	mov	r0, r6
 800840c:	f002 ffe2 	bl	800b3d4 <__ratio>
 8008410:	4602      	mov	r2, r0
 8008412:	460b      	mov	r3, r1
 8008414:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008418:	2200      	movs	r2, #0
 800841a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800841e:	f7f8 fae1 	bl	80009e4 <__aeabi_dcmple>
 8008422:	2800      	cmp	r0, #0
 8008424:	d06f      	beq.n	8008506 <_strtod_l+0xa4e>
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	d17c      	bne.n	8008526 <_strtod_l+0xa6e>
 800842c:	f1b8 0f00 	cmp.w	r8, #0
 8008430:	d159      	bne.n	80084e6 <_strtod_l+0xa2e>
 8008432:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008436:	2b00      	cmp	r3, #0
 8008438:	d17b      	bne.n	8008532 <_strtod_l+0xa7a>
 800843a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800843e:	2200      	movs	r2, #0
 8008440:	4b62      	ldr	r3, [pc, #392]	; (80085cc <_strtod_l+0xb14>)
 8008442:	f7f8 fac5 	bl	80009d0 <__aeabi_dcmplt>
 8008446:	2800      	cmp	r0, #0
 8008448:	d15a      	bne.n	8008500 <_strtod_l+0xa48>
 800844a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800844e:	2200      	movs	r2, #0
 8008450:	4b5f      	ldr	r3, [pc, #380]	; (80085d0 <_strtod_l+0xb18>)
 8008452:	f7f8 f84b 	bl	80004ec <__aeabi_dmul>
 8008456:	4605      	mov	r5, r0
 8008458:	460f      	mov	r7, r1
 800845a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800845e:	9506      	str	r5, [sp, #24]
 8008460:	9307      	str	r3, [sp, #28]
 8008462:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008466:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800846a:	4b56      	ldr	r3, [pc, #344]	; (80085c4 <_strtod_l+0xb0c>)
 800846c:	4a55      	ldr	r2, [pc, #340]	; (80085c4 <_strtod_l+0xb0c>)
 800846e:	ea0a 0303 	and.w	r3, sl, r3
 8008472:	9313      	str	r3, [sp, #76]	; 0x4c
 8008474:	4b57      	ldr	r3, [pc, #348]	; (80085d4 <_strtod_l+0xb1c>)
 8008476:	ea0a 0202 	and.w	r2, sl, r2
 800847a:	429a      	cmp	r2, r3
 800847c:	f040 80b0 	bne.w	80085e0 <_strtod_l+0xb28>
 8008480:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008484:	4640      	mov	r0, r8
 8008486:	4649      	mov	r1, r9
 8008488:	f002 fee6 	bl	800b258 <__ulp>
 800848c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008490:	f7f8 f82c 	bl	80004ec <__aeabi_dmul>
 8008494:	4642      	mov	r2, r8
 8008496:	464b      	mov	r3, r9
 8008498:	f7f7 fe72 	bl	8000180 <__adddf3>
 800849c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80085c4 <_strtod_l+0xb0c>
 80084a0:	4a4d      	ldr	r2, [pc, #308]	; (80085d8 <_strtod_l+0xb20>)
 80084a2:	ea01 0a0a 	and.w	sl, r1, sl
 80084a6:	4592      	cmp	sl, r2
 80084a8:	4680      	mov	r8, r0
 80084aa:	d948      	bls.n	800853e <_strtod_l+0xa86>
 80084ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084ae:	4b46      	ldr	r3, [pc, #280]	; (80085c8 <_strtod_l+0xb10>)
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d103      	bne.n	80084bc <_strtod_l+0xa04>
 80084b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084b6:	3301      	adds	r3, #1
 80084b8:	f43f ad3c 	beq.w	8007f34 <_strtod_l+0x47c>
 80084bc:	f04f 38ff 	mov.w	r8, #4294967295
 80084c0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80085c8 <_strtod_l+0xb10>
 80084c4:	4620      	mov	r0, r4
 80084c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80084c8:	f002 fb9a 	bl	800ac00 <_Bfree>
 80084cc:	4620      	mov	r0, r4
 80084ce:	9908      	ldr	r1, [sp, #32]
 80084d0:	f002 fb96 	bl	800ac00 <_Bfree>
 80084d4:	4659      	mov	r1, fp
 80084d6:	4620      	mov	r0, r4
 80084d8:	f002 fb92 	bl	800ac00 <_Bfree>
 80084dc:	4631      	mov	r1, r6
 80084de:	4620      	mov	r0, r4
 80084e0:	f002 fb8e 	bl	800ac00 <_Bfree>
 80084e4:	e605      	b.n	80080f2 <_strtod_l+0x63a>
 80084e6:	f1b8 0f01 	cmp.w	r8, #1
 80084ea:	d103      	bne.n	80084f4 <_strtod_l+0xa3c>
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	f43f ad91 	beq.w	8008016 <_strtod_l+0x55e>
 80084f4:	2200      	movs	r2, #0
 80084f6:	4b39      	ldr	r3, [pc, #228]	; (80085dc <_strtod_l+0xb24>)
 80084f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084fe:	e016      	b.n	800852e <_strtod_l+0xa76>
 8008500:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008502:	4f33      	ldr	r7, [pc, #204]	; (80085d0 <_strtod_l+0xb18>)
 8008504:	e7a9      	b.n	800845a <_strtod_l+0x9a2>
 8008506:	4b32      	ldr	r3, [pc, #200]	; (80085d0 <_strtod_l+0xb18>)
 8008508:	2200      	movs	r2, #0
 800850a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800850e:	f7f7 ffed 	bl	80004ec <__aeabi_dmul>
 8008512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008514:	4605      	mov	r5, r0
 8008516:	460f      	mov	r7, r1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d09e      	beq.n	800845a <_strtod_l+0x9a2>
 800851c:	4602      	mov	r2, r0
 800851e:	460b      	mov	r3, r1
 8008520:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008524:	e79d      	b.n	8008462 <_strtod_l+0x9aa>
 8008526:	2200      	movs	r2, #0
 8008528:	4b28      	ldr	r3, [pc, #160]	; (80085cc <_strtod_l+0xb14>)
 800852a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800852e:	4f27      	ldr	r7, [pc, #156]	; (80085cc <_strtod_l+0xb14>)
 8008530:	e797      	b.n	8008462 <_strtod_l+0x9aa>
 8008532:	2200      	movs	r2, #0
 8008534:	4b29      	ldr	r3, [pc, #164]	; (80085dc <_strtod_l+0xb24>)
 8008536:	4645      	mov	r5, r8
 8008538:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800853c:	e7f7      	b.n	800852e <_strtod_l+0xa76>
 800853e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008542:	9b05      	ldr	r3, [sp, #20]
 8008544:	46ca      	mov	sl, r9
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1bc      	bne.n	80084c4 <_strtod_l+0xa0c>
 800854a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800854e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008550:	0d1b      	lsrs	r3, r3, #20
 8008552:	051b      	lsls	r3, r3, #20
 8008554:	429a      	cmp	r2, r3
 8008556:	d1b5      	bne.n	80084c4 <_strtod_l+0xa0c>
 8008558:	4628      	mov	r0, r5
 800855a:	4639      	mov	r1, r7
 800855c:	f7f8 fe08 	bl	8001170 <__aeabi_d2lz>
 8008560:	f7f7 ff96 	bl	8000490 <__aeabi_l2d>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	4628      	mov	r0, r5
 800856a:	4639      	mov	r1, r7
 800856c:	f7f7 fe06 	bl	800017c <__aeabi_dsub>
 8008570:	460b      	mov	r3, r1
 8008572:	4602      	mov	r2, r0
 8008574:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008578:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800857c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008582:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008586:	d06c      	beq.n	8008662 <_strtod_l+0xbaa>
 8008588:	a309      	add	r3, pc, #36	; (adr r3, 80085b0 <_strtod_l+0xaf8>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f8 fa1f 	bl	80009d0 <__aeabi_dcmplt>
 8008592:	2800      	cmp	r0, #0
 8008594:	f47f acd8 	bne.w	8007f48 <_strtod_l+0x490>
 8008598:	a307      	add	r3, pc, #28	; (adr r3, 80085b8 <_strtod_l+0xb00>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085a2:	f7f8 fa33 	bl	8000a0c <__aeabi_dcmpgt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d08c      	beq.n	80084c4 <_strtod_l+0xa0c>
 80085aa:	e4cd      	b.n	8007f48 <_strtod_l+0x490>
 80085ac:	f3af 8000 	nop.w
 80085b0:	94a03595 	.word	0x94a03595
 80085b4:	3fdfffff 	.word	0x3fdfffff
 80085b8:	35afe535 	.word	0x35afe535
 80085bc:	3fe00000 	.word	0x3fe00000
 80085c0:	000fffff 	.word	0x000fffff
 80085c4:	7ff00000 	.word	0x7ff00000
 80085c8:	7fefffff 	.word	0x7fefffff
 80085cc:	3ff00000 	.word	0x3ff00000
 80085d0:	3fe00000 	.word	0x3fe00000
 80085d4:	7fe00000 	.word	0x7fe00000
 80085d8:	7c9fffff 	.word	0x7c9fffff
 80085dc:	bff00000 	.word	0xbff00000
 80085e0:	9b05      	ldr	r3, [sp, #20]
 80085e2:	b333      	cbz	r3, 8008632 <_strtod_l+0xb7a>
 80085e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085ea:	d822      	bhi.n	8008632 <_strtod_l+0xb7a>
 80085ec:	a328      	add	r3, pc, #160	; (adr r3, 8008690 <_strtod_l+0xbd8>)
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	4628      	mov	r0, r5
 80085f4:	4639      	mov	r1, r7
 80085f6:	f7f8 f9f5 	bl	80009e4 <__aeabi_dcmple>
 80085fa:	b1a0      	cbz	r0, 8008626 <_strtod_l+0xb6e>
 80085fc:	4639      	mov	r1, r7
 80085fe:	4628      	mov	r0, r5
 8008600:	f7f8 fa4c 	bl	8000a9c <__aeabi_d2uiz>
 8008604:	2801      	cmp	r0, #1
 8008606:	bf38      	it	cc
 8008608:	2001      	movcc	r0, #1
 800860a:	f7f7 fef5 	bl	80003f8 <__aeabi_ui2d>
 800860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008610:	4605      	mov	r5, r0
 8008612:	460f      	mov	r7, r1
 8008614:	bb03      	cbnz	r3, 8008658 <_strtod_l+0xba0>
 8008616:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800861a:	9014      	str	r0, [sp, #80]	; 0x50
 800861c:	9315      	str	r3, [sp, #84]	; 0x54
 800861e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008622:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800862a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800862e:	1a9b      	subs	r3, r3, r2
 8008630:	9311      	str	r3, [sp, #68]	; 0x44
 8008632:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008634:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008636:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800863a:	f002 fe0d 	bl	800b258 <__ulp>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4640      	mov	r0, r8
 8008644:	4649      	mov	r1, r9
 8008646:	f7f7 ff51 	bl	80004ec <__aeabi_dmul>
 800864a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800864c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800864e:	f7f7 fd97 	bl	8000180 <__adddf3>
 8008652:	4680      	mov	r8, r0
 8008654:	4689      	mov	r9, r1
 8008656:	e774      	b.n	8008542 <_strtod_l+0xa8a>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008660:	e7dd      	b.n	800861e <_strtod_l+0xb66>
 8008662:	a30d      	add	r3, pc, #52	; (adr r3, 8008698 <_strtod_l+0xbe0>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	f7f8 f9b2 	bl	80009d0 <__aeabi_dcmplt>
 800866c:	e79b      	b.n	80085a6 <_strtod_l+0xaee>
 800866e:	2300      	movs	r3, #0
 8008670:	930e      	str	r3, [sp, #56]	; 0x38
 8008672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008674:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	f7ff ba5b 	b.w	8007b32 <_strtod_l+0x7a>
 800867c:	2a65      	cmp	r2, #101	; 0x65
 800867e:	f43f ab52 	beq.w	8007d26 <_strtod_l+0x26e>
 8008682:	2a45      	cmp	r2, #69	; 0x45
 8008684:	f43f ab4f 	beq.w	8007d26 <_strtod_l+0x26e>
 8008688:	2301      	movs	r3, #1
 800868a:	f7ff bb87 	b.w	8007d9c <_strtod_l+0x2e4>
 800868e:	bf00      	nop
 8008690:	ffc00000 	.word	0xffc00000
 8008694:	41dfffff 	.word	0x41dfffff
 8008698:	94a03595 	.word	0x94a03595
 800869c:	3fcfffff 	.word	0x3fcfffff

080086a0 <strtod>:
 80086a0:	460a      	mov	r2, r1
 80086a2:	4601      	mov	r1, r0
 80086a4:	4802      	ldr	r0, [pc, #8]	; (80086b0 <strtod+0x10>)
 80086a6:	4b03      	ldr	r3, [pc, #12]	; (80086b4 <strtod+0x14>)
 80086a8:	6800      	ldr	r0, [r0, #0]
 80086aa:	f7ff ba05 	b.w	8007ab8 <_strtod_l>
 80086ae:	bf00      	nop
 80086b0:	200001d0 	.word	0x200001d0
 80086b4:	20000018 	.word	0x20000018

080086b8 <_strtol_l.constprop.0>:
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086be:	4686      	mov	lr, r0
 80086c0:	4690      	mov	r8, r2
 80086c2:	d001      	beq.n	80086c8 <_strtol_l.constprop.0+0x10>
 80086c4:	2b24      	cmp	r3, #36	; 0x24
 80086c6:	d906      	bls.n	80086d6 <_strtol_l.constprop.0+0x1e>
 80086c8:	f000 ff36 	bl	8009538 <__errno>
 80086cc:	2316      	movs	r3, #22
 80086ce:	6003      	str	r3, [r0, #0]
 80086d0:	2000      	movs	r0, #0
 80086d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086d6:	460d      	mov	r5, r1
 80086d8:	4835      	ldr	r0, [pc, #212]	; (80087b0 <_strtol_l.constprop.0+0xf8>)
 80086da:	462a      	mov	r2, r5
 80086dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086e0:	5d06      	ldrb	r6, [r0, r4]
 80086e2:	f016 0608 	ands.w	r6, r6, #8
 80086e6:	d1f8      	bne.n	80086da <_strtol_l.constprop.0+0x22>
 80086e8:	2c2d      	cmp	r4, #45	; 0x2d
 80086ea:	d12e      	bne.n	800874a <_strtol_l.constprop.0+0x92>
 80086ec:	2601      	movs	r6, #1
 80086ee:	782c      	ldrb	r4, [r5, #0]
 80086f0:	1c95      	adds	r5, r2, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d057      	beq.n	80087a6 <_strtol_l.constprop.0+0xee>
 80086f6:	2b10      	cmp	r3, #16
 80086f8:	d109      	bne.n	800870e <_strtol_l.constprop.0+0x56>
 80086fa:	2c30      	cmp	r4, #48	; 0x30
 80086fc:	d107      	bne.n	800870e <_strtol_l.constprop.0+0x56>
 80086fe:	782a      	ldrb	r2, [r5, #0]
 8008700:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008704:	2a58      	cmp	r2, #88	; 0x58
 8008706:	d149      	bne.n	800879c <_strtol_l.constprop.0+0xe4>
 8008708:	2310      	movs	r3, #16
 800870a:	786c      	ldrb	r4, [r5, #1]
 800870c:	3502      	adds	r5, #2
 800870e:	2200      	movs	r2, #0
 8008710:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008714:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008718:	fbbc f9f3 	udiv	r9, ip, r3
 800871c:	4610      	mov	r0, r2
 800871e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008722:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008726:	2f09      	cmp	r7, #9
 8008728:	d814      	bhi.n	8008754 <_strtol_l.constprop.0+0x9c>
 800872a:	463c      	mov	r4, r7
 800872c:	42a3      	cmp	r3, r4
 800872e:	dd20      	ble.n	8008772 <_strtol_l.constprop.0+0xba>
 8008730:	1c57      	adds	r7, r2, #1
 8008732:	d007      	beq.n	8008744 <_strtol_l.constprop.0+0x8c>
 8008734:	4581      	cmp	r9, r0
 8008736:	d319      	bcc.n	800876c <_strtol_l.constprop.0+0xb4>
 8008738:	d101      	bne.n	800873e <_strtol_l.constprop.0+0x86>
 800873a:	45a2      	cmp	sl, r4
 800873c:	db16      	blt.n	800876c <_strtol_l.constprop.0+0xb4>
 800873e:	2201      	movs	r2, #1
 8008740:	fb00 4003 	mla	r0, r0, r3, r4
 8008744:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008748:	e7eb      	b.n	8008722 <_strtol_l.constprop.0+0x6a>
 800874a:	2c2b      	cmp	r4, #43	; 0x2b
 800874c:	bf04      	itt	eq
 800874e:	782c      	ldrbeq	r4, [r5, #0]
 8008750:	1c95      	addeq	r5, r2, #2
 8008752:	e7ce      	b.n	80086f2 <_strtol_l.constprop.0+0x3a>
 8008754:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008758:	2f19      	cmp	r7, #25
 800875a:	d801      	bhi.n	8008760 <_strtol_l.constprop.0+0xa8>
 800875c:	3c37      	subs	r4, #55	; 0x37
 800875e:	e7e5      	b.n	800872c <_strtol_l.constprop.0+0x74>
 8008760:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008764:	2f19      	cmp	r7, #25
 8008766:	d804      	bhi.n	8008772 <_strtol_l.constprop.0+0xba>
 8008768:	3c57      	subs	r4, #87	; 0x57
 800876a:	e7df      	b.n	800872c <_strtol_l.constprop.0+0x74>
 800876c:	f04f 32ff 	mov.w	r2, #4294967295
 8008770:	e7e8      	b.n	8008744 <_strtol_l.constprop.0+0x8c>
 8008772:	1c53      	adds	r3, r2, #1
 8008774:	d108      	bne.n	8008788 <_strtol_l.constprop.0+0xd0>
 8008776:	2322      	movs	r3, #34	; 0x22
 8008778:	4660      	mov	r0, ip
 800877a:	f8ce 3000 	str.w	r3, [lr]
 800877e:	f1b8 0f00 	cmp.w	r8, #0
 8008782:	d0a6      	beq.n	80086d2 <_strtol_l.constprop.0+0x1a>
 8008784:	1e69      	subs	r1, r5, #1
 8008786:	e006      	b.n	8008796 <_strtol_l.constprop.0+0xde>
 8008788:	b106      	cbz	r6, 800878c <_strtol_l.constprop.0+0xd4>
 800878a:	4240      	negs	r0, r0
 800878c:	f1b8 0f00 	cmp.w	r8, #0
 8008790:	d09f      	beq.n	80086d2 <_strtol_l.constprop.0+0x1a>
 8008792:	2a00      	cmp	r2, #0
 8008794:	d1f6      	bne.n	8008784 <_strtol_l.constprop.0+0xcc>
 8008796:	f8c8 1000 	str.w	r1, [r8]
 800879a:	e79a      	b.n	80086d2 <_strtol_l.constprop.0+0x1a>
 800879c:	2430      	movs	r4, #48	; 0x30
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d1b5      	bne.n	800870e <_strtol_l.constprop.0+0x56>
 80087a2:	2308      	movs	r3, #8
 80087a4:	e7b3      	b.n	800870e <_strtol_l.constprop.0+0x56>
 80087a6:	2c30      	cmp	r4, #48	; 0x30
 80087a8:	d0a9      	beq.n	80086fe <_strtol_l.constprop.0+0x46>
 80087aa:	230a      	movs	r3, #10
 80087ac:	e7af      	b.n	800870e <_strtol_l.constprop.0+0x56>
 80087ae:	bf00      	nop
 80087b0:	0800c119 	.word	0x0800c119

080087b4 <strtol>:
 80087b4:	4613      	mov	r3, r2
 80087b6:	460a      	mov	r2, r1
 80087b8:	4601      	mov	r1, r0
 80087ba:	4802      	ldr	r0, [pc, #8]	; (80087c4 <strtol+0x10>)
 80087bc:	6800      	ldr	r0, [r0, #0]
 80087be:	f7ff bf7b 	b.w	80086b8 <_strtol_l.constprop.0>
 80087c2:	bf00      	nop
 80087c4:	200001d0 	.word	0x200001d0

080087c8 <__cvt>:
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ce:	461f      	mov	r7, r3
 80087d0:	bfbb      	ittet	lt
 80087d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80087d6:	461f      	movlt	r7, r3
 80087d8:	2300      	movge	r3, #0
 80087da:	232d      	movlt	r3, #45	; 0x2d
 80087dc:	b088      	sub	sp, #32
 80087de:	4614      	mov	r4, r2
 80087e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80087e4:	7013      	strb	r3, [r2, #0]
 80087e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80087ec:	f023 0820 	bic.w	r8, r3, #32
 80087f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087f4:	d005      	beq.n	8008802 <__cvt+0x3a>
 80087f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087fa:	d100      	bne.n	80087fe <__cvt+0x36>
 80087fc:	3501      	adds	r5, #1
 80087fe:	2302      	movs	r3, #2
 8008800:	e000      	b.n	8008804 <__cvt+0x3c>
 8008802:	2303      	movs	r3, #3
 8008804:	aa07      	add	r2, sp, #28
 8008806:	9204      	str	r2, [sp, #16]
 8008808:	aa06      	add	r2, sp, #24
 800880a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800880e:	e9cd 3500 	strd	r3, r5, [sp]
 8008812:	4622      	mov	r2, r4
 8008814:	463b      	mov	r3, r7
 8008816:	f000 ff67 	bl	80096e8 <_dtoa_r>
 800881a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800881e:	4606      	mov	r6, r0
 8008820:	d102      	bne.n	8008828 <__cvt+0x60>
 8008822:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008824:	07db      	lsls	r3, r3, #31
 8008826:	d522      	bpl.n	800886e <__cvt+0xa6>
 8008828:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800882c:	eb06 0905 	add.w	r9, r6, r5
 8008830:	d110      	bne.n	8008854 <__cvt+0x8c>
 8008832:	7833      	ldrb	r3, [r6, #0]
 8008834:	2b30      	cmp	r3, #48	; 0x30
 8008836:	d10a      	bne.n	800884e <__cvt+0x86>
 8008838:	2200      	movs	r2, #0
 800883a:	2300      	movs	r3, #0
 800883c:	4620      	mov	r0, r4
 800883e:	4639      	mov	r1, r7
 8008840:	f7f8 f8bc 	bl	80009bc <__aeabi_dcmpeq>
 8008844:	b918      	cbnz	r0, 800884e <__cvt+0x86>
 8008846:	f1c5 0501 	rsb	r5, r5, #1
 800884a:	f8ca 5000 	str.w	r5, [sl]
 800884e:	f8da 3000 	ldr.w	r3, [sl]
 8008852:	4499      	add	r9, r3
 8008854:	2200      	movs	r2, #0
 8008856:	2300      	movs	r3, #0
 8008858:	4620      	mov	r0, r4
 800885a:	4639      	mov	r1, r7
 800885c:	f7f8 f8ae 	bl	80009bc <__aeabi_dcmpeq>
 8008860:	b108      	cbz	r0, 8008866 <__cvt+0x9e>
 8008862:	f8cd 901c 	str.w	r9, [sp, #28]
 8008866:	2230      	movs	r2, #48	; 0x30
 8008868:	9b07      	ldr	r3, [sp, #28]
 800886a:	454b      	cmp	r3, r9
 800886c:	d307      	bcc.n	800887e <__cvt+0xb6>
 800886e:	4630      	mov	r0, r6
 8008870:	9b07      	ldr	r3, [sp, #28]
 8008872:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008874:	1b9b      	subs	r3, r3, r6
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	b008      	add	sp, #32
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887e:	1c59      	adds	r1, r3, #1
 8008880:	9107      	str	r1, [sp, #28]
 8008882:	701a      	strb	r2, [r3, #0]
 8008884:	e7f0      	b.n	8008868 <__cvt+0xa0>

08008886 <__exponent>:
 8008886:	4603      	mov	r3, r0
 8008888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800888a:	2900      	cmp	r1, #0
 800888c:	f803 2b02 	strb.w	r2, [r3], #2
 8008890:	bfb6      	itet	lt
 8008892:	222d      	movlt	r2, #45	; 0x2d
 8008894:	222b      	movge	r2, #43	; 0x2b
 8008896:	4249      	neglt	r1, r1
 8008898:	2909      	cmp	r1, #9
 800889a:	7042      	strb	r2, [r0, #1]
 800889c:	dd2a      	ble.n	80088f4 <__exponent+0x6e>
 800889e:	f10d 0207 	add.w	r2, sp, #7
 80088a2:	4617      	mov	r7, r2
 80088a4:	260a      	movs	r6, #10
 80088a6:	fb91 f5f6 	sdiv	r5, r1, r6
 80088aa:	4694      	mov	ip, r2
 80088ac:	fb06 1415 	mls	r4, r6, r5, r1
 80088b0:	3430      	adds	r4, #48	; 0x30
 80088b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80088b6:	460c      	mov	r4, r1
 80088b8:	2c63      	cmp	r4, #99	; 0x63
 80088ba:	4629      	mov	r1, r5
 80088bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80088c0:	dcf1      	bgt.n	80088a6 <__exponent+0x20>
 80088c2:	3130      	adds	r1, #48	; 0x30
 80088c4:	f1ac 0402 	sub.w	r4, ip, #2
 80088c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088cc:	4622      	mov	r2, r4
 80088ce:	1c41      	adds	r1, r0, #1
 80088d0:	42ba      	cmp	r2, r7
 80088d2:	d30a      	bcc.n	80088ea <__exponent+0x64>
 80088d4:	f10d 0209 	add.w	r2, sp, #9
 80088d8:	eba2 020c 	sub.w	r2, r2, ip
 80088dc:	42bc      	cmp	r4, r7
 80088de:	bf88      	it	hi
 80088e0:	2200      	movhi	r2, #0
 80088e2:	4413      	add	r3, r2
 80088e4:	1a18      	subs	r0, r3, r0
 80088e6:	b003      	add	sp, #12
 80088e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80088f2:	e7ed      	b.n	80088d0 <__exponent+0x4a>
 80088f4:	2330      	movs	r3, #48	; 0x30
 80088f6:	3130      	adds	r1, #48	; 0x30
 80088f8:	7083      	strb	r3, [r0, #2]
 80088fa:	70c1      	strb	r1, [r0, #3]
 80088fc:	1d03      	adds	r3, r0, #4
 80088fe:	e7f1      	b.n	80088e4 <__exponent+0x5e>

08008900 <_printf_float>:
 8008900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	b091      	sub	sp, #68	; 0x44
 8008906:	460c      	mov	r4, r1
 8008908:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800890c:	4616      	mov	r6, r2
 800890e:	461f      	mov	r7, r3
 8008910:	4605      	mov	r5, r0
 8008912:	f000 fdc7 	bl	80094a4 <_localeconv_r>
 8008916:	6803      	ldr	r3, [r0, #0]
 8008918:	4618      	mov	r0, r3
 800891a:	9309      	str	r3, [sp, #36]	; 0x24
 800891c:	f7f7 fc22 	bl	8000164 <strlen>
 8008920:	2300      	movs	r3, #0
 8008922:	930e      	str	r3, [sp, #56]	; 0x38
 8008924:	f8d8 3000 	ldr.w	r3, [r8]
 8008928:	900a      	str	r0, [sp, #40]	; 0x28
 800892a:	3307      	adds	r3, #7
 800892c:	f023 0307 	bic.w	r3, r3, #7
 8008930:	f103 0208 	add.w	r2, r3, #8
 8008934:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008938:	f8d4 b000 	ldr.w	fp, [r4]
 800893c:	f8c8 2000 	str.w	r2, [r8]
 8008940:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008944:	4652      	mov	r2, sl
 8008946:	4643      	mov	r3, r8
 8008948:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800894c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008950:	930b      	str	r3, [sp, #44]	; 0x2c
 8008952:	f04f 32ff 	mov.w	r2, #4294967295
 8008956:	4650      	mov	r0, sl
 8008958:	4b9c      	ldr	r3, [pc, #624]	; (8008bcc <_printf_float+0x2cc>)
 800895a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800895c:	f7f8 f860 	bl	8000a20 <__aeabi_dcmpun>
 8008960:	bb70      	cbnz	r0, 80089c0 <_printf_float+0xc0>
 8008962:	f04f 32ff 	mov.w	r2, #4294967295
 8008966:	4650      	mov	r0, sl
 8008968:	4b98      	ldr	r3, [pc, #608]	; (8008bcc <_printf_float+0x2cc>)
 800896a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800896c:	f7f8 f83a 	bl	80009e4 <__aeabi_dcmple>
 8008970:	bb30      	cbnz	r0, 80089c0 <_printf_float+0xc0>
 8008972:	2200      	movs	r2, #0
 8008974:	2300      	movs	r3, #0
 8008976:	4650      	mov	r0, sl
 8008978:	4641      	mov	r1, r8
 800897a:	f7f8 f829 	bl	80009d0 <__aeabi_dcmplt>
 800897e:	b110      	cbz	r0, 8008986 <_printf_float+0x86>
 8008980:	232d      	movs	r3, #45	; 0x2d
 8008982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008986:	4a92      	ldr	r2, [pc, #584]	; (8008bd0 <_printf_float+0x2d0>)
 8008988:	4b92      	ldr	r3, [pc, #584]	; (8008bd4 <_printf_float+0x2d4>)
 800898a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800898e:	bf94      	ite	ls
 8008990:	4690      	movls	r8, r2
 8008992:	4698      	movhi	r8, r3
 8008994:	2303      	movs	r3, #3
 8008996:	f04f 0a00 	mov.w	sl, #0
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	f02b 0304 	bic.w	r3, fp, #4
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	4633      	mov	r3, r6
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	9700      	str	r7, [sp, #0]
 80089aa:	aa0f      	add	r2, sp, #60	; 0x3c
 80089ac:	f000 f9d6 	bl	8008d5c <_printf_common>
 80089b0:	3001      	adds	r0, #1
 80089b2:	f040 8090 	bne.w	8008ad6 <_printf_float+0x1d6>
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	b011      	add	sp, #68	; 0x44
 80089bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089c0:	4652      	mov	r2, sl
 80089c2:	4643      	mov	r3, r8
 80089c4:	4650      	mov	r0, sl
 80089c6:	4641      	mov	r1, r8
 80089c8:	f7f8 f82a 	bl	8000a20 <__aeabi_dcmpun>
 80089cc:	b148      	cbz	r0, 80089e2 <_printf_float+0xe2>
 80089ce:	f1b8 0f00 	cmp.w	r8, #0
 80089d2:	bfb8      	it	lt
 80089d4:	232d      	movlt	r3, #45	; 0x2d
 80089d6:	4a80      	ldr	r2, [pc, #512]	; (8008bd8 <_printf_float+0x2d8>)
 80089d8:	bfb8      	it	lt
 80089da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089de:	4b7f      	ldr	r3, [pc, #508]	; (8008bdc <_printf_float+0x2dc>)
 80089e0:	e7d3      	b.n	800898a <_printf_float+0x8a>
 80089e2:	6863      	ldr	r3, [r4, #4]
 80089e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	d142      	bne.n	8008a72 <_printf_float+0x172>
 80089ec:	2306      	movs	r3, #6
 80089ee:	6063      	str	r3, [r4, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	9206      	str	r2, [sp, #24]
 80089f4:	aa0e      	add	r2, sp, #56	; 0x38
 80089f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80089fa:	aa0d      	add	r2, sp, #52	; 0x34
 80089fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008a00:	9203      	str	r2, [sp, #12]
 8008a02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008a06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008a0a:	6023      	str	r3, [r4, #0]
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	4652      	mov	r2, sl
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	4628      	mov	r0, r5
 8008a14:	4643      	mov	r3, r8
 8008a16:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a18:	f7ff fed6 	bl	80087c8 <__cvt>
 8008a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a1e:	4680      	mov	r8, r0
 8008a20:	2947      	cmp	r1, #71	; 0x47
 8008a22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a24:	d108      	bne.n	8008a38 <_printf_float+0x138>
 8008a26:	1cc8      	adds	r0, r1, #3
 8008a28:	db02      	blt.n	8008a30 <_printf_float+0x130>
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	4299      	cmp	r1, r3
 8008a2e:	dd40      	ble.n	8008ab2 <_printf_float+0x1b2>
 8008a30:	f1a9 0902 	sub.w	r9, r9, #2
 8008a34:	fa5f f989 	uxtb.w	r9, r9
 8008a38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a3c:	d81f      	bhi.n	8008a7e <_printf_float+0x17e>
 8008a3e:	464a      	mov	r2, r9
 8008a40:	3901      	subs	r1, #1
 8008a42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a46:	910d      	str	r1, [sp, #52]	; 0x34
 8008a48:	f7ff ff1d 	bl	8008886 <__exponent>
 8008a4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a4e:	4682      	mov	sl, r0
 8008a50:	1813      	adds	r3, r2, r0
 8008a52:	2a01      	cmp	r2, #1
 8008a54:	6123      	str	r3, [r4, #16]
 8008a56:	dc02      	bgt.n	8008a5e <_printf_float+0x15e>
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	07d2      	lsls	r2, r2, #31
 8008a5c:	d501      	bpl.n	8008a62 <_printf_float+0x162>
 8008a5e:	3301      	adds	r3, #1
 8008a60:	6123      	str	r3, [r4, #16]
 8008a62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d09b      	beq.n	80089a2 <_printf_float+0xa2>
 8008a6a:	232d      	movs	r3, #45	; 0x2d
 8008a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a70:	e797      	b.n	80089a2 <_printf_float+0xa2>
 8008a72:	2947      	cmp	r1, #71	; 0x47
 8008a74:	d1bc      	bne.n	80089f0 <_printf_float+0xf0>
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1ba      	bne.n	80089f0 <_printf_float+0xf0>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e7b7      	b.n	80089ee <_printf_float+0xee>
 8008a7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008a82:	d118      	bne.n	8008ab6 <_printf_float+0x1b6>
 8008a84:	2900      	cmp	r1, #0
 8008a86:	6863      	ldr	r3, [r4, #4]
 8008a88:	dd0b      	ble.n	8008aa2 <_printf_float+0x1a2>
 8008a8a:	6121      	str	r1, [r4, #16]
 8008a8c:	b913      	cbnz	r3, 8008a94 <_printf_float+0x194>
 8008a8e:	6822      	ldr	r2, [r4, #0]
 8008a90:	07d0      	lsls	r0, r2, #31
 8008a92:	d502      	bpl.n	8008a9a <_printf_float+0x19a>
 8008a94:	3301      	adds	r3, #1
 8008a96:	440b      	add	r3, r1
 8008a98:	6123      	str	r3, [r4, #16]
 8008a9a:	f04f 0a00 	mov.w	sl, #0
 8008a9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008aa0:	e7df      	b.n	8008a62 <_printf_float+0x162>
 8008aa2:	b913      	cbnz	r3, 8008aaa <_printf_float+0x1aa>
 8008aa4:	6822      	ldr	r2, [r4, #0]
 8008aa6:	07d2      	lsls	r2, r2, #31
 8008aa8:	d501      	bpl.n	8008aae <_printf_float+0x1ae>
 8008aaa:	3302      	adds	r3, #2
 8008aac:	e7f4      	b.n	8008a98 <_printf_float+0x198>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e7f2      	b.n	8008a98 <_printf_float+0x198>
 8008ab2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ab8:	4299      	cmp	r1, r3
 8008aba:	db05      	blt.n	8008ac8 <_printf_float+0x1c8>
 8008abc:	6823      	ldr	r3, [r4, #0]
 8008abe:	6121      	str	r1, [r4, #16]
 8008ac0:	07d8      	lsls	r0, r3, #31
 8008ac2:	d5ea      	bpl.n	8008a9a <_printf_float+0x19a>
 8008ac4:	1c4b      	adds	r3, r1, #1
 8008ac6:	e7e7      	b.n	8008a98 <_printf_float+0x198>
 8008ac8:	2900      	cmp	r1, #0
 8008aca:	bfcc      	ite	gt
 8008acc:	2201      	movgt	r2, #1
 8008ace:	f1c1 0202 	rsble	r2, r1, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	e7e0      	b.n	8008a98 <_printf_float+0x198>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	055a      	lsls	r2, r3, #21
 8008ada:	d407      	bmi.n	8008aec <_printf_float+0x1ec>
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	4642      	mov	r2, r8
 8008ae0:	4631      	mov	r1, r6
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	47b8      	blx	r7
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d12b      	bne.n	8008b42 <_printf_float+0x242>
 8008aea:	e764      	b.n	80089b6 <_printf_float+0xb6>
 8008aec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008af0:	f240 80dd 	bls.w	8008cae <_printf_float+0x3ae>
 8008af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008af8:	2200      	movs	r2, #0
 8008afa:	2300      	movs	r3, #0
 8008afc:	f7f7 ff5e 	bl	80009bc <__aeabi_dcmpeq>
 8008b00:	2800      	cmp	r0, #0
 8008b02:	d033      	beq.n	8008b6c <_printf_float+0x26c>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	4a35      	ldr	r2, [pc, #212]	; (8008be0 <_printf_float+0x2e0>)
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f af51 	beq.w	80089b6 <_printf_float+0xb6>
 8008b14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	db02      	blt.n	8008b22 <_printf_float+0x222>
 8008b1c:	6823      	ldr	r3, [r4, #0]
 8008b1e:	07d8      	lsls	r0, r3, #31
 8008b20:	d50f      	bpl.n	8008b42 <_printf_float+0x242>
 8008b22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	f43f af42 	beq.w	80089b6 <_printf_float+0xb6>
 8008b32:	f04f 0800 	mov.w	r8, #0
 8008b36:	f104 091a 	add.w	r9, r4, #26
 8008b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3c:	3b01      	subs	r3, #1
 8008b3e:	4543      	cmp	r3, r8
 8008b40:	dc09      	bgt.n	8008b56 <_printf_float+0x256>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	079b      	lsls	r3, r3, #30
 8008b46:	f100 8104 	bmi.w	8008d52 <_printf_float+0x452>
 8008b4a:	68e0      	ldr	r0, [r4, #12]
 8008b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b4e:	4298      	cmp	r0, r3
 8008b50:	bfb8      	it	lt
 8008b52:	4618      	movlt	r0, r3
 8008b54:	e731      	b.n	80089ba <_printf_float+0xba>
 8008b56:	2301      	movs	r3, #1
 8008b58:	464a      	mov	r2, r9
 8008b5a:	4631      	mov	r1, r6
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	47b8      	blx	r7
 8008b60:	3001      	adds	r0, #1
 8008b62:	f43f af28 	beq.w	80089b6 <_printf_float+0xb6>
 8008b66:	f108 0801 	add.w	r8, r8, #1
 8008b6a:	e7e6      	b.n	8008b3a <_printf_float+0x23a>
 8008b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dc38      	bgt.n	8008be4 <_printf_float+0x2e4>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	4a19      	ldr	r2, [pc, #100]	; (8008be0 <_printf_float+0x2e0>)
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f af1a 	beq.w	80089b6 <_printf_float+0xb6>
 8008b82:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008b86:	4313      	orrs	r3, r2
 8008b88:	d102      	bne.n	8008b90 <_printf_float+0x290>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	07d9      	lsls	r1, r3, #31
 8008b8e:	d5d8      	bpl.n	8008b42 <_printf_float+0x242>
 8008b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b94:	4631      	mov	r1, r6
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	f43f af0b 	beq.w	80089b6 <_printf_float+0xb6>
 8008ba0:	f04f 0900 	mov.w	r9, #0
 8008ba4:	f104 0a1a 	add.w	sl, r4, #26
 8008ba8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008baa:	425b      	negs	r3, r3
 8008bac:	454b      	cmp	r3, r9
 8008bae:	dc01      	bgt.n	8008bb4 <_printf_float+0x2b4>
 8008bb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bb2:	e794      	b.n	8008ade <_printf_float+0x1de>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	4652      	mov	r2, sl
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	f43f aef9 	beq.w	80089b6 <_printf_float+0xb6>
 8008bc4:	f109 0901 	add.w	r9, r9, #1
 8008bc8:	e7ee      	b.n	8008ba8 <_printf_float+0x2a8>
 8008bca:	bf00      	nop
 8008bcc:	7fefffff 	.word	0x7fefffff
 8008bd0:	0800c219 	.word	0x0800c219
 8008bd4:	0800c21d 	.word	0x0800c21d
 8008bd8:	0800c221 	.word	0x0800c221
 8008bdc:	0800c225 	.word	0x0800c225
 8008be0:	0800c229 	.word	0x0800c229
 8008be4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008be6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008be8:	429a      	cmp	r2, r3
 8008bea:	bfa8      	it	ge
 8008bec:	461a      	movge	r2, r3
 8008bee:	2a00      	cmp	r2, #0
 8008bf0:	4691      	mov	r9, r2
 8008bf2:	dc37      	bgt.n	8008c64 <_printf_float+0x364>
 8008bf4:	f04f 0b00 	mov.w	fp, #0
 8008bf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bfc:	f104 021a 	add.w	r2, r4, #26
 8008c00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c04:	ebaa 0309 	sub.w	r3, sl, r9
 8008c08:	455b      	cmp	r3, fp
 8008c0a:	dc33      	bgt.n	8008c74 <_printf_float+0x374>
 8008c0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c10:	429a      	cmp	r2, r3
 8008c12:	db3b      	blt.n	8008c8c <_printf_float+0x38c>
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	07da      	lsls	r2, r3, #31
 8008c18:	d438      	bmi.n	8008c8c <_printf_float+0x38c>
 8008c1a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008c1e:	eba2 0903 	sub.w	r9, r2, r3
 8008c22:	eba2 020a 	sub.w	r2, r2, sl
 8008c26:	4591      	cmp	r9, r2
 8008c28:	bfa8      	it	ge
 8008c2a:	4691      	movge	r9, r2
 8008c2c:	f1b9 0f00 	cmp.w	r9, #0
 8008c30:	dc34      	bgt.n	8008c9c <_printf_float+0x39c>
 8008c32:	f04f 0800 	mov.w	r8, #0
 8008c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c3a:	f104 0a1a 	add.w	sl, r4, #26
 8008c3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c42:	1a9b      	subs	r3, r3, r2
 8008c44:	eba3 0309 	sub.w	r3, r3, r9
 8008c48:	4543      	cmp	r3, r8
 8008c4a:	f77f af7a 	ble.w	8008b42 <_printf_float+0x242>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4652      	mov	r2, sl
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f aeac 	beq.w	80089b6 <_printf_float+0xb6>
 8008c5e:	f108 0801 	add.w	r8, r8, #1
 8008c62:	e7ec      	b.n	8008c3e <_printf_float+0x33e>
 8008c64:	4613      	mov	r3, r2
 8008c66:	4631      	mov	r1, r6
 8008c68:	4642      	mov	r2, r8
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	47b8      	blx	r7
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d1c0      	bne.n	8008bf4 <_printf_float+0x2f4>
 8008c72:	e6a0      	b.n	80089b6 <_printf_float+0xb6>
 8008c74:	2301      	movs	r3, #1
 8008c76:	4631      	mov	r1, r6
 8008c78:	4628      	mov	r0, r5
 8008c7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c7c:	47b8      	blx	r7
 8008c7e:	3001      	adds	r0, #1
 8008c80:	f43f ae99 	beq.w	80089b6 <_printf_float+0xb6>
 8008c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c86:	f10b 0b01 	add.w	fp, fp, #1
 8008c8a:	e7b9      	b.n	8008c00 <_printf_float+0x300>
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c92:	4628      	mov	r0, r5
 8008c94:	47b8      	blx	r7
 8008c96:	3001      	adds	r0, #1
 8008c98:	d1bf      	bne.n	8008c1a <_printf_float+0x31a>
 8008c9a:	e68c      	b.n	80089b6 <_printf_float+0xb6>
 8008c9c:	464b      	mov	r3, r9
 8008c9e:	4631      	mov	r1, r6
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	eb08 020a 	add.w	r2, r8, sl
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d1c2      	bne.n	8008c32 <_printf_float+0x332>
 8008cac:	e683      	b.n	80089b6 <_printf_float+0xb6>
 8008cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cb0:	2a01      	cmp	r2, #1
 8008cb2:	dc01      	bgt.n	8008cb8 <_printf_float+0x3b8>
 8008cb4:	07db      	lsls	r3, r3, #31
 8008cb6:	d539      	bpl.n	8008d2c <_printf_float+0x42c>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4642      	mov	r2, r8
 8008cbc:	4631      	mov	r1, r6
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	47b8      	blx	r7
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	f43f ae77 	beq.w	80089b6 <_printf_float+0xb6>
 8008cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ccc:	4631      	mov	r1, r6
 8008cce:	4628      	mov	r0, r5
 8008cd0:	47b8      	blx	r7
 8008cd2:	3001      	adds	r0, #1
 8008cd4:	f43f ae6f 	beq.w	80089b6 <_printf_float+0xb6>
 8008cd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008ce4:	f7f7 fe6a 	bl	80009bc <__aeabi_dcmpeq>
 8008ce8:	b9d8      	cbnz	r0, 8008d22 <_printf_float+0x422>
 8008cea:	f109 33ff 	add.w	r3, r9, #4294967295
 8008cee:	f108 0201 	add.w	r2, r8, #1
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d10e      	bne.n	8008d1a <_printf_float+0x41a>
 8008cfc:	e65b      	b.n	80089b6 <_printf_float+0xb6>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	464a      	mov	r2, r9
 8008d02:	4631      	mov	r1, r6
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	f43f ae54 	beq.w	80089b6 <_printf_float+0xb6>
 8008d0e:	f108 0801 	add.w	r8, r8, #1
 8008d12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d14:	3b01      	subs	r3, #1
 8008d16:	4543      	cmp	r3, r8
 8008d18:	dcf1      	bgt.n	8008cfe <_printf_float+0x3fe>
 8008d1a:	4653      	mov	r3, sl
 8008d1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d20:	e6de      	b.n	8008ae0 <_printf_float+0x1e0>
 8008d22:	f04f 0800 	mov.w	r8, #0
 8008d26:	f104 091a 	add.w	r9, r4, #26
 8008d2a:	e7f2      	b.n	8008d12 <_printf_float+0x412>
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	4642      	mov	r2, r8
 8008d30:	e7df      	b.n	8008cf2 <_printf_float+0x3f2>
 8008d32:	2301      	movs	r3, #1
 8008d34:	464a      	mov	r2, r9
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f43f ae3a 	beq.w	80089b6 <_printf_float+0xb6>
 8008d42:	f108 0801 	add.w	r8, r8, #1
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d4a:	1a5b      	subs	r3, r3, r1
 8008d4c:	4543      	cmp	r3, r8
 8008d4e:	dcf0      	bgt.n	8008d32 <_printf_float+0x432>
 8008d50:	e6fb      	b.n	8008b4a <_printf_float+0x24a>
 8008d52:	f04f 0800 	mov.w	r8, #0
 8008d56:	f104 0919 	add.w	r9, r4, #25
 8008d5a:	e7f4      	b.n	8008d46 <_printf_float+0x446>

08008d5c <_printf_common>:
 8008d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d60:	4616      	mov	r6, r2
 8008d62:	4699      	mov	r9, r3
 8008d64:	688a      	ldr	r2, [r1, #8]
 8008d66:	690b      	ldr	r3, [r1, #16]
 8008d68:	4607      	mov	r7, r0
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	bfb8      	it	lt
 8008d6e:	4613      	movlt	r3, r2
 8008d70:	6033      	str	r3, [r6, #0]
 8008d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d76:	460c      	mov	r4, r1
 8008d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d7c:	b10a      	cbz	r2, 8008d82 <_printf_common+0x26>
 8008d7e:	3301      	adds	r3, #1
 8008d80:	6033      	str	r3, [r6, #0]
 8008d82:	6823      	ldr	r3, [r4, #0]
 8008d84:	0699      	lsls	r1, r3, #26
 8008d86:	bf42      	ittt	mi
 8008d88:	6833      	ldrmi	r3, [r6, #0]
 8008d8a:	3302      	addmi	r3, #2
 8008d8c:	6033      	strmi	r3, [r6, #0]
 8008d8e:	6825      	ldr	r5, [r4, #0]
 8008d90:	f015 0506 	ands.w	r5, r5, #6
 8008d94:	d106      	bne.n	8008da4 <_printf_common+0x48>
 8008d96:	f104 0a19 	add.w	sl, r4, #25
 8008d9a:	68e3      	ldr	r3, [r4, #12]
 8008d9c:	6832      	ldr	r2, [r6, #0]
 8008d9e:	1a9b      	subs	r3, r3, r2
 8008da0:	42ab      	cmp	r3, r5
 8008da2:	dc2b      	bgt.n	8008dfc <_printf_common+0xa0>
 8008da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008da8:	1e13      	subs	r3, r2, #0
 8008daa:	6822      	ldr	r2, [r4, #0]
 8008dac:	bf18      	it	ne
 8008dae:	2301      	movne	r3, #1
 8008db0:	0692      	lsls	r2, r2, #26
 8008db2:	d430      	bmi.n	8008e16 <_printf_common+0xba>
 8008db4:	4649      	mov	r1, r9
 8008db6:	4638      	mov	r0, r7
 8008db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dbc:	47c0      	blx	r8
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d023      	beq.n	8008e0a <_printf_common+0xae>
 8008dc2:	6823      	ldr	r3, [r4, #0]
 8008dc4:	6922      	ldr	r2, [r4, #16]
 8008dc6:	f003 0306 	and.w	r3, r3, #6
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	bf14      	ite	ne
 8008dce:	2500      	movne	r5, #0
 8008dd0:	6833      	ldreq	r3, [r6, #0]
 8008dd2:	f04f 0600 	mov.w	r6, #0
 8008dd6:	bf08      	it	eq
 8008dd8:	68e5      	ldreq	r5, [r4, #12]
 8008dda:	f104 041a 	add.w	r4, r4, #26
 8008dde:	bf08      	it	eq
 8008de0:	1aed      	subeq	r5, r5, r3
 8008de2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008de6:	bf08      	it	eq
 8008de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dec:	4293      	cmp	r3, r2
 8008dee:	bfc4      	itt	gt
 8008df0:	1a9b      	subgt	r3, r3, r2
 8008df2:	18ed      	addgt	r5, r5, r3
 8008df4:	42b5      	cmp	r5, r6
 8008df6:	d11a      	bne.n	8008e2e <_printf_common+0xd2>
 8008df8:	2000      	movs	r0, #0
 8008dfa:	e008      	b.n	8008e0e <_printf_common+0xb2>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	4652      	mov	r2, sl
 8008e00:	4649      	mov	r1, r9
 8008e02:	4638      	mov	r0, r7
 8008e04:	47c0      	blx	r8
 8008e06:	3001      	adds	r0, #1
 8008e08:	d103      	bne.n	8008e12 <_printf_common+0xb6>
 8008e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e12:	3501      	adds	r5, #1
 8008e14:	e7c1      	b.n	8008d9a <_printf_common+0x3e>
 8008e16:	2030      	movs	r0, #48	; 0x30
 8008e18:	18e1      	adds	r1, r4, r3
 8008e1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e24:	4422      	add	r2, r4
 8008e26:	3302      	adds	r3, #2
 8008e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e2c:	e7c2      	b.n	8008db4 <_printf_common+0x58>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4622      	mov	r2, r4
 8008e32:	4649      	mov	r1, r9
 8008e34:	4638      	mov	r0, r7
 8008e36:	47c0      	blx	r8
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d0e6      	beq.n	8008e0a <_printf_common+0xae>
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7d9      	b.n	8008df4 <_printf_common+0x98>

08008e40 <_printf_i>:
 8008e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e44:	7e0f      	ldrb	r7, [r1, #24]
 8008e46:	4691      	mov	r9, r2
 8008e48:	2f78      	cmp	r7, #120	; 0x78
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	469a      	mov	sl, r3
 8008e50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e56:	d807      	bhi.n	8008e68 <_printf_i+0x28>
 8008e58:	2f62      	cmp	r7, #98	; 0x62
 8008e5a:	d80a      	bhi.n	8008e72 <_printf_i+0x32>
 8008e5c:	2f00      	cmp	r7, #0
 8008e5e:	f000 80d5 	beq.w	800900c <_printf_i+0x1cc>
 8008e62:	2f58      	cmp	r7, #88	; 0x58
 8008e64:	f000 80c1 	beq.w	8008fea <_printf_i+0x1aa>
 8008e68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e70:	e03a      	b.n	8008ee8 <_printf_i+0xa8>
 8008e72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e76:	2b15      	cmp	r3, #21
 8008e78:	d8f6      	bhi.n	8008e68 <_printf_i+0x28>
 8008e7a:	a101      	add	r1, pc, #4	; (adr r1, 8008e80 <_printf_i+0x40>)
 8008e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e80:	08008ed9 	.word	0x08008ed9
 8008e84:	08008eed 	.word	0x08008eed
 8008e88:	08008e69 	.word	0x08008e69
 8008e8c:	08008e69 	.word	0x08008e69
 8008e90:	08008e69 	.word	0x08008e69
 8008e94:	08008e69 	.word	0x08008e69
 8008e98:	08008eed 	.word	0x08008eed
 8008e9c:	08008e69 	.word	0x08008e69
 8008ea0:	08008e69 	.word	0x08008e69
 8008ea4:	08008e69 	.word	0x08008e69
 8008ea8:	08008e69 	.word	0x08008e69
 8008eac:	08008ff3 	.word	0x08008ff3
 8008eb0:	08008f19 	.word	0x08008f19
 8008eb4:	08008fad 	.word	0x08008fad
 8008eb8:	08008e69 	.word	0x08008e69
 8008ebc:	08008e69 	.word	0x08008e69
 8008ec0:	08009015 	.word	0x08009015
 8008ec4:	08008e69 	.word	0x08008e69
 8008ec8:	08008f19 	.word	0x08008f19
 8008ecc:	08008e69 	.word	0x08008e69
 8008ed0:	08008e69 	.word	0x08008e69
 8008ed4:	08008fb5 	.word	0x08008fb5
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	1d1a      	adds	r2, r3, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	602a      	str	r2, [r5, #0]
 8008ee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e0a0      	b.n	800902e <_printf_i+0x1ee>
 8008eec:	6820      	ldr	r0, [r4, #0]
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	0607      	lsls	r7, r0, #24
 8008ef2:	f103 0104 	add.w	r1, r3, #4
 8008ef6:	6029      	str	r1, [r5, #0]
 8008ef8:	d501      	bpl.n	8008efe <_printf_i+0xbe>
 8008efa:	681e      	ldr	r6, [r3, #0]
 8008efc:	e003      	b.n	8008f06 <_printf_i+0xc6>
 8008efe:	0646      	lsls	r6, r0, #25
 8008f00:	d5fb      	bpl.n	8008efa <_printf_i+0xba>
 8008f02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f06:	2e00      	cmp	r6, #0
 8008f08:	da03      	bge.n	8008f12 <_printf_i+0xd2>
 8008f0a:	232d      	movs	r3, #45	; 0x2d
 8008f0c:	4276      	negs	r6, r6
 8008f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f12:	230a      	movs	r3, #10
 8008f14:	4859      	ldr	r0, [pc, #356]	; (800907c <_printf_i+0x23c>)
 8008f16:	e012      	b.n	8008f3e <_printf_i+0xfe>
 8008f18:	682b      	ldr	r3, [r5, #0]
 8008f1a:	6820      	ldr	r0, [r4, #0]
 8008f1c:	1d19      	adds	r1, r3, #4
 8008f1e:	6029      	str	r1, [r5, #0]
 8008f20:	0605      	lsls	r5, r0, #24
 8008f22:	d501      	bpl.n	8008f28 <_printf_i+0xe8>
 8008f24:	681e      	ldr	r6, [r3, #0]
 8008f26:	e002      	b.n	8008f2e <_printf_i+0xee>
 8008f28:	0641      	lsls	r1, r0, #25
 8008f2a:	d5fb      	bpl.n	8008f24 <_printf_i+0xe4>
 8008f2c:	881e      	ldrh	r6, [r3, #0]
 8008f2e:	2f6f      	cmp	r7, #111	; 0x6f
 8008f30:	bf0c      	ite	eq
 8008f32:	2308      	moveq	r3, #8
 8008f34:	230a      	movne	r3, #10
 8008f36:	4851      	ldr	r0, [pc, #324]	; (800907c <_printf_i+0x23c>)
 8008f38:	2100      	movs	r1, #0
 8008f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f3e:	6865      	ldr	r5, [r4, #4]
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	bfa8      	it	ge
 8008f44:	6821      	ldrge	r1, [r4, #0]
 8008f46:	60a5      	str	r5, [r4, #8]
 8008f48:	bfa4      	itt	ge
 8008f4a:	f021 0104 	bicge.w	r1, r1, #4
 8008f4e:	6021      	strge	r1, [r4, #0]
 8008f50:	b90e      	cbnz	r6, 8008f56 <_printf_i+0x116>
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	d04b      	beq.n	8008fee <_printf_i+0x1ae>
 8008f56:	4615      	mov	r5, r2
 8008f58:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f5c:	fb03 6711 	mls	r7, r3, r1, r6
 8008f60:	5dc7      	ldrb	r7, [r0, r7]
 8008f62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f66:	4637      	mov	r7, r6
 8008f68:	42bb      	cmp	r3, r7
 8008f6a:	460e      	mov	r6, r1
 8008f6c:	d9f4      	bls.n	8008f58 <_printf_i+0x118>
 8008f6e:	2b08      	cmp	r3, #8
 8008f70:	d10b      	bne.n	8008f8a <_printf_i+0x14a>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	07de      	lsls	r6, r3, #31
 8008f76:	d508      	bpl.n	8008f8a <_printf_i+0x14a>
 8008f78:	6923      	ldr	r3, [r4, #16]
 8008f7a:	6861      	ldr	r1, [r4, #4]
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	bfde      	ittt	le
 8008f80:	2330      	movle	r3, #48	; 0x30
 8008f82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f8a:	1b52      	subs	r2, r2, r5
 8008f8c:	6122      	str	r2, [r4, #16]
 8008f8e:	464b      	mov	r3, r9
 8008f90:	4621      	mov	r1, r4
 8008f92:	4640      	mov	r0, r8
 8008f94:	f8cd a000 	str.w	sl, [sp]
 8008f98:	aa03      	add	r2, sp, #12
 8008f9a:	f7ff fedf 	bl	8008d5c <_printf_common>
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d14a      	bne.n	8009038 <_printf_i+0x1f8>
 8008fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa6:	b004      	add	sp, #16
 8008fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	f043 0320 	orr.w	r3, r3, #32
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	2778      	movs	r7, #120	; 0x78
 8008fb6:	4832      	ldr	r0, [pc, #200]	; (8009080 <_printf_i+0x240>)
 8008fb8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	6829      	ldr	r1, [r5, #0]
 8008fc0:	061f      	lsls	r7, r3, #24
 8008fc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fc6:	d402      	bmi.n	8008fce <_printf_i+0x18e>
 8008fc8:	065f      	lsls	r7, r3, #25
 8008fca:	bf48      	it	mi
 8008fcc:	b2b6      	uxthmi	r6, r6
 8008fce:	07df      	lsls	r7, r3, #31
 8008fd0:	bf48      	it	mi
 8008fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fd6:	6029      	str	r1, [r5, #0]
 8008fd8:	bf48      	it	mi
 8008fda:	6023      	strmi	r3, [r4, #0]
 8008fdc:	b91e      	cbnz	r6, 8008fe6 <_printf_i+0x1a6>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	f023 0320 	bic.w	r3, r3, #32
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	2310      	movs	r3, #16
 8008fe8:	e7a6      	b.n	8008f38 <_printf_i+0xf8>
 8008fea:	4824      	ldr	r0, [pc, #144]	; (800907c <_printf_i+0x23c>)
 8008fec:	e7e4      	b.n	8008fb8 <_printf_i+0x178>
 8008fee:	4615      	mov	r5, r2
 8008ff0:	e7bd      	b.n	8008f6e <_printf_i+0x12e>
 8008ff2:	682b      	ldr	r3, [r5, #0]
 8008ff4:	6826      	ldr	r6, [r4, #0]
 8008ff6:	1d18      	adds	r0, r3, #4
 8008ff8:	6961      	ldr	r1, [r4, #20]
 8008ffa:	6028      	str	r0, [r5, #0]
 8008ffc:	0635      	lsls	r5, r6, #24
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	d501      	bpl.n	8009006 <_printf_i+0x1c6>
 8009002:	6019      	str	r1, [r3, #0]
 8009004:	e002      	b.n	800900c <_printf_i+0x1cc>
 8009006:	0670      	lsls	r0, r6, #25
 8009008:	d5fb      	bpl.n	8009002 <_printf_i+0x1c2>
 800900a:	8019      	strh	r1, [r3, #0]
 800900c:	2300      	movs	r3, #0
 800900e:	4615      	mov	r5, r2
 8009010:	6123      	str	r3, [r4, #16]
 8009012:	e7bc      	b.n	8008f8e <_printf_i+0x14e>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	2100      	movs	r1, #0
 8009018:	1d1a      	adds	r2, r3, #4
 800901a:	602a      	str	r2, [r5, #0]
 800901c:	681d      	ldr	r5, [r3, #0]
 800901e:	6862      	ldr	r2, [r4, #4]
 8009020:	4628      	mov	r0, r5
 8009022:	f000 fab5 	bl	8009590 <memchr>
 8009026:	b108      	cbz	r0, 800902c <_printf_i+0x1ec>
 8009028:	1b40      	subs	r0, r0, r5
 800902a:	6060      	str	r0, [r4, #4]
 800902c:	6863      	ldr	r3, [r4, #4]
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	2300      	movs	r3, #0
 8009032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009036:	e7aa      	b.n	8008f8e <_printf_i+0x14e>
 8009038:	462a      	mov	r2, r5
 800903a:	4649      	mov	r1, r9
 800903c:	4640      	mov	r0, r8
 800903e:	6923      	ldr	r3, [r4, #16]
 8009040:	47d0      	blx	sl
 8009042:	3001      	adds	r0, #1
 8009044:	d0ad      	beq.n	8008fa2 <_printf_i+0x162>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	079b      	lsls	r3, r3, #30
 800904a:	d413      	bmi.n	8009074 <_printf_i+0x234>
 800904c:	68e0      	ldr	r0, [r4, #12]
 800904e:	9b03      	ldr	r3, [sp, #12]
 8009050:	4298      	cmp	r0, r3
 8009052:	bfb8      	it	lt
 8009054:	4618      	movlt	r0, r3
 8009056:	e7a6      	b.n	8008fa6 <_printf_i+0x166>
 8009058:	2301      	movs	r3, #1
 800905a:	4632      	mov	r2, r6
 800905c:	4649      	mov	r1, r9
 800905e:	4640      	mov	r0, r8
 8009060:	47d0      	blx	sl
 8009062:	3001      	adds	r0, #1
 8009064:	d09d      	beq.n	8008fa2 <_printf_i+0x162>
 8009066:	3501      	adds	r5, #1
 8009068:	68e3      	ldr	r3, [r4, #12]
 800906a:	9903      	ldr	r1, [sp, #12]
 800906c:	1a5b      	subs	r3, r3, r1
 800906e:	42ab      	cmp	r3, r5
 8009070:	dcf2      	bgt.n	8009058 <_printf_i+0x218>
 8009072:	e7eb      	b.n	800904c <_printf_i+0x20c>
 8009074:	2500      	movs	r5, #0
 8009076:	f104 0619 	add.w	r6, r4, #25
 800907a:	e7f5      	b.n	8009068 <_printf_i+0x228>
 800907c:	0800c22b 	.word	0x0800c22b
 8009080:	0800c23c 	.word	0x0800c23c

08009084 <std>:
 8009084:	2300      	movs	r3, #0
 8009086:	b510      	push	{r4, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	e9c0 3300 	strd	r3, r3, [r0]
 800908e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009092:	6083      	str	r3, [r0, #8]
 8009094:	8181      	strh	r1, [r0, #12]
 8009096:	6643      	str	r3, [r0, #100]	; 0x64
 8009098:	81c2      	strh	r2, [r0, #14]
 800909a:	6183      	str	r3, [r0, #24]
 800909c:	4619      	mov	r1, r3
 800909e:	2208      	movs	r2, #8
 80090a0:	305c      	adds	r0, #92	; 0x5c
 80090a2:	f000 f9e5 	bl	8009470 <memset>
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <std+0x38>)
 80090a8:	6224      	str	r4, [r4, #32]
 80090aa:	6263      	str	r3, [r4, #36]	; 0x24
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <std+0x3c>)
 80090ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80090b0:	4b04      	ldr	r3, [pc, #16]	; (80090c4 <std+0x40>)
 80090b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090b4:	4b04      	ldr	r3, [pc, #16]	; (80090c8 <std+0x44>)
 80090b6:	6323      	str	r3, [r4, #48]	; 0x30
 80090b8:	bd10      	pop	{r4, pc}
 80090ba:	bf00      	nop
 80090bc:	080092c1 	.word	0x080092c1
 80090c0:	080092e3 	.word	0x080092e3
 80090c4:	0800931b 	.word	0x0800931b
 80090c8:	0800933f 	.word	0x0800933f

080090cc <stdio_exit_handler>:
 80090cc:	4a02      	ldr	r2, [pc, #8]	; (80090d8 <stdio_exit_handler+0xc>)
 80090ce:	4903      	ldr	r1, [pc, #12]	; (80090dc <stdio_exit_handler+0x10>)
 80090d0:	4803      	ldr	r0, [pc, #12]	; (80090e0 <stdio_exit_handler+0x14>)
 80090d2:	f000 b869 	b.w	80091a8 <_fwalk_sglue>
 80090d6:	bf00      	nop
 80090d8:	2000000c 	.word	0x2000000c
 80090dc:	0800b859 	.word	0x0800b859
 80090e0:	20000184 	.word	0x20000184

080090e4 <cleanup_stdio>:
 80090e4:	6841      	ldr	r1, [r0, #4]
 80090e6:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <cleanup_stdio+0x34>)
 80090e8:	b510      	push	{r4, lr}
 80090ea:	4299      	cmp	r1, r3
 80090ec:	4604      	mov	r4, r0
 80090ee:	d001      	beq.n	80090f4 <cleanup_stdio+0x10>
 80090f0:	f002 fbb2 	bl	800b858 <_fflush_r>
 80090f4:	68a1      	ldr	r1, [r4, #8]
 80090f6:	4b09      	ldr	r3, [pc, #36]	; (800911c <cleanup_stdio+0x38>)
 80090f8:	4299      	cmp	r1, r3
 80090fa:	d002      	beq.n	8009102 <cleanup_stdio+0x1e>
 80090fc:	4620      	mov	r0, r4
 80090fe:	f002 fbab 	bl	800b858 <_fflush_r>
 8009102:	68e1      	ldr	r1, [r4, #12]
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <cleanup_stdio+0x3c>)
 8009106:	4299      	cmp	r1, r3
 8009108:	d004      	beq.n	8009114 <cleanup_stdio+0x30>
 800910a:	4620      	mov	r0, r4
 800910c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009110:	f002 bba2 	b.w	800b858 <_fflush_r>
 8009114:	bd10      	pop	{r4, pc}
 8009116:	bf00      	nop
 8009118:	200004c0 	.word	0x200004c0
 800911c:	20000528 	.word	0x20000528
 8009120:	20000590 	.word	0x20000590

08009124 <global_stdio_init.part.0>:
 8009124:	b510      	push	{r4, lr}
 8009126:	4b0b      	ldr	r3, [pc, #44]	; (8009154 <global_stdio_init.part.0+0x30>)
 8009128:	4c0b      	ldr	r4, [pc, #44]	; (8009158 <global_stdio_init.part.0+0x34>)
 800912a:	4a0c      	ldr	r2, [pc, #48]	; (800915c <global_stdio_init.part.0+0x38>)
 800912c:	4620      	mov	r0, r4
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	2104      	movs	r1, #4
 8009132:	2200      	movs	r2, #0
 8009134:	f7ff ffa6 	bl	8009084 <std>
 8009138:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800913c:	2201      	movs	r2, #1
 800913e:	2109      	movs	r1, #9
 8009140:	f7ff ffa0 	bl	8009084 <std>
 8009144:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009148:	2202      	movs	r2, #2
 800914a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800914e:	2112      	movs	r1, #18
 8009150:	f7ff bf98 	b.w	8009084 <std>
 8009154:	200005f8 	.word	0x200005f8
 8009158:	200004c0 	.word	0x200004c0
 800915c:	080090cd 	.word	0x080090cd

08009160 <__sfp_lock_acquire>:
 8009160:	4801      	ldr	r0, [pc, #4]	; (8009168 <__sfp_lock_acquire+0x8>)
 8009162:	f000 ba13 	b.w	800958c <__retarget_lock_acquire_recursive>
 8009166:	bf00      	nop
 8009168:	20000601 	.word	0x20000601

0800916c <__sfp_lock_release>:
 800916c:	4801      	ldr	r0, [pc, #4]	; (8009174 <__sfp_lock_release+0x8>)
 800916e:	f000 ba0e 	b.w	800958e <__retarget_lock_release_recursive>
 8009172:	bf00      	nop
 8009174:	20000601 	.word	0x20000601

08009178 <__sinit>:
 8009178:	b510      	push	{r4, lr}
 800917a:	4604      	mov	r4, r0
 800917c:	f7ff fff0 	bl	8009160 <__sfp_lock_acquire>
 8009180:	6a23      	ldr	r3, [r4, #32]
 8009182:	b11b      	cbz	r3, 800918c <__sinit+0x14>
 8009184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009188:	f7ff bff0 	b.w	800916c <__sfp_lock_release>
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <__sinit+0x28>)
 800918e:	6223      	str	r3, [r4, #32]
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <__sinit+0x2c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1f5      	bne.n	8009184 <__sinit+0xc>
 8009198:	f7ff ffc4 	bl	8009124 <global_stdio_init.part.0>
 800919c:	e7f2      	b.n	8009184 <__sinit+0xc>
 800919e:	bf00      	nop
 80091a0:	080090e5 	.word	0x080090e5
 80091a4:	200005f8 	.word	0x200005f8

080091a8 <_fwalk_sglue>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	4607      	mov	r7, r0
 80091ae:	4688      	mov	r8, r1
 80091b0:	4614      	mov	r4, r2
 80091b2:	2600      	movs	r6, #0
 80091b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091b8:	f1b9 0901 	subs.w	r9, r9, #1
 80091bc:	d505      	bpl.n	80091ca <_fwalk_sglue+0x22>
 80091be:	6824      	ldr	r4, [r4, #0]
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	d1f7      	bne.n	80091b4 <_fwalk_sglue+0xc>
 80091c4:	4630      	mov	r0, r6
 80091c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d907      	bls.n	80091e0 <_fwalk_sglue+0x38>
 80091d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091d4:	3301      	adds	r3, #1
 80091d6:	d003      	beq.n	80091e0 <_fwalk_sglue+0x38>
 80091d8:	4629      	mov	r1, r5
 80091da:	4638      	mov	r0, r7
 80091dc:	47c0      	blx	r8
 80091de:	4306      	orrs	r6, r0
 80091e0:	3568      	adds	r5, #104	; 0x68
 80091e2:	e7e9      	b.n	80091b8 <_fwalk_sglue+0x10>

080091e4 <iprintf>:
 80091e4:	b40f      	push	{r0, r1, r2, r3}
 80091e6:	b507      	push	{r0, r1, r2, lr}
 80091e8:	4906      	ldr	r1, [pc, #24]	; (8009204 <iprintf+0x20>)
 80091ea:	ab04      	add	r3, sp, #16
 80091ec:	6808      	ldr	r0, [r1, #0]
 80091ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f2:	6881      	ldr	r1, [r0, #8]
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	f002 f993 	bl	800b520 <_vfiprintf_r>
 80091fa:	b003      	add	sp, #12
 80091fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009200:	b004      	add	sp, #16
 8009202:	4770      	bx	lr
 8009204:	200001d0 	.word	0x200001d0

08009208 <_puts_r>:
 8009208:	6a03      	ldr	r3, [r0, #32]
 800920a:	b570      	push	{r4, r5, r6, lr}
 800920c:	4605      	mov	r5, r0
 800920e:	460e      	mov	r6, r1
 8009210:	6884      	ldr	r4, [r0, #8]
 8009212:	b90b      	cbnz	r3, 8009218 <_puts_r+0x10>
 8009214:	f7ff ffb0 	bl	8009178 <__sinit>
 8009218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800921a:	07db      	lsls	r3, r3, #31
 800921c:	d405      	bmi.n	800922a <_puts_r+0x22>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	0598      	lsls	r0, r3, #22
 8009222:	d402      	bmi.n	800922a <_puts_r+0x22>
 8009224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009226:	f000 f9b1 	bl	800958c <__retarget_lock_acquire_recursive>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	0719      	lsls	r1, r3, #28
 800922e:	d513      	bpl.n	8009258 <_puts_r+0x50>
 8009230:	6923      	ldr	r3, [r4, #16]
 8009232:	b18b      	cbz	r3, 8009258 <_puts_r+0x50>
 8009234:	3e01      	subs	r6, #1
 8009236:	68a3      	ldr	r3, [r4, #8]
 8009238:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800923c:	3b01      	subs	r3, #1
 800923e:	60a3      	str	r3, [r4, #8]
 8009240:	b9e9      	cbnz	r1, 800927e <_puts_r+0x76>
 8009242:	2b00      	cmp	r3, #0
 8009244:	da2e      	bge.n	80092a4 <_puts_r+0x9c>
 8009246:	4622      	mov	r2, r4
 8009248:	210a      	movs	r1, #10
 800924a:	4628      	mov	r0, r5
 800924c:	f000 f87b 	bl	8009346 <__swbuf_r>
 8009250:	3001      	adds	r0, #1
 8009252:	d007      	beq.n	8009264 <_puts_r+0x5c>
 8009254:	250a      	movs	r5, #10
 8009256:	e007      	b.n	8009268 <_puts_r+0x60>
 8009258:	4621      	mov	r1, r4
 800925a:	4628      	mov	r0, r5
 800925c:	f000 f8b0 	bl	80093c0 <__swsetup_r>
 8009260:	2800      	cmp	r0, #0
 8009262:	d0e7      	beq.n	8009234 <_puts_r+0x2c>
 8009264:	f04f 35ff 	mov.w	r5, #4294967295
 8009268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800926a:	07da      	lsls	r2, r3, #31
 800926c:	d405      	bmi.n	800927a <_puts_r+0x72>
 800926e:	89a3      	ldrh	r3, [r4, #12]
 8009270:	059b      	lsls	r3, r3, #22
 8009272:	d402      	bmi.n	800927a <_puts_r+0x72>
 8009274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009276:	f000 f98a 	bl	800958e <__retarget_lock_release_recursive>
 800927a:	4628      	mov	r0, r5
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	2b00      	cmp	r3, #0
 8009280:	da04      	bge.n	800928c <_puts_r+0x84>
 8009282:	69a2      	ldr	r2, [r4, #24]
 8009284:	429a      	cmp	r2, r3
 8009286:	dc06      	bgt.n	8009296 <_puts_r+0x8e>
 8009288:	290a      	cmp	r1, #10
 800928a:	d004      	beq.n	8009296 <_puts_r+0x8e>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	6022      	str	r2, [r4, #0]
 8009292:	7019      	strb	r1, [r3, #0]
 8009294:	e7cf      	b.n	8009236 <_puts_r+0x2e>
 8009296:	4622      	mov	r2, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f000 f854 	bl	8009346 <__swbuf_r>
 800929e:	3001      	adds	r0, #1
 80092a0:	d1c9      	bne.n	8009236 <_puts_r+0x2e>
 80092a2:	e7df      	b.n	8009264 <_puts_r+0x5c>
 80092a4:	250a      	movs	r5, #10
 80092a6:	6823      	ldr	r3, [r4, #0]
 80092a8:	1c5a      	adds	r2, r3, #1
 80092aa:	6022      	str	r2, [r4, #0]
 80092ac:	701d      	strb	r5, [r3, #0]
 80092ae:	e7db      	b.n	8009268 <_puts_r+0x60>

080092b0 <puts>:
 80092b0:	4b02      	ldr	r3, [pc, #8]	; (80092bc <puts+0xc>)
 80092b2:	4601      	mov	r1, r0
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	f7ff bfa7 	b.w	8009208 <_puts_r>
 80092ba:	bf00      	nop
 80092bc:	200001d0 	.word	0x200001d0

080092c0 <__sread>:
 80092c0:	b510      	push	{r4, lr}
 80092c2:	460c      	mov	r4, r1
 80092c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092c8:	f000 f912 	bl	80094f0 <_read_r>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	bfab      	itete	ge
 80092d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092d2:	89a3      	ldrhlt	r3, [r4, #12]
 80092d4:	181b      	addge	r3, r3, r0
 80092d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092da:	bfac      	ite	ge
 80092dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80092de:	81a3      	strhlt	r3, [r4, #12]
 80092e0:	bd10      	pop	{r4, pc}

080092e2 <__swrite>:
 80092e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e6:	461f      	mov	r7, r3
 80092e8:	898b      	ldrh	r3, [r1, #12]
 80092ea:	4605      	mov	r5, r0
 80092ec:	05db      	lsls	r3, r3, #23
 80092ee:	460c      	mov	r4, r1
 80092f0:	4616      	mov	r6, r2
 80092f2:	d505      	bpl.n	8009300 <__swrite+0x1e>
 80092f4:	2302      	movs	r3, #2
 80092f6:	2200      	movs	r2, #0
 80092f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fc:	f000 f8e6 	bl	80094cc <_lseek_r>
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	4632      	mov	r2, r6
 8009304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	4628      	mov	r0, r5
 800930c:	463b      	mov	r3, r7
 800930e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009316:	f000 b8fd 	b.w	8009514 <_write_r>

0800931a <__sseek>:
 800931a:	b510      	push	{r4, lr}
 800931c:	460c      	mov	r4, r1
 800931e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009322:	f000 f8d3 	bl	80094cc <_lseek_r>
 8009326:	1c43      	adds	r3, r0, #1
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	bf15      	itete	ne
 800932c:	6560      	strne	r0, [r4, #84]	; 0x54
 800932e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009336:	81a3      	strheq	r3, [r4, #12]
 8009338:	bf18      	it	ne
 800933a:	81a3      	strhne	r3, [r4, #12]
 800933c:	bd10      	pop	{r4, pc}

0800933e <__sclose>:
 800933e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009342:	f000 b8b3 	b.w	80094ac <_close_r>

08009346 <__swbuf_r>:
 8009346:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009348:	460e      	mov	r6, r1
 800934a:	4614      	mov	r4, r2
 800934c:	4605      	mov	r5, r0
 800934e:	b118      	cbz	r0, 8009358 <__swbuf_r+0x12>
 8009350:	6a03      	ldr	r3, [r0, #32]
 8009352:	b90b      	cbnz	r3, 8009358 <__swbuf_r+0x12>
 8009354:	f7ff ff10 	bl	8009178 <__sinit>
 8009358:	69a3      	ldr	r3, [r4, #24]
 800935a:	60a3      	str	r3, [r4, #8]
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	071a      	lsls	r2, r3, #28
 8009360:	d525      	bpl.n	80093ae <__swbuf_r+0x68>
 8009362:	6923      	ldr	r3, [r4, #16]
 8009364:	b31b      	cbz	r3, 80093ae <__swbuf_r+0x68>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	6922      	ldr	r2, [r4, #16]
 800936a:	b2f6      	uxtb	r6, r6
 800936c:	1a98      	subs	r0, r3, r2
 800936e:	6963      	ldr	r3, [r4, #20]
 8009370:	4637      	mov	r7, r6
 8009372:	4283      	cmp	r3, r0
 8009374:	dc04      	bgt.n	8009380 <__swbuf_r+0x3a>
 8009376:	4621      	mov	r1, r4
 8009378:	4628      	mov	r0, r5
 800937a:	f002 fa6d 	bl	800b858 <_fflush_r>
 800937e:	b9e0      	cbnz	r0, 80093ba <__swbuf_r+0x74>
 8009380:	68a3      	ldr	r3, [r4, #8]
 8009382:	3b01      	subs	r3, #1
 8009384:	60a3      	str	r3, [r4, #8]
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	6022      	str	r2, [r4, #0]
 800938c:	701e      	strb	r6, [r3, #0]
 800938e:	6962      	ldr	r2, [r4, #20]
 8009390:	1c43      	adds	r3, r0, #1
 8009392:	429a      	cmp	r2, r3
 8009394:	d004      	beq.n	80093a0 <__swbuf_r+0x5a>
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	07db      	lsls	r3, r3, #31
 800939a:	d506      	bpl.n	80093aa <__swbuf_r+0x64>
 800939c:	2e0a      	cmp	r6, #10
 800939e:	d104      	bne.n	80093aa <__swbuf_r+0x64>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	f002 fa58 	bl	800b858 <_fflush_r>
 80093a8:	b938      	cbnz	r0, 80093ba <__swbuf_r+0x74>
 80093aa:	4638      	mov	r0, r7
 80093ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093ae:	4621      	mov	r1, r4
 80093b0:	4628      	mov	r0, r5
 80093b2:	f000 f805 	bl	80093c0 <__swsetup_r>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d0d5      	beq.n	8009366 <__swbuf_r+0x20>
 80093ba:	f04f 37ff 	mov.w	r7, #4294967295
 80093be:	e7f4      	b.n	80093aa <__swbuf_r+0x64>

080093c0 <__swsetup_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4b2a      	ldr	r3, [pc, #168]	; (800946c <__swsetup_r+0xac>)
 80093c4:	4605      	mov	r5, r0
 80093c6:	6818      	ldr	r0, [r3, #0]
 80093c8:	460c      	mov	r4, r1
 80093ca:	b118      	cbz	r0, 80093d4 <__swsetup_r+0x14>
 80093cc:	6a03      	ldr	r3, [r0, #32]
 80093ce:	b90b      	cbnz	r3, 80093d4 <__swsetup_r+0x14>
 80093d0:	f7ff fed2 	bl	8009178 <__sinit>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093da:	0718      	lsls	r0, r3, #28
 80093dc:	d422      	bmi.n	8009424 <__swsetup_r+0x64>
 80093de:	06d9      	lsls	r1, r3, #27
 80093e0:	d407      	bmi.n	80093f2 <__swsetup_r+0x32>
 80093e2:	2309      	movs	r3, #9
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093ea:	f04f 30ff 	mov.w	r0, #4294967295
 80093ee:	81a3      	strh	r3, [r4, #12]
 80093f0:	e034      	b.n	800945c <__swsetup_r+0x9c>
 80093f2:	0758      	lsls	r0, r3, #29
 80093f4:	d512      	bpl.n	800941c <__swsetup_r+0x5c>
 80093f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093f8:	b141      	cbz	r1, 800940c <__swsetup_r+0x4c>
 80093fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093fe:	4299      	cmp	r1, r3
 8009400:	d002      	beq.n	8009408 <__swsetup_r+0x48>
 8009402:	4628      	mov	r0, r5
 8009404:	f000 ff54 	bl	800a2b0 <_free_r>
 8009408:	2300      	movs	r3, #0
 800940a:	6363      	str	r3, [r4, #52]	; 0x34
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009412:	81a3      	strh	r3, [r4, #12]
 8009414:	2300      	movs	r3, #0
 8009416:	6063      	str	r3, [r4, #4]
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	f043 0308 	orr.w	r3, r3, #8
 8009422:	81a3      	strh	r3, [r4, #12]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	b94b      	cbnz	r3, 800943c <__swsetup_r+0x7c>
 8009428:	89a3      	ldrh	r3, [r4, #12]
 800942a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800942e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009432:	d003      	beq.n	800943c <__swsetup_r+0x7c>
 8009434:	4621      	mov	r1, r4
 8009436:	4628      	mov	r0, r5
 8009438:	f002 fa5b 	bl	800b8f2 <__smakebuf_r>
 800943c:	89a0      	ldrh	r0, [r4, #12]
 800943e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009442:	f010 0301 	ands.w	r3, r0, #1
 8009446:	d00a      	beq.n	800945e <__swsetup_r+0x9e>
 8009448:	2300      	movs	r3, #0
 800944a:	60a3      	str	r3, [r4, #8]
 800944c:	6963      	ldr	r3, [r4, #20]
 800944e:	425b      	negs	r3, r3
 8009450:	61a3      	str	r3, [r4, #24]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	b943      	cbnz	r3, 8009468 <__swsetup_r+0xa8>
 8009456:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800945a:	d1c4      	bne.n	80093e6 <__swsetup_r+0x26>
 800945c:	bd38      	pop	{r3, r4, r5, pc}
 800945e:	0781      	lsls	r1, r0, #30
 8009460:	bf58      	it	pl
 8009462:	6963      	ldrpl	r3, [r4, #20]
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	e7f4      	b.n	8009452 <__swsetup_r+0x92>
 8009468:	2000      	movs	r0, #0
 800946a:	e7f7      	b.n	800945c <__swsetup_r+0x9c>
 800946c:	200001d0 	.word	0x200001d0

08009470 <memset>:
 8009470:	4603      	mov	r3, r0
 8009472:	4402      	add	r2, r0
 8009474:	4293      	cmp	r3, r2
 8009476:	d100      	bne.n	800947a <memset+0xa>
 8009478:	4770      	bx	lr
 800947a:	f803 1b01 	strb.w	r1, [r3], #1
 800947e:	e7f9      	b.n	8009474 <memset+0x4>

08009480 <strncmp>:
 8009480:	b510      	push	{r4, lr}
 8009482:	b16a      	cbz	r2, 80094a0 <strncmp+0x20>
 8009484:	3901      	subs	r1, #1
 8009486:	1884      	adds	r4, r0, r2
 8009488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800948c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009490:	429a      	cmp	r2, r3
 8009492:	d103      	bne.n	800949c <strncmp+0x1c>
 8009494:	42a0      	cmp	r0, r4
 8009496:	d001      	beq.n	800949c <strncmp+0x1c>
 8009498:	2a00      	cmp	r2, #0
 800949a:	d1f5      	bne.n	8009488 <strncmp+0x8>
 800949c:	1ad0      	subs	r0, r2, r3
 800949e:	bd10      	pop	{r4, pc}
 80094a0:	4610      	mov	r0, r2
 80094a2:	e7fc      	b.n	800949e <strncmp+0x1e>

080094a4 <_localeconv_r>:
 80094a4:	4800      	ldr	r0, [pc, #0]	; (80094a8 <_localeconv_r+0x4>)
 80094a6:	4770      	bx	lr
 80094a8:	20000108 	.word	0x20000108

080094ac <_close_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	2300      	movs	r3, #0
 80094b0:	4d05      	ldr	r5, [pc, #20]	; (80094c8 <_close_r+0x1c>)
 80094b2:	4604      	mov	r4, r0
 80094b4:	4608      	mov	r0, r1
 80094b6:	602b      	str	r3, [r5, #0]
 80094b8:	f7f9 fbfa 	bl	8002cb0 <_close>
 80094bc:	1c43      	adds	r3, r0, #1
 80094be:	d102      	bne.n	80094c6 <_close_r+0x1a>
 80094c0:	682b      	ldr	r3, [r5, #0]
 80094c2:	b103      	cbz	r3, 80094c6 <_close_r+0x1a>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd38      	pop	{r3, r4, r5, pc}
 80094c8:	200005fc 	.word	0x200005fc

080094cc <_lseek_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4604      	mov	r4, r0
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	2200      	movs	r2, #0
 80094d6:	4d05      	ldr	r5, [pc, #20]	; (80094ec <_lseek_r+0x20>)
 80094d8:	602a      	str	r2, [r5, #0]
 80094da:	461a      	mov	r2, r3
 80094dc:	f7f9 fc0c 	bl	8002cf8 <_lseek>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_lseek_r+0x1e>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_lseek_r+0x1e>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	200005fc 	.word	0x200005fc

080094f0 <_read_r>:
 80094f0:	b538      	push	{r3, r4, r5, lr}
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	4611      	mov	r1, r2
 80094f8:	2200      	movs	r2, #0
 80094fa:	4d05      	ldr	r5, [pc, #20]	; (8009510 <_read_r+0x20>)
 80094fc:	602a      	str	r2, [r5, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	f7f9 fb9d 	bl	8002c3e <_read>
 8009504:	1c43      	adds	r3, r0, #1
 8009506:	d102      	bne.n	800950e <_read_r+0x1e>
 8009508:	682b      	ldr	r3, [r5, #0]
 800950a:	b103      	cbz	r3, 800950e <_read_r+0x1e>
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	bd38      	pop	{r3, r4, r5, pc}
 8009510:	200005fc 	.word	0x200005fc

08009514 <_write_r>:
 8009514:	b538      	push	{r3, r4, r5, lr}
 8009516:	4604      	mov	r4, r0
 8009518:	4608      	mov	r0, r1
 800951a:	4611      	mov	r1, r2
 800951c:	2200      	movs	r2, #0
 800951e:	4d05      	ldr	r5, [pc, #20]	; (8009534 <_write_r+0x20>)
 8009520:	602a      	str	r2, [r5, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	f7f9 fba8 	bl	8002c78 <_write>
 8009528:	1c43      	adds	r3, r0, #1
 800952a:	d102      	bne.n	8009532 <_write_r+0x1e>
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	b103      	cbz	r3, 8009532 <_write_r+0x1e>
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	bd38      	pop	{r3, r4, r5, pc}
 8009534:	200005fc 	.word	0x200005fc

08009538 <__errno>:
 8009538:	4b01      	ldr	r3, [pc, #4]	; (8009540 <__errno+0x8>)
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	200001d0 	.word	0x200001d0

08009544 <__libc_init_array>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	2600      	movs	r6, #0
 8009548:	4d0c      	ldr	r5, [pc, #48]	; (800957c <__libc_init_array+0x38>)
 800954a:	4c0d      	ldr	r4, [pc, #52]	; (8009580 <__libc_init_array+0x3c>)
 800954c:	1b64      	subs	r4, r4, r5
 800954e:	10a4      	asrs	r4, r4, #2
 8009550:	42a6      	cmp	r6, r4
 8009552:	d109      	bne.n	8009568 <__libc_init_array+0x24>
 8009554:	f002 fd2e 	bl	800bfb4 <_init>
 8009558:	2600      	movs	r6, #0
 800955a:	4d0a      	ldr	r5, [pc, #40]	; (8009584 <__libc_init_array+0x40>)
 800955c:	4c0a      	ldr	r4, [pc, #40]	; (8009588 <__libc_init_array+0x44>)
 800955e:	1b64      	subs	r4, r4, r5
 8009560:	10a4      	asrs	r4, r4, #2
 8009562:	42a6      	cmp	r6, r4
 8009564:	d105      	bne.n	8009572 <__libc_init_array+0x2e>
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	f855 3b04 	ldr.w	r3, [r5], #4
 800956c:	4798      	blx	r3
 800956e:	3601      	adds	r6, #1
 8009570:	e7ee      	b.n	8009550 <__libc_init_array+0xc>
 8009572:	f855 3b04 	ldr.w	r3, [r5], #4
 8009576:	4798      	blx	r3
 8009578:	3601      	adds	r6, #1
 800957a:	e7f2      	b.n	8009562 <__libc_init_array+0x1e>
 800957c:	0800c560 	.word	0x0800c560
 8009580:	0800c560 	.word	0x0800c560
 8009584:	0800c560 	.word	0x0800c560
 8009588:	0800c564 	.word	0x0800c564

0800958c <__retarget_lock_acquire_recursive>:
 800958c:	4770      	bx	lr

0800958e <__retarget_lock_release_recursive>:
 800958e:	4770      	bx	lr

08009590 <memchr>:
 8009590:	4603      	mov	r3, r0
 8009592:	b510      	push	{r4, lr}
 8009594:	b2c9      	uxtb	r1, r1
 8009596:	4402      	add	r2, r0
 8009598:	4293      	cmp	r3, r2
 800959a:	4618      	mov	r0, r3
 800959c:	d101      	bne.n	80095a2 <memchr+0x12>
 800959e:	2000      	movs	r0, #0
 80095a0:	e003      	b.n	80095aa <memchr+0x1a>
 80095a2:	7804      	ldrb	r4, [r0, #0]
 80095a4:	3301      	adds	r3, #1
 80095a6:	428c      	cmp	r4, r1
 80095a8:	d1f6      	bne.n	8009598 <memchr+0x8>
 80095aa:	bd10      	pop	{r4, pc}

080095ac <memcpy>:
 80095ac:	440a      	add	r2, r1
 80095ae:	4291      	cmp	r1, r2
 80095b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b4:	d100      	bne.n	80095b8 <memcpy+0xc>
 80095b6:	4770      	bx	lr
 80095b8:	b510      	push	{r4, lr}
 80095ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095be:	4291      	cmp	r1, r2
 80095c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095c4:	d1f9      	bne.n	80095ba <memcpy+0xe>
 80095c6:	bd10      	pop	{r4, pc}

080095c8 <nan>:
 80095c8:	2000      	movs	r0, #0
 80095ca:	4901      	ldr	r1, [pc, #4]	; (80095d0 <nan+0x8>)
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	7ff80000 	.word	0x7ff80000

080095d4 <quorem>:
 80095d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d8:	6903      	ldr	r3, [r0, #16]
 80095da:	690c      	ldr	r4, [r1, #16]
 80095dc:	4607      	mov	r7, r0
 80095de:	42a3      	cmp	r3, r4
 80095e0:	db7f      	blt.n	80096e2 <quorem+0x10e>
 80095e2:	3c01      	subs	r4, #1
 80095e4:	f100 0514 	add.w	r5, r0, #20
 80095e8:	f101 0814 	add.w	r8, r1, #20
 80095ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095fa:	3301      	adds	r3, #1
 80095fc:	429a      	cmp	r2, r3
 80095fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8009602:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009606:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800960a:	d331      	bcc.n	8009670 <quorem+0x9c>
 800960c:	f04f 0e00 	mov.w	lr, #0
 8009610:	4640      	mov	r0, r8
 8009612:	46ac      	mov	ip, r5
 8009614:	46f2      	mov	sl, lr
 8009616:	f850 2b04 	ldr.w	r2, [r0], #4
 800961a:	b293      	uxth	r3, r2
 800961c:	fb06 e303 	mla	r3, r6, r3, lr
 8009620:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009624:	0c1a      	lsrs	r2, r3, #16
 8009626:	b29b      	uxth	r3, r3
 8009628:	fb06 220e 	mla	r2, r6, lr, r2
 800962c:	ebaa 0303 	sub.w	r3, sl, r3
 8009630:	f8dc a000 	ldr.w	sl, [ip]
 8009634:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009638:	fa1f fa8a 	uxth.w	sl, sl
 800963c:	4453      	add	r3, sl
 800963e:	f8dc a000 	ldr.w	sl, [ip]
 8009642:	b292      	uxth	r2, r2
 8009644:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009648:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800964c:	b29b      	uxth	r3, r3
 800964e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009652:	4581      	cmp	r9, r0
 8009654:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009658:	f84c 3b04 	str.w	r3, [ip], #4
 800965c:	d2db      	bcs.n	8009616 <quorem+0x42>
 800965e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009662:	b92b      	cbnz	r3, 8009670 <quorem+0x9c>
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	3b04      	subs	r3, #4
 8009668:	429d      	cmp	r5, r3
 800966a:	461a      	mov	r2, r3
 800966c:	d32d      	bcc.n	80096ca <quorem+0xf6>
 800966e:	613c      	str	r4, [r7, #16]
 8009670:	4638      	mov	r0, r7
 8009672:	f001 fd49 	bl	800b108 <__mcmp>
 8009676:	2800      	cmp	r0, #0
 8009678:	db23      	blt.n	80096c2 <quorem+0xee>
 800967a:	4629      	mov	r1, r5
 800967c:	2000      	movs	r0, #0
 800967e:	3601      	adds	r6, #1
 8009680:	f858 2b04 	ldr.w	r2, [r8], #4
 8009684:	f8d1 c000 	ldr.w	ip, [r1]
 8009688:	b293      	uxth	r3, r2
 800968a:	1ac3      	subs	r3, r0, r3
 800968c:	0c12      	lsrs	r2, r2, #16
 800968e:	fa1f f08c 	uxth.w	r0, ip
 8009692:	4403      	add	r3, r0
 8009694:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800969c:	b29b      	uxth	r3, r3
 800969e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096a2:	45c1      	cmp	r9, r8
 80096a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096a8:	f841 3b04 	str.w	r3, [r1], #4
 80096ac:	d2e8      	bcs.n	8009680 <quorem+0xac>
 80096ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b6:	b922      	cbnz	r2, 80096c2 <quorem+0xee>
 80096b8:	3b04      	subs	r3, #4
 80096ba:	429d      	cmp	r5, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	d30a      	bcc.n	80096d6 <quorem+0x102>
 80096c0:	613c      	str	r4, [r7, #16]
 80096c2:	4630      	mov	r0, r6
 80096c4:	b003      	add	sp, #12
 80096c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ca:	6812      	ldr	r2, [r2, #0]
 80096cc:	3b04      	subs	r3, #4
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	d1cd      	bne.n	800966e <quorem+0x9a>
 80096d2:	3c01      	subs	r4, #1
 80096d4:	e7c8      	b.n	8009668 <quorem+0x94>
 80096d6:	6812      	ldr	r2, [r2, #0]
 80096d8:	3b04      	subs	r3, #4
 80096da:	2a00      	cmp	r2, #0
 80096dc:	d1f0      	bne.n	80096c0 <quorem+0xec>
 80096de:	3c01      	subs	r4, #1
 80096e0:	e7eb      	b.n	80096ba <quorem+0xe6>
 80096e2:	2000      	movs	r0, #0
 80096e4:	e7ee      	b.n	80096c4 <quorem+0xf0>
	...

080096e8 <_dtoa_r>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	4616      	mov	r6, r2
 80096ee:	461f      	mov	r7, r3
 80096f0:	69c4      	ldr	r4, [r0, #28]
 80096f2:	b099      	sub	sp, #100	; 0x64
 80096f4:	4605      	mov	r5, r0
 80096f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80096fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80096fe:	b974      	cbnz	r4, 800971e <_dtoa_r+0x36>
 8009700:	2010      	movs	r0, #16
 8009702:	f001 f977 	bl	800a9f4 <malloc>
 8009706:	4602      	mov	r2, r0
 8009708:	61e8      	str	r0, [r5, #28]
 800970a:	b920      	cbnz	r0, 8009716 <_dtoa_r+0x2e>
 800970c:	21ef      	movs	r1, #239	; 0xef
 800970e:	4bac      	ldr	r3, [pc, #688]	; (80099c0 <_dtoa_r+0x2d8>)
 8009710:	48ac      	ldr	r0, [pc, #688]	; (80099c4 <_dtoa_r+0x2dc>)
 8009712:	f002 f95d 	bl	800b9d0 <__assert_func>
 8009716:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800971a:	6004      	str	r4, [r0, #0]
 800971c:	60c4      	str	r4, [r0, #12]
 800971e:	69eb      	ldr	r3, [r5, #28]
 8009720:	6819      	ldr	r1, [r3, #0]
 8009722:	b151      	cbz	r1, 800973a <_dtoa_r+0x52>
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	2301      	movs	r3, #1
 8009728:	4093      	lsls	r3, r2
 800972a:	604a      	str	r2, [r1, #4]
 800972c:	608b      	str	r3, [r1, #8]
 800972e:	4628      	mov	r0, r5
 8009730:	f001 fa66 	bl	800ac00 <_Bfree>
 8009734:	2200      	movs	r2, #0
 8009736:	69eb      	ldr	r3, [r5, #28]
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	1e3b      	subs	r3, r7, #0
 800973c:	bfaf      	iteee	ge
 800973e:	2300      	movge	r3, #0
 8009740:	2201      	movlt	r2, #1
 8009742:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009746:	9305      	strlt	r3, [sp, #20]
 8009748:	bfa8      	it	ge
 800974a:	f8c8 3000 	strge.w	r3, [r8]
 800974e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009752:	4b9d      	ldr	r3, [pc, #628]	; (80099c8 <_dtoa_r+0x2e0>)
 8009754:	bfb8      	it	lt
 8009756:	f8c8 2000 	strlt.w	r2, [r8]
 800975a:	ea33 0309 	bics.w	r3, r3, r9
 800975e:	d119      	bne.n	8009794 <_dtoa_r+0xac>
 8009760:	f242 730f 	movw	r3, #9999	; 0x270f
 8009764:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800976c:	4333      	orrs	r3, r6
 800976e:	f000 8589 	beq.w	800a284 <_dtoa_r+0xb9c>
 8009772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009774:	b953      	cbnz	r3, 800978c <_dtoa_r+0xa4>
 8009776:	4b95      	ldr	r3, [pc, #596]	; (80099cc <_dtoa_r+0x2e4>)
 8009778:	e023      	b.n	80097c2 <_dtoa_r+0xda>
 800977a:	4b95      	ldr	r3, [pc, #596]	; (80099d0 <_dtoa_r+0x2e8>)
 800977c:	9303      	str	r3, [sp, #12]
 800977e:	3308      	adds	r3, #8
 8009780:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	9803      	ldr	r0, [sp, #12]
 8009786:	b019      	add	sp, #100	; 0x64
 8009788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978c:	4b8f      	ldr	r3, [pc, #572]	; (80099cc <_dtoa_r+0x2e4>)
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	3303      	adds	r3, #3
 8009792:	e7f5      	b.n	8009780 <_dtoa_r+0x98>
 8009794:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009798:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800979c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097a0:	2200      	movs	r2, #0
 80097a2:	2300      	movs	r3, #0
 80097a4:	f7f7 f90a 	bl	80009bc <__aeabi_dcmpeq>
 80097a8:	4680      	mov	r8, r0
 80097aa:	b160      	cbz	r0, 80097c6 <_dtoa_r+0xde>
 80097ac:	2301      	movs	r3, #1
 80097ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 8562 	beq.w	800a27e <_dtoa_r+0xb96>
 80097ba:	4b86      	ldr	r3, [pc, #536]	; (80099d4 <_dtoa_r+0x2ec>)
 80097bc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80097be:	6013      	str	r3, [r2, #0]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	9303      	str	r3, [sp, #12]
 80097c4:	e7de      	b.n	8009784 <_dtoa_r+0x9c>
 80097c6:	ab16      	add	r3, sp, #88	; 0x58
 80097c8:	9301      	str	r3, [sp, #4]
 80097ca:	ab17      	add	r3, sp, #92	; 0x5c
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	4628      	mov	r0, r5
 80097d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097d4:	f001 fda8 	bl	800b328 <__d2b>
 80097d8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80097dc:	4682      	mov	sl, r0
 80097de:	2c00      	cmp	r4, #0
 80097e0:	d07e      	beq.n	80098e0 <_dtoa_r+0x1f8>
 80097e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80097ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80097f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097f8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80097fc:	4619      	mov	r1, r3
 80097fe:	2200      	movs	r2, #0
 8009800:	4b75      	ldr	r3, [pc, #468]	; (80099d8 <_dtoa_r+0x2f0>)
 8009802:	f7f6 fcbb 	bl	800017c <__aeabi_dsub>
 8009806:	a368      	add	r3, pc, #416	; (adr r3, 80099a8 <_dtoa_r+0x2c0>)
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f7f6 fe6e 	bl	80004ec <__aeabi_dmul>
 8009810:	a367      	add	r3, pc, #412	; (adr r3, 80099b0 <_dtoa_r+0x2c8>)
 8009812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009816:	f7f6 fcb3 	bl	8000180 <__adddf3>
 800981a:	4606      	mov	r6, r0
 800981c:	4620      	mov	r0, r4
 800981e:	460f      	mov	r7, r1
 8009820:	f7f6 fdfa 	bl	8000418 <__aeabi_i2d>
 8009824:	a364      	add	r3, pc, #400	; (adr r3, 80099b8 <_dtoa_r+0x2d0>)
 8009826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982a:	f7f6 fe5f 	bl	80004ec <__aeabi_dmul>
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4630      	mov	r0, r6
 8009834:	4639      	mov	r1, r7
 8009836:	f7f6 fca3 	bl	8000180 <__adddf3>
 800983a:	4606      	mov	r6, r0
 800983c:	460f      	mov	r7, r1
 800983e:	f7f7 f905 	bl	8000a4c <__aeabi_d2iz>
 8009842:	2200      	movs	r2, #0
 8009844:	4683      	mov	fp, r0
 8009846:	2300      	movs	r3, #0
 8009848:	4630      	mov	r0, r6
 800984a:	4639      	mov	r1, r7
 800984c:	f7f7 f8c0 	bl	80009d0 <__aeabi_dcmplt>
 8009850:	b148      	cbz	r0, 8009866 <_dtoa_r+0x17e>
 8009852:	4658      	mov	r0, fp
 8009854:	f7f6 fde0 	bl	8000418 <__aeabi_i2d>
 8009858:	4632      	mov	r2, r6
 800985a:	463b      	mov	r3, r7
 800985c:	f7f7 f8ae 	bl	80009bc <__aeabi_dcmpeq>
 8009860:	b908      	cbnz	r0, 8009866 <_dtoa_r+0x17e>
 8009862:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009866:	f1bb 0f16 	cmp.w	fp, #22
 800986a:	d857      	bhi.n	800991c <_dtoa_r+0x234>
 800986c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009870:	4b5a      	ldr	r3, [pc, #360]	; (80099dc <_dtoa_r+0x2f4>)
 8009872:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	f7f7 f8a9 	bl	80009d0 <__aeabi_dcmplt>
 800987e:	2800      	cmp	r0, #0
 8009880:	d04e      	beq.n	8009920 <_dtoa_r+0x238>
 8009882:	2300      	movs	r3, #0
 8009884:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009888:	930f      	str	r3, [sp, #60]	; 0x3c
 800988a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800988c:	1b1b      	subs	r3, r3, r4
 800988e:	1e5a      	subs	r2, r3, #1
 8009890:	bf46      	itte	mi
 8009892:	f1c3 0901 	rsbmi	r9, r3, #1
 8009896:	2300      	movmi	r3, #0
 8009898:	f04f 0900 	movpl.w	r9, #0
 800989c:	9209      	str	r2, [sp, #36]	; 0x24
 800989e:	bf48      	it	mi
 80098a0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80098a2:	f1bb 0f00 	cmp.w	fp, #0
 80098a6:	db3d      	blt.n	8009924 <_dtoa_r+0x23c>
 80098a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098aa:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80098ae:	445b      	add	r3, fp
 80098b0:	9309      	str	r3, [sp, #36]	; 0x24
 80098b2:	2300      	movs	r3, #0
 80098b4:	930a      	str	r3, [sp, #40]	; 0x28
 80098b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098b8:	2b09      	cmp	r3, #9
 80098ba:	d867      	bhi.n	800998c <_dtoa_r+0x2a4>
 80098bc:	2b05      	cmp	r3, #5
 80098be:	bfc4      	itt	gt
 80098c0:	3b04      	subgt	r3, #4
 80098c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80098c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098c6:	bfc8      	it	gt
 80098c8:	2400      	movgt	r4, #0
 80098ca:	f1a3 0302 	sub.w	r3, r3, #2
 80098ce:	bfd8      	it	le
 80098d0:	2401      	movle	r4, #1
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	f200 8086 	bhi.w	80099e4 <_dtoa_r+0x2fc>
 80098d8:	e8df f003 	tbb	[pc, r3]
 80098dc:	5637392c 	.word	0x5637392c
 80098e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80098e4:	441c      	add	r4, r3
 80098e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	bfc1      	itttt	gt
 80098ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80098f2:	fa09 f903 	lslgt.w	r9, r9, r3
 80098f6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80098fa:	fa26 f303 	lsrgt.w	r3, r6, r3
 80098fe:	bfd6      	itet	le
 8009900:	f1c3 0320 	rsble	r3, r3, #32
 8009904:	ea49 0003 	orrgt.w	r0, r9, r3
 8009908:	fa06 f003 	lslle.w	r0, r6, r3
 800990c:	f7f6 fd74 	bl	80003f8 <__aeabi_ui2d>
 8009910:	2201      	movs	r2, #1
 8009912:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009916:	3c01      	subs	r4, #1
 8009918:	9213      	str	r2, [sp, #76]	; 0x4c
 800991a:	e76f      	b.n	80097fc <_dtoa_r+0x114>
 800991c:	2301      	movs	r3, #1
 800991e:	e7b3      	b.n	8009888 <_dtoa_r+0x1a0>
 8009920:	900f      	str	r0, [sp, #60]	; 0x3c
 8009922:	e7b2      	b.n	800988a <_dtoa_r+0x1a2>
 8009924:	f1cb 0300 	rsb	r3, fp, #0
 8009928:	930a      	str	r3, [sp, #40]	; 0x28
 800992a:	2300      	movs	r3, #0
 800992c:	eba9 090b 	sub.w	r9, r9, fp
 8009930:	930e      	str	r3, [sp, #56]	; 0x38
 8009932:	e7c0      	b.n	80098b6 <_dtoa_r+0x1ce>
 8009934:	2300      	movs	r3, #0
 8009936:	930b      	str	r3, [sp, #44]	; 0x2c
 8009938:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800993a:	2b00      	cmp	r3, #0
 800993c:	dc55      	bgt.n	80099ea <_dtoa_r+0x302>
 800993e:	2301      	movs	r3, #1
 8009940:	461a      	mov	r2, r3
 8009942:	9306      	str	r3, [sp, #24]
 8009944:	9308      	str	r3, [sp, #32]
 8009946:	9223      	str	r2, [sp, #140]	; 0x8c
 8009948:	e00b      	b.n	8009962 <_dtoa_r+0x27a>
 800994a:	2301      	movs	r3, #1
 800994c:	e7f3      	b.n	8009936 <_dtoa_r+0x24e>
 800994e:	2300      	movs	r3, #0
 8009950:	930b      	str	r3, [sp, #44]	; 0x2c
 8009952:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009954:	445b      	add	r3, fp
 8009956:	9306      	str	r3, [sp, #24]
 8009958:	3301      	adds	r3, #1
 800995a:	2b01      	cmp	r3, #1
 800995c:	9308      	str	r3, [sp, #32]
 800995e:	bfb8      	it	lt
 8009960:	2301      	movlt	r3, #1
 8009962:	2100      	movs	r1, #0
 8009964:	2204      	movs	r2, #4
 8009966:	69e8      	ldr	r0, [r5, #28]
 8009968:	f102 0614 	add.w	r6, r2, #20
 800996c:	429e      	cmp	r6, r3
 800996e:	d940      	bls.n	80099f2 <_dtoa_r+0x30a>
 8009970:	6041      	str	r1, [r0, #4]
 8009972:	4628      	mov	r0, r5
 8009974:	f001 f904 	bl	800ab80 <_Balloc>
 8009978:	9003      	str	r0, [sp, #12]
 800997a:	2800      	cmp	r0, #0
 800997c:	d13c      	bne.n	80099f8 <_dtoa_r+0x310>
 800997e:	4602      	mov	r2, r0
 8009980:	f240 11af 	movw	r1, #431	; 0x1af
 8009984:	4b16      	ldr	r3, [pc, #88]	; (80099e0 <_dtoa_r+0x2f8>)
 8009986:	e6c3      	b.n	8009710 <_dtoa_r+0x28>
 8009988:	2301      	movs	r3, #1
 800998a:	e7e1      	b.n	8009950 <_dtoa_r+0x268>
 800998c:	2401      	movs	r4, #1
 800998e:	2300      	movs	r3, #0
 8009990:	940b      	str	r4, [sp, #44]	; 0x2c
 8009992:	9322      	str	r3, [sp, #136]	; 0x88
 8009994:	f04f 33ff 	mov.w	r3, #4294967295
 8009998:	2200      	movs	r2, #0
 800999a:	9306      	str	r3, [sp, #24]
 800999c:	9308      	str	r3, [sp, #32]
 800999e:	2312      	movs	r3, #18
 80099a0:	e7d1      	b.n	8009946 <_dtoa_r+0x25e>
 80099a2:	bf00      	nop
 80099a4:	f3af 8000 	nop.w
 80099a8:	636f4361 	.word	0x636f4361
 80099ac:	3fd287a7 	.word	0x3fd287a7
 80099b0:	8b60c8b3 	.word	0x8b60c8b3
 80099b4:	3fc68a28 	.word	0x3fc68a28
 80099b8:	509f79fb 	.word	0x509f79fb
 80099bc:	3fd34413 	.word	0x3fd34413
 80099c0:	0800c262 	.word	0x0800c262
 80099c4:	0800c279 	.word	0x0800c279
 80099c8:	7ff00000 	.word	0x7ff00000
 80099cc:	0800c25e 	.word	0x0800c25e
 80099d0:	0800c255 	.word	0x0800c255
 80099d4:	0800c22a 	.word	0x0800c22a
 80099d8:	3ff80000 	.word	0x3ff80000
 80099dc:	0800c3c8 	.word	0x0800c3c8
 80099e0:	0800c2d1 	.word	0x0800c2d1
 80099e4:	2301      	movs	r3, #1
 80099e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80099e8:	e7d4      	b.n	8009994 <_dtoa_r+0x2ac>
 80099ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099ec:	9306      	str	r3, [sp, #24]
 80099ee:	9308      	str	r3, [sp, #32]
 80099f0:	e7b7      	b.n	8009962 <_dtoa_r+0x27a>
 80099f2:	3101      	adds	r1, #1
 80099f4:	0052      	lsls	r2, r2, #1
 80099f6:	e7b7      	b.n	8009968 <_dtoa_r+0x280>
 80099f8:	69eb      	ldr	r3, [r5, #28]
 80099fa:	9a03      	ldr	r2, [sp, #12]
 80099fc:	601a      	str	r2, [r3, #0]
 80099fe:	9b08      	ldr	r3, [sp, #32]
 8009a00:	2b0e      	cmp	r3, #14
 8009a02:	f200 80a8 	bhi.w	8009b56 <_dtoa_r+0x46e>
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	f000 80a5 	beq.w	8009b56 <_dtoa_r+0x46e>
 8009a0c:	f1bb 0f00 	cmp.w	fp, #0
 8009a10:	dd34      	ble.n	8009a7c <_dtoa_r+0x394>
 8009a12:	4b9a      	ldr	r3, [pc, #616]	; (8009c7c <_dtoa_r+0x594>)
 8009a14:	f00b 020f 	and.w	r2, fp, #15
 8009a18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a24:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009a28:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009a2c:	d016      	beq.n	8009a5c <_dtoa_r+0x374>
 8009a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a32:	4b93      	ldr	r3, [pc, #588]	; (8009c80 <_dtoa_r+0x598>)
 8009a34:	2703      	movs	r7, #3
 8009a36:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a3a:	f7f6 fe81 	bl	8000740 <__aeabi_ddiv>
 8009a3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a42:	f004 040f 	and.w	r4, r4, #15
 8009a46:	4e8e      	ldr	r6, [pc, #568]	; (8009c80 <_dtoa_r+0x598>)
 8009a48:	b954      	cbnz	r4, 8009a60 <_dtoa_r+0x378>
 8009a4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a52:	f7f6 fe75 	bl	8000740 <__aeabi_ddiv>
 8009a56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a5a:	e029      	b.n	8009ab0 <_dtoa_r+0x3c8>
 8009a5c:	2702      	movs	r7, #2
 8009a5e:	e7f2      	b.n	8009a46 <_dtoa_r+0x35e>
 8009a60:	07e1      	lsls	r1, r4, #31
 8009a62:	d508      	bpl.n	8009a76 <_dtoa_r+0x38e>
 8009a64:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a68:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a6c:	f7f6 fd3e 	bl	80004ec <__aeabi_dmul>
 8009a70:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a74:	3701      	adds	r7, #1
 8009a76:	1064      	asrs	r4, r4, #1
 8009a78:	3608      	adds	r6, #8
 8009a7a:	e7e5      	b.n	8009a48 <_dtoa_r+0x360>
 8009a7c:	f000 80a5 	beq.w	8009bca <_dtoa_r+0x4e2>
 8009a80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a84:	f1cb 0400 	rsb	r4, fp, #0
 8009a88:	4b7c      	ldr	r3, [pc, #496]	; (8009c7c <_dtoa_r+0x594>)
 8009a8a:	f004 020f 	and.w	r2, r4, #15
 8009a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	f7f6 fd29 	bl	80004ec <__aeabi_dmul>
 8009a9a:	2702      	movs	r7, #2
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aa2:	4e77      	ldr	r6, [pc, #476]	; (8009c80 <_dtoa_r+0x598>)
 8009aa4:	1124      	asrs	r4, r4, #4
 8009aa6:	2c00      	cmp	r4, #0
 8009aa8:	f040 8084 	bne.w	8009bb4 <_dtoa_r+0x4cc>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1d2      	bne.n	8009a56 <_dtoa_r+0x36e>
 8009ab0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009ab4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009ab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 8087 	beq.w	8009bce <_dtoa_r+0x4e6>
 8009ac0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	4b6f      	ldr	r3, [pc, #444]	; (8009c84 <_dtoa_r+0x59c>)
 8009ac8:	f7f6 ff82 	bl	80009d0 <__aeabi_dcmplt>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d07e      	beq.n	8009bce <_dtoa_r+0x4e6>
 8009ad0:	9b08      	ldr	r3, [sp, #32]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d07b      	beq.n	8009bce <_dtoa_r+0x4e6>
 8009ad6:	9b06      	ldr	r3, [sp, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dd38      	ble.n	8009b4e <_dtoa_r+0x466>
 8009adc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	4b69      	ldr	r3, [pc, #420]	; (8009c88 <_dtoa_r+0x5a0>)
 8009ae4:	f7f6 fd02 	bl	80004ec <__aeabi_dmul>
 8009ae8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009aec:	9c06      	ldr	r4, [sp, #24]
 8009aee:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009af2:	3701      	adds	r7, #1
 8009af4:	4638      	mov	r0, r7
 8009af6:	f7f6 fc8f 	bl	8000418 <__aeabi_i2d>
 8009afa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009afe:	f7f6 fcf5 	bl	80004ec <__aeabi_dmul>
 8009b02:	2200      	movs	r2, #0
 8009b04:	4b61      	ldr	r3, [pc, #388]	; (8009c8c <_dtoa_r+0x5a4>)
 8009b06:	f7f6 fb3b 	bl	8000180 <__adddf3>
 8009b0a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009b0e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009b12:	9611      	str	r6, [sp, #68]	; 0x44
 8009b14:	2c00      	cmp	r4, #0
 8009b16:	d15d      	bne.n	8009bd4 <_dtoa_r+0x4ec>
 8009b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4b5c      	ldr	r3, [pc, #368]	; (8009c90 <_dtoa_r+0x5a8>)
 8009b20:	f7f6 fb2c 	bl	800017c <__aeabi_dsub>
 8009b24:	4602      	mov	r2, r0
 8009b26:	460b      	mov	r3, r1
 8009b28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b2c:	4633      	mov	r3, r6
 8009b2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b30:	f7f6 ff6c 	bl	8000a0c <__aeabi_dcmpgt>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	f040 8295 	bne.w	800a064 <_dtoa_r+0x97c>
 8009b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009b44:	f7f6 ff44 	bl	80009d0 <__aeabi_dcmplt>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	f040 8289 	bne.w	800a060 <_dtoa_r+0x978>
 8009b4e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009b52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	f2c0 8151 	blt.w	8009e00 <_dtoa_r+0x718>
 8009b5e:	f1bb 0f0e 	cmp.w	fp, #14
 8009b62:	f300 814d 	bgt.w	8009e00 <_dtoa_r+0x718>
 8009b66:	4b45      	ldr	r3, [pc, #276]	; (8009c7c <_dtoa_r+0x594>)
 8009b68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b70:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009b74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f280 80da 	bge.w	8009d30 <_dtoa_r+0x648>
 8009b7c:	9b08      	ldr	r3, [sp, #32]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f300 80d6 	bgt.w	8009d30 <_dtoa_r+0x648>
 8009b84:	f040 826b 	bne.w	800a05e <_dtoa_r+0x976>
 8009b88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	4b40      	ldr	r3, [pc, #256]	; (8009c90 <_dtoa_r+0x5a8>)
 8009b90:	f7f6 fcac 	bl	80004ec <__aeabi_dmul>
 8009b94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b98:	f7f6 ff2e 	bl	80009f8 <__aeabi_dcmpge>
 8009b9c:	9c08      	ldr	r4, [sp, #32]
 8009b9e:	4626      	mov	r6, r4
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f040 8241 	bne.w	800a028 <_dtoa_r+0x940>
 8009ba6:	2331      	movs	r3, #49	; 0x31
 8009ba8:	9f03      	ldr	r7, [sp, #12]
 8009baa:	f10b 0b01 	add.w	fp, fp, #1
 8009bae:	f807 3b01 	strb.w	r3, [r7], #1
 8009bb2:	e23d      	b.n	800a030 <_dtoa_r+0x948>
 8009bb4:	07e2      	lsls	r2, r4, #31
 8009bb6:	d505      	bpl.n	8009bc4 <_dtoa_r+0x4dc>
 8009bb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bbc:	f7f6 fc96 	bl	80004ec <__aeabi_dmul>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	3701      	adds	r7, #1
 8009bc4:	1064      	asrs	r4, r4, #1
 8009bc6:	3608      	adds	r6, #8
 8009bc8:	e76d      	b.n	8009aa6 <_dtoa_r+0x3be>
 8009bca:	2702      	movs	r7, #2
 8009bcc:	e770      	b.n	8009ab0 <_dtoa_r+0x3c8>
 8009bce:	46d8      	mov	r8, fp
 8009bd0:	9c08      	ldr	r4, [sp, #32]
 8009bd2:	e78f      	b.n	8009af4 <_dtoa_r+0x40c>
 8009bd4:	9903      	ldr	r1, [sp, #12]
 8009bd6:	4b29      	ldr	r3, [pc, #164]	; (8009c7c <_dtoa_r+0x594>)
 8009bd8:	4421      	add	r1, r4
 8009bda:	9112      	str	r1, [sp, #72]	; 0x48
 8009bdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bde:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009be2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009be6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bea:	2900      	cmp	r1, #0
 8009bec:	d054      	beq.n	8009c98 <_dtoa_r+0x5b0>
 8009bee:	2000      	movs	r0, #0
 8009bf0:	4928      	ldr	r1, [pc, #160]	; (8009c94 <_dtoa_r+0x5ac>)
 8009bf2:	f7f6 fda5 	bl	8000740 <__aeabi_ddiv>
 8009bf6:	463b      	mov	r3, r7
 8009bf8:	4632      	mov	r2, r6
 8009bfa:	f7f6 fabf 	bl	800017c <__aeabi_dsub>
 8009bfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c02:	9f03      	ldr	r7, [sp, #12]
 8009c04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c08:	f7f6 ff20 	bl	8000a4c <__aeabi_d2iz>
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	f7f6 fc03 	bl	8000418 <__aeabi_i2d>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c1a:	f7f6 faaf 	bl	800017c <__aeabi_dsub>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	460b      	mov	r3, r1
 8009c22:	3430      	adds	r4, #48	; 0x30
 8009c24:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c2c:	f807 4b01 	strb.w	r4, [r7], #1
 8009c30:	f7f6 fece 	bl	80009d0 <__aeabi_dcmplt>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d173      	bne.n	8009d20 <_dtoa_r+0x638>
 8009c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	4911      	ldr	r1, [pc, #68]	; (8009c84 <_dtoa_r+0x59c>)
 8009c40:	f7f6 fa9c 	bl	800017c <__aeabi_dsub>
 8009c44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c48:	f7f6 fec2 	bl	80009d0 <__aeabi_dcmplt>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	f040 80b6 	bne.w	8009dbe <_dtoa_r+0x6d6>
 8009c52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c54:	429f      	cmp	r7, r3
 8009c56:	f43f af7a 	beq.w	8009b4e <_dtoa_r+0x466>
 8009c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4b09      	ldr	r3, [pc, #36]	; (8009c88 <_dtoa_r+0x5a0>)
 8009c62:	f7f6 fc43 	bl	80004ec <__aeabi_dmul>
 8009c66:	2200      	movs	r2, #0
 8009c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c70:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <_dtoa_r+0x5a0>)
 8009c72:	f7f6 fc3b 	bl	80004ec <__aeabi_dmul>
 8009c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c7a:	e7c3      	b.n	8009c04 <_dtoa_r+0x51c>
 8009c7c:	0800c3c8 	.word	0x0800c3c8
 8009c80:	0800c3a0 	.word	0x0800c3a0
 8009c84:	3ff00000 	.word	0x3ff00000
 8009c88:	40240000 	.word	0x40240000
 8009c8c:	401c0000 	.word	0x401c0000
 8009c90:	40140000 	.word	0x40140000
 8009c94:	3fe00000 	.word	0x3fe00000
 8009c98:	4630      	mov	r0, r6
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	f7f6 fc26 	bl	80004ec <__aeabi_dmul>
 8009ca0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ca2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ca6:	9c03      	ldr	r4, [sp, #12]
 8009ca8:	9314      	str	r3, [sp, #80]	; 0x50
 8009caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cae:	f7f6 fecd 	bl	8000a4c <__aeabi_d2iz>
 8009cb2:	9015      	str	r0, [sp, #84]	; 0x54
 8009cb4:	f7f6 fbb0 	bl	8000418 <__aeabi_i2d>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc0:	f7f6 fa5c 	bl	800017c <__aeabi_dsub>
 8009cc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	3330      	adds	r3, #48	; 0x30
 8009cca:	f804 3b01 	strb.w	r3, [r4], #1
 8009cce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cd0:	460f      	mov	r7, r1
 8009cd2:	429c      	cmp	r4, r3
 8009cd4:	f04f 0200 	mov.w	r2, #0
 8009cd8:	d124      	bne.n	8009d24 <_dtoa_r+0x63c>
 8009cda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cde:	4baf      	ldr	r3, [pc, #700]	; (8009f9c <_dtoa_r+0x8b4>)
 8009ce0:	f7f6 fa4e 	bl	8000180 <__adddf3>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4630      	mov	r0, r6
 8009cea:	4639      	mov	r1, r7
 8009cec:	f7f6 fe8e 	bl	8000a0c <__aeabi_dcmpgt>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d163      	bne.n	8009dbc <_dtoa_r+0x6d4>
 8009cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	49a8      	ldr	r1, [pc, #672]	; (8009f9c <_dtoa_r+0x8b4>)
 8009cfc:	f7f6 fa3e 	bl	800017c <__aeabi_dsub>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4630      	mov	r0, r6
 8009d06:	4639      	mov	r1, r7
 8009d08:	f7f6 fe62 	bl	80009d0 <__aeabi_dcmplt>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	f43f af1e 	beq.w	8009b4e <_dtoa_r+0x466>
 8009d12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009d14:	1e7b      	subs	r3, r7, #1
 8009d16:	9314      	str	r3, [sp, #80]	; 0x50
 8009d18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009d1c:	2b30      	cmp	r3, #48	; 0x30
 8009d1e:	d0f8      	beq.n	8009d12 <_dtoa_r+0x62a>
 8009d20:	46c3      	mov	fp, r8
 8009d22:	e03b      	b.n	8009d9c <_dtoa_r+0x6b4>
 8009d24:	4b9e      	ldr	r3, [pc, #632]	; (8009fa0 <_dtoa_r+0x8b8>)
 8009d26:	f7f6 fbe1 	bl	80004ec <__aeabi_dmul>
 8009d2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d2e:	e7bc      	b.n	8009caa <_dtoa_r+0x5c2>
 8009d30:	9f03      	ldr	r7, [sp, #12]
 8009d32:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009d36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	f7f6 fcff 	bl	8000740 <__aeabi_ddiv>
 8009d42:	f7f6 fe83 	bl	8000a4c <__aeabi_d2iz>
 8009d46:	4604      	mov	r4, r0
 8009d48:	f7f6 fb66 	bl	8000418 <__aeabi_i2d>
 8009d4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d50:	f7f6 fbcc 	bl	80004ec <__aeabi_dmul>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4640      	mov	r0, r8
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	f7f6 fa0e 	bl	800017c <__aeabi_dsub>
 8009d60:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009d64:	f807 6b01 	strb.w	r6, [r7], #1
 8009d68:	9e03      	ldr	r6, [sp, #12]
 8009d6a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009d6e:	1bbe      	subs	r6, r7, r6
 8009d70:	45b4      	cmp	ip, r6
 8009d72:	4602      	mov	r2, r0
 8009d74:	460b      	mov	r3, r1
 8009d76:	d136      	bne.n	8009de6 <_dtoa_r+0x6fe>
 8009d78:	f7f6 fa02 	bl	8000180 <__adddf3>
 8009d7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d80:	4680      	mov	r8, r0
 8009d82:	4689      	mov	r9, r1
 8009d84:	f7f6 fe42 	bl	8000a0c <__aeabi_dcmpgt>
 8009d88:	bb58      	cbnz	r0, 8009de2 <_dtoa_r+0x6fa>
 8009d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d8e:	4640      	mov	r0, r8
 8009d90:	4649      	mov	r1, r9
 8009d92:	f7f6 fe13 	bl	80009bc <__aeabi_dcmpeq>
 8009d96:	b108      	cbz	r0, 8009d9c <_dtoa_r+0x6b4>
 8009d98:	07e3      	lsls	r3, r4, #31
 8009d9a:	d422      	bmi.n	8009de2 <_dtoa_r+0x6fa>
 8009d9c:	4651      	mov	r1, sl
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f000 ff2e 	bl	800ac00 <_Bfree>
 8009da4:	2300      	movs	r3, #0
 8009da6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009da8:	703b      	strb	r3, [r7, #0]
 8009daa:	f10b 0301 	add.w	r3, fp, #1
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f43f ace6 	beq.w	8009784 <_dtoa_r+0x9c>
 8009db8:	601f      	str	r7, [r3, #0]
 8009dba:	e4e3      	b.n	8009784 <_dtoa_r+0x9c>
 8009dbc:	4627      	mov	r7, r4
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	461f      	mov	r7, r3
 8009dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dc6:	2a39      	cmp	r2, #57	; 0x39
 8009dc8:	d107      	bne.n	8009dda <_dtoa_r+0x6f2>
 8009dca:	9a03      	ldr	r2, [sp, #12]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d1f7      	bne.n	8009dc0 <_dtoa_r+0x6d8>
 8009dd0:	2230      	movs	r2, #48	; 0x30
 8009dd2:	9903      	ldr	r1, [sp, #12]
 8009dd4:	f108 0801 	add.w	r8, r8, #1
 8009dd8:	700a      	strb	r2, [r1, #0]
 8009dda:	781a      	ldrb	r2, [r3, #0]
 8009ddc:	3201      	adds	r2, #1
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	e79e      	b.n	8009d20 <_dtoa_r+0x638>
 8009de2:	46d8      	mov	r8, fp
 8009de4:	e7eb      	b.n	8009dbe <_dtoa_r+0x6d6>
 8009de6:	2200      	movs	r2, #0
 8009de8:	4b6d      	ldr	r3, [pc, #436]	; (8009fa0 <_dtoa_r+0x8b8>)
 8009dea:	f7f6 fb7f 	bl	80004ec <__aeabi_dmul>
 8009dee:	2200      	movs	r2, #0
 8009df0:	2300      	movs	r3, #0
 8009df2:	4680      	mov	r8, r0
 8009df4:	4689      	mov	r9, r1
 8009df6:	f7f6 fde1 	bl	80009bc <__aeabi_dcmpeq>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d09b      	beq.n	8009d36 <_dtoa_r+0x64e>
 8009dfe:	e7cd      	b.n	8009d9c <_dtoa_r+0x6b4>
 8009e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e02:	2a00      	cmp	r2, #0
 8009e04:	f000 80c4 	beq.w	8009f90 <_dtoa_r+0x8a8>
 8009e08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009e0a:	2a01      	cmp	r2, #1
 8009e0c:	f300 80a8 	bgt.w	8009f60 <_dtoa_r+0x878>
 8009e10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e12:	2a00      	cmp	r2, #0
 8009e14:	f000 80a0 	beq.w	8009f58 <_dtoa_r+0x870>
 8009e18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e1c:	464f      	mov	r7, r9
 8009e1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e22:	2101      	movs	r1, #1
 8009e24:	441a      	add	r2, r3
 8009e26:	4628      	mov	r0, r5
 8009e28:	4499      	add	r9, r3
 8009e2a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e2c:	f000 ffe8 	bl	800ae00 <__i2b>
 8009e30:	4606      	mov	r6, r0
 8009e32:	b15f      	cbz	r7, 8009e4c <_dtoa_r+0x764>
 8009e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dd08      	ble.n	8009e4c <_dtoa_r+0x764>
 8009e3a:	42bb      	cmp	r3, r7
 8009e3c:	bfa8      	it	ge
 8009e3e:	463b      	movge	r3, r7
 8009e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e42:	eba9 0903 	sub.w	r9, r9, r3
 8009e46:	1aff      	subs	r7, r7, r3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4e:	b1f3      	cbz	r3, 8009e8e <_dtoa_r+0x7a6>
 8009e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	f000 80a0 	beq.w	8009f98 <_dtoa_r+0x8b0>
 8009e58:	2c00      	cmp	r4, #0
 8009e5a:	dd10      	ble.n	8009e7e <_dtoa_r+0x796>
 8009e5c:	4631      	mov	r1, r6
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f001 f88b 	bl	800af7c <__pow5mult>
 8009e66:	4652      	mov	r2, sl
 8009e68:	4601      	mov	r1, r0
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	4628      	mov	r0, r5
 8009e6e:	f000 ffdd 	bl	800ae2c <__multiply>
 8009e72:	4680      	mov	r8, r0
 8009e74:	4651      	mov	r1, sl
 8009e76:	4628      	mov	r0, r5
 8009e78:	f000 fec2 	bl	800ac00 <_Bfree>
 8009e7c:	46c2      	mov	sl, r8
 8009e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e80:	1b1a      	subs	r2, r3, r4
 8009e82:	d004      	beq.n	8009e8e <_dtoa_r+0x7a6>
 8009e84:	4651      	mov	r1, sl
 8009e86:	4628      	mov	r0, r5
 8009e88:	f001 f878 	bl	800af7c <__pow5mult>
 8009e8c:	4682      	mov	sl, r0
 8009e8e:	2101      	movs	r1, #1
 8009e90:	4628      	mov	r0, r5
 8009e92:	f000 ffb5 	bl	800ae00 <__i2b>
 8009e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e98:	4604      	mov	r4, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f340 8082 	ble.w	8009fa4 <_dtoa_r+0x8bc>
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4601      	mov	r1, r0
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	f001 f869 	bl	800af7c <__pow5mult>
 8009eaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009eac:	4604      	mov	r4, r0
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	dd7b      	ble.n	8009faa <_dtoa_r+0x8c2>
 8009eb2:	f04f 0800 	mov.w	r8, #0
 8009eb6:	6923      	ldr	r3, [r4, #16]
 8009eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ebc:	6918      	ldr	r0, [r3, #16]
 8009ebe:	f000 ff51 	bl	800ad64 <__hi0bits>
 8009ec2:	f1c0 0020 	rsb	r0, r0, #32
 8009ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec8:	4418      	add	r0, r3
 8009eca:	f010 001f 	ands.w	r0, r0, #31
 8009ece:	f000 8092 	beq.w	8009ff6 <_dtoa_r+0x90e>
 8009ed2:	f1c0 0320 	rsb	r3, r0, #32
 8009ed6:	2b04      	cmp	r3, #4
 8009ed8:	f340 8085 	ble.w	8009fe6 <_dtoa_r+0x8fe>
 8009edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ede:	f1c0 001c 	rsb	r0, r0, #28
 8009ee2:	4403      	add	r3, r0
 8009ee4:	4481      	add	r9, r0
 8009ee6:	4407      	add	r7, r0
 8009ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eea:	f1b9 0f00 	cmp.w	r9, #0
 8009eee:	dd05      	ble.n	8009efc <_dtoa_r+0x814>
 8009ef0:	4651      	mov	r1, sl
 8009ef2:	464a      	mov	r2, r9
 8009ef4:	4628      	mov	r0, r5
 8009ef6:	f001 f89b 	bl	800b030 <__lshift>
 8009efa:	4682      	mov	sl, r0
 8009efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dd05      	ble.n	8009f0e <_dtoa_r+0x826>
 8009f02:	4621      	mov	r1, r4
 8009f04:	461a      	mov	r2, r3
 8009f06:	4628      	mov	r0, r5
 8009f08:	f001 f892 	bl	800b030 <__lshift>
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d072      	beq.n	8009ffa <_dtoa_r+0x912>
 8009f14:	4621      	mov	r1, r4
 8009f16:	4650      	mov	r0, sl
 8009f18:	f001 f8f6 	bl	800b108 <__mcmp>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	da6c      	bge.n	8009ffa <_dtoa_r+0x912>
 8009f20:	2300      	movs	r3, #0
 8009f22:	4651      	mov	r1, sl
 8009f24:	220a      	movs	r2, #10
 8009f26:	4628      	mov	r0, r5
 8009f28:	f000 fe8c 	bl	800ac44 <__multadd>
 8009f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f2e:	4682      	mov	sl, r0
 8009f30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 81ac 	beq.w	800a292 <_dtoa_r+0xbaa>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 fe7f 	bl	800ac44 <__multadd>
 8009f46:	9b06      	ldr	r3, [sp, #24]
 8009f48:	4606      	mov	r6, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f300 8093 	bgt.w	800a076 <_dtoa_r+0x98e>
 8009f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	dc59      	bgt.n	800a00a <_dtoa_r+0x922>
 8009f56:	e08e      	b.n	800a076 <_dtoa_r+0x98e>
 8009f58:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009f5a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f5e:	e75d      	b.n	8009e1c <_dtoa_r+0x734>
 8009f60:	9b08      	ldr	r3, [sp, #32]
 8009f62:	1e5c      	subs	r4, r3, #1
 8009f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f66:	42a3      	cmp	r3, r4
 8009f68:	bfbf      	itttt	lt
 8009f6a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f6c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009f6e:	1ae3      	sublt	r3, r4, r3
 8009f70:	18d2      	addlt	r2, r2, r3
 8009f72:	bfa8      	it	ge
 8009f74:	1b1c      	subge	r4, r3, r4
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	bfbe      	ittt	lt
 8009f7a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009f7c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009f7e:	2400      	movlt	r4, #0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bfb5      	itete	lt
 8009f84:	eba9 0703 	sublt.w	r7, r9, r3
 8009f88:	464f      	movge	r7, r9
 8009f8a:	2300      	movlt	r3, #0
 8009f8c:	9b08      	ldrge	r3, [sp, #32]
 8009f8e:	e747      	b.n	8009e20 <_dtoa_r+0x738>
 8009f90:	464f      	mov	r7, r9
 8009f92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009f96:	e74c      	b.n	8009e32 <_dtoa_r+0x74a>
 8009f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f9a:	e773      	b.n	8009e84 <_dtoa_r+0x79c>
 8009f9c:	3fe00000 	.word	0x3fe00000
 8009fa0:	40240000 	.word	0x40240000
 8009fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	dc18      	bgt.n	8009fdc <_dtoa_r+0x8f4>
 8009faa:	9b04      	ldr	r3, [sp, #16]
 8009fac:	b9b3      	cbnz	r3, 8009fdc <_dtoa_r+0x8f4>
 8009fae:	9b05      	ldr	r3, [sp, #20]
 8009fb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fb4:	b993      	cbnz	r3, 8009fdc <_dtoa_r+0x8f4>
 8009fb6:	9b05      	ldr	r3, [sp, #20]
 8009fb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fbc:	0d1b      	lsrs	r3, r3, #20
 8009fbe:	051b      	lsls	r3, r3, #20
 8009fc0:	b17b      	cbz	r3, 8009fe2 <_dtoa_r+0x8fa>
 8009fc2:	f04f 0801 	mov.w	r8, #1
 8009fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc8:	f109 0901 	add.w	r9, r9, #1
 8009fcc:	3301      	adds	r3, #1
 8009fce:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f47f af6f 	bne.w	8009eb6 <_dtoa_r+0x7ce>
 8009fd8:	2001      	movs	r0, #1
 8009fda:	e774      	b.n	8009ec6 <_dtoa_r+0x7de>
 8009fdc:	f04f 0800 	mov.w	r8, #0
 8009fe0:	e7f6      	b.n	8009fd0 <_dtoa_r+0x8e8>
 8009fe2:	4698      	mov	r8, r3
 8009fe4:	e7f4      	b.n	8009fd0 <_dtoa_r+0x8e8>
 8009fe6:	d080      	beq.n	8009eea <_dtoa_r+0x802>
 8009fe8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fea:	331c      	adds	r3, #28
 8009fec:	441a      	add	r2, r3
 8009fee:	4499      	add	r9, r3
 8009ff0:	441f      	add	r7, r3
 8009ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff4:	e779      	b.n	8009eea <_dtoa_r+0x802>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	e7f6      	b.n	8009fe8 <_dtoa_r+0x900>
 8009ffa:	9b08      	ldr	r3, [sp, #32]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	dc34      	bgt.n	800a06a <_dtoa_r+0x982>
 800a000:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a002:	2b02      	cmp	r3, #2
 800a004:	dd31      	ble.n	800a06a <_dtoa_r+0x982>
 800a006:	9b08      	ldr	r3, [sp, #32]
 800a008:	9306      	str	r3, [sp, #24]
 800a00a:	9b06      	ldr	r3, [sp, #24]
 800a00c:	b963      	cbnz	r3, 800a028 <_dtoa_r+0x940>
 800a00e:	4621      	mov	r1, r4
 800a010:	2205      	movs	r2, #5
 800a012:	4628      	mov	r0, r5
 800a014:	f000 fe16 	bl	800ac44 <__multadd>
 800a018:	4601      	mov	r1, r0
 800a01a:	4604      	mov	r4, r0
 800a01c:	4650      	mov	r0, sl
 800a01e:	f001 f873 	bl	800b108 <__mcmp>
 800a022:	2800      	cmp	r0, #0
 800a024:	f73f adbf 	bgt.w	8009ba6 <_dtoa_r+0x4be>
 800a028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a02a:	9f03      	ldr	r7, [sp, #12]
 800a02c:	ea6f 0b03 	mvn.w	fp, r3
 800a030:	f04f 0800 	mov.w	r8, #0
 800a034:	4621      	mov	r1, r4
 800a036:	4628      	mov	r0, r5
 800a038:	f000 fde2 	bl	800ac00 <_Bfree>
 800a03c:	2e00      	cmp	r6, #0
 800a03e:	f43f aead 	beq.w	8009d9c <_dtoa_r+0x6b4>
 800a042:	f1b8 0f00 	cmp.w	r8, #0
 800a046:	d005      	beq.n	800a054 <_dtoa_r+0x96c>
 800a048:	45b0      	cmp	r8, r6
 800a04a:	d003      	beq.n	800a054 <_dtoa_r+0x96c>
 800a04c:	4641      	mov	r1, r8
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 fdd6 	bl	800ac00 <_Bfree>
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	f000 fdd2 	bl	800ac00 <_Bfree>
 800a05c:	e69e      	b.n	8009d9c <_dtoa_r+0x6b4>
 800a05e:	2400      	movs	r4, #0
 800a060:	4626      	mov	r6, r4
 800a062:	e7e1      	b.n	800a028 <_dtoa_r+0x940>
 800a064:	46c3      	mov	fp, r8
 800a066:	4626      	mov	r6, r4
 800a068:	e59d      	b.n	8009ba6 <_dtoa_r+0x4be>
 800a06a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f000 80c8 	beq.w	800a202 <_dtoa_r+0xb1a>
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	9306      	str	r3, [sp, #24]
 800a076:	2f00      	cmp	r7, #0
 800a078:	dd05      	ble.n	800a086 <_dtoa_r+0x99e>
 800a07a:	4631      	mov	r1, r6
 800a07c:	463a      	mov	r2, r7
 800a07e:	4628      	mov	r0, r5
 800a080:	f000 ffd6 	bl	800b030 <__lshift>
 800a084:	4606      	mov	r6, r0
 800a086:	f1b8 0f00 	cmp.w	r8, #0
 800a08a:	d05b      	beq.n	800a144 <_dtoa_r+0xa5c>
 800a08c:	4628      	mov	r0, r5
 800a08e:	6871      	ldr	r1, [r6, #4]
 800a090:	f000 fd76 	bl	800ab80 <_Balloc>
 800a094:	4607      	mov	r7, r0
 800a096:	b928      	cbnz	r0, 800a0a4 <_dtoa_r+0x9bc>
 800a098:	4602      	mov	r2, r0
 800a09a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a09e:	4b81      	ldr	r3, [pc, #516]	; (800a2a4 <_dtoa_r+0xbbc>)
 800a0a0:	f7ff bb36 	b.w	8009710 <_dtoa_r+0x28>
 800a0a4:	6932      	ldr	r2, [r6, #16]
 800a0a6:	f106 010c 	add.w	r1, r6, #12
 800a0aa:	3202      	adds	r2, #2
 800a0ac:	0092      	lsls	r2, r2, #2
 800a0ae:	300c      	adds	r0, #12
 800a0b0:	f7ff fa7c 	bl	80095ac <memcpy>
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	f000 ffb9 	bl	800b030 <__lshift>
 800a0be:	46b0      	mov	r8, r6
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	9a03      	ldr	r2, [sp, #12]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	9308      	str	r3, [sp, #32]
 800a0ca:	9b06      	ldr	r3, [sp, #24]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0d0:	9b04      	ldr	r3, [sp, #16]
 800a0d2:	f003 0301 	and.w	r3, r3, #1
 800a0d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d8:	9b08      	ldr	r3, [sp, #32]
 800a0da:	4621      	mov	r1, r4
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	4650      	mov	r0, sl
 800a0e0:	9304      	str	r3, [sp, #16]
 800a0e2:	f7ff fa77 	bl	80095d4 <quorem>
 800a0e6:	4641      	mov	r1, r8
 800a0e8:	9006      	str	r0, [sp, #24]
 800a0ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	f001 f80a 	bl	800b108 <__mcmp>
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	9009      	str	r0, [sp, #36]	; 0x24
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f001 f820 	bl	800b140 <__mdiff>
 800a100:	68c2      	ldr	r2, [r0, #12]
 800a102:	4607      	mov	r7, r0
 800a104:	bb02      	cbnz	r2, 800a148 <_dtoa_r+0xa60>
 800a106:	4601      	mov	r1, r0
 800a108:	4650      	mov	r0, sl
 800a10a:	f000 fffd 	bl	800b108 <__mcmp>
 800a10e:	4602      	mov	r2, r0
 800a110:	4639      	mov	r1, r7
 800a112:	4628      	mov	r0, r5
 800a114:	920c      	str	r2, [sp, #48]	; 0x30
 800a116:	f000 fd73 	bl	800ac00 <_Bfree>
 800a11a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a11c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a11e:	9f08      	ldr	r7, [sp, #32]
 800a120:	ea43 0102 	orr.w	r1, r3, r2
 800a124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a126:	4319      	orrs	r1, r3
 800a128:	d110      	bne.n	800a14c <_dtoa_r+0xa64>
 800a12a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a12e:	d029      	beq.n	800a184 <_dtoa_r+0xa9c>
 800a130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a132:	2b00      	cmp	r3, #0
 800a134:	dd02      	ble.n	800a13c <_dtoa_r+0xa54>
 800a136:	9b06      	ldr	r3, [sp, #24]
 800a138:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a13c:	9b04      	ldr	r3, [sp, #16]
 800a13e:	f883 9000 	strb.w	r9, [r3]
 800a142:	e777      	b.n	800a034 <_dtoa_r+0x94c>
 800a144:	4630      	mov	r0, r6
 800a146:	e7ba      	b.n	800a0be <_dtoa_r+0x9d6>
 800a148:	2201      	movs	r2, #1
 800a14a:	e7e1      	b.n	800a110 <_dtoa_r+0xa28>
 800a14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14e:	2b00      	cmp	r3, #0
 800a150:	db04      	blt.n	800a15c <_dtoa_r+0xa74>
 800a152:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a154:	430b      	orrs	r3, r1
 800a156:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a158:	430b      	orrs	r3, r1
 800a15a:	d120      	bne.n	800a19e <_dtoa_r+0xab6>
 800a15c:	2a00      	cmp	r2, #0
 800a15e:	dded      	ble.n	800a13c <_dtoa_r+0xa54>
 800a160:	4651      	mov	r1, sl
 800a162:	2201      	movs	r2, #1
 800a164:	4628      	mov	r0, r5
 800a166:	f000 ff63 	bl	800b030 <__lshift>
 800a16a:	4621      	mov	r1, r4
 800a16c:	4682      	mov	sl, r0
 800a16e:	f000 ffcb 	bl	800b108 <__mcmp>
 800a172:	2800      	cmp	r0, #0
 800a174:	dc03      	bgt.n	800a17e <_dtoa_r+0xa96>
 800a176:	d1e1      	bne.n	800a13c <_dtoa_r+0xa54>
 800a178:	f019 0f01 	tst.w	r9, #1
 800a17c:	d0de      	beq.n	800a13c <_dtoa_r+0xa54>
 800a17e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a182:	d1d8      	bne.n	800a136 <_dtoa_r+0xa4e>
 800a184:	2339      	movs	r3, #57	; 0x39
 800a186:	9a04      	ldr	r2, [sp, #16]
 800a188:	7013      	strb	r3, [r2, #0]
 800a18a:	463b      	mov	r3, r7
 800a18c:	461f      	mov	r7, r3
 800a18e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a192:	3b01      	subs	r3, #1
 800a194:	2a39      	cmp	r2, #57	; 0x39
 800a196:	d06b      	beq.n	800a270 <_dtoa_r+0xb88>
 800a198:	3201      	adds	r2, #1
 800a19a:	701a      	strb	r2, [r3, #0]
 800a19c:	e74a      	b.n	800a034 <_dtoa_r+0x94c>
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	dd07      	ble.n	800a1b2 <_dtoa_r+0xaca>
 800a1a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1a6:	d0ed      	beq.n	800a184 <_dtoa_r+0xa9c>
 800a1a8:	9a04      	ldr	r2, [sp, #16]
 800a1aa:	f109 0301 	add.w	r3, r9, #1
 800a1ae:	7013      	strb	r3, [r2, #0]
 800a1b0:	e740      	b.n	800a034 <_dtoa_r+0x94c>
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1b6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d042      	beq.n	800a244 <_dtoa_r+0xb5c>
 800a1be:	4651      	mov	r1, sl
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	220a      	movs	r2, #10
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f000 fd3d 	bl	800ac44 <__multadd>
 800a1ca:	45b0      	cmp	r8, r6
 800a1cc:	4682      	mov	sl, r0
 800a1ce:	f04f 0300 	mov.w	r3, #0
 800a1d2:	f04f 020a 	mov.w	r2, #10
 800a1d6:	4641      	mov	r1, r8
 800a1d8:	4628      	mov	r0, r5
 800a1da:	d107      	bne.n	800a1ec <_dtoa_r+0xb04>
 800a1dc:	f000 fd32 	bl	800ac44 <__multadd>
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	9b08      	ldr	r3, [sp, #32]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	9308      	str	r3, [sp, #32]
 800a1ea:	e775      	b.n	800a0d8 <_dtoa_r+0x9f0>
 800a1ec:	f000 fd2a 	bl	800ac44 <__multadd>
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4680      	mov	r8, r0
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	220a      	movs	r2, #10
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	f000 fd23 	bl	800ac44 <__multadd>
 800a1fe:	4606      	mov	r6, r0
 800a200:	e7f0      	b.n	800a1e4 <_dtoa_r+0xafc>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	9306      	str	r3, [sp, #24]
 800a206:	9f03      	ldr	r7, [sp, #12]
 800a208:	4621      	mov	r1, r4
 800a20a:	4650      	mov	r0, sl
 800a20c:	f7ff f9e2 	bl	80095d4 <quorem>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a216:	f807 9b01 	strb.w	r9, [r7], #1
 800a21a:	1afa      	subs	r2, r7, r3
 800a21c:	9b06      	ldr	r3, [sp, #24]
 800a21e:	4293      	cmp	r3, r2
 800a220:	dd07      	ble.n	800a232 <_dtoa_r+0xb4a>
 800a222:	4651      	mov	r1, sl
 800a224:	2300      	movs	r3, #0
 800a226:	220a      	movs	r2, #10
 800a228:	4628      	mov	r0, r5
 800a22a:	f000 fd0b 	bl	800ac44 <__multadd>
 800a22e:	4682      	mov	sl, r0
 800a230:	e7ea      	b.n	800a208 <_dtoa_r+0xb20>
 800a232:	9b06      	ldr	r3, [sp, #24]
 800a234:	f04f 0800 	mov.w	r8, #0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bfcc      	ite	gt
 800a23c:	461f      	movgt	r7, r3
 800a23e:	2701      	movle	r7, #1
 800a240:	9b03      	ldr	r3, [sp, #12]
 800a242:	441f      	add	r7, r3
 800a244:	4651      	mov	r1, sl
 800a246:	2201      	movs	r2, #1
 800a248:	4628      	mov	r0, r5
 800a24a:	f000 fef1 	bl	800b030 <__lshift>
 800a24e:	4621      	mov	r1, r4
 800a250:	4682      	mov	sl, r0
 800a252:	f000 ff59 	bl	800b108 <__mcmp>
 800a256:	2800      	cmp	r0, #0
 800a258:	dc97      	bgt.n	800a18a <_dtoa_r+0xaa2>
 800a25a:	d102      	bne.n	800a262 <_dtoa_r+0xb7a>
 800a25c:	f019 0f01 	tst.w	r9, #1
 800a260:	d193      	bne.n	800a18a <_dtoa_r+0xaa2>
 800a262:	463b      	mov	r3, r7
 800a264:	461f      	mov	r7, r3
 800a266:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a26a:	2a30      	cmp	r2, #48	; 0x30
 800a26c:	d0fa      	beq.n	800a264 <_dtoa_r+0xb7c>
 800a26e:	e6e1      	b.n	800a034 <_dtoa_r+0x94c>
 800a270:	9a03      	ldr	r2, [sp, #12]
 800a272:	429a      	cmp	r2, r3
 800a274:	d18a      	bne.n	800a18c <_dtoa_r+0xaa4>
 800a276:	2331      	movs	r3, #49	; 0x31
 800a278:	f10b 0b01 	add.w	fp, fp, #1
 800a27c:	e797      	b.n	800a1ae <_dtoa_r+0xac6>
 800a27e:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <_dtoa_r+0xbc0>)
 800a280:	f7ff ba9f 	b.w	80097c2 <_dtoa_r+0xda>
 800a284:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a286:	2b00      	cmp	r3, #0
 800a288:	f47f aa77 	bne.w	800977a <_dtoa_r+0x92>
 800a28c:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <_dtoa_r+0xbc4>)
 800a28e:	f7ff ba98 	b.w	80097c2 <_dtoa_r+0xda>
 800a292:	9b06      	ldr	r3, [sp, #24]
 800a294:	2b00      	cmp	r3, #0
 800a296:	dcb6      	bgt.n	800a206 <_dtoa_r+0xb1e>
 800a298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	f73f aeb5 	bgt.w	800a00a <_dtoa_r+0x922>
 800a2a0:	e7b1      	b.n	800a206 <_dtoa_r+0xb1e>
 800a2a2:	bf00      	nop
 800a2a4:	0800c2d1 	.word	0x0800c2d1
 800a2a8:	0800c229 	.word	0x0800c229
 800a2ac:	0800c255 	.word	0x0800c255

0800a2b0 <_free_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4605      	mov	r5, r0
 800a2b4:	2900      	cmp	r1, #0
 800a2b6:	d040      	beq.n	800a33a <_free_r+0x8a>
 800a2b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2bc:	1f0c      	subs	r4, r1, #4
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bfb8      	it	lt
 800a2c2:	18e4      	addlt	r4, r4, r3
 800a2c4:	f000 fc50 	bl	800ab68 <__malloc_lock>
 800a2c8:	4a1c      	ldr	r2, [pc, #112]	; (800a33c <_free_r+0x8c>)
 800a2ca:	6813      	ldr	r3, [r2, #0]
 800a2cc:	b933      	cbnz	r3, 800a2dc <_free_r+0x2c>
 800a2ce:	6063      	str	r3, [r4, #4]
 800a2d0:	6014      	str	r4, [r2, #0]
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2d8:	f000 bc4c 	b.w	800ab74 <__malloc_unlock>
 800a2dc:	42a3      	cmp	r3, r4
 800a2de:	d908      	bls.n	800a2f2 <_free_r+0x42>
 800a2e0:	6820      	ldr	r0, [r4, #0]
 800a2e2:	1821      	adds	r1, r4, r0
 800a2e4:	428b      	cmp	r3, r1
 800a2e6:	bf01      	itttt	eq
 800a2e8:	6819      	ldreq	r1, [r3, #0]
 800a2ea:	685b      	ldreq	r3, [r3, #4]
 800a2ec:	1809      	addeq	r1, r1, r0
 800a2ee:	6021      	streq	r1, [r4, #0]
 800a2f0:	e7ed      	b.n	800a2ce <_free_r+0x1e>
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	b10b      	cbz	r3, 800a2fc <_free_r+0x4c>
 800a2f8:	42a3      	cmp	r3, r4
 800a2fa:	d9fa      	bls.n	800a2f2 <_free_r+0x42>
 800a2fc:	6811      	ldr	r1, [r2, #0]
 800a2fe:	1850      	adds	r0, r2, r1
 800a300:	42a0      	cmp	r0, r4
 800a302:	d10b      	bne.n	800a31c <_free_r+0x6c>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	4401      	add	r1, r0
 800a308:	1850      	adds	r0, r2, r1
 800a30a:	4283      	cmp	r3, r0
 800a30c:	6011      	str	r1, [r2, #0]
 800a30e:	d1e0      	bne.n	800a2d2 <_free_r+0x22>
 800a310:	6818      	ldr	r0, [r3, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	4408      	add	r0, r1
 800a316:	6010      	str	r0, [r2, #0]
 800a318:	6053      	str	r3, [r2, #4]
 800a31a:	e7da      	b.n	800a2d2 <_free_r+0x22>
 800a31c:	d902      	bls.n	800a324 <_free_r+0x74>
 800a31e:	230c      	movs	r3, #12
 800a320:	602b      	str	r3, [r5, #0]
 800a322:	e7d6      	b.n	800a2d2 <_free_r+0x22>
 800a324:	6820      	ldr	r0, [r4, #0]
 800a326:	1821      	adds	r1, r4, r0
 800a328:	428b      	cmp	r3, r1
 800a32a:	bf01      	itttt	eq
 800a32c:	6819      	ldreq	r1, [r3, #0]
 800a32e:	685b      	ldreq	r3, [r3, #4]
 800a330:	1809      	addeq	r1, r1, r0
 800a332:	6021      	streq	r1, [r4, #0]
 800a334:	6063      	str	r3, [r4, #4]
 800a336:	6054      	str	r4, [r2, #4]
 800a338:	e7cb      	b.n	800a2d2 <_free_r+0x22>
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	20000604 	.word	0x20000604

0800a340 <rshift>:
 800a340:	6903      	ldr	r3, [r0, #16]
 800a342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a346:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a34a:	f100 0414 	add.w	r4, r0, #20
 800a34e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a352:	dd46      	ble.n	800a3e2 <rshift+0xa2>
 800a354:	f011 011f 	ands.w	r1, r1, #31
 800a358:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a35c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a360:	d10c      	bne.n	800a37c <rshift+0x3c>
 800a362:	4629      	mov	r1, r5
 800a364:	f100 0710 	add.w	r7, r0, #16
 800a368:	42b1      	cmp	r1, r6
 800a36a:	d335      	bcc.n	800a3d8 <rshift+0x98>
 800a36c:	1a9b      	subs	r3, r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	1eea      	subs	r2, r5, #3
 800a372:	4296      	cmp	r6, r2
 800a374:	bf38      	it	cc
 800a376:	2300      	movcc	r3, #0
 800a378:	4423      	add	r3, r4
 800a37a:	e015      	b.n	800a3a8 <rshift+0x68>
 800a37c:	46a1      	mov	r9, r4
 800a37e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a382:	f1c1 0820 	rsb	r8, r1, #32
 800a386:	40cf      	lsrs	r7, r1
 800a388:	f105 0e04 	add.w	lr, r5, #4
 800a38c:	4576      	cmp	r6, lr
 800a38e:	46f4      	mov	ip, lr
 800a390:	d816      	bhi.n	800a3c0 <rshift+0x80>
 800a392:	1a9a      	subs	r2, r3, r2
 800a394:	0092      	lsls	r2, r2, #2
 800a396:	3a04      	subs	r2, #4
 800a398:	3501      	adds	r5, #1
 800a39a:	42ae      	cmp	r6, r5
 800a39c:	bf38      	it	cc
 800a39e:	2200      	movcc	r2, #0
 800a3a0:	18a3      	adds	r3, r4, r2
 800a3a2:	50a7      	str	r7, [r4, r2]
 800a3a4:	b107      	cbz	r7, 800a3a8 <rshift+0x68>
 800a3a6:	3304      	adds	r3, #4
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	eba3 0204 	sub.w	r2, r3, r4
 800a3ae:	bf08      	it	eq
 800a3b0:	2300      	moveq	r3, #0
 800a3b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3b6:	6102      	str	r2, [r0, #16]
 800a3b8:	bf08      	it	eq
 800a3ba:	6143      	streq	r3, [r0, #20]
 800a3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3c0:	f8dc c000 	ldr.w	ip, [ip]
 800a3c4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3c8:	ea4c 0707 	orr.w	r7, ip, r7
 800a3cc:	f849 7b04 	str.w	r7, [r9], #4
 800a3d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3d4:	40cf      	lsrs	r7, r1
 800a3d6:	e7d9      	b.n	800a38c <rshift+0x4c>
 800a3d8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3dc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3e0:	e7c2      	b.n	800a368 <rshift+0x28>
 800a3e2:	4623      	mov	r3, r4
 800a3e4:	e7e0      	b.n	800a3a8 <rshift+0x68>

0800a3e6 <__hexdig_fun>:
 800a3e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3ea:	2b09      	cmp	r3, #9
 800a3ec:	d802      	bhi.n	800a3f4 <__hexdig_fun+0xe>
 800a3ee:	3820      	subs	r0, #32
 800a3f0:	b2c0      	uxtb	r0, r0
 800a3f2:	4770      	bx	lr
 800a3f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3f8:	2b05      	cmp	r3, #5
 800a3fa:	d801      	bhi.n	800a400 <__hexdig_fun+0x1a>
 800a3fc:	3847      	subs	r0, #71	; 0x47
 800a3fe:	e7f7      	b.n	800a3f0 <__hexdig_fun+0xa>
 800a400:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a404:	2b05      	cmp	r3, #5
 800a406:	d801      	bhi.n	800a40c <__hexdig_fun+0x26>
 800a408:	3827      	subs	r0, #39	; 0x27
 800a40a:	e7f1      	b.n	800a3f0 <__hexdig_fun+0xa>
 800a40c:	2000      	movs	r0, #0
 800a40e:	4770      	bx	lr

0800a410 <__gethex>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	4681      	mov	r9, r0
 800a416:	468a      	mov	sl, r1
 800a418:	4617      	mov	r7, r2
 800a41a:	680a      	ldr	r2, [r1, #0]
 800a41c:	b085      	sub	sp, #20
 800a41e:	f102 0b02 	add.w	fp, r2, #2
 800a422:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a426:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a42a:	9302      	str	r3, [sp, #8]
 800a42c:	32fe      	adds	r2, #254	; 0xfe
 800a42e:	eb02 030b 	add.w	r3, r2, fp
 800a432:	46d8      	mov	r8, fp
 800a434:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	2830      	cmp	r0, #48	; 0x30
 800a43c:	d0f7      	beq.n	800a42e <__gethex+0x1e>
 800a43e:	f7ff ffd2 	bl	800a3e6 <__hexdig_fun>
 800a442:	4604      	mov	r4, r0
 800a444:	2800      	cmp	r0, #0
 800a446:	d138      	bne.n	800a4ba <__gethex+0xaa>
 800a448:	2201      	movs	r2, #1
 800a44a:	4640      	mov	r0, r8
 800a44c:	49a7      	ldr	r1, [pc, #668]	; (800a6ec <__gethex+0x2dc>)
 800a44e:	f7ff f817 	bl	8009480 <strncmp>
 800a452:	4606      	mov	r6, r0
 800a454:	2800      	cmp	r0, #0
 800a456:	d169      	bne.n	800a52c <__gethex+0x11c>
 800a458:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a45c:	465d      	mov	r5, fp
 800a45e:	f7ff ffc2 	bl	800a3e6 <__hexdig_fun>
 800a462:	2800      	cmp	r0, #0
 800a464:	d064      	beq.n	800a530 <__gethex+0x120>
 800a466:	465a      	mov	r2, fp
 800a468:	7810      	ldrb	r0, [r2, #0]
 800a46a:	4690      	mov	r8, r2
 800a46c:	2830      	cmp	r0, #48	; 0x30
 800a46e:	f102 0201 	add.w	r2, r2, #1
 800a472:	d0f9      	beq.n	800a468 <__gethex+0x58>
 800a474:	f7ff ffb7 	bl	800a3e6 <__hexdig_fun>
 800a478:	2301      	movs	r3, #1
 800a47a:	fab0 f480 	clz	r4, r0
 800a47e:	465e      	mov	r6, fp
 800a480:	0964      	lsrs	r4, r4, #5
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	4642      	mov	r2, r8
 800a486:	4615      	mov	r5, r2
 800a488:	7828      	ldrb	r0, [r5, #0]
 800a48a:	3201      	adds	r2, #1
 800a48c:	f7ff ffab 	bl	800a3e6 <__hexdig_fun>
 800a490:	2800      	cmp	r0, #0
 800a492:	d1f8      	bne.n	800a486 <__gethex+0x76>
 800a494:	2201      	movs	r2, #1
 800a496:	4628      	mov	r0, r5
 800a498:	4994      	ldr	r1, [pc, #592]	; (800a6ec <__gethex+0x2dc>)
 800a49a:	f7fe fff1 	bl	8009480 <strncmp>
 800a49e:	b978      	cbnz	r0, 800a4c0 <__gethex+0xb0>
 800a4a0:	b946      	cbnz	r6, 800a4b4 <__gethex+0xa4>
 800a4a2:	1c6e      	adds	r6, r5, #1
 800a4a4:	4632      	mov	r2, r6
 800a4a6:	4615      	mov	r5, r2
 800a4a8:	7828      	ldrb	r0, [r5, #0]
 800a4aa:	3201      	adds	r2, #1
 800a4ac:	f7ff ff9b 	bl	800a3e6 <__hexdig_fun>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d1f8      	bne.n	800a4a6 <__gethex+0x96>
 800a4b4:	1b73      	subs	r3, r6, r5
 800a4b6:	009e      	lsls	r6, r3, #2
 800a4b8:	e004      	b.n	800a4c4 <__gethex+0xb4>
 800a4ba:	2400      	movs	r4, #0
 800a4bc:	4626      	mov	r6, r4
 800a4be:	e7e1      	b.n	800a484 <__gethex+0x74>
 800a4c0:	2e00      	cmp	r6, #0
 800a4c2:	d1f7      	bne.n	800a4b4 <__gethex+0xa4>
 800a4c4:	782b      	ldrb	r3, [r5, #0]
 800a4c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4ca:	2b50      	cmp	r3, #80	; 0x50
 800a4cc:	d13d      	bne.n	800a54a <__gethex+0x13a>
 800a4ce:	786b      	ldrb	r3, [r5, #1]
 800a4d0:	2b2b      	cmp	r3, #43	; 0x2b
 800a4d2:	d02f      	beq.n	800a534 <__gethex+0x124>
 800a4d4:	2b2d      	cmp	r3, #45	; 0x2d
 800a4d6:	d031      	beq.n	800a53c <__gethex+0x12c>
 800a4d8:	f04f 0b00 	mov.w	fp, #0
 800a4dc:	1c69      	adds	r1, r5, #1
 800a4de:	7808      	ldrb	r0, [r1, #0]
 800a4e0:	f7ff ff81 	bl	800a3e6 <__hexdig_fun>
 800a4e4:	1e42      	subs	r2, r0, #1
 800a4e6:	b2d2      	uxtb	r2, r2
 800a4e8:	2a18      	cmp	r2, #24
 800a4ea:	d82e      	bhi.n	800a54a <__gethex+0x13a>
 800a4ec:	f1a0 0210 	sub.w	r2, r0, #16
 800a4f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4f4:	f7ff ff77 	bl	800a3e6 <__hexdig_fun>
 800a4f8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a4fc:	fa5f fc8c 	uxtb.w	ip, ip
 800a500:	f1bc 0f18 	cmp.w	ip, #24
 800a504:	d91d      	bls.n	800a542 <__gethex+0x132>
 800a506:	f1bb 0f00 	cmp.w	fp, #0
 800a50a:	d000      	beq.n	800a50e <__gethex+0xfe>
 800a50c:	4252      	negs	r2, r2
 800a50e:	4416      	add	r6, r2
 800a510:	f8ca 1000 	str.w	r1, [sl]
 800a514:	b1dc      	cbz	r4, 800a54e <__gethex+0x13e>
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bf14      	ite	ne
 800a51c:	f04f 0800 	movne.w	r8, #0
 800a520:	f04f 0806 	moveq.w	r8, #6
 800a524:	4640      	mov	r0, r8
 800a526:	b005      	add	sp, #20
 800a528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52c:	4645      	mov	r5, r8
 800a52e:	4626      	mov	r6, r4
 800a530:	2401      	movs	r4, #1
 800a532:	e7c7      	b.n	800a4c4 <__gethex+0xb4>
 800a534:	f04f 0b00 	mov.w	fp, #0
 800a538:	1ca9      	adds	r1, r5, #2
 800a53a:	e7d0      	b.n	800a4de <__gethex+0xce>
 800a53c:	f04f 0b01 	mov.w	fp, #1
 800a540:	e7fa      	b.n	800a538 <__gethex+0x128>
 800a542:	230a      	movs	r3, #10
 800a544:	fb03 0002 	mla	r0, r3, r2, r0
 800a548:	e7d0      	b.n	800a4ec <__gethex+0xdc>
 800a54a:	4629      	mov	r1, r5
 800a54c:	e7e0      	b.n	800a510 <__gethex+0x100>
 800a54e:	4621      	mov	r1, r4
 800a550:	eba5 0308 	sub.w	r3, r5, r8
 800a554:	3b01      	subs	r3, #1
 800a556:	2b07      	cmp	r3, #7
 800a558:	dc0a      	bgt.n	800a570 <__gethex+0x160>
 800a55a:	4648      	mov	r0, r9
 800a55c:	f000 fb10 	bl	800ab80 <_Balloc>
 800a560:	4604      	mov	r4, r0
 800a562:	b940      	cbnz	r0, 800a576 <__gethex+0x166>
 800a564:	4602      	mov	r2, r0
 800a566:	21e4      	movs	r1, #228	; 0xe4
 800a568:	4b61      	ldr	r3, [pc, #388]	; (800a6f0 <__gethex+0x2e0>)
 800a56a:	4862      	ldr	r0, [pc, #392]	; (800a6f4 <__gethex+0x2e4>)
 800a56c:	f001 fa30 	bl	800b9d0 <__assert_func>
 800a570:	3101      	adds	r1, #1
 800a572:	105b      	asrs	r3, r3, #1
 800a574:	e7ef      	b.n	800a556 <__gethex+0x146>
 800a576:	2300      	movs	r3, #0
 800a578:	469b      	mov	fp, r3
 800a57a:	f100 0a14 	add.w	sl, r0, #20
 800a57e:	f8cd a004 	str.w	sl, [sp, #4]
 800a582:	45a8      	cmp	r8, r5
 800a584:	d344      	bcc.n	800a610 <__gethex+0x200>
 800a586:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a58a:	4658      	mov	r0, fp
 800a58c:	f848 bb04 	str.w	fp, [r8], #4
 800a590:	eba8 080a 	sub.w	r8, r8, sl
 800a594:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a598:	6122      	str	r2, [r4, #16]
 800a59a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a59e:	f000 fbe1 	bl	800ad64 <__hi0bits>
 800a5a2:	683d      	ldr	r5, [r7, #0]
 800a5a4:	eba8 0800 	sub.w	r8, r8, r0
 800a5a8:	45a8      	cmp	r8, r5
 800a5aa:	dd59      	ble.n	800a660 <__gethex+0x250>
 800a5ac:	eba8 0805 	sub.w	r8, r8, r5
 800a5b0:	4641      	mov	r1, r8
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 ff5f 	bl	800b476 <__any_on>
 800a5b8:	4683      	mov	fp, r0
 800a5ba:	b1b8      	cbz	r0, 800a5ec <__gethex+0x1dc>
 800a5bc:	f04f 0b01 	mov.w	fp, #1
 800a5c0:	f108 33ff 	add.w	r3, r8, #4294967295
 800a5c4:	1159      	asrs	r1, r3, #5
 800a5c6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5ca:	f003 021f 	and.w	r2, r3, #31
 800a5ce:	fa0b f202 	lsl.w	r2, fp, r2
 800a5d2:	420a      	tst	r2, r1
 800a5d4:	d00a      	beq.n	800a5ec <__gethex+0x1dc>
 800a5d6:	455b      	cmp	r3, fp
 800a5d8:	dd06      	ble.n	800a5e8 <__gethex+0x1d8>
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f1a8 0102 	sub.w	r1, r8, #2
 800a5e0:	f000 ff49 	bl	800b476 <__any_on>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	d138      	bne.n	800a65a <__gethex+0x24a>
 800a5e8:	f04f 0b02 	mov.w	fp, #2
 800a5ec:	4641      	mov	r1, r8
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f7ff fea6 	bl	800a340 <rshift>
 800a5f4:	4446      	add	r6, r8
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	42b3      	cmp	r3, r6
 800a5fa:	da41      	bge.n	800a680 <__gethex+0x270>
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	4648      	mov	r0, r9
 800a600:	f000 fafe 	bl	800ac00 <_Bfree>
 800a604:	2300      	movs	r3, #0
 800a606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a608:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	e789      	b.n	800a524 <__gethex+0x114>
 800a610:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a614:	2a2e      	cmp	r2, #46	; 0x2e
 800a616:	d014      	beq.n	800a642 <__gethex+0x232>
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d106      	bne.n	800a62a <__gethex+0x21a>
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	f843 bb04 	str.w	fp, [r3], #4
 800a622:	f04f 0b00 	mov.w	fp, #0
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	465b      	mov	r3, fp
 800a62a:	7828      	ldrb	r0, [r5, #0]
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	f7ff feda 	bl	800a3e6 <__hexdig_fun>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	f000 000f 	and.w	r0, r0, #15
 800a638:	4098      	lsls	r0, r3
 800a63a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a63e:	3304      	adds	r3, #4
 800a640:	e79f      	b.n	800a582 <__gethex+0x172>
 800a642:	45a8      	cmp	r8, r5
 800a644:	d8e8      	bhi.n	800a618 <__gethex+0x208>
 800a646:	2201      	movs	r2, #1
 800a648:	4628      	mov	r0, r5
 800a64a:	4928      	ldr	r1, [pc, #160]	; (800a6ec <__gethex+0x2dc>)
 800a64c:	9303      	str	r3, [sp, #12]
 800a64e:	f7fe ff17 	bl	8009480 <strncmp>
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	2800      	cmp	r0, #0
 800a656:	d1df      	bne.n	800a618 <__gethex+0x208>
 800a658:	e793      	b.n	800a582 <__gethex+0x172>
 800a65a:	f04f 0b03 	mov.w	fp, #3
 800a65e:	e7c5      	b.n	800a5ec <__gethex+0x1dc>
 800a660:	da0b      	bge.n	800a67a <__gethex+0x26a>
 800a662:	eba5 0808 	sub.w	r8, r5, r8
 800a666:	4621      	mov	r1, r4
 800a668:	4642      	mov	r2, r8
 800a66a:	4648      	mov	r0, r9
 800a66c:	f000 fce0 	bl	800b030 <__lshift>
 800a670:	4604      	mov	r4, r0
 800a672:	eba6 0608 	sub.w	r6, r6, r8
 800a676:	f100 0a14 	add.w	sl, r0, #20
 800a67a:	f04f 0b00 	mov.w	fp, #0
 800a67e:	e7ba      	b.n	800a5f6 <__gethex+0x1e6>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	42b3      	cmp	r3, r6
 800a684:	dd74      	ble.n	800a770 <__gethex+0x360>
 800a686:	1b9e      	subs	r6, r3, r6
 800a688:	42b5      	cmp	r5, r6
 800a68a:	dc35      	bgt.n	800a6f8 <__gethex+0x2e8>
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d023      	beq.n	800a6da <__gethex+0x2ca>
 800a692:	2b03      	cmp	r3, #3
 800a694:	d025      	beq.n	800a6e2 <__gethex+0x2d2>
 800a696:	2b01      	cmp	r3, #1
 800a698:	d115      	bne.n	800a6c6 <__gethex+0x2b6>
 800a69a:	42b5      	cmp	r5, r6
 800a69c:	d113      	bne.n	800a6c6 <__gethex+0x2b6>
 800a69e:	2d01      	cmp	r5, #1
 800a6a0:	d10b      	bne.n	800a6ba <__gethex+0x2aa>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	9a02      	ldr	r2, [sp, #8]
 800a6a6:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	6123      	str	r3, [r4, #16]
 800a6b0:	f8ca 3000 	str.w	r3, [sl]
 800a6b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6b6:	601c      	str	r4, [r3, #0]
 800a6b8:	e734      	b.n	800a524 <__gethex+0x114>
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	1e69      	subs	r1, r5, #1
 800a6be:	f000 feda 	bl	800b476 <__any_on>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d1ed      	bne.n	800a6a2 <__gethex+0x292>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4648      	mov	r0, r9
 800a6ca:	f000 fa99 	bl	800ac00 <_Bfree>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6d2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	e724      	b.n	800a524 <__gethex+0x114>
 800a6da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1f2      	bne.n	800a6c6 <__gethex+0x2b6>
 800a6e0:	e7df      	b.n	800a6a2 <__gethex+0x292>
 800a6e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1dc      	bne.n	800a6a2 <__gethex+0x292>
 800a6e8:	e7ed      	b.n	800a6c6 <__gethex+0x2b6>
 800a6ea:	bf00      	nop
 800a6ec:	0800c0c2 	.word	0x0800c0c2
 800a6f0:	0800c2d1 	.word	0x0800c2d1
 800a6f4:	0800c2e2 	.word	0x0800c2e2
 800a6f8:	f106 38ff 	add.w	r8, r6, #4294967295
 800a6fc:	f1bb 0f00 	cmp.w	fp, #0
 800a700:	d133      	bne.n	800a76a <__gethex+0x35a>
 800a702:	f1b8 0f00 	cmp.w	r8, #0
 800a706:	d004      	beq.n	800a712 <__gethex+0x302>
 800a708:	4641      	mov	r1, r8
 800a70a:	4620      	mov	r0, r4
 800a70c:	f000 feb3 	bl	800b476 <__any_on>
 800a710:	4683      	mov	fp, r0
 800a712:	2301      	movs	r3, #1
 800a714:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a718:	f008 081f 	and.w	r8, r8, #31
 800a71c:	fa03 f308 	lsl.w	r3, r3, r8
 800a720:	f04f 0802 	mov.w	r8, #2
 800a724:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a728:	4631      	mov	r1, r6
 800a72a:	4213      	tst	r3, r2
 800a72c:	4620      	mov	r0, r4
 800a72e:	bf18      	it	ne
 800a730:	f04b 0b02 	orrne.w	fp, fp, #2
 800a734:	1bad      	subs	r5, r5, r6
 800a736:	f7ff fe03 	bl	800a340 <rshift>
 800a73a:	687e      	ldr	r6, [r7, #4]
 800a73c:	f1bb 0f00 	cmp.w	fp, #0
 800a740:	d04a      	beq.n	800a7d8 <__gethex+0x3c8>
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b02      	cmp	r3, #2
 800a746:	d016      	beq.n	800a776 <__gethex+0x366>
 800a748:	2b03      	cmp	r3, #3
 800a74a:	d018      	beq.n	800a77e <__gethex+0x36e>
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d109      	bne.n	800a764 <__gethex+0x354>
 800a750:	f01b 0f02 	tst.w	fp, #2
 800a754:	d006      	beq.n	800a764 <__gethex+0x354>
 800a756:	f8da 3000 	ldr.w	r3, [sl]
 800a75a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a75e:	f01b 0f01 	tst.w	fp, #1
 800a762:	d10f      	bne.n	800a784 <__gethex+0x374>
 800a764:	f048 0810 	orr.w	r8, r8, #16
 800a768:	e036      	b.n	800a7d8 <__gethex+0x3c8>
 800a76a:	f04f 0b01 	mov.w	fp, #1
 800a76e:	e7d0      	b.n	800a712 <__gethex+0x302>
 800a770:	f04f 0801 	mov.w	r8, #1
 800a774:	e7e2      	b.n	800a73c <__gethex+0x32c>
 800a776:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a778:	f1c3 0301 	rsb	r3, r3, #1
 800a77c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a77e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0ef      	beq.n	800a764 <__gethex+0x354>
 800a784:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a788:	f104 0214 	add.w	r2, r4, #20
 800a78c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	2300      	movs	r3, #0
 800a794:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a798:	4694      	mov	ip, r2
 800a79a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a79e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a7a2:	d01e      	beq.n	800a7e2 <__gethex+0x3d2>
 800a7a4:	3101      	adds	r1, #1
 800a7a6:	f8cc 1000 	str.w	r1, [ip]
 800a7aa:	f1b8 0f02 	cmp.w	r8, #2
 800a7ae:	f104 0214 	add.w	r2, r4, #20
 800a7b2:	d13d      	bne.n	800a830 <__gethex+0x420>
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	42ab      	cmp	r3, r5
 800a7ba:	d10b      	bne.n	800a7d4 <__gethex+0x3c4>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	1169      	asrs	r1, r5, #5
 800a7c0:	f005 051f 	and.w	r5, r5, #31
 800a7c4:	fa03 f505 	lsl.w	r5, r3, r5
 800a7c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7cc:	421d      	tst	r5, r3
 800a7ce:	bf18      	it	ne
 800a7d0:	f04f 0801 	movne.w	r8, #1
 800a7d4:	f048 0820 	orr.w	r8, r8, #32
 800a7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7da:	601c      	str	r4, [r3, #0]
 800a7dc:	9b02      	ldr	r3, [sp, #8]
 800a7de:	601e      	str	r6, [r3, #0]
 800a7e0:	e6a0      	b.n	800a524 <__gethex+0x114>
 800a7e2:	4290      	cmp	r0, r2
 800a7e4:	f842 3c04 	str.w	r3, [r2, #-4]
 800a7e8:	d8d6      	bhi.n	800a798 <__gethex+0x388>
 800a7ea:	68a2      	ldr	r2, [r4, #8]
 800a7ec:	4593      	cmp	fp, r2
 800a7ee:	db17      	blt.n	800a820 <__gethex+0x410>
 800a7f0:	6861      	ldr	r1, [r4, #4]
 800a7f2:	4648      	mov	r0, r9
 800a7f4:	3101      	adds	r1, #1
 800a7f6:	f000 f9c3 	bl	800ab80 <_Balloc>
 800a7fa:	4682      	mov	sl, r0
 800a7fc:	b918      	cbnz	r0, 800a806 <__gethex+0x3f6>
 800a7fe:	4602      	mov	r2, r0
 800a800:	2184      	movs	r1, #132	; 0x84
 800a802:	4b1a      	ldr	r3, [pc, #104]	; (800a86c <__gethex+0x45c>)
 800a804:	e6b1      	b.n	800a56a <__gethex+0x15a>
 800a806:	6922      	ldr	r2, [r4, #16]
 800a808:	f104 010c 	add.w	r1, r4, #12
 800a80c:	3202      	adds	r2, #2
 800a80e:	0092      	lsls	r2, r2, #2
 800a810:	300c      	adds	r0, #12
 800a812:	f7fe fecb 	bl	80095ac <memcpy>
 800a816:	4621      	mov	r1, r4
 800a818:	4648      	mov	r0, r9
 800a81a:	f000 f9f1 	bl	800ac00 <_Bfree>
 800a81e:	4654      	mov	r4, sl
 800a820:	6922      	ldr	r2, [r4, #16]
 800a822:	1c51      	adds	r1, r2, #1
 800a824:	6121      	str	r1, [r4, #16]
 800a826:	2101      	movs	r1, #1
 800a828:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a82c:	6151      	str	r1, [r2, #20]
 800a82e:	e7bc      	b.n	800a7aa <__gethex+0x39a>
 800a830:	6921      	ldr	r1, [r4, #16]
 800a832:	4559      	cmp	r1, fp
 800a834:	dd0b      	ble.n	800a84e <__gethex+0x43e>
 800a836:	2101      	movs	r1, #1
 800a838:	4620      	mov	r0, r4
 800a83a:	f7ff fd81 	bl	800a340 <rshift>
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	3601      	adds	r6, #1
 800a842:	42b3      	cmp	r3, r6
 800a844:	f6ff aeda 	blt.w	800a5fc <__gethex+0x1ec>
 800a848:	f04f 0801 	mov.w	r8, #1
 800a84c:	e7c2      	b.n	800a7d4 <__gethex+0x3c4>
 800a84e:	f015 051f 	ands.w	r5, r5, #31
 800a852:	d0f9      	beq.n	800a848 <__gethex+0x438>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	f1c5 0520 	rsb	r5, r5, #32
 800a85a:	441a      	add	r2, r3
 800a85c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a860:	f000 fa80 	bl	800ad64 <__hi0bits>
 800a864:	42a8      	cmp	r0, r5
 800a866:	dbe6      	blt.n	800a836 <__gethex+0x426>
 800a868:	e7ee      	b.n	800a848 <__gethex+0x438>
 800a86a:	bf00      	nop
 800a86c:	0800c2d1 	.word	0x0800c2d1

0800a870 <L_shift>:
 800a870:	f1c2 0208 	rsb	r2, r2, #8
 800a874:	0092      	lsls	r2, r2, #2
 800a876:	b570      	push	{r4, r5, r6, lr}
 800a878:	f1c2 0620 	rsb	r6, r2, #32
 800a87c:	6843      	ldr	r3, [r0, #4]
 800a87e:	6804      	ldr	r4, [r0, #0]
 800a880:	fa03 f506 	lsl.w	r5, r3, r6
 800a884:	432c      	orrs	r4, r5
 800a886:	40d3      	lsrs	r3, r2
 800a888:	6004      	str	r4, [r0, #0]
 800a88a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a88e:	4288      	cmp	r0, r1
 800a890:	d3f4      	bcc.n	800a87c <L_shift+0xc>
 800a892:	bd70      	pop	{r4, r5, r6, pc}

0800a894 <__match>:
 800a894:	b530      	push	{r4, r5, lr}
 800a896:	6803      	ldr	r3, [r0, #0]
 800a898:	3301      	adds	r3, #1
 800a89a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a89e:	b914      	cbnz	r4, 800a8a6 <__match+0x12>
 800a8a0:	6003      	str	r3, [r0, #0]
 800a8a2:	2001      	movs	r0, #1
 800a8a4:	bd30      	pop	{r4, r5, pc}
 800a8a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8ae:	2d19      	cmp	r5, #25
 800a8b0:	bf98      	it	ls
 800a8b2:	3220      	addls	r2, #32
 800a8b4:	42a2      	cmp	r2, r4
 800a8b6:	d0f0      	beq.n	800a89a <__match+0x6>
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e7f3      	b.n	800a8a4 <__match+0x10>

0800a8bc <__hexnan>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	2500      	movs	r5, #0
 800a8c2:	680b      	ldr	r3, [r1, #0]
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	115e      	asrs	r6, r3, #5
 800a8c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8cc:	f013 031f 	ands.w	r3, r3, #31
 800a8d0:	bf18      	it	ne
 800a8d2:	3604      	addne	r6, #4
 800a8d4:	1f37      	subs	r7, r6, #4
 800a8d6:	4690      	mov	r8, r2
 800a8d8:	46b9      	mov	r9, r7
 800a8da:	463c      	mov	r4, r7
 800a8dc:	46ab      	mov	fp, r5
 800a8de:	b087      	sub	sp, #28
 800a8e0:	6801      	ldr	r1, [r0, #0]
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8e8:	9502      	str	r5, [sp, #8]
 800a8ea:	784a      	ldrb	r2, [r1, #1]
 800a8ec:	1c4b      	adds	r3, r1, #1
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	b342      	cbz	r2, 800a944 <__hexnan+0x88>
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	9105      	str	r1, [sp, #20]
 800a8f6:	9204      	str	r2, [sp, #16]
 800a8f8:	f7ff fd75 	bl	800a3e6 <__hexdig_fun>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d14f      	bne.n	800a9a0 <__hexnan+0xe4>
 800a900:	9a04      	ldr	r2, [sp, #16]
 800a902:	9905      	ldr	r1, [sp, #20]
 800a904:	2a20      	cmp	r2, #32
 800a906:	d818      	bhi.n	800a93a <__hexnan+0x7e>
 800a908:	9b02      	ldr	r3, [sp, #8]
 800a90a:	459b      	cmp	fp, r3
 800a90c:	dd13      	ble.n	800a936 <__hexnan+0x7a>
 800a90e:	454c      	cmp	r4, r9
 800a910:	d206      	bcs.n	800a920 <__hexnan+0x64>
 800a912:	2d07      	cmp	r5, #7
 800a914:	dc04      	bgt.n	800a920 <__hexnan+0x64>
 800a916:	462a      	mov	r2, r5
 800a918:	4649      	mov	r1, r9
 800a91a:	4620      	mov	r0, r4
 800a91c:	f7ff ffa8 	bl	800a870 <L_shift>
 800a920:	4544      	cmp	r4, r8
 800a922:	d950      	bls.n	800a9c6 <__hexnan+0x10a>
 800a924:	2300      	movs	r3, #0
 800a926:	f1a4 0904 	sub.w	r9, r4, #4
 800a92a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a92e:	461d      	mov	r5, r3
 800a930:	464c      	mov	r4, r9
 800a932:	f8cd b008 	str.w	fp, [sp, #8]
 800a936:	9903      	ldr	r1, [sp, #12]
 800a938:	e7d7      	b.n	800a8ea <__hexnan+0x2e>
 800a93a:	2a29      	cmp	r2, #41	; 0x29
 800a93c:	d155      	bne.n	800a9ea <__hexnan+0x12e>
 800a93e:	3102      	adds	r1, #2
 800a940:	f8ca 1000 	str.w	r1, [sl]
 800a944:	f1bb 0f00 	cmp.w	fp, #0
 800a948:	d04f      	beq.n	800a9ea <__hexnan+0x12e>
 800a94a:	454c      	cmp	r4, r9
 800a94c:	d206      	bcs.n	800a95c <__hexnan+0xa0>
 800a94e:	2d07      	cmp	r5, #7
 800a950:	dc04      	bgt.n	800a95c <__hexnan+0xa0>
 800a952:	462a      	mov	r2, r5
 800a954:	4649      	mov	r1, r9
 800a956:	4620      	mov	r0, r4
 800a958:	f7ff ff8a 	bl	800a870 <L_shift>
 800a95c:	4544      	cmp	r4, r8
 800a95e:	d934      	bls.n	800a9ca <__hexnan+0x10e>
 800a960:	4623      	mov	r3, r4
 800a962:	f1a8 0204 	sub.w	r2, r8, #4
 800a966:	f853 1b04 	ldr.w	r1, [r3], #4
 800a96a:	429f      	cmp	r7, r3
 800a96c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a970:	d2f9      	bcs.n	800a966 <__hexnan+0xaa>
 800a972:	1b3b      	subs	r3, r7, r4
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	3304      	adds	r3, #4
 800a97a:	3e03      	subs	r6, #3
 800a97c:	3401      	adds	r4, #1
 800a97e:	42a6      	cmp	r6, r4
 800a980:	bf38      	it	cc
 800a982:	2304      	movcc	r3, #4
 800a984:	2200      	movs	r2, #0
 800a986:	4443      	add	r3, r8
 800a988:	f843 2b04 	str.w	r2, [r3], #4
 800a98c:	429f      	cmp	r7, r3
 800a98e:	d2fb      	bcs.n	800a988 <__hexnan+0xcc>
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	b91b      	cbnz	r3, 800a99c <__hexnan+0xe0>
 800a994:	4547      	cmp	r7, r8
 800a996:	d126      	bne.n	800a9e6 <__hexnan+0x12a>
 800a998:	2301      	movs	r3, #1
 800a99a:	603b      	str	r3, [r7, #0]
 800a99c:	2005      	movs	r0, #5
 800a99e:	e025      	b.n	800a9ec <__hexnan+0x130>
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	2d08      	cmp	r5, #8
 800a9a4:	f10b 0b01 	add.w	fp, fp, #1
 800a9a8:	dd06      	ble.n	800a9b8 <__hexnan+0xfc>
 800a9aa:	4544      	cmp	r4, r8
 800a9ac:	d9c3      	bls.n	800a936 <__hexnan+0x7a>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	2501      	movs	r5, #1
 800a9b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9b6:	3c04      	subs	r4, #4
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	f000 000f 	and.w	r0, r0, #15
 800a9be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9c2:	6020      	str	r0, [r4, #0]
 800a9c4:	e7b7      	b.n	800a936 <__hexnan+0x7a>
 800a9c6:	2508      	movs	r5, #8
 800a9c8:	e7b5      	b.n	800a936 <__hexnan+0x7a>
 800a9ca:	9b01      	ldr	r3, [sp, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0df      	beq.n	800a990 <__hexnan+0xd4>
 800a9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d4:	f1c3 0320 	rsb	r3, r3, #32
 800a9d8:	40da      	lsrs	r2, r3
 800a9da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9de:	4013      	ands	r3, r2
 800a9e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9e4:	e7d4      	b.n	800a990 <__hexnan+0xd4>
 800a9e6:	3f04      	subs	r7, #4
 800a9e8:	e7d2      	b.n	800a990 <__hexnan+0xd4>
 800a9ea:	2004      	movs	r0, #4
 800a9ec:	b007      	add	sp, #28
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a9f4 <malloc>:
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <malloc+0xc>)
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f000 b823 	b.w	800aa44 <_malloc_r>
 800a9fe:	bf00      	nop
 800aa00:	200001d0 	.word	0x200001d0

0800aa04 <sbrk_aligned>:
 800aa04:	b570      	push	{r4, r5, r6, lr}
 800aa06:	4e0e      	ldr	r6, [pc, #56]	; (800aa40 <sbrk_aligned+0x3c>)
 800aa08:	460c      	mov	r4, r1
 800aa0a:	6831      	ldr	r1, [r6, #0]
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	b911      	cbnz	r1, 800aa16 <sbrk_aligned+0x12>
 800aa10:	f000 ffce 	bl	800b9b0 <_sbrk_r>
 800aa14:	6030      	str	r0, [r6, #0]
 800aa16:	4621      	mov	r1, r4
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f000 ffc9 	bl	800b9b0 <_sbrk_r>
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	d00a      	beq.n	800aa38 <sbrk_aligned+0x34>
 800aa22:	1cc4      	adds	r4, r0, #3
 800aa24:	f024 0403 	bic.w	r4, r4, #3
 800aa28:	42a0      	cmp	r0, r4
 800aa2a:	d007      	beq.n	800aa3c <sbrk_aligned+0x38>
 800aa2c:	1a21      	subs	r1, r4, r0
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f000 ffbe 	bl	800b9b0 <_sbrk_r>
 800aa34:	3001      	adds	r0, #1
 800aa36:	d101      	bne.n	800aa3c <sbrk_aligned+0x38>
 800aa38:	f04f 34ff 	mov.w	r4, #4294967295
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	20000608 	.word	0x20000608

0800aa44 <_malloc_r>:
 800aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa48:	1ccd      	adds	r5, r1, #3
 800aa4a:	f025 0503 	bic.w	r5, r5, #3
 800aa4e:	3508      	adds	r5, #8
 800aa50:	2d0c      	cmp	r5, #12
 800aa52:	bf38      	it	cc
 800aa54:	250c      	movcc	r5, #12
 800aa56:	2d00      	cmp	r5, #0
 800aa58:	4607      	mov	r7, r0
 800aa5a:	db01      	blt.n	800aa60 <_malloc_r+0x1c>
 800aa5c:	42a9      	cmp	r1, r5
 800aa5e:	d905      	bls.n	800aa6c <_malloc_r+0x28>
 800aa60:	230c      	movs	r3, #12
 800aa62:	2600      	movs	r6, #0
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4630      	mov	r0, r6
 800aa68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab40 <_malloc_r+0xfc>
 800aa70:	f000 f87a 	bl	800ab68 <__malloc_lock>
 800aa74:	f8d8 3000 	ldr.w	r3, [r8]
 800aa78:	461c      	mov	r4, r3
 800aa7a:	bb5c      	cbnz	r4, 800aad4 <_malloc_r+0x90>
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4638      	mov	r0, r7
 800aa80:	f7ff ffc0 	bl	800aa04 <sbrk_aligned>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	4604      	mov	r4, r0
 800aa88:	d155      	bne.n	800ab36 <_malloc_r+0xf2>
 800aa8a:	f8d8 4000 	ldr.w	r4, [r8]
 800aa8e:	4626      	mov	r6, r4
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	d145      	bne.n	800ab20 <_malloc_r+0xdc>
 800aa94:	2c00      	cmp	r4, #0
 800aa96:	d048      	beq.n	800ab2a <_malloc_r+0xe6>
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	4631      	mov	r1, r6
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	eb04 0903 	add.w	r9, r4, r3
 800aaa2:	f000 ff85 	bl	800b9b0 <_sbrk_r>
 800aaa6:	4581      	cmp	r9, r0
 800aaa8:	d13f      	bne.n	800ab2a <_malloc_r+0xe6>
 800aaaa:	6821      	ldr	r1, [r4, #0]
 800aaac:	4638      	mov	r0, r7
 800aaae:	1a6d      	subs	r5, r5, r1
 800aab0:	4629      	mov	r1, r5
 800aab2:	f7ff ffa7 	bl	800aa04 <sbrk_aligned>
 800aab6:	3001      	adds	r0, #1
 800aab8:	d037      	beq.n	800ab2a <_malloc_r+0xe6>
 800aaba:	6823      	ldr	r3, [r4, #0]
 800aabc:	442b      	add	r3, r5
 800aabe:	6023      	str	r3, [r4, #0]
 800aac0:	f8d8 3000 	ldr.w	r3, [r8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d038      	beq.n	800ab3a <_malloc_r+0xf6>
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	42a2      	cmp	r2, r4
 800aacc:	d12b      	bne.n	800ab26 <_malloc_r+0xe2>
 800aace:	2200      	movs	r2, #0
 800aad0:	605a      	str	r2, [r3, #4]
 800aad2:	e00f      	b.n	800aaf4 <_malloc_r+0xb0>
 800aad4:	6822      	ldr	r2, [r4, #0]
 800aad6:	1b52      	subs	r2, r2, r5
 800aad8:	d41f      	bmi.n	800ab1a <_malloc_r+0xd6>
 800aada:	2a0b      	cmp	r2, #11
 800aadc:	d917      	bls.n	800ab0e <_malloc_r+0xca>
 800aade:	1961      	adds	r1, r4, r5
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	6025      	str	r5, [r4, #0]
 800aae4:	bf18      	it	ne
 800aae6:	6059      	strne	r1, [r3, #4]
 800aae8:	6863      	ldr	r3, [r4, #4]
 800aaea:	bf08      	it	eq
 800aaec:	f8c8 1000 	streq.w	r1, [r8]
 800aaf0:	5162      	str	r2, [r4, r5]
 800aaf2:	604b      	str	r3, [r1, #4]
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f104 060b 	add.w	r6, r4, #11
 800aafa:	f000 f83b 	bl	800ab74 <__malloc_unlock>
 800aafe:	f026 0607 	bic.w	r6, r6, #7
 800ab02:	1d23      	adds	r3, r4, #4
 800ab04:	1af2      	subs	r2, r6, r3
 800ab06:	d0ae      	beq.n	800aa66 <_malloc_r+0x22>
 800ab08:	1b9b      	subs	r3, r3, r6
 800ab0a:	50a3      	str	r3, [r4, r2]
 800ab0c:	e7ab      	b.n	800aa66 <_malloc_r+0x22>
 800ab0e:	42a3      	cmp	r3, r4
 800ab10:	6862      	ldr	r2, [r4, #4]
 800ab12:	d1dd      	bne.n	800aad0 <_malloc_r+0x8c>
 800ab14:	f8c8 2000 	str.w	r2, [r8]
 800ab18:	e7ec      	b.n	800aaf4 <_malloc_r+0xb0>
 800ab1a:	4623      	mov	r3, r4
 800ab1c:	6864      	ldr	r4, [r4, #4]
 800ab1e:	e7ac      	b.n	800aa7a <_malloc_r+0x36>
 800ab20:	4634      	mov	r4, r6
 800ab22:	6876      	ldr	r6, [r6, #4]
 800ab24:	e7b4      	b.n	800aa90 <_malloc_r+0x4c>
 800ab26:	4613      	mov	r3, r2
 800ab28:	e7cc      	b.n	800aac4 <_malloc_r+0x80>
 800ab2a:	230c      	movs	r3, #12
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	603b      	str	r3, [r7, #0]
 800ab30:	f000 f820 	bl	800ab74 <__malloc_unlock>
 800ab34:	e797      	b.n	800aa66 <_malloc_r+0x22>
 800ab36:	6025      	str	r5, [r4, #0]
 800ab38:	e7dc      	b.n	800aaf4 <_malloc_r+0xb0>
 800ab3a:	605b      	str	r3, [r3, #4]
 800ab3c:	deff      	udf	#255	; 0xff
 800ab3e:	bf00      	nop
 800ab40:	20000604 	.word	0x20000604

0800ab44 <__ascii_mbtowc>:
 800ab44:	b082      	sub	sp, #8
 800ab46:	b901      	cbnz	r1, 800ab4a <__ascii_mbtowc+0x6>
 800ab48:	a901      	add	r1, sp, #4
 800ab4a:	b142      	cbz	r2, 800ab5e <__ascii_mbtowc+0x1a>
 800ab4c:	b14b      	cbz	r3, 800ab62 <__ascii_mbtowc+0x1e>
 800ab4e:	7813      	ldrb	r3, [r2, #0]
 800ab50:	600b      	str	r3, [r1, #0]
 800ab52:	7812      	ldrb	r2, [r2, #0]
 800ab54:	1e10      	subs	r0, r2, #0
 800ab56:	bf18      	it	ne
 800ab58:	2001      	movne	r0, #1
 800ab5a:	b002      	add	sp, #8
 800ab5c:	4770      	bx	lr
 800ab5e:	4610      	mov	r0, r2
 800ab60:	e7fb      	b.n	800ab5a <__ascii_mbtowc+0x16>
 800ab62:	f06f 0001 	mvn.w	r0, #1
 800ab66:	e7f8      	b.n	800ab5a <__ascii_mbtowc+0x16>

0800ab68 <__malloc_lock>:
 800ab68:	4801      	ldr	r0, [pc, #4]	; (800ab70 <__malloc_lock+0x8>)
 800ab6a:	f7fe bd0f 	b.w	800958c <__retarget_lock_acquire_recursive>
 800ab6e:	bf00      	nop
 800ab70:	20000600 	.word	0x20000600

0800ab74 <__malloc_unlock>:
 800ab74:	4801      	ldr	r0, [pc, #4]	; (800ab7c <__malloc_unlock+0x8>)
 800ab76:	f7fe bd0a 	b.w	800958e <__retarget_lock_release_recursive>
 800ab7a:	bf00      	nop
 800ab7c:	20000600 	.word	0x20000600

0800ab80 <_Balloc>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	69c6      	ldr	r6, [r0, #28]
 800ab84:	4604      	mov	r4, r0
 800ab86:	460d      	mov	r5, r1
 800ab88:	b976      	cbnz	r6, 800aba8 <_Balloc+0x28>
 800ab8a:	2010      	movs	r0, #16
 800ab8c:	f7ff ff32 	bl	800a9f4 <malloc>
 800ab90:	4602      	mov	r2, r0
 800ab92:	61e0      	str	r0, [r4, #28]
 800ab94:	b920      	cbnz	r0, 800aba0 <_Balloc+0x20>
 800ab96:	216b      	movs	r1, #107	; 0x6b
 800ab98:	4b17      	ldr	r3, [pc, #92]	; (800abf8 <_Balloc+0x78>)
 800ab9a:	4818      	ldr	r0, [pc, #96]	; (800abfc <_Balloc+0x7c>)
 800ab9c:	f000 ff18 	bl	800b9d0 <__assert_func>
 800aba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aba4:	6006      	str	r6, [r0, #0]
 800aba6:	60c6      	str	r6, [r0, #12]
 800aba8:	69e6      	ldr	r6, [r4, #28]
 800abaa:	68f3      	ldr	r3, [r6, #12]
 800abac:	b183      	cbz	r3, 800abd0 <_Balloc+0x50>
 800abae:	69e3      	ldr	r3, [r4, #28]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abb6:	b9b8      	cbnz	r0, 800abe8 <_Balloc+0x68>
 800abb8:	2101      	movs	r1, #1
 800abba:	fa01 f605 	lsl.w	r6, r1, r5
 800abbe:	1d72      	adds	r2, r6, #5
 800abc0:	4620      	mov	r0, r4
 800abc2:	0092      	lsls	r2, r2, #2
 800abc4:	f000 ff22 	bl	800ba0c <_calloc_r>
 800abc8:	b160      	cbz	r0, 800abe4 <_Balloc+0x64>
 800abca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abce:	e00e      	b.n	800abee <_Balloc+0x6e>
 800abd0:	2221      	movs	r2, #33	; 0x21
 800abd2:	2104      	movs	r1, #4
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 ff19 	bl	800ba0c <_calloc_r>
 800abda:	69e3      	ldr	r3, [r4, #28]
 800abdc:	60f0      	str	r0, [r6, #12]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1e4      	bne.n	800abae <_Balloc+0x2e>
 800abe4:	2000      	movs	r0, #0
 800abe6:	bd70      	pop	{r4, r5, r6, pc}
 800abe8:	6802      	ldr	r2, [r0, #0]
 800abea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abee:	2300      	movs	r3, #0
 800abf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abf4:	e7f7      	b.n	800abe6 <_Balloc+0x66>
 800abf6:	bf00      	nop
 800abf8:	0800c262 	.word	0x0800c262
 800abfc:	0800c342 	.word	0x0800c342

0800ac00 <_Bfree>:
 800ac00:	b570      	push	{r4, r5, r6, lr}
 800ac02:	69c6      	ldr	r6, [r0, #28]
 800ac04:	4605      	mov	r5, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	b976      	cbnz	r6, 800ac28 <_Bfree+0x28>
 800ac0a:	2010      	movs	r0, #16
 800ac0c:	f7ff fef2 	bl	800a9f4 <malloc>
 800ac10:	4602      	mov	r2, r0
 800ac12:	61e8      	str	r0, [r5, #28]
 800ac14:	b920      	cbnz	r0, 800ac20 <_Bfree+0x20>
 800ac16:	218f      	movs	r1, #143	; 0x8f
 800ac18:	4b08      	ldr	r3, [pc, #32]	; (800ac3c <_Bfree+0x3c>)
 800ac1a:	4809      	ldr	r0, [pc, #36]	; (800ac40 <_Bfree+0x40>)
 800ac1c:	f000 fed8 	bl	800b9d0 <__assert_func>
 800ac20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac24:	6006      	str	r6, [r0, #0]
 800ac26:	60c6      	str	r6, [r0, #12]
 800ac28:	b13c      	cbz	r4, 800ac3a <_Bfree+0x3a>
 800ac2a:	69eb      	ldr	r3, [r5, #28]
 800ac2c:	6862      	ldr	r2, [r4, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac34:	6021      	str	r1, [r4, #0]
 800ac36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac3a:	bd70      	pop	{r4, r5, r6, pc}
 800ac3c:	0800c262 	.word	0x0800c262
 800ac40:	0800c342 	.word	0x0800c342

0800ac44 <__multadd>:
 800ac44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac48:	4607      	mov	r7, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	461e      	mov	r6, r3
 800ac4e:	2000      	movs	r0, #0
 800ac50:	690d      	ldr	r5, [r1, #16]
 800ac52:	f101 0c14 	add.w	ip, r1, #20
 800ac56:	f8dc 3000 	ldr.w	r3, [ip]
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	b299      	uxth	r1, r3
 800ac5e:	fb02 6101 	mla	r1, r2, r1, r6
 800ac62:	0c1e      	lsrs	r6, r3, #16
 800ac64:	0c0b      	lsrs	r3, r1, #16
 800ac66:	fb02 3306 	mla	r3, r2, r6, r3
 800ac6a:	b289      	uxth	r1, r1
 800ac6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac70:	4285      	cmp	r5, r0
 800ac72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac76:	f84c 1b04 	str.w	r1, [ip], #4
 800ac7a:	dcec      	bgt.n	800ac56 <__multadd+0x12>
 800ac7c:	b30e      	cbz	r6, 800acc2 <__multadd+0x7e>
 800ac7e:	68a3      	ldr	r3, [r4, #8]
 800ac80:	42ab      	cmp	r3, r5
 800ac82:	dc19      	bgt.n	800acb8 <__multadd+0x74>
 800ac84:	6861      	ldr	r1, [r4, #4]
 800ac86:	4638      	mov	r0, r7
 800ac88:	3101      	adds	r1, #1
 800ac8a:	f7ff ff79 	bl	800ab80 <_Balloc>
 800ac8e:	4680      	mov	r8, r0
 800ac90:	b928      	cbnz	r0, 800ac9e <__multadd+0x5a>
 800ac92:	4602      	mov	r2, r0
 800ac94:	21ba      	movs	r1, #186	; 0xba
 800ac96:	4b0c      	ldr	r3, [pc, #48]	; (800acc8 <__multadd+0x84>)
 800ac98:	480c      	ldr	r0, [pc, #48]	; (800accc <__multadd+0x88>)
 800ac9a:	f000 fe99 	bl	800b9d0 <__assert_func>
 800ac9e:	6922      	ldr	r2, [r4, #16]
 800aca0:	f104 010c 	add.w	r1, r4, #12
 800aca4:	3202      	adds	r2, #2
 800aca6:	0092      	lsls	r2, r2, #2
 800aca8:	300c      	adds	r0, #12
 800acaa:	f7fe fc7f 	bl	80095ac <memcpy>
 800acae:	4621      	mov	r1, r4
 800acb0:	4638      	mov	r0, r7
 800acb2:	f7ff ffa5 	bl	800ac00 <_Bfree>
 800acb6:	4644      	mov	r4, r8
 800acb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acbc:	3501      	adds	r5, #1
 800acbe:	615e      	str	r6, [r3, #20]
 800acc0:	6125      	str	r5, [r4, #16]
 800acc2:	4620      	mov	r0, r4
 800acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc8:	0800c2d1 	.word	0x0800c2d1
 800accc:	0800c342 	.word	0x0800c342

0800acd0 <__s2b>:
 800acd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd4:	4615      	mov	r5, r2
 800acd6:	2209      	movs	r2, #9
 800acd8:	461f      	mov	r7, r3
 800acda:	3308      	adds	r3, #8
 800acdc:	460c      	mov	r4, r1
 800acde:	fb93 f3f2 	sdiv	r3, r3, r2
 800ace2:	4606      	mov	r6, r0
 800ace4:	2201      	movs	r2, #1
 800ace6:	2100      	movs	r1, #0
 800ace8:	429a      	cmp	r2, r3
 800acea:	db09      	blt.n	800ad00 <__s2b+0x30>
 800acec:	4630      	mov	r0, r6
 800acee:	f7ff ff47 	bl	800ab80 <_Balloc>
 800acf2:	b940      	cbnz	r0, 800ad06 <__s2b+0x36>
 800acf4:	4602      	mov	r2, r0
 800acf6:	21d3      	movs	r1, #211	; 0xd3
 800acf8:	4b18      	ldr	r3, [pc, #96]	; (800ad5c <__s2b+0x8c>)
 800acfa:	4819      	ldr	r0, [pc, #100]	; (800ad60 <__s2b+0x90>)
 800acfc:	f000 fe68 	bl	800b9d0 <__assert_func>
 800ad00:	0052      	lsls	r2, r2, #1
 800ad02:	3101      	adds	r1, #1
 800ad04:	e7f0      	b.n	800ace8 <__s2b+0x18>
 800ad06:	9b08      	ldr	r3, [sp, #32]
 800ad08:	2d09      	cmp	r5, #9
 800ad0a:	6143      	str	r3, [r0, #20]
 800ad0c:	f04f 0301 	mov.w	r3, #1
 800ad10:	6103      	str	r3, [r0, #16]
 800ad12:	dd16      	ble.n	800ad42 <__s2b+0x72>
 800ad14:	f104 0909 	add.w	r9, r4, #9
 800ad18:	46c8      	mov	r8, r9
 800ad1a:	442c      	add	r4, r5
 800ad1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad20:	4601      	mov	r1, r0
 800ad22:	220a      	movs	r2, #10
 800ad24:	4630      	mov	r0, r6
 800ad26:	3b30      	subs	r3, #48	; 0x30
 800ad28:	f7ff ff8c 	bl	800ac44 <__multadd>
 800ad2c:	45a0      	cmp	r8, r4
 800ad2e:	d1f5      	bne.n	800ad1c <__s2b+0x4c>
 800ad30:	f1a5 0408 	sub.w	r4, r5, #8
 800ad34:	444c      	add	r4, r9
 800ad36:	1b2d      	subs	r5, r5, r4
 800ad38:	1963      	adds	r3, r4, r5
 800ad3a:	42bb      	cmp	r3, r7
 800ad3c:	db04      	blt.n	800ad48 <__s2b+0x78>
 800ad3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad42:	2509      	movs	r5, #9
 800ad44:	340a      	adds	r4, #10
 800ad46:	e7f6      	b.n	800ad36 <__s2b+0x66>
 800ad48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	220a      	movs	r2, #10
 800ad50:	4630      	mov	r0, r6
 800ad52:	3b30      	subs	r3, #48	; 0x30
 800ad54:	f7ff ff76 	bl	800ac44 <__multadd>
 800ad58:	e7ee      	b.n	800ad38 <__s2b+0x68>
 800ad5a:	bf00      	nop
 800ad5c:	0800c2d1 	.word	0x0800c2d1
 800ad60:	0800c342 	.word	0x0800c342

0800ad64 <__hi0bits>:
 800ad64:	0c02      	lsrs	r2, r0, #16
 800ad66:	0412      	lsls	r2, r2, #16
 800ad68:	4603      	mov	r3, r0
 800ad6a:	b9ca      	cbnz	r2, 800ada0 <__hi0bits+0x3c>
 800ad6c:	0403      	lsls	r3, r0, #16
 800ad6e:	2010      	movs	r0, #16
 800ad70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad74:	bf04      	itt	eq
 800ad76:	021b      	lsleq	r3, r3, #8
 800ad78:	3008      	addeq	r0, #8
 800ad7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad7e:	bf04      	itt	eq
 800ad80:	011b      	lsleq	r3, r3, #4
 800ad82:	3004      	addeq	r0, #4
 800ad84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad88:	bf04      	itt	eq
 800ad8a:	009b      	lsleq	r3, r3, #2
 800ad8c:	3002      	addeq	r0, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	db05      	blt.n	800ad9e <__hi0bits+0x3a>
 800ad92:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad96:	f100 0001 	add.w	r0, r0, #1
 800ad9a:	bf08      	it	eq
 800ad9c:	2020      	moveq	r0, #32
 800ad9e:	4770      	bx	lr
 800ada0:	2000      	movs	r0, #0
 800ada2:	e7e5      	b.n	800ad70 <__hi0bits+0xc>

0800ada4 <__lo0bits>:
 800ada4:	6803      	ldr	r3, [r0, #0]
 800ada6:	4602      	mov	r2, r0
 800ada8:	f013 0007 	ands.w	r0, r3, #7
 800adac:	d00b      	beq.n	800adc6 <__lo0bits+0x22>
 800adae:	07d9      	lsls	r1, r3, #31
 800adb0:	d421      	bmi.n	800adf6 <__lo0bits+0x52>
 800adb2:	0798      	lsls	r0, r3, #30
 800adb4:	bf49      	itett	mi
 800adb6:	085b      	lsrmi	r3, r3, #1
 800adb8:	089b      	lsrpl	r3, r3, #2
 800adba:	2001      	movmi	r0, #1
 800adbc:	6013      	strmi	r3, [r2, #0]
 800adbe:	bf5c      	itt	pl
 800adc0:	2002      	movpl	r0, #2
 800adc2:	6013      	strpl	r3, [r2, #0]
 800adc4:	4770      	bx	lr
 800adc6:	b299      	uxth	r1, r3
 800adc8:	b909      	cbnz	r1, 800adce <__lo0bits+0x2a>
 800adca:	2010      	movs	r0, #16
 800adcc:	0c1b      	lsrs	r3, r3, #16
 800adce:	b2d9      	uxtb	r1, r3
 800add0:	b909      	cbnz	r1, 800add6 <__lo0bits+0x32>
 800add2:	3008      	adds	r0, #8
 800add4:	0a1b      	lsrs	r3, r3, #8
 800add6:	0719      	lsls	r1, r3, #28
 800add8:	bf04      	itt	eq
 800adda:	091b      	lsreq	r3, r3, #4
 800addc:	3004      	addeq	r0, #4
 800adde:	0799      	lsls	r1, r3, #30
 800ade0:	bf04      	itt	eq
 800ade2:	089b      	lsreq	r3, r3, #2
 800ade4:	3002      	addeq	r0, #2
 800ade6:	07d9      	lsls	r1, r3, #31
 800ade8:	d403      	bmi.n	800adf2 <__lo0bits+0x4e>
 800adea:	085b      	lsrs	r3, r3, #1
 800adec:	f100 0001 	add.w	r0, r0, #1
 800adf0:	d003      	beq.n	800adfa <__lo0bits+0x56>
 800adf2:	6013      	str	r3, [r2, #0]
 800adf4:	4770      	bx	lr
 800adf6:	2000      	movs	r0, #0
 800adf8:	4770      	bx	lr
 800adfa:	2020      	movs	r0, #32
 800adfc:	4770      	bx	lr
	...

0800ae00 <__i2b>:
 800ae00:	b510      	push	{r4, lr}
 800ae02:	460c      	mov	r4, r1
 800ae04:	2101      	movs	r1, #1
 800ae06:	f7ff febb 	bl	800ab80 <_Balloc>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	b928      	cbnz	r0, 800ae1a <__i2b+0x1a>
 800ae0e:	f240 1145 	movw	r1, #325	; 0x145
 800ae12:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <__i2b+0x24>)
 800ae14:	4804      	ldr	r0, [pc, #16]	; (800ae28 <__i2b+0x28>)
 800ae16:	f000 fddb 	bl	800b9d0 <__assert_func>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	6144      	str	r4, [r0, #20]
 800ae1e:	6103      	str	r3, [r0, #16]
 800ae20:	bd10      	pop	{r4, pc}
 800ae22:	bf00      	nop
 800ae24:	0800c2d1 	.word	0x0800c2d1
 800ae28:	0800c342 	.word	0x0800c342

0800ae2c <__multiply>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	4691      	mov	r9, r2
 800ae32:	690a      	ldr	r2, [r1, #16]
 800ae34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae38:	460c      	mov	r4, r1
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	bfbe      	ittt	lt
 800ae3e:	460b      	movlt	r3, r1
 800ae40:	464c      	movlt	r4, r9
 800ae42:	4699      	movlt	r9, r3
 800ae44:	6927      	ldr	r7, [r4, #16]
 800ae46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae4a:	68a3      	ldr	r3, [r4, #8]
 800ae4c:	6861      	ldr	r1, [r4, #4]
 800ae4e:	eb07 060a 	add.w	r6, r7, sl
 800ae52:	42b3      	cmp	r3, r6
 800ae54:	b085      	sub	sp, #20
 800ae56:	bfb8      	it	lt
 800ae58:	3101      	addlt	r1, #1
 800ae5a:	f7ff fe91 	bl	800ab80 <_Balloc>
 800ae5e:	b930      	cbnz	r0, 800ae6e <__multiply+0x42>
 800ae60:	4602      	mov	r2, r0
 800ae62:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ae66:	4b43      	ldr	r3, [pc, #268]	; (800af74 <__multiply+0x148>)
 800ae68:	4843      	ldr	r0, [pc, #268]	; (800af78 <__multiply+0x14c>)
 800ae6a:	f000 fdb1 	bl	800b9d0 <__assert_func>
 800ae6e:	f100 0514 	add.w	r5, r0, #20
 800ae72:	462b      	mov	r3, r5
 800ae74:	2200      	movs	r2, #0
 800ae76:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae7a:	4543      	cmp	r3, r8
 800ae7c:	d321      	bcc.n	800aec2 <__multiply+0x96>
 800ae7e:	f104 0314 	add.w	r3, r4, #20
 800ae82:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae86:	f109 0314 	add.w	r3, r9, #20
 800ae8a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae8e:	9202      	str	r2, [sp, #8]
 800ae90:	1b3a      	subs	r2, r7, r4
 800ae92:	3a15      	subs	r2, #21
 800ae94:	f022 0203 	bic.w	r2, r2, #3
 800ae98:	3204      	adds	r2, #4
 800ae9a:	f104 0115 	add.w	r1, r4, #21
 800ae9e:	428f      	cmp	r7, r1
 800aea0:	bf38      	it	cc
 800aea2:	2204      	movcc	r2, #4
 800aea4:	9201      	str	r2, [sp, #4]
 800aea6:	9a02      	ldr	r2, [sp, #8]
 800aea8:	9303      	str	r3, [sp, #12]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d80c      	bhi.n	800aec8 <__multiply+0x9c>
 800aeae:	2e00      	cmp	r6, #0
 800aeb0:	dd03      	ble.n	800aeba <__multiply+0x8e>
 800aeb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d05a      	beq.n	800af70 <__multiply+0x144>
 800aeba:	6106      	str	r6, [r0, #16]
 800aebc:	b005      	add	sp, #20
 800aebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aec2:	f843 2b04 	str.w	r2, [r3], #4
 800aec6:	e7d8      	b.n	800ae7a <__multiply+0x4e>
 800aec8:	f8b3 a000 	ldrh.w	sl, [r3]
 800aecc:	f1ba 0f00 	cmp.w	sl, #0
 800aed0:	d023      	beq.n	800af1a <__multiply+0xee>
 800aed2:	46a9      	mov	r9, r5
 800aed4:	f04f 0c00 	mov.w	ip, #0
 800aed8:	f104 0e14 	add.w	lr, r4, #20
 800aedc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aee0:	f8d9 1000 	ldr.w	r1, [r9]
 800aee4:	fa1f fb82 	uxth.w	fp, r2
 800aee8:	b289      	uxth	r1, r1
 800aeea:	fb0a 110b 	mla	r1, sl, fp, r1
 800aeee:	4461      	add	r1, ip
 800aef0:	f8d9 c000 	ldr.w	ip, [r9]
 800aef4:	0c12      	lsrs	r2, r2, #16
 800aef6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aefa:	fb0a c202 	mla	r2, sl, r2, ip
 800aefe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af02:	b289      	uxth	r1, r1
 800af04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af08:	4577      	cmp	r7, lr
 800af0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af0e:	f849 1b04 	str.w	r1, [r9], #4
 800af12:	d8e3      	bhi.n	800aedc <__multiply+0xb0>
 800af14:	9a01      	ldr	r2, [sp, #4]
 800af16:	f845 c002 	str.w	ip, [r5, r2]
 800af1a:	9a03      	ldr	r2, [sp, #12]
 800af1c:	3304      	adds	r3, #4
 800af1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af22:	f1b9 0f00 	cmp.w	r9, #0
 800af26:	d021      	beq.n	800af6c <__multiply+0x140>
 800af28:	46ae      	mov	lr, r5
 800af2a:	f04f 0a00 	mov.w	sl, #0
 800af2e:	6829      	ldr	r1, [r5, #0]
 800af30:	f104 0c14 	add.w	ip, r4, #20
 800af34:	f8bc b000 	ldrh.w	fp, [ip]
 800af38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af3c:	b289      	uxth	r1, r1
 800af3e:	fb09 220b 	mla	r2, r9, fp, r2
 800af42:	4452      	add	r2, sl
 800af44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af48:	f84e 1b04 	str.w	r1, [lr], #4
 800af4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af54:	f8be 1000 	ldrh.w	r1, [lr]
 800af58:	4567      	cmp	r7, ip
 800af5a:	fb09 110a 	mla	r1, r9, sl, r1
 800af5e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af62:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af66:	d8e5      	bhi.n	800af34 <__multiply+0x108>
 800af68:	9a01      	ldr	r2, [sp, #4]
 800af6a:	50a9      	str	r1, [r5, r2]
 800af6c:	3504      	adds	r5, #4
 800af6e:	e79a      	b.n	800aea6 <__multiply+0x7a>
 800af70:	3e01      	subs	r6, #1
 800af72:	e79c      	b.n	800aeae <__multiply+0x82>
 800af74:	0800c2d1 	.word	0x0800c2d1
 800af78:	0800c342 	.word	0x0800c342

0800af7c <__pow5mult>:
 800af7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af80:	4615      	mov	r5, r2
 800af82:	f012 0203 	ands.w	r2, r2, #3
 800af86:	4606      	mov	r6, r0
 800af88:	460f      	mov	r7, r1
 800af8a:	d007      	beq.n	800af9c <__pow5mult+0x20>
 800af8c:	4c25      	ldr	r4, [pc, #148]	; (800b024 <__pow5mult+0xa8>)
 800af8e:	3a01      	subs	r2, #1
 800af90:	2300      	movs	r3, #0
 800af92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af96:	f7ff fe55 	bl	800ac44 <__multadd>
 800af9a:	4607      	mov	r7, r0
 800af9c:	10ad      	asrs	r5, r5, #2
 800af9e:	d03d      	beq.n	800b01c <__pow5mult+0xa0>
 800afa0:	69f4      	ldr	r4, [r6, #28]
 800afa2:	b97c      	cbnz	r4, 800afc4 <__pow5mult+0x48>
 800afa4:	2010      	movs	r0, #16
 800afa6:	f7ff fd25 	bl	800a9f4 <malloc>
 800afaa:	4602      	mov	r2, r0
 800afac:	61f0      	str	r0, [r6, #28]
 800afae:	b928      	cbnz	r0, 800afbc <__pow5mult+0x40>
 800afb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800afb4:	4b1c      	ldr	r3, [pc, #112]	; (800b028 <__pow5mult+0xac>)
 800afb6:	481d      	ldr	r0, [pc, #116]	; (800b02c <__pow5mult+0xb0>)
 800afb8:	f000 fd0a 	bl	800b9d0 <__assert_func>
 800afbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afc0:	6004      	str	r4, [r0, #0]
 800afc2:	60c4      	str	r4, [r0, #12]
 800afc4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800afc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afcc:	b94c      	cbnz	r4, 800afe2 <__pow5mult+0x66>
 800afce:	f240 2171 	movw	r1, #625	; 0x271
 800afd2:	4630      	mov	r0, r6
 800afd4:	f7ff ff14 	bl	800ae00 <__i2b>
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	f8c8 0008 	str.w	r0, [r8, #8]
 800afe0:	6003      	str	r3, [r0, #0]
 800afe2:	f04f 0900 	mov.w	r9, #0
 800afe6:	07eb      	lsls	r3, r5, #31
 800afe8:	d50a      	bpl.n	800b000 <__pow5mult+0x84>
 800afea:	4639      	mov	r1, r7
 800afec:	4622      	mov	r2, r4
 800afee:	4630      	mov	r0, r6
 800aff0:	f7ff ff1c 	bl	800ae2c <__multiply>
 800aff4:	4680      	mov	r8, r0
 800aff6:	4639      	mov	r1, r7
 800aff8:	4630      	mov	r0, r6
 800affa:	f7ff fe01 	bl	800ac00 <_Bfree>
 800affe:	4647      	mov	r7, r8
 800b000:	106d      	asrs	r5, r5, #1
 800b002:	d00b      	beq.n	800b01c <__pow5mult+0xa0>
 800b004:	6820      	ldr	r0, [r4, #0]
 800b006:	b938      	cbnz	r0, 800b018 <__pow5mult+0x9c>
 800b008:	4622      	mov	r2, r4
 800b00a:	4621      	mov	r1, r4
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7ff ff0d 	bl	800ae2c <__multiply>
 800b012:	6020      	str	r0, [r4, #0]
 800b014:	f8c0 9000 	str.w	r9, [r0]
 800b018:	4604      	mov	r4, r0
 800b01a:	e7e4      	b.n	800afe6 <__pow5mult+0x6a>
 800b01c:	4638      	mov	r0, r7
 800b01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b022:	bf00      	nop
 800b024:	0800c490 	.word	0x0800c490
 800b028:	0800c262 	.word	0x0800c262
 800b02c:	0800c342 	.word	0x0800c342

0800b030 <__lshift>:
 800b030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b034:	460c      	mov	r4, r1
 800b036:	4607      	mov	r7, r0
 800b038:	4691      	mov	r9, r2
 800b03a:	6923      	ldr	r3, [r4, #16]
 800b03c:	6849      	ldr	r1, [r1, #4]
 800b03e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b042:	68a3      	ldr	r3, [r4, #8]
 800b044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b048:	f108 0601 	add.w	r6, r8, #1
 800b04c:	42b3      	cmp	r3, r6
 800b04e:	db0b      	blt.n	800b068 <__lshift+0x38>
 800b050:	4638      	mov	r0, r7
 800b052:	f7ff fd95 	bl	800ab80 <_Balloc>
 800b056:	4605      	mov	r5, r0
 800b058:	b948      	cbnz	r0, 800b06e <__lshift+0x3e>
 800b05a:	4602      	mov	r2, r0
 800b05c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b060:	4b27      	ldr	r3, [pc, #156]	; (800b100 <__lshift+0xd0>)
 800b062:	4828      	ldr	r0, [pc, #160]	; (800b104 <__lshift+0xd4>)
 800b064:	f000 fcb4 	bl	800b9d0 <__assert_func>
 800b068:	3101      	adds	r1, #1
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	e7ee      	b.n	800b04c <__lshift+0x1c>
 800b06e:	2300      	movs	r3, #0
 800b070:	f100 0114 	add.w	r1, r0, #20
 800b074:	f100 0210 	add.w	r2, r0, #16
 800b078:	4618      	mov	r0, r3
 800b07a:	4553      	cmp	r3, sl
 800b07c:	db33      	blt.n	800b0e6 <__lshift+0xb6>
 800b07e:	6920      	ldr	r0, [r4, #16]
 800b080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b084:	f104 0314 	add.w	r3, r4, #20
 800b088:	f019 091f 	ands.w	r9, r9, #31
 800b08c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b090:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b094:	d02b      	beq.n	800b0ee <__lshift+0xbe>
 800b096:	468a      	mov	sl, r1
 800b098:	2200      	movs	r2, #0
 800b09a:	f1c9 0e20 	rsb	lr, r9, #32
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	fa00 f009 	lsl.w	r0, r0, r9
 800b0a4:	4310      	orrs	r0, r2
 800b0a6:	f84a 0b04 	str.w	r0, [sl], #4
 800b0aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ae:	459c      	cmp	ip, r3
 800b0b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b0b4:	d8f3      	bhi.n	800b09e <__lshift+0x6e>
 800b0b6:	ebac 0304 	sub.w	r3, ip, r4
 800b0ba:	3b15      	subs	r3, #21
 800b0bc:	f023 0303 	bic.w	r3, r3, #3
 800b0c0:	3304      	adds	r3, #4
 800b0c2:	f104 0015 	add.w	r0, r4, #21
 800b0c6:	4584      	cmp	ip, r0
 800b0c8:	bf38      	it	cc
 800b0ca:	2304      	movcc	r3, #4
 800b0cc:	50ca      	str	r2, [r1, r3]
 800b0ce:	b10a      	cbz	r2, 800b0d4 <__lshift+0xa4>
 800b0d0:	f108 0602 	add.w	r6, r8, #2
 800b0d4:	3e01      	subs	r6, #1
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	4621      	mov	r1, r4
 800b0da:	612e      	str	r6, [r5, #16]
 800b0dc:	f7ff fd90 	bl	800ac00 <_Bfree>
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	e7c5      	b.n	800b07a <__lshift+0x4a>
 800b0ee:	3904      	subs	r1, #4
 800b0f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0f4:	459c      	cmp	ip, r3
 800b0f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0fa:	d8f9      	bhi.n	800b0f0 <__lshift+0xc0>
 800b0fc:	e7ea      	b.n	800b0d4 <__lshift+0xa4>
 800b0fe:	bf00      	nop
 800b100:	0800c2d1 	.word	0x0800c2d1
 800b104:	0800c342 	.word	0x0800c342

0800b108 <__mcmp>:
 800b108:	4603      	mov	r3, r0
 800b10a:	690a      	ldr	r2, [r1, #16]
 800b10c:	6900      	ldr	r0, [r0, #16]
 800b10e:	b530      	push	{r4, r5, lr}
 800b110:	1a80      	subs	r0, r0, r2
 800b112:	d10d      	bne.n	800b130 <__mcmp+0x28>
 800b114:	3314      	adds	r3, #20
 800b116:	3114      	adds	r1, #20
 800b118:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b11c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b120:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b124:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b128:	4295      	cmp	r5, r2
 800b12a:	d002      	beq.n	800b132 <__mcmp+0x2a>
 800b12c:	d304      	bcc.n	800b138 <__mcmp+0x30>
 800b12e:	2001      	movs	r0, #1
 800b130:	bd30      	pop	{r4, r5, pc}
 800b132:	42a3      	cmp	r3, r4
 800b134:	d3f4      	bcc.n	800b120 <__mcmp+0x18>
 800b136:	e7fb      	b.n	800b130 <__mcmp+0x28>
 800b138:	f04f 30ff 	mov.w	r0, #4294967295
 800b13c:	e7f8      	b.n	800b130 <__mcmp+0x28>
	...

0800b140 <__mdiff>:
 800b140:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	460d      	mov	r5, r1
 800b146:	4607      	mov	r7, r0
 800b148:	4611      	mov	r1, r2
 800b14a:	4628      	mov	r0, r5
 800b14c:	4614      	mov	r4, r2
 800b14e:	f7ff ffdb 	bl	800b108 <__mcmp>
 800b152:	1e06      	subs	r6, r0, #0
 800b154:	d111      	bne.n	800b17a <__mdiff+0x3a>
 800b156:	4631      	mov	r1, r6
 800b158:	4638      	mov	r0, r7
 800b15a:	f7ff fd11 	bl	800ab80 <_Balloc>
 800b15e:	4602      	mov	r2, r0
 800b160:	b928      	cbnz	r0, 800b16e <__mdiff+0x2e>
 800b162:	f240 2137 	movw	r1, #567	; 0x237
 800b166:	4b3a      	ldr	r3, [pc, #232]	; (800b250 <__mdiff+0x110>)
 800b168:	483a      	ldr	r0, [pc, #232]	; (800b254 <__mdiff+0x114>)
 800b16a:	f000 fc31 	bl	800b9d0 <__assert_func>
 800b16e:	2301      	movs	r3, #1
 800b170:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b174:	4610      	mov	r0, r2
 800b176:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b17a:	bfa4      	itt	ge
 800b17c:	4623      	movge	r3, r4
 800b17e:	462c      	movge	r4, r5
 800b180:	4638      	mov	r0, r7
 800b182:	6861      	ldr	r1, [r4, #4]
 800b184:	bfa6      	itte	ge
 800b186:	461d      	movge	r5, r3
 800b188:	2600      	movge	r6, #0
 800b18a:	2601      	movlt	r6, #1
 800b18c:	f7ff fcf8 	bl	800ab80 <_Balloc>
 800b190:	4602      	mov	r2, r0
 800b192:	b918      	cbnz	r0, 800b19c <__mdiff+0x5c>
 800b194:	f240 2145 	movw	r1, #581	; 0x245
 800b198:	4b2d      	ldr	r3, [pc, #180]	; (800b250 <__mdiff+0x110>)
 800b19a:	e7e5      	b.n	800b168 <__mdiff+0x28>
 800b19c:	f102 0814 	add.w	r8, r2, #20
 800b1a0:	46c2      	mov	sl, r8
 800b1a2:	f04f 0c00 	mov.w	ip, #0
 800b1a6:	6927      	ldr	r7, [r4, #16]
 800b1a8:	60c6      	str	r6, [r0, #12]
 800b1aa:	692e      	ldr	r6, [r5, #16]
 800b1ac:	f104 0014 	add.w	r0, r4, #20
 800b1b0:	f105 0914 	add.w	r9, r5, #20
 800b1b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b1b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b1bc:	3410      	adds	r4, #16
 800b1be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b1c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1c6:	fa1f f18b 	uxth.w	r1, fp
 800b1ca:	4461      	add	r1, ip
 800b1cc:	fa1f fc83 	uxth.w	ip, r3
 800b1d0:	0c1b      	lsrs	r3, r3, #16
 800b1d2:	eba1 010c 	sub.w	r1, r1, ip
 800b1d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b1de:	b289      	uxth	r1, r1
 800b1e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b1e4:	454e      	cmp	r6, r9
 800b1e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b1ea:	f84a 1b04 	str.w	r1, [sl], #4
 800b1ee:	d8e6      	bhi.n	800b1be <__mdiff+0x7e>
 800b1f0:	1b73      	subs	r3, r6, r5
 800b1f2:	3b15      	subs	r3, #21
 800b1f4:	f023 0303 	bic.w	r3, r3, #3
 800b1f8:	3515      	adds	r5, #21
 800b1fa:	3304      	adds	r3, #4
 800b1fc:	42ae      	cmp	r6, r5
 800b1fe:	bf38      	it	cc
 800b200:	2304      	movcc	r3, #4
 800b202:	4418      	add	r0, r3
 800b204:	4443      	add	r3, r8
 800b206:	461e      	mov	r6, r3
 800b208:	4605      	mov	r5, r0
 800b20a:	4575      	cmp	r5, lr
 800b20c:	d30e      	bcc.n	800b22c <__mdiff+0xec>
 800b20e:	f10e 0103 	add.w	r1, lr, #3
 800b212:	1a09      	subs	r1, r1, r0
 800b214:	f021 0103 	bic.w	r1, r1, #3
 800b218:	3803      	subs	r0, #3
 800b21a:	4586      	cmp	lr, r0
 800b21c:	bf38      	it	cc
 800b21e:	2100      	movcc	r1, #0
 800b220:	440b      	add	r3, r1
 800b222:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b226:	b189      	cbz	r1, 800b24c <__mdiff+0x10c>
 800b228:	6117      	str	r7, [r2, #16]
 800b22a:	e7a3      	b.n	800b174 <__mdiff+0x34>
 800b22c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b230:	fa1f f188 	uxth.w	r1, r8
 800b234:	4461      	add	r1, ip
 800b236:	140c      	asrs	r4, r1, #16
 800b238:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b23c:	b289      	uxth	r1, r1
 800b23e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b242:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b246:	f846 1b04 	str.w	r1, [r6], #4
 800b24a:	e7de      	b.n	800b20a <__mdiff+0xca>
 800b24c:	3f01      	subs	r7, #1
 800b24e:	e7e8      	b.n	800b222 <__mdiff+0xe2>
 800b250:	0800c2d1 	.word	0x0800c2d1
 800b254:	0800c342 	.word	0x0800c342

0800b258 <__ulp>:
 800b258:	4b0e      	ldr	r3, [pc, #56]	; (800b294 <__ulp+0x3c>)
 800b25a:	400b      	ands	r3, r1
 800b25c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc08      	bgt.n	800b276 <__ulp+0x1e>
 800b264:	425b      	negs	r3, r3
 800b266:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b26a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b26e:	da04      	bge.n	800b27a <__ulp+0x22>
 800b270:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b274:	4113      	asrs	r3, r2
 800b276:	2200      	movs	r2, #0
 800b278:	e008      	b.n	800b28c <__ulp+0x34>
 800b27a:	f1a2 0314 	sub.w	r3, r2, #20
 800b27e:	2b1e      	cmp	r3, #30
 800b280:	bfd6      	itet	le
 800b282:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b286:	2201      	movgt	r2, #1
 800b288:	40da      	lsrle	r2, r3
 800b28a:	2300      	movs	r3, #0
 800b28c:	4619      	mov	r1, r3
 800b28e:	4610      	mov	r0, r2
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	7ff00000 	.word	0x7ff00000

0800b298 <__b2d>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	6905      	ldr	r5, [r0, #16]
 800b29c:	f100 0714 	add.w	r7, r0, #20
 800b2a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b2a4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b2a8:	1f2e      	subs	r6, r5, #4
 800b2aa:	4620      	mov	r0, r4
 800b2ac:	f7ff fd5a 	bl	800ad64 <__hi0bits>
 800b2b0:	f1c0 0220 	rsb	r2, r0, #32
 800b2b4:	280a      	cmp	r0, #10
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b324 <__b2d+0x8c>
 800b2bc:	600a      	str	r2, [r1, #0]
 800b2be:	dc12      	bgt.n	800b2e6 <__b2d+0x4e>
 800b2c0:	f1c0 0e0b 	rsb	lr, r0, #11
 800b2c4:	fa24 f20e 	lsr.w	r2, r4, lr
 800b2c8:	42b7      	cmp	r7, r6
 800b2ca:	ea42 010c 	orr.w	r1, r2, ip
 800b2ce:	bf2c      	ite	cs
 800b2d0:	2200      	movcs	r2, #0
 800b2d2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b2d6:	3315      	adds	r3, #21
 800b2d8:	fa04 f303 	lsl.w	r3, r4, r3
 800b2dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2e0:	431a      	orrs	r2, r3
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e6:	42b7      	cmp	r7, r6
 800b2e8:	bf2e      	itee	cs
 800b2ea:	2200      	movcs	r2, #0
 800b2ec:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b2f0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2f4:	3b0b      	subs	r3, #11
 800b2f6:	d012      	beq.n	800b31e <__b2d+0x86>
 800b2f8:	f1c3 0520 	rsb	r5, r3, #32
 800b2fc:	fa22 f105 	lsr.w	r1, r2, r5
 800b300:	409c      	lsls	r4, r3
 800b302:	430c      	orrs	r4, r1
 800b304:	42be      	cmp	r6, r7
 800b306:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b30a:	bf94      	ite	ls
 800b30c:	2400      	movls	r4, #0
 800b30e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b312:	409a      	lsls	r2, r3
 800b314:	40ec      	lsrs	r4, r5
 800b316:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b31a:	4322      	orrs	r2, r4
 800b31c:	e7e1      	b.n	800b2e2 <__b2d+0x4a>
 800b31e:	ea44 010c 	orr.w	r1, r4, ip
 800b322:	e7de      	b.n	800b2e2 <__b2d+0x4a>
 800b324:	3ff00000 	.word	0x3ff00000

0800b328 <__d2b>:
 800b328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b32a:	2101      	movs	r1, #1
 800b32c:	4617      	mov	r7, r2
 800b32e:	461c      	mov	r4, r3
 800b330:	9e08      	ldr	r6, [sp, #32]
 800b332:	f7ff fc25 	bl	800ab80 <_Balloc>
 800b336:	4605      	mov	r5, r0
 800b338:	b930      	cbnz	r0, 800b348 <__d2b+0x20>
 800b33a:	4602      	mov	r2, r0
 800b33c:	f240 310f 	movw	r1, #783	; 0x30f
 800b340:	4b22      	ldr	r3, [pc, #136]	; (800b3cc <__d2b+0xa4>)
 800b342:	4823      	ldr	r0, [pc, #140]	; (800b3d0 <__d2b+0xa8>)
 800b344:	f000 fb44 	bl	800b9d0 <__assert_func>
 800b348:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b34c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b350:	bb24      	cbnz	r4, 800b39c <__d2b+0x74>
 800b352:	2f00      	cmp	r7, #0
 800b354:	9301      	str	r3, [sp, #4]
 800b356:	d026      	beq.n	800b3a6 <__d2b+0x7e>
 800b358:	4668      	mov	r0, sp
 800b35a:	9700      	str	r7, [sp, #0]
 800b35c:	f7ff fd22 	bl	800ada4 <__lo0bits>
 800b360:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b364:	b1e8      	cbz	r0, 800b3a2 <__d2b+0x7a>
 800b366:	f1c0 0320 	rsb	r3, r0, #32
 800b36a:	fa02 f303 	lsl.w	r3, r2, r3
 800b36e:	430b      	orrs	r3, r1
 800b370:	40c2      	lsrs	r2, r0
 800b372:	616b      	str	r3, [r5, #20]
 800b374:	9201      	str	r2, [sp, #4]
 800b376:	9b01      	ldr	r3, [sp, #4]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bf14      	ite	ne
 800b37c:	2102      	movne	r1, #2
 800b37e:	2101      	moveq	r1, #1
 800b380:	61ab      	str	r3, [r5, #24]
 800b382:	6129      	str	r1, [r5, #16]
 800b384:	b1bc      	cbz	r4, 800b3b6 <__d2b+0x8e>
 800b386:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b38a:	4404      	add	r4, r0
 800b38c:	6034      	str	r4, [r6, #0]
 800b38e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b394:	6018      	str	r0, [r3, #0]
 800b396:	4628      	mov	r0, r5
 800b398:	b003      	add	sp, #12
 800b39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3a0:	e7d7      	b.n	800b352 <__d2b+0x2a>
 800b3a2:	6169      	str	r1, [r5, #20]
 800b3a4:	e7e7      	b.n	800b376 <__d2b+0x4e>
 800b3a6:	a801      	add	r0, sp, #4
 800b3a8:	f7ff fcfc 	bl	800ada4 <__lo0bits>
 800b3ac:	9b01      	ldr	r3, [sp, #4]
 800b3ae:	2101      	movs	r1, #1
 800b3b0:	616b      	str	r3, [r5, #20]
 800b3b2:	3020      	adds	r0, #32
 800b3b4:	e7e5      	b.n	800b382 <__d2b+0x5a>
 800b3b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b3ba:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b3be:	6030      	str	r0, [r6, #0]
 800b3c0:	6918      	ldr	r0, [r3, #16]
 800b3c2:	f7ff fccf 	bl	800ad64 <__hi0bits>
 800b3c6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b3ca:	e7e2      	b.n	800b392 <__d2b+0x6a>
 800b3cc:	0800c2d1 	.word	0x0800c2d1
 800b3d0:	0800c342 	.word	0x0800c342

0800b3d4 <__ratio>:
 800b3d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	4688      	mov	r8, r1
 800b3da:	4669      	mov	r1, sp
 800b3dc:	4681      	mov	r9, r0
 800b3de:	f7ff ff5b 	bl	800b298 <__b2d>
 800b3e2:	460f      	mov	r7, r1
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	460d      	mov	r5, r1
 800b3e8:	4640      	mov	r0, r8
 800b3ea:	a901      	add	r1, sp, #4
 800b3ec:	f7ff ff54 	bl	800b298 <__b2d>
 800b3f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3f4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3f8:	468b      	mov	fp, r1
 800b3fa:	eba3 0c02 	sub.w	ip, r3, r2
 800b3fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b402:	1a9b      	subs	r3, r3, r2
 800b404:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bfd5      	itete	le
 800b40c:	460a      	movle	r2, r1
 800b40e:	462a      	movgt	r2, r5
 800b410:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b414:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b418:	bfd8      	it	le
 800b41a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b41e:	465b      	mov	r3, fp
 800b420:	4602      	mov	r2, r0
 800b422:	4639      	mov	r1, r7
 800b424:	4620      	mov	r0, r4
 800b426:	f7f5 f98b 	bl	8000740 <__aeabi_ddiv>
 800b42a:	b003      	add	sp, #12
 800b42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b430 <__copybits>:
 800b430:	3901      	subs	r1, #1
 800b432:	b570      	push	{r4, r5, r6, lr}
 800b434:	1149      	asrs	r1, r1, #5
 800b436:	6914      	ldr	r4, [r2, #16]
 800b438:	3101      	adds	r1, #1
 800b43a:	f102 0314 	add.w	r3, r2, #20
 800b43e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b442:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b446:	1f05      	subs	r5, r0, #4
 800b448:	42a3      	cmp	r3, r4
 800b44a:	d30c      	bcc.n	800b466 <__copybits+0x36>
 800b44c:	1aa3      	subs	r3, r4, r2
 800b44e:	3b11      	subs	r3, #17
 800b450:	f023 0303 	bic.w	r3, r3, #3
 800b454:	3211      	adds	r2, #17
 800b456:	42a2      	cmp	r2, r4
 800b458:	bf88      	it	hi
 800b45a:	2300      	movhi	r3, #0
 800b45c:	4418      	add	r0, r3
 800b45e:	2300      	movs	r3, #0
 800b460:	4288      	cmp	r0, r1
 800b462:	d305      	bcc.n	800b470 <__copybits+0x40>
 800b464:	bd70      	pop	{r4, r5, r6, pc}
 800b466:	f853 6b04 	ldr.w	r6, [r3], #4
 800b46a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b46e:	e7eb      	b.n	800b448 <__copybits+0x18>
 800b470:	f840 3b04 	str.w	r3, [r0], #4
 800b474:	e7f4      	b.n	800b460 <__copybits+0x30>

0800b476 <__any_on>:
 800b476:	f100 0214 	add.w	r2, r0, #20
 800b47a:	6900      	ldr	r0, [r0, #16]
 800b47c:	114b      	asrs	r3, r1, #5
 800b47e:	4298      	cmp	r0, r3
 800b480:	b510      	push	{r4, lr}
 800b482:	db11      	blt.n	800b4a8 <__any_on+0x32>
 800b484:	dd0a      	ble.n	800b49c <__any_on+0x26>
 800b486:	f011 011f 	ands.w	r1, r1, #31
 800b48a:	d007      	beq.n	800b49c <__any_on+0x26>
 800b48c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b490:	fa24 f001 	lsr.w	r0, r4, r1
 800b494:	fa00 f101 	lsl.w	r1, r0, r1
 800b498:	428c      	cmp	r4, r1
 800b49a:	d10b      	bne.n	800b4b4 <__any_on+0x3e>
 800b49c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d803      	bhi.n	800b4ac <__any_on+0x36>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	bd10      	pop	{r4, pc}
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	e7f7      	b.n	800b49c <__any_on+0x26>
 800b4ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4b0:	2900      	cmp	r1, #0
 800b4b2:	d0f5      	beq.n	800b4a0 <__any_on+0x2a>
 800b4b4:	2001      	movs	r0, #1
 800b4b6:	e7f6      	b.n	800b4a6 <__any_on+0x30>

0800b4b8 <__ascii_wctomb>:
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	4608      	mov	r0, r1
 800b4bc:	b141      	cbz	r1, 800b4d0 <__ascii_wctomb+0x18>
 800b4be:	2aff      	cmp	r2, #255	; 0xff
 800b4c0:	d904      	bls.n	800b4cc <__ascii_wctomb+0x14>
 800b4c2:	228a      	movs	r2, #138	; 0x8a
 800b4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c8:	601a      	str	r2, [r3, #0]
 800b4ca:	4770      	bx	lr
 800b4cc:	2001      	movs	r0, #1
 800b4ce:	700a      	strb	r2, [r1, #0]
 800b4d0:	4770      	bx	lr

0800b4d2 <__sfputc_r>:
 800b4d2:	6893      	ldr	r3, [r2, #8]
 800b4d4:	b410      	push	{r4}
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	6093      	str	r3, [r2, #8]
 800b4dc:	da07      	bge.n	800b4ee <__sfputc_r+0x1c>
 800b4de:	6994      	ldr	r4, [r2, #24]
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	db01      	blt.n	800b4e8 <__sfputc_r+0x16>
 800b4e4:	290a      	cmp	r1, #10
 800b4e6:	d102      	bne.n	800b4ee <__sfputc_r+0x1c>
 800b4e8:	bc10      	pop	{r4}
 800b4ea:	f7fd bf2c 	b.w	8009346 <__swbuf_r>
 800b4ee:	6813      	ldr	r3, [r2, #0]
 800b4f0:	1c58      	adds	r0, r3, #1
 800b4f2:	6010      	str	r0, [r2, #0]
 800b4f4:	7019      	strb	r1, [r3, #0]
 800b4f6:	4608      	mov	r0, r1
 800b4f8:	bc10      	pop	{r4}
 800b4fa:	4770      	bx	lr

0800b4fc <__sfputs_r>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	4606      	mov	r6, r0
 800b500:	460f      	mov	r7, r1
 800b502:	4614      	mov	r4, r2
 800b504:	18d5      	adds	r5, r2, r3
 800b506:	42ac      	cmp	r4, r5
 800b508:	d101      	bne.n	800b50e <__sfputs_r+0x12>
 800b50a:	2000      	movs	r0, #0
 800b50c:	e007      	b.n	800b51e <__sfputs_r+0x22>
 800b50e:	463a      	mov	r2, r7
 800b510:	4630      	mov	r0, r6
 800b512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b516:	f7ff ffdc 	bl	800b4d2 <__sfputc_r>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d1f3      	bne.n	800b506 <__sfputs_r+0xa>
 800b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b520 <_vfiprintf_r>:
 800b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	460d      	mov	r5, r1
 800b526:	4614      	mov	r4, r2
 800b528:	4698      	mov	r8, r3
 800b52a:	4606      	mov	r6, r0
 800b52c:	b09d      	sub	sp, #116	; 0x74
 800b52e:	b118      	cbz	r0, 800b538 <_vfiprintf_r+0x18>
 800b530:	6a03      	ldr	r3, [r0, #32]
 800b532:	b90b      	cbnz	r3, 800b538 <_vfiprintf_r+0x18>
 800b534:	f7fd fe20 	bl	8009178 <__sinit>
 800b538:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b53a:	07d9      	lsls	r1, r3, #31
 800b53c:	d405      	bmi.n	800b54a <_vfiprintf_r+0x2a>
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d402      	bmi.n	800b54a <_vfiprintf_r+0x2a>
 800b544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b546:	f7fe f821 	bl	800958c <__retarget_lock_acquire_recursive>
 800b54a:	89ab      	ldrh	r3, [r5, #12]
 800b54c:	071b      	lsls	r3, r3, #28
 800b54e:	d501      	bpl.n	800b554 <_vfiprintf_r+0x34>
 800b550:	692b      	ldr	r3, [r5, #16]
 800b552:	b99b      	cbnz	r3, 800b57c <_vfiprintf_r+0x5c>
 800b554:	4629      	mov	r1, r5
 800b556:	4630      	mov	r0, r6
 800b558:	f7fd ff32 	bl	80093c0 <__swsetup_r>
 800b55c:	b170      	cbz	r0, 800b57c <_vfiprintf_r+0x5c>
 800b55e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b560:	07dc      	lsls	r4, r3, #31
 800b562:	d504      	bpl.n	800b56e <_vfiprintf_r+0x4e>
 800b564:	f04f 30ff 	mov.w	r0, #4294967295
 800b568:	b01d      	add	sp, #116	; 0x74
 800b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56e:	89ab      	ldrh	r3, [r5, #12]
 800b570:	0598      	lsls	r0, r3, #22
 800b572:	d4f7      	bmi.n	800b564 <_vfiprintf_r+0x44>
 800b574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b576:	f7fe f80a 	bl	800958e <__retarget_lock_release_recursive>
 800b57a:	e7f3      	b.n	800b564 <_vfiprintf_r+0x44>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9309      	str	r3, [sp, #36]	; 0x24
 800b580:	2320      	movs	r3, #32
 800b582:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b586:	2330      	movs	r3, #48	; 0x30
 800b588:	f04f 0901 	mov.w	r9, #1
 800b58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b590:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b740 <_vfiprintf_r+0x220>
 800b594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b598:	4623      	mov	r3, r4
 800b59a:	469a      	mov	sl, r3
 800b59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a0:	b10a      	cbz	r2, 800b5a6 <_vfiprintf_r+0x86>
 800b5a2:	2a25      	cmp	r2, #37	; 0x25
 800b5a4:	d1f9      	bne.n	800b59a <_vfiprintf_r+0x7a>
 800b5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b5aa:	d00b      	beq.n	800b5c4 <_vfiprintf_r+0xa4>
 800b5ac:	465b      	mov	r3, fp
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7ff ffa2 	bl	800b4fc <__sfputs_r>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	f000 80a9 	beq.w	800b710 <_vfiprintf_r+0x1f0>
 800b5be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c0:	445a      	add	r2, fp
 800b5c2:	9209      	str	r2, [sp, #36]	; 0x24
 800b5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 80a1 	beq.w	800b710 <_vfiprintf_r+0x1f0>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d8:	f10a 0a01 	add.w	sl, sl, #1
 800b5dc:	9304      	str	r3, [sp, #16]
 800b5de:	9307      	str	r3, [sp, #28]
 800b5e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5e4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5e6:	4654      	mov	r4, sl
 800b5e8:	2205      	movs	r2, #5
 800b5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ee:	4854      	ldr	r0, [pc, #336]	; (800b740 <_vfiprintf_r+0x220>)
 800b5f0:	f7fd ffce 	bl	8009590 <memchr>
 800b5f4:	9a04      	ldr	r2, [sp, #16]
 800b5f6:	b9d8      	cbnz	r0, 800b630 <_vfiprintf_r+0x110>
 800b5f8:	06d1      	lsls	r1, r2, #27
 800b5fa:	bf44      	itt	mi
 800b5fc:	2320      	movmi	r3, #32
 800b5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b602:	0713      	lsls	r3, r2, #28
 800b604:	bf44      	itt	mi
 800b606:	232b      	movmi	r3, #43	; 0x2b
 800b608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b60c:	f89a 3000 	ldrb.w	r3, [sl]
 800b610:	2b2a      	cmp	r3, #42	; 0x2a
 800b612:	d015      	beq.n	800b640 <_vfiprintf_r+0x120>
 800b614:	4654      	mov	r4, sl
 800b616:	2000      	movs	r0, #0
 800b618:	f04f 0c0a 	mov.w	ip, #10
 800b61c:	9a07      	ldr	r2, [sp, #28]
 800b61e:	4621      	mov	r1, r4
 800b620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b624:	3b30      	subs	r3, #48	; 0x30
 800b626:	2b09      	cmp	r3, #9
 800b628:	d94d      	bls.n	800b6c6 <_vfiprintf_r+0x1a6>
 800b62a:	b1b0      	cbz	r0, 800b65a <_vfiprintf_r+0x13a>
 800b62c:	9207      	str	r2, [sp, #28]
 800b62e:	e014      	b.n	800b65a <_vfiprintf_r+0x13a>
 800b630:	eba0 0308 	sub.w	r3, r0, r8
 800b634:	fa09 f303 	lsl.w	r3, r9, r3
 800b638:	4313      	orrs	r3, r2
 800b63a:	46a2      	mov	sl, r4
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	e7d2      	b.n	800b5e6 <_vfiprintf_r+0xc6>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	1d19      	adds	r1, r3, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	9103      	str	r1, [sp, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bfbb      	ittet	lt
 800b64c:	425b      	neglt	r3, r3
 800b64e:	f042 0202 	orrlt.w	r2, r2, #2
 800b652:	9307      	strge	r3, [sp, #28]
 800b654:	9307      	strlt	r3, [sp, #28]
 800b656:	bfb8      	it	lt
 800b658:	9204      	strlt	r2, [sp, #16]
 800b65a:	7823      	ldrb	r3, [r4, #0]
 800b65c:	2b2e      	cmp	r3, #46	; 0x2e
 800b65e:	d10c      	bne.n	800b67a <_vfiprintf_r+0x15a>
 800b660:	7863      	ldrb	r3, [r4, #1]
 800b662:	2b2a      	cmp	r3, #42	; 0x2a
 800b664:	d134      	bne.n	800b6d0 <_vfiprintf_r+0x1b0>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	3402      	adds	r4, #2
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	9203      	str	r2, [sp, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	bfb8      	it	lt
 800b674:	f04f 33ff 	movlt.w	r3, #4294967295
 800b678:	9305      	str	r3, [sp, #20]
 800b67a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b744 <_vfiprintf_r+0x224>
 800b67e:	2203      	movs	r2, #3
 800b680:	4650      	mov	r0, sl
 800b682:	7821      	ldrb	r1, [r4, #0]
 800b684:	f7fd ff84 	bl	8009590 <memchr>
 800b688:	b138      	cbz	r0, 800b69a <_vfiprintf_r+0x17a>
 800b68a:	2240      	movs	r2, #64	; 0x40
 800b68c:	9b04      	ldr	r3, [sp, #16]
 800b68e:	eba0 000a 	sub.w	r0, r0, sl
 800b692:	4082      	lsls	r2, r0
 800b694:	4313      	orrs	r3, r2
 800b696:	3401      	adds	r4, #1
 800b698:	9304      	str	r3, [sp, #16]
 800b69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b69e:	2206      	movs	r2, #6
 800b6a0:	4829      	ldr	r0, [pc, #164]	; (800b748 <_vfiprintf_r+0x228>)
 800b6a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6a6:	f7fd ff73 	bl	8009590 <memchr>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	d03f      	beq.n	800b72e <_vfiprintf_r+0x20e>
 800b6ae:	4b27      	ldr	r3, [pc, #156]	; (800b74c <_vfiprintf_r+0x22c>)
 800b6b0:	bb1b      	cbnz	r3, 800b6fa <_vfiprintf_r+0x1da>
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	3307      	adds	r3, #7
 800b6b6:	f023 0307 	bic.w	r3, r3, #7
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	9303      	str	r3, [sp, #12]
 800b6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c0:	443b      	add	r3, r7
 800b6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c4:	e768      	b.n	800b598 <_vfiprintf_r+0x78>
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ce:	e7a6      	b.n	800b61e <_vfiprintf_r+0xfe>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f04f 0c0a 	mov.w	ip, #10
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	3401      	adds	r4, #1
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	4620      	mov	r0, r4
 800b6de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6e2:	3a30      	subs	r2, #48	; 0x30
 800b6e4:	2a09      	cmp	r2, #9
 800b6e6:	d903      	bls.n	800b6f0 <_vfiprintf_r+0x1d0>
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d0c6      	beq.n	800b67a <_vfiprintf_r+0x15a>
 800b6ec:	9105      	str	r1, [sp, #20]
 800b6ee:	e7c4      	b.n	800b67a <_vfiprintf_r+0x15a>
 800b6f0:	4604      	mov	r4, r0
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6f8:	e7f0      	b.n	800b6dc <_vfiprintf_r+0x1bc>
 800b6fa:	ab03      	add	r3, sp, #12
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	462a      	mov	r2, r5
 800b700:	4630      	mov	r0, r6
 800b702:	4b13      	ldr	r3, [pc, #76]	; (800b750 <_vfiprintf_r+0x230>)
 800b704:	a904      	add	r1, sp, #16
 800b706:	f7fd f8fb 	bl	8008900 <_printf_float>
 800b70a:	4607      	mov	r7, r0
 800b70c:	1c78      	adds	r0, r7, #1
 800b70e:	d1d6      	bne.n	800b6be <_vfiprintf_r+0x19e>
 800b710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b712:	07d9      	lsls	r1, r3, #31
 800b714:	d405      	bmi.n	800b722 <_vfiprintf_r+0x202>
 800b716:	89ab      	ldrh	r3, [r5, #12]
 800b718:	059a      	lsls	r2, r3, #22
 800b71a:	d402      	bmi.n	800b722 <_vfiprintf_r+0x202>
 800b71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b71e:	f7fd ff36 	bl	800958e <__retarget_lock_release_recursive>
 800b722:	89ab      	ldrh	r3, [r5, #12]
 800b724:	065b      	lsls	r3, r3, #25
 800b726:	f53f af1d 	bmi.w	800b564 <_vfiprintf_r+0x44>
 800b72a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b72c:	e71c      	b.n	800b568 <_vfiprintf_r+0x48>
 800b72e:	ab03      	add	r3, sp, #12
 800b730:	9300      	str	r3, [sp, #0]
 800b732:	462a      	mov	r2, r5
 800b734:	4630      	mov	r0, r6
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <_vfiprintf_r+0x230>)
 800b738:	a904      	add	r1, sp, #16
 800b73a:	f7fd fb81 	bl	8008e40 <_printf_i>
 800b73e:	e7e4      	b.n	800b70a <_vfiprintf_r+0x1ea>
 800b740:	0800c49c 	.word	0x0800c49c
 800b744:	0800c4a2 	.word	0x0800c4a2
 800b748:	0800c4a6 	.word	0x0800c4a6
 800b74c:	08008901 	.word	0x08008901
 800b750:	0800b4fd 	.word	0x0800b4fd

0800b754 <__sflush_r>:
 800b754:	898a      	ldrh	r2, [r1, #12]
 800b756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b758:	4605      	mov	r5, r0
 800b75a:	0710      	lsls	r0, r2, #28
 800b75c:	460c      	mov	r4, r1
 800b75e:	d457      	bmi.n	800b810 <__sflush_r+0xbc>
 800b760:	684b      	ldr	r3, [r1, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	dc04      	bgt.n	800b770 <__sflush_r+0x1c>
 800b766:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dc01      	bgt.n	800b770 <__sflush_r+0x1c>
 800b76c:	2000      	movs	r0, #0
 800b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b772:	2e00      	cmp	r6, #0
 800b774:	d0fa      	beq.n	800b76c <__sflush_r+0x18>
 800b776:	2300      	movs	r3, #0
 800b778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b77c:	682f      	ldr	r7, [r5, #0]
 800b77e:	6a21      	ldr	r1, [r4, #32]
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	d032      	beq.n	800b7ea <__sflush_r+0x96>
 800b784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	075a      	lsls	r2, r3, #29
 800b78a:	d505      	bpl.n	800b798 <__sflush_r+0x44>
 800b78c:	6863      	ldr	r3, [r4, #4]
 800b78e:	1ac0      	subs	r0, r0, r3
 800b790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b792:	b10b      	cbz	r3, 800b798 <__sflush_r+0x44>
 800b794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b796:	1ac0      	subs	r0, r0, r3
 800b798:	2300      	movs	r3, #0
 800b79a:	4602      	mov	r2, r0
 800b79c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b79e:	4628      	mov	r0, r5
 800b7a0:	6a21      	ldr	r1, [r4, #32]
 800b7a2:	47b0      	blx	r6
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	d106      	bne.n	800b7b8 <__sflush_r+0x64>
 800b7aa:	6829      	ldr	r1, [r5, #0]
 800b7ac:	291d      	cmp	r1, #29
 800b7ae:	d82b      	bhi.n	800b808 <__sflush_r+0xb4>
 800b7b0:	4a28      	ldr	r2, [pc, #160]	; (800b854 <__sflush_r+0x100>)
 800b7b2:	410a      	asrs	r2, r1
 800b7b4:	07d6      	lsls	r6, r2, #31
 800b7b6:	d427      	bmi.n	800b808 <__sflush_r+0xb4>
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	6062      	str	r2, [r4, #4]
 800b7bc:	6922      	ldr	r2, [r4, #16]
 800b7be:	04d9      	lsls	r1, r3, #19
 800b7c0:	6022      	str	r2, [r4, #0]
 800b7c2:	d504      	bpl.n	800b7ce <__sflush_r+0x7a>
 800b7c4:	1c42      	adds	r2, r0, #1
 800b7c6:	d101      	bne.n	800b7cc <__sflush_r+0x78>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b903      	cbnz	r3, 800b7ce <__sflush_r+0x7a>
 800b7cc:	6560      	str	r0, [r4, #84]	; 0x54
 800b7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d0:	602f      	str	r7, [r5, #0]
 800b7d2:	2900      	cmp	r1, #0
 800b7d4:	d0ca      	beq.n	800b76c <__sflush_r+0x18>
 800b7d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7da:	4299      	cmp	r1, r3
 800b7dc:	d002      	beq.n	800b7e4 <__sflush_r+0x90>
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f7fe fd66 	bl	800a2b0 <_free_r>
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	6360      	str	r0, [r4, #52]	; 0x34
 800b7e8:	e7c1      	b.n	800b76e <__sflush_r+0x1a>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	47b0      	blx	r6
 800b7f0:	1c41      	adds	r1, r0, #1
 800b7f2:	d1c8      	bne.n	800b786 <__sflush_r+0x32>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d0c5      	beq.n	800b786 <__sflush_r+0x32>
 800b7fa:	2b1d      	cmp	r3, #29
 800b7fc:	d001      	beq.n	800b802 <__sflush_r+0xae>
 800b7fe:	2b16      	cmp	r3, #22
 800b800:	d101      	bne.n	800b806 <__sflush_r+0xb2>
 800b802:	602f      	str	r7, [r5, #0]
 800b804:	e7b2      	b.n	800b76c <__sflush_r+0x18>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b80c:	81a3      	strh	r3, [r4, #12]
 800b80e:	e7ae      	b.n	800b76e <__sflush_r+0x1a>
 800b810:	690f      	ldr	r7, [r1, #16]
 800b812:	2f00      	cmp	r7, #0
 800b814:	d0aa      	beq.n	800b76c <__sflush_r+0x18>
 800b816:	0793      	lsls	r3, r2, #30
 800b818:	bf18      	it	ne
 800b81a:	2300      	movne	r3, #0
 800b81c:	680e      	ldr	r6, [r1, #0]
 800b81e:	bf08      	it	eq
 800b820:	694b      	ldreq	r3, [r1, #20]
 800b822:	1bf6      	subs	r6, r6, r7
 800b824:	600f      	str	r7, [r1, #0]
 800b826:	608b      	str	r3, [r1, #8]
 800b828:	2e00      	cmp	r6, #0
 800b82a:	dd9f      	ble.n	800b76c <__sflush_r+0x18>
 800b82c:	4633      	mov	r3, r6
 800b82e:	463a      	mov	r2, r7
 800b830:	4628      	mov	r0, r5
 800b832:	6a21      	ldr	r1, [r4, #32]
 800b834:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b838:	47e0      	blx	ip
 800b83a:	2800      	cmp	r0, #0
 800b83c:	dc06      	bgt.n	800b84c <__sflush_r+0xf8>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b848:	81a3      	strh	r3, [r4, #12]
 800b84a:	e790      	b.n	800b76e <__sflush_r+0x1a>
 800b84c:	4407      	add	r7, r0
 800b84e:	1a36      	subs	r6, r6, r0
 800b850:	e7ea      	b.n	800b828 <__sflush_r+0xd4>
 800b852:	bf00      	nop
 800b854:	dfbffffe 	.word	0xdfbffffe

0800b858 <_fflush_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	690b      	ldr	r3, [r1, #16]
 800b85c:	4605      	mov	r5, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	b913      	cbnz	r3, 800b868 <_fflush_r+0x10>
 800b862:	2500      	movs	r5, #0
 800b864:	4628      	mov	r0, r5
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	b118      	cbz	r0, 800b872 <_fflush_r+0x1a>
 800b86a:	6a03      	ldr	r3, [r0, #32]
 800b86c:	b90b      	cbnz	r3, 800b872 <_fflush_r+0x1a>
 800b86e:	f7fd fc83 	bl	8009178 <__sinit>
 800b872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d0f3      	beq.n	800b862 <_fflush_r+0xa>
 800b87a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b87c:	07d0      	lsls	r0, r2, #31
 800b87e:	d404      	bmi.n	800b88a <_fflush_r+0x32>
 800b880:	0599      	lsls	r1, r3, #22
 800b882:	d402      	bmi.n	800b88a <_fflush_r+0x32>
 800b884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b886:	f7fd fe81 	bl	800958c <__retarget_lock_acquire_recursive>
 800b88a:	4628      	mov	r0, r5
 800b88c:	4621      	mov	r1, r4
 800b88e:	f7ff ff61 	bl	800b754 <__sflush_r>
 800b892:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b894:	4605      	mov	r5, r0
 800b896:	07da      	lsls	r2, r3, #31
 800b898:	d4e4      	bmi.n	800b864 <_fflush_r+0xc>
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	059b      	lsls	r3, r3, #22
 800b89e:	d4e1      	bmi.n	800b864 <_fflush_r+0xc>
 800b8a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8a2:	f7fd fe74 	bl	800958e <__retarget_lock_release_recursive>
 800b8a6:	e7dd      	b.n	800b864 <_fflush_r+0xc>

0800b8a8 <__swhatbuf_r>:
 800b8a8:	b570      	push	{r4, r5, r6, lr}
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b0:	4615      	mov	r5, r2
 800b8b2:	2900      	cmp	r1, #0
 800b8b4:	461e      	mov	r6, r3
 800b8b6:	b096      	sub	sp, #88	; 0x58
 800b8b8:	da0c      	bge.n	800b8d4 <__swhatbuf_r+0x2c>
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	2100      	movs	r1, #0
 800b8be:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8c2:	bf0c      	ite	eq
 800b8c4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8c8:	2340      	movne	r3, #64	; 0x40
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	6031      	str	r1, [r6, #0]
 800b8ce:	602b      	str	r3, [r5, #0]
 800b8d0:	b016      	add	sp, #88	; 0x58
 800b8d2:	bd70      	pop	{r4, r5, r6, pc}
 800b8d4:	466a      	mov	r2, sp
 800b8d6:	f000 f849 	bl	800b96c <_fstat_r>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	dbed      	blt.n	800b8ba <__swhatbuf_r+0x12>
 800b8de:	9901      	ldr	r1, [sp, #4]
 800b8e0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8e4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8e8:	4259      	negs	r1, r3
 800b8ea:	4159      	adcs	r1, r3
 800b8ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f0:	e7eb      	b.n	800b8ca <__swhatbuf_r+0x22>

0800b8f2 <__smakebuf_r>:
 800b8f2:	898b      	ldrh	r3, [r1, #12]
 800b8f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8f6:	079d      	lsls	r5, r3, #30
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	d507      	bpl.n	800b90e <__smakebuf_r+0x1c>
 800b8fe:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b902:	6023      	str	r3, [r4, #0]
 800b904:	6123      	str	r3, [r4, #16]
 800b906:	2301      	movs	r3, #1
 800b908:	6163      	str	r3, [r4, #20]
 800b90a:	b002      	add	sp, #8
 800b90c:	bd70      	pop	{r4, r5, r6, pc}
 800b90e:	466a      	mov	r2, sp
 800b910:	ab01      	add	r3, sp, #4
 800b912:	f7ff ffc9 	bl	800b8a8 <__swhatbuf_r>
 800b916:	9900      	ldr	r1, [sp, #0]
 800b918:	4605      	mov	r5, r0
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7ff f892 	bl	800aa44 <_malloc_r>
 800b920:	b948      	cbnz	r0, 800b936 <__smakebuf_r+0x44>
 800b922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b926:	059a      	lsls	r2, r3, #22
 800b928:	d4ef      	bmi.n	800b90a <__smakebuf_r+0x18>
 800b92a:	f023 0303 	bic.w	r3, r3, #3
 800b92e:	f043 0302 	orr.w	r3, r3, #2
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	e7e3      	b.n	800b8fe <__smakebuf_r+0xc>
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	6020      	str	r0, [r4, #0]
 800b93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	9b00      	ldr	r3, [sp, #0]
 800b942:	6120      	str	r0, [r4, #16]
 800b944:	6163      	str	r3, [r4, #20]
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	b15b      	cbz	r3, 800b962 <__smakebuf_r+0x70>
 800b94a:	4630      	mov	r0, r6
 800b94c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b950:	f000 f81e 	bl	800b990 <_isatty_r>
 800b954:	b128      	cbz	r0, 800b962 <__smakebuf_r+0x70>
 800b956:	89a3      	ldrh	r3, [r4, #12]
 800b958:	f023 0303 	bic.w	r3, r3, #3
 800b95c:	f043 0301 	orr.w	r3, r3, #1
 800b960:	81a3      	strh	r3, [r4, #12]
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	431d      	orrs	r5, r3
 800b966:	81a5      	strh	r5, [r4, #12]
 800b968:	e7cf      	b.n	800b90a <__smakebuf_r+0x18>
	...

0800b96c <_fstat_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	2300      	movs	r3, #0
 800b970:	4d06      	ldr	r5, [pc, #24]	; (800b98c <_fstat_r+0x20>)
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	602b      	str	r3, [r5, #0]
 800b97a:	f7f7 f9a4 	bl	8002cc6 <_fstat>
 800b97e:	1c43      	adds	r3, r0, #1
 800b980:	d102      	bne.n	800b988 <_fstat_r+0x1c>
 800b982:	682b      	ldr	r3, [r5, #0]
 800b984:	b103      	cbz	r3, 800b988 <_fstat_r+0x1c>
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	bd38      	pop	{r3, r4, r5, pc}
 800b98a:	bf00      	nop
 800b98c:	200005fc 	.word	0x200005fc

0800b990 <_isatty_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	2300      	movs	r3, #0
 800b994:	4d05      	ldr	r5, [pc, #20]	; (800b9ac <_isatty_r+0x1c>)
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	602b      	str	r3, [r5, #0]
 800b99c:	f7f7 f9a2 	bl	8002ce4 <_isatty>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_isatty_r+0x1a>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_isatty_r+0x1a>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	200005fc 	.word	0x200005fc

0800b9b0 <_sbrk_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4d05      	ldr	r5, [pc, #20]	; (800b9cc <_sbrk_r+0x1c>)
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	602b      	str	r3, [r5, #0]
 800b9bc:	f7f7 f9a8 	bl	8002d10 <_sbrk>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_sbrk_r+0x1a>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_sbrk_r+0x1a>
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	200005fc 	.word	0x200005fc

0800b9d0 <__assert_func>:
 800b9d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9d2:	4614      	mov	r4, r2
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <__assert_func+0x2c>)
 800b9d8:	4605      	mov	r5, r0
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68d8      	ldr	r0, [r3, #12]
 800b9de:	b14c      	cbz	r4, 800b9f4 <__assert_func+0x24>
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <__assert_func+0x30>)
 800b9e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9e6:	9100      	str	r1, [sp, #0]
 800b9e8:	462b      	mov	r3, r5
 800b9ea:	4906      	ldr	r1, [pc, #24]	; (800ba04 <__assert_func+0x34>)
 800b9ec:	f000 f822 	bl	800ba34 <fiprintf>
 800b9f0:	f000 f832 	bl	800ba58 <abort>
 800b9f4:	4b04      	ldr	r3, [pc, #16]	; (800ba08 <__assert_func+0x38>)
 800b9f6:	461c      	mov	r4, r3
 800b9f8:	e7f3      	b.n	800b9e2 <__assert_func+0x12>
 800b9fa:	bf00      	nop
 800b9fc:	200001d0 	.word	0x200001d0
 800ba00:	0800c4ad 	.word	0x0800c4ad
 800ba04:	0800c4ba 	.word	0x0800c4ba
 800ba08:	0800c4e8 	.word	0x0800c4e8

0800ba0c <_calloc_r>:
 800ba0c:	b570      	push	{r4, r5, r6, lr}
 800ba0e:	fba1 5402 	umull	r5, r4, r1, r2
 800ba12:	b934      	cbnz	r4, 800ba22 <_calloc_r+0x16>
 800ba14:	4629      	mov	r1, r5
 800ba16:	f7ff f815 	bl	800aa44 <_malloc_r>
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	b928      	cbnz	r0, 800ba2a <_calloc_r+0x1e>
 800ba1e:	4630      	mov	r0, r6
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
 800ba22:	220c      	movs	r2, #12
 800ba24:	2600      	movs	r6, #0
 800ba26:	6002      	str	r2, [r0, #0]
 800ba28:	e7f9      	b.n	800ba1e <_calloc_r+0x12>
 800ba2a:	462a      	mov	r2, r5
 800ba2c:	4621      	mov	r1, r4
 800ba2e:	f7fd fd1f 	bl	8009470 <memset>
 800ba32:	e7f4      	b.n	800ba1e <_calloc_r+0x12>

0800ba34 <fiprintf>:
 800ba34:	b40e      	push	{r1, r2, r3}
 800ba36:	b503      	push	{r0, r1, lr}
 800ba38:	4601      	mov	r1, r0
 800ba3a:	ab03      	add	r3, sp, #12
 800ba3c:	4805      	ldr	r0, [pc, #20]	; (800ba54 <fiprintf+0x20>)
 800ba3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba42:	6800      	ldr	r0, [r0, #0]
 800ba44:	9301      	str	r3, [sp, #4]
 800ba46:	f7ff fd6b 	bl	800b520 <_vfiprintf_r>
 800ba4a:	b002      	add	sp, #8
 800ba4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba50:	b003      	add	sp, #12
 800ba52:	4770      	bx	lr
 800ba54:	200001d0 	.word	0x200001d0

0800ba58 <abort>:
 800ba58:	2006      	movs	r0, #6
 800ba5a:	b508      	push	{r3, lr}
 800ba5c:	f000 f82c 	bl	800bab8 <raise>
 800ba60:	2001      	movs	r0, #1
 800ba62:	f7f7 f8e2 	bl	8002c2a <_exit>

0800ba66 <_raise_r>:
 800ba66:	291f      	cmp	r1, #31
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	d904      	bls.n	800ba7a <_raise_r+0x14>
 800ba70:	2316      	movs	r3, #22
 800ba72:	6003      	str	r3, [r0, #0]
 800ba74:	f04f 30ff 	mov.w	r0, #4294967295
 800ba78:	bd38      	pop	{r3, r4, r5, pc}
 800ba7a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba7c:	b112      	cbz	r2, 800ba84 <_raise_r+0x1e>
 800ba7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba82:	b94b      	cbnz	r3, 800ba98 <_raise_r+0x32>
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 f831 	bl	800baec <_getpid_r>
 800ba8a:	462a      	mov	r2, r5
 800ba8c:	4601      	mov	r1, r0
 800ba8e:	4620      	mov	r0, r4
 800ba90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba94:	f000 b818 	b.w	800bac8 <_kill_r>
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d00a      	beq.n	800bab2 <_raise_r+0x4c>
 800ba9c:	1c59      	adds	r1, r3, #1
 800ba9e:	d103      	bne.n	800baa8 <_raise_r+0x42>
 800baa0:	2316      	movs	r3, #22
 800baa2:	6003      	str	r3, [r0, #0]
 800baa4:	2001      	movs	r0, #1
 800baa6:	e7e7      	b.n	800ba78 <_raise_r+0x12>
 800baa8:	2400      	movs	r4, #0
 800baaa:	4628      	mov	r0, r5
 800baac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bab0:	4798      	blx	r3
 800bab2:	2000      	movs	r0, #0
 800bab4:	e7e0      	b.n	800ba78 <_raise_r+0x12>
	...

0800bab8 <raise>:
 800bab8:	4b02      	ldr	r3, [pc, #8]	; (800bac4 <raise+0xc>)
 800baba:	4601      	mov	r1, r0
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	f7ff bfd2 	b.w	800ba66 <_raise_r>
 800bac2:	bf00      	nop
 800bac4:	200001d0 	.word	0x200001d0

0800bac8 <_kill_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	2300      	movs	r3, #0
 800bacc:	4d06      	ldr	r5, [pc, #24]	; (800bae8 <_kill_r+0x20>)
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	4611      	mov	r1, r2
 800bad4:	602b      	str	r3, [r5, #0]
 800bad6:	f7f7 f898 	bl	8002c0a <_kill>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	d102      	bne.n	800bae4 <_kill_r+0x1c>
 800bade:	682b      	ldr	r3, [r5, #0]
 800bae0:	b103      	cbz	r3, 800bae4 <_kill_r+0x1c>
 800bae2:	6023      	str	r3, [r4, #0]
 800bae4:	bd38      	pop	{r3, r4, r5, pc}
 800bae6:	bf00      	nop
 800bae8:	200005fc 	.word	0x200005fc

0800baec <_getpid_r>:
 800baec:	f7f7 b886 	b.w	8002bfc <_getpid>

0800baf0 <atan2>:
 800baf0:	f000 b802 	b.w	800baf8 <__ieee754_atan2>
 800baf4:	0000      	movs	r0, r0
	...

0800baf8 <__ieee754_atan2>:
 800baf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafc:	4617      	mov	r7, r2
 800bafe:	4692      	mov	sl, r2
 800bb00:	4699      	mov	r9, r3
 800bb02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bb06:	427b      	negs	r3, r7
 800bb08:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bc88 <__ieee754_atan2+0x190>
 800bb0c:	433b      	orrs	r3, r7
 800bb0e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bb12:	4543      	cmp	r3, r8
 800bb14:	4604      	mov	r4, r0
 800bb16:	460d      	mov	r5, r1
 800bb18:	d809      	bhi.n	800bb2e <__ieee754_atan2+0x36>
 800bb1a:	4246      	negs	r6, r0
 800bb1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb20:	4306      	orrs	r6, r0
 800bb22:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800bb26:	4546      	cmp	r6, r8
 800bb28:	468e      	mov	lr, r1
 800bb2a:	4683      	mov	fp, r0
 800bb2c:	d908      	bls.n	800bb40 <__ieee754_atan2+0x48>
 800bb2e:	4652      	mov	r2, sl
 800bb30:	464b      	mov	r3, r9
 800bb32:	4620      	mov	r0, r4
 800bb34:	4629      	mov	r1, r5
 800bb36:	f7f4 fb23 	bl	8000180 <__adddf3>
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	460d      	mov	r5, r1
 800bb3e:	e019      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bb40:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800bb44:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bb48:	433e      	orrs	r6, r7
 800bb4a:	d103      	bne.n	800bb54 <__ieee754_atan2+0x5c>
 800bb4c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	f000 b8a2 	b.w	800bc98 <atan>
 800bb54:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800bb58:	f006 0602 	and.w	r6, r6, #2
 800bb5c:	ea53 0b0b 	orrs.w	fp, r3, fp
 800bb60:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bb64:	d10a      	bne.n	800bb7c <__ieee754_atan2+0x84>
 800bb66:	2e02      	cmp	r6, #2
 800bb68:	d067      	beq.n	800bc3a <__ieee754_atan2+0x142>
 800bb6a:	2e03      	cmp	r6, #3
 800bb6c:	d102      	bne.n	800bb74 <__ieee754_atan2+0x7c>
 800bb6e:	a53a      	add	r5, pc, #232	; (adr r5, 800bc58 <__ieee754_atan2+0x160>)
 800bb70:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb74:	4620      	mov	r0, r4
 800bb76:	4629      	mov	r1, r5
 800bb78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7c:	4317      	orrs	r7, r2
 800bb7e:	d106      	bne.n	800bb8e <__ieee754_atan2+0x96>
 800bb80:	f1be 0f00 	cmp.w	lr, #0
 800bb84:	da64      	bge.n	800bc50 <__ieee754_atan2+0x158>
 800bb86:	a536      	add	r5, pc, #216	; (adr r5, 800bc60 <__ieee754_atan2+0x168>)
 800bb88:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb8c:	e7f2      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bb8e:	4542      	cmp	r2, r8
 800bb90:	d10f      	bne.n	800bbb2 <__ieee754_atan2+0xba>
 800bb92:	4293      	cmp	r3, r2
 800bb94:	f106 36ff 	add.w	r6, r6, #4294967295
 800bb98:	d107      	bne.n	800bbaa <__ieee754_atan2+0xb2>
 800bb9a:	2e02      	cmp	r6, #2
 800bb9c:	d851      	bhi.n	800bc42 <__ieee754_atan2+0x14a>
 800bb9e:	4b3b      	ldr	r3, [pc, #236]	; (800bc8c <__ieee754_atan2+0x194>)
 800bba0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bba4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bba8:	e7e4      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bbaa:	2e02      	cmp	r6, #2
 800bbac:	d84d      	bhi.n	800bc4a <__ieee754_atan2+0x152>
 800bbae:	4b38      	ldr	r3, [pc, #224]	; (800bc90 <__ieee754_atan2+0x198>)
 800bbb0:	e7f6      	b.n	800bba0 <__ieee754_atan2+0xa8>
 800bbb2:	4543      	cmp	r3, r8
 800bbb4:	d0e4      	beq.n	800bb80 <__ieee754_atan2+0x88>
 800bbb6:	1a9b      	subs	r3, r3, r2
 800bbb8:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bbbc:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bbc0:	da21      	bge.n	800bc06 <__ieee754_atan2+0x10e>
 800bbc2:	f1b9 0f00 	cmp.w	r9, #0
 800bbc6:	da01      	bge.n	800bbcc <__ieee754_atan2+0xd4>
 800bbc8:	323c      	adds	r2, #60	; 0x3c
 800bbca:	db20      	blt.n	800bc0e <__ieee754_atan2+0x116>
 800bbcc:	4652      	mov	r2, sl
 800bbce:	464b      	mov	r3, r9
 800bbd0:	4620      	mov	r0, r4
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	f7f4 fdb4 	bl	8000740 <__aeabi_ddiv>
 800bbd8:	f000 f9e8 	bl	800bfac <fabs>
 800bbdc:	f000 f85c 	bl	800bc98 <atan>
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	460d      	mov	r5, r1
 800bbe4:	2e01      	cmp	r6, #1
 800bbe6:	d015      	beq.n	800bc14 <__ieee754_atan2+0x11c>
 800bbe8:	2e02      	cmp	r6, #2
 800bbea:	d017      	beq.n	800bc1c <__ieee754_atan2+0x124>
 800bbec:	2e00      	cmp	r6, #0
 800bbee:	d0c1      	beq.n	800bb74 <__ieee754_atan2+0x7c>
 800bbf0:	a31d      	add	r3, pc, #116	; (adr r3, 800bc68 <__ieee754_atan2+0x170>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	f7f4 fabf 	bl	800017c <__aeabi_dsub>
 800bbfe:	a31c      	add	r3, pc, #112	; (adr r3, 800bc70 <__ieee754_atan2+0x178>)
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	e016      	b.n	800bc34 <__ieee754_atan2+0x13c>
 800bc06:	a51c      	add	r5, pc, #112	; (adr r5, 800bc78 <__ieee754_atan2+0x180>)
 800bc08:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc0c:	e7ea      	b.n	800bbe4 <__ieee754_atan2+0xec>
 800bc0e:	2400      	movs	r4, #0
 800bc10:	2500      	movs	r5, #0
 800bc12:	e7e7      	b.n	800bbe4 <__ieee754_atan2+0xec>
 800bc14:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bc18:	461d      	mov	r5, r3
 800bc1a:	e7ab      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bc1c:	a312      	add	r3, pc, #72	; (adr r3, 800bc68 <__ieee754_atan2+0x170>)
 800bc1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc22:	4620      	mov	r0, r4
 800bc24:	4629      	mov	r1, r5
 800bc26:	f7f4 faa9 	bl	800017c <__aeabi_dsub>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	a110      	add	r1, pc, #64	; (adr r1, 800bc70 <__ieee754_atan2+0x178>)
 800bc30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc34:	f7f4 faa2 	bl	800017c <__aeabi_dsub>
 800bc38:	e77f      	b.n	800bb3a <__ieee754_atan2+0x42>
 800bc3a:	a50d      	add	r5, pc, #52	; (adr r5, 800bc70 <__ieee754_atan2+0x178>)
 800bc3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc40:	e798      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bc42:	a50f      	add	r5, pc, #60	; (adr r5, 800bc80 <__ieee754_atan2+0x188>)
 800bc44:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc48:	e794      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bc4a:	2400      	movs	r4, #0
 800bc4c:	2500      	movs	r5, #0
 800bc4e:	e791      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bc50:	a509      	add	r5, pc, #36	; (adr r5, 800bc78 <__ieee754_atan2+0x180>)
 800bc52:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc56:	e78d      	b.n	800bb74 <__ieee754_atan2+0x7c>
 800bc58:	54442d18 	.word	0x54442d18
 800bc5c:	c00921fb 	.word	0xc00921fb
 800bc60:	54442d18 	.word	0x54442d18
 800bc64:	bff921fb 	.word	0xbff921fb
 800bc68:	33145c07 	.word	0x33145c07
 800bc6c:	3ca1a626 	.word	0x3ca1a626
 800bc70:	54442d18 	.word	0x54442d18
 800bc74:	400921fb 	.word	0x400921fb
 800bc78:	54442d18 	.word	0x54442d18
 800bc7c:	3ff921fb 	.word	0x3ff921fb
 800bc80:	54442d18 	.word	0x54442d18
 800bc84:	3fe921fb 	.word	0x3fe921fb
 800bc88:	7ff00000 	.word	0x7ff00000
 800bc8c:	0800c4f0 	.word	0x0800c4f0
 800bc90:	0800c508 	.word	0x0800c508
 800bc94:	00000000 	.word	0x00000000

0800bc98 <atan>:
 800bc98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	4bb6      	ldr	r3, [pc, #728]	; (800bf78 <atan+0x2e0>)
 800bc9e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bca2:	429e      	cmp	r6, r3
 800bca4:	4604      	mov	r4, r0
 800bca6:	460d      	mov	r5, r1
 800bca8:	468b      	mov	fp, r1
 800bcaa:	dd17      	ble.n	800bcdc <atan+0x44>
 800bcac:	4bb3      	ldr	r3, [pc, #716]	; (800bf7c <atan+0x2e4>)
 800bcae:	429e      	cmp	r6, r3
 800bcb0:	dc01      	bgt.n	800bcb6 <atan+0x1e>
 800bcb2:	d109      	bne.n	800bcc8 <atan+0x30>
 800bcb4:	b140      	cbz	r0, 800bcc8 <atan+0x30>
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	462b      	mov	r3, r5
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7f4 fa5f 	bl	8000180 <__adddf3>
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	460d      	mov	r5, r1
 800bcc6:	e005      	b.n	800bcd4 <atan+0x3c>
 800bcc8:	f1bb 0f00 	cmp.w	fp, #0
 800bccc:	4cac      	ldr	r4, [pc, #688]	; (800bf80 <atan+0x2e8>)
 800bcce:	f300 8121 	bgt.w	800bf14 <atan+0x27c>
 800bcd2:	4dac      	ldr	r5, [pc, #688]	; (800bf84 <atan+0x2ec>)
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	4629      	mov	r1, r5
 800bcd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcdc:	4baa      	ldr	r3, [pc, #680]	; (800bf88 <atan+0x2f0>)
 800bcde:	429e      	cmp	r6, r3
 800bce0:	dc11      	bgt.n	800bd06 <atan+0x6e>
 800bce2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bce6:	429e      	cmp	r6, r3
 800bce8:	dc0a      	bgt.n	800bd00 <atan+0x68>
 800bcea:	a38b      	add	r3, pc, #556	; (adr r3, 800bf18 <atan+0x280>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f7f4 fa46 	bl	8000180 <__adddf3>
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	4ba5      	ldr	r3, [pc, #660]	; (800bf8c <atan+0x2f4>)
 800bcf8:	f7f4 fe88 	bl	8000a0c <__aeabi_dcmpgt>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d1e9      	bne.n	800bcd4 <atan+0x3c>
 800bd00:	f04f 3aff 	mov.w	sl, #4294967295
 800bd04:	e027      	b.n	800bd56 <atan+0xbe>
 800bd06:	f000 f951 	bl	800bfac <fabs>
 800bd0a:	4ba1      	ldr	r3, [pc, #644]	; (800bf90 <atan+0x2f8>)
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	429e      	cmp	r6, r3
 800bd10:	460d      	mov	r5, r1
 800bd12:	f300 80b8 	bgt.w	800be86 <atan+0x1ee>
 800bd16:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bd1a:	429e      	cmp	r6, r3
 800bd1c:	f300 809c 	bgt.w	800be58 <atan+0x1c0>
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	f7f4 fa2c 	bl	8000180 <__adddf3>
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4b98      	ldr	r3, [pc, #608]	; (800bf8c <atan+0x2f4>)
 800bd2c:	f7f4 fa26 	bl	800017c <__aeabi_dsub>
 800bd30:	2200      	movs	r2, #0
 800bd32:	4606      	mov	r6, r0
 800bd34:	460f      	mov	r7, r1
 800bd36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 fa1f 	bl	8000180 <__adddf3>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fcf9 	bl	8000740 <__aeabi_ddiv>
 800bd4e:	f04f 0a00 	mov.w	sl, #0
 800bd52:	4604      	mov	r4, r0
 800bd54:	460d      	mov	r5, r1
 800bd56:	4622      	mov	r2, r4
 800bd58:	462b      	mov	r3, r5
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	f7f4 fbc5 	bl	80004ec <__aeabi_dmul>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	4680      	mov	r8, r0
 800bd68:	4689      	mov	r9, r1
 800bd6a:	f7f4 fbbf 	bl	80004ec <__aeabi_dmul>
 800bd6e:	a36c      	add	r3, pc, #432	; (adr r3, 800bf20 <atan+0x288>)
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	4606      	mov	r6, r0
 800bd76:	460f      	mov	r7, r1
 800bd78:	f7f4 fbb8 	bl	80004ec <__aeabi_dmul>
 800bd7c:	a36a      	add	r3, pc, #424	; (adr r3, 800bf28 <atan+0x290>)
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	f7f4 f9fd 	bl	8000180 <__adddf3>
 800bd86:	4632      	mov	r2, r6
 800bd88:	463b      	mov	r3, r7
 800bd8a:	f7f4 fbaf 	bl	80004ec <__aeabi_dmul>
 800bd8e:	a368      	add	r3, pc, #416	; (adr r3, 800bf30 <atan+0x298>)
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f7f4 f9f4 	bl	8000180 <__adddf3>
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	f7f4 fba6 	bl	80004ec <__aeabi_dmul>
 800bda0:	a365      	add	r3, pc, #404	; (adr r3, 800bf38 <atan+0x2a0>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 f9eb 	bl	8000180 <__adddf3>
 800bdaa:	4632      	mov	r2, r6
 800bdac:	463b      	mov	r3, r7
 800bdae:	f7f4 fb9d 	bl	80004ec <__aeabi_dmul>
 800bdb2:	a363      	add	r3, pc, #396	; (adr r3, 800bf40 <atan+0x2a8>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 f9e2 	bl	8000180 <__adddf3>
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	463b      	mov	r3, r7
 800bdc0:	f7f4 fb94 	bl	80004ec <__aeabi_dmul>
 800bdc4:	a360      	add	r3, pc, #384	; (adr r3, 800bf48 <atan+0x2b0>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 f9d9 	bl	8000180 <__adddf3>
 800bdce:	4642      	mov	r2, r8
 800bdd0:	464b      	mov	r3, r9
 800bdd2:	f7f4 fb8b 	bl	80004ec <__aeabi_dmul>
 800bdd6:	a35e      	add	r3, pc, #376	; (adr r3, 800bf50 <atan+0x2b8>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	4680      	mov	r8, r0
 800bdde:	4689      	mov	r9, r1
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f4 fb82 	bl	80004ec <__aeabi_dmul>
 800bde8:	a35b      	add	r3, pc, #364	; (adr r3, 800bf58 <atan+0x2c0>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 f9c5 	bl	800017c <__aeabi_dsub>
 800bdf2:	4632      	mov	r2, r6
 800bdf4:	463b      	mov	r3, r7
 800bdf6:	f7f4 fb79 	bl	80004ec <__aeabi_dmul>
 800bdfa:	a359      	add	r3, pc, #356	; (adr r3, 800bf60 <atan+0x2c8>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	f7f4 f9bc 	bl	800017c <__aeabi_dsub>
 800be04:	4632      	mov	r2, r6
 800be06:	463b      	mov	r3, r7
 800be08:	f7f4 fb70 	bl	80004ec <__aeabi_dmul>
 800be0c:	a356      	add	r3, pc, #344	; (adr r3, 800bf68 <atan+0x2d0>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f7f4 f9b3 	bl	800017c <__aeabi_dsub>
 800be16:	4632      	mov	r2, r6
 800be18:	463b      	mov	r3, r7
 800be1a:	f7f4 fb67 	bl	80004ec <__aeabi_dmul>
 800be1e:	a354      	add	r3, pc, #336	; (adr r3, 800bf70 <atan+0x2d8>)
 800be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be24:	f7f4 f9aa 	bl	800017c <__aeabi_dsub>
 800be28:	4632      	mov	r2, r6
 800be2a:	463b      	mov	r3, r7
 800be2c:	f7f4 fb5e 	bl	80004ec <__aeabi_dmul>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7f4 f9a2 	bl	8000180 <__adddf3>
 800be3c:	4622      	mov	r2, r4
 800be3e:	462b      	mov	r3, r5
 800be40:	f7f4 fb54 	bl	80004ec <__aeabi_dmul>
 800be44:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	d144      	bne.n	800bed8 <atan+0x240>
 800be4e:	4620      	mov	r0, r4
 800be50:	4629      	mov	r1, r5
 800be52:	f7f4 f993 	bl	800017c <__aeabi_dsub>
 800be56:	e734      	b.n	800bcc2 <atan+0x2a>
 800be58:	2200      	movs	r2, #0
 800be5a:	4b4c      	ldr	r3, [pc, #304]	; (800bf8c <atan+0x2f4>)
 800be5c:	f7f4 f98e 	bl	800017c <__aeabi_dsub>
 800be60:	2200      	movs	r2, #0
 800be62:	4606      	mov	r6, r0
 800be64:	460f      	mov	r7, r1
 800be66:	4620      	mov	r0, r4
 800be68:	4629      	mov	r1, r5
 800be6a:	4b48      	ldr	r3, [pc, #288]	; (800bf8c <atan+0x2f4>)
 800be6c:	f7f4 f988 	bl	8000180 <__adddf3>
 800be70:	4602      	mov	r2, r0
 800be72:	460b      	mov	r3, r1
 800be74:	4630      	mov	r0, r6
 800be76:	4639      	mov	r1, r7
 800be78:	f7f4 fc62 	bl	8000740 <__aeabi_ddiv>
 800be7c:	f04f 0a01 	mov.w	sl, #1
 800be80:	4604      	mov	r4, r0
 800be82:	460d      	mov	r5, r1
 800be84:	e767      	b.n	800bd56 <atan+0xbe>
 800be86:	4b43      	ldr	r3, [pc, #268]	; (800bf94 <atan+0x2fc>)
 800be88:	429e      	cmp	r6, r3
 800be8a:	da1a      	bge.n	800bec2 <atan+0x22a>
 800be8c:	2200      	movs	r2, #0
 800be8e:	4b42      	ldr	r3, [pc, #264]	; (800bf98 <atan+0x300>)
 800be90:	f7f4 f974 	bl	800017c <__aeabi_dsub>
 800be94:	2200      	movs	r2, #0
 800be96:	4606      	mov	r6, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	4b3e      	ldr	r3, [pc, #248]	; (800bf98 <atan+0x300>)
 800bea0:	f7f4 fb24 	bl	80004ec <__aeabi_dmul>
 800bea4:	2200      	movs	r2, #0
 800bea6:	4b39      	ldr	r3, [pc, #228]	; (800bf8c <atan+0x2f4>)
 800bea8:	f7f4 f96a 	bl	8000180 <__adddf3>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 fc44 	bl	8000740 <__aeabi_ddiv>
 800beb8:	f04f 0a02 	mov.w	sl, #2
 800bebc:	4604      	mov	r4, r0
 800bebe:	460d      	mov	r5, r1
 800bec0:	e749      	b.n	800bd56 <atan+0xbe>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	2000      	movs	r0, #0
 800bec8:	4934      	ldr	r1, [pc, #208]	; (800bf9c <atan+0x304>)
 800beca:	f7f4 fc39 	bl	8000740 <__aeabi_ddiv>
 800bece:	f04f 0a03 	mov.w	sl, #3
 800bed2:	4604      	mov	r4, r0
 800bed4:	460d      	mov	r5, r1
 800bed6:	e73e      	b.n	800bd56 <atan+0xbe>
 800bed8:	4b31      	ldr	r3, [pc, #196]	; (800bfa0 <atan+0x308>)
 800beda:	4e32      	ldr	r6, [pc, #200]	; (800bfa4 <atan+0x30c>)
 800bedc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	f7f4 f94a 	bl	800017c <__aeabi_dsub>
 800bee8:	4622      	mov	r2, r4
 800beea:	462b      	mov	r3, r5
 800beec:	f7f4 f946 	bl	800017c <__aeabi_dsub>
 800bef0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800befc:	f7f4 f93e 	bl	800017c <__aeabi_dsub>
 800bf00:	f1bb 0f00 	cmp.w	fp, #0
 800bf04:	4604      	mov	r4, r0
 800bf06:	460d      	mov	r5, r1
 800bf08:	f6bf aee4 	bge.w	800bcd4 <atan+0x3c>
 800bf0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf10:	461d      	mov	r5, r3
 800bf12:	e6df      	b.n	800bcd4 <atan+0x3c>
 800bf14:	4d24      	ldr	r5, [pc, #144]	; (800bfa8 <atan+0x310>)
 800bf16:	e6dd      	b.n	800bcd4 <atan+0x3c>
 800bf18:	8800759c 	.word	0x8800759c
 800bf1c:	7e37e43c 	.word	0x7e37e43c
 800bf20:	e322da11 	.word	0xe322da11
 800bf24:	3f90ad3a 	.word	0x3f90ad3a
 800bf28:	24760deb 	.word	0x24760deb
 800bf2c:	3fa97b4b 	.word	0x3fa97b4b
 800bf30:	a0d03d51 	.word	0xa0d03d51
 800bf34:	3fb10d66 	.word	0x3fb10d66
 800bf38:	c54c206e 	.word	0xc54c206e
 800bf3c:	3fb745cd 	.word	0x3fb745cd
 800bf40:	920083ff 	.word	0x920083ff
 800bf44:	3fc24924 	.word	0x3fc24924
 800bf48:	5555550d 	.word	0x5555550d
 800bf4c:	3fd55555 	.word	0x3fd55555
 800bf50:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf54:	bfa2b444 	.word	0xbfa2b444
 800bf58:	52defd9a 	.word	0x52defd9a
 800bf5c:	3fadde2d 	.word	0x3fadde2d
 800bf60:	af749a6d 	.word	0xaf749a6d
 800bf64:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf68:	fe231671 	.word	0xfe231671
 800bf6c:	3fbc71c6 	.word	0x3fbc71c6
 800bf70:	9998ebc4 	.word	0x9998ebc4
 800bf74:	3fc99999 	.word	0x3fc99999
 800bf78:	440fffff 	.word	0x440fffff
 800bf7c:	7ff00000 	.word	0x7ff00000
 800bf80:	54442d18 	.word	0x54442d18
 800bf84:	bff921fb 	.word	0xbff921fb
 800bf88:	3fdbffff 	.word	0x3fdbffff
 800bf8c:	3ff00000 	.word	0x3ff00000
 800bf90:	3ff2ffff 	.word	0x3ff2ffff
 800bf94:	40038000 	.word	0x40038000
 800bf98:	3ff80000 	.word	0x3ff80000
 800bf9c:	bff00000 	.word	0xbff00000
 800bfa0:	0800c540 	.word	0x0800c540
 800bfa4:	0800c520 	.word	0x0800c520
 800bfa8:	3ff921fb 	.word	0x3ff921fb

0800bfac <fabs>:
 800bfac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4770      	bx	lr

0800bfb4 <_init>:
 800bfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb6:	bf00      	nop
 800bfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfba:	bc08      	pop	{r3}
 800bfbc:	469e      	mov	lr, r3
 800bfbe:	4770      	bx	lr

0800bfc0 <_fini>:
 800bfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfc2:	bf00      	nop
 800bfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfc6:	bc08      	pop	{r3}
 800bfc8:	469e      	mov	lr, r3
 800bfca:	4770      	bx	lr
