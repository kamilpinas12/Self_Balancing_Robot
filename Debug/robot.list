
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b22c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800b340  0800b340  0001b340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b850  0800b850  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b850  0800b850  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b850  0800b850  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b850  0800b850  0001b850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b854  0800b854  0001b854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200001d4  0800ba2c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  0800ba2c  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001369e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003318  00000000  00000000  000338de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00036bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e08  00000000  00000000  00037df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa82  00000000  00000000  00038c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001803b  00000000  00000000  00053682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fcab  00000000  00000000  0006b6bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e18  00000000  00000000  000fb368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00101180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b324 	.word	0x0800b324

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800b324 	.word	0x0800b324

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_DMA_Init+0x48>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <MX_DMA_Init+0x48>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_DMA_Init+0x48>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	200e      	movs	r0, #14
 8001194:	f002 fdd5 	bl	8003d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001198:	200e      	movs	r0, #14
 800119a:	f002 fdee 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	200f      	movs	r0, #15
 80011a4:	f002 fdcd 	bl	8003d42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011a8:	200f      	movs	r0, #15
 80011aa:	f002 fde6 	bl	8003d7a <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a3f      	ldr	r2, [pc, #252]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e8:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011ee:	f043 0320 	orr.w	r3, r3, #32
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <MX_GPIO_Init+0x118>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <MX_GPIO_Init+0x118>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <MX_GPIO_Init+0x118>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <MX_GPIO_Init+0x118>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <MX_GPIO_Init+0x118>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <MX_GPIO_Init+0x118>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	4828      	ldr	r0, [pc, #160]	; (80012d8 <MX_GPIO_Init+0x11c>)
 8001238:	f003 f9e0 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2108      	movs	r1, #8
 8001240:	4826      	ldr	r0, [pc, #152]	; (80012dc <MX_GPIO_Init+0x120>)
 8001242:	f003 f9db 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	4824      	ldr	r0, [pc, #144]	; (80012dc <MX_GPIO_Init+0x120>)
 800124c:	f003 f9d6 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2102      	movs	r1, #2
 8001254:	4822      	ldr	r0, [pc, #136]	; (80012e0 <MX_GPIO_Init+0x124>)
 8001256:	f003 f9d1 	bl	80045fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4819      	ldr	r0, [pc, #100]	; (80012d8 <MX_GPIO_Init+0x11c>)
 8001274:	f003 f83e 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 8001278:	2388      	movs	r3, #136	; 0x88
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_GPIO_Init+0x120>)
 8001290:	f003 f830 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 8001294:	2302      	movs	r3, #2
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_GPIO_Init+0x124>)
 80012ac:	f003 f822 	bl	80042f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_STATE_Pin;
 80012b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0x120>)
 80012c6:	f003 f815 	bl	80042f4 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <saturation>:





void saturation(float min, float max, float* val){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	if(*val > max) *val = max;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	68b8      	ldr	r0, [r7, #8]
 80012f8:	f7ff feec 	bl	80010d4 <__aeabi_fcmplt>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <saturation+0x24>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	601a      	str	r2, [r3, #0]
	if(*val < min) *val = min;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff fefe 	bl	8001110 <__aeabi_fcmpgt>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <saturation+0x38>
}
 800131a:	e002      	b.n	8001322 <saturation+0x3e>
	if(*val < min) *val = min;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C1_Init+0x50>)
 800136a:	f003 f95f 	bl	800462c <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 fe92 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001f0 	.word	0x200001f0
 8001380:	40005400 	.word	0x40005400
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C2_Init+0x50>)
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <MX_I2C2_Init+0x54>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_I2C2_Init+0x50>)
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_I2C2_Init+0x58>)
 8001396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013c6:	f003 f931 	bl	800462c <HAL_I2C_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f000 fe64 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000244 	.word	0x20000244
 80013dc:	40005800 	.word	0x40005800
 80013e0:	000186a0 	.word	0x000186a0

080013e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <HAL_I2C_MspInit+0xc8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d124      	bne.n	800144e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141c:	23c0      	movs	r3, #192	; 0xc0
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001420:	2312      	movs	r3, #18
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4619      	mov	r1, r3
 800142e:	4821      	ldr	r0, [pc, #132]	; (80014b4 <HAL_I2C_MspInit+0xd0>)
 8001430:	f002 ff60 	bl	80042f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	61d3      	str	r3, [r2, #28]
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800144c:	e029      	b.n	80014a2 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_I2C_MspInit+0xd4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d124      	bne.n	80014a2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001470:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_I2C_MspInit+0xd0>)
 8001486:	f002 ff35 	bl	80042f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40005800 	.word	0x40005800

080014bc <filter_init>:
 */

#include "low_pass_filter.h"


filter_typedef filter_init(float alpha){
 80014bc:	b490      	push	{r4, r7}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	filter_typedef f = {alpha, 0, 1};
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	2301      	movs	r3, #1
 80014d2:	753b      	strb	r3, [r7, #20]
	return f;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	461c      	mov	r4, r3
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc90      	pop	{r4, r7}
 80014ec:	4770      	bx	lr

080014ee <filter>:


float filter(filter_typedef* filter, float new_value){
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
	if(filter->reset){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7a1b      	ldrb	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <filter+0x22>
		filter->reset = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	721a      	strb	r2, [r3, #8]
		filter->prev_value = new_value;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	605a      	str	r2, [r3, #4]
		return new_value;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	e021      	b.n	8001554 <filter+0x66>
	}
	else{
		float filtered_value = (filter->alpha) * new_value + (1 - filter->alpha) * filter->prev_value;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6839      	ldr	r1, [r7, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fc3e 	bl	8000d98 <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	461c      	mov	r4, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800152a:	f7ff fb2b 	bl	8000b84 <__aeabi_fsub>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff fc2d 	bl	8000d98 <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fb20 	bl	8000b88 <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	60fb      	str	r3, [r7, #12]
		filter->prev_value = filtered_value;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
		return filtered_value;
 8001552:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}

0800155c <reset_filter>:


void reset_filter(filter_typedef* filter){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	filter->reset = 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	721a      	strb	r2, [r3, #8]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d109      	bne.n	8001596 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8001582:	230d      	movs	r3, #13
 8001584:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 8001586:	f107 010f 	add.w	r1, r7, #15
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	2201      	movs	r2, #1
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <__io_putchar+0x3c>)
 8001592:	f005 fc6b 	bl	8006e6c <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001596:	1d39      	adds	r1, r7, #4
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	2201      	movs	r2, #1
 800159e:	4804      	ldr	r0, [pc, #16]	; (80015b0 <__io_putchar+0x3c>)
 80015a0:	f005 fc64 	bl	8006e6c <HAL_UART_Transmit>
    return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000620 	.word	0x20000620

080015b4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if(htim == stepper1.htim){
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d103      	bne.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x1a>
		stepper_update(&stepper1);
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015c8:	f001 fb7c 	bl	8002cc4 <stepper_update>
	}
	else if(htim == stepper2.htim){
		stepper_update(&stepper2);
	}
}
 80015cc:	e007      	b.n	80015de <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == stepper2.htim){
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d102      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x2a>
		stepper_update(&stepper2);
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015da:	f001 fb73 	bl	8002cc4 <stepper_update>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000298 	.word	0x20000298
 80015ec:	200002c4 	.word	0x200002c4

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f4:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80015f8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f002 fa45 	bl	8003a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fe:	f000 fd07 	bl	8002010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f7ff fddb 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001606:	f7ff fdb3 	bl	8001170 <MX_DMA_Init>
  MX_I2C1_Init();
 800160a:	f7ff fe8f 	bl	800132c <MX_I2C1_Init>
  MX_TIM2_Init();
 800160e:	f001 fcf1 	bl	8002ff4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001612:	f001 fd65 	bl	80030e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001616:	f002 f897 	bl	8003748 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800161a:	f7ff feb5 	bl	8001388 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // stepper motor setup
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	f241 7370 	movw	r3, #6000	; 0x1770
 8001628:	9303      	str	r3, [sp, #12]
 800162a:	2308      	movs	r3, #8
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	4b78      	ldr	r3, [pc, #480]	; (8001810 <main+0x220>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4b76      	ldr	r3, [pc, #472]	; (8001810 <main+0x220>)
 8001638:	2200      	movs	r2, #0
 800163a:	4976      	ldr	r1, [pc, #472]	; (8001814 <main+0x224>)
 800163c:	4876      	ldr	r0, [pc, #472]	; (8001818 <main+0x228>)
 800163e:	f001 f9b6 	bl	80029ae <stepper_init>
		  DIR1_GPIO_Port, DIR1_Pin, 6000, -1);
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001642:	2301      	movs	r3, #1
 8001644:	9304      	str	r3, [sp, #16]
 8001646:	f241 7370 	movw	r3, #6000	; 0x1770
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	2302      	movs	r3, #2
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	4b72      	ldr	r3, [pc, #456]	; (800181c <main+0x22c>)
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <main+0x220>)
 800165a:	2200      	movs	r2, #0
 800165c:	4970      	ldr	r1, [pc, #448]	; (8001820 <main+0x230>)
 800165e:	4871      	ldr	r0, [pc, #452]	; (8001824 <main+0x234>)
 8001660:	f001 f9a5 	bl	80029ae <stepper_init>
		  DIR2_GPIO_Port, DIR2_Pin, 6000, 1);


  // MPU setup
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 8001664:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001668:	22d0      	movs	r2, #208	; 0xd0
 800166a:	496f      	ldr	r1, [pc, #444]	; (8001828 <main+0x238>)
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fe87 	bl	8002380 <mpu_init>

  if(mpu_who_am_i(&mpu) != HAL_OK)
 8001672:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fe6e 	bl	8002358 <mpu_who_am_i>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <main+0xa2>
  {
	  while(1)
	  {
		  printf("Error while connecting to mpu 6050\n");
 8001682:	486a      	ldr	r0, [pc, #424]	; (800182c <main+0x23c>)
 8001684:	f007 fa88 	bl	8008b98 <puts>
		  HAL_Delay(1000);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f002 fa5e 	bl	8003b4c <HAL_Delay>
		  printf("Error while connecting to mpu 6050\n");
 8001690:	e7f7      	b.n	8001682 <main+0x92>
	  }
  }

  set_gyro_scale(&mpu, range_250);
 8001692:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fd9d 	bl	80021d8 <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 800169e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fde5 	bl	8002274 <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc21Hz_Gyro20Hz);
 80016aa:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80016ae:	2104      	movs	r1, #4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fe2d 	bl	8002310 <mpu_low_pass_filter>
  HAL_Delay(300);
 80016b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016ba:	f002 fa47 	bl	8003b4c <HAL_Delay>


  mpu_gyro_calibration(&mpu);
 80016be:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 ff50 	bl	8002568 <mpu_gyro_calibration>



  user_function_typedef user_function_array[] = {
 80016c8:	4a59      	ldr	r2, [pc, #356]	; (8001830 <main+0x240>)
 80016ca:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80016ce:	4611      	mov	r1, r2
 80016d0:	2278      	movs	r2, #120	; 0x78
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fc00 	bl	8008ed8 <memcpy>
		{&rotate_deg, "rotate", 2}

  };


  uart_interface_init(&uart_interface, &huart1, &hdma_usart1_rx, user_function_array, sizeof(user_function_array) / sizeof(user_function_typedef));
 80016d8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80016dc:	2205      	movs	r2, #5
 80016de:	9200      	str	r2, [sp, #0]
 80016e0:	4a54      	ldr	r2, [pc, #336]	; (8001834 <main+0x244>)
 80016e2:	4955      	ldr	r1, [pc, #340]	; (8001838 <main+0x248>)
 80016e4:	4855      	ldr	r0, [pc, #340]	; (800183c <main+0x24c>)
 80016e6:	f001 fe01 	bl	80032ec <uart_interface_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // control parameters
  int delay = 4;
 80016ea:	2304      	movs	r3, #4
 80016ec:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac


  pid_typedef angle_pid = pid_init(480, 6, 1200);
 80016f0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80016f4:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80016f8:	4b51      	ldr	r3, [pc, #324]	; (8001840 <main+0x250>)
 80016fa:	4a52      	ldr	r2, [pc, #328]	; (8001844 <main+0x254>)
 80016fc:	4952      	ldr	r1, [pc, #328]	; (8001848 <main+0x258>)
 80016fe:	f001 f8cb 	bl	8002898 <pid_init>
  pid_typedef pos_pid = pid_init(0.003, 0.000002, 0.006);
 8001702:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001706:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <main+0x25c>)
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <main+0x260>)
 800170e:	4951      	ldr	r1, [pc, #324]	; (8001854 <main+0x264>)
 8001710:	f001 f8c2 	bl	8002898 <pid_init>


  filter_typedef pos_pid_filter = filter_init(0.05);
 8001714:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001718:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800171c:	494e      	ldr	r1, [pc, #312]	; (8001858 <main+0x268>)
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fecc 	bl	80014bc <filter_init>
  filter_typedef pos_pid_derivative_filter = filter_init(0.005);
 8001724:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001728:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800172c:	494b      	ldr	r1, [pc, #300]	; (800185c <main+0x26c>)
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fec4 	bl	80014bc <filter_init>
  filter_typedef angle_pid_derivative_filter = filter_init(0.3);
 8001734:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001738:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800173c:	4948      	ldr	r1, [pc, #288]	; (8001860 <main+0x270>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff febc 	bl	80014bc <filter_init>
  filter_typedef output_filter = filter_init(0.8);
 8001744:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001748:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800174c:	4945      	ldr	r1, [pc, #276]	; (8001864 <main+0x274>)
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff feb4 	bl	80014bc <filter_init>
  filter_typedef gain_factor_filter = filter_init(0.1);
 8001754:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001758:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800175c:	4942      	ldr	r1, [pc, #264]	; (8001868 <main+0x278>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff feac 	bl	80014bc <filter_init>
  filter_typedef robot_speed_filter = filter_init(0.1);
 8001764:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001768:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800176c:	493e      	ldr	r1, [pc, #248]	; (8001868 <main+0x278>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fea4 	bl	80014bc <filter_init>
  filter_typedef target_angle_filter = filter_init(0.4);
 8001774:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001778:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800177c:	493b      	ldr	r1, [pc, #236]	; (800186c <main+0x27c>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe9c 	bl	80014bc <filter_init>
  filter_typedef desired_speed_fitler = filter_init(0.1);
 8001784:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001788:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800178c:	4936      	ldr	r1, [pc, #216]	; (8001868 <main+0x278>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fe94 	bl	80014bc <filter_init>



  unsigned long lst_time = HAL_GetTick();
 8001794:	f002 f9d0 	bl	8003b38 <HAL_GetTick>
 8001798:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4


  while (1)
  {
	  mpu_calc_x_angle(&mpu);
 800179c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 ffd5 	bl	8002750 <mpu_calc_x_angle>

	  execute_received_command(&uart_interface);
 80017a6:	4825      	ldr	r0, [pc, #148]	; (800183c <main+0x24c>)
 80017a8:	f001 fe82 	bl	80034b0 <execute_received_command>
	  start_uart_interface(&uart_interface);
 80017ac:	4823      	ldr	r0, [pc, #140]	; (800183c <main+0x24c>)
 80017ae:	f001 fdcc 	bl	800334a <start_uart_interface>

	  if(fabsf(mpu.x_angle) < 0.01){
 80017b2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80017b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fe3e 	bl	800043c <__aeabi_f2d>
 80017c0:	a311      	add	r3, pc, #68	; (adr r3, 8001808 <main+0x218>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7ff f903 	bl	80009d0 <__aeabi_dcmplt>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8407 	beq.w	8001fe0 <main+0x9f0>
		  // set up before entering main loop
		  lst_time = HAL_GetTick();
 80017d2:	f002 f9b1 	bl	8003b38 <HAL_GetTick>
 80017d6:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4

		  // start motors
		  stepper_enable(&stepper1, 1);
 80017da:	2101      	movs	r1, #1
 80017dc:	480e      	ldr	r0, [pc, #56]	; (8001818 <main+0x228>)
 80017de:	f001 f92e 	bl	8002a3e <stepper_enable>
		  stepper_enable(&stepper2, 1);
 80017e2:	2101      	movs	r1, #1
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <main+0x234>)
 80017e6:	f001 f92a 	bl	8002a3e <stepper_enable>

		  //restart motor position
		  stepper1.step_counter = 0;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <main+0x228>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
		  stepper2.step_counter = 0;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <main+0x234>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
		  set_pos = 0;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <main+0x280>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

		  spin_duration_ms = 0;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <main+0x284>)
 80017fe:	2200      	movs	r2, #0
 8001800:	801a      	strh	r2, [r3, #0]

		  // main loop
		  while(fabsf(mpu.x_angle) < 0.7){
 8001802:	e399      	b.n	8001f38 <main+0x948>
 8001804:	f3af 8000 	nop.w
 8001808:	47ae147b 	.word	0x47ae147b
 800180c:	3f847ae1 	.word	0x3f847ae1
 8001810:	40010800 	.word	0x40010800
 8001814:	20000590 	.word	0x20000590
 8001818:	20000298 	.word	0x20000298
 800181c:	40010c00 	.word	0x40010c00
 8001820:	200005d8 	.word	0x200005d8
 8001824:	200002c4 	.word	0x200002c4
 8001828:	200001f0 	.word	0x200001f0
 800182c:	0800b340 	.word	0x0800b340
 8001830:	0800b390 	.word	0x0800b390
 8001834:	20000668 	.word	0x20000668
 8001838:	20000620 	.word	0x20000620
 800183c:	200002f4 	.word	0x200002f4
 8001840:	44960000 	.word	0x44960000
 8001844:	40c00000 	.word	0x40c00000
 8001848:	43f00000 	.word	0x43f00000
 800184c:	3bc49ba6 	.word	0x3bc49ba6
 8001850:	360637bd 	.word	0x360637bd
 8001854:	3b449ba6 	.word	0x3b449ba6
 8001858:	3d4ccccd 	.word	0x3d4ccccd
 800185c:	3ba3d70a 	.word	0x3ba3d70a
 8001860:	3e99999a 	.word	0x3e99999a
 8001864:	3f4ccccd 	.word	0x3f4ccccd
 8001868:	3dcccccd 	.word	0x3dcccccd
 800186c:	3ecccccd 	.word	0x3ecccccd
 8001870:	200002f0 	.word	0x200002f0
 8001874:	20000584 	.word	0x20000584
			  if((HAL_GetTick() - mpu.lst_time_x_angle) >= delay){
 8001878:	f002 f95e 	bl	8003b38 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8001882:	1ad2      	subs	r2, r2, r3
 8001884:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001888:	429a      	cmp	r2, r3
 800188a:	f0c0 8355 	bcc.w	8001f38 <main+0x948>

				  mpu_calc_x_angle(&mpu);
 800188e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001892:	4618      	mov	r0, r3
 8001894:	f000 ff5c 	bl	8002750 <mpu_calc_x_angle>
				  float time_delta = (mpu.lst_time_x_angle - lst_time);
 8001898:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
 800189c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa20 	bl	8000ce8 <__aeabi_ui2f>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
				  lst_time = mpu.lst_time_x_angle;
 80018ae:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80018b2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4


				  float robot_speed = filter(&robot_speed_filter, (stepper1.speed + stepper2.speed) / 2);
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <main+0x4b8>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	4a7c      	ldr	r2, [pc, #496]	; (8001aac <main+0x4bc>)
 80018bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f961 	bl	8000b88 <__addsf3>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fb17 	bl	8000f00 <__aeabi_fdiv>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fe06 	bl	80014ee <filter>
 80018e2:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
				  float position_error = -((stepper2.step_counter + stepper1.step_counter)/2) - set_pos;
 80018e6:	4b71      	ldr	r3, [pc, #452]	; (8001aac <main+0x4bc>)
 80018e8:	699a      	ldr	r2, [r3, #24]
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <main+0x4b8>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4413      	add	r3, r2
 80018f0:	0fda      	lsrs	r2, r3, #31
 80018f2:	4413      	add	r3, r2
 80018f4:	105b      	asrs	r3, r3, #1
 80018f6:	425b      	negs	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <main+0x4c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff f9f5 	bl	8000cf0 <__aeabi_i2f>
 8001906:	4603      	mov	r3, r0
 8001908:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
				  robot_angle = (360.0 * 21.3)/(2*3.14*15.5 * 1600.0) * (stepper2.step_counter - stepper1.step_counter);
 800190c:	4b67      	ldr	r3, [pc, #412]	; (8001aac <main+0x4bc>)
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	4b65      	ldr	r3, [pc, #404]	; (8001aa8 <main+0x4b8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd7e 	bl	8000418 <__aeabi_i2d>
 800191c:	a35e      	add	r3, pc, #376	; (adr r3, 8001a98 <main+0x4a8>)
 800191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001922:	f7fe fde3 	bl	80004ec <__aeabi_dmul>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	f7ff f8d5 	bl	8000adc <__aeabi_d2f>
 8001932:	4603      	mov	r3, r0
 8001934:	4a5f      	ldr	r2, [pc, #380]	; (8001ab4 <main+0x4c4>)
 8001936:	6013      	str	r3, [r2, #0]


				  // pos hold PID
				  float desired_speed = (position_error * 0.05);
 8001938:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 800193c:	f7fe fd7e 	bl	800043c <__aeabi_f2d>
 8001940:	a357      	add	r3, pc, #348	; (adr r3, 8001aa0 <main+0x4b0>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fdd1 	bl	80004ec <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	f7ff f8c3 	bl	8000adc <__aeabi_d2f>
 8001956:	4602      	mov	r2, r0
 8001958:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800195c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001960:	601a      	str	r2, [r3, #0]
				  saturation(-60, 60, &desired_speed);
 8001962:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001966:	461a      	mov	r2, r3
 8001968:	4953      	ldr	r1, [pc, #332]	; (8001ab8 <main+0x4c8>)
 800196a:	4854      	ldr	r0, [pc, #336]	; (8001abc <main+0x4cc>)
 800196c:	f7ff fcba 	bl	80012e4 <saturation>
				  desired_speed = filter(&desired_speed_fitler, desired_speed);
 8001970:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001974:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fdb4 	bl	80014ee <filter>
 8001986:	4602      	mov	r2, r0
 8001988:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800198c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001990:	601a      	str	r2, [r3, #0]

				  float error = robot_speed - desired_speed;
 8001992:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001996:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f8d7 02a4 	ldr.w	r0, [r7, #676]	; 0x2a4
 80019a2:	f7ff f8ef 	bl	8000b84 <__aeabi_fsub>
 80019a6:	4603      	mov	r3, r0
 80019a8:	461a      	mov	r2, r3
 80019aa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019b2:	601a      	str	r2, [r3, #0]
				  saturation(-50, 50, &error);
 80019b4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80019b8:	461a      	mov	r2, r3
 80019ba:	4941      	ldr	r1, [pc, #260]	; (8001ac0 <main+0x4d0>)
 80019bc:	4841      	ldr	r0, [pc, #260]	; (8001ac4 <main+0x4d4>)
 80019be:	f7ff fc91 	bl	80012e4 <saturation>

				  pos_pid.error = filter(&pos_pid_filter, error);
 80019c2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019c6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fd8b 	bl	80014ee <filter>
 80019d8:	4602      	mov	r2, r0
 80019da:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019e2:	611a      	str	r2, [r3, #16]
				  pos_pid.measurement = filter(&pos_pid_derivative_filter, robot_speed);
 80019e4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80019e8:	f8d7 12a4 	ldr.w	r1, [r7, #676]	; 0x2a4
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fd7e 	bl	80014ee <filter>
 80019f2:	4602      	mov	r2, r0
 80019f4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019fc:	619a      	str	r2, [r3, #24]


				  float gain_factor = 1;
 80019fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a02:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
				  if(fabs(position_error) < 130 && fabs(robot_speed) < 30 && fabs((pos_pid.measurement - pos_pid.prev_measurement)/time_delta) < 1){
 8001a06:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001a0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a0e:	492e      	ldr	r1, [pc, #184]	; (8001ac8 <main+0x4d8>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fb5f 	bl	80010d4 <__aeabi_fcmplt>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d05b      	beq.n	8001ad4 <main+0x4e4>
 8001a1c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8001a20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a24:	4929      	ldr	r1, [pc, #164]	; (8001acc <main+0x4dc>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fb54 	bl	80010d4 <__aeabi_fcmplt>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d050      	beq.n	8001ad4 <main+0x4e4>
 8001a32:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4610      	mov	r0, r2
 8001a4a:	f7ff f89b 	bl	8000b84 <__aeabi_fsub>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fa53 	bl	8000f00 <__aeabi_fdiv>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a60:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fb35 	bl	80010d4 <__aeabi_fcmplt>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d031      	beq.n	8001ad4 <main+0x4e4>
					  gain_factor = fabs(position_error) / 130;
 8001a70:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8001a74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a78:	4913      	ldr	r1, [pc, #76]	; (8001ac8 <main+0x4d8>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fa40 	bl	8000f00 <__aeabi_fdiv>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
					  pos_pid.ki = 0.000002;
 8001a86:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <main+0x4e0>)
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	e025      	b.n	8001ae0 <main+0x4f0>
 8001a94:	f3af 8000 	nop.w
 8001a98:	6dd3b627 	.word	0x6dd3b627
 8001a9c:	3fa93548 	.word	0x3fa93548
 8001aa0:	9999999a 	.word	0x9999999a
 8001aa4:	3fa99999 	.word	0x3fa99999
 8001aa8:	20000298 	.word	0x20000298
 8001aac:	200002c4 	.word	0x200002c4
 8001ab0:	200002f0 	.word	0x200002f0
 8001ab4:	20000588 	.word	0x20000588
 8001ab8:	42700000 	.word	0x42700000
 8001abc:	c2700000 	.word	0xc2700000
 8001ac0:	42480000 	.word	0x42480000
 8001ac4:	c2480000 	.word	0xc2480000
 8001ac8:	43020000 	.word	0x43020000
 8001acc:	41f00000 	.word	0x41f00000
 8001ad0:	360637bd 	.word	0x360637bd
				  }
				  else{
					  pos_pid.ki = 0.000001;
 8001ad4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001adc:	4ac7      	ldr	r2, [pc, #796]	; (8001dfc <main+0x80c>)
 8001ade:	605a      	str	r2, [r3, #4]
				  }

				  gain_factor = filter(&gain_factor_filter, gain_factor);
 8001ae0:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001ae4:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fd00 	bl	80014ee <filter>
 8001aee:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0


				  // pos P
				  float p_pos = gain_factor * pos_pid.error * pos_pid.kp;
 8001af2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f949 	bl	8000d98 <__aeabi_fmul>
 8001b06:	4603      	mov	r3, r0
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7ff f93e 	bl	8000d98 <__aeabi_fmul>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c

				  // pos I
				  pos_pid.i += 0.5 * (pos_pid.error + pos_pid.prev_error) * pos_pid.ki * time_delta;
 8001b22:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fc85 	bl	800043c <__aeabi_f2d>
 8001b32:	4604      	mov	r4, r0
 8001b34:	460d      	mov	r5, r1
 8001b36:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff f81b 	bl	8000b88 <__addsf3>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fc71 	bl	800043c <__aeabi_f2d>
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4ba8      	ldr	r3, [pc, #672]	; (8001e00 <main+0x810>)
 8001b60:	f7fe fcc4 	bl	80004ec <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4690      	mov	r8, r2
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fc60 	bl	800043c <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4640      	mov	r0, r8
 8001b82:	4649      	mov	r1, r9
 8001b84:	f7fe fcb2 	bl	80004ec <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4690      	mov	r8, r2
 8001b8e:	4699      	mov	r9, r3
 8001b90:	f8d7 02a8 	ldr.w	r0, [r7, #680]	; 0x2a8
 8001b94:	f7fe fc52 	bl	800043c <__aeabi_f2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4640      	mov	r0, r8
 8001b9e:	4649      	mov	r1, r9
 8001ba0:	f7fe fca4 	bl	80004ec <__aeabi_dmul>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fae8 	bl	8000180 <__adddf3>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe ff90 	bl	8000adc <__aeabi_d2f>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bc6:	60da      	str	r2, [r3, #12]
				  saturation(-0.55, 0.55, &pos_pid.i);
 8001bc8:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001bcc:	330c      	adds	r3, #12
 8001bce:	461a      	mov	r2, r3
 8001bd0:	498c      	ldr	r1, [pc, #560]	; (8001e04 <main+0x814>)
 8001bd2:	488d      	ldr	r0, [pc, #564]	; (8001e08 <main+0x818>)
 8001bd4:	f7ff fb86 	bl	80012e4 <saturation>

				  // pos D
				  float d_pos = gain_factor * pos_pid.kd * (pos_pid.measurement - pos_pid.prev_measurement) / time_delta;
 8001bd8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f8d6 	bl	8000d98 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461c      	mov	r4, r3
 8001bf0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001bf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001bfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f7fe ffbc 	bl	8000b84 <__aeabi_fsub>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4620      	mov	r0, r4
 8001c12:	f7ff f8c1 	bl	8000d98 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f96f 	bl	8000f00 <__aeabi_fdiv>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298



				  //target angle
				  float target_angle = filter(&target_angle_filter, p_pos + pos_pid.i + d_pos);
 8001c28:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe ffa6 	bl	8000b88 <__addsf3>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f8d7 1298 	ldr.w	r1, [r7, #664]	; 0x298
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe ffa0 	bl	8000b88 <__addsf3>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fc4b 	bl	80014ee <filter>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001c5e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c62:	601a      	str	r2, [r3, #0]
				  saturation(-0.5, 0.5, &target_angle);
 8001c64:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c6e:	f04f 403f 	mov.w	r0, #3204448256	; 0xbf000000
 8001c72:	f7ff fb37 	bl	80012e4 <saturation>



				  // angle PID
				  angle_pid.error =  target_angle - mpu.x_angle;
 8001c76:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001c7a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe ff7c 	bl	8000b84 <__aeabi_fsub>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001c94:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c98:	611a      	str	r2, [r3, #16]
				  angle_pid.measurement = -mpu.x_angle;
 8001c9a:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001c9e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001ca2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ca6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001caa:	619a      	str	r2, [r3, #24]

				  // P angle
				  float p = angle_pid.error * angle_pid.kp;
 8001cac:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001cb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001cba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f7ff f868 	bl	8000d98 <__aeabi_fmul>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294

				  // I angle
				  angle_pid.i += ((angle_pid.error + angle_pid.prev_error) * time_delta * angle_pid.ki) / 2;
 8001cce:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001cd2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cd6:	68dc      	ldr	r4, [r3, #12]
 8001cd8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001cdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ce6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f7fe ff4a 	bl	8000b88 <__addsf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f84c 	bl	8000d98 <__aeabi_fmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001d08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7ff f841 	bl	8000d98 <__aeabi_fmul>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f8ef 	bl	8000f00 <__aeabi_fdiv>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7fe ff2e 	bl	8000b88 <__addsf3>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001d34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d38:	60da      	str	r2, [r3, #12]
				  saturation(-60, 60, &angle_pid.i);
 8001d3a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001d3e:	330c      	adds	r3, #12
 8001d40:	461a      	mov	r2, r3
 8001d42:	4932      	ldr	r1, [pc, #200]	; (8001e0c <main+0x81c>)
 8001d44:	4832      	ldr	r0, [pc, #200]	; (8001e10 <main+0x820>)
 8001d46:	f7ff facd 	bl	80012e4 <saturation>

				  // D angle
				  pos_pid.measurement = filter(&angle_pid_derivative_filter, angle_pid.measurement);
 8001d4a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001d4e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d52:	699a      	ldr	r2, [r3, #24]
 8001d54:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fbc7 	bl	80014ee <filter>
 8001d60:	4602      	mov	r2, r0
 8001d62:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d6a:	619a      	str	r2, [r3, #24]
				  float d = angle_pid.kd * (pos_pid.measurement - angle_pid.prev_measurement)/time_delta;
 8001d6c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001d70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d74:	689c      	ldr	r4, [r3, #8]
 8001d76:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001d7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d7e:	699a      	ldr	r2, [r3, #24]
 8001d80:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001d84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	f7fe fef9 	bl	8000b84 <__aeabi_fsub>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7fe fffe 	bl	8000d98 <__aeabi_fmul>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f8d7 12a8 	ldr.w	r1, [r7, #680]	; 0x2a8
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f8ac 	bl	8000f00 <__aeabi_fdiv>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290

				  float pid = p + angle_pid.i + d;
 8001dae:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001db2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fee3 	bl	8000b88 <__addsf3>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 8001dca:	f7fe fedd 	bl	8000b88 <__addsf3>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

				  // delete spikes
				  float delta = pid - output_filter.prev_value;
 8001dd4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001dd8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4619      	mov	r1, r3
 8001de0:	f8d7 028c 	ldr.w	r0, [r7, #652]	; 0x28c
 8001de4:	f7fe fece 	bl	8000b84 <__aeabi_fsub>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001df0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001df4:	601a      	str	r2, [r3, #0]
				  saturation(-4.5, 4.5, &delta);
 8001df6:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001dfa:	e00b      	b.n	8001e14 <main+0x824>
 8001dfc:	358637bd 	.word	0x358637bd
 8001e00:	3fe00000 	.word	0x3fe00000
 8001e04:	3f0ccccd 	.word	0x3f0ccccd
 8001e08:	bf0ccccd 	.word	0xbf0ccccd
 8001e0c:	42700000 	.word	0x42700000
 8001e10:	c2700000 	.word	0xc2700000
 8001e14:	461a      	mov	r2, r3
 8001e16:	4978      	ldr	r1, [pc, #480]	; (8001ff8 <main+0xa08>)
 8001e18:	4878      	ldr	r0, [pc, #480]	; (8001ffc <main+0xa0c>)
 8001e1a:	f7ff fa63 	bl	80012e4 <saturation>

				  pid = filter(&output_filter, output_filter.prev_value + delta);
 8001e1e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001e22:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001e2c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f7fe fea7 	bl	8000b88 <__addsf3>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fb52 	bl	80014ee <filter>
 8001e4a:	f8c7 028c 	str.w	r0, [r7, #652]	; 0x28c
				  // delete peaks




				  stepper_set_speed(&stepper1, pid);
 8001e4e:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8001e52:	486b      	ldr	r0, [pc, #428]	; (8002000 <main+0xa10>)
 8001e54:	f000 fe28 	bl	8002aa8 <stepper_set_speed>
				  stepper_set_speed(&stepper2, pid);
 8001e58:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
 8001e5c:	4869      	ldr	r0, [pc, #420]	; (8002004 <main+0xa14>)
 8001e5e:	f000 fe23 	bl	8002aa8 <stepper_set_speed>
//				  }




				  pid_step(&angle_pid);
 8001e62:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fd56 	bl	8002918 <pid_step>
				  pid_step(&pos_pid);
 8001e6c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fd51 	bl	8002918 <pid_step>


				  execute_received_command(&uart_interface);
 8001e76:	4864      	ldr	r0, [pc, #400]	; (8002008 <main+0xa18>)
 8001e78:	f001 fb1a 	bl	80034b0 <execute_received_command>
				  start_uart_interface(&uart_interface);
 8001e7c:	4862      	ldr	r0, [pc, #392]	; (8002008 <main+0xa18>)
 8001e7e:	f001 fa64 	bl	800334a <start_uart_interface>

				  // send data

				  uint8_t buffer[BUFFER_SIZE_TX];
				  //uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%ld, %ld, %.3f\r\n", stepper1.step_counter, stepper2.step_counter, robot_angle);
				  uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", robot_speed, target_angle, delta, p_pos, pos_pid.i, d_pos, position_error);
 8001e82:	f8d7 02a4 	ldr.w	r0, [r7, #676]	; 0x2a4
 8001e86:	f7fe fad9 	bl	800043c <__aeabi_f2d>
 8001e8a:	4680      	mov	r8, r0
 8001e8c:	4689      	mov	r9, r1
 8001e8e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001e92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe facf 	bl	800043c <__aeabi_f2d>
 8001e9e:	4682      	mov	sl, r0
 8001ea0:	468b      	mov	fp, r1
 8001ea2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ea6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fac5 	bl	800043c <__aeabi_f2d>
 8001eb2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001eb6:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8001eba:	f7fe fabf 	bl	800043c <__aeabi_f2d>
 8001ebe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001ec2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fab5 	bl	800043c <__aeabi_f2d>
 8001ed2:	e9c7 0100 	strd	r0, r1, [r7]
 8001ed6:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8001eda:	f7fe faaf 	bl	800043c <__aeabi_f2d>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	460d      	mov	r5, r1
 8001ee2:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8001ee6:	f7fe faa9 	bl	800043c <__aeabi_f2d>
 8001eea:	f107 031c 	add.w	r3, r7, #28
 8001eee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001ef2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001ef6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001efa:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8001efe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f02:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001f06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f0a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8001f0e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001f12:	e9cd 8900 	strd	r8, r9, [sp]
 8001f16:	4a3d      	ldr	r2, [pc, #244]	; (800200c <main+0xa1c>)
 8001f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f006 fe43 	bl	8008ba8 <sniprintf>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f8a7 328a 	strh.w	r3, [r7, #650]	; 0x28a
				  //uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f\n", robot_speed - desired_speed, pos_pid.error);

				  //uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f\n", mpu.x_angle, target_angle);

				  uart_send(&uart_interface, buffer, size, 0);
 8001f28:	f8b7 228a 	ldrh.w	r2, [r7, #650]	; 0x28a
 8001f2c:	f107 011c 	add.w	r1, r7, #28
 8001f30:	2300      	movs	r3, #0
 8001f32:	4835      	ldr	r0, [pc, #212]	; (8002008 <main+0xa18>)
 8001f34:	f001 fa19 	bl	800336a <uart_send>
		  while(fabsf(mpu.x_angle) < 0.7){
 8001f38:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8001f3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fa7b 	bl	800043c <__aeabi_f2d>
 8001f46:	a32a      	add	r3, pc, #168	; (adr r3, 8001ff0 <main+0xa00>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fd40 	bl	80009d0 <__aeabi_dcmplt>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f47f ac90 	bne.w	8001878 <main+0x288>


			  }
		  }
		  //stop motors
		  stepper_set_speed(&stepper1, 0);
 8001f58:	f04f 0100 	mov.w	r1, #0
 8001f5c:	4828      	ldr	r0, [pc, #160]	; (8002000 <main+0xa10>)
 8001f5e:	f000 fda3 	bl	8002aa8 <stepper_set_speed>
		  stepper_set_speed(&stepper2, 0);
 8001f62:	f04f 0100 	mov.w	r1, #0
 8001f66:	4827      	ldr	r0, [pc, #156]	; (8002004 <main+0xa14>)
 8001f68:	f000 fd9e 	bl	8002aa8 <stepper_set_speed>
		  stepper_enable(&stepper1, 0);
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4824      	ldr	r0, [pc, #144]	; (8002000 <main+0xa10>)
 8001f70:	f000 fd65 	bl	8002a3e <stepper_enable>
		  stepper_enable(&stepper2, 0);
 8001f74:	2100      	movs	r1, #0
 8001f76:	4823      	ldr	r0, [pc, #140]	; (8002004 <main+0xa14>)
 8001f78:	f000 fd61 	bl	8002a3e <stepper_enable>

		  pid_reset(&angle_pid);
 8001f7c:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fcb4 	bl	80028ee <pid_reset>
		  pid_reset(&pos_pid);
 8001f86:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fcaf 	bl	80028ee <pid_reset>


		  reset_filter(&pos_pid_filter);
 8001f90:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fae1 	bl	800155c <reset_filter>
		  reset_filter(&angle_pid_derivative_filter);
 8001f9a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fadc 	bl	800155c <reset_filter>
		  reset_filter(&pos_pid_derivative_filter);
 8001fa4:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fad7 	bl	800155c <reset_filter>
		  reset_filter(&output_filter);
 8001fae:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fad2 	bl	800155c <reset_filter>
		  reset_filter(&gain_factor_filter);
 8001fb8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff facd 	bl	800155c <reset_filter>
		  reset_filter(&robot_speed_filter);
 8001fc2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fac8 	bl	800155c <reset_filter>
		  reset_filter(&target_angle_filter);
 8001fcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fac3 	bl	800155c <reset_filter>
		  reset_filter(&desired_speed_fitler);
 8001fd6:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fabe 	bl	800155c <reset_filter>


	  }


	  HAL_Delay(delay);
 8001fe0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 fdb1 	bl	8003b4c <HAL_Delay>
	  mpu_calc_x_angle(&mpu);
 8001fea:	f7ff bbd7 	b.w	800179c <main+0x1ac>
 8001fee:	bf00      	nop
 8001ff0:	66666666 	.word	0x66666666
 8001ff4:	3fe66666 	.word	0x3fe66666
 8001ff8:	40900000 	.word	0x40900000
 8001ffc:	c0900000 	.word	0xc0900000
 8002000:	20000298 	.word	0x20000298
 8002004:	200002c4 	.word	0x200002c4
 8002008:	200002f4 	.word	0x200002f4
 800200c:	0800b364 	.word	0x0800b364

08002010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b090      	sub	sp, #64	; 0x40
 8002014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002016:	f107 0318 	add.w	r3, r7, #24
 800201a:	2228      	movs	r2, #40	; 0x28
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f006 fece 	bl	8008dc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002036:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800203a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002040:	2301      	movs	r3, #1
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002044:	2302      	movs	r3, #2
 8002046:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002048:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800204e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	4618      	mov	r0, r3
 800205a:	f003 fb4d 	bl	80056f8 <HAL_RCC_OscConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002064:	f000 f81a 	bl	800209c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002068:	230f      	movs	r3, #15
 800206a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800206c:	2302      	movs	r3, #2
 800206e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002070:	2300      	movs	r3, #0
 8002072:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2102      	movs	r1, #2
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fdba 	bl	8005bfc <HAL_RCC_ClockConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800208e:	f000 f805 	bl	800209c <Error_Handler>
  }
}
 8002092:	bf00      	nop
 8002094:	3740      	adds	r7, #64	; 0x40
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  stepper_set_speed(&stepper1, 0);
 80020a0:	f04f 0100 	mov.w	r1, #0
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <Error_Handler+0x30>)
 80020a6:	f000 fcff 	bl	8002aa8 <stepper_set_speed>
  stepper_set_speed(&stepper2, 0);
 80020aa:	f04f 0100 	mov.w	r1, #0
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <Error_Handler+0x34>)
 80020b0:	f000 fcfa 	bl	8002aa8 <stepper_set_speed>
  stepper_enable(&stepper1, 0);
 80020b4:	2100      	movs	r1, #0
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <Error_Handler+0x30>)
 80020b8:	f000 fcc1 	bl	8002a3e <stepper_enable>
  stepper_enable(&stepper2, 0);
 80020bc:	2100      	movs	r1, #0
 80020be:	4804      	ldr	r0, [pc, #16]	; (80020d0 <Error_Handler+0x34>)
 80020c0:	f000 fcbd 	bl	8002a3e <stepper_enable>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop

  __disable_irq();
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <Error_Handler+0x2c>
 80020ca:	bf00      	nop
 80020cc:	20000298 	.word	0x20000298
 80020d0:	200002c4 	.word	0x200002c4

080020d4 <mpu_write_reg>:




static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af04      	add	r7, sp, #16
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
 80020e0:	4613      	mov	r3, r2
 80020e2:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	791b      	ldrb	r3, [r3, #4]
 80020ec:	b299      	uxth	r1, r3
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
 80020f6:	9302      	str	r3, [sp, #8]
 80020f8:	2301      	movs	r3, #1
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	1cbb      	adds	r3, r7, #2
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	2301      	movs	r3, #1
 8002102:	f002 fbd7 	bl	80048b4 <HAL_I2C_Mem_Write>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b088      	sub	sp, #32
 8002112:	af04      	add	r7, sp, #16
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	460b      	mov	r3, r1
 8002118:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	791b      	ldrb	r3, [r3, #4]
 8002122:	b299      	uxth	r1, r3
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	b29a      	uxth	r2, r3
 8002128:	f04f 33ff 	mov.w	r3, #4294967295
 800212c:	9302      	str	r3, [sp, #8]
 800212e:	2301      	movs	r3, #1
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	f107 030f 	add.w	r3, r7, #15
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2301      	movs	r3, #1
 800213a:	f002 fcb5 	bl	8004aa8 <HAL_I2C_Mem_Read>
	return tmp;
 800213e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8002154:	216b      	movs	r1, #107	; 0x6b
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff ffd9 	bl	800210e <mpu_read_reg>
 800215c:	4603      	mov	r3, r0
 800215e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002166:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8002168:	78fb      	ldrb	r3, [r7, #3]
 800216a:	01db      	lsls	r3, r3, #7
 800216c:	b25a      	sxtb	r2, r3
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4313      	orrs	r3, r2
 8002174:	b25b      	sxtb	r3, r3
 8002176:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	461a      	mov	r2, r3
 800217c:	216b      	movs	r1, #107	; 0x6b
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffa8 	bl	80020d4 <mpu_write_reg>
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8002198:	216b      	movs	r1, #107	; 0x6b
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffb7 	bl	800210e <mpu_read_reg>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021aa:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	019b      	lsls	r3, r3, #6
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b6:	b25a      	sxtb	r2, r3
 80021b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021bc:	4313      	orrs	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	461a      	mov	r2, r3
 80021c6:	216b      	movs	r1, #107	; 0x6b
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff83 	bl	80020d4 <mpu_write_reg>
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 80021e4:	211b      	movs	r1, #27
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ff91 	bl	800210e <mpu_read_reg>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	f023 0318 	bic.w	r3, r3, #24
 80021f6:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	f003 0318 	and.w	r3, r3, #24
 8002202:	b25a      	sxtb	r2, r3
 8002204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002208:	4313      	orrs	r3, r2
 800220a:	b25b      	sxtb	r3, r3
 800220c:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	461a      	mov	r2, r3
 8002212:	211b      	movs	r1, #27
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff5d 	bl	80020d4 <mpu_write_reg>

	switch (range){
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d81b      	bhi.n	8002258 <set_gyro_scale+0x80>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <set_gyro_scale+0x50>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002239 	.word	0x08002239
 800222c:	08002241 	.word	0x08002241
 8002230:	08002249 	.word	0x08002249
 8002234:	08002251 	.word	0x08002251
	case range_250:
		mpu->gyro_scale = 0.007633;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0a      	ldr	r2, [pc, #40]	; (8002264 <set_gyro_scale+0x8c>)
 800223c:	609a      	str	r2, [r3, #8]
		break;
 800223e:	e00c      	b.n	800225a <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a09      	ldr	r2, [pc, #36]	; (8002268 <set_gyro_scale+0x90>)
 8002244:	609a      	str	r2, [r3, #8]
		break;
 8002246:	e008      	b.n	800225a <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a08      	ldr	r2, [pc, #32]	; (800226c <set_gyro_scale+0x94>)
 800224c:	609a      	str	r2, [r3, #8]
		break;
 800224e:	e004      	b.n	800225a <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a07      	ldr	r2, [pc, #28]	; (8002270 <set_gyro_scale+0x98>)
 8002254:	609a      	str	r2, [r3, #8]
		break;
 8002256:	e000      	b.n	800225a <set_gyro_scale+0x82>
	default:
		break;
 8002258:	bf00      	nop
	}
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	3bfa1e3f 	.word	0x3bfa1e3f
 8002268:	3c7a2270 	.word	0x3c7a2270
 800226c:	3cf9bfdf 	.word	0x3cf9bfdf
 8002270:	3d79c0ec 	.word	0x3d79c0ec

08002274 <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8002280:	211c      	movs	r1, #28
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff43 	bl	800210e <mpu_read_reg>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	f023 0318 	bic.w	r3, r3, #24
 8002292:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	b25b      	sxtb	r3, r3
 800229a:	f003 0318 	and.w	r3, r3, #24
 800229e:	b25a      	sxtb	r2, r3
 80022a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	461a      	mov	r2, r3
 80022ae:	211c      	movs	r1, #28
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff0f 	bl	80020d4 <mpu_write_reg>

	switch (range)
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d81b      	bhi.n	80022f4 <set_accelerometer_scale+0x80>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <set_accelerometer_scale+0x50>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022dd 	.word	0x080022dd
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022ed 	.word	0x080022ed
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <set_accelerometer_scale+0x8c>)
 80022d8:	60da      	str	r2, [r3, #12]
		break;
 80022da:	e00c      	b.n	80022f6 <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <set_accelerometer_scale+0x90>)
 80022e0:	60da      	str	r2, [r3, #12]
		break;
 80022e2:	e008      	b.n	80022f6 <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a08      	ldr	r2, [pc, #32]	; (8002308 <set_accelerometer_scale+0x94>)
 80022e8:	60da      	str	r2, [r3, #12]
		break;
 80022ea:	e004      	b.n	80022f6 <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a07      	ldr	r2, [pc, #28]	; (800230c <set_accelerometer_scale+0x98>)
 80022f0:	60da      	str	r2, [r3, #12]
		break;
 80022f2:	e000      	b.n	80022f6 <set_accelerometer_scale+0x82>
	default:
		break;
 80022f4:	bf00      	nop
	}
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	387fda40 	.word	0x387fda40
 8002304:	38ffda40 	.word	0x38ffda40
 8002308:	397fda40 	.word	0x397fda40
 800230c:	39fff518 	.word	0x39fff518

08002310 <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 800231c:	211a      	movs	r1, #26
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff fef5 	bl	800210e <mpu_read_reg>
 8002324:	4603      	mov	r3, r0
 8002326:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f023 0307 	bic.w	r3, r3, #7
 800232e:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 8002330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	b25a      	sxtb	r2, r3
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4313      	orrs	r3, r2
 8002340:	b25b      	sxtb	r3, r3
 8002342:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	461a      	mov	r2, r3
 8002348:	211a      	movs	r1, #26
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fec2 	bl	80020d4 <mpu_write_reg>
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8002360:	2175      	movs	r1, #117	; 0x75
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fed3 	bl	800210e <mpu_read_reg>
 8002368:	4603      	mov	r3, r0
 800236a:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 800236c:	7bfb      	ldrb	r3, [r7, #15]
 800236e:	2b68      	cmp	r3, #104	; 0x68
 8002370:	d101      	bne.n	8002376 <mpu_who_am_i+0x1e>
		return HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
	}
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b096      	sub	sp, #88	; 0x58
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	71fb      	strb	r3, [r7, #7]
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	617b      	str	r3, [r7, #20]
	mpu.i2c_address = i2c_address;
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	763b      	strb	r3, [r7, #24]


	mpu_reset(&mpu, 1);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fed3 	bl	8002148 <mpu_reset>

	HAL_Delay(1000);
 80023a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a6:	f001 fbd1 	bl	8003b4c <HAL_Delay>

	mpu_sleep_mode(&mpu, 0);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff feeb 	bl	800218c <mpu_sleep_mode>

	set_gyro_scale(&mpu, range_250);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff0b 	bl	80021d8 <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 80023c2:	f107 0314 	add.w	r3, r7, #20
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff53 	bl	8002274 <set_accelerometer_scale>

	mpu.gx_bias = 0;
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
	mpu.gy_bias = 0;
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
	mpu.gz_bias = 0;
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
	mpu.lst_time_x_angle = HAL_GetTick();
 80023e0:	f001 fbaa 	bl	8003b38 <HAL_GetTick>
 80023e4:	4603      	mov	r3, r0
 80023e6:	653b      	str	r3, [r7, #80]	; 0x50
	mpu.lst_time_y_angle = HAL_GetTick();
 80023e8:	f001 fba6 	bl	8003b38 <HAL_GetTick>
 80023ec:	4603      	mov	r3, r0
 80023ee:	657b      	str	r3, [r7, #84]	; 0x54


	return mpu;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2244      	movs	r2, #68	; 0x44
 80023fa:	4619      	mov	r1, r3
 80023fc:	f006 fd6c 	bl	8008ed8 <memcpy>
}
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	3758      	adds	r7, #88	; 0x58
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <mpu_get_data>:



void mpu_get_data(mpu6050_typedef *mpu)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	; 0x28
 800240c:	af04      	add	r7, sp, #16
 800240e:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	791b      	ldrb	r3, [r3, #4]
 8002418:	b299      	uxth	r1, r3
 800241a:	f04f 33ff 	mov.w	r3, #4294967295
 800241e:	9302      	str	r3, [sp, #8]
 8002420:	230e      	movs	r3, #14
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	f107 0308 	add.w	r3, r7, #8
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2301      	movs	r3, #1
 800242c:	223b      	movs	r2, #59	; 0x3b
 800242e:	f002 fb3b 	bl	8004aa8 <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 8002432:	7a3b      	ldrb	r3, [r7, #8]
 8002434:	021b      	lsls	r3, r3, #8
 8002436:	b21a      	sxth	r2, r3
 8002438:	7a7b      	ldrb	r3, [r7, #9]
 800243a:	b21b      	sxth	r3, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	b21b      	sxth	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fc55 	bl	8000cf0 <__aeabi_i2f>
 8002446:	4602      	mov	r2, r0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f7fe fca2 	bl	8000d98 <__aeabi_fmul>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 800245c:	7abb      	ldrb	r3, [r7, #10]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	b21a      	sxth	r2, r3
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	b21b      	sxth	r3, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	b21b      	sxth	r3, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fc40 	bl	8000cf0 <__aeabi_i2f>
 8002470:	4602      	mov	r2, r0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f7fe fc8d 	bl	8000d98 <__aeabi_fmul>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 8002486:	7b3b      	ldrb	r3, [r7, #12]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b21a      	sxth	r2, r3
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	b21b      	sxth	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	b21b      	sxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fc2b 	bl	8000cf0 <__aeabi_i2f>
 800249a:	4602      	mov	r2, r0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4619      	mov	r1, r3
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7fe fc78 	bl	8000d98 <__aeabi_fmul>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 80024b0:	7c3b      	ldrb	r3, [r7, #16]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	b21a      	sxth	r2, r3
 80024b6:	7c7b      	ldrb	r3, [r7, #17]
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b21b      	sxth	r3, r3
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fc16 	bl	8000cf0 <__aeabi_i2f>
 80024c4:	4602      	mov	r2, r0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f7fe fc63 	bl	8000d98 <__aeabi_fmul>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f7fe fb51 	bl	8000b84 <__aeabi_fsub>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 80024ea:	7cbb      	ldrb	r3, [r7, #18]
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	b21a      	sxth	r2, r3
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	b21b      	sxth	r3, r3
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fbf9 	bl	8000cf0 <__aeabi_i2f>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4619      	mov	r1, r3
 8002506:	4610      	mov	r0, r2
 8002508:	f7fe fc46 	bl	8000d98 <__aeabi_fmul>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f7fe fb34 	bl	8000b84 <__aeabi_fsub>
 800251c:	4603      	mov	r3, r0
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 8002524:	7d3b      	ldrb	r3, [r7, #20]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	b21a      	sxth	r2, r3
 800252a:	7d7b      	ldrb	r3, [r7, #21]
 800252c:	b21b      	sxth	r3, r3
 800252e:	4313      	orrs	r3, r2
 8002530:	b21b      	sxth	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fbdc 	bl	8000cf0 <__aeabi_i2f>
 8002538:	4602      	mov	r2, r0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f7fe fc29 	bl	8000d98 <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f7fe fb17 	bl	8000b84 <__aeabi_fsub>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <mpu_gyro_calibration>:


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002576:	485e      	ldr	r0, [pc, #376]	; (80026f0 <mpu_gyro_calibration+0x188>)
 8002578:	f002 f840 	bl	80045fc <HAL_GPIO_WritePin>
	uint8_t counter = 100;
 800257c:	2364      	movs	r3, #100	; 0x64
 800257e:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 8002592:	2300      	movs	r3, #0
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e060      	b.n	800265a <mpu_gyro_calibration+0xf2>
	{
		mpu_get_data(mpu);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff35 	bl	8002408 <mpu_get_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025a6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fdb0 	bl	8001110 <__aeabi_fcmpgt>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d117      	bne.n	80025e6 <mpu_gyro_calibration+0x7e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025be:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fda4 	bl	8001110 <__aeabi_fcmpgt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10b      	bne.n	80025e6 <mpu_gyro_calibration+0x7e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe fd98 	bl	8001110 <__aeabi_fcmpgt>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01b      	beq.n	800261e <mpu_gyro_calibration+0xb6>
			i = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
			gx_sum = 0;
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	61fb      	str	r3, [r7, #28]
			gy_sum = 0;
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
			gz_sum = 0;
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80025fc:	2201      	movs	r2, #1
 80025fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002602:	483b      	ldr	r0, [pc, #236]	; (80026f0 <mpu_gyro_calibration+0x188>)
 8002604:	f001 fffa 	bl	80045fc <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8002608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260c:	f001 fa9e 	bl	8003b4c <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002610:	2200      	movs	r2, #0
 8002612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002616:	4836      	ldr	r0, [pc, #216]	; (80026f0 <mpu_gyro_calibration+0x188>)
 8002618:	f001 fff0 	bl	80045fc <HAL_GPIO_WritePin>
			continue;
 800261c:	e01a      	b.n	8002654 <mpu_gyro_calibration+0xec>
		}

		gx_sum += mpu->gx;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002622:	4619      	mov	r1, r3
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f7fe faaf 	bl	8000b88 <__addsf3>
 800262a:	4603      	mov	r3, r0
 800262c:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	4619      	mov	r1, r3
 8002634:	69b8      	ldr	r0, [r7, #24]
 8002636:	f7fe faa7 	bl	8000b88 <__addsf3>
 800263a:	4603      	mov	r3, r0
 800263c:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	4619      	mov	r1, r3
 8002644:	6978      	ldr	r0, [r7, #20]
 8002646:	f7fe fa9f 	bl	8000b88 <__addsf3>
 800264a:	4603      	mov	r3, r0
 800264c:	617b      	str	r3, [r7, #20]

		HAL_Delay(4);
 800264e:	2004      	movs	r0, #4
 8002650:	f001 fa7c 	bl	8003b4c <HAL_Delay>
	for(int i = 0; i < counter; i++)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	3301      	adds	r3, #1
 8002658:	613b      	str	r3, [r7, #16]
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	429a      	cmp	r2, r3
 8002660:	db9a      	blt.n	8002598 <mpu_gyro_calibration+0x30>
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691c      	ldr	r4, [r3, #16]
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fb41 	bl	8000cf0 <__aeabi_i2f>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	69f8      	ldr	r0, [r7, #28]
 8002674:	f7fe fc44 	bl	8000f00 <__aeabi_fdiv>
 8002678:	4603      	mov	r3, r0
 800267a:	4619      	mov	r1, r3
 800267c:	4620      	mov	r0, r4
 800267e:	f7fe fa83 	bl	8000b88 <__addsf3>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695c      	ldr	r4, [r3, #20]
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fe fb2d 	bl	8000cf0 <__aeabi_i2f>
 8002696:	4603      	mov	r3, r0
 8002698:	4619      	mov	r1, r3
 800269a:	69b8      	ldr	r0, [r7, #24]
 800269c:	f7fe fc30 	bl	8000f00 <__aeabi_fdiv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4619      	mov	r1, r3
 80026a4:	4620      	mov	r0, r4
 80026a6:	f7fe fa6f 	bl	8000b88 <__addsf3>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699c      	ldr	r4, [r3, #24]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fe fb19 	bl	8000cf0 <__aeabi_i2f>
 80026be:	4603      	mov	r3, r0
 80026c0:	4619      	mov	r1, r3
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7fe fc1c 	bl	8000f00 <__aeabi_fdiv>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7fe fa5b 	bl	8000b88 <__addsf3>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80026da:	2201      	movs	r2, #1
 80026dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <mpu_gyro_calibration+0x188>)
 80026e2:	f001 ff8b 	bl	80045fc <HAL_GPIO_WritePin>
}
 80026e6:	bf00      	nop
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40011000 	.word	0x40011000
 80026f4:	00000000 	.word	0x00000000

080026f8 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 80026f8:	b5b0      	push	{r4, r5, r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ax, mpu->az) + M_PI/2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd fe99 	bl	800043c <__aeabi_f2d>
 800270a:	4604      	mov	r4, r0
 800270c:	460d      	mov	r5, r1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd fe92 	bl	800043c <__aeabi_f2d>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4620      	mov	r0, r4
 800271e:	4629      	mov	r1, r5
 8002720:	f008 fba0 	bl	800ae64 <atan2>
 8002724:	a308      	add	r3, pc, #32	; (adr r3, 8002748 <mpu_get_acc_x_angle+0x50>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f7fd fd29 	bl	8000180 <__adddf3>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe f9d1 	bl	8000adc <__aeabi_d2f>
 800273a:	4603      	mov	r3, r0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bdb0      	pop	{r4, r5, r7, pc}
 8002744:	f3af 8000 	nop.w
 8002748:	54442d18 	.word	0x54442d18
 800274c:	3ff921fb 	.word	0x3ff921fb

08002750 <mpu_calc_x_angle>:

}


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8002750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
	mpu_get_data(mpu);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fe54 	bl	8002408 <mpu_get_data>
	float delta = (HAL_GetTick() - mpu->lst_time_x_angle) / 1000.0;
 8002760:	f001 f9ea 	bl	8003b38 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fe43 	bl	80003f8 <__aeabi_ui2d>
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b46      	ldr	r3, [pc, #280]	; (8002890 <mpu_calc_x_angle+0x140>)
 8002778:	f7fd ffe2 	bl	8000740 <__aeabi_ddiv>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe f9aa 	bl	8000adc <__aeabi_d2f>
 8002788:	4603      	mov	r3, r0
 800278a:	617b      	str	r3, [r7, #20]
	mpu->lst_time_x_angle = HAL_GetTick();
 800278c:	f001 f9d4 	bl	8003b38 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	63da      	str	r2, [r3, #60]	; 0x3c
	if(delta > 0.01)
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7fd fe50 	bl	800043c <__aeabi_f2d>
 800279c:	a338      	add	r3, pc, #224	; (adr r3, 8002880 <mpu_calc_x_angle+0x130>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fe f933 	bl	8000a0c <__aeabi_dcmpgt>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <mpu_calc_x_angle+0x74>
	{
		mpu->x_angle = mpu_get_acc_x_angle(mpu);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff ffa3 	bl	80026f8 <mpu_get_acc_x_angle>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34
		mpu->lst_time_x_angle = HAL_GetTick();
 80027b8:	f001 f9be 	bl	8003b38 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		//complementary filter
		float alpha = 0.001;
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
	}
}
 80027c2:	e055      	b.n	8002870 <mpu_calc_x_angle+0x120>
		float alpha = 0.001;
 80027c4:	4b33      	ldr	r3, [pc, #204]	; (8002894 <mpu_calc_x_angle+0x144>)
 80027c6:	613b      	str	r3, [r7, #16]
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f7ff ff95 	bl	80026f8 <mpu_get_acc_x_angle>
 80027ce:	4603      	mov	r3, r0
 80027d0:	6939      	ldr	r1, [r7, #16]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fae0 	bl	8000d98 <__aeabi_fmul>
 80027d8:	4603      	mov	r3, r0
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fe2e 	bl	800043c <__aeabi_f2d>
 80027e0:	4604      	mov	r4, r0
 80027e2:	460d      	mov	r5, r1
 80027e4:	6939      	ldr	r1, [r7, #16]
 80027e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80027ea:	f7fe f9cb 	bl	8000b84 <__aeabi_fsub>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe23 	bl	800043c <__aeabi_f2d>
 80027f6:	4680      	mov	r8, r0
 80027f8:	4689      	mov	r9, r1
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fd fe1c 	bl	800043c <__aeabi_f2d>
 8002804:	4682      	mov	sl, r0
 8002806:	468b      	mov	fp, r1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe13 	bl	800043c <__aeabi_f2d>
 8002816:	a31c      	add	r3, pc, #112	; (adr r3, 8002888 <mpu_calc_x_angle+0x138>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fe66 	bl	80004ec <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	e9c7 2300 	strd	r2, r3, [r7]
 8002828:	6978      	ldr	r0, [r7, #20]
 800282a:	f7fd fe07 	bl	800043c <__aeabi_f2d>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002836:	f7fd fe59 	bl	80004ec <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4650      	mov	r0, sl
 8002840:	4659      	mov	r1, fp
 8002842:	f7fd fc9d 	bl	8000180 <__adddf3>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4640      	mov	r0, r8
 800284c:	4649      	mov	r1, r9
 800284e:	f7fd fe4d 	bl	80004ec <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fd fc91 	bl	8000180 <__adddf3>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f939 	bl	8000adc <__aeabi_d2f>
 800286a:	4602      	mov	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002870:	bf00      	nop
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800287a:	bf00      	nop
 800287c:	f3af 8000 	nop.w
 8002880:	47ae147b 	.word	0x47ae147b
 8002884:	3f847ae1 	.word	0x3f847ae1
 8002888:	22d4405f 	.word	0x22d4405f
 800288c:	3f91df47 	.word	0x3f91df47
 8002890:	408f4000 	.word	0x408f4000
 8002894:	3a83126f 	.word	0x3a83126f

08002898 <pid_init>:
#include "pid_lib.h"




pid_typedef pid_init(float kp, float ki, float kd){
 8002898:	b4b0      	push	{r4, r5, r7}
 800289a:	b08d      	sub	sp, #52	; 0x34
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
	pid_typedef pid = {kp, ki, kd, 0, 0, 0, 0, 1};
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	return pid;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	461d      	mov	r5, r3
 80028d4:	f107 0410 	add.w	r4, r7, #16
 80028d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80028e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	3734      	adds	r7, #52	; 0x34
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bcb0      	pop	{r4, r5, r7}
 80028ec:	4770      	bx	lr

080028ee <pid_reset>:


void pid_reset(pid_typedef* pid){
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
	pid->i = 0;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
	pid->prev_measurement = 0;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <pid_step>:


void pid_step(pid_typedef* pid){
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	pid->prev_error = pid->error;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	615a      	str	r2, [r3, #20]
	pid->prev_measurement = pid->measurement;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699a      	ldr	r2, [r3, #24]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	61da      	str	r2, [r3, #28]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <set_dir>:


extern volatile uint8_t spin_duration_ms;


static void set_dir(stepper_typedef *stepper, int8_t dir){
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	70fb      	strb	r3, [r7, #3]
	if(stepper->dir_polarity * dir == 1){
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800294c:	b25b      	sxtb	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002954:	fb02 f303 	mul.w	r3, r2, r3
 8002958:	2b01      	cmp	r3, #1
 800295a:	d110      	bne.n	800297e <set_dir+0x44>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6918      	ldr	r0, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8a9b      	ldrh	r3, [r3, #20]
 8002964:	b29b      	uxth	r3, r3
 8002966:	2201      	movs	r2, #1
 8002968:	4619      	mov	r1, r3
 800296a:	f001 fe47 	bl	80045fc <HAL_GPIO_WritePin>
		stepper->dir = stepper->dir_polarity;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002974:	b25a      	sxtb	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -stepper->dir_polarity;
	}
}
 800297c:	e013      	b.n	80029a6 <set_dir+0x6c>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6918      	ldr	r0, [r3, #16]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	8a9b      	ldrh	r3, [r3, #20]
 8002986:	b29b      	uxth	r3, r3
 8002988:	2200      	movs	r2, #0
 800298a:	4619      	mov	r1, r3
 800298c:	f001 fe36 	bl	80045fc <HAL_GPIO_WritePin>
		stepper->dir = -stepper->dir_polarity;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002996:	b25b      	sxtb	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	425b      	negs	r3, r3
 800299c:	b2db      	uxtb	r3, r3
 800299e:	b25a      	sxtb	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <stepper_init>:


//dir pin polarity : 1 or -1
void stepper_init(stepper_typedef *stepper, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *EN_Port, uint16_t EN_Pin,
		GPIO_TypeDef *DIR_Port, uint16_t DIR_Pin, unsigned int max_speed, int8_t dir_polarity)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
	stepper->htim = htim;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	601a      	str	r2, [r3, #0]
	stepper->Channel = Channel;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]

	stepper->EN_Port = EN_Port;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	609a      	str	r2, [r3, #8]
	stepper->EN_Pin = EN_Pin;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8b3a      	ldrh	r2, [r7, #24]
 80029d2:	819a      	strh	r2, [r3, #12]
	stepper->DIR_Port = DIR_Port;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	611a      	str	r2, [r3, #16]
	stepper->DIR_Pin = DIR_Pin;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8c3a      	ldrh	r2, [r7, #32]
 80029de:	829a      	strh	r2, [r3, #20]

	stepper->step_counter = 0;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	619a      	str	r2, [r3, #24]
	stepper->on_off = 0;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	771a      	strb	r2, [r3, #28]
	stepper-> new_counter = 65000;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80029f2:	621a      	str	r2, [r3, #32]

	stepper->dir_polarity = dir_polarity;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80029fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	stepper->max_speed = max_speed;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	82da      	strh	r2, [r3, #22]

	set_dir(stepper, 1);
 8002a06:	2101      	movs	r1, #1
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff ff96 	bl	800293a <set_dir>
	stepper_enable(stepper, 0);
 8002a0e:	2100      	movs	r1, #0
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f814 	bl	8002a3e <stepper_enable>
	stepper_set_speed(stepper, 0);
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f844 	bl	8002aa8 <stepper_set_speed>
	stepper->speed = 0;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24


	// start timer
	HAL_TIM_Base_Start_IT(htim);
 8002a28:	68b8      	ldr	r0, [r7, #8]
 8002a2a:	f003 fac5 	bl	8005fb8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	68b8      	ldr	r0, [r7, #8]
 8002a32:	f003 fb6b 	bl	800610c <HAL_TIM_PWM_Start>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <stepper_enable>:



void stepper_enable(stepper_typedef *stepper, bool en)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	70fb      	strb	r3, [r7, #3]
	if(en){
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <stepper_enable+0x2e>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6898      	ldr	r0, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	899b      	ldrh	r3, [r3, #12]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f001 fdcd 	bl	80045fc <HAL_GPIO_WritePin>
		stepper->enable = 1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		stepper_set_speed(stepper, 0);
		stepper->enable = 0;
		stepper->on_off = 0;
		stepper->speed = 0;
	}
}
 8002a6a:	e018      	b.n	8002a9e <stepper_enable+0x60>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6898      	ldr	r0, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	899b      	ldrh	r3, [r3, #12]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2201      	movs	r2, #1
 8002a78:	4619      	mov	r1, r3
 8002a7a:	f001 fdbf 	bl	80045fc <HAL_GPIO_WritePin>
		stepper_set_speed(stepper, 0);
 8002a7e:	f04f 0100 	mov.w	r1, #0
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f810 	bl	8002aa8 <stepper_set_speed>
		stepper->enable = 0;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		stepper->on_off = 0;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	771a      	strb	r2, [r3, #28]
		stepper->speed = 0;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <stepper_set_speed>:



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
	saturation(-100, 100, &speed);
 8002ab2:	463b      	mov	r3, r7
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	497e      	ldr	r1, [pc, #504]	; (8002cb0 <stepper_set_speed+0x208>)
 8002ab8:	487e      	ldr	r0, [pc, #504]	; (8002cb4 <stepper_set_speed+0x20c>)
 8002aba:	f7fe fc13 	bl	80012e4 <saturation>

	stepper->speed = speed;
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	625a      	str	r2, [r3, #36]	; 0x24

	if(speed == 0){
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe faf8 	bl	80010c0 <__aeabi_fcmpeq>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d031      	beq.n	8002b3a <stepper_set_speed+0x92>
		stepper->on_off = 0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <stepper_set_speed+0x48>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2200      	movs	r2, #0
 8002aec:	635a      	str	r2, [r3, #52]	; 0x34
 8002aee:	e018      	b.n	8002b22 <stepper_set_speed+0x7a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d105      	bne.n	8002b04 <stepper_set_speed+0x5c>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	6393      	str	r3, [r2, #56]	; 0x38
 8002b02:	e00e      	b.n	8002b22 <stepper_set_speed+0x7a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d105      	bne.n	8002b18 <stepper_set_speed+0x70>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002b16:	e004      	b.n	8002b22 <stepper_set_speed+0x7a>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b36:	60da      	str	r2, [r3, #12]
		if(speed > 0) set_dir(stepper, 1);
		else set_dir(stepper, -1);

	}

}
 8002b38:	e0b2      	b.n	8002ca0 <stepper_set_speed+0x1f8>
		stepper->on_off = 1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	771a      	strb	r2, [r3, #28]
		speed = stepper->max_speed * (speed / 100.0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8adb      	ldrh	r3, [r3, #22]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fc66 	bl	8000418 <__aeabi_i2d>
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	460d      	mov	r5, r1
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fc72 	bl	800043c <__aeabi_f2d>
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <stepper_set_speed+0x210>)
 8002b5e:	f7fd fdef 	bl	8000740 <__aeabi_ddiv>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4620      	mov	r0, r4
 8002b68:	4629      	mov	r1, r5
 8002b6a:	f7fd fcbf 	bl	80004ec <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	f7fd ffb1 	bl	8000adc <__aeabi_d2f>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	603b      	str	r3, [r7, #0]
		if(speed > stepper->max_speed) speed = stepper->max_speed;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8adb      	ldrh	r3, [r3, #22]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fe f8b3 	bl	8000cf0 <__aeabi_i2f>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f7fe fa9f 	bl	80010d4 <__aeabi_fcmplt>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d007      	beq.n	8002bac <stepper_set_speed+0x104>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8adb      	ldrh	r3, [r3, #22]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe f8a0 	bl	8000ce8 <__aeabi_ui2f>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	603b      	str	r3, [r7, #0]
		if(speed < -stepper->max_speed) speed = -stepper->max_speed;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8adb      	ldrh	r3, [r3, #22]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	425b      	negs	r3, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fe f89b 	bl	8000cf0 <__aeabi_i2f>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f7fe faa5 	bl	8001110 <__aeabi_fcmpgt>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <stepper_set_speed+0x136>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	8adb      	ldrh	r3, [r3, #22]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	425b      	negs	r3, r3
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe f88b 	bl	8000cf0 <__aeabi_i2f>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	603b      	str	r3, [r7, #0]
		if(speed > 0 && speed < 16) speed = 16;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe fa93 	bl	8001110 <__aeabi_fcmpgt>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00b      	beq.n	8002c08 <stepper_set_speed+0x160>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fa6c 	bl	80010d4 <__aeabi_fcmplt>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <stepper_set_speed+0x160>
 8002c02:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002c06:	603b      	str	r3, [r7, #0]
		if(speed < 0 && speed >-16) speed = -16;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fa60 	bl	80010d4 <__aeabi_fcmplt>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <stepper_set_speed+0x186>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	4927      	ldr	r1, [pc, #156]	; (8002cbc <stepper_set_speed+0x214>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fa76 	bl	8001110 <__aeabi_fcmpgt>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <stepper_set_speed+0x186>
 8002c2a:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <stepper_set_speed+0x214>)
 8002c2c:	603b      	str	r3, [r7, #0]
		uint16_t counter = (1.0/abs(speed)) * SEC2uSEC;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fa77 	bl	8001124 <__aeabi_f2iz>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bfb8      	it	lt
 8002c3c:	425b      	neglt	r3, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fbea 	bl	8000418 <__aeabi_i2d>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	491c      	ldr	r1, [pc, #112]	; (8002cc0 <stepper_set_speed+0x218>)
 8002c4e:	f7fd fd77 	bl	8000740 <__aeabi_ddiv>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	a313      	add	r3, pc, #76	; (adr r3, 8002ca8 <stepper_set_speed+0x200>)
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f7fd fc44 	bl	80004ec <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f7fd ff16 	bl	8000a9c <__aeabi_d2uiz>
 8002c70:	4603      	mov	r3, r0
 8002c72:	81fb      	strh	r3, [r7, #14]
		stepper->new_counter = counter;
 8002c74:	89fa      	ldrh	r2, [r7, #14]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]
		if(speed > 0) set_dir(stepper, 1);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7fe fa45 	bl	8001110 <__aeabi_fcmpgt>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <stepper_set_speed+0x1ee>
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fe53 	bl	800293a <set_dir>
}
 8002c94:	e004      	b.n	8002ca0 <stepper_set_speed+0x1f8>
		else set_dir(stepper, -1);
 8002c96:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fe4d 	bl	800293a <set_dir>
}
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca8:	00000000 	.word	0x00000000
 8002cac:	412e8480 	.word	0x412e8480
 8002cb0:	42c80000 	.word	0x42c80000
 8002cb4:	c2c80000 	.word	0xc2c80000
 8002cb8:	40590000 	.word	0x40590000
 8002cbc:	c1800000 	.word	0xc1800000
 8002cc0:	3ff00000 	.word	0x3ff00000

08002cc4 <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	if(stepper->on_off){
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7f1b      	ldrb	r3, [r3, #28]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d036      	beq.n	8002d44 <stepper_update+0x80>
		stepper->step_counter += stepper->dir;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002cdc:	b25a      	sxtb	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]

		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a1a      	ldr	r2, [r3, #32]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <stepper_update+0x4e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2264      	movs	r2, #100	; 0x64
 8002d0e:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002d10:	e018      	b.n	8002d44 <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d105      	bne.n	8002d26 <stepper_update+0x62>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2364      	movs	r3, #100	; 0x64
 8002d22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d24:	e00e      	b.n	8002d44 <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d105      	bne.n	8002d3a <stepper_update+0x76>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2364      	movs	r3, #100	; 0x64
 8002d36:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002d38:	e004      	b.n	8002d44 <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2364      	movs	r3, #100	; 0x64
 8002d42:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <HAL_MspInit+0x5c>)
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	4a14      	ldr	r2, [pc, #80]	; (8002dac <HAL_MspInit+0x5c>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6193      	str	r3, [r2, #24]
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_MspInit+0x5c>)
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_MspInit+0x5c>)
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_MspInit+0x5c>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	61d3      	str	r3, [r2, #28]
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_MspInit+0x5c>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_MspInit+0x60>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	4a04      	ldr	r2, [pc, #16]	; (8002db0 <HAL_MspInit+0x60>)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000

08002db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db8:	e7fe      	b.n	8002db8 <NMI_Handler+0x4>

08002dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <HardFault_Handler+0x4>

08002dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <MemManage_Handler+0x4>

08002dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <BusFault_Handler+0x4>

08002dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <UsageFault_Handler+0x4>

08002dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr

08002dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr

08002df6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dfa:	f000 fe8b 	bl	8003b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <DMA1_Channel4_IRQHandler+0x10>)
 8002e0a:	f001 f93f 	bl	800408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200006ac 	.word	0x200006ac

08002e18 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <DMA1_Channel5_IRQHandler+0x10>)
 8002e1e:	f001 f935 	bl	800408c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000668 	.word	0x20000668

08002e2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e30:	4802      	ldr	r0, [pc, #8]	; (8002e3c <TIM2_IRQHandler+0x10>)
 8002e32:	f003 fa0d 	bl	8006250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000590 	.word	0x20000590

08002e40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM3_IRQHandler+0x10>)
 8002e46:	f003 fa03 	bl	8006250 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200005d8 	.word	0x200005d8

08002e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e58:	4802      	ldr	r0, [pc, #8]	; (8002e64 <USART1_IRQHandler+0x10>)
 8002e5a:	f004 f95d 	bl	8007118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000620 	.word	0x20000620

08002e68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return 1;
 8002e6c:	2301      	movs	r3, #1
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr

08002e76 <_kill>:

int _kill(int pid, int sig)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e80:	f005 fff0 	bl	8008e64 <__errno>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2216      	movs	r2, #22
 8002e88:	601a      	str	r2, [r3, #0]
  return -1;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <_exit>:

void _exit (int status)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7ff ffe7 	bl	8002e76 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ea8:	e7fe      	b.n	8002ea8 <_exit+0x12>

08002eaa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e00a      	b.n	8002ed2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	4601      	mov	r1, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	60ba      	str	r2, [r7, #8]
 8002ec8:	b2ca      	uxtb	r2, r1
 8002eca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	dbf0      	blt.n	8002ebc <_read+0x12>
  }

  return len;
 8002eda:	687b      	ldr	r3, [r7, #4]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	e009      	b.n	8002f0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	60ba      	str	r2, [r7, #8]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fb38 	bl	8001574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbf1      	blt.n	8002ef6 <_write+0x12>
  }
  return len;
 8002f12:	687b      	ldr	r3, [r7, #4]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_close>:

int _close(int file)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bc80      	pop	{r7}
 8002f30:	4770      	bx	lr

08002f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f42:	605a      	str	r2, [r3, #4]
  return 0;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <_isatty>:

int _isatty(int file)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <_sbrk+0x5c>)
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <_sbrk+0x60>)
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_sbrk+0x64>)
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <_sbrk+0x68>)
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fac:	f005 ff5a 	bl	8008e64 <__errno>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fba:	e009      	b.n	8002fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4413      	add	r3, r2
 8002fca:	4a05      	ldr	r2, [pc, #20]	; (8002fe0 <_sbrk+0x64>)
 8002fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3718      	adds	r7, #24
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20005000 	.word	0x20005000
 8002fdc:	00000400 	.word	0x00000400
 8002fe0:	2000058c 	.word	0x2000058c
 8002fe4:	20000840 	.word	0x20000840

08002fe8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08e      	sub	sp, #56	; 0x38
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	615a      	str	r2, [r3, #20]
 8003022:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003026:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800302a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800302c:	4b2b      	ldr	r3, [pc, #172]	; (80030dc <MX_TIM2_Init+0xe8>)
 800302e:	2247      	movs	r2, #71	; 0x47
 8003030:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003032:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003038:	4b28      	ldr	r3, [pc, #160]	; (80030dc <MX_TIM2_Init+0xe8>)
 800303a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800303e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003040:	4b26      	ldr	r3, [pc, #152]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003046:	4b25      	ldr	r3, [pc, #148]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800304c:	4823      	ldr	r0, [pc, #140]	; (80030dc <MX_TIM2_Init+0xe8>)
 800304e:	f002 ff63 	bl	8005f18 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003058:	f7ff f820 	bl	800209c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800305c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003062:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003066:	4619      	mov	r1, r3
 8003068:	481c      	ldr	r0, [pc, #112]	; (80030dc <MX_TIM2_Init+0xe8>)
 800306a:	f003 faa3 	bl	80065b4 <HAL_TIM_ConfigClockSource>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003074:	f7ff f812 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003078:	4818      	ldr	r0, [pc, #96]	; (80030dc <MX_TIM2_Init+0xe8>)
 800307a:	f002 ffef 	bl	800605c <HAL_TIM_PWM_Init>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003084:	f7ff f80a 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003088:	2300      	movs	r3, #0
 800308a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003090:	f107 0320 	add.w	r3, r7, #32
 8003094:	4619      	mov	r1, r3
 8003096:	4811      	ldr	r0, [pc, #68]	; (80030dc <MX_TIM2_Init+0xe8>)
 8003098:	f003 fe28 	bl	8006cec <HAL_TIMEx_MasterConfigSynchronization>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80030a2:	f7fe fffb 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030a6:	2360      	movs	r3, #96	; 0x60
 80030a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	2200      	movs	r2, #0
 80030ba:	4619      	mov	r1, r3
 80030bc:	4807      	ldr	r0, [pc, #28]	; (80030dc <MX_TIM2_Init+0xe8>)
 80030be:	f003 f9b7 	bl	8006430 <HAL_TIM_PWM_ConfigChannel>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80030c8:	f7fe ffe8 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80030cc:	4803      	ldr	r0, [pc, #12]	; (80030dc <MX_TIM2_Init+0xe8>)
 80030ce:	f000 f8bd 	bl	800324c <HAL_TIM_MspPostInit>

}
 80030d2:	bf00      	nop
 80030d4:	3738      	adds	r7, #56	; 0x38
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000590 	.word	0x20000590

080030e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08e      	sub	sp, #56	; 0x38
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f4:	f107 0320 	add.w	r3, r7, #32
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030fe:	1d3b      	adds	r3, r7, #4
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	60da      	str	r2, [r3, #12]
 800310a:	611a      	str	r2, [r3, #16]
 800310c:	615a      	str	r2, [r3, #20]
 800310e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003110:	4b2c      	ldr	r3, [pc, #176]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003112:	4a2d      	ldr	r2, [pc, #180]	; (80031c8 <MX_TIM3_Init+0xe8>)
 8003114:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003118:	2247      	movs	r2, #71	; 0x47
 800311a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311c:	4b29      	ldr	r3, [pc, #164]	; (80031c4 <MX_TIM3_Init+0xe4>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003122:	4b28      	ldr	r3, [pc, #160]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003128:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800312a:	4b26      	ldr	r3, [pc, #152]	; (80031c4 <MX_TIM3_Init+0xe4>)
 800312c:	2200      	movs	r2, #0
 800312e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003132:	2200      	movs	r2, #0
 8003134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003136:	4823      	ldr	r0, [pc, #140]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003138:	f002 feee 	bl	8005f18 <HAL_TIM_Base_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003142:	f7fe ffab 	bl	800209c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800314c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003150:	4619      	mov	r1, r3
 8003152:	481c      	ldr	r0, [pc, #112]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003154:	f003 fa2e 	bl	80065b4 <HAL_TIM_ConfigClockSource>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800315e:	f7fe ff9d 	bl	800209c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003162:	4818      	ldr	r0, [pc, #96]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003164:	f002 ff7a 	bl	800605c <HAL_TIM_PWM_Init>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800316e:	f7fe ff95 	bl	800209c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800317a:	f107 0320 	add.w	r3, r7, #32
 800317e:	4619      	mov	r1, r3
 8003180:	4810      	ldr	r0, [pc, #64]	; (80031c4 <MX_TIM3_Init+0xe4>)
 8003182:	f003 fdb3 	bl	8006cec <HAL_TIMEx_MasterConfigSynchronization>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800318c:	f7fe ff86 	bl	800209c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003190:	2360      	movs	r3, #96	; 0x60
 8003192:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003198:	2300      	movs	r3, #0
 800319a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800319c:	2300      	movs	r3, #0
 800319e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031a0:	1d3b      	adds	r3, r7, #4
 80031a2:	2200      	movs	r2, #0
 80031a4:	4619      	mov	r1, r3
 80031a6:	4807      	ldr	r0, [pc, #28]	; (80031c4 <MX_TIM3_Init+0xe4>)
 80031a8:	f003 f942 	bl	8006430 <HAL_TIM_PWM_ConfigChannel>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80031b2:	f7fe ff73 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80031b6:	4803      	ldr	r0, [pc, #12]	; (80031c4 <MX_TIM3_Init+0xe4>)
 80031b8:	f000 f848 	bl	800324c <HAL_TIM_MspPostInit>

}
 80031bc:	bf00      	nop
 80031be:	3738      	adds	r7, #56	; 0x38
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200005d8 	.word	0x200005d8
 80031c8:	40000400 	.word	0x40000400

080031cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d114      	bne.n	8003208 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_TIM_Base_MspInit+0x78>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_TIM_Base_MspInit+0x78>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	61d3      	str	r3, [r2, #28]
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_TIM_Base_MspInit+0x78>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	201c      	movs	r0, #28
 80031fc:	f000 fda1 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003200:	201c      	movs	r0, #28
 8003202:	f000 fdba 	bl	8003d7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003206:	e018      	b.n	800323a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <HAL_TIM_Base_MspInit+0x7c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d113      	bne.n	800323a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <HAL_TIM_Base_MspInit+0x78>)
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <HAL_TIM_Base_MspInit+0x78>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	61d3      	str	r3, [r2, #28]
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_TIM_Base_MspInit+0x78>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	201d      	movs	r0, #29
 8003230:	f000 fd87 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003234:	201d      	movs	r0, #29
 8003236:	f000 fda0 	bl	8003d7a <HAL_NVIC_EnableIRQ>
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000
 8003248:	40000400 	.word	0x40000400

0800324c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003254:	f107 0310 	add.w	r3, r7, #16
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d118      	bne.n	800329e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326c:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <HAL_TIM_MspPostInit+0x94>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	4a1b      	ldr	r2, [pc, #108]	; (80032e0 <HAL_TIM_MspPostInit+0x94>)
 8003272:	f043 0304 	orr.w	r3, r3, #4
 8003276:	6193      	str	r3, [r2, #24]
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <HAL_TIM_MspPostInit+0x94>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 8003284:	2301      	movs	r3, #1
 8003286:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003288:	2302      	movs	r3, #2
 800328a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328c:	2302      	movs	r3, #2
 800328e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	4619      	mov	r1, r3
 8003296:	4813      	ldr	r0, [pc, #76]	; (80032e4 <HAL_TIM_MspPostInit+0x98>)
 8003298:	f001 f82c 	bl	80042f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800329c:	e01c      	b.n	80032d8 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a11      	ldr	r2, [pc, #68]	; (80032e8 <HAL_TIM_MspPostInit+0x9c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d117      	bne.n	80032d8 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_TIM_MspPostInit+0x94>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <HAL_TIM_MspPostInit+0x94>)
 80032ae:	f043 0304 	orr.w	r3, r3, #4
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_TIM_MspPostInit+0x94>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP2_Pin;
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c8:	2302      	movs	r3, #2
 80032ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	4619      	mov	r1, r3
 80032d2:	4804      	ldr	r0, [pc, #16]	; (80032e4 <HAL_TIM_MspPostInit+0x98>)
 80032d4:	f001 f80e 	bl	80042f4 <HAL_GPIO_Init>
}
 80032d8:	bf00      	nop
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40010800 	.word	0x40010800
 80032e8:	40000400 	.word	0x40000400

080032ec <uart_interface_init>:
extern uart_interface_typedef uart_interface;



void uart_interface_init(uart_interface_typedef* uart_int, UART_HandleTypeDef *huart, DMA_HandleTypeDef* hdma_usart_rx,
		user_function_typedef* functions_array, uint8_t num_functions){
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]

	__HAL_DMA_DISABLE_IT(hdma_usart_rx, DMA_IT_HT); //disable half transfer DMA interrupt
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0204 	bic.w	r2, r2, #4
 8003308:	601a      	str	r2, [r3, #0]

	uart_int->huart = huart;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	601a      	str	r2, [r3, #0]
	uart_int->received_command_size = 0;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	uart_int->command_received_flag = 0;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
	uart_int->functions_array = functions_array;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	uart_int->num_functions = num_functions;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	7e3a      	ldrb	r2, [r7, #24]
 800332c:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	uart_int->uart_tx_ready = 1;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	uart_int->queue_empty = 1;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e


}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <start_uart_interface>:


void start_uart_interface(uart_interface_typedef* uart_int){
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_int->huart, uart_int->receive_buffer, BUFFER_SIZE_RX);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2280      	movs	r2, #128	; 0x80
 800335c:	4619      	mov	r1, r3
 800335e:	f003 fe81 	bl	8007064 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <uart_send>:


void uart_send(uart_interface_typedef* uart_int, uint8_t* buffer, uint16_t size, bool add_to_queue){
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	4611      	mov	r1, r2
 8003376:	461a      	mov	r2, r3
 8003378:	460b      	mov	r3, r1
 800337a:	80fb      	strh	r3, [r7, #6]
 800337c:	4613      	mov	r3, r2
 800337e:	717b      	strb	r3, [r7, #5]
	if(size < BUFFER_SIZE_TX){
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	2bff      	cmp	r3, #255	; 0xff
 8003384:	d833      	bhi.n	80033ee <uart_send+0x84>
		if(uart_int->uart_tx_ready){
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d013      	beq.n	80033ba <uart_send+0x50>
			uart_int->uart_tx_ready = 0;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
			memcpy(uart_int->transmit_buffer, buffer, size);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	3384      	adds	r3, #132	; 0x84
 800339e:	88fa      	ldrh	r2, [r7, #6]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f005 fd98 	bl	8008ed8 <memcpy>
			HAL_UART_Transmit_DMA(uart_int->huart, uart_int->transmit_buffer, size);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3384      	adds	r3, #132	; 0x84
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	4619      	mov	r1, r3
 80033b4:	f003 fde6 	bl	8006f84 <HAL_UART_Transmit_DMA>
			uart_int->queue_empty = 0;


		}
	}
}
 80033b8:	e019      	b.n	80033ee <uart_send+0x84>
		else if(add_to_queue && uart_int->queue_empty){
 80033ba:	797b      	ldrb	r3, [r7, #5]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d016      	beq.n	80033ee <uart_send+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d010      	beq.n	80033ee <uart_send+0x84>
			memcpy(uart_int->queue, buffer, size);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f203 138d 	addw	r3, r3, #397	; 0x18d
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f005 fd7e 	bl	8008ed8 <memcpy>
			uart_int->queue_data_size = size;
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			uart_int->queue_empty = 0;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_UARTEx_RxEventCallback>:

/*
 * command received interrupt
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == uart_interface.huart->Instance)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <HAL_UARTEx_RxEventCallback+0x34>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d107      	bne.n	8003422 <HAL_UARTEx_RxEventCallback+0x2a>
    {
    	uart_interface.command_received_flag = 1;
 8003412:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_UARTEx_RxEventCallback+0x34>)
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    	uart_interface.received_command_size = Size;
 800341a:	4a04      	ldr	r2, [pc, #16]	; (800342c <HAL_UARTEx_RxEventCallback+0x34>)
 800341c:	887b      	ldrh	r3, [r7, #2]
 800341e:	f8a2 3184 	strh.w	r3, [r2, #388]	; 0x184

    }
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	bc80      	pop	{r7}
 800342a:	4770      	bx	lr
 800342c:	200002f4 	.word	0x200002f4

08003430 <HAL_UART_TxCpltCallback>:

/*
 * transnmit completed, if there is element in queue buffer send it, otherwise set uart transmit to ready
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_interface.huart->Instance){
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b19      	ldr	r3, [pc, #100]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d129      	bne.n	800349a <HAL_UART_TxCpltCallback+0x6a>
		if(uart_interface.queue_empty == 0){
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 8003448:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f083 0301 	eor.w	r3, r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01c      	beq.n	8003492 <HAL_UART_TxCpltCallback+0x62>
			memcpy(uart_interface.transmit_buffer, uart_interface.queue, uart_interface.queue_data_size);
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 800345a:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	4911      	ldr	r1, [pc, #68]	; (80034a8 <HAL_UART_TxCpltCallback+0x78>)
 8003464:	4811      	ldr	r0, [pc, #68]	; (80034ac <HAL_UART_TxCpltCallback+0x7c>)
 8003466:	f005 fd37 	bl	8008ed8 <memcpy>
			HAL_UART_Transmit_DMA(uart_interface.huart, uart_interface.transmit_buffer, uart_interface.queue_data_size);
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 8003470:	f892 228d 	ldrb.w	r2, [r2, #653]	; 0x28d
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	b292      	uxth	r2, r2
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <HAL_UART_TxCpltCallback+0x7c>)
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fd82 	bl	8006f84 <HAL_UART_Transmit_DMA>
			uart_interface.queue_empty = 1;
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 8003482:	2201      	movs	r2, #1
 8003484:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
			uart_interface.uart_tx_ready = 0;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
		}
		else{
			uart_interface.uart_tx_ready = 1;
		}
	}
}
 8003490:	e003      	b.n	800349a <HAL_UART_TxCpltCallback+0x6a>
			uart_interface.uart_tx_ready = 1;
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <HAL_UART_TxCpltCallback+0x74>)
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200002f4 	.word	0x200002f4
 80034a8:	20000481 	.word	0x20000481
 80034ac:	20000378 	.word	0x20000378

080034b0 <execute_received_command>:


int8_t execute_received_command(uart_interface_typedef* uart_int){
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b0a4      	sub	sp, #144	; 0x90
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	if(!uart_int->command_received_flag) return 0;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <execute_received_command+0x1e>
 80034ca:	2300      	movs	r3, #0
 80034cc:	e12c      	b.n	8003728 <execute_received_command+0x278>

	uart_int->command_received_flag = 0;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
	char function_code[FUNCTION_CODE_MAX_LENGTH];
	char args[MAX_NUM_ARGS][ARG_MAX_LENGTH];


	// parse function code
	uint8_t idx = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80034e2:	e031      	b.n	8003548 <execute_received_command+0x98>
		idx ++;
 80034e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80034e8:	3301      	adds	r3, #1
 80034ea:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		char elem = uart_int->receive_buffer[i];
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		if(elem == '\0' || elem == '\r' || elem == '\n' || elem == '('){
 80034fe:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <execute_received_command+0x6e>
 8003506:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800350a:	2b0d      	cmp	r3, #13
 800350c:	d007      	beq.n	800351e <execute_received_command+0x6e>
 800350e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003512:	2b0a      	cmp	r3, #10
 8003514:	d003      	beq.n	800351e <execute_received_command+0x6e>
 8003516:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800351a:	2b28      	cmp	r3, #40	; 0x28
 800351c:	d107      	bne.n	800352e <execute_received_command+0x7e>
			function_code[i] = '\0';
 800351e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003522:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003526:	4413      	add	r3, r2
 8003528:	2200      	movs	r2, #0
 800352a:	701a      	strb	r2, [r3, #0]
			break;
 800352c:	e018      	b.n	8003560 <execute_received_command+0xb0>
		}
		else function_code[i] = elem;
 800352e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003532:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003536:	4413      	add	r3, r2
 8003538:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 800353c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 800353e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003542:	3301      	adds	r3, #1
 8003544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 800354e:	461a      	mov	r2, r3
 8003550:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003554:	4293      	cmp	r3, r2
 8003556:	dbc5      	blt.n	80034e4 <execute_received_command+0x34>
 8003558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800355c:	2b0f      	cmp	r3, #15
 800355e:	ddc1      	ble.n	80034e4 <execute_received_command+0x34>
	}


	//parse arguments
	bool no_args = 1;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t arg_len = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint8_t arg_counter = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	for(int i = idx; i < uart_int->received_command_size; i++)
 8003572:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800357a:	e071      	b.n	8003660 <execute_received_command+0x1b0>
	{
		if(arg_counter >= MAX_NUM_ARGS || arg_len >= ARG_MAX_LENGTH) return -1; //error, to many argumenst/to long argument
 800357c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003580:	2b07      	cmp	r3, #7
 8003582:	d803      	bhi.n	800358c <execute_received_command+0xdc>
 8003584:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003588:	2b0b      	cmp	r3, #11
 800358a:	d902      	bls.n	8003592 <execute_received_command+0xe2>
 800358c:	f04f 33ff 	mov.w	r3, #4294967295
 8003590:	e0ca      	b.n	8003728 <execute_received_command+0x278>

		char elem = uart_int->receive_buffer[i];
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003598:	4413      	add	r3, r2
 800359a:	3304      	adds	r3, #4
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		if(elem == '\0' || elem == '\r' || elem == '\n') return -1; //error, commands ends with ')'
 80035a2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <execute_received_command+0x10a>
 80035aa:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80035ae:	2b0d      	cmp	r3, #13
 80035b0:	d003      	beq.n	80035ba <execute_received_command+0x10a>
 80035b2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80035b6:	2b0a      	cmp	r3, #10
 80035b8:	d102      	bne.n	80035c0 <execute_received_command+0x110>
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	e0b3      	b.n	8003728 <execute_received_command+0x278>

		else if(elem == ')'){
 80035c0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80035c4:	2b29      	cmp	r3, #41	; 0x29
 80035c6:	d10e      	bne.n	80035e6 <execute_received_command+0x136>
			args[arg_counter][arg_len] = '\0';
 80035c8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80035cc:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	3390      	adds	r3, #144	; 0x90
 80035da:	443b      	add	r3, r7
 80035dc:	440b      	add	r3, r1
 80035de:	3b88      	subs	r3, #136	; 0x88
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
			break;
 80035e4:	e044      	b.n	8003670 <execute_received_command+0x1c0>
		}
		else if(elem == ','){
 80035e6:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80035ea:	2b2c      	cmp	r3, #44	; 0x2c
 80035ec:	d116      	bne.n	800361c <execute_received_command+0x16c>
			args[arg_counter][arg_len] = '\0';
 80035ee:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80035f2:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80035f6:	4613      	mov	r3, r2
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3390      	adds	r3, #144	; 0x90
 8003600:	443b      	add	r3, r7
 8003602:	440b      	add	r3, r1
 8003604:	3b88      	subs	r3, #136	; 0x88
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
			arg_counter++;
 800360a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800360e:	3301      	adds	r3, #1
 8003610:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			arg_len = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800361a:	e01c      	b.n	8003656 <execute_received_command+0x1a6>
		}
		else if(elem == ' '){
 800361c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003620:	2b20      	cmp	r3, #32
 8003622:	d017      	beq.n	8003654 <execute_received_command+0x1a4>
			continue;
		}
		else{
			no_args = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			args[arg_counter][arg_len] = elem;
 800362a:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800362e:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	3390      	adds	r3, #144	; 0x90
 800363c:	443b      	add	r3, r7
 800363e:	440b      	add	r3, r1
 8003640:	3b88      	subs	r3, #136	; 0x88
 8003642:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8003646:	701a      	strb	r2, [r3, #0]
			arg_len ++;
 8003648:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800364c:	3301      	adds	r3, #1
 800364e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8003652:	e000      	b.n	8003656 <execute_received_command+0x1a6>
			continue;
 8003654:	bf00      	nop
	for(int i = idx; i < uart_int->received_command_size; i++)
 8003656:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800365a:	3301      	adds	r3, #1
 800365c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 8003666:	461a      	mov	r2, r3
 8003668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800366c:	4293      	cmp	r3, r2
 800366e:	db85      	blt.n	800357c <execute_received_command+0xcc>
		}
	}
	if(!no_args) arg_counter++;
 8003670:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d004      	beq.n	8003688 <execute_received_command+0x1d8>
 800367e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003682:	3301      	adds	r3, #1
 8003684:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	if(strcmp(function_code, "help") == 0){
 8003688:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800368c:	4928      	ldr	r1, [pc, #160]	; (8003730 <execute_received_command+0x280>)
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc fd5e 	bl	8000150 <strcmp>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <execute_received_command+0x1f4>
		help(uart_int);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f84a 	bl	8003734 <help>
		return 1;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e041      	b.n	8003728 <execute_received_command+0x278>
	}



	//run received function
	for(int i = 0; i < uart_int->num_functions; i++){
 80036a4:	2300      	movs	r3, #0
 80036a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036a8:	e033      	b.n	8003712 <execute_received_command+0x262>
		if(strcmp(function_code, uart_int->functions_array[i].function_code) == 0){
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80036b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	1d1a      	adds	r2, r3, #4
 80036be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc fd43 	bl	8000150 <strcmp>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d11d      	bne.n	800370c <execute_received_command+0x25c>
			if(uart_int->functions_array[i].num_args == arg_counter){
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80036d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036d8:	4613      	mov	r3, r2
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4413      	add	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	440b      	add	r3, r1
 80036e2:	7d1b      	ldrb	r3, [r3, #20]
 80036e4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d11a      	bne.n	8003722 <execute_received_command+0x272>
				(*uart_int->functions_array[i].function_pointer)(args);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80036f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f107 0208 	add.w	r2, r7, #8
 8003704:	4610      	mov	r0, r2
 8003706:	4798      	blx	r3
				return 1;
 8003708:	2301      	movs	r3, #1
 800370a:	e00d      	b.n	8003728 <execute_received_command+0x278>
	for(int i = 0; i < uart_int->num_functions; i++){
 800370c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800370e:	3301      	adds	r3, #1
 8003710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8003718:	461a      	mov	r2, r3
 800371a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800371c:	4293      	cmp	r3, r2
 800371e:	dbc4      	blt.n	80036aa <execute_received_command+0x1fa>
 8003720:	e000      	b.n	8003724 <execute_received_command+0x274>
			}
			break;
 8003722:	bf00      	nop
		}
	}
	return -1;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003728:	4618      	mov	r0, r3
 800372a:	3790      	adds	r7, #144	; 0x90
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	0800b408 	.word	0x0800b408

08003734 <help>:

/*
 * send "help()" command to stm, stm will transmit avaible commands and number of arguments for each command
 */

void help(uart_interface_typedef* uart_int){
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
//		}
//
//		offset += written;
//	}
//	uart_send(uart_int, buffer, offset);
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr
	...

08003748 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800374c:	4b11      	ldr	r3, [pc, #68]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <MX_USART1_UART_Init+0x50>)
 8003750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 8003754:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003766:	4b0b      	ldr	r3, [pc, #44]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800376c:	4b09      	ldr	r3, [pc, #36]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 800376e:	220c      	movs	r2, #12
 8003770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800377e:	4805      	ldr	r0, [pc, #20]	; (8003794 <MX_USART1_UART_Init+0x4c>)
 8003780:	f003 fb24 	bl	8006dcc <HAL_UART_Init>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800378a:	f7fe fc87 	bl	800209c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000620 	.word	0x20000620
 8003798:	40013800 	.word	0x40013800

0800379c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a47      	ldr	r2, [pc, #284]	; (80038d4 <HAL_UART_MspInit+0x138>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	f040 8086 	bne.w	80038ca <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <HAL_UART_MspInit+0x13c>)
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	4a45      	ldr	r2, [pc, #276]	; (80038d8 <HAL_UART_MspInit+0x13c>)
 80037c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037c8:	6193      	str	r3, [r2, #24]
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <HAL_UART_MspInit+0x13c>)
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <HAL_UART_MspInit+0x13c>)
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <HAL_UART_MspInit+0x13c>)
 80037dc:	f043 0304 	orr.w	r3, r3, #4
 80037e0:	6193      	str	r3, [r2, #24]
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_UART_MspInit+0x13c>)
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80037ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037f8:	2303      	movs	r3, #3
 80037fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fc:	f107 0310 	add.w	r3, r7, #16
 8003800:	4619      	mov	r1, r3
 8003802:	4836      	ldr	r0, [pc, #216]	; (80038dc <HAL_UART_MspInit+0x140>)
 8003804:	f000 fd76 	bl	80042f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800380c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003816:	f107 0310 	add.w	r3, r7, #16
 800381a:	4619      	mov	r1, r3
 800381c:	482f      	ldr	r0, [pc, #188]	; (80038dc <HAL_UART_MspInit+0x140>)
 800381e:	f000 fd69 	bl	80042f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003822:	4b2f      	ldr	r3, [pc, #188]	; (80038e0 <HAL_UART_MspInit+0x144>)
 8003824:	4a2f      	ldr	r2, [pc, #188]	; (80038e4 <HAL_UART_MspInit+0x148>)
 8003826:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003828:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HAL_UART_MspInit+0x144>)
 800382a:	2200      	movs	r2, #0
 800382c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800382e:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <HAL_UART_MspInit+0x144>)
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003834:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <HAL_UART_MspInit+0x144>)
 8003836:	2280      	movs	r2, #128	; 0x80
 8003838:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <HAL_UART_MspInit+0x144>)
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003840:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <HAL_UART_MspInit+0x144>)
 8003842:	2200      	movs	r2, #0
 8003844:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003846:	4b26      	ldr	r3, [pc, #152]	; (80038e0 <HAL_UART_MspInit+0x144>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_UART_MspInit+0x144>)
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003852:	4823      	ldr	r0, [pc, #140]	; (80038e0 <HAL_UART_MspInit+0x144>)
 8003854:	f000 faac 	bl	8003db0 <HAL_DMA_Init>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800385e:	f7fe fc1d 	bl	800209c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <HAL_UART_MspInit+0x144>)
 8003866:	63da      	str	r2, [r3, #60]	; 0x3c
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_UART_MspInit+0x144>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 8003870:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_UART_MspInit+0x150>)
 8003872:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 8003876:	2210      	movs	r2, #16
 8003878:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800387a:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800388c:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 800388e:	2200      	movs	r2, #0
 8003890:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003898:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800389e:	4812      	ldr	r0, [pc, #72]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 80038a0:	f000 fa86 	bl	8003db0 <HAL_DMA_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80038aa:	f7fe fbf7 	bl	800209c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38
 80038b4:	4a0c      	ldr	r2, [pc, #48]	; (80038e8 <HAL_UART_MspInit+0x14c>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80038ba:	2200      	movs	r2, #0
 80038bc:	2100      	movs	r1, #0
 80038be:	2025      	movs	r0, #37	; 0x25
 80038c0:	f000 fa3f 	bl	8003d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038c4:	2025      	movs	r0, #37	; 0x25
 80038c6:	f000 fa58 	bl	8003d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80038ca:	bf00      	nop
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40021000 	.word	0x40021000
 80038dc:	40010800 	.word	0x40010800
 80038e0:	20000668 	.word	0x20000668
 80038e4:	40020058 	.word	0x40020058
 80038e8:	200006ac 	.word	0x200006ac
 80038ec:	40020044 	.word	0x40020044

080038f0 <led>:





void led(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	if(strcmp(args[0], "1") == 0){
 80038f8:	490e      	ldr	r1, [pc, #56]	; (8003934 <led+0x44>)
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7fc fc28 	bl	8000150 <strcmp>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <led+0x22>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003906:	2200      	movs	r2, #0
 8003908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800390c:	480a      	ldr	r0, [pc, #40]	; (8003938 <led+0x48>)
 800390e:	f000 fe75 	bl	80045fc <HAL_GPIO_WritePin>
	}
	if(strcmp(args[0], "0") == 0){
 8003912:	490a      	ldr	r1, [pc, #40]	; (800393c <led+0x4c>)
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7fc fc1b 	bl	8000150 <strcmp>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <led+0x3c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003920:	2201      	movs	r2, #1
 8003922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003926:	4804      	ldr	r0, [pc, #16]	; (8003938 <led+0x48>)
 8003928:	f000 fe68 	bl	80045fc <HAL_GPIO_WritePin>
	}
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	0800b410 	.word	0x0800b410
 8003938:	40011000 	.word	0x40011000
 800393c:	0800b414 	.word	0x0800b414

08003940 <comunication_test>:

void comunication_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003940:	b580      	push	{r7, lr}
 8003942:	b0c4      	sub	sp, #272	; 0x110
 8003944:	af00      	add	r7, sp, #0
 8003946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800394a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800394e:	6018      	str	r0, [r3, #0]
	uint8_t buffer[BUFFER_SIZE_TX];
	uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "----------------Czesc :)--------------\n");
 8003950:	f107 030c 	add.w	r3, r7, #12
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <comunication_test+0x40>)
 8003956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800395a:	4618      	mov	r0, r3
 800395c:	f005 f924 	bl	8008ba8 <sniprintf>
 8003960:	4603      	mov	r3, r0
 8003962:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uart_send(&uart_interface, buffer, size, 1);
 8003966:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 800396a:	f107 010c 	add.w	r1, r7, #12
 800396e:	2301      	movs	r3, #1
 8003970:	4804      	ldr	r0, [pc, #16]	; (8003984 <comunication_test+0x44>)
 8003972:	f7ff fcfa 	bl	800336a <uart_send>

}
 8003976:	bf00      	nop
 8003978:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	0800b418 	.word	0x0800b418
 8003984:	200002f4 	.word	0x200002f4

08003988 <set_position>:


void set_position(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

	if(strcmp(args[0], "0") == 0){
 8003990:	4915      	ldr	r1, [pc, #84]	; (80039e8 <set_position+0x60>)
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fc fbdc 	bl	8000150 <strcmp>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <set_position+0x1e>
		set_pos = 0;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <set_position+0x64>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e019      	b.n	80039da <set_position+0x52>
	}
	else{
		int32_t val = atoi(args[0]);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f004 fb08 	bl	8007fbc <atoi>
 80039ac:	60f8      	str	r0, [r7, #12]
		if(val == 0) return;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d011      	beq.n	80039d8 <set_position+0x50>
		set_pos = val * CM_TO_STEP;
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7fc fd2f 	bl	8000418 <__aeabi_i2d>
 80039ba:	a309      	add	r3, pc, #36	; (adr r3, 80039e0 <set_position+0x58>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fd94 	bl	80004ec <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	f7fd f83e 	bl	8000a4c <__aeabi_d2iz>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4a06      	ldr	r2, [pc, #24]	; (80039ec <set_position+0x64>)
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	e000      	b.n	80039da <set_position+0x52>
		if(val == 0) return;
 80039d8:	bf00      	nop
	}
}
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	ed916873 	.word	0xed916873
 80039e4:	4052c77c 	.word	0x4052c77c
 80039e8:	0800b414 	.word	0x0800b414
 80039ec:	200002f0 	.word	0x200002f0

080039f0 <set_angle_fun>:



void set_angle_fun(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
	spin_duration_ms = atoi(args[0]);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f004 fadf 	bl	8007fbc <atoi>
 80039fe:	4603      	mov	r3, r0
 8003a00:	b21a      	sxth	r2, r3
 8003a02:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <set_angle_fun+0x30>)
 8003a04:	801a      	strh	r2, [r3, #0]
	spin_value = atoi(args[1]);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fad6 	bl	8007fbc <atoi>
 8003a10:	4603      	mov	r3, r0
 8003a12:	b25a      	sxtb	r2, r3
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <set_angle_fun+0x34>)
 8003a16:	701a      	strb	r2, [r3, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000584 	.word	0x20000584
 8003a24:	20000586 	.word	0x20000586

08003a28 <rotate_deg>:


void rotate_deg(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]

}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
	...

08003a3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a3c:	f7ff fad4 	bl	8002fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a40:	480b      	ldr	r0, [pc, #44]	; (8003a70 <LoopFillZerobss+0xe>)
   ldr r1, =_edata
 8003a42:	490c      	ldr	r1, [pc, #48]	; (8003a74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a44:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a48:	e002      	b.n	8003a50 <LoopCopyDataInit>

08003a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a4e:	3304      	adds	r3, #4

08003a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a54:	d3f9      	bcc.n	8003a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a58:	4c09      	ldr	r4, [pc, #36]	; (8003a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a5c:	e001      	b.n	8003a62 <LoopFillZerobss>

08003a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a60:	3204      	adds	r2, #4

08003a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a64:	d3fb      	bcc.n	8003a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a66:	f005 fa03 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a6a:	f7fd fdc1 	bl	80015f0 <main>
  bx lr
 8003a6e:	4770      	bx	lr
  ldr r0, =_sdata
 8003a70:	20000000 	.word	0x20000000
   ldr r1, =_edata
 8003a74:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003a78:	0800b858 	.word	0x0800b858
  ldr r2, =_sbss
 8003a7c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003a80:	20000840 	.word	0x20000840

08003a84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a84:	e7fe      	b.n	8003a84 <ADC1_2_IRQHandler>
	...

08003a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_Init+0x28>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a07      	ldr	r2, [pc, #28]	; (8003ab0 <HAL_Init+0x28>)
 8003a92:	f043 0310 	orr.w	r3, r3, #16
 8003a96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a98:	2003      	movs	r0, #3
 8003a9a:	f000 f947 	bl	8003d2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9e:	200f      	movs	r0, #15
 8003aa0:	f000 f808 	bl	8003ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa4:	f7ff f954 	bl	8002d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40022000 	.word	0x40022000

08003ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_InitTick+0x54>)
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_InitTick+0x58>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f95f 	bl	8003d96 <HAL_SYSTICK_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e00e      	b.n	8003b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d80a      	bhi.n	8003afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	f04f 30ff 	mov.w	r0, #4294967295
 8003af0:	f000 f927 	bl	8003d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003af4:	4a06      	ldr	r2, [pc, #24]	; (8003b10 <HAL_InitTick+0x5c>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000008 	.word	0x20000008
 8003b10:	20000004 	.word	0x20000004

08003b14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <HAL_IncTick+0x1c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_IncTick+0x20>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4413      	add	r3, r2
 8003b24:	4a03      	ldr	r2, [pc, #12]	; (8003b34 <HAL_IncTick+0x20>)
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	bf00      	nop
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	20000008 	.word	0x20000008
 8003b34:	200006f0 	.word	0x200006f0

08003b38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b3c:	4b02      	ldr	r3, [pc, #8]	; (8003b48 <HAL_GetTick+0x10>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	200006f0 	.word	0x200006f0

08003b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b54:	f7ff fff0 	bl	8003b38 <HAL_GetTick>
 8003b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d005      	beq.n	8003b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <HAL_Delay+0x44>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b72:	bf00      	nop
 8003b74:	f7ff ffe0 	bl	8003b38 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d8f7      	bhi.n	8003b74 <HAL_Delay+0x28>
  {
  }
}
 8003b84:	bf00      	nop
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000008 	.word	0x20000008

08003b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bc6:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	60d3      	str	r3, [r2, #12]
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 0307 	and.w	r3, r3, #7
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	db0b      	blt.n	8003c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 021f 	and.w	r2, r3, #31
 8003c10:	4906      	ldr	r1, [pc, #24]	; (8003c2c <__NVIC_EnableIRQ+0x34>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	2001      	movs	r0, #1
 8003c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bc80      	pop	{r7}
 8003c2a:	4770      	bx	lr
 8003c2c:	e000e100 	.word	0xe000e100

08003c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	6039      	str	r1, [r7, #0]
 8003c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	db0a      	blt.n	8003c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	490c      	ldr	r1, [pc, #48]	; (8003c7c <__NVIC_SetPriority+0x4c>)
 8003c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4e:	0112      	lsls	r2, r2, #4
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	440b      	add	r3, r1
 8003c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c58:	e00a      	b.n	8003c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	4908      	ldr	r1, [pc, #32]	; (8003c80 <__NVIC_SetPriority+0x50>)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3b04      	subs	r3, #4
 8003c68:	0112      	lsls	r2, r2, #4
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	761a      	strb	r2, [r3, #24]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bc80      	pop	{r7}
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000e100 	.word	0xe000e100
 8003c80:	e000ed00 	.word	0xe000ed00

08003c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b089      	sub	sp, #36	; 0x24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	bf28      	it	cs
 8003ca2:	2304      	movcs	r3, #4
 8003ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2b06      	cmp	r3, #6
 8003cac:	d902      	bls.n	8003cb4 <NVIC_EncodePriority+0x30>
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	3b03      	subs	r3, #3
 8003cb2:	e000      	b.n	8003cb6 <NVIC_EncodePriority+0x32>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd6:	43d9      	mvns	r1, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cdc:	4313      	orrs	r3, r2
         );
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3724      	adds	r7, #36	; 0x24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr

08003ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf8:	d301      	bcc.n	8003cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e00f      	b.n	8003d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <SysTick_Config+0x40>)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d06:	210f      	movs	r1, #15
 8003d08:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0c:	f7ff ff90 	bl	8003c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d10:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <SysTick_Config+0x40>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d16:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <SysTick_Config+0x40>)
 8003d18:	2207      	movs	r2, #7
 8003d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	e000e010 	.word	0xe000e010

08003d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff2d 	bl	8003b94 <__NVIC_SetPriorityGrouping>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b086      	sub	sp, #24
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	4603      	mov	r3, r0
 8003d4a:	60b9      	str	r1, [r7, #8]
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d54:	f7ff ff42 	bl	8003bdc <__NVIC_GetPriorityGrouping>
 8003d58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f7ff ff90 	bl	8003c84 <NVIC_EncodePriority>
 8003d64:	4602      	mov	r2, r0
 8003d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff ff5f 	bl	8003c30 <__NVIC_SetPriority>
}
 8003d72:	bf00      	nop
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	4603      	mov	r3, r0
 8003d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7ff ff35 	bl	8003bf8 <__NVIC_EnableIRQ>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ffa2 	bl	8003ce8 <SysTick_Config>
 8003da4:	4603      	mov	r3, r0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e043      	b.n	8003e4e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_DMA_Init+0xa8>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	4a22      	ldr	r2, [pc, #136]	; (8003e5c <HAL_DMA_Init+0xac>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	009a      	lsls	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <HAL_DMA_Init+0xb0>)
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dfa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	bffdfff8 	.word	0xbffdfff8
 8003e5c:	cccccccd 	.word	0xcccccccd
 8003e60:	40020000 	.word	0x40020000

08003e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
 8003e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_DMA_Start_IT+0x20>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e04b      	b.n	8003f1c <HAL_DMA_Start_IT+0xb8>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d13a      	bne.n	8003f0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f9eb 	bl	8004298 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 020e 	orr.w	r2, r2, #14
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e00f      	b.n	8003efc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0204 	bic.w	r2, r2, #4
 8003eea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 020a 	orr.w	r2, r2, #10
 8003efa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e005      	b.n	8003f1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
 8003f18:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d008      	beq.n	8003f4e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e020      	b.n	8003f90 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 020e 	bic.w	r2, r2, #14
 8003f5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	2101      	movs	r1, #1
 8003f78:	fa01 f202 	lsl.w	r2, r1, r2
 8003f7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr
	...

08003f9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d005      	beq.n	8003fc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
 8003fbe:	e051      	b.n	8004064 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 020e 	bic.w	r2, r2, #14
 8003fce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0201 	bic.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <HAL_DMA_Abort_IT+0xd4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d029      	beq.n	800403e <HAL_DMA_Abort_IT+0xa2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a21      	ldr	r2, [pc, #132]	; (8004074 <HAL_DMA_Abort_IT+0xd8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_DMA_Abort_IT+0x9e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <HAL_DMA_Abort_IT+0xdc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d01a      	beq.n	8004034 <HAL_DMA_Abort_IT+0x98>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a1e      	ldr	r2, [pc, #120]	; (800407c <HAL_DMA_Abort_IT+0xe0>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d012      	beq.n	800402e <HAL_DMA_Abort_IT+0x92>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <HAL_DMA_Abort_IT+0xe4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00a      	beq.n	8004028 <HAL_DMA_Abort_IT+0x8c>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <HAL_DMA_Abort_IT+0xe8>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d102      	bne.n	8004022 <HAL_DMA_Abort_IT+0x86>
 800401c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004020:	e00e      	b.n	8004040 <HAL_DMA_Abort_IT+0xa4>
 8004022:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004026:	e00b      	b.n	8004040 <HAL_DMA_Abort_IT+0xa4>
 8004028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800402c:	e008      	b.n	8004040 <HAL_DMA_Abort_IT+0xa4>
 800402e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004032:	e005      	b.n	8004040 <HAL_DMA_Abort_IT+0xa4>
 8004034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004038:	e002      	b.n	8004040 <HAL_DMA_Abort_IT+0xa4>
 800403a:	2310      	movs	r3, #16
 800403c:	e000      	b.n	8004040 <HAL_DMA_Abort_IT+0xa4>
 800403e:	2301      	movs	r3, #1
 8004040:	4a11      	ldr	r2, [pc, #68]	; (8004088 <HAL_DMA_Abort_IT+0xec>)
 8004042:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
    } 
  }
  return status;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40020008 	.word	0x40020008
 8004074:	4002001c 	.word	0x4002001c
 8004078:	40020030 	.word	0x40020030
 800407c:	40020044 	.word	0x40020044
 8004080:	40020058 	.word	0x40020058
 8004084:	4002006c 	.word	0x4002006c
 8004088:	40020000 	.word	0x40020000

0800408c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	2204      	movs	r2, #4
 80040aa:	409a      	lsls	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d04f      	beq.n	8004154 <HAL_DMA_IRQHandler+0xc8>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d04a      	beq.n	8004154 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0204 	bic.w	r2, r2, #4
 80040da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a66      	ldr	r2, [pc, #408]	; (800427c <HAL_DMA_IRQHandler+0x1f0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d029      	beq.n	800413a <HAL_DMA_IRQHandler+0xae>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a65      	ldr	r2, [pc, #404]	; (8004280 <HAL_DMA_IRQHandler+0x1f4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d022      	beq.n	8004136 <HAL_DMA_IRQHandler+0xaa>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a63      	ldr	r2, [pc, #396]	; (8004284 <HAL_DMA_IRQHandler+0x1f8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d01a      	beq.n	8004130 <HAL_DMA_IRQHandler+0xa4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a62      	ldr	r2, [pc, #392]	; (8004288 <HAL_DMA_IRQHandler+0x1fc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d012      	beq.n	800412a <HAL_DMA_IRQHandler+0x9e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a60      	ldr	r2, [pc, #384]	; (800428c <HAL_DMA_IRQHandler+0x200>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00a      	beq.n	8004124 <HAL_DMA_IRQHandler+0x98>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a5f      	ldr	r2, [pc, #380]	; (8004290 <HAL_DMA_IRQHandler+0x204>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d102      	bne.n	800411e <HAL_DMA_IRQHandler+0x92>
 8004118:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800411c:	e00e      	b.n	800413c <HAL_DMA_IRQHandler+0xb0>
 800411e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004122:	e00b      	b.n	800413c <HAL_DMA_IRQHandler+0xb0>
 8004124:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004128:	e008      	b.n	800413c <HAL_DMA_IRQHandler+0xb0>
 800412a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800412e:	e005      	b.n	800413c <HAL_DMA_IRQHandler+0xb0>
 8004130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004134:	e002      	b.n	800413c <HAL_DMA_IRQHandler+0xb0>
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	e000      	b.n	800413c <HAL_DMA_IRQHandler+0xb0>
 800413a:	2304      	movs	r3, #4
 800413c:	4a55      	ldr	r2, [pc, #340]	; (8004294 <HAL_DMA_IRQHandler+0x208>)
 800413e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8094 	beq.w	8004272 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004152:	e08e      	b.n	8004272 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	2202      	movs	r2, #2
 800415a:	409a      	lsls	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d056      	beq.n	8004212 <HAL_DMA_IRQHandler+0x186>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d051      	beq.n	8004212 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 020a 	bic.w	r2, r2, #10
 800418a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a38      	ldr	r2, [pc, #224]	; (800427c <HAL_DMA_IRQHandler+0x1f0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d029      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x166>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a37      	ldr	r2, [pc, #220]	; (8004280 <HAL_DMA_IRQHandler+0x1f4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d022      	beq.n	80041ee <HAL_DMA_IRQHandler+0x162>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a35      	ldr	r2, [pc, #212]	; (8004284 <HAL_DMA_IRQHandler+0x1f8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d01a      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x15c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_DMA_IRQHandler+0x1fc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d012      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x156>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a32      	ldr	r2, [pc, #200]	; (800428c <HAL_DMA_IRQHandler+0x200>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00a      	beq.n	80041dc <HAL_DMA_IRQHandler+0x150>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a31      	ldr	r2, [pc, #196]	; (8004290 <HAL_DMA_IRQHandler+0x204>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d102      	bne.n	80041d6 <HAL_DMA_IRQHandler+0x14a>
 80041d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80041d4:	e00e      	b.n	80041f4 <HAL_DMA_IRQHandler+0x168>
 80041d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041da:	e00b      	b.n	80041f4 <HAL_DMA_IRQHandler+0x168>
 80041dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e0:	e008      	b.n	80041f4 <HAL_DMA_IRQHandler+0x168>
 80041e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041e6:	e005      	b.n	80041f4 <HAL_DMA_IRQHandler+0x168>
 80041e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ec:	e002      	b.n	80041f4 <HAL_DMA_IRQHandler+0x168>
 80041ee:	2320      	movs	r3, #32
 80041f0:	e000      	b.n	80041f4 <HAL_DMA_IRQHandler+0x168>
 80041f2:	2302      	movs	r3, #2
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <HAL_DMA_IRQHandler+0x208>)
 80041f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d034      	beq.n	8004272 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004210:	e02f      	b.n	8004272 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2208      	movs	r2, #8
 8004218:	409a      	lsls	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d028      	beq.n	8004274 <HAL_DMA_IRQHandler+0x1e8>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d023      	beq.n	8004274 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 020e 	bic.w	r2, r2, #14
 800423a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f202 	lsl.w	r2, r1, r2
 800424a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	2b00      	cmp	r3, #0
 8004268:	d004      	beq.n	8004274 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	4798      	blx	r3
    }
  }
  return;
 8004272:	bf00      	nop
 8004274:	bf00      	nop
}
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40020008 	.word	0x40020008
 8004280:	4002001c 	.word	0x4002001c
 8004284:	40020030 	.word	0x40020030
 8004288:	40020044 	.word	0x40020044
 800428c:	40020058 	.word	0x40020058
 8004290:	4002006c 	.word	0x4002006c
 8004294:	40020000 	.word	0x40020000

08004298 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	2101      	movs	r1, #1
 80042b0:	fa01 f202 	lsl.w	r2, r1, r2
 80042b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d108      	bne.n	80042d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042d6:	e007      	b.n	80042e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b08b      	sub	sp, #44	; 0x2c
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042fe:	2300      	movs	r3, #0
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004306:	e169      	b.n	80045dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004308:	2201      	movs	r2, #1
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	4013      	ands	r3, r2
 800431a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	429a      	cmp	r2, r3
 8004322:	f040 8158 	bne.w	80045d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a9a      	ldr	r2, [pc, #616]	; (8004594 <HAL_GPIO_Init+0x2a0>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d05e      	beq.n	80043ee <HAL_GPIO_Init+0xfa>
 8004330:	4a98      	ldr	r2, [pc, #608]	; (8004594 <HAL_GPIO_Init+0x2a0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d875      	bhi.n	8004422 <HAL_GPIO_Init+0x12e>
 8004336:	4a98      	ldr	r2, [pc, #608]	; (8004598 <HAL_GPIO_Init+0x2a4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d058      	beq.n	80043ee <HAL_GPIO_Init+0xfa>
 800433c:	4a96      	ldr	r2, [pc, #600]	; (8004598 <HAL_GPIO_Init+0x2a4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d86f      	bhi.n	8004422 <HAL_GPIO_Init+0x12e>
 8004342:	4a96      	ldr	r2, [pc, #600]	; (800459c <HAL_GPIO_Init+0x2a8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d052      	beq.n	80043ee <HAL_GPIO_Init+0xfa>
 8004348:	4a94      	ldr	r2, [pc, #592]	; (800459c <HAL_GPIO_Init+0x2a8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d869      	bhi.n	8004422 <HAL_GPIO_Init+0x12e>
 800434e:	4a94      	ldr	r2, [pc, #592]	; (80045a0 <HAL_GPIO_Init+0x2ac>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d04c      	beq.n	80043ee <HAL_GPIO_Init+0xfa>
 8004354:	4a92      	ldr	r2, [pc, #584]	; (80045a0 <HAL_GPIO_Init+0x2ac>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d863      	bhi.n	8004422 <HAL_GPIO_Init+0x12e>
 800435a:	4a92      	ldr	r2, [pc, #584]	; (80045a4 <HAL_GPIO_Init+0x2b0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d046      	beq.n	80043ee <HAL_GPIO_Init+0xfa>
 8004360:	4a90      	ldr	r2, [pc, #576]	; (80045a4 <HAL_GPIO_Init+0x2b0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d85d      	bhi.n	8004422 <HAL_GPIO_Init+0x12e>
 8004366:	2b12      	cmp	r3, #18
 8004368:	d82a      	bhi.n	80043c0 <HAL_GPIO_Init+0xcc>
 800436a:	2b12      	cmp	r3, #18
 800436c:	d859      	bhi.n	8004422 <HAL_GPIO_Init+0x12e>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <HAL_GPIO_Init+0x80>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	080043ef 	.word	0x080043ef
 8004378:	080043c9 	.word	0x080043c9
 800437c:	080043db 	.word	0x080043db
 8004380:	0800441d 	.word	0x0800441d
 8004384:	08004423 	.word	0x08004423
 8004388:	08004423 	.word	0x08004423
 800438c:	08004423 	.word	0x08004423
 8004390:	08004423 	.word	0x08004423
 8004394:	08004423 	.word	0x08004423
 8004398:	08004423 	.word	0x08004423
 800439c:	08004423 	.word	0x08004423
 80043a0:	08004423 	.word	0x08004423
 80043a4:	08004423 	.word	0x08004423
 80043a8:	08004423 	.word	0x08004423
 80043ac:	08004423 	.word	0x08004423
 80043b0:	08004423 	.word	0x08004423
 80043b4:	08004423 	.word	0x08004423
 80043b8:	080043d1 	.word	0x080043d1
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	4a79      	ldr	r2, [pc, #484]	; (80045a8 <HAL_GPIO_Init+0x2b4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80043c6:	e02c      	b.n	8004422 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	623b      	str	r3, [r7, #32]
          break;
 80043ce:	e029      	b.n	8004424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	3304      	adds	r3, #4
 80043d6:	623b      	str	r3, [r7, #32]
          break;
 80043d8:	e024      	b.n	8004424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	3308      	adds	r3, #8
 80043e0:	623b      	str	r3, [r7, #32]
          break;
 80043e2:	e01f      	b.n	8004424 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	330c      	adds	r3, #12
 80043ea:	623b      	str	r3, [r7, #32]
          break;
 80043ec:	e01a      	b.n	8004424 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d102      	bne.n	80043fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80043f6:	2304      	movs	r3, #4
 80043f8:	623b      	str	r3, [r7, #32]
          break;
 80043fa:	e013      	b.n	8004424 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004404:	2308      	movs	r3, #8
 8004406:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	611a      	str	r2, [r3, #16]
          break;
 800440e:	e009      	b.n	8004424 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004410:	2308      	movs	r3, #8
 8004412:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	615a      	str	r2, [r3, #20]
          break;
 800441a:	e003      	b.n	8004424 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800441c:	2300      	movs	r3, #0
 800441e:	623b      	str	r3, [r7, #32]
          break;
 8004420:	e000      	b.n	8004424 <HAL_GPIO_Init+0x130>
          break;
 8004422:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	2bff      	cmp	r3, #255	; 0xff
 8004428:	d801      	bhi.n	800442e <HAL_GPIO_Init+0x13a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	e001      	b.n	8004432 <HAL_GPIO_Init+0x13e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3304      	adds	r3, #4
 8004432:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2bff      	cmp	r3, #255	; 0xff
 8004438:	d802      	bhi.n	8004440 <HAL_GPIO_Init+0x14c>
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	e002      	b.n	8004446 <HAL_GPIO_Init+0x152>
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	3b08      	subs	r3, #8
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	210f      	movs	r1, #15
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	401a      	ands	r2, r3
 8004458:	6a39      	ldr	r1, [r7, #32]
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	431a      	orrs	r2, r3
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80b1 	beq.w	80045d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004474:	4b4d      	ldr	r3, [pc, #308]	; (80045ac <HAL_GPIO_Init+0x2b8>)
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <HAL_GPIO_Init+0x2b8>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6193      	str	r3, [r2, #24]
 8004480:	4b4a      	ldr	r3, [pc, #296]	; (80045ac <HAL_GPIO_Init+0x2b8>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800448c:	4a48      	ldr	r2, [pc, #288]	; (80045b0 <HAL_GPIO_Init+0x2bc>)
 800448e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	3302      	adds	r3, #2
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	220f      	movs	r2, #15
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4013      	ands	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a40      	ldr	r2, [pc, #256]	; (80045b4 <HAL_GPIO_Init+0x2c0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <HAL_GPIO_Init+0x1ec>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3f      	ldr	r2, [pc, #252]	; (80045b8 <HAL_GPIO_Init+0x2c4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00d      	beq.n	80044dc <HAL_GPIO_Init+0x1e8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3e      	ldr	r2, [pc, #248]	; (80045bc <HAL_GPIO_Init+0x2c8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <HAL_GPIO_Init+0x1e4>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3d      	ldr	r2, [pc, #244]	; (80045c0 <HAL_GPIO_Init+0x2cc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_GPIO_Init+0x1e0>
 80044d0:	2303      	movs	r3, #3
 80044d2:	e006      	b.n	80044e2 <HAL_GPIO_Init+0x1ee>
 80044d4:	2304      	movs	r3, #4
 80044d6:	e004      	b.n	80044e2 <HAL_GPIO_Init+0x1ee>
 80044d8:	2302      	movs	r3, #2
 80044da:	e002      	b.n	80044e2 <HAL_GPIO_Init+0x1ee>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <HAL_GPIO_Init+0x1ee>
 80044e0:	2300      	movs	r3, #0
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	f002 0203 	and.w	r2, r2, #3
 80044e8:	0092      	lsls	r2, r2, #2
 80044ea:	4093      	lsls	r3, r2
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80044f2:	492f      	ldr	r1, [pc, #188]	; (80045b0 <HAL_GPIO_Init+0x2bc>)
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	089b      	lsrs	r3, r3, #2
 80044f8:	3302      	adds	r3, #2
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d006      	beq.n	800451a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800450c:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	492c      	ldr	r1, [pc, #176]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	4313      	orrs	r3, r2
 8004516:	608b      	str	r3, [r1, #8]
 8004518:	e006      	b.n	8004528 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800451a:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 800451c:	689a      	ldr	r2, [r3, #8]
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	43db      	mvns	r3, r3
 8004522:	4928      	ldr	r1, [pc, #160]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004524:	4013      	ands	r3, r2
 8004526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d006      	beq.n	8004542 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004534:	4b23      	ldr	r3, [pc, #140]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4922      	ldr	r1, [pc, #136]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	60cb      	str	r3, [r1, #12]
 8004540:	e006      	b.n	8004550 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	43db      	mvns	r3, r3
 800454a:	491e      	ldr	r1, [pc, #120]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 800454c:	4013      	ands	r3, r2
 800454e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d006      	beq.n	800456a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4918      	ldr	r1, [pc, #96]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	4313      	orrs	r3, r2
 8004566:	604b      	str	r3, [r1, #4]
 8004568:	e006      	b.n	8004578 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800456a:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	43db      	mvns	r3, r3
 8004572:	4914      	ldr	r1, [pc, #80]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004574:	4013      	ands	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d021      	beq.n	80045c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	490e      	ldr	r1, [pc, #56]	; (80045c4 <HAL_GPIO_Init+0x2d0>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4313      	orrs	r3, r2
 800458e:	600b      	str	r3, [r1, #0]
 8004590:	e021      	b.n	80045d6 <HAL_GPIO_Init+0x2e2>
 8004592:	bf00      	nop
 8004594:	10320000 	.word	0x10320000
 8004598:	10310000 	.word	0x10310000
 800459c:	10220000 	.word	0x10220000
 80045a0:	10210000 	.word	0x10210000
 80045a4:	10120000 	.word	0x10120000
 80045a8:	10110000 	.word	0x10110000
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40010000 	.word	0x40010000
 80045b4:	40010800 	.word	0x40010800
 80045b8:	40010c00 	.word	0x40010c00
 80045bc:	40011000 	.word	0x40011000
 80045c0:	40011400 	.word	0x40011400
 80045c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <HAL_GPIO_Init+0x304>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	4909      	ldr	r1, [pc, #36]	; (80045f8 <HAL_GPIO_Init+0x304>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	3301      	adds	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	fa22 f303 	lsr.w	r3, r2, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f47f ae8e 	bne.w	8004308 <HAL_GPIO_Init+0x14>
  }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	372c      	adds	r7, #44	; 0x2c
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40010400 	.word	0x40010400

080045fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	807b      	strh	r3, [r7, #2]
 8004608:	4613      	mov	r3, r2
 800460a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800460c:	787b      	ldrb	r3, [r7, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004612:	887a      	ldrh	r2, [r7, #2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004618:	e003      	b.n	8004622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800461a:	887b      	ldrh	r3, [r7, #2]
 800461c:	041a      	lsls	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	611a      	str	r2, [r3, #16]
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e12b      	b.n	8004896 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fc fec6 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	; 0x24
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800467e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800468e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004690:	f001 fbfc 	bl	8005e8c <HAL_RCC_GetPCLK1Freq>
 8004694:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	4a81      	ldr	r2, [pc, #516]	; (80048a0 <HAL_I2C_Init+0x274>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d807      	bhi.n	80046b0 <HAL_I2C_Init+0x84>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a80      	ldr	r2, [pc, #512]	; (80048a4 <HAL_I2C_Init+0x278>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	bf94      	ite	ls
 80046a8:	2301      	movls	r3, #1
 80046aa:	2300      	movhi	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e006      	b.n	80046be <HAL_I2C_Init+0x92>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a7d      	ldr	r2, [pc, #500]	; (80048a8 <HAL_I2C_Init+0x27c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	bf94      	ite	ls
 80046b8:	2301      	movls	r3, #1
 80046ba:	2300      	movhi	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0e7      	b.n	8004896 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a78      	ldr	r2, [pc, #480]	; (80048ac <HAL_I2C_Init+0x280>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	0c9b      	lsrs	r3, r3, #18
 80046d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a6a      	ldr	r2, [pc, #424]	; (80048a0 <HAL_I2C_Init+0x274>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d802      	bhi.n	8004700 <HAL_I2C_Init+0xd4>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	3301      	adds	r3, #1
 80046fe:	e009      	b.n	8004714 <HAL_I2C_Init+0xe8>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	4a69      	ldr	r2, [pc, #420]	; (80048b0 <HAL_I2C_Init+0x284>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	3301      	adds	r3, #1
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	430b      	orrs	r3, r1
 800471a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004726:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	495c      	ldr	r1, [pc, #368]	; (80048a0 <HAL_I2C_Init+0x274>)
 8004730:	428b      	cmp	r3, r1
 8004732:	d819      	bhi.n	8004768 <HAL_I2C_Init+0x13c>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e59      	subs	r1, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004742:	1c59      	adds	r1, r3, #1
 8004744:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004748:	400b      	ands	r3, r1
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_I2C_Init+0x138>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1e59      	subs	r1, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	fbb1 f3f3 	udiv	r3, r1, r3
 800475c:	3301      	adds	r3, #1
 800475e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004762:	e051      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004764:	2304      	movs	r3, #4
 8004766:	e04f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d111      	bne.n	8004794 <HAL_I2C_Init+0x168>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1e58      	subs	r0, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	440b      	add	r3, r1
 800477e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e012      	b.n	80047ba <HAL_I2C_Init+0x18e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e58      	subs	r0, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	0099      	lsls	r1, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <HAL_I2C_Init+0x196>
 80047be:	2301      	movs	r3, #1
 80047c0:	e022      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10e      	bne.n	80047e8 <HAL_I2C_Init+0x1bc>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1e58      	subs	r0, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6859      	ldr	r1, [r3, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	440b      	add	r3, r1
 80047d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80047dc:	3301      	adds	r3, #1
 80047de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047e6:	e00f      	b.n	8004808 <HAL_I2C_Init+0x1dc>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1e58      	subs	r0, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	0099      	lsls	r1, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80047fe:	3301      	adds	r3, #1
 8004800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004804:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	6809      	ldr	r1, [r1, #0]
 800480c:	4313      	orrs	r3, r2
 800480e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004836:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6911      	ldr	r1, [r2, #16]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68d2      	ldr	r2, [r2, #12]
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	430b      	orrs	r3, r1
 800484a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	000186a0 	.word	0x000186a0
 80048a4:	001e847f 	.word	0x001e847f
 80048a8:	003d08ff 	.word	0x003d08ff
 80048ac:	431bde83 	.word	0x431bde83
 80048b0:	10624dd3 	.word	0x10624dd3

080048b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	4608      	mov	r0, r1
 80048be:	4611      	mov	r1, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	4603      	mov	r3, r0
 80048c4:	817b      	strh	r3, [r7, #10]
 80048c6:	460b      	mov	r3, r1
 80048c8:	813b      	strh	r3, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ce:	f7ff f933 	bl	8003b38 <HAL_GetTick>
 80048d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b20      	cmp	r3, #32
 80048de:	f040 80d9 	bne.w	8004a94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2319      	movs	r3, #25
 80048e8:	2201      	movs	r2, #1
 80048ea:	496d      	ldr	r1, [pc, #436]	; (8004aa0 <HAL_I2C_Mem_Write+0x1ec>)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 fccd 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0cc      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_I2C_Mem_Write+0x56>
 8004906:	2302      	movs	r3, #2
 8004908:	e0c5      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d007      	beq.n	8004930 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2221      	movs	r2, #33	; 0x21
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a3a      	ldr	r2, [r7, #32]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a4d      	ldr	r2, [pc, #308]	; (8004aa4 <HAL_I2C_Mem_Write+0x1f0>)
 8004970:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004972:	88f8      	ldrh	r0, [r7, #6]
 8004974:	893a      	ldrh	r2, [r7, #8]
 8004976:	8979      	ldrh	r1, [r7, #10]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	9301      	str	r3, [sp, #4]
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	4603      	mov	r3, r0
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fb04 	bl	8004f90 <I2C_RequestMemoryWrite>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d052      	beq.n	8004a34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e081      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fd92 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00d      	beq.n	80049be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d107      	bne.n	80049ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e06b      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	781a      	ldrb	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	3b01      	subs	r3, #1
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d11b      	bne.n	8004a34 <HAL_I2C_Mem_Write+0x180>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d017      	beq.n	8004a34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	781a      	ldrb	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1aa      	bne.n	8004992 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fd85 	bl	8005550 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d107      	bne.n	8004a64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e016      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a90:	2300      	movs	r3, #0
 8004a92:	e000      	b.n	8004a96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	00100002 	.word	0x00100002
 8004aa4:	ffff0000 	.word	0xffff0000

08004aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	817b      	strh	r3, [r7, #10]
 8004aba:	460b      	mov	r3, r1
 8004abc:	813b      	strh	r3, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ac6:	f7ff f837 	bl	8003b38 <HAL_GetTick>
 8004aca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	f040 8250 	bne.w	8004f7a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2319      	movs	r3, #25
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4982      	ldr	r1, [pc, #520]	; (8004cec <HAL_I2C_Mem_Read+0x244>)
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f000 fbd1 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
 8004af2:	e243      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d101      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x5a>
 8004afe:	2302      	movs	r3, #2
 8004b00:	e23c      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d007      	beq.n	8004b28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2222      	movs	r2, #34	; 0x22
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2240      	movs	r2, #64	; 0x40
 8004b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a62      	ldr	r2, [pc, #392]	; (8004cf0 <HAL_I2C_Mem_Read+0x248>)
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b6a:	88f8      	ldrh	r0, [r7, #6]
 8004b6c:	893a      	ldrh	r2, [r7, #8]
 8004b6e:	8979      	ldrh	r1, [r7, #10]
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4603      	mov	r3, r0
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fa9e 	bl	80050bc <I2C_RequestMemoryRead>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e1f8      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d113      	bne.n	8004bba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e1cc      	b.n	8004f54 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d11e      	bne.n	8004c00 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd2:	b672      	cpsid	i
}
 8004bd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	61bb      	str	r3, [r7, #24]
 8004bea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004bfc:	b662      	cpsie	i
}
 8004bfe:	e035      	b.n	8004c6c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d11e      	bne.n	8004c46 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c18:	b672      	cpsid	i
}
 8004c1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004c42:	b662      	cpsie	i
}
 8004c44:	e012      	b.n	8004c6c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c54:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004c6c:	e172      	b.n	8004f54 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	f200 811f 	bhi.w	8004eb6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d123      	bne.n	8004cc8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fcab 	bl	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e173      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cc6:	e145      	b.n	8004f54 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d152      	bne.n	8004d76 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4906      	ldr	r1, [pc, #24]	; (8004cf4 <HAL_I2C_Mem_Read+0x24c>)
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 fad6 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d008      	beq.n	8004cf8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e148      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
 8004cea:	bf00      	nop
 8004cec:	00100002 	.word	0x00100002
 8004cf0:	ffff0000 	.word	0xffff0000
 8004cf4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf8:	b672      	cpsid	i
}
 8004cfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d3e:	b662      	cpsie	i
}
 8004d40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d74:	e0ee      	b.n	8004f54 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4981      	ldr	r1, [pc, #516]	; (8004f84 <HAL_I2C_Mem_Read+0x4dc>)
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f000 fa83 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0f5      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004da0:	b672      	cpsid	i
}
 8004da2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004dd6:	4b6c      	ldr	r3, [pc, #432]	; (8004f88 <HAL_I2C_Mem_Read+0x4e0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	08db      	lsrs	r3, r3, #3
 8004ddc:	4a6b      	ldr	r2, [pc, #428]	; (8004f8c <HAL_I2C_Mem_Read+0x4e4>)
 8004dde:	fba2 2303 	umull	r2, r3, r2, r3
 8004de2:	0a1a      	lsrs	r2, r3, #8
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	00da      	lsls	r2, r3, #3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d118      	bne.n	8004e2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004e1e:	b662      	cpsie	i
}
 8004e20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0a6      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d1d9      	bne.n	8004df0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	b2d2      	uxtb	r2, r2
 8004e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004e7e:	b662      	cpsie	i
}
 8004e80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004eb4:	e04e      	b.n	8004f54 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 fb90 	bl	80055e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e058      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d124      	bne.n	8004f54 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d107      	bne.n	8004f22 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f20:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f47f ae88 	bne.w	8004c6e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3728      	adds	r7, #40	; 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	00010004 	.word	0x00010004
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	14f8b589 	.word	0x14f8b589

08004f90 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b088      	sub	sp, #32
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	817b      	strh	r3, [r7, #10]
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	813b      	strh	r3, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f000 f960 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00d      	beq.n	8004fee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe0:	d103      	bne.n	8004fea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e05f      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fee:	897b      	ldrh	r3, [r7, #10]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ffc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005000:	6a3a      	ldr	r2, [r7, #32]
 8005002:	492d      	ldr	r1, [pc, #180]	; (80050b8 <I2C_RequestMemoryWrite+0x128>)
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f9bb 	bl	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d001      	beq.n	8005014 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e04c      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	6a39      	ldr	r1, [r7, #32]
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa46 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b04      	cmp	r3, #4
 8005040:	d107      	bne.n	8005052 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005050:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e02b      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d105      	bne.n	8005068 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800505c:	893b      	ldrh	r3, [r7, #8]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]
 8005066:	e021      	b.n	80050ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005068:	893b      	ldrh	r3, [r7, #8]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	b29b      	uxth	r3, r3
 800506e:	b2da      	uxtb	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005078:	6a39      	ldr	r1, [r7, #32]
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 fa20 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00d      	beq.n	80050a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	2b04      	cmp	r3, #4
 800508c:	d107      	bne.n	800509e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e005      	b.n	80050ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050a2:	893b      	ldrh	r3, [r7, #8]
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	00010002 	.word	0x00010002

080050bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af02      	add	r7, sp, #8
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	4608      	mov	r0, r1
 80050c6:	4611      	mov	r1, r2
 80050c8:	461a      	mov	r2, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	817b      	strh	r3, [r7, #10]
 80050ce:	460b      	mov	r3, r1
 80050d0:	813b      	strh	r3, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f8c2 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00d      	beq.n	800512a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	d103      	bne.n	8005126 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0aa      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800512a:	897b      	ldrh	r3, [r7, #10]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	6a3a      	ldr	r2, [r7, #32]
 800513e:	4952      	ldr	r1, [pc, #328]	; (8005288 <I2C_RequestMemoryRead+0x1cc>)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f91d 	bl	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e097      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	617b      	str	r3, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	6a39      	ldr	r1, [r7, #32]
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f9a8 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00d      	beq.n	8005192 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	2b04      	cmp	r3, #4
 800517c:	d107      	bne.n	800518e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e076      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d105      	bne.n	80051a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005198:	893b      	ldrh	r3, [r7, #8]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	611a      	str	r2, [r3, #16]
 80051a2:	e021      	b.n	80051e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80051a4:	893b      	ldrh	r3, [r7, #8]
 80051a6:	0a1b      	lsrs	r3, r3, #8
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b4:	6a39      	ldr	r1, [r7, #32]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f982 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00d      	beq.n	80051de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d107      	bne.n	80051da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e050      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051de:	893b      	ldrh	r3, [r7, #8]
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ea:	6a39      	ldr	r1, [r7, #32]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f000 f967 	bl	80054c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00d      	beq.n	8005214 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	d107      	bne.n	8005210 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800520e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e035      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005222:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	2200      	movs	r2, #0
 800522c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f82b 	bl	800528c <I2C_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800524a:	d103      	bne.n	8005254 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e013      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005258:	897b      	ldrh	r3, [r7, #10]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	6a3a      	ldr	r2, [r7, #32]
 800526c:	4906      	ldr	r1, [pc, #24]	; (8005288 <I2C_RequestMemoryRead+0x1cc>)
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f886 	bl	8005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	00010002 	.word	0x00010002

0800528c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	603b      	str	r3, [r7, #0]
 8005298:	4613      	mov	r3, r2
 800529a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800529c:	e048      	b.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a4:	d044      	beq.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a6:	f7fe fc47 	bl	8003b38 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d302      	bcc.n	80052bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d139      	bne.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	0c1b      	lsrs	r3, r3, #16
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10d      	bne.n	80052e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	43da      	mvns	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	4013      	ands	r3, r2
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	461a      	mov	r2, r3
 80052e0:	e00c      	b.n	80052fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	43da      	mvns	r2, r3
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4013      	ands	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	461a      	mov	r2, r3
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d116      	bne.n	8005330 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	f043 0220 	orr.w	r2, r3, #32
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e023      	b.n	8005378 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10d      	bne.n	8005356 <I2C_WaitOnFlagUntilTimeout+0xca>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	43da      	mvns	r2, r3
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4013      	ands	r3, r2
 8005346:	b29b      	uxth	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf0c      	ite	eq
 800534c:	2301      	moveq	r3, #1
 800534e:	2300      	movne	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	e00c      	b.n	8005370 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	43da      	mvns	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4013      	ands	r3, r2
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	429a      	cmp	r2, r3
 8005374:	d093      	beq.n	800529e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800538e:	e071      	b.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	695b      	ldr	r3, [r3, #20]
 8005396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539e:	d123      	bne.n	80053e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	f043 0204 	orr.w	r2, r3, #4
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e067      	b.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d041      	beq.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f0:	f7fe fba2 	bl	8003b38 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d302      	bcc.n	8005406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d136      	bne.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	d10c      	bne.n	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	43da      	mvns	r2, r3
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	bf14      	ite	ne
 8005422:	2301      	movne	r3, #1
 8005424:	2300      	moveq	r3, #0
 8005426:	b2db      	uxtb	r3, r3
 8005428:	e00b      	b.n	8005442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	43da      	mvns	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4013      	ands	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	bf14      	ite	ne
 800543c:	2301      	movne	r3, #1
 800543e:	2300      	moveq	r3, #0
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f043 0220 	orr.w	r2, r3, #32
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e021      	b.n	80054b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	0c1b      	lsrs	r3, r3, #16
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b01      	cmp	r3, #1
 800547c:	d10c      	bne.n	8005498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	43da      	mvns	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	bf14      	ite	ne
 8005490:	2301      	movne	r3, #1
 8005492:	2300      	moveq	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	e00b      	b.n	80054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	43da      	mvns	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4013      	ands	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf14      	ite	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	2300      	moveq	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f47f af6d 	bne.w	8005390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054cc:	e034      	b.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f8e3 	bl	800569a <I2C_IsAcknowledgeFailed>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e034      	b.n	8005548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e4:	d028      	beq.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e6:	f7fe fb27 	bl	8003b38 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d302      	bcc.n	80054fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11d      	bne.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d016      	beq.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e007      	b.n	8005548 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d1c3      	bne.n	80054ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800555c:	e034      	b.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 f89b 	bl	800569a <I2C_IsAcknowledgeFailed>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e034      	b.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d028      	beq.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005576:	f7fe fadf 	bl	8003b38 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	68ba      	ldr	r2, [r7, #8]
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d11d      	bne.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b04      	cmp	r3, #4
 8005598:	d016      	beq.n	80055c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f043 0220 	orr.w	r2, r3, #32
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e007      	b.n	80055d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b04      	cmp	r3, #4
 80055d4:	d1c3      	bne.n	800555e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055ec:	e049      	b.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b10      	cmp	r3, #16
 80055fa:	d119      	bne.n	8005630 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0210 	mvn.w	r2, #16
 8005604:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e030      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005630:	f7fe fa82 	bl	8003b38 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	d302      	bcc.n	8005646 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d11d      	bne.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d016      	beq.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d1ae      	bne.n	80055ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b0:	d11b      	bne.n	80056ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e272      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 8087 	beq.w	8005826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005718:	4b92      	ldr	r3, [pc, #584]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b04      	cmp	r3, #4
 8005722:	d00c      	beq.n	800573e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005724:	4b8f      	ldr	r3, [pc, #572]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b08      	cmp	r3, #8
 800572e:	d112      	bne.n	8005756 <HAL_RCC_OscConfig+0x5e>
 8005730:	4b8c      	ldr	r3, [pc, #560]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800573c:	d10b      	bne.n	8005756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800573e:	4b89      	ldr	r3, [pc, #548]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d06c      	beq.n	8005824 <HAL_RCC_OscConfig+0x12c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d168      	bne.n	8005824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e24c      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575e:	d106      	bne.n	800576e <HAL_RCC_OscConfig+0x76>
 8005760:	4b80      	ldr	r3, [pc, #512]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a7f      	ldr	r2, [pc, #508]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	e02e      	b.n	80057cc <HAL_RCC_OscConfig+0xd4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10c      	bne.n	8005790 <HAL_RCC_OscConfig+0x98>
 8005776:	4b7b      	ldr	r3, [pc, #492]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a7a      	ldr	r2, [pc, #488]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800577c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	4b78      	ldr	r3, [pc, #480]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a77      	ldr	r2, [pc, #476]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e01d      	b.n	80057cc <HAL_RCC_OscConfig+0xd4>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005798:	d10c      	bne.n	80057b4 <HAL_RCC_OscConfig+0xbc>
 800579a:	4b72      	ldr	r3, [pc, #456]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a71      	ldr	r2, [pc, #452]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	4b6f      	ldr	r3, [pc, #444]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6e      	ldr	r2, [pc, #440]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	e00b      	b.n	80057cc <HAL_RCC_OscConfig+0xd4>
 80057b4:	4b6b      	ldr	r3, [pc, #428]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a6a      	ldr	r2, [pc, #424]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	4b68      	ldr	r3, [pc, #416]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a67      	ldr	r2, [pc, #412]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d013      	beq.n	80057fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fe f9b0 	bl	8003b38 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057dc:	f7fe f9ac 	bl	8003b38 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b64      	cmp	r3, #100	; 0x64
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e200      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ee:	4b5d      	ldr	r3, [pc, #372]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0f0      	beq.n	80057dc <HAL_RCC_OscConfig+0xe4>
 80057fa:	e014      	b.n	8005826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fe f99c 	bl	8003b38 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005804:	f7fe f998 	bl	8003b38 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b64      	cmp	r3, #100	; 0x64
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1ec      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005816:	4b53      	ldr	r3, [pc, #332]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0x10c>
 8005822:	e000      	b.n	8005826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d063      	beq.n	80058fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005832:	4b4c      	ldr	r3, [pc, #304]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f003 030c 	and.w	r3, r3, #12
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00b      	beq.n	8005856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800583e:	4b49      	ldr	r3, [pc, #292]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b08      	cmp	r3, #8
 8005848:	d11c      	bne.n	8005884 <HAL_RCC_OscConfig+0x18c>
 800584a:	4b46      	ldr	r3, [pc, #280]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d116      	bne.n	8005884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005856:	4b43      	ldr	r3, [pc, #268]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d005      	beq.n	800586e <HAL_RCC_OscConfig+0x176>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e1c0      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800586e:	4b3d      	ldr	r3, [pc, #244]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	4939      	ldr	r1, [pc, #228]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005882:	e03a      	b.n	80058fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d020      	beq.n	80058ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800588c:	4b36      	ldr	r3, [pc, #216]	; (8005968 <HAL_RCC_OscConfig+0x270>)
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005892:	f7fe f951 	bl	8003b38 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800589a:	f7fe f94d 	bl	8003b38 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e1a1      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ac:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0f0      	beq.n	800589a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b8:	4b2a      	ldr	r3, [pc, #168]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	4927      	ldr	r1, [pc, #156]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]
 80058cc:	e015      	b.n	80058fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ce:	4b26      	ldr	r3, [pc, #152]	; (8005968 <HAL_RCC_OscConfig+0x270>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d4:	f7fe f930 	bl	8003b38 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058da:	e008      	b.n	80058ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058dc:	f7fe f92c 	bl	8003b38 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d901      	bls.n	80058ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e180      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ee:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03a      	beq.n	800597c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d019      	beq.n	8005942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800590e:	4b17      	ldr	r3, [pc, #92]	; (800596c <HAL_RCC_OscConfig+0x274>)
 8005910:	2201      	movs	r2, #1
 8005912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005914:	f7fe f910 	bl	8003b38 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800591c:	f7fe f90c 	bl	8003b38 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e160      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800592e:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800593a:	2001      	movs	r0, #1
 800593c:	f000 face 	bl	8005edc <RCC_Delay>
 8005940:	e01c      	b.n	800597c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <HAL_RCC_OscConfig+0x274>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005948:	f7fe f8f6 	bl	8003b38 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800594e:	e00f      	b.n	8005970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005950:	f7fe f8f2 	bl	8003b38 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b02      	cmp	r3, #2
 800595c:	d908      	bls.n	8005970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e146      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000
 8005968:	42420000 	.word	0x42420000
 800596c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	4b92      	ldr	r3, [pc, #584]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e9      	bne.n	8005950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80a6 	beq.w	8005ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598e:	4b8b      	ldr	r3, [pc, #556]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10d      	bne.n	80059b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599a:	4b88      	ldr	r3, [pc, #544]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	4a87      	ldr	r2, [pc, #540]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 80059a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a4:	61d3      	str	r3, [r2, #28]
 80059a6:	4b85      	ldr	r3, [pc, #532]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ae:	60bb      	str	r3, [r7, #8]
 80059b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b2:	2301      	movs	r3, #1
 80059b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059b6:	4b82      	ldr	r3, [pc, #520]	; (8005bc0 <HAL_RCC_OscConfig+0x4c8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d118      	bne.n	80059f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c2:	4b7f      	ldr	r3, [pc, #508]	; (8005bc0 <HAL_RCC_OscConfig+0x4c8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a7e      	ldr	r2, [pc, #504]	; (8005bc0 <HAL_RCC_OscConfig+0x4c8>)
 80059c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ce:	f7fe f8b3 	bl	8003b38 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d6:	f7fe f8af 	bl	8003b38 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b64      	cmp	r3, #100	; 0x64
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e103      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e8:	4b75      	ldr	r3, [pc, #468]	; (8005bc0 <HAL_RCC_OscConfig+0x4c8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d106      	bne.n	8005a0a <HAL_RCC_OscConfig+0x312>
 80059fc:	4b6f      	ldr	r3, [pc, #444]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	4a6e      	ldr	r2, [pc, #440]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6213      	str	r3, [r2, #32]
 8005a08:	e02d      	b.n	8005a66 <HAL_RCC_OscConfig+0x36e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <HAL_RCC_OscConfig+0x334>
 8005a12:	4b6a      	ldr	r3, [pc, #424]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	4a69      	ldr	r2, [pc, #420]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a18:	f023 0301 	bic.w	r3, r3, #1
 8005a1c:	6213      	str	r3, [r2, #32]
 8005a1e:	4b67      	ldr	r3, [pc, #412]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	4a66      	ldr	r2, [pc, #408]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a24:	f023 0304 	bic.w	r3, r3, #4
 8005a28:	6213      	str	r3, [r2, #32]
 8005a2a:	e01c      	b.n	8005a66 <HAL_RCC_OscConfig+0x36e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b05      	cmp	r3, #5
 8005a32:	d10c      	bne.n	8005a4e <HAL_RCC_OscConfig+0x356>
 8005a34:	4b61      	ldr	r3, [pc, #388]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a36:	6a1b      	ldr	r3, [r3, #32]
 8005a38:	4a60      	ldr	r2, [pc, #384]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a3a:	f043 0304 	orr.w	r3, r3, #4
 8005a3e:	6213      	str	r3, [r2, #32]
 8005a40:	4b5e      	ldr	r3, [pc, #376]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	4a5d      	ldr	r2, [pc, #372]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6213      	str	r3, [r2, #32]
 8005a4c:	e00b      	b.n	8005a66 <HAL_RCC_OscConfig+0x36e>
 8005a4e:	4b5b      	ldr	r3, [pc, #364]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	4a5a      	ldr	r2, [pc, #360]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a54:	f023 0301 	bic.w	r3, r3, #1
 8005a58:	6213      	str	r3, [r2, #32]
 8005a5a:	4b58      	ldr	r3, [pc, #352]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	4a57      	ldr	r2, [pc, #348]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a60:	f023 0304 	bic.w	r3, r3, #4
 8005a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d015      	beq.n	8005a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6e:	f7fe f863 	bl	8003b38 <HAL_GetTick>
 8005a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a74:	e00a      	b.n	8005a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fe f85f 	bl	8003b38 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0b1      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a8c:	4b4b      	ldr	r3, [pc, #300]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0ee      	beq.n	8005a76 <HAL_RCC_OscConfig+0x37e>
 8005a98:	e014      	b.n	8005ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9a:	f7fe f84d 	bl	8003b38 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aa0:	e00a      	b.n	8005ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aa2:	f7fe f849 	bl	8003b38 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e09b      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab8:	4b40      	ldr	r3, [pc, #256]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ee      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d105      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aca:	4b3c      	ldr	r3, [pc, #240]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	4a3b      	ldr	r2, [pc, #236]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 8087 	beq.w	8005bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ae0:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 030c 	and.w	r3, r3, #12
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d061      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d146      	bne.n	8005b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af4:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <HAL_RCC_OscConfig+0x4cc>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afa:	f7fe f81d 	bl	8003b38 <HAL_GetTick>
 8005afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b00:	e008      	b.n	8005b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b02:	f7fe f819 	bl	8003b38 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e06d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b14:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1f0      	bne.n	8005b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b28:	d108      	bne.n	8005b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	4921      	ldr	r1, [pc, #132]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b3c:	4b1f      	ldr	r3, [pc, #124]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a19      	ldr	r1, [r3, #32]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	491b      	ldr	r1, [pc, #108]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b54:	4b1b      	ldr	r3, [pc, #108]	; (8005bc4 <HAL_RCC_OscConfig+0x4cc>)
 8005b56:	2201      	movs	r2, #1
 8005b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5a:	f7fd ffed 	bl	8003b38 <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b62:	f7fd ffe9 	bl	8003b38 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e03d      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0f0      	beq.n	8005b62 <HAL_RCC_OscConfig+0x46a>
 8005b80:	e035      	b.n	8005bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b82:	4b10      	ldr	r3, [pc, #64]	; (8005bc4 <HAL_RCC_OscConfig+0x4cc>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd ffd6 	bl	8003b38 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b90:	f7fd ffd2 	bl	8003b38 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e026      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x498>
 8005bae:	e01e      	b.n	8005bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e019      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40007000 	.word	0x40007000
 8005bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCC_OscConfig+0x500>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d001      	beq.n	8005bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	40021000 	.word	0x40021000

08005bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0d0      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c10:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d910      	bls.n	8005c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b67      	ldr	r3, [pc, #412]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 0207 	bic.w	r2, r3, #7
 8005c26:	4965      	ldr	r1, [pc, #404]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c2e:	4b63      	ldr	r3, [pc, #396]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0b8      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d020      	beq.n	8005c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c58:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	4a58      	ldr	r2, [pc, #352]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d005      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c70:	4b53      	ldr	r3, [pc, #332]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a52      	ldr	r2, [pc, #328]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c7c:	4b50      	ldr	r3, [pc, #320]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	494d      	ldr	r1, [pc, #308]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d040      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d107      	bne.n	8005cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ca2:	4b47      	ldr	r3, [pc, #284]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d115      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e07f      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d107      	bne.n	8005cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cba:	4b41      	ldr	r3, [pc, #260]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e073      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cca:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e06b      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cda:	4b39      	ldr	r3, [pc, #228]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f023 0203 	bic.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4936      	ldr	r1, [pc, #216]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cec:	f7fd ff24 	bl	8003b38 <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7fd ff20 	bl	8003b38 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e053      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	4b2d      	ldr	r3, [pc, #180]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 020c 	and.w	r2, r3, #12
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1eb      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b27      	ldr	r3, [pc, #156]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d210      	bcs.n	8005d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b24      	ldr	r3, [pc, #144]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f023 0207 	bic.w	r2, r3, #7
 8005d32:	4922      	ldr	r1, [pc, #136]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d3a:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e032      	b.n	8005db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d58:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4916      	ldr	r1, [pc, #88]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d009      	beq.n	8005d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d76:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	490e      	ldr	r1, [pc, #56]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d8a:	f000 f821 	bl	8005dd0 <HAL_RCC_GetSysClockFreq>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	490a      	ldr	r1, [pc, #40]	; (8005dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8005d9c:	5ccb      	ldrb	r3, [r1, r3]
 8005d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005da2:	4a09      	ldr	r2, [pc, #36]	; (8005dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8005da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005da6:	4b09      	ldr	r3, [pc, #36]	; (8005dcc <HAL_RCC_ClockConfig+0x1d0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fd fe82 	bl	8003ab4 <HAL_InitTick>

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	40022000 	.word	0x40022000
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	0800b440 	.word	0x0800b440
 8005dc8:	20000000 	.word	0x20000000
 8005dcc:	20000004 	.word	0x20000004

08005dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	2300      	movs	r3, #0
 8005de4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005dea:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d002      	beq.n	8005e00 <HAL_RCC_GetSysClockFreq+0x30>
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCC_GetSysClockFreq+0x36>
 8005dfe:	e027      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e00:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e02:	613b      	str	r3, [r7, #16]
      break;
 8005e04:	e027      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	0c9b      	lsrs	r3, r3, #18
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005e10:	5cd3      	ldrb	r3, [r2, r3]
 8005e12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d010      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005e1e:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	0c5b      	lsrs	r3, r3, #17
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	4a11      	ldr	r2, [pc, #68]	; (8005e70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e2a:	5cd3      	ldrb	r3, [r2, r3]
 8005e2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a0d      	ldr	r2, [pc, #52]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e32:	fb03 f202 	mul.w	r2, r3, r2
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e004      	b.n	8005e4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a0c      	ldr	r2, [pc, #48]	; (8005e74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005e44:	fb02 f303 	mul.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	613b      	str	r3, [r7, #16]
      break;
 8005e4e:	e002      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8005e52:	613b      	str	r3, [r7, #16]
      break;
 8005e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e56:	693b      	ldr	r3, [r7, #16]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40021000 	.word	0x40021000
 8005e68:	007a1200 	.word	0x007a1200
 8005e6c:	0800b458 	.word	0x0800b458
 8005e70:	0800b468 	.word	0x0800b468
 8005e74:	003d0900 	.word	0x003d0900

08005e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e7c:	4b02      	ldr	r3, [pc, #8]	; (8005e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr
 8005e88:	20000000 	.word	0x20000000

08005e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e90:	f7ff fff2 	bl	8005e78 <HAL_RCC_GetHCLKFreq>
 8005e94:	4602      	mov	r2, r0
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	0a1b      	lsrs	r3, r3, #8
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	4903      	ldr	r1, [pc, #12]	; (8005eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ea2:	5ccb      	ldrb	r3, [r1, r3]
 8005ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40021000 	.word	0x40021000
 8005eb0:	0800b450 	.word	0x0800b450

08005eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eb8:	f7ff ffde 	bl	8005e78 <HAL_RCC_GetHCLKFreq>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	4b05      	ldr	r3, [pc, #20]	; (8005ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	0adb      	lsrs	r3, r3, #11
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	4903      	ldr	r1, [pc, #12]	; (8005ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eca:	5ccb      	ldrb	r3, [r1, r3]
 8005ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	0800b450 	.word	0x0800b450

08005edc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <RCC_Delay+0x34>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <RCC_Delay+0x38>)
 8005eea:	fba2 2303 	umull	r2, r3, r2, r3
 8005eee:	0a5b      	lsrs	r3, r3, #9
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	fb02 f303 	mul.w	r3, r2, r3
 8005ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005ef8:	bf00      	nop
  }
  while (Delay --);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1e5a      	subs	r2, r3, #1
 8005efe:	60fa      	str	r2, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1f9      	bne.n	8005ef8 <RCC_Delay+0x1c>
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bc80      	pop	{r7}
 8005f0e:	4770      	bx	lr
 8005f10:	20000000 	.word	0x20000000
 8005f14:	10624dd3 	.word	0x10624dd3

08005f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e041      	b.n	8005fae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fd f944 	bl	80031cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f000 fc18 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d001      	beq.n	8005fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e03a      	b.n	8006046 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_TIM_Base_Start_IT+0x98>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x58>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffa:	d009      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x58>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <HAL_TIM_Base_Start_IT+0x9c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x58>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a13      	ldr	r2, [pc, #76]	; (8006058 <HAL_TIM_Base_Start_IT+0xa0>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d111      	bne.n	8006034 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b06      	cmp	r3, #6
 8006020:	d010      	beq.n	8006044 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006032:	e007      	b.n	8006044 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f042 0201 	orr.w	r2, r2, #1
 8006042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800

0800605c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e041      	b.n	80060f2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f839 	bl	80060fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f000 fb76 	bl	800678c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3708      	adds	r7, #8
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	bc80      	pop	{r7}
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <HAL_TIM_PWM_Start+0x24>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e022      	b.n	8006176 <HAL_TIM_PWM_Start+0x6a>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d109      	bne.n	800614a <HAL_TIM_PWM_Start+0x3e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	bf14      	ite	ne
 8006142:	2301      	movne	r3, #1
 8006144:	2300      	moveq	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	e015      	b.n	8006176 <HAL_TIM_PWM_Start+0x6a>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b08      	cmp	r3, #8
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x58>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e008      	b.n	8006176 <HAL_TIM_PWM_Start+0x6a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	bf14      	ite	ne
 8006170:	2301      	movne	r3, #1
 8006172:	2300      	moveq	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e05e      	b.n	800623c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d104      	bne.n	800618e <HAL_TIM_PWM_Start+0x82>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618c:	e013      	b.n	80061b6 <HAL_TIM_PWM_Start+0xaa>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d104      	bne.n	800619e <HAL_TIM_PWM_Start+0x92>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800619c:	e00b      	b.n	80061b6 <HAL_TIM_PWM_Start+0xaa>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d104      	bne.n	80061ae <HAL_TIM_PWM_Start+0xa2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ac:	e003      	b.n	80061b6 <HAL_TIM_PWM_Start+0xaa>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2202      	movs	r2, #2
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2201      	movs	r2, #1
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fd70 	bl	8006ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1e      	ldr	r2, [pc, #120]	; (8006244 <HAL_TIM_PWM_Start+0x138>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d107      	bne.n	80061de <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a18      	ldr	r2, [pc, #96]	; (8006244 <HAL_TIM_PWM_Start+0x138>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00e      	beq.n	8006206 <HAL_TIM_PWM_Start+0xfa>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f0:	d009      	beq.n	8006206 <HAL_TIM_PWM_Start+0xfa>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a14      	ldr	r2, [pc, #80]	; (8006248 <HAL_TIM_PWM_Start+0x13c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIM_PWM_Start+0xfa>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a12      	ldr	r2, [pc, #72]	; (800624c <HAL_TIM_PWM_Start+0x140>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d111      	bne.n	800622a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b06      	cmp	r3, #6
 8006216:	d010      	beq.n	800623a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	e007      	b.n	800623a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f042 0201 	orr.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800

08006250 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d020      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d01b      	beq.n	80062b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0202 	mvn.w	r2, #2
 8006284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa5a 	bl	8006754 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa4d 	bl	8006742 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa5c 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d020      	beq.n	8006300 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0204 	mvn.w	r2, #4
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2202      	movs	r2, #2
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa34 	bl	8006754 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa27 	bl	8006742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fa36 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d020      	beq.n	800634c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01b      	beq.n	800634c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0208 	mvn.w	r2, #8
 800631c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2204      	movs	r2, #4
 8006322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa0e 	bl	8006754 <HAL_TIM_IC_CaptureCallback>
 8006338:	e005      	b.n	8006346 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa01 	bl	8006742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 fa10 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b00      	cmp	r3, #0
 8006354:	d020      	beq.n	8006398 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f003 0310 	and.w	r3, r3, #16
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01b      	beq.n	8006398 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0210 	mvn.w	r2, #16
 8006368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2208      	movs	r2, #8
 800636e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9e8 	bl	8006754 <HAL_TIM_IC_CaptureCallback>
 8006384:	e005      	b.n	8006392 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9db 	bl	8006742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 f9ea 	bl	8006766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	f003 0301 	and.w	r3, r3, #1
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f003 0301 	and.w	r3, r3, #1
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d007      	beq.n	80063bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f06f 0201 	mvn.w	r2, #1
 80063b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fb f8fc 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00c      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d007      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fced 	bl	8006dba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f9ba 	bl	8006778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0220 	mvn.w	r2, #32
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fcc0 	bl	8006da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800644a:	2302      	movs	r3, #2
 800644c:	e0ae      	b.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b0c      	cmp	r3, #12
 800645a:	f200 809f 	bhi.w	800659c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800645e:	a201      	add	r2, pc, #4	; (adr r2, 8006464 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006464:	08006499 	.word	0x08006499
 8006468:	0800659d 	.word	0x0800659d
 800646c:	0800659d 	.word	0x0800659d
 8006470:	0800659d 	.word	0x0800659d
 8006474:	080064d9 	.word	0x080064d9
 8006478:	0800659d 	.word	0x0800659d
 800647c:	0800659d 	.word	0x0800659d
 8006480:	0800659d 	.word	0x0800659d
 8006484:	0800651b 	.word	0x0800651b
 8006488:	0800659d 	.word	0x0800659d
 800648c:	0800659d 	.word	0x0800659d
 8006490:	0800659d 	.word	0x0800659d
 8006494:	0800655b 	.word	0x0800655b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f9e2 	bl	8006868 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0208 	orr.w	r2, r2, #8
 80064b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0204 	bic.w	r2, r2, #4
 80064c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	619a      	str	r2, [r3, #24]
      break;
 80064d6:	e064      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fa28 	bl	8006934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6999      	ldr	r1, [r3, #24]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	021a      	lsls	r2, r3, #8
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	619a      	str	r2, [r3, #24]
      break;
 8006518:	e043      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fa71 	bl	8006a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0208 	orr.w	r2, r2, #8
 8006534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0204 	bic.w	r2, r2, #4
 8006544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69d9      	ldr	r1, [r3, #28]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	61da      	str	r2, [r3, #28]
      break;
 8006558:	e023      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fabb 	bl	8006adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	69da      	ldr	r2, [r3, #28]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	69d9      	ldr	r1, [r3, #28]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	021a      	lsls	r2, r3, #8
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	61da      	str	r2, [r3, #28]
      break;
 800659a:	e002      	b.n	80065a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	75fb      	strb	r3, [r7, #23]
      break;
 80065a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_TIM_ConfigClockSource+0x1c>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e0b4      	b.n	800673a <HAL_TIM_ConfigClockSource+0x186>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006608:	d03e      	beq.n	8006688 <HAL_TIM_ConfigClockSource+0xd4>
 800660a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800660e:	f200 8087 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006616:	f000 8086 	beq.w	8006726 <HAL_TIM_ConfigClockSource+0x172>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661e:	d87f      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b70      	cmp	r3, #112	; 0x70
 8006622:	d01a      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xa6>
 8006624:	2b70      	cmp	r3, #112	; 0x70
 8006626:	d87b      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006628:	2b60      	cmp	r3, #96	; 0x60
 800662a:	d050      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x11a>
 800662c:	2b60      	cmp	r3, #96	; 0x60
 800662e:	d877      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b50      	cmp	r3, #80	; 0x50
 8006632:	d03c      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0xfa>
 8006634:	2b50      	cmp	r3, #80	; 0x50
 8006636:	d873      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d058      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x13a>
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d86f      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006640:	2b30      	cmp	r3, #48	; 0x30
 8006642:	d064      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 8006644:	2b30      	cmp	r3, #48	; 0x30
 8006646:	d86b      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006648:	2b20      	cmp	r3, #32
 800664a:	d060      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d867      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d05c      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 8006654:	2b10      	cmp	r3, #16
 8006656:	d05a      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x15a>
 8006658:	e062      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800666a:	f000 fafc 	bl	8006c66 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800667c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	609a      	str	r2, [r3, #8]
      break;
 8006686:	e04f      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006698:	f000 fae5 	bl	8006c66 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066aa:	609a      	str	r2, [r3, #8]
      break;
 80066ac:	e03c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 fa5c 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2150      	movs	r1, #80	; 0x50
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fab3 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 80066cc:	e02c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 fa7a 	bl	8006bd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2160      	movs	r1, #96	; 0x60
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 faa3 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 80066ec:	e01c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 fa3c 	bl	8006b78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2140      	movs	r1, #64	; 0x40
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fa93 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 800670c:	e00c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f000 fa8a 	bl	8006c32 <TIM_ITRx_SetConfig>
      break;
 800671e:	e003      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
      break;
 8006724:	e000      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006742:	b480      	push	{r7}
 8006744:	b083      	sub	sp, #12
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	bc80      	pop	{r7}
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	bc80      	pop	{r7}
 8006764:	4770      	bx	lr

08006766 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006766:	b480      	push	{r7}
 8006768:	b083      	sub	sp, #12
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
	...

0800678c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a2f      	ldr	r2, [pc, #188]	; (800685c <TIM_Base_SetConfig+0xd0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00b      	beq.n	80067bc <TIM_Base_SetConfig+0x30>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067aa:	d007      	beq.n	80067bc <TIM_Base_SetConfig+0x30>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a2c      	ldr	r2, [pc, #176]	; (8006860 <TIM_Base_SetConfig+0xd4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_Base_SetConfig+0x30>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a2b      	ldr	r2, [pc, #172]	; (8006864 <TIM_Base_SetConfig+0xd8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d108      	bne.n	80067ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a22      	ldr	r2, [pc, #136]	; (800685c <TIM_Base_SetConfig+0xd0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00b      	beq.n	80067ee <TIM_Base_SetConfig+0x62>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067dc:	d007      	beq.n	80067ee <TIM_Base_SetConfig+0x62>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <TIM_Base_SetConfig+0xd4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d003      	beq.n	80067ee <TIM_Base_SetConfig+0x62>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <TIM_Base_SetConfig+0xd8>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d108      	bne.n	8006800 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a0d      	ldr	r2, [pc, #52]	; (800685c <TIM_Base_SetConfig+0xd0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d103      	bne.n	8006834 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	2b00      	cmp	r3, #0
 8006844:	d005      	beq.n	8006852 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	611a      	str	r2, [r3, #16]
  }
}
 8006852:	bf00      	nop
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	bc80      	pop	{r7}
 800685a:	4770      	bx	lr
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40000400 	.word	0x40000400
 8006864:	40000800 	.word	0x40000800

08006868 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f023 0201 	bic.w	r2, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0303 	bic.w	r3, r3, #3
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f023 0302 	bic.w	r3, r3, #2
 80068b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <TIM_OC1_SetConfig+0xc8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d10c      	bne.n	80068de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0308 	bic.w	r3, r3, #8
 80068ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f023 0304 	bic.w	r3, r3, #4
 80068dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a13      	ldr	r2, [pc, #76]	; (8006930 <TIM_OC1_SetConfig+0xc8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d111      	bne.n	800690a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4313      	orrs	r3, r2
 8006908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	621a      	str	r2, [r3, #32]
}
 8006924:	bf00      	nop
 8006926:	371c      	adds	r7, #28
 8006928:	46bd      	mov	sp, r7
 800692a:	bc80      	pop	{r7}
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00

08006934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f023 0210 	bic.w	r2, r3, #16
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800696a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f023 0320 	bic.w	r3, r3, #32
 800697e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	4313      	orrs	r3, r2
 800698a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1d      	ldr	r2, [pc, #116]	; (8006a04 <TIM_OC2_SetConfig+0xd0>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d10d      	bne.n	80069b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800699a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a14      	ldr	r2, [pc, #80]	; (8006a04 <TIM_OC2_SetConfig+0xd0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d113      	bne.n	80069e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4313      	orrs	r3, r2
 80069de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bc80      	pop	{r7}
 8006a02:	4770      	bx	lr
 8006a04:	40012c00 	.word	0x40012c00

08006a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	021b      	lsls	r3, r3, #8
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a1d      	ldr	r2, [pc, #116]	; (8006ad8 <TIM_OC3_SetConfig+0xd0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10d      	bne.n	8006a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <TIM_OC3_SetConfig+0xd0>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d113      	bne.n	8006ab2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	621a      	str	r2, [r3, #32]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40012c00 	.word	0x40012c00

08006adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	031b      	lsls	r3, r3, #12
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a0f      	ldr	r2, [pc, #60]	; (8006b74 <TIM_OC4_SetConfig+0x98>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d109      	bne.n	8006b50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	019b      	lsls	r3, r3, #6
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	621a      	str	r2, [r3, #32]
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	40012c00 	.word	0x40012c00

08006b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f023 0201 	bic.w	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f023 030a 	bic.w	r3, r3, #10
 8006bb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	621a      	str	r2, [r3, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0210 	bic.w	r2, r3, #16
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	031b      	lsls	r3, r3, #12
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	621a      	str	r2, [r3, #32]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr

08006c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c32:	b480      	push	{r7}
 8006c34:	b085      	sub	sp, #20
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f043 0307 	orr.w	r3, r3, #7
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	609a      	str	r2, [r3, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr

08006c66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b087      	sub	sp, #28
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	60f8      	str	r0, [r7, #12]
 8006c6e:	60b9      	str	r1, [r7, #8]
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	021a      	lsls	r2, r3, #8
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	609a      	str	r2, [r3, #8]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bc80      	pop	{r7}
 8006ca2:	4770      	bx	lr

08006ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1a      	ldr	r2, [r3, #32]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a1a      	ldr	r2, [r3, #32]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bc80      	pop	{r7}
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d101      	bne.n	8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d00:	2302      	movs	r3, #2
 8006d02:	e046      	b.n	8006d92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a16      	ldr	r2, [pc, #88]	; (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d50:	d009      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a12      	ldr	r2, [pc, #72]	; (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a10      	ldr	r2, [pc, #64]	; (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d10c      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800

08006da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bc80      	pop	{r7}
 8006db8:	4770      	bx	lr

08006dba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b083      	sub	sp, #12
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bc80      	pop	{r7}
 8006dca:	4770      	bx	lr

08006dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e042      	b.n	8006e64 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fc fcd2 	bl	800379c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2224      	movs	r2, #36	; 0x24
 8006dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f001 f845 	bl	8007ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68da      	ldr	r2, [r3, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	; 0x28
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d175      	bne.n	8006f78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d002      	beq.n	8006e98 <HAL_UART_Transmit+0x2c>
 8006e92:	88fb      	ldrh	r3, [r7, #6]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e06e      	b.n	8006f7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2221      	movs	r2, #33	; 0x21
 8006ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eaa:	f7fc fe45 	bl	8003b38 <HAL_GetTick>
 8006eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	88fa      	ldrh	r2, [r7, #6]
 8006eb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	88fa      	ldrh	r2, [r7, #6]
 8006eba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec4:	d108      	bne.n	8006ed8 <HAL_UART_Transmit+0x6c>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d104      	bne.n	8006ed8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	e003      	b.n	8006ee0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006edc:	2300      	movs	r3, #0
 8006ede:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ee0:	e02e      	b.n	8006f40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2180      	movs	r1, #128	; 0x80
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fd22 	bl	8007936 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e03a      	b.n	8006f7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	61bb      	str	r3, [r7, #24]
 8006f20:	e007      	b.n	8006f32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	781a      	ldrb	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1cb      	bne.n	8006ee2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2200      	movs	r2, #0
 8006f52:	2140      	movs	r1, #64	; 0x40
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fcee 	bl	8007936 <UART_WaitOnFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e006      	b.n	8006f7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	e000      	b.n	8006f7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f78:	2302      	movs	r3, #2
  }
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08c      	sub	sp, #48	; 0x30
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d156      	bne.n	800704c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d002      	beq.n	8006faa <HAL_UART_Transmit_DMA+0x26>
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e04f      	b.n	800704e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2221      	movs	r2, #33	; 0x21
 8006fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	4a21      	ldr	r2, [pc, #132]	; (8007058 <HAL_UART_Transmit_DMA+0xd4>)
 8006fd4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	4a20      	ldr	r2, [pc, #128]	; (800705c <HAL_UART_Transmit_DMA+0xd8>)
 8006fdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <HAL_UART_Transmit_DMA+0xdc>)
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	2200      	movs	r2, #0
 8006fec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	6819      	ldr	r1, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3304      	adds	r3, #4
 8007002:	461a      	mov	r2, r3
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	f7fc ff2d 	bl	8003e64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007012:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3314      	adds	r3, #20
 800701a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	617b      	str	r3, [r7, #20]
   return(result);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3314      	adds	r3, #20
 8007032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007034:	627a      	str	r2, [r7, #36]	; 0x24
 8007036:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6a39      	ldr	r1, [r7, #32]
 800703a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	61fb      	str	r3, [r7, #28]
   return(result);
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e5      	bne.n	8007014 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	e000      	b.n	800704e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800704c:	2302      	movs	r3, #2
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3730      	adds	r7, #48	; 0x30
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	08007685 	.word	0x08007685
 800705c:	0800771f 	.word	0x0800771f
 8007060:	080078a3 	.word	0x080078a3

08007064 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08c      	sub	sp, #48	; 0x30
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	4613      	mov	r3, r2
 8007070:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b20      	cmp	r3, #32
 800707c:	d146      	bne.n	800710c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007084:	88fb      	ldrh	r3, [r7, #6]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e03f      	b.n	800710e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	461a      	mov	r2, r3
 800709e:	68b9      	ldr	r1, [r7, #8]
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f000 fca1 	bl	80079e8 <UART_Start_Receive_DMA>
 80070a6:	4603      	mov	r3, r0
 80070a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d125      	bne.n	8007100 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070b4:	2300      	movs	r3, #0
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	e853 3f00 	ldrex	r3, [r3]
 80070d8:	617b      	str	r3, [r7, #20]
   return(result);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f043 0310 	orr.w	r3, r3, #16
 80070e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070ea:	627a      	str	r2, [r7, #36]	; 0x24
 80070ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ee:	6a39      	ldr	r1, [r7, #32]
 80070f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f2:	e841 2300 	strex	r3, r2, [r1]
 80070f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e5      	bne.n	80070ca <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80070fe:	e002      	b.n	8007106 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8007106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800710a:	e000      	b.n	800710e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800710c:	2302      	movs	r3, #2
  }
}
 800710e:	4618      	mov	r0, r3
 8007110:	3730      	adds	r7, #48	; 0x30
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b0ba      	sub	sp, #232	; 0xe8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800713e:	2300      	movs	r3, #0
 8007140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007144:	2300      	movs	r3, #0
 8007146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007156:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10f      	bne.n	800717e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d009      	beq.n	800717e <HAL_UART_IRQHandler+0x66>
 800716a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fdd4 	bl	8007d24 <UART_Receive_IT>
      return;
 800717c:	e25b      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800717e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80de 	beq.w	8007344 <HAL_UART_IRQHandler+0x22c>
 8007188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d106      	bne.n	80071a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007198:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 80d1 	beq.w	8007344 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_UART_IRQHandler+0xae>
 80071ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	f043 0201 	orr.w	r2, r3, #1
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00b      	beq.n	80071ea <HAL_UART_IRQHandler+0xd2>
 80071d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d005      	beq.n	80071ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	f043 0202 	orr.w	r2, r3, #2
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00b      	beq.n	800720e <HAL_UART_IRQHandler+0xf6>
 80071f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	f043 0204 	orr.w	r2, r3, #4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800720e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d011      	beq.n	800723e <HAL_UART_IRQHandler+0x126>
 800721a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007226:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b00      	cmp	r3, #0
 8007230:	d005      	beq.n	800723e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007236:	f043 0208 	orr.w	r2, r3, #8
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 81f2 	beq.w	800762c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724c:	f003 0320 	and.w	r3, r3, #32
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_UART_IRQHandler+0x14e>
 8007254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007258:	f003 0320 	and.w	r3, r3, #32
 800725c:	2b00      	cmp	r3, #0
 800725e:	d002      	beq.n	8007266 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fd5f 	bl	8007d24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695b      	ldr	r3, [r3, #20]
 800726c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	bf14      	ite	ne
 8007274:	2301      	movne	r3, #1
 8007276:	2300      	moveq	r3, #0
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <HAL_UART_IRQHandler+0x17a>
 800728a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800728e:	2b00      	cmp	r3, #0
 8007290:	d04f      	beq.n	8007332 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fc69 	bl	8007b6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d041      	beq.n	800732a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3314      	adds	r3, #20
 80072ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3314      	adds	r3, #20
 80072ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1d9      	bne.n	80072a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d013      	beq.n	8007322 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fe:	4a7e      	ldr	r2, [pc, #504]	; (80074f8 <HAL_UART_IRQHandler+0x3e0>)
 8007300:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	4618      	mov	r0, r3
 8007308:	f7fc fe48 	bl	8003f9c <HAL_DMA_Abort_IT>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d016      	beq.n	8007340 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007320:	e00e      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9a5 	bl	8007672 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	e00a      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9a1 	bl	8007672 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007330:	e006      	b.n	8007340 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f99d 	bl	8007672 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800733e:	e175      	b.n	800762c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007340:	bf00      	nop
    return;
 8007342:	e173      	b.n	800762c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	2b01      	cmp	r3, #1
 800734a:	f040 814f 	bne.w	80075ec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800734e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8148 	beq.w	80075ec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800735c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8141 	beq.w	80075ec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800736a:	2300      	movs	r3, #0
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	60bb      	str	r3, [r7, #8]
 800737e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 80b6 	beq.w	80074fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800739c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 8145 	beq.w	8007630 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ae:	429a      	cmp	r2, r3
 80073b0:	f080 813e 	bcs.w	8007630 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	f000 8088 	beq.w	80074d8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	330c      	adds	r3, #12
 80073ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	330c      	adds	r3, #12
 80073f0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073f4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007400:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800740c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1d9      	bne.n	80073c8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3314      	adds	r3, #20
 800741a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007426:	f023 0301 	bic.w	r3, r3, #1
 800742a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3314      	adds	r3, #20
 8007434:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007438:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800743c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007440:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007444:	e841 2300 	strex	r3, r2, [r1]
 8007448:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800744a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e1      	bne.n	8007414 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3314      	adds	r3, #20
 8007456:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800745a:	e853 3f00 	ldrex	r3, [r3]
 800745e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3314      	adds	r3, #20
 8007470:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007474:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800747a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800747c:	e841 2300 	strex	r3, r2, [r1]
 8007480:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1e3      	bne.n	8007450 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	330c      	adds	r3, #12
 800749c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a0:	e853 3f00 	ldrex	r3, [r3]
 80074a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074a8:	f023 0310 	bic.w	r3, r3, #16
 80074ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074ba:	65ba      	str	r2, [r7, #88]	; 0x58
 80074bc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e3      	bne.n	8007496 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fc fd26 	bl	8003f24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2202      	movs	r2, #2
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7fb ff82 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074f4:	e09c      	b.n	8007630 <HAL_UART_IRQHandler+0x518>
 80074f6:	bf00      	nop
 80074f8:	08007c2f 	.word	0x08007c2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007504:	b29b      	uxth	r3, r3
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007510:	b29b      	uxth	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	f000 808e 	beq.w	8007634 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007518:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 8089 	beq.w	8007634 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	330c      	adds	r3, #12
 8007528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007538:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	330c      	adds	r3, #12
 8007542:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007546:	647a      	str	r2, [r7, #68]	; 0x44
 8007548:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800754c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e3      	bne.n	8007522 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3314      	adds	r3, #20
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	623b      	str	r3, [r7, #32]
   return(result);
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3314      	adds	r3, #20
 800757a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800757e:	633a      	str	r2, [r7, #48]	; 0x30
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e3      	bne.n	800755a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2220      	movs	r2, #32
 8007596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	330c      	adds	r3, #12
 80075a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	330c      	adds	r3, #12
 80075c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075c4:	61fa      	str	r2, [r7, #28]
 80075c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	69b9      	ldr	r1, [r7, #24]
 80075ca:	69fa      	ldr	r2, [r7, #28]
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	617b      	str	r3, [r7, #20]
   return(result);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e3      	bne.n	80075a0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7fb ff07 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ea:	e023      	b.n	8007634 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d009      	beq.n	800760c <HAL_UART_IRQHandler+0x4f4>
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fb26 	bl	8007c56 <UART_Transmit_IT>
    return;
 800760a:	e014      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800760c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <HAL_UART_IRQHandler+0x51e>
 8007618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800761c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007620:	2b00      	cmp	r3, #0
 8007622:	d008      	beq.n	8007636 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb65 	bl	8007cf4 <UART_EndTransmit_IT>
    return;
 800762a:	e004      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
    return;
 800762c:	bf00      	nop
 800762e:	e002      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
      return;
 8007630:	bf00      	nop
 8007632:	e000      	b.n	8007636 <HAL_UART_IRQHandler+0x51e>
      return;
 8007634:	bf00      	nop
  }
}
 8007636:	37e8      	adds	r7, #232	; 0xe8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	bc80      	pop	{r7}
 800764c:	4770      	bx	lr

0800764e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	bc80      	pop	{r7}
 800765e:	4770      	bx	lr

08007660 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr

08007672 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	bc80      	pop	{r7}
 8007682:	4770      	bx	lr

08007684 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b090      	sub	sp, #64	; 0x40
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	2b00      	cmp	r3, #0
 800769e:	d137      	bne.n	8007710 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a2:	2200      	movs	r2, #0
 80076a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3314      	adds	r3, #20
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	623b      	str	r3, [r7, #32]
   return(result);
 80076b6:	6a3b      	ldr	r3, [r7, #32]
 80076b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80076be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3314      	adds	r3, #20
 80076c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076c6:	633a      	str	r2, [r7, #48]	; 0x30
 80076c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e5      	bne.n	80076a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	330c      	adds	r3, #12
 80076e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	e853 3f00 	ldrex	r3, [r3]
 80076e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
 80076f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	330c      	adds	r3, #12
 80076f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076fa:	61fa      	str	r2, [r7, #28]
 80076fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fe:	69b9      	ldr	r1, [r7, #24]
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	e841 2300 	strex	r3, r2, [r1]
 8007706:	617b      	str	r3, [r7, #20]
   return(result);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1e5      	bne.n	80076da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800770e:	e002      	b.n	8007716 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007710:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007712:	f7fb fe8d 	bl	8003430 <HAL_UART_TxCpltCallback>
}
 8007716:	bf00      	nop
 8007718:	3740      	adds	r7, #64	; 0x40
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff ff85 	bl	800763c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007732:	bf00      	nop
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b09c      	sub	sp, #112	; 0x70
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d172      	bne.n	800783c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007758:	2200      	movs	r2, #0
 800775a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800775c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330c      	adds	r3, #12
 8007762:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800776c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800776e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007772:	66bb      	str	r3, [r7, #104]	; 0x68
 8007774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	330c      	adds	r3, #12
 800777a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800777c:	65ba      	str	r2, [r7, #88]	; 0x58
 800777e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007782:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800778a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e5      	bne.n	800775c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3314      	adds	r3, #20
 8007796:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779a:	e853 3f00 	ldrex	r3, [r3]
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	667b      	str	r3, [r7, #100]	; 0x64
 80077a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3314      	adds	r3, #20
 80077ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80077b0:	647a      	str	r2, [r7, #68]	; 0x44
 80077b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077b8:	e841 2300 	strex	r3, r2, [r1]
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1e5      	bne.n	8007790 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	3314      	adds	r3, #20
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	e853 3f00 	ldrex	r3, [r3]
 80077d2:	623b      	str	r3, [r7, #32]
   return(result);
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077da:	663b      	str	r3, [r7, #96]	; 0x60
 80077dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3314      	adds	r3, #20
 80077e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077e4:	633a      	str	r2, [r7, #48]	; 0x30
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ec:	e841 2300 	strex	r3, r2, [r1]
 80077f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1e5      	bne.n	80077c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	2b01      	cmp	r3, #1
 8007806:	d119      	bne.n	800783c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	330c      	adds	r3, #12
 800780e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	60fb      	str	r3, [r7, #12]
   return(result);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f023 0310 	bic.w	r3, r3, #16
 800781e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007828:	61fa      	str	r2, [r7, #28]
 800782a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782c:	69b9      	ldr	r1, [r7, #24]
 800782e:	69fa      	ldr	r2, [r7, #28]
 8007830:	e841 2300 	strex	r3, r2, [r1]
 8007834:	617b      	str	r3, [r7, #20]
   return(result);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e5      	bne.n	8007808 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800783c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783e:	2200      	movs	r2, #0
 8007840:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	2b01      	cmp	r3, #1
 8007848:	d106      	bne.n	8007858 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800784a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800784c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800784e:	4619      	mov	r1, r3
 8007850:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007852:	f7fb fdd1 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007856:	e002      	b.n	800785e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007858:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800785a:	f7ff fef8 	bl	800764e <HAL_UART_RxCpltCallback>
}
 800785e:	bf00      	nop
 8007860:	3770      	adds	r7, #112	; 0x70
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2201      	movs	r2, #1
 8007878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787e:	2b01      	cmp	r3, #1
 8007880:	d108      	bne.n	8007894 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007886:	085b      	lsrs	r3, r3, #1
 8007888:	b29b      	uxth	r3, r3
 800788a:	4619      	mov	r1, r3
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7fb fdb3 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007892:	e002      	b.n	800789a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff fee3 	bl	8007660 <HAL_UART_RxHalfCpltCallback>
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b084      	sub	sp, #16
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b21      	cmp	r3, #33	; 0x21
 80078d4:	d108      	bne.n	80078e8 <UART_DMAError+0x46>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078e2:	68b8      	ldr	r0, [r7, #8]
 80078e4:	f000 f91a 	bl	8007b1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	bf14      	ite	ne
 80078f6:	2301      	movne	r3, #1
 80078f8:	2300      	moveq	r3, #0
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b22      	cmp	r3, #34	; 0x22
 8007908:	d108      	bne.n	800791c <UART_DMAError+0x7a>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007916:	68b8      	ldr	r0, [r7, #8]
 8007918:	f000 f927 	bl	8007b6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007920:	f043 0210 	orr.w	r2, r3, #16
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007928:	68b8      	ldr	r0, [r7, #8]
 800792a:	f7ff fea2 	bl	8007672 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b086      	sub	sp, #24
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4613      	mov	r3, r2
 8007944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007946:	e03b      	b.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d037      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007950:	f7fc f8f2 	bl	8003b38 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	6a3a      	ldr	r2, [r7, #32]
 800795c:	429a      	cmp	r2, r3
 800795e:	d302      	bcc.n	8007966 <UART_WaitOnFlagUntilTimeout+0x30>
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007966:	2303      	movs	r3, #3
 8007968:	e03a      	b.n	80079e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	f003 0304 	and.w	r3, r3, #4
 8007974:	2b00      	cmp	r3, #0
 8007976:	d023      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b80      	cmp	r3, #128	; 0x80
 800797c:	d020      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	d01d      	beq.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	2b08      	cmp	r3, #8
 8007990:	d116      	bne.n	80079c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f8de 	bl	8007b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2208      	movs	r2, #8
 80079b2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e00f      	b.n	80079e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	4013      	ands	r3, r2
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	461a      	mov	r2, r3
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d0b4      	beq.n	8007948 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b098      	sub	sp, #96	; 0x60
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2222      	movs	r2, #34	; 0x22
 8007a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a14:	4a3e      	ldr	r2, [pc, #248]	; (8007b10 <UART_Start_Receive_DMA+0x128>)
 8007a16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	4a3d      	ldr	r2, [pc, #244]	; (8007b14 <UART_Start_Receive_DMA+0x12c>)
 8007a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a24:	4a3c      	ldr	r2, [pc, #240]	; (8007b18 <UART_Start_Receive_DMA+0x130>)
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a30:	f107 0308 	add.w	r3, r7, #8
 8007a34:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4619      	mov	r1, r3
 8007a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	88fb      	ldrh	r3, [r7, #6]
 8007a48:	f7fc fa0c 	bl	8003e64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	613b      	str	r3, [r7, #16]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	613b      	str	r3, [r7, #16]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d019      	beq.n	8007a9e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	330c      	adds	r3, #12
 8007a70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007a90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3314      	adds	r3, #20
 8007aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	e853 3f00 	ldrex	r3, [r3]
 8007aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	f043 0301 	orr.w	r3, r3, #1
 8007ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	3314      	adds	r3, #20
 8007abc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007abe:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1e5      	bne.n	8007a9e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3314      	adds	r3, #20
 8007ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae8:	653b      	str	r3, [r7, #80]	; 0x50
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3314      	adds	r3, #20
 8007af0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007af2:	627a      	str	r2, [r7, #36]	; 0x24
 8007af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6a39      	ldr	r1, [r7, #32]
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e5      	bne.n	8007ad2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3760      	adds	r7, #96	; 0x60
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	0800773b 	.word	0x0800773b
 8007b14:	08007867 	.word	0x08007867
 8007b18:	080078a3 	.word	0x080078a3

08007b1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b089      	sub	sp, #36	; 0x24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	330c      	adds	r3, #12
 8007b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	69fa      	ldr	r2, [r7, #28]
 8007b44:	61ba      	str	r2, [r7, #24]
 8007b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b48:	6979      	ldr	r1, [r7, #20]
 8007b4a:	69ba      	ldr	r2, [r7, #24]
 8007b4c:	e841 2300 	strex	r3, r2, [r1]
 8007b50:	613b      	str	r3, [r7, #16]
   return(result);
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1e5      	bne.n	8007b24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2220      	movs	r2, #32
 8007b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007b60:	bf00      	nop
 8007b62:	3724      	adds	r7, #36	; 0x24
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bc80      	pop	{r7}
 8007b68:	4770      	bx	lr

08007b6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b095      	sub	sp, #84	; 0x54
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	330c      	adds	r3, #12
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	330c      	adds	r3, #12
 8007b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b92:	643a      	str	r2, [r7, #64]	; 0x40
 8007b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1e5      	bne.n	8007b72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	3314      	adds	r3, #20
 8007bac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	e853 3f00 	ldrex	r3, [r3]
 8007bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f023 0301 	bic.w	r3, r3, #1
 8007bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3314      	adds	r3, #20
 8007bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bce:	e841 2300 	strex	r3, r2, [r1]
 8007bd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1e5      	bne.n	8007ba6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d119      	bne.n	8007c16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f023 0310 	bic.w	r3, r3, #16
 8007bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	330c      	adds	r3, #12
 8007c00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c02:	61ba      	str	r2, [r7, #24]
 8007c04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	6979      	ldr	r1, [r7, #20]
 8007c08:	69ba      	ldr	r2, [r7, #24]
 8007c0a:	e841 2300 	strex	r3, r2, [r1]
 8007c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1e5      	bne.n	8007be2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2220      	movs	r2, #32
 8007c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007c24:	bf00      	nop
 8007c26:	3754      	adds	r7, #84	; 0x54
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr

08007c2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff fd12 	bl	8007672 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c4e:	bf00      	nop
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b085      	sub	sp, #20
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b21      	cmp	r3, #33	; 0x21
 8007c68:	d13e      	bne.n	8007ce8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c72:	d114      	bne.n	8007c9e <UART_Transmit_IT+0x48>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d110      	bne.n	8007c9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	1c9a      	adds	r2, r3, #2
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	621a      	str	r2, [r3, #32]
 8007c9c:	e008      	b.n	8007cb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	1c59      	adds	r1, r3, #1
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6211      	str	r1, [r2, #32]
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10f      	bne.n	8007ce4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ce2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e000      	b.n	8007cea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ce8:	2302      	movs	r3, #2
  }
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7fb fb8b 	bl	8003430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08c      	sub	sp, #48	; 0x30
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b22      	cmp	r3, #34	; 0x22
 8007d36:	f040 80ae 	bne.w	8007e96 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d42:	d117      	bne.n	8007d74 <UART_Receive_IT+0x50>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d113      	bne.n	8007d74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d54:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d6c:	1c9a      	adds	r2, r3, #2
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	629a      	str	r2, [r3, #40]	; 0x28
 8007d72:	e026      	b.n	8007dc2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d86:	d007      	beq.n	8007d98 <UART_Receive_IT+0x74>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10a      	bne.n	8007da6 <UART_Receive_IT+0x82>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d106      	bne.n	8007da6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da2:	701a      	strb	r2, [r3, #0]
 8007da4:	e008      	b.n	8007db8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d15d      	bne.n	8007e92 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0220 	bic.w	r2, r2, #32
 8007de4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007df4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695a      	ldr	r2, [r3, #20]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d135      	bne.n	8007e88 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	330c      	adds	r3, #12
 8007e28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	e853 3f00 	ldrex	r3, [r3]
 8007e30:	613b      	str	r3, [r7, #16]
   return(result);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f023 0310 	bic.w	r3, r3, #16
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	623a      	str	r2, [r7, #32]
 8007e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	69f9      	ldr	r1, [r7, #28]
 8007e48:	6a3a      	ldr	r2, [r7, #32]
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e5      	bne.n	8007e22 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0310 	and.w	r3, r3, #16
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d10a      	bne.n	8007e7a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7fb fab9 	bl	80033f8 <HAL_UARTEx_RxEventCallback>
 8007e86:	e002      	b.n	8007e8e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f7ff fbe0 	bl	800764e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e002      	b.n	8007e98 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	e000      	b.n	8007e98 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e96:	2302      	movs	r3, #2
  }
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3730      	adds	r7, #48	; 0x30
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007eda:	f023 030c 	bic.w	r3, r3, #12
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699a      	ldr	r2, [r3, #24]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a2c      	ldr	r2, [pc, #176]	; (8007fb4 <UART_SetConfig+0x114>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d103      	bne.n	8007f10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007f08:	f7fd ffd4 	bl	8005eb4 <HAL_RCC_GetPCLK2Freq>
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	e002      	b.n	8007f16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007f10:	f7fd ffbc 	bl	8005e8c <HAL_RCC_GetPCLK1Freq>
 8007f14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009a      	lsls	r2, r3, #2
 8007f20:	441a      	add	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2c:	4a22      	ldr	r2, [pc, #136]	; (8007fb8 <UART_SetConfig+0x118>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	0119      	lsls	r1, r3, #4
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009a      	lsls	r2, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <UART_SetConfig+0x118>)
 8007f4e:	fba3 0302 	umull	r0, r3, r3, r2
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	2064      	movs	r0, #100	; 0x64
 8007f56:	fb00 f303 	mul.w	r3, r0, r3
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	3332      	adds	r3, #50	; 0x32
 8007f60:	4a15      	ldr	r2, [pc, #84]	; (8007fb8 <UART_SetConfig+0x118>)
 8007f62:	fba2 2303 	umull	r2, r3, r2, r3
 8007f66:	095b      	lsrs	r3, r3, #5
 8007f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f6c:	4419      	add	r1, r3
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009a      	lsls	r2, r3, #2
 8007f78:	441a      	add	r2, r3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f84:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <UART_SetConfig+0x118>)
 8007f86:	fba3 0302 	umull	r0, r3, r3, r2
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	2064      	movs	r0, #100	; 0x64
 8007f8e:	fb00 f303 	mul.w	r3, r0, r3
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	3332      	adds	r3, #50	; 0x32
 8007f98:	4a07      	ldr	r2, [pc, #28]	; (8007fb8 <UART_SetConfig+0x118>)
 8007f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	440a      	add	r2, r1
 8007faa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	40013800 	.word	0x40013800
 8007fb8:	51eb851f 	.word	0x51eb851f

08007fbc <atoi>:
 8007fbc:	220a      	movs	r2, #10
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	f000 b87e 	b.w	80080c0 <strtol>

08007fc4 <_strtol_l.constprop.0>:
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fca:	4686      	mov	lr, r0
 8007fcc:	4690      	mov	r8, r2
 8007fce:	d001      	beq.n	8007fd4 <_strtol_l.constprop.0+0x10>
 8007fd0:	2b24      	cmp	r3, #36	; 0x24
 8007fd2:	d906      	bls.n	8007fe2 <_strtol_l.constprop.0+0x1e>
 8007fd4:	f000 ff46 	bl	8008e64 <__errno>
 8007fd8:	2316      	movs	r3, #22
 8007fda:	6003      	str	r3, [r0, #0]
 8007fdc:	2000      	movs	r0, #0
 8007fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe2:	460d      	mov	r5, r1
 8007fe4:	4835      	ldr	r0, [pc, #212]	; (80080bc <_strtol_l.constprop.0+0xf8>)
 8007fe6:	462a      	mov	r2, r5
 8007fe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fec:	5d06      	ldrb	r6, [r0, r4]
 8007fee:	f016 0608 	ands.w	r6, r6, #8
 8007ff2:	d1f8      	bne.n	8007fe6 <_strtol_l.constprop.0+0x22>
 8007ff4:	2c2d      	cmp	r4, #45	; 0x2d
 8007ff6:	d12e      	bne.n	8008056 <_strtol_l.constprop.0+0x92>
 8007ff8:	2601      	movs	r6, #1
 8007ffa:	782c      	ldrb	r4, [r5, #0]
 8007ffc:	1c95      	adds	r5, r2, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d057      	beq.n	80080b2 <_strtol_l.constprop.0+0xee>
 8008002:	2b10      	cmp	r3, #16
 8008004:	d109      	bne.n	800801a <_strtol_l.constprop.0+0x56>
 8008006:	2c30      	cmp	r4, #48	; 0x30
 8008008:	d107      	bne.n	800801a <_strtol_l.constprop.0+0x56>
 800800a:	782a      	ldrb	r2, [r5, #0]
 800800c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008010:	2a58      	cmp	r2, #88	; 0x58
 8008012:	d149      	bne.n	80080a8 <_strtol_l.constprop.0+0xe4>
 8008014:	2310      	movs	r3, #16
 8008016:	786c      	ldrb	r4, [r5, #1]
 8008018:	3502      	adds	r5, #2
 800801a:	2200      	movs	r2, #0
 800801c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008020:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008024:	fbbc f9f3 	udiv	r9, ip, r3
 8008028:	4610      	mov	r0, r2
 800802a:	fb03 ca19 	mls	sl, r3, r9, ip
 800802e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008032:	2f09      	cmp	r7, #9
 8008034:	d814      	bhi.n	8008060 <_strtol_l.constprop.0+0x9c>
 8008036:	463c      	mov	r4, r7
 8008038:	42a3      	cmp	r3, r4
 800803a:	dd20      	ble.n	800807e <_strtol_l.constprop.0+0xba>
 800803c:	1c57      	adds	r7, r2, #1
 800803e:	d007      	beq.n	8008050 <_strtol_l.constprop.0+0x8c>
 8008040:	4581      	cmp	r9, r0
 8008042:	d319      	bcc.n	8008078 <_strtol_l.constprop.0+0xb4>
 8008044:	d101      	bne.n	800804a <_strtol_l.constprop.0+0x86>
 8008046:	45a2      	cmp	sl, r4
 8008048:	db16      	blt.n	8008078 <_strtol_l.constprop.0+0xb4>
 800804a:	2201      	movs	r2, #1
 800804c:	fb00 4003 	mla	r0, r0, r3, r4
 8008050:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008054:	e7eb      	b.n	800802e <_strtol_l.constprop.0+0x6a>
 8008056:	2c2b      	cmp	r4, #43	; 0x2b
 8008058:	bf04      	itt	eq
 800805a:	782c      	ldrbeq	r4, [r5, #0]
 800805c:	1c95      	addeq	r5, r2, #2
 800805e:	e7ce      	b.n	8007ffe <_strtol_l.constprop.0+0x3a>
 8008060:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008064:	2f19      	cmp	r7, #25
 8008066:	d801      	bhi.n	800806c <_strtol_l.constprop.0+0xa8>
 8008068:	3c37      	subs	r4, #55	; 0x37
 800806a:	e7e5      	b.n	8008038 <_strtol_l.constprop.0+0x74>
 800806c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008070:	2f19      	cmp	r7, #25
 8008072:	d804      	bhi.n	800807e <_strtol_l.constprop.0+0xba>
 8008074:	3c57      	subs	r4, #87	; 0x57
 8008076:	e7df      	b.n	8008038 <_strtol_l.constprop.0+0x74>
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	e7e8      	b.n	8008050 <_strtol_l.constprop.0+0x8c>
 800807e:	1c53      	adds	r3, r2, #1
 8008080:	d108      	bne.n	8008094 <_strtol_l.constprop.0+0xd0>
 8008082:	2322      	movs	r3, #34	; 0x22
 8008084:	4660      	mov	r0, ip
 8008086:	f8ce 3000 	str.w	r3, [lr]
 800808a:	f1b8 0f00 	cmp.w	r8, #0
 800808e:	d0a6      	beq.n	8007fde <_strtol_l.constprop.0+0x1a>
 8008090:	1e69      	subs	r1, r5, #1
 8008092:	e006      	b.n	80080a2 <_strtol_l.constprop.0+0xde>
 8008094:	b106      	cbz	r6, 8008098 <_strtol_l.constprop.0+0xd4>
 8008096:	4240      	negs	r0, r0
 8008098:	f1b8 0f00 	cmp.w	r8, #0
 800809c:	d09f      	beq.n	8007fde <_strtol_l.constprop.0+0x1a>
 800809e:	2a00      	cmp	r2, #0
 80080a0:	d1f6      	bne.n	8008090 <_strtol_l.constprop.0+0xcc>
 80080a2:	f8c8 1000 	str.w	r1, [r8]
 80080a6:	e79a      	b.n	8007fde <_strtol_l.constprop.0+0x1a>
 80080a8:	2430      	movs	r4, #48	; 0x30
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1b5      	bne.n	800801a <_strtol_l.constprop.0+0x56>
 80080ae:	2308      	movs	r3, #8
 80080b0:	e7b3      	b.n	800801a <_strtol_l.constprop.0+0x56>
 80080b2:	2c30      	cmp	r4, #48	; 0x30
 80080b4:	d0a9      	beq.n	800800a <_strtol_l.constprop.0+0x46>
 80080b6:	230a      	movs	r3, #10
 80080b8:	e7af      	b.n	800801a <_strtol_l.constprop.0+0x56>
 80080ba:	bf00      	nop
 80080bc:	0800b46b 	.word	0x0800b46b

080080c0 <strtol>:
 80080c0:	4613      	mov	r3, r2
 80080c2:	460a      	mov	r2, r1
 80080c4:	4601      	mov	r1, r0
 80080c6:	4802      	ldr	r0, [pc, #8]	; (80080d0 <strtol+0x10>)
 80080c8:	6800      	ldr	r0, [r0, #0]
 80080ca:	f7ff bf7b 	b.w	8007fc4 <_strtol_l.constprop.0>
 80080ce:	bf00      	nop
 80080d0:	20000064 	.word	0x20000064

080080d4 <__cvt>:
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080da:	461f      	mov	r7, r3
 80080dc:	bfbb      	ittet	lt
 80080de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80080e2:	461f      	movlt	r7, r3
 80080e4:	2300      	movge	r3, #0
 80080e6:	232d      	movlt	r3, #45	; 0x2d
 80080e8:	b088      	sub	sp, #32
 80080ea:	4614      	mov	r4, r2
 80080ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80080ee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80080f0:	7013      	strb	r3, [r2, #0]
 80080f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80080f8:	f023 0820 	bic.w	r8, r3, #32
 80080fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008100:	d005      	beq.n	800810e <__cvt+0x3a>
 8008102:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008106:	d100      	bne.n	800810a <__cvt+0x36>
 8008108:	3501      	adds	r5, #1
 800810a:	2302      	movs	r3, #2
 800810c:	e000      	b.n	8008110 <__cvt+0x3c>
 800810e:	2303      	movs	r3, #3
 8008110:	aa07      	add	r2, sp, #28
 8008112:	9204      	str	r2, [sp, #16]
 8008114:	aa06      	add	r2, sp, #24
 8008116:	e9cd a202 	strd	sl, r2, [sp, #8]
 800811a:	e9cd 3500 	strd	r3, r5, [sp]
 800811e:	4622      	mov	r2, r4
 8008120:	463b      	mov	r3, r7
 8008122:	f000 ff71 	bl	8009008 <_dtoa_r>
 8008126:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800812a:	4606      	mov	r6, r0
 800812c:	d102      	bne.n	8008134 <__cvt+0x60>
 800812e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008130:	07db      	lsls	r3, r3, #31
 8008132:	d522      	bpl.n	800817a <__cvt+0xa6>
 8008134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008138:	eb06 0905 	add.w	r9, r6, r5
 800813c:	d110      	bne.n	8008160 <__cvt+0x8c>
 800813e:	7833      	ldrb	r3, [r6, #0]
 8008140:	2b30      	cmp	r3, #48	; 0x30
 8008142:	d10a      	bne.n	800815a <__cvt+0x86>
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	4620      	mov	r0, r4
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 fc36 	bl	80009bc <__aeabi_dcmpeq>
 8008150:	b918      	cbnz	r0, 800815a <__cvt+0x86>
 8008152:	f1c5 0501 	rsb	r5, r5, #1
 8008156:	f8ca 5000 	str.w	r5, [sl]
 800815a:	f8da 3000 	ldr.w	r3, [sl]
 800815e:	4499      	add	r9, r3
 8008160:	2200      	movs	r2, #0
 8008162:	2300      	movs	r3, #0
 8008164:	4620      	mov	r0, r4
 8008166:	4639      	mov	r1, r7
 8008168:	f7f8 fc28 	bl	80009bc <__aeabi_dcmpeq>
 800816c:	b108      	cbz	r0, 8008172 <__cvt+0x9e>
 800816e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008172:	2230      	movs	r2, #48	; 0x30
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	454b      	cmp	r3, r9
 8008178:	d307      	bcc.n	800818a <__cvt+0xb6>
 800817a:	4630      	mov	r0, r6
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008180:	1b9b      	subs	r3, r3, r6
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	b008      	add	sp, #32
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	1c59      	adds	r1, r3, #1
 800818c:	9107      	str	r1, [sp, #28]
 800818e:	701a      	strb	r2, [r3, #0]
 8008190:	e7f0      	b.n	8008174 <__cvt+0xa0>

08008192 <__exponent>:
 8008192:	4603      	mov	r3, r0
 8008194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008196:	2900      	cmp	r1, #0
 8008198:	f803 2b02 	strb.w	r2, [r3], #2
 800819c:	bfb6      	itet	lt
 800819e:	222d      	movlt	r2, #45	; 0x2d
 80081a0:	222b      	movge	r2, #43	; 0x2b
 80081a2:	4249      	neglt	r1, r1
 80081a4:	2909      	cmp	r1, #9
 80081a6:	7042      	strb	r2, [r0, #1]
 80081a8:	dd2a      	ble.n	8008200 <__exponent+0x6e>
 80081aa:	f10d 0207 	add.w	r2, sp, #7
 80081ae:	4617      	mov	r7, r2
 80081b0:	260a      	movs	r6, #10
 80081b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80081b6:	4694      	mov	ip, r2
 80081b8:	fb06 1415 	mls	r4, r6, r5, r1
 80081bc:	3430      	adds	r4, #48	; 0x30
 80081be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80081c2:	460c      	mov	r4, r1
 80081c4:	2c63      	cmp	r4, #99	; 0x63
 80081c6:	4629      	mov	r1, r5
 80081c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80081cc:	dcf1      	bgt.n	80081b2 <__exponent+0x20>
 80081ce:	3130      	adds	r1, #48	; 0x30
 80081d0:	f1ac 0402 	sub.w	r4, ip, #2
 80081d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80081d8:	4622      	mov	r2, r4
 80081da:	1c41      	adds	r1, r0, #1
 80081dc:	42ba      	cmp	r2, r7
 80081de:	d30a      	bcc.n	80081f6 <__exponent+0x64>
 80081e0:	f10d 0209 	add.w	r2, sp, #9
 80081e4:	eba2 020c 	sub.w	r2, r2, ip
 80081e8:	42bc      	cmp	r4, r7
 80081ea:	bf88      	it	hi
 80081ec:	2200      	movhi	r2, #0
 80081ee:	4413      	add	r3, r2
 80081f0:	1a18      	subs	r0, r3, r0
 80081f2:	b003      	add	sp, #12
 80081f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80081fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80081fe:	e7ed      	b.n	80081dc <__exponent+0x4a>
 8008200:	2330      	movs	r3, #48	; 0x30
 8008202:	3130      	adds	r1, #48	; 0x30
 8008204:	7083      	strb	r3, [r0, #2]
 8008206:	70c1      	strb	r1, [r0, #3]
 8008208:	1d03      	adds	r3, r0, #4
 800820a:	e7f1      	b.n	80081f0 <__exponent+0x5e>

0800820c <_printf_float>:
 800820c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008210:	b091      	sub	sp, #68	; 0x44
 8008212:	460c      	mov	r4, r1
 8008214:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008218:	4616      	mov	r6, r2
 800821a:	461f      	mov	r7, r3
 800821c:	4605      	mov	r5, r0
 800821e:	f000 fdd7 	bl	8008dd0 <_localeconv_r>
 8008222:	6803      	ldr	r3, [r0, #0]
 8008224:	4618      	mov	r0, r3
 8008226:	9309      	str	r3, [sp, #36]	; 0x24
 8008228:	f7f7 ff9c 	bl	8000164 <strlen>
 800822c:	2300      	movs	r3, #0
 800822e:	930e      	str	r3, [sp, #56]	; 0x38
 8008230:	f8d8 3000 	ldr.w	r3, [r8]
 8008234:	900a      	str	r0, [sp, #40]	; 0x28
 8008236:	3307      	adds	r3, #7
 8008238:	f023 0307 	bic.w	r3, r3, #7
 800823c:	f103 0208 	add.w	r2, r3, #8
 8008240:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008244:	f8d4 b000 	ldr.w	fp, [r4]
 8008248:	f8c8 2000 	str.w	r2, [r8]
 800824c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008250:	4652      	mov	r2, sl
 8008252:	4643      	mov	r3, r8
 8008254:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008258:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800825c:	930b      	str	r3, [sp, #44]	; 0x2c
 800825e:	f04f 32ff 	mov.w	r2, #4294967295
 8008262:	4650      	mov	r0, sl
 8008264:	4b9c      	ldr	r3, [pc, #624]	; (80084d8 <_printf_float+0x2cc>)
 8008266:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008268:	f7f8 fbda 	bl	8000a20 <__aeabi_dcmpun>
 800826c:	bb70      	cbnz	r0, 80082cc <_printf_float+0xc0>
 800826e:	f04f 32ff 	mov.w	r2, #4294967295
 8008272:	4650      	mov	r0, sl
 8008274:	4b98      	ldr	r3, [pc, #608]	; (80084d8 <_printf_float+0x2cc>)
 8008276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008278:	f7f8 fbb4 	bl	80009e4 <__aeabi_dcmple>
 800827c:	bb30      	cbnz	r0, 80082cc <_printf_float+0xc0>
 800827e:	2200      	movs	r2, #0
 8008280:	2300      	movs	r3, #0
 8008282:	4650      	mov	r0, sl
 8008284:	4641      	mov	r1, r8
 8008286:	f7f8 fba3 	bl	80009d0 <__aeabi_dcmplt>
 800828a:	b110      	cbz	r0, 8008292 <_printf_float+0x86>
 800828c:	232d      	movs	r3, #45	; 0x2d
 800828e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008292:	4a92      	ldr	r2, [pc, #584]	; (80084dc <_printf_float+0x2d0>)
 8008294:	4b92      	ldr	r3, [pc, #584]	; (80084e0 <_printf_float+0x2d4>)
 8008296:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800829a:	bf94      	ite	ls
 800829c:	4690      	movls	r8, r2
 800829e:	4698      	movhi	r8, r3
 80082a0:	2303      	movs	r3, #3
 80082a2:	f04f 0a00 	mov.w	sl, #0
 80082a6:	6123      	str	r3, [r4, #16]
 80082a8:	f02b 0304 	bic.w	r3, fp, #4
 80082ac:	6023      	str	r3, [r4, #0]
 80082ae:	4633      	mov	r3, r6
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	9700      	str	r7, [sp, #0]
 80082b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80082b8:	f000 f9d6 	bl	8008668 <_printf_common>
 80082bc:	3001      	adds	r0, #1
 80082be:	f040 8090 	bne.w	80083e2 <_printf_float+0x1d6>
 80082c2:	f04f 30ff 	mov.w	r0, #4294967295
 80082c6:	b011      	add	sp, #68	; 0x44
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	4652      	mov	r2, sl
 80082ce:	4643      	mov	r3, r8
 80082d0:	4650      	mov	r0, sl
 80082d2:	4641      	mov	r1, r8
 80082d4:	f7f8 fba4 	bl	8000a20 <__aeabi_dcmpun>
 80082d8:	b148      	cbz	r0, 80082ee <_printf_float+0xe2>
 80082da:	f1b8 0f00 	cmp.w	r8, #0
 80082de:	bfb8      	it	lt
 80082e0:	232d      	movlt	r3, #45	; 0x2d
 80082e2:	4a80      	ldr	r2, [pc, #512]	; (80084e4 <_printf_float+0x2d8>)
 80082e4:	bfb8      	it	lt
 80082e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082ea:	4b7f      	ldr	r3, [pc, #508]	; (80084e8 <_printf_float+0x2dc>)
 80082ec:	e7d3      	b.n	8008296 <_printf_float+0x8a>
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	d142      	bne.n	800837e <_printf_float+0x172>
 80082f8:	2306      	movs	r3, #6
 80082fa:	6063      	str	r3, [r4, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	9206      	str	r2, [sp, #24]
 8008300:	aa0e      	add	r2, sp, #56	; 0x38
 8008302:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008306:	aa0d      	add	r2, sp, #52	; 0x34
 8008308:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800830c:	9203      	str	r2, [sp, #12]
 800830e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008312:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	6863      	ldr	r3, [r4, #4]
 800831a:	4652      	mov	r2, sl
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	4628      	mov	r0, r5
 8008320:	4643      	mov	r3, r8
 8008322:	910b      	str	r1, [sp, #44]	; 0x2c
 8008324:	f7ff fed6 	bl	80080d4 <__cvt>
 8008328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800832a:	4680      	mov	r8, r0
 800832c:	2947      	cmp	r1, #71	; 0x47
 800832e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008330:	d108      	bne.n	8008344 <_printf_float+0x138>
 8008332:	1cc8      	adds	r0, r1, #3
 8008334:	db02      	blt.n	800833c <_printf_float+0x130>
 8008336:	6863      	ldr	r3, [r4, #4]
 8008338:	4299      	cmp	r1, r3
 800833a:	dd40      	ble.n	80083be <_printf_float+0x1b2>
 800833c:	f1a9 0902 	sub.w	r9, r9, #2
 8008340:	fa5f f989 	uxtb.w	r9, r9
 8008344:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008348:	d81f      	bhi.n	800838a <_printf_float+0x17e>
 800834a:	464a      	mov	r2, r9
 800834c:	3901      	subs	r1, #1
 800834e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008352:	910d      	str	r1, [sp, #52]	; 0x34
 8008354:	f7ff ff1d 	bl	8008192 <__exponent>
 8008358:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800835a:	4682      	mov	sl, r0
 800835c:	1813      	adds	r3, r2, r0
 800835e:	2a01      	cmp	r2, #1
 8008360:	6123      	str	r3, [r4, #16]
 8008362:	dc02      	bgt.n	800836a <_printf_float+0x15e>
 8008364:	6822      	ldr	r2, [r4, #0]
 8008366:	07d2      	lsls	r2, r2, #31
 8008368:	d501      	bpl.n	800836e <_printf_float+0x162>
 800836a:	3301      	adds	r3, #1
 800836c:	6123      	str	r3, [r4, #16]
 800836e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008372:	2b00      	cmp	r3, #0
 8008374:	d09b      	beq.n	80082ae <_printf_float+0xa2>
 8008376:	232d      	movs	r3, #45	; 0x2d
 8008378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800837c:	e797      	b.n	80082ae <_printf_float+0xa2>
 800837e:	2947      	cmp	r1, #71	; 0x47
 8008380:	d1bc      	bne.n	80082fc <_printf_float+0xf0>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1ba      	bne.n	80082fc <_printf_float+0xf0>
 8008386:	2301      	movs	r3, #1
 8008388:	e7b7      	b.n	80082fa <_printf_float+0xee>
 800838a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800838e:	d118      	bne.n	80083c2 <_printf_float+0x1b6>
 8008390:	2900      	cmp	r1, #0
 8008392:	6863      	ldr	r3, [r4, #4]
 8008394:	dd0b      	ble.n	80083ae <_printf_float+0x1a2>
 8008396:	6121      	str	r1, [r4, #16]
 8008398:	b913      	cbnz	r3, 80083a0 <_printf_float+0x194>
 800839a:	6822      	ldr	r2, [r4, #0]
 800839c:	07d0      	lsls	r0, r2, #31
 800839e:	d502      	bpl.n	80083a6 <_printf_float+0x19a>
 80083a0:	3301      	adds	r3, #1
 80083a2:	440b      	add	r3, r1
 80083a4:	6123      	str	r3, [r4, #16]
 80083a6:	f04f 0a00 	mov.w	sl, #0
 80083aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80083ac:	e7df      	b.n	800836e <_printf_float+0x162>
 80083ae:	b913      	cbnz	r3, 80083b6 <_printf_float+0x1aa>
 80083b0:	6822      	ldr	r2, [r4, #0]
 80083b2:	07d2      	lsls	r2, r2, #31
 80083b4:	d501      	bpl.n	80083ba <_printf_float+0x1ae>
 80083b6:	3302      	adds	r3, #2
 80083b8:	e7f4      	b.n	80083a4 <_printf_float+0x198>
 80083ba:	2301      	movs	r3, #1
 80083bc:	e7f2      	b.n	80083a4 <_printf_float+0x198>
 80083be:	f04f 0967 	mov.w	r9, #103	; 0x67
 80083c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083c4:	4299      	cmp	r1, r3
 80083c6:	db05      	blt.n	80083d4 <_printf_float+0x1c8>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	6121      	str	r1, [r4, #16]
 80083cc:	07d8      	lsls	r0, r3, #31
 80083ce:	d5ea      	bpl.n	80083a6 <_printf_float+0x19a>
 80083d0:	1c4b      	adds	r3, r1, #1
 80083d2:	e7e7      	b.n	80083a4 <_printf_float+0x198>
 80083d4:	2900      	cmp	r1, #0
 80083d6:	bfcc      	ite	gt
 80083d8:	2201      	movgt	r2, #1
 80083da:	f1c1 0202 	rsble	r2, r1, #2
 80083de:	4413      	add	r3, r2
 80083e0:	e7e0      	b.n	80083a4 <_printf_float+0x198>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	055a      	lsls	r2, r3, #21
 80083e6:	d407      	bmi.n	80083f8 <_printf_float+0x1ec>
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	4642      	mov	r2, r8
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	d12b      	bne.n	800844e <_printf_float+0x242>
 80083f6:	e764      	b.n	80082c2 <_printf_float+0xb6>
 80083f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80083fc:	f240 80dd 	bls.w	80085ba <_printf_float+0x3ae>
 8008400:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008404:	2200      	movs	r2, #0
 8008406:	2300      	movs	r3, #0
 8008408:	f7f8 fad8 	bl	80009bc <__aeabi_dcmpeq>
 800840c:	2800      	cmp	r0, #0
 800840e:	d033      	beq.n	8008478 <_printf_float+0x26c>
 8008410:	2301      	movs	r3, #1
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	4a35      	ldr	r2, [pc, #212]	; (80084ec <_printf_float+0x2e0>)
 8008418:	47b8      	blx	r7
 800841a:	3001      	adds	r0, #1
 800841c:	f43f af51 	beq.w	80082c2 <_printf_float+0xb6>
 8008420:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008424:	429a      	cmp	r2, r3
 8008426:	db02      	blt.n	800842e <_printf_float+0x222>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	07d8      	lsls	r0, r3, #31
 800842c:	d50f      	bpl.n	800844e <_printf_float+0x242>
 800842e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	f43f af42 	beq.w	80082c2 <_printf_float+0xb6>
 800843e:	f04f 0800 	mov.w	r8, #0
 8008442:	f104 091a 	add.w	r9, r4, #26
 8008446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008448:	3b01      	subs	r3, #1
 800844a:	4543      	cmp	r3, r8
 800844c:	dc09      	bgt.n	8008462 <_printf_float+0x256>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	079b      	lsls	r3, r3, #30
 8008452:	f100 8104 	bmi.w	800865e <_printf_float+0x452>
 8008456:	68e0      	ldr	r0, [r4, #12]
 8008458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800845a:	4298      	cmp	r0, r3
 800845c:	bfb8      	it	lt
 800845e:	4618      	movlt	r0, r3
 8008460:	e731      	b.n	80082c6 <_printf_float+0xba>
 8008462:	2301      	movs	r3, #1
 8008464:	464a      	mov	r2, r9
 8008466:	4631      	mov	r1, r6
 8008468:	4628      	mov	r0, r5
 800846a:	47b8      	blx	r7
 800846c:	3001      	adds	r0, #1
 800846e:	f43f af28 	beq.w	80082c2 <_printf_float+0xb6>
 8008472:	f108 0801 	add.w	r8, r8, #1
 8008476:	e7e6      	b.n	8008446 <_printf_float+0x23a>
 8008478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800847a:	2b00      	cmp	r3, #0
 800847c:	dc38      	bgt.n	80084f0 <_printf_float+0x2e4>
 800847e:	2301      	movs	r3, #1
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	4a19      	ldr	r2, [pc, #100]	; (80084ec <_printf_float+0x2e0>)
 8008486:	47b8      	blx	r7
 8008488:	3001      	adds	r0, #1
 800848a:	f43f af1a 	beq.w	80082c2 <_printf_float+0xb6>
 800848e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008492:	4313      	orrs	r3, r2
 8008494:	d102      	bne.n	800849c <_printf_float+0x290>
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	07d9      	lsls	r1, r3, #31
 800849a:	d5d8      	bpl.n	800844e <_printf_float+0x242>
 800849c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084a0:	4631      	mov	r1, r6
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b8      	blx	r7
 80084a6:	3001      	adds	r0, #1
 80084a8:	f43f af0b 	beq.w	80082c2 <_printf_float+0xb6>
 80084ac:	f04f 0900 	mov.w	r9, #0
 80084b0:	f104 0a1a 	add.w	sl, r4, #26
 80084b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084b6:	425b      	negs	r3, r3
 80084b8:	454b      	cmp	r3, r9
 80084ba:	dc01      	bgt.n	80084c0 <_printf_float+0x2b4>
 80084bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084be:	e794      	b.n	80083ea <_printf_float+0x1de>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4652      	mov	r2, sl
 80084c4:	4631      	mov	r1, r6
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b8      	blx	r7
 80084ca:	3001      	adds	r0, #1
 80084cc:	f43f aef9 	beq.w	80082c2 <_printf_float+0xb6>
 80084d0:	f109 0901 	add.w	r9, r9, #1
 80084d4:	e7ee      	b.n	80084b4 <_printf_float+0x2a8>
 80084d6:	bf00      	nop
 80084d8:	7fefffff 	.word	0x7fefffff
 80084dc:	0800b56b 	.word	0x0800b56b
 80084e0:	0800b56f 	.word	0x0800b56f
 80084e4:	0800b573 	.word	0x0800b573
 80084e8:	0800b577 	.word	0x0800b577
 80084ec:	0800b57b 	.word	0x0800b57b
 80084f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084f4:	429a      	cmp	r2, r3
 80084f6:	bfa8      	it	ge
 80084f8:	461a      	movge	r2, r3
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	4691      	mov	r9, r2
 80084fe:	dc37      	bgt.n	8008570 <_printf_float+0x364>
 8008500:	f04f 0b00 	mov.w	fp, #0
 8008504:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008508:	f104 021a 	add.w	r2, r4, #26
 800850c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008510:	ebaa 0309 	sub.w	r3, sl, r9
 8008514:	455b      	cmp	r3, fp
 8008516:	dc33      	bgt.n	8008580 <_printf_float+0x374>
 8008518:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800851c:	429a      	cmp	r2, r3
 800851e:	db3b      	blt.n	8008598 <_printf_float+0x38c>
 8008520:	6823      	ldr	r3, [r4, #0]
 8008522:	07da      	lsls	r2, r3, #31
 8008524:	d438      	bmi.n	8008598 <_printf_float+0x38c>
 8008526:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800852a:	eba2 0903 	sub.w	r9, r2, r3
 800852e:	eba2 020a 	sub.w	r2, r2, sl
 8008532:	4591      	cmp	r9, r2
 8008534:	bfa8      	it	ge
 8008536:	4691      	movge	r9, r2
 8008538:	f1b9 0f00 	cmp.w	r9, #0
 800853c:	dc34      	bgt.n	80085a8 <_printf_float+0x39c>
 800853e:	f04f 0800 	mov.w	r8, #0
 8008542:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008546:	f104 0a1a 	add.w	sl, r4, #26
 800854a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	eba3 0309 	sub.w	r3, r3, r9
 8008554:	4543      	cmp	r3, r8
 8008556:	f77f af7a 	ble.w	800844e <_printf_float+0x242>
 800855a:	2301      	movs	r3, #1
 800855c:	4652      	mov	r2, sl
 800855e:	4631      	mov	r1, r6
 8008560:	4628      	mov	r0, r5
 8008562:	47b8      	blx	r7
 8008564:	3001      	adds	r0, #1
 8008566:	f43f aeac 	beq.w	80082c2 <_printf_float+0xb6>
 800856a:	f108 0801 	add.w	r8, r8, #1
 800856e:	e7ec      	b.n	800854a <_printf_float+0x33e>
 8008570:	4613      	mov	r3, r2
 8008572:	4631      	mov	r1, r6
 8008574:	4642      	mov	r2, r8
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	d1c0      	bne.n	8008500 <_printf_float+0x2f4>
 800857e:	e6a0      	b.n	80082c2 <_printf_float+0xb6>
 8008580:	2301      	movs	r3, #1
 8008582:	4631      	mov	r1, r6
 8008584:	4628      	mov	r0, r5
 8008586:	920b      	str	r2, [sp, #44]	; 0x2c
 8008588:	47b8      	blx	r7
 800858a:	3001      	adds	r0, #1
 800858c:	f43f ae99 	beq.w	80082c2 <_printf_float+0xb6>
 8008590:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008592:	f10b 0b01 	add.w	fp, fp, #1
 8008596:	e7b9      	b.n	800850c <_printf_float+0x300>
 8008598:	4631      	mov	r1, r6
 800859a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	d1bf      	bne.n	8008526 <_printf_float+0x31a>
 80085a6:	e68c      	b.n	80082c2 <_printf_float+0xb6>
 80085a8:	464b      	mov	r3, r9
 80085aa:	4631      	mov	r1, r6
 80085ac:	4628      	mov	r0, r5
 80085ae:	eb08 020a 	add.w	r2, r8, sl
 80085b2:	47b8      	blx	r7
 80085b4:	3001      	adds	r0, #1
 80085b6:	d1c2      	bne.n	800853e <_printf_float+0x332>
 80085b8:	e683      	b.n	80082c2 <_printf_float+0xb6>
 80085ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085bc:	2a01      	cmp	r2, #1
 80085be:	dc01      	bgt.n	80085c4 <_printf_float+0x3b8>
 80085c0:	07db      	lsls	r3, r3, #31
 80085c2:	d539      	bpl.n	8008638 <_printf_float+0x42c>
 80085c4:	2301      	movs	r3, #1
 80085c6:	4642      	mov	r2, r8
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f ae77 	beq.w	80082c2 <_printf_float+0xb6>
 80085d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d8:	4631      	mov	r1, r6
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	f43f ae6f 	beq.w	80082c2 <_printf_float+0xb6>
 80085e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085e8:	2200      	movs	r2, #0
 80085ea:	2300      	movs	r3, #0
 80085ec:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80085f0:	f7f8 f9e4 	bl	80009bc <__aeabi_dcmpeq>
 80085f4:	b9d8      	cbnz	r0, 800862e <_printf_float+0x422>
 80085f6:	f109 33ff 	add.w	r3, r9, #4294967295
 80085fa:	f108 0201 	add.w	r2, r8, #1
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	d10e      	bne.n	8008626 <_printf_float+0x41a>
 8008608:	e65b      	b.n	80082c2 <_printf_float+0xb6>
 800860a:	2301      	movs	r3, #1
 800860c:	464a      	mov	r2, r9
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	f43f ae54 	beq.w	80082c2 <_printf_float+0xb6>
 800861a:	f108 0801 	add.w	r8, r8, #1
 800861e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008620:	3b01      	subs	r3, #1
 8008622:	4543      	cmp	r3, r8
 8008624:	dcf1      	bgt.n	800860a <_printf_float+0x3fe>
 8008626:	4653      	mov	r3, sl
 8008628:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800862c:	e6de      	b.n	80083ec <_printf_float+0x1e0>
 800862e:	f04f 0800 	mov.w	r8, #0
 8008632:	f104 091a 	add.w	r9, r4, #26
 8008636:	e7f2      	b.n	800861e <_printf_float+0x412>
 8008638:	2301      	movs	r3, #1
 800863a:	4642      	mov	r2, r8
 800863c:	e7df      	b.n	80085fe <_printf_float+0x3f2>
 800863e:	2301      	movs	r3, #1
 8008640:	464a      	mov	r2, r9
 8008642:	4631      	mov	r1, r6
 8008644:	4628      	mov	r0, r5
 8008646:	47b8      	blx	r7
 8008648:	3001      	adds	r0, #1
 800864a:	f43f ae3a 	beq.w	80082c2 <_printf_float+0xb6>
 800864e:	f108 0801 	add.w	r8, r8, #1
 8008652:	68e3      	ldr	r3, [r4, #12]
 8008654:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008656:	1a5b      	subs	r3, r3, r1
 8008658:	4543      	cmp	r3, r8
 800865a:	dcf0      	bgt.n	800863e <_printf_float+0x432>
 800865c:	e6fb      	b.n	8008456 <_printf_float+0x24a>
 800865e:	f04f 0800 	mov.w	r8, #0
 8008662:	f104 0919 	add.w	r9, r4, #25
 8008666:	e7f4      	b.n	8008652 <_printf_float+0x446>

08008668 <_printf_common>:
 8008668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800866c:	4616      	mov	r6, r2
 800866e:	4699      	mov	r9, r3
 8008670:	688a      	ldr	r2, [r1, #8]
 8008672:	690b      	ldr	r3, [r1, #16]
 8008674:	4607      	mov	r7, r0
 8008676:	4293      	cmp	r3, r2
 8008678:	bfb8      	it	lt
 800867a:	4613      	movlt	r3, r2
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008682:	460c      	mov	r4, r1
 8008684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008688:	b10a      	cbz	r2, 800868e <_printf_common+0x26>
 800868a:	3301      	adds	r3, #1
 800868c:	6033      	str	r3, [r6, #0]
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	0699      	lsls	r1, r3, #26
 8008692:	bf42      	ittt	mi
 8008694:	6833      	ldrmi	r3, [r6, #0]
 8008696:	3302      	addmi	r3, #2
 8008698:	6033      	strmi	r3, [r6, #0]
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	f015 0506 	ands.w	r5, r5, #6
 80086a0:	d106      	bne.n	80086b0 <_printf_common+0x48>
 80086a2:	f104 0a19 	add.w	sl, r4, #25
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	6832      	ldr	r2, [r6, #0]
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dc2b      	bgt.n	8008708 <_printf_common+0xa0>
 80086b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086b4:	1e13      	subs	r3, r2, #0
 80086b6:	6822      	ldr	r2, [r4, #0]
 80086b8:	bf18      	it	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	0692      	lsls	r2, r2, #26
 80086be:	d430      	bmi.n	8008722 <_printf_common+0xba>
 80086c0:	4649      	mov	r1, r9
 80086c2:	4638      	mov	r0, r7
 80086c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086c8:	47c0      	blx	r8
 80086ca:	3001      	adds	r0, #1
 80086cc:	d023      	beq.n	8008716 <_printf_common+0xae>
 80086ce:	6823      	ldr	r3, [r4, #0]
 80086d0:	6922      	ldr	r2, [r4, #16]
 80086d2:	f003 0306 	and.w	r3, r3, #6
 80086d6:	2b04      	cmp	r3, #4
 80086d8:	bf14      	ite	ne
 80086da:	2500      	movne	r5, #0
 80086dc:	6833      	ldreq	r3, [r6, #0]
 80086de:	f04f 0600 	mov.w	r6, #0
 80086e2:	bf08      	it	eq
 80086e4:	68e5      	ldreq	r5, [r4, #12]
 80086e6:	f104 041a 	add.w	r4, r4, #26
 80086ea:	bf08      	it	eq
 80086ec:	1aed      	subeq	r5, r5, r3
 80086ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80086f2:	bf08      	it	eq
 80086f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086f8:	4293      	cmp	r3, r2
 80086fa:	bfc4      	itt	gt
 80086fc:	1a9b      	subgt	r3, r3, r2
 80086fe:	18ed      	addgt	r5, r5, r3
 8008700:	42b5      	cmp	r5, r6
 8008702:	d11a      	bne.n	800873a <_printf_common+0xd2>
 8008704:	2000      	movs	r0, #0
 8008706:	e008      	b.n	800871a <_printf_common+0xb2>
 8008708:	2301      	movs	r3, #1
 800870a:	4652      	mov	r2, sl
 800870c:	4649      	mov	r1, r9
 800870e:	4638      	mov	r0, r7
 8008710:	47c0      	blx	r8
 8008712:	3001      	adds	r0, #1
 8008714:	d103      	bne.n	800871e <_printf_common+0xb6>
 8008716:	f04f 30ff 	mov.w	r0, #4294967295
 800871a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871e:	3501      	adds	r5, #1
 8008720:	e7c1      	b.n	80086a6 <_printf_common+0x3e>
 8008722:	2030      	movs	r0, #48	; 0x30
 8008724:	18e1      	adds	r1, r4, r3
 8008726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800872a:	1c5a      	adds	r2, r3, #1
 800872c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008730:	4422      	add	r2, r4
 8008732:	3302      	adds	r3, #2
 8008734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008738:	e7c2      	b.n	80086c0 <_printf_common+0x58>
 800873a:	2301      	movs	r3, #1
 800873c:	4622      	mov	r2, r4
 800873e:	4649      	mov	r1, r9
 8008740:	4638      	mov	r0, r7
 8008742:	47c0      	blx	r8
 8008744:	3001      	adds	r0, #1
 8008746:	d0e6      	beq.n	8008716 <_printf_common+0xae>
 8008748:	3601      	adds	r6, #1
 800874a:	e7d9      	b.n	8008700 <_printf_common+0x98>

0800874c <_printf_i>:
 800874c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008750:	7e0f      	ldrb	r7, [r1, #24]
 8008752:	4691      	mov	r9, r2
 8008754:	2f78      	cmp	r7, #120	; 0x78
 8008756:	4680      	mov	r8, r0
 8008758:	460c      	mov	r4, r1
 800875a:	469a      	mov	sl, r3
 800875c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800875e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008762:	d807      	bhi.n	8008774 <_printf_i+0x28>
 8008764:	2f62      	cmp	r7, #98	; 0x62
 8008766:	d80a      	bhi.n	800877e <_printf_i+0x32>
 8008768:	2f00      	cmp	r7, #0
 800876a:	f000 80d5 	beq.w	8008918 <_printf_i+0x1cc>
 800876e:	2f58      	cmp	r7, #88	; 0x58
 8008770:	f000 80c1 	beq.w	80088f6 <_printf_i+0x1aa>
 8008774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800877c:	e03a      	b.n	80087f4 <_printf_i+0xa8>
 800877e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008782:	2b15      	cmp	r3, #21
 8008784:	d8f6      	bhi.n	8008774 <_printf_i+0x28>
 8008786:	a101      	add	r1, pc, #4	; (adr r1, 800878c <_printf_i+0x40>)
 8008788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800878c:	080087e5 	.word	0x080087e5
 8008790:	080087f9 	.word	0x080087f9
 8008794:	08008775 	.word	0x08008775
 8008798:	08008775 	.word	0x08008775
 800879c:	08008775 	.word	0x08008775
 80087a0:	08008775 	.word	0x08008775
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	08008775 	.word	0x08008775
 80087ac:	08008775 	.word	0x08008775
 80087b0:	08008775 	.word	0x08008775
 80087b4:	08008775 	.word	0x08008775
 80087b8:	080088ff 	.word	0x080088ff
 80087bc:	08008825 	.word	0x08008825
 80087c0:	080088b9 	.word	0x080088b9
 80087c4:	08008775 	.word	0x08008775
 80087c8:	08008775 	.word	0x08008775
 80087cc:	08008921 	.word	0x08008921
 80087d0:	08008775 	.word	0x08008775
 80087d4:	08008825 	.word	0x08008825
 80087d8:	08008775 	.word	0x08008775
 80087dc:	08008775 	.word	0x08008775
 80087e0:	080088c1 	.word	0x080088c1
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	1d1a      	adds	r2, r3, #4
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	602a      	str	r2, [r5, #0]
 80087ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087f4:	2301      	movs	r3, #1
 80087f6:	e0a0      	b.n	800893a <_printf_i+0x1ee>
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	682b      	ldr	r3, [r5, #0]
 80087fc:	0607      	lsls	r7, r0, #24
 80087fe:	f103 0104 	add.w	r1, r3, #4
 8008802:	6029      	str	r1, [r5, #0]
 8008804:	d501      	bpl.n	800880a <_printf_i+0xbe>
 8008806:	681e      	ldr	r6, [r3, #0]
 8008808:	e003      	b.n	8008812 <_printf_i+0xc6>
 800880a:	0646      	lsls	r6, r0, #25
 800880c:	d5fb      	bpl.n	8008806 <_printf_i+0xba>
 800880e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008812:	2e00      	cmp	r6, #0
 8008814:	da03      	bge.n	800881e <_printf_i+0xd2>
 8008816:	232d      	movs	r3, #45	; 0x2d
 8008818:	4276      	negs	r6, r6
 800881a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800881e:	230a      	movs	r3, #10
 8008820:	4859      	ldr	r0, [pc, #356]	; (8008988 <_printf_i+0x23c>)
 8008822:	e012      	b.n	800884a <_printf_i+0xfe>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	6820      	ldr	r0, [r4, #0]
 8008828:	1d19      	adds	r1, r3, #4
 800882a:	6029      	str	r1, [r5, #0]
 800882c:	0605      	lsls	r5, r0, #24
 800882e:	d501      	bpl.n	8008834 <_printf_i+0xe8>
 8008830:	681e      	ldr	r6, [r3, #0]
 8008832:	e002      	b.n	800883a <_printf_i+0xee>
 8008834:	0641      	lsls	r1, r0, #25
 8008836:	d5fb      	bpl.n	8008830 <_printf_i+0xe4>
 8008838:	881e      	ldrh	r6, [r3, #0]
 800883a:	2f6f      	cmp	r7, #111	; 0x6f
 800883c:	bf0c      	ite	eq
 800883e:	2308      	moveq	r3, #8
 8008840:	230a      	movne	r3, #10
 8008842:	4851      	ldr	r0, [pc, #324]	; (8008988 <_printf_i+0x23c>)
 8008844:	2100      	movs	r1, #0
 8008846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800884a:	6865      	ldr	r5, [r4, #4]
 800884c:	2d00      	cmp	r5, #0
 800884e:	bfa8      	it	ge
 8008850:	6821      	ldrge	r1, [r4, #0]
 8008852:	60a5      	str	r5, [r4, #8]
 8008854:	bfa4      	itt	ge
 8008856:	f021 0104 	bicge.w	r1, r1, #4
 800885a:	6021      	strge	r1, [r4, #0]
 800885c:	b90e      	cbnz	r6, 8008862 <_printf_i+0x116>
 800885e:	2d00      	cmp	r5, #0
 8008860:	d04b      	beq.n	80088fa <_printf_i+0x1ae>
 8008862:	4615      	mov	r5, r2
 8008864:	fbb6 f1f3 	udiv	r1, r6, r3
 8008868:	fb03 6711 	mls	r7, r3, r1, r6
 800886c:	5dc7      	ldrb	r7, [r0, r7]
 800886e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008872:	4637      	mov	r7, r6
 8008874:	42bb      	cmp	r3, r7
 8008876:	460e      	mov	r6, r1
 8008878:	d9f4      	bls.n	8008864 <_printf_i+0x118>
 800887a:	2b08      	cmp	r3, #8
 800887c:	d10b      	bne.n	8008896 <_printf_i+0x14a>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	07de      	lsls	r6, r3, #31
 8008882:	d508      	bpl.n	8008896 <_printf_i+0x14a>
 8008884:	6923      	ldr	r3, [r4, #16]
 8008886:	6861      	ldr	r1, [r4, #4]
 8008888:	4299      	cmp	r1, r3
 800888a:	bfde      	ittt	le
 800888c:	2330      	movle	r3, #48	; 0x30
 800888e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008892:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008896:	1b52      	subs	r2, r2, r5
 8008898:	6122      	str	r2, [r4, #16]
 800889a:	464b      	mov	r3, r9
 800889c:	4621      	mov	r1, r4
 800889e:	4640      	mov	r0, r8
 80088a0:	f8cd a000 	str.w	sl, [sp]
 80088a4:	aa03      	add	r2, sp, #12
 80088a6:	f7ff fedf 	bl	8008668 <_printf_common>
 80088aa:	3001      	adds	r0, #1
 80088ac:	d14a      	bne.n	8008944 <_printf_i+0x1f8>
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295
 80088b2:	b004      	add	sp, #16
 80088b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	f043 0320 	orr.w	r3, r3, #32
 80088be:	6023      	str	r3, [r4, #0]
 80088c0:	2778      	movs	r7, #120	; 0x78
 80088c2:	4832      	ldr	r0, [pc, #200]	; (800898c <_printf_i+0x240>)
 80088c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	6829      	ldr	r1, [r5, #0]
 80088cc:	061f      	lsls	r7, r3, #24
 80088ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80088d2:	d402      	bmi.n	80088da <_printf_i+0x18e>
 80088d4:	065f      	lsls	r7, r3, #25
 80088d6:	bf48      	it	mi
 80088d8:	b2b6      	uxthmi	r6, r6
 80088da:	07df      	lsls	r7, r3, #31
 80088dc:	bf48      	it	mi
 80088de:	f043 0320 	orrmi.w	r3, r3, #32
 80088e2:	6029      	str	r1, [r5, #0]
 80088e4:	bf48      	it	mi
 80088e6:	6023      	strmi	r3, [r4, #0]
 80088e8:	b91e      	cbnz	r6, 80088f2 <_printf_i+0x1a6>
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	f023 0320 	bic.w	r3, r3, #32
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	2310      	movs	r3, #16
 80088f4:	e7a6      	b.n	8008844 <_printf_i+0xf8>
 80088f6:	4824      	ldr	r0, [pc, #144]	; (8008988 <_printf_i+0x23c>)
 80088f8:	e7e4      	b.n	80088c4 <_printf_i+0x178>
 80088fa:	4615      	mov	r5, r2
 80088fc:	e7bd      	b.n	800887a <_printf_i+0x12e>
 80088fe:	682b      	ldr	r3, [r5, #0]
 8008900:	6826      	ldr	r6, [r4, #0]
 8008902:	1d18      	adds	r0, r3, #4
 8008904:	6961      	ldr	r1, [r4, #20]
 8008906:	6028      	str	r0, [r5, #0]
 8008908:	0635      	lsls	r5, r6, #24
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	d501      	bpl.n	8008912 <_printf_i+0x1c6>
 800890e:	6019      	str	r1, [r3, #0]
 8008910:	e002      	b.n	8008918 <_printf_i+0x1cc>
 8008912:	0670      	lsls	r0, r6, #25
 8008914:	d5fb      	bpl.n	800890e <_printf_i+0x1c2>
 8008916:	8019      	strh	r1, [r3, #0]
 8008918:	2300      	movs	r3, #0
 800891a:	4615      	mov	r5, r2
 800891c:	6123      	str	r3, [r4, #16]
 800891e:	e7bc      	b.n	800889a <_printf_i+0x14e>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	2100      	movs	r1, #0
 8008924:	1d1a      	adds	r2, r3, #4
 8008926:	602a      	str	r2, [r5, #0]
 8008928:	681d      	ldr	r5, [r3, #0]
 800892a:	6862      	ldr	r2, [r4, #4]
 800892c:	4628      	mov	r0, r5
 800892e:	f000 fac5 	bl	8008ebc <memchr>
 8008932:	b108      	cbz	r0, 8008938 <_printf_i+0x1ec>
 8008934:	1b40      	subs	r0, r0, r5
 8008936:	6060      	str	r0, [r4, #4]
 8008938:	6863      	ldr	r3, [r4, #4]
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	2300      	movs	r3, #0
 800893e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008942:	e7aa      	b.n	800889a <_printf_i+0x14e>
 8008944:	462a      	mov	r2, r5
 8008946:	4649      	mov	r1, r9
 8008948:	4640      	mov	r0, r8
 800894a:	6923      	ldr	r3, [r4, #16]
 800894c:	47d0      	blx	sl
 800894e:	3001      	adds	r0, #1
 8008950:	d0ad      	beq.n	80088ae <_printf_i+0x162>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	079b      	lsls	r3, r3, #30
 8008956:	d413      	bmi.n	8008980 <_printf_i+0x234>
 8008958:	68e0      	ldr	r0, [r4, #12]
 800895a:	9b03      	ldr	r3, [sp, #12]
 800895c:	4298      	cmp	r0, r3
 800895e:	bfb8      	it	lt
 8008960:	4618      	movlt	r0, r3
 8008962:	e7a6      	b.n	80088b2 <_printf_i+0x166>
 8008964:	2301      	movs	r3, #1
 8008966:	4632      	mov	r2, r6
 8008968:	4649      	mov	r1, r9
 800896a:	4640      	mov	r0, r8
 800896c:	47d0      	blx	sl
 800896e:	3001      	adds	r0, #1
 8008970:	d09d      	beq.n	80088ae <_printf_i+0x162>
 8008972:	3501      	adds	r5, #1
 8008974:	68e3      	ldr	r3, [r4, #12]
 8008976:	9903      	ldr	r1, [sp, #12]
 8008978:	1a5b      	subs	r3, r3, r1
 800897a:	42ab      	cmp	r3, r5
 800897c:	dcf2      	bgt.n	8008964 <_printf_i+0x218>
 800897e:	e7eb      	b.n	8008958 <_printf_i+0x20c>
 8008980:	2500      	movs	r5, #0
 8008982:	f104 0619 	add.w	r6, r4, #25
 8008986:	e7f5      	b.n	8008974 <_printf_i+0x228>
 8008988:	0800b57d 	.word	0x0800b57d
 800898c:	0800b58e 	.word	0x0800b58e

08008990 <std>:
 8008990:	2300      	movs	r3, #0
 8008992:	b510      	push	{r4, lr}
 8008994:	4604      	mov	r4, r0
 8008996:	e9c0 3300 	strd	r3, r3, [r0]
 800899a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800899e:	6083      	str	r3, [r0, #8]
 80089a0:	8181      	strh	r1, [r0, #12]
 80089a2:	6643      	str	r3, [r0, #100]	; 0x64
 80089a4:	81c2      	strh	r2, [r0, #14]
 80089a6:	6183      	str	r3, [r0, #24]
 80089a8:	4619      	mov	r1, r3
 80089aa:	2208      	movs	r2, #8
 80089ac:	305c      	adds	r0, #92	; 0x5c
 80089ae:	f000 fa07 	bl	8008dc0 <memset>
 80089b2:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <std+0x38>)
 80089b4:	6224      	str	r4, [r4, #32]
 80089b6:	6263      	str	r3, [r4, #36]	; 0x24
 80089b8:	4b04      	ldr	r3, [pc, #16]	; (80089cc <std+0x3c>)
 80089ba:	62a3      	str	r3, [r4, #40]	; 0x28
 80089bc:	4b04      	ldr	r3, [pc, #16]	; (80089d0 <std+0x40>)
 80089be:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089c0:	4b04      	ldr	r3, [pc, #16]	; (80089d4 <std+0x44>)
 80089c2:	6323      	str	r3, [r4, #48]	; 0x30
 80089c4:	bd10      	pop	{r4, pc}
 80089c6:	bf00      	nop
 80089c8:	08008c11 	.word	0x08008c11
 80089cc:	08008c33 	.word	0x08008c33
 80089d0:	08008c6b 	.word	0x08008c6b
 80089d4:	08008c8f 	.word	0x08008c8f

080089d8 <stdio_exit_handler>:
 80089d8:	4a02      	ldr	r2, [pc, #8]	; (80089e4 <stdio_exit_handler+0xc>)
 80089da:	4903      	ldr	r1, [pc, #12]	; (80089e8 <stdio_exit_handler+0x10>)
 80089dc:	4803      	ldr	r0, [pc, #12]	; (80089ec <stdio_exit_handler+0x14>)
 80089de:	f000 b869 	b.w	8008ab4 <_fwalk_sglue>
 80089e2:	bf00      	nop
 80089e4:	2000000c 	.word	0x2000000c
 80089e8:	0800a86d 	.word	0x0800a86d
 80089ec:	20000018 	.word	0x20000018

080089f0 <cleanup_stdio>:
 80089f0:	6841      	ldr	r1, [r0, #4]
 80089f2:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <cleanup_stdio+0x34>)
 80089f4:	b510      	push	{r4, lr}
 80089f6:	4299      	cmp	r1, r3
 80089f8:	4604      	mov	r4, r0
 80089fa:	d001      	beq.n	8008a00 <cleanup_stdio+0x10>
 80089fc:	f001 ff36 	bl	800a86c <_fflush_r>
 8008a00:	68a1      	ldr	r1, [r4, #8]
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <cleanup_stdio+0x38>)
 8008a04:	4299      	cmp	r1, r3
 8008a06:	d002      	beq.n	8008a0e <cleanup_stdio+0x1e>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f001 ff2f 	bl	800a86c <_fflush_r>
 8008a0e:	68e1      	ldr	r1, [r4, #12]
 8008a10:	4b06      	ldr	r3, [pc, #24]	; (8008a2c <cleanup_stdio+0x3c>)
 8008a12:	4299      	cmp	r1, r3
 8008a14:	d004      	beq.n	8008a20 <cleanup_stdio+0x30>
 8008a16:	4620      	mov	r0, r4
 8008a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a1c:	f001 bf26 	b.w	800a86c <_fflush_r>
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	bf00      	nop
 8008a24:	200006f4 	.word	0x200006f4
 8008a28:	2000075c 	.word	0x2000075c
 8008a2c:	200007c4 	.word	0x200007c4

08008a30 <global_stdio_init.part.0>:
 8008a30:	b510      	push	{r4, lr}
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <global_stdio_init.part.0+0x30>)
 8008a34:	4c0b      	ldr	r4, [pc, #44]	; (8008a64 <global_stdio_init.part.0+0x34>)
 8008a36:	4a0c      	ldr	r2, [pc, #48]	; (8008a68 <global_stdio_init.part.0+0x38>)
 8008a38:	4620      	mov	r0, r4
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	2104      	movs	r1, #4
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f7ff ffa6 	bl	8008990 <std>
 8008a44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a48:	2201      	movs	r2, #1
 8008a4a:	2109      	movs	r1, #9
 8008a4c:	f7ff ffa0 	bl	8008990 <std>
 8008a50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a54:	2202      	movs	r2, #2
 8008a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a5a:	2112      	movs	r1, #18
 8008a5c:	f7ff bf98 	b.w	8008990 <std>
 8008a60:	2000082c 	.word	0x2000082c
 8008a64:	200006f4 	.word	0x200006f4
 8008a68:	080089d9 	.word	0x080089d9

08008a6c <__sfp_lock_acquire>:
 8008a6c:	4801      	ldr	r0, [pc, #4]	; (8008a74 <__sfp_lock_acquire+0x8>)
 8008a6e:	f000 ba23 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 8008a72:	bf00      	nop
 8008a74:	20000835 	.word	0x20000835

08008a78 <__sfp_lock_release>:
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <__sfp_lock_release+0x8>)
 8008a7a:	f000 ba1e 	b.w	8008eba <__retarget_lock_release_recursive>
 8008a7e:	bf00      	nop
 8008a80:	20000835 	.word	0x20000835

08008a84 <__sinit>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	4604      	mov	r4, r0
 8008a88:	f7ff fff0 	bl	8008a6c <__sfp_lock_acquire>
 8008a8c:	6a23      	ldr	r3, [r4, #32]
 8008a8e:	b11b      	cbz	r3, 8008a98 <__sinit+0x14>
 8008a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a94:	f7ff bff0 	b.w	8008a78 <__sfp_lock_release>
 8008a98:	4b04      	ldr	r3, [pc, #16]	; (8008aac <__sinit+0x28>)
 8008a9a:	6223      	str	r3, [r4, #32]
 8008a9c:	4b04      	ldr	r3, [pc, #16]	; (8008ab0 <__sinit+0x2c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1f5      	bne.n	8008a90 <__sinit+0xc>
 8008aa4:	f7ff ffc4 	bl	8008a30 <global_stdio_init.part.0>
 8008aa8:	e7f2      	b.n	8008a90 <__sinit+0xc>
 8008aaa:	bf00      	nop
 8008aac:	080089f1 	.word	0x080089f1
 8008ab0:	2000082c 	.word	0x2000082c

08008ab4 <_fwalk_sglue>:
 8008ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab8:	4607      	mov	r7, r0
 8008aba:	4688      	mov	r8, r1
 8008abc:	4614      	mov	r4, r2
 8008abe:	2600      	movs	r6, #0
 8008ac0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ac4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ac8:	d505      	bpl.n	8008ad6 <_fwalk_sglue+0x22>
 8008aca:	6824      	ldr	r4, [r4, #0]
 8008acc:	2c00      	cmp	r4, #0
 8008ace:	d1f7      	bne.n	8008ac0 <_fwalk_sglue+0xc>
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad6:	89ab      	ldrh	r3, [r5, #12]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d907      	bls.n	8008aec <_fwalk_sglue+0x38>
 8008adc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	d003      	beq.n	8008aec <_fwalk_sglue+0x38>
 8008ae4:	4629      	mov	r1, r5
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	47c0      	blx	r8
 8008aea:	4306      	orrs	r6, r0
 8008aec:	3568      	adds	r5, #104	; 0x68
 8008aee:	e7e9      	b.n	8008ac4 <_fwalk_sglue+0x10>

08008af0 <_puts_r>:
 8008af0:	6a03      	ldr	r3, [r0, #32]
 8008af2:	b570      	push	{r4, r5, r6, lr}
 8008af4:	4605      	mov	r5, r0
 8008af6:	460e      	mov	r6, r1
 8008af8:	6884      	ldr	r4, [r0, #8]
 8008afa:	b90b      	cbnz	r3, 8008b00 <_puts_r+0x10>
 8008afc:	f7ff ffc2 	bl	8008a84 <__sinit>
 8008b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b02:	07db      	lsls	r3, r3, #31
 8008b04:	d405      	bmi.n	8008b12 <_puts_r+0x22>
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	0598      	lsls	r0, r3, #22
 8008b0a:	d402      	bmi.n	8008b12 <_puts_r+0x22>
 8008b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b0e:	f000 f9d3 	bl	8008eb8 <__retarget_lock_acquire_recursive>
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	0719      	lsls	r1, r3, #28
 8008b16:	d513      	bpl.n	8008b40 <_puts_r+0x50>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	b18b      	cbz	r3, 8008b40 <_puts_r+0x50>
 8008b1c:	3e01      	subs	r6, #1
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b24:	3b01      	subs	r3, #1
 8008b26:	60a3      	str	r3, [r4, #8]
 8008b28:	b9e9      	cbnz	r1, 8008b66 <_puts_r+0x76>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da2e      	bge.n	8008b8c <_puts_r+0x9c>
 8008b2e:	4622      	mov	r2, r4
 8008b30:	210a      	movs	r1, #10
 8008b32:	4628      	mov	r0, r5
 8008b34:	f000 f8af 	bl	8008c96 <__swbuf_r>
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d007      	beq.n	8008b4c <_puts_r+0x5c>
 8008b3c:	250a      	movs	r5, #10
 8008b3e:	e007      	b.n	8008b50 <_puts_r+0x60>
 8008b40:	4621      	mov	r1, r4
 8008b42:	4628      	mov	r0, r5
 8008b44:	f000 f8e4 	bl	8008d10 <__swsetup_r>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d0e7      	beq.n	8008b1c <_puts_r+0x2c>
 8008b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8008b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b52:	07da      	lsls	r2, r3, #31
 8008b54:	d405      	bmi.n	8008b62 <_puts_r+0x72>
 8008b56:	89a3      	ldrh	r3, [r4, #12]
 8008b58:	059b      	lsls	r3, r3, #22
 8008b5a:	d402      	bmi.n	8008b62 <_puts_r+0x72>
 8008b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b5e:	f000 f9ac 	bl	8008eba <__retarget_lock_release_recursive>
 8008b62:	4628      	mov	r0, r5
 8008b64:	bd70      	pop	{r4, r5, r6, pc}
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	da04      	bge.n	8008b74 <_puts_r+0x84>
 8008b6a:	69a2      	ldr	r2, [r4, #24]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	dc06      	bgt.n	8008b7e <_puts_r+0x8e>
 8008b70:	290a      	cmp	r1, #10
 8008b72:	d004      	beq.n	8008b7e <_puts_r+0x8e>
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	1c5a      	adds	r2, r3, #1
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	7019      	strb	r1, [r3, #0]
 8008b7c:	e7cf      	b.n	8008b1e <_puts_r+0x2e>
 8008b7e:	4622      	mov	r2, r4
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 f888 	bl	8008c96 <__swbuf_r>
 8008b86:	3001      	adds	r0, #1
 8008b88:	d1c9      	bne.n	8008b1e <_puts_r+0x2e>
 8008b8a:	e7df      	b.n	8008b4c <_puts_r+0x5c>
 8008b8c:	250a      	movs	r5, #10
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	6022      	str	r2, [r4, #0]
 8008b94:	701d      	strb	r5, [r3, #0]
 8008b96:	e7db      	b.n	8008b50 <_puts_r+0x60>

08008b98 <puts>:
 8008b98:	4b02      	ldr	r3, [pc, #8]	; (8008ba4 <puts+0xc>)
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	6818      	ldr	r0, [r3, #0]
 8008b9e:	f7ff bfa7 	b.w	8008af0 <_puts_r>
 8008ba2:	bf00      	nop
 8008ba4:	20000064 	.word	0x20000064

08008ba8 <sniprintf>:
 8008ba8:	b40c      	push	{r2, r3}
 8008baa:	b530      	push	{r4, r5, lr}
 8008bac:	4b17      	ldr	r3, [pc, #92]	; (8008c0c <sniprintf+0x64>)
 8008bae:	1e0c      	subs	r4, r1, #0
 8008bb0:	681d      	ldr	r5, [r3, #0]
 8008bb2:	b09d      	sub	sp, #116	; 0x74
 8008bb4:	da08      	bge.n	8008bc8 <sniprintf+0x20>
 8008bb6:	238b      	movs	r3, #139	; 0x8b
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	b01d      	add	sp, #116	; 0x74
 8008bc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bc4:	b002      	add	sp, #8
 8008bc6:	4770      	bx	lr
 8008bc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008bcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008bd0:	bf0c      	ite	eq
 8008bd2:	4623      	moveq	r3, r4
 8008bd4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008bd8:	9304      	str	r3, [sp, #16]
 8008bda:	9307      	str	r3, [sp, #28]
 8008bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008be0:	9002      	str	r0, [sp, #8]
 8008be2:	9006      	str	r0, [sp, #24]
 8008be4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008be8:	4628      	mov	r0, r5
 8008bea:	ab21      	add	r3, sp, #132	; 0x84
 8008bec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bee:	a902      	add	r1, sp, #8
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f001 fcbb 	bl	800a56c <_svfiprintf_r>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	bfbc      	itt	lt
 8008bfa:	238b      	movlt	r3, #139	; 0x8b
 8008bfc:	602b      	strlt	r3, [r5, #0]
 8008bfe:	2c00      	cmp	r4, #0
 8008c00:	d0dd      	beq.n	8008bbe <sniprintf+0x16>
 8008c02:	2200      	movs	r2, #0
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	701a      	strb	r2, [r3, #0]
 8008c08:	e7d9      	b.n	8008bbe <sniprintf+0x16>
 8008c0a:	bf00      	nop
 8008c0c:	20000064 	.word	0x20000064

08008c10 <__sread>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	460c      	mov	r4, r1
 8008c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c18:	f000 f900 	bl	8008e1c <_read_r>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	bfab      	itete	ge
 8008c20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c22:	89a3      	ldrhlt	r3, [r4, #12]
 8008c24:	181b      	addge	r3, r3, r0
 8008c26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c2a:	bfac      	ite	ge
 8008c2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c2e:	81a3      	strhlt	r3, [r4, #12]
 8008c30:	bd10      	pop	{r4, pc}

08008c32 <__swrite>:
 8008c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c36:	461f      	mov	r7, r3
 8008c38:	898b      	ldrh	r3, [r1, #12]
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	05db      	lsls	r3, r3, #23
 8008c3e:	460c      	mov	r4, r1
 8008c40:	4616      	mov	r6, r2
 8008c42:	d505      	bpl.n	8008c50 <__swrite+0x1e>
 8008c44:	2302      	movs	r3, #2
 8008c46:	2200      	movs	r2, #0
 8008c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4c:	f000 f8d4 	bl	8008df8 <_lseek_r>
 8008c50:	89a3      	ldrh	r3, [r4, #12]
 8008c52:	4632      	mov	r2, r6
 8008c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	463b      	mov	r3, r7
 8008c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	f000 b8eb 	b.w	8008e40 <_write_r>

08008c6a <__sseek>:
 8008c6a:	b510      	push	{r4, lr}
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c72:	f000 f8c1 	bl	8008df8 <_lseek_r>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	bf15      	itete	ne
 8008c7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c86:	81a3      	strheq	r3, [r4, #12]
 8008c88:	bf18      	it	ne
 8008c8a:	81a3      	strhne	r3, [r4, #12]
 8008c8c:	bd10      	pop	{r4, pc}

08008c8e <__sclose>:
 8008c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c92:	f000 b8a1 	b.w	8008dd8 <_close_r>

08008c96 <__swbuf_r>:
 8008c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c98:	460e      	mov	r6, r1
 8008c9a:	4614      	mov	r4, r2
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	b118      	cbz	r0, 8008ca8 <__swbuf_r+0x12>
 8008ca0:	6a03      	ldr	r3, [r0, #32]
 8008ca2:	b90b      	cbnz	r3, 8008ca8 <__swbuf_r+0x12>
 8008ca4:	f7ff feee 	bl	8008a84 <__sinit>
 8008ca8:	69a3      	ldr	r3, [r4, #24]
 8008caa:	60a3      	str	r3, [r4, #8]
 8008cac:	89a3      	ldrh	r3, [r4, #12]
 8008cae:	071a      	lsls	r2, r3, #28
 8008cb0:	d525      	bpl.n	8008cfe <__swbuf_r+0x68>
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	b31b      	cbz	r3, 8008cfe <__swbuf_r+0x68>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	6922      	ldr	r2, [r4, #16]
 8008cba:	b2f6      	uxtb	r6, r6
 8008cbc:	1a98      	subs	r0, r3, r2
 8008cbe:	6963      	ldr	r3, [r4, #20]
 8008cc0:	4637      	mov	r7, r6
 8008cc2:	4283      	cmp	r3, r0
 8008cc4:	dc04      	bgt.n	8008cd0 <__swbuf_r+0x3a>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4628      	mov	r0, r5
 8008cca:	f001 fdcf 	bl	800a86c <_fflush_r>
 8008cce:	b9e0      	cbnz	r0, 8008d0a <__swbuf_r+0x74>
 8008cd0:	68a3      	ldr	r3, [r4, #8]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	701e      	strb	r6, [r3, #0]
 8008cde:	6962      	ldr	r2, [r4, #20]
 8008ce0:	1c43      	adds	r3, r0, #1
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d004      	beq.n	8008cf0 <__swbuf_r+0x5a>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	07db      	lsls	r3, r3, #31
 8008cea:	d506      	bpl.n	8008cfa <__swbuf_r+0x64>
 8008cec:	2e0a      	cmp	r6, #10
 8008cee:	d104      	bne.n	8008cfa <__swbuf_r+0x64>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f001 fdba 	bl	800a86c <_fflush_r>
 8008cf8:	b938      	cbnz	r0, 8008d0a <__swbuf_r+0x74>
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4628      	mov	r0, r5
 8008d02:	f000 f805 	bl	8008d10 <__swsetup_r>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d0d5      	beq.n	8008cb6 <__swbuf_r+0x20>
 8008d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8008d0e:	e7f4      	b.n	8008cfa <__swbuf_r+0x64>

08008d10 <__swsetup_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4b2a      	ldr	r3, [pc, #168]	; (8008dbc <__swsetup_r+0xac>)
 8008d14:	4605      	mov	r5, r0
 8008d16:	6818      	ldr	r0, [r3, #0]
 8008d18:	460c      	mov	r4, r1
 8008d1a:	b118      	cbz	r0, 8008d24 <__swsetup_r+0x14>
 8008d1c:	6a03      	ldr	r3, [r0, #32]
 8008d1e:	b90b      	cbnz	r3, 8008d24 <__swsetup_r+0x14>
 8008d20:	f7ff feb0 	bl	8008a84 <__sinit>
 8008d24:	89a3      	ldrh	r3, [r4, #12]
 8008d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d2a:	0718      	lsls	r0, r3, #28
 8008d2c:	d422      	bmi.n	8008d74 <__swsetup_r+0x64>
 8008d2e:	06d9      	lsls	r1, r3, #27
 8008d30:	d407      	bmi.n	8008d42 <__swsetup_r+0x32>
 8008d32:	2309      	movs	r3, #9
 8008d34:	602b      	str	r3, [r5, #0]
 8008d36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3e:	81a3      	strh	r3, [r4, #12]
 8008d40:	e034      	b.n	8008dac <__swsetup_r+0x9c>
 8008d42:	0758      	lsls	r0, r3, #29
 8008d44:	d512      	bpl.n	8008d6c <__swsetup_r+0x5c>
 8008d46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d48:	b141      	cbz	r1, 8008d5c <__swsetup_r+0x4c>
 8008d4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d4e:	4299      	cmp	r1, r3
 8008d50:	d002      	beq.n	8008d58 <__swsetup_r+0x48>
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 ff3c 	bl	8009bd0 <_free_r>
 8008d58:	2300      	movs	r3, #0
 8008d5a:	6363      	str	r3, [r4, #52]	; 0x34
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	2300      	movs	r3, #0
 8008d66:	6063      	str	r3, [r4, #4]
 8008d68:	6923      	ldr	r3, [r4, #16]
 8008d6a:	6023      	str	r3, [r4, #0]
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	f043 0308 	orr.w	r3, r3, #8
 8008d72:	81a3      	strh	r3, [r4, #12]
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	b94b      	cbnz	r3, 8008d8c <__swsetup_r+0x7c>
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d82:	d003      	beq.n	8008d8c <__swsetup_r+0x7c>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f001 fdbd 	bl	800a906 <__smakebuf_r>
 8008d8c:	89a0      	ldrh	r0, [r4, #12]
 8008d8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d92:	f010 0301 	ands.w	r3, r0, #1
 8008d96:	d00a      	beq.n	8008dae <__swsetup_r+0x9e>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	60a3      	str	r3, [r4, #8]
 8008d9c:	6963      	ldr	r3, [r4, #20]
 8008d9e:	425b      	negs	r3, r3
 8008da0:	61a3      	str	r3, [r4, #24]
 8008da2:	6923      	ldr	r3, [r4, #16]
 8008da4:	b943      	cbnz	r3, 8008db8 <__swsetup_r+0xa8>
 8008da6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008daa:	d1c4      	bne.n	8008d36 <__swsetup_r+0x26>
 8008dac:	bd38      	pop	{r3, r4, r5, pc}
 8008dae:	0781      	lsls	r1, r0, #30
 8008db0:	bf58      	it	pl
 8008db2:	6963      	ldrpl	r3, [r4, #20]
 8008db4:	60a3      	str	r3, [r4, #8]
 8008db6:	e7f4      	b.n	8008da2 <__swsetup_r+0x92>
 8008db8:	2000      	movs	r0, #0
 8008dba:	e7f7      	b.n	8008dac <__swsetup_r+0x9c>
 8008dbc:	20000064 	.word	0x20000064

08008dc0 <memset>:
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	4402      	add	r2, r0
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d100      	bne.n	8008dca <memset+0xa>
 8008dc8:	4770      	bx	lr
 8008dca:	f803 1b01 	strb.w	r1, [r3], #1
 8008dce:	e7f9      	b.n	8008dc4 <memset+0x4>

08008dd0 <_localeconv_r>:
 8008dd0:	4800      	ldr	r0, [pc, #0]	; (8008dd4 <_localeconv_r+0x4>)
 8008dd2:	4770      	bx	lr
 8008dd4:	20000158 	.word	0x20000158

08008dd8 <_close_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	2300      	movs	r3, #0
 8008ddc:	4d05      	ldr	r5, [pc, #20]	; (8008df4 <_close_r+0x1c>)
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7fa f89a 	bl	8002f1c <_close>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_close_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_close_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20000830 	.word	0x20000830

08008df8 <_lseek_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4608      	mov	r0, r1
 8008dfe:	4611      	mov	r1, r2
 8008e00:	2200      	movs	r2, #0
 8008e02:	4d05      	ldr	r5, [pc, #20]	; (8008e18 <_lseek_r+0x20>)
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7fa f8ac 	bl	8002f64 <_lseek>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_lseek_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_lseek_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	20000830 	.word	0x20000830

08008e1c <_read_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4604      	mov	r4, r0
 8008e20:	4608      	mov	r0, r1
 8008e22:	4611      	mov	r1, r2
 8008e24:	2200      	movs	r2, #0
 8008e26:	4d05      	ldr	r5, [pc, #20]	; (8008e3c <_read_r+0x20>)
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7fa f83d 	bl	8002eaa <_read>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_read_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_read_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	20000830 	.word	0x20000830

08008e40 <_write_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	4611      	mov	r1, r2
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4d05      	ldr	r5, [pc, #20]	; (8008e60 <_write_r+0x20>)
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f7fa f848 	bl	8002ee4 <_write>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_write_r+0x1e>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_write_r+0x1e>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20000830 	.word	0x20000830

08008e64 <__errno>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	; (8008e6c <__errno+0x8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000064 	.word	0x20000064

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	2600      	movs	r6, #0
 8008e74:	4d0c      	ldr	r5, [pc, #48]	; (8008ea8 <__libc_init_array+0x38>)
 8008e76:	4c0d      	ldr	r4, [pc, #52]	; (8008eac <__libc_init_array+0x3c>)
 8008e78:	1b64      	subs	r4, r4, r5
 8008e7a:	10a4      	asrs	r4, r4, #2
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	f002 fa50 	bl	800b324 <_init>
 8008e84:	2600      	movs	r6, #0
 8008e86:	4d0a      	ldr	r5, [pc, #40]	; (8008eb0 <__libc_init_array+0x40>)
 8008e88:	4c0a      	ldr	r4, [pc, #40]	; (8008eb4 <__libc_init_array+0x44>)
 8008e8a:	1b64      	subs	r4, r4, r5
 8008e8c:	10a4      	asrs	r4, r4, #2
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	0800b850 	.word	0x0800b850
 8008eac:	0800b850 	.word	0x0800b850
 8008eb0:	0800b850 	.word	0x0800b850
 8008eb4:	0800b854 	.word	0x0800b854

08008eb8 <__retarget_lock_acquire_recursive>:
 8008eb8:	4770      	bx	lr

08008eba <__retarget_lock_release_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <memchr>:
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	b510      	push	{r4, lr}
 8008ec0:	b2c9      	uxtb	r1, r1
 8008ec2:	4402      	add	r2, r0
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	d101      	bne.n	8008ece <memchr+0x12>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	e003      	b.n	8008ed6 <memchr+0x1a>
 8008ece:	7804      	ldrb	r4, [r0, #0]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	428c      	cmp	r4, r1
 8008ed4:	d1f6      	bne.n	8008ec4 <memchr+0x8>
 8008ed6:	bd10      	pop	{r4, pc}

08008ed8 <memcpy>:
 8008ed8:	440a      	add	r2, r1
 8008eda:	4291      	cmp	r1, r2
 8008edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ee0:	d100      	bne.n	8008ee4 <memcpy+0xc>
 8008ee2:	4770      	bx	lr
 8008ee4:	b510      	push	{r4, lr}
 8008ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eea:	4291      	cmp	r1, r2
 8008eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ef0:	d1f9      	bne.n	8008ee6 <memcpy+0xe>
 8008ef2:	bd10      	pop	{r4, pc}

08008ef4 <quorem>:
 8008ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	6903      	ldr	r3, [r0, #16]
 8008efa:	690c      	ldr	r4, [r1, #16]
 8008efc:	4607      	mov	r7, r0
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	db7f      	blt.n	8009002 <quorem+0x10e>
 8008f02:	3c01      	subs	r4, #1
 8008f04:	f100 0514 	add.w	r5, r0, #20
 8008f08:	f101 0814 	add.w	r8, r1, #20
 8008f0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f22:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008f26:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f2a:	d331      	bcc.n	8008f90 <quorem+0x9c>
 8008f2c:	f04f 0e00 	mov.w	lr, #0
 8008f30:	4640      	mov	r0, r8
 8008f32:	46ac      	mov	ip, r5
 8008f34:	46f2      	mov	sl, lr
 8008f36:	f850 2b04 	ldr.w	r2, [r0], #4
 8008f3a:	b293      	uxth	r3, r2
 8008f3c:	fb06 e303 	mla	r3, r6, r3, lr
 8008f40:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f44:	0c1a      	lsrs	r2, r3, #16
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	fb06 220e 	mla	r2, r6, lr, r2
 8008f4c:	ebaa 0303 	sub.w	r3, sl, r3
 8008f50:	f8dc a000 	ldr.w	sl, [ip]
 8008f54:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f58:	fa1f fa8a 	uxth.w	sl, sl
 8008f5c:	4453      	add	r3, sl
 8008f5e:	f8dc a000 	ldr.w	sl, [ip]
 8008f62:	b292      	uxth	r2, r2
 8008f64:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008f68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f72:	4581      	cmp	r9, r0
 8008f74:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f78:	f84c 3b04 	str.w	r3, [ip], #4
 8008f7c:	d2db      	bcs.n	8008f36 <quorem+0x42>
 8008f7e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f82:	b92b      	cbnz	r3, 8008f90 <quorem+0x9c>
 8008f84:	9b01      	ldr	r3, [sp, #4]
 8008f86:	3b04      	subs	r3, #4
 8008f88:	429d      	cmp	r5, r3
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	d32d      	bcc.n	8008fea <quorem+0xf6>
 8008f8e:	613c      	str	r4, [r7, #16]
 8008f90:	4638      	mov	r0, r7
 8008f92:	f001 f993 	bl	800a2bc <__mcmp>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	db23      	blt.n	8008fe2 <quorem+0xee>
 8008f9a:	4629      	mov	r1, r5
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	3601      	adds	r6, #1
 8008fa0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fa4:	f8d1 c000 	ldr.w	ip, [r1]
 8008fa8:	b293      	uxth	r3, r2
 8008faa:	1ac3      	subs	r3, r0, r3
 8008fac:	0c12      	lsrs	r2, r2, #16
 8008fae:	fa1f f08c 	uxth.w	r0, ip
 8008fb2:	4403      	add	r3, r0
 8008fb4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008fb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008fc2:	45c1      	cmp	r9, r8
 8008fc4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008fc8:	f841 3b04 	str.w	r3, [r1], #4
 8008fcc:	d2e8      	bcs.n	8008fa0 <quorem+0xac>
 8008fce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008fd6:	b922      	cbnz	r2, 8008fe2 <quorem+0xee>
 8008fd8:	3b04      	subs	r3, #4
 8008fda:	429d      	cmp	r5, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	d30a      	bcc.n	8008ff6 <quorem+0x102>
 8008fe0:	613c      	str	r4, [r7, #16]
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	b003      	add	sp, #12
 8008fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	3b04      	subs	r3, #4
 8008fee:	2a00      	cmp	r2, #0
 8008ff0:	d1cd      	bne.n	8008f8e <quorem+0x9a>
 8008ff2:	3c01      	subs	r4, #1
 8008ff4:	e7c8      	b.n	8008f88 <quorem+0x94>
 8008ff6:	6812      	ldr	r2, [r2, #0]
 8008ff8:	3b04      	subs	r3, #4
 8008ffa:	2a00      	cmp	r2, #0
 8008ffc:	d1f0      	bne.n	8008fe0 <quorem+0xec>
 8008ffe:	3c01      	subs	r4, #1
 8009000:	e7eb      	b.n	8008fda <quorem+0xe6>
 8009002:	2000      	movs	r0, #0
 8009004:	e7ee      	b.n	8008fe4 <quorem+0xf0>
	...

08009008 <_dtoa_r>:
 8009008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800900c:	4616      	mov	r6, r2
 800900e:	461f      	mov	r7, r3
 8009010:	69c4      	ldr	r4, [r0, #28]
 8009012:	b099      	sub	sp, #100	; 0x64
 8009014:	4605      	mov	r5, r0
 8009016:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800901a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800901e:	b974      	cbnz	r4, 800903e <_dtoa_r+0x36>
 8009020:	2010      	movs	r0, #16
 8009022:	f000 fe1d 	bl	8009c60 <malloc>
 8009026:	4602      	mov	r2, r0
 8009028:	61e8      	str	r0, [r5, #28]
 800902a:	b920      	cbnz	r0, 8009036 <_dtoa_r+0x2e>
 800902c:	21ef      	movs	r1, #239	; 0xef
 800902e:	4bac      	ldr	r3, [pc, #688]	; (80092e0 <_dtoa_r+0x2d8>)
 8009030:	48ac      	ldr	r0, [pc, #688]	; (80092e4 <_dtoa_r+0x2dc>)
 8009032:	f001 fcf1 	bl	800aa18 <__assert_func>
 8009036:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800903a:	6004      	str	r4, [r0, #0]
 800903c:	60c4      	str	r4, [r0, #12]
 800903e:	69eb      	ldr	r3, [r5, #28]
 8009040:	6819      	ldr	r1, [r3, #0]
 8009042:	b151      	cbz	r1, 800905a <_dtoa_r+0x52>
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	2301      	movs	r3, #1
 8009048:	4093      	lsls	r3, r2
 800904a:	604a      	str	r2, [r1, #4]
 800904c:	608b      	str	r3, [r1, #8]
 800904e:	4628      	mov	r0, r5
 8009050:	f000 fefa 	bl	8009e48 <_Bfree>
 8009054:	2200      	movs	r2, #0
 8009056:	69eb      	ldr	r3, [r5, #28]
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	1e3b      	subs	r3, r7, #0
 800905c:	bfaf      	iteee	ge
 800905e:	2300      	movge	r3, #0
 8009060:	2201      	movlt	r2, #1
 8009062:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009066:	9305      	strlt	r3, [sp, #20]
 8009068:	bfa8      	it	ge
 800906a:	f8c8 3000 	strge.w	r3, [r8]
 800906e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009072:	4b9d      	ldr	r3, [pc, #628]	; (80092e8 <_dtoa_r+0x2e0>)
 8009074:	bfb8      	it	lt
 8009076:	f8c8 2000 	strlt.w	r2, [r8]
 800907a:	ea33 0309 	bics.w	r3, r3, r9
 800907e:	d119      	bne.n	80090b4 <_dtoa_r+0xac>
 8009080:	f242 730f 	movw	r3, #9999	; 0x270f
 8009084:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800908c:	4333      	orrs	r3, r6
 800908e:	f000 8589 	beq.w	8009ba4 <_dtoa_r+0xb9c>
 8009092:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009094:	b953      	cbnz	r3, 80090ac <_dtoa_r+0xa4>
 8009096:	4b95      	ldr	r3, [pc, #596]	; (80092ec <_dtoa_r+0x2e4>)
 8009098:	e023      	b.n	80090e2 <_dtoa_r+0xda>
 800909a:	4b95      	ldr	r3, [pc, #596]	; (80092f0 <_dtoa_r+0x2e8>)
 800909c:	9303      	str	r3, [sp, #12]
 800909e:	3308      	adds	r3, #8
 80090a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	9803      	ldr	r0, [sp, #12]
 80090a6:	b019      	add	sp, #100	; 0x64
 80090a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ac:	4b8f      	ldr	r3, [pc, #572]	; (80092ec <_dtoa_r+0x2e4>)
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	3303      	adds	r3, #3
 80090b2:	e7f5      	b.n	80090a0 <_dtoa_r+0x98>
 80090b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80090b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80090bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090c0:	2200      	movs	r2, #0
 80090c2:	2300      	movs	r3, #0
 80090c4:	f7f7 fc7a 	bl	80009bc <__aeabi_dcmpeq>
 80090c8:	4680      	mov	r8, r0
 80090ca:	b160      	cbz	r0, 80090e6 <_dtoa_r+0xde>
 80090cc:	2301      	movs	r3, #1
 80090ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80090d0:	6013      	str	r3, [r2, #0]
 80090d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8562 	beq.w	8009b9e <_dtoa_r+0xb96>
 80090da:	4b86      	ldr	r3, [pc, #536]	; (80092f4 <_dtoa_r+0x2ec>)
 80090dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80090de:	6013      	str	r3, [r2, #0]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	9303      	str	r3, [sp, #12]
 80090e4:	e7de      	b.n	80090a4 <_dtoa_r+0x9c>
 80090e6:	ab16      	add	r3, sp, #88	; 0x58
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	ab17      	add	r3, sp, #92	; 0x5c
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	4628      	mov	r0, r5
 80090f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80090f4:	f001 f98a 	bl	800a40c <__d2b>
 80090f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80090fc:	4682      	mov	sl, r0
 80090fe:	2c00      	cmp	r4, #0
 8009100:	d07e      	beq.n	8009200 <_dtoa_r+0x1f8>
 8009102:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009108:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800910c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009110:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009114:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009118:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800911c:	4619      	mov	r1, r3
 800911e:	2200      	movs	r2, #0
 8009120:	4b75      	ldr	r3, [pc, #468]	; (80092f8 <_dtoa_r+0x2f0>)
 8009122:	f7f7 f82b 	bl	800017c <__aeabi_dsub>
 8009126:	a368      	add	r3, pc, #416	; (adr r3, 80092c8 <_dtoa_r+0x2c0>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 f9de 	bl	80004ec <__aeabi_dmul>
 8009130:	a367      	add	r3, pc, #412	; (adr r3, 80092d0 <_dtoa_r+0x2c8>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 f823 	bl	8000180 <__adddf3>
 800913a:	4606      	mov	r6, r0
 800913c:	4620      	mov	r0, r4
 800913e:	460f      	mov	r7, r1
 8009140:	f7f7 f96a 	bl	8000418 <__aeabi_i2d>
 8009144:	a364      	add	r3, pc, #400	; (adr r3, 80092d8 <_dtoa_r+0x2d0>)
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	f7f7 f9cf 	bl	80004ec <__aeabi_dmul>
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	4630      	mov	r0, r6
 8009154:	4639      	mov	r1, r7
 8009156:	f7f7 f813 	bl	8000180 <__adddf3>
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	f7f7 fc75 	bl	8000a4c <__aeabi_d2iz>
 8009162:	2200      	movs	r2, #0
 8009164:	4683      	mov	fp, r0
 8009166:	2300      	movs	r3, #0
 8009168:	4630      	mov	r0, r6
 800916a:	4639      	mov	r1, r7
 800916c:	f7f7 fc30 	bl	80009d0 <__aeabi_dcmplt>
 8009170:	b148      	cbz	r0, 8009186 <_dtoa_r+0x17e>
 8009172:	4658      	mov	r0, fp
 8009174:	f7f7 f950 	bl	8000418 <__aeabi_i2d>
 8009178:	4632      	mov	r2, r6
 800917a:	463b      	mov	r3, r7
 800917c:	f7f7 fc1e 	bl	80009bc <__aeabi_dcmpeq>
 8009180:	b908      	cbnz	r0, 8009186 <_dtoa_r+0x17e>
 8009182:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009186:	f1bb 0f16 	cmp.w	fp, #22
 800918a:	d857      	bhi.n	800923c <_dtoa_r+0x234>
 800918c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009190:	4b5a      	ldr	r3, [pc, #360]	; (80092fc <_dtoa_r+0x2f4>)
 8009192:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f7 fc19 	bl	80009d0 <__aeabi_dcmplt>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d04e      	beq.n	8009240 <_dtoa_r+0x238>
 80091a2:	2300      	movs	r3, #0
 80091a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80091aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80091ac:	1b1b      	subs	r3, r3, r4
 80091ae:	1e5a      	subs	r2, r3, #1
 80091b0:	bf46      	itte	mi
 80091b2:	f1c3 0901 	rsbmi	r9, r3, #1
 80091b6:	2300      	movmi	r3, #0
 80091b8:	f04f 0900 	movpl.w	r9, #0
 80091bc:	9209      	str	r2, [sp, #36]	; 0x24
 80091be:	bf48      	it	mi
 80091c0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80091c2:	f1bb 0f00 	cmp.w	fp, #0
 80091c6:	db3d      	blt.n	8009244 <_dtoa_r+0x23c>
 80091c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ca:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80091ce:	445b      	add	r3, fp
 80091d0:	9309      	str	r3, [sp, #36]	; 0x24
 80091d2:	2300      	movs	r3, #0
 80091d4:	930a      	str	r3, [sp, #40]	; 0x28
 80091d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091d8:	2b09      	cmp	r3, #9
 80091da:	d867      	bhi.n	80092ac <_dtoa_r+0x2a4>
 80091dc:	2b05      	cmp	r3, #5
 80091de:	bfc4      	itt	gt
 80091e0:	3b04      	subgt	r3, #4
 80091e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80091e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80091e6:	bfc8      	it	gt
 80091e8:	2400      	movgt	r4, #0
 80091ea:	f1a3 0302 	sub.w	r3, r3, #2
 80091ee:	bfd8      	it	le
 80091f0:	2401      	movle	r4, #1
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	f200 8086 	bhi.w	8009304 <_dtoa_r+0x2fc>
 80091f8:	e8df f003 	tbb	[pc, r3]
 80091fc:	5637392c 	.word	0x5637392c
 8009200:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009204:	441c      	add	r4, r3
 8009206:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800920a:	2b20      	cmp	r3, #32
 800920c:	bfc1      	itttt	gt
 800920e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009212:	fa09 f903 	lslgt.w	r9, r9, r3
 8009216:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800921a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800921e:	bfd6      	itet	le
 8009220:	f1c3 0320 	rsble	r3, r3, #32
 8009224:	ea49 0003 	orrgt.w	r0, r9, r3
 8009228:	fa06 f003 	lslle.w	r0, r6, r3
 800922c:	f7f7 f8e4 	bl	80003f8 <__aeabi_ui2d>
 8009230:	2201      	movs	r2, #1
 8009232:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009236:	3c01      	subs	r4, #1
 8009238:	9213      	str	r2, [sp, #76]	; 0x4c
 800923a:	e76f      	b.n	800911c <_dtoa_r+0x114>
 800923c:	2301      	movs	r3, #1
 800923e:	e7b3      	b.n	80091a8 <_dtoa_r+0x1a0>
 8009240:	900f      	str	r0, [sp, #60]	; 0x3c
 8009242:	e7b2      	b.n	80091aa <_dtoa_r+0x1a2>
 8009244:	f1cb 0300 	rsb	r3, fp, #0
 8009248:	930a      	str	r3, [sp, #40]	; 0x28
 800924a:	2300      	movs	r3, #0
 800924c:	eba9 090b 	sub.w	r9, r9, fp
 8009250:	930e      	str	r3, [sp, #56]	; 0x38
 8009252:	e7c0      	b.n	80091d6 <_dtoa_r+0x1ce>
 8009254:	2300      	movs	r3, #0
 8009256:	930b      	str	r3, [sp, #44]	; 0x2c
 8009258:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800925a:	2b00      	cmp	r3, #0
 800925c:	dc55      	bgt.n	800930a <_dtoa_r+0x302>
 800925e:	2301      	movs	r3, #1
 8009260:	461a      	mov	r2, r3
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	9308      	str	r3, [sp, #32]
 8009266:	9223      	str	r2, [sp, #140]	; 0x8c
 8009268:	e00b      	b.n	8009282 <_dtoa_r+0x27a>
 800926a:	2301      	movs	r3, #1
 800926c:	e7f3      	b.n	8009256 <_dtoa_r+0x24e>
 800926e:	2300      	movs	r3, #0
 8009270:	930b      	str	r3, [sp, #44]	; 0x2c
 8009272:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009274:	445b      	add	r3, fp
 8009276:	9306      	str	r3, [sp, #24]
 8009278:	3301      	adds	r3, #1
 800927a:	2b01      	cmp	r3, #1
 800927c:	9308      	str	r3, [sp, #32]
 800927e:	bfb8      	it	lt
 8009280:	2301      	movlt	r3, #1
 8009282:	2100      	movs	r1, #0
 8009284:	2204      	movs	r2, #4
 8009286:	69e8      	ldr	r0, [r5, #28]
 8009288:	f102 0614 	add.w	r6, r2, #20
 800928c:	429e      	cmp	r6, r3
 800928e:	d940      	bls.n	8009312 <_dtoa_r+0x30a>
 8009290:	6041      	str	r1, [r0, #4]
 8009292:	4628      	mov	r0, r5
 8009294:	f000 fd98 	bl	8009dc8 <_Balloc>
 8009298:	9003      	str	r0, [sp, #12]
 800929a:	2800      	cmp	r0, #0
 800929c:	d13c      	bne.n	8009318 <_dtoa_r+0x310>
 800929e:	4602      	mov	r2, r0
 80092a0:	f240 11af 	movw	r1, #431	; 0x1af
 80092a4:	4b16      	ldr	r3, [pc, #88]	; (8009300 <_dtoa_r+0x2f8>)
 80092a6:	e6c3      	b.n	8009030 <_dtoa_r+0x28>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e7e1      	b.n	8009270 <_dtoa_r+0x268>
 80092ac:	2401      	movs	r4, #1
 80092ae:	2300      	movs	r3, #0
 80092b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80092b2:	9322      	str	r3, [sp, #136]	; 0x88
 80092b4:	f04f 33ff 	mov.w	r3, #4294967295
 80092b8:	2200      	movs	r2, #0
 80092ba:	9306      	str	r3, [sp, #24]
 80092bc:	9308      	str	r3, [sp, #32]
 80092be:	2312      	movs	r3, #18
 80092c0:	e7d1      	b.n	8009266 <_dtoa_r+0x25e>
 80092c2:	bf00      	nop
 80092c4:	f3af 8000 	nop.w
 80092c8:	636f4361 	.word	0x636f4361
 80092cc:	3fd287a7 	.word	0x3fd287a7
 80092d0:	8b60c8b3 	.word	0x8b60c8b3
 80092d4:	3fc68a28 	.word	0x3fc68a28
 80092d8:	509f79fb 	.word	0x509f79fb
 80092dc:	3fd34413 	.word	0x3fd34413
 80092e0:	0800b5ac 	.word	0x0800b5ac
 80092e4:	0800b5c3 	.word	0x0800b5c3
 80092e8:	7ff00000 	.word	0x7ff00000
 80092ec:	0800b5a8 	.word	0x0800b5a8
 80092f0:	0800b59f 	.word	0x0800b59f
 80092f4:	0800b57c 	.word	0x0800b57c
 80092f8:	3ff80000 	.word	0x3ff80000
 80092fc:	0800b6b0 	.word	0x0800b6b0
 8009300:	0800b61b 	.word	0x0800b61b
 8009304:	2301      	movs	r3, #1
 8009306:	930b      	str	r3, [sp, #44]	; 0x2c
 8009308:	e7d4      	b.n	80092b4 <_dtoa_r+0x2ac>
 800930a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800930c:	9306      	str	r3, [sp, #24]
 800930e:	9308      	str	r3, [sp, #32]
 8009310:	e7b7      	b.n	8009282 <_dtoa_r+0x27a>
 8009312:	3101      	adds	r1, #1
 8009314:	0052      	lsls	r2, r2, #1
 8009316:	e7b7      	b.n	8009288 <_dtoa_r+0x280>
 8009318:	69eb      	ldr	r3, [r5, #28]
 800931a:	9a03      	ldr	r2, [sp, #12]
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	2b0e      	cmp	r3, #14
 8009322:	f200 80a8 	bhi.w	8009476 <_dtoa_r+0x46e>
 8009326:	2c00      	cmp	r4, #0
 8009328:	f000 80a5 	beq.w	8009476 <_dtoa_r+0x46e>
 800932c:	f1bb 0f00 	cmp.w	fp, #0
 8009330:	dd34      	ble.n	800939c <_dtoa_r+0x394>
 8009332:	4b9a      	ldr	r3, [pc, #616]	; (800959c <_dtoa_r+0x594>)
 8009334:	f00b 020f 	and.w	r2, fp, #15
 8009338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800933c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009340:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009344:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009348:	ea4f 142b 	mov.w	r4, fp, asr #4
 800934c:	d016      	beq.n	800937c <_dtoa_r+0x374>
 800934e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009352:	4b93      	ldr	r3, [pc, #588]	; (80095a0 <_dtoa_r+0x598>)
 8009354:	2703      	movs	r7, #3
 8009356:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800935a:	f7f7 f9f1 	bl	8000740 <__aeabi_ddiv>
 800935e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009362:	f004 040f 	and.w	r4, r4, #15
 8009366:	4e8e      	ldr	r6, [pc, #568]	; (80095a0 <_dtoa_r+0x598>)
 8009368:	b954      	cbnz	r4, 8009380 <_dtoa_r+0x378>
 800936a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800936e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009372:	f7f7 f9e5 	bl	8000740 <__aeabi_ddiv>
 8009376:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800937a:	e029      	b.n	80093d0 <_dtoa_r+0x3c8>
 800937c:	2702      	movs	r7, #2
 800937e:	e7f2      	b.n	8009366 <_dtoa_r+0x35e>
 8009380:	07e1      	lsls	r1, r4, #31
 8009382:	d508      	bpl.n	8009396 <_dtoa_r+0x38e>
 8009384:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009388:	e9d6 2300 	ldrd	r2, r3, [r6]
 800938c:	f7f7 f8ae 	bl	80004ec <__aeabi_dmul>
 8009390:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009394:	3701      	adds	r7, #1
 8009396:	1064      	asrs	r4, r4, #1
 8009398:	3608      	adds	r6, #8
 800939a:	e7e5      	b.n	8009368 <_dtoa_r+0x360>
 800939c:	f000 80a5 	beq.w	80094ea <_dtoa_r+0x4e2>
 80093a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093a4:	f1cb 0400 	rsb	r4, fp, #0
 80093a8:	4b7c      	ldr	r3, [pc, #496]	; (800959c <_dtoa_r+0x594>)
 80093aa:	f004 020f 	and.w	r2, r4, #15
 80093ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f7f7 f899 	bl	80004ec <__aeabi_dmul>
 80093ba:	2702      	movs	r7, #2
 80093bc:	2300      	movs	r3, #0
 80093be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093c2:	4e77      	ldr	r6, [pc, #476]	; (80095a0 <_dtoa_r+0x598>)
 80093c4:	1124      	asrs	r4, r4, #4
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	f040 8084 	bne.w	80094d4 <_dtoa_r+0x4cc>
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1d2      	bne.n	8009376 <_dtoa_r+0x36e>
 80093d0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80093d4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80093d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 8087 	beq.w	80094ee <_dtoa_r+0x4e6>
 80093e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093e4:	2200      	movs	r2, #0
 80093e6:	4b6f      	ldr	r3, [pc, #444]	; (80095a4 <_dtoa_r+0x59c>)
 80093e8:	f7f7 faf2 	bl	80009d0 <__aeabi_dcmplt>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	d07e      	beq.n	80094ee <_dtoa_r+0x4e6>
 80093f0:	9b08      	ldr	r3, [sp, #32]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d07b      	beq.n	80094ee <_dtoa_r+0x4e6>
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	dd38      	ble.n	800946e <_dtoa_r+0x466>
 80093fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009400:	2200      	movs	r2, #0
 8009402:	4b69      	ldr	r3, [pc, #420]	; (80095a8 <_dtoa_r+0x5a0>)
 8009404:	f7f7 f872 	bl	80004ec <__aeabi_dmul>
 8009408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800940c:	9c06      	ldr	r4, [sp, #24]
 800940e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009412:	3701      	adds	r7, #1
 8009414:	4638      	mov	r0, r7
 8009416:	f7f6 ffff 	bl	8000418 <__aeabi_i2d>
 800941a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800941e:	f7f7 f865 	bl	80004ec <__aeabi_dmul>
 8009422:	2200      	movs	r2, #0
 8009424:	4b61      	ldr	r3, [pc, #388]	; (80095ac <_dtoa_r+0x5a4>)
 8009426:	f7f6 feab 	bl	8000180 <__adddf3>
 800942a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800942e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009432:	9611      	str	r6, [sp, #68]	; 0x44
 8009434:	2c00      	cmp	r4, #0
 8009436:	d15d      	bne.n	80094f4 <_dtoa_r+0x4ec>
 8009438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800943c:	2200      	movs	r2, #0
 800943e:	4b5c      	ldr	r3, [pc, #368]	; (80095b0 <_dtoa_r+0x5a8>)
 8009440:	f7f6 fe9c 	bl	800017c <__aeabi_dsub>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800944c:	4633      	mov	r3, r6
 800944e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009450:	f7f7 fadc 	bl	8000a0c <__aeabi_dcmpgt>
 8009454:	2800      	cmp	r0, #0
 8009456:	f040 8295 	bne.w	8009984 <_dtoa_r+0x97c>
 800945a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800945e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009460:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009464:	f7f7 fab4 	bl	80009d0 <__aeabi_dcmplt>
 8009468:	2800      	cmp	r0, #0
 800946a:	f040 8289 	bne.w	8009980 <_dtoa_r+0x978>
 800946e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009472:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009476:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009478:	2b00      	cmp	r3, #0
 800947a:	f2c0 8151 	blt.w	8009720 <_dtoa_r+0x718>
 800947e:	f1bb 0f0e 	cmp.w	fp, #14
 8009482:	f300 814d 	bgt.w	8009720 <_dtoa_r+0x718>
 8009486:	4b45      	ldr	r3, [pc, #276]	; (800959c <_dtoa_r+0x594>)
 8009488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800948c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009490:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009494:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009496:	2b00      	cmp	r3, #0
 8009498:	f280 80da 	bge.w	8009650 <_dtoa_r+0x648>
 800949c:	9b08      	ldr	r3, [sp, #32]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f300 80d6 	bgt.w	8009650 <_dtoa_r+0x648>
 80094a4:	f040 826b 	bne.w	800997e <_dtoa_r+0x976>
 80094a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094ac:	2200      	movs	r2, #0
 80094ae:	4b40      	ldr	r3, [pc, #256]	; (80095b0 <_dtoa_r+0x5a8>)
 80094b0:	f7f7 f81c 	bl	80004ec <__aeabi_dmul>
 80094b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094b8:	f7f7 fa9e 	bl	80009f8 <__aeabi_dcmpge>
 80094bc:	9c08      	ldr	r4, [sp, #32]
 80094be:	4626      	mov	r6, r4
 80094c0:	2800      	cmp	r0, #0
 80094c2:	f040 8241 	bne.w	8009948 <_dtoa_r+0x940>
 80094c6:	2331      	movs	r3, #49	; 0x31
 80094c8:	9f03      	ldr	r7, [sp, #12]
 80094ca:	f10b 0b01 	add.w	fp, fp, #1
 80094ce:	f807 3b01 	strb.w	r3, [r7], #1
 80094d2:	e23d      	b.n	8009950 <_dtoa_r+0x948>
 80094d4:	07e2      	lsls	r2, r4, #31
 80094d6:	d505      	bpl.n	80094e4 <_dtoa_r+0x4dc>
 80094d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094dc:	f7f7 f806 	bl	80004ec <__aeabi_dmul>
 80094e0:	2301      	movs	r3, #1
 80094e2:	3701      	adds	r7, #1
 80094e4:	1064      	asrs	r4, r4, #1
 80094e6:	3608      	adds	r6, #8
 80094e8:	e76d      	b.n	80093c6 <_dtoa_r+0x3be>
 80094ea:	2702      	movs	r7, #2
 80094ec:	e770      	b.n	80093d0 <_dtoa_r+0x3c8>
 80094ee:	46d8      	mov	r8, fp
 80094f0:	9c08      	ldr	r4, [sp, #32]
 80094f2:	e78f      	b.n	8009414 <_dtoa_r+0x40c>
 80094f4:	9903      	ldr	r1, [sp, #12]
 80094f6:	4b29      	ldr	r3, [pc, #164]	; (800959c <_dtoa_r+0x594>)
 80094f8:	4421      	add	r1, r4
 80094fa:	9112      	str	r1, [sp, #72]	; 0x48
 80094fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009502:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009506:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800950a:	2900      	cmp	r1, #0
 800950c:	d054      	beq.n	80095b8 <_dtoa_r+0x5b0>
 800950e:	2000      	movs	r0, #0
 8009510:	4928      	ldr	r1, [pc, #160]	; (80095b4 <_dtoa_r+0x5ac>)
 8009512:	f7f7 f915 	bl	8000740 <__aeabi_ddiv>
 8009516:	463b      	mov	r3, r7
 8009518:	4632      	mov	r2, r6
 800951a:	f7f6 fe2f 	bl	800017c <__aeabi_dsub>
 800951e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009522:	9f03      	ldr	r7, [sp, #12]
 8009524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009528:	f7f7 fa90 	bl	8000a4c <__aeabi_d2iz>
 800952c:	4604      	mov	r4, r0
 800952e:	f7f6 ff73 	bl	8000418 <__aeabi_i2d>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800953a:	f7f6 fe1f 	bl	800017c <__aeabi_dsub>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	3430      	adds	r4, #48	; 0x30
 8009544:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800954c:	f807 4b01 	strb.w	r4, [r7], #1
 8009550:	f7f7 fa3e 	bl	80009d0 <__aeabi_dcmplt>
 8009554:	2800      	cmp	r0, #0
 8009556:	d173      	bne.n	8009640 <_dtoa_r+0x638>
 8009558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800955c:	2000      	movs	r0, #0
 800955e:	4911      	ldr	r1, [pc, #68]	; (80095a4 <_dtoa_r+0x59c>)
 8009560:	f7f6 fe0c 	bl	800017c <__aeabi_dsub>
 8009564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009568:	f7f7 fa32 	bl	80009d0 <__aeabi_dcmplt>
 800956c:	2800      	cmp	r0, #0
 800956e:	f040 80b6 	bne.w	80096de <_dtoa_r+0x6d6>
 8009572:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009574:	429f      	cmp	r7, r3
 8009576:	f43f af7a 	beq.w	800946e <_dtoa_r+0x466>
 800957a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800957e:	2200      	movs	r2, #0
 8009580:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <_dtoa_r+0x5a0>)
 8009582:	f7f6 ffb3 	bl	80004ec <__aeabi_dmul>
 8009586:	2200      	movs	r2, #0
 8009588:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800958c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <_dtoa_r+0x5a0>)
 8009592:	f7f6 ffab 	bl	80004ec <__aeabi_dmul>
 8009596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800959a:	e7c3      	b.n	8009524 <_dtoa_r+0x51c>
 800959c:	0800b6b0 	.word	0x0800b6b0
 80095a0:	0800b688 	.word	0x0800b688
 80095a4:	3ff00000 	.word	0x3ff00000
 80095a8:	40240000 	.word	0x40240000
 80095ac:	401c0000 	.word	0x401c0000
 80095b0:	40140000 	.word	0x40140000
 80095b4:	3fe00000 	.word	0x3fe00000
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	f7f6 ff96 	bl	80004ec <__aeabi_dmul>
 80095c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80095c6:	9c03      	ldr	r4, [sp, #12]
 80095c8:	9314      	str	r3, [sp, #80]	; 0x50
 80095ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095ce:	f7f7 fa3d 	bl	8000a4c <__aeabi_d2iz>
 80095d2:	9015      	str	r0, [sp, #84]	; 0x54
 80095d4:	f7f6 ff20 	bl	8000418 <__aeabi_i2d>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095e0:	f7f6 fdcc 	bl	800017c <__aeabi_dsub>
 80095e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095e6:	4606      	mov	r6, r0
 80095e8:	3330      	adds	r3, #48	; 0x30
 80095ea:	f804 3b01 	strb.w	r3, [r4], #1
 80095ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095f0:	460f      	mov	r7, r1
 80095f2:	429c      	cmp	r4, r3
 80095f4:	f04f 0200 	mov.w	r2, #0
 80095f8:	d124      	bne.n	8009644 <_dtoa_r+0x63c>
 80095fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095fe:	4baf      	ldr	r3, [pc, #700]	; (80098bc <_dtoa_r+0x8b4>)
 8009600:	f7f6 fdbe 	bl	8000180 <__adddf3>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4630      	mov	r0, r6
 800960a:	4639      	mov	r1, r7
 800960c:	f7f7 f9fe 	bl	8000a0c <__aeabi_dcmpgt>
 8009610:	2800      	cmp	r0, #0
 8009612:	d163      	bne.n	80096dc <_dtoa_r+0x6d4>
 8009614:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009618:	2000      	movs	r0, #0
 800961a:	49a8      	ldr	r1, [pc, #672]	; (80098bc <_dtoa_r+0x8b4>)
 800961c:	f7f6 fdae 	bl	800017c <__aeabi_dsub>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f7 f9d2 	bl	80009d0 <__aeabi_dcmplt>
 800962c:	2800      	cmp	r0, #0
 800962e:	f43f af1e 	beq.w	800946e <_dtoa_r+0x466>
 8009632:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009634:	1e7b      	subs	r3, r7, #1
 8009636:	9314      	str	r3, [sp, #80]	; 0x50
 8009638:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800963c:	2b30      	cmp	r3, #48	; 0x30
 800963e:	d0f8      	beq.n	8009632 <_dtoa_r+0x62a>
 8009640:	46c3      	mov	fp, r8
 8009642:	e03b      	b.n	80096bc <_dtoa_r+0x6b4>
 8009644:	4b9e      	ldr	r3, [pc, #632]	; (80098c0 <_dtoa_r+0x8b8>)
 8009646:	f7f6 ff51 	bl	80004ec <__aeabi_dmul>
 800964a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800964e:	e7bc      	b.n	80095ca <_dtoa_r+0x5c2>
 8009650:	9f03      	ldr	r7, [sp, #12]
 8009652:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009656:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800965a:	4640      	mov	r0, r8
 800965c:	4649      	mov	r1, r9
 800965e:	f7f7 f86f 	bl	8000740 <__aeabi_ddiv>
 8009662:	f7f7 f9f3 	bl	8000a4c <__aeabi_d2iz>
 8009666:	4604      	mov	r4, r0
 8009668:	f7f6 fed6 	bl	8000418 <__aeabi_i2d>
 800966c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009670:	f7f6 ff3c 	bl	80004ec <__aeabi_dmul>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4640      	mov	r0, r8
 800967a:	4649      	mov	r1, r9
 800967c:	f7f6 fd7e 	bl	800017c <__aeabi_dsub>
 8009680:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009684:	f807 6b01 	strb.w	r6, [r7], #1
 8009688:	9e03      	ldr	r6, [sp, #12]
 800968a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800968e:	1bbe      	subs	r6, r7, r6
 8009690:	45b4      	cmp	ip, r6
 8009692:	4602      	mov	r2, r0
 8009694:	460b      	mov	r3, r1
 8009696:	d136      	bne.n	8009706 <_dtoa_r+0x6fe>
 8009698:	f7f6 fd72 	bl	8000180 <__adddf3>
 800969c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096a0:	4680      	mov	r8, r0
 80096a2:	4689      	mov	r9, r1
 80096a4:	f7f7 f9b2 	bl	8000a0c <__aeabi_dcmpgt>
 80096a8:	bb58      	cbnz	r0, 8009702 <_dtoa_r+0x6fa>
 80096aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096ae:	4640      	mov	r0, r8
 80096b0:	4649      	mov	r1, r9
 80096b2:	f7f7 f983 	bl	80009bc <__aeabi_dcmpeq>
 80096b6:	b108      	cbz	r0, 80096bc <_dtoa_r+0x6b4>
 80096b8:	07e3      	lsls	r3, r4, #31
 80096ba:	d422      	bmi.n	8009702 <_dtoa_r+0x6fa>
 80096bc:	4651      	mov	r1, sl
 80096be:	4628      	mov	r0, r5
 80096c0:	f000 fbc2 	bl	8009e48 <_Bfree>
 80096c4:	2300      	movs	r3, #0
 80096c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80096c8:	703b      	strb	r3, [r7, #0]
 80096ca:	f10b 0301 	add.w	r3, fp, #1
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	f43f ace6 	beq.w	80090a4 <_dtoa_r+0x9c>
 80096d8:	601f      	str	r7, [r3, #0]
 80096da:	e4e3      	b.n	80090a4 <_dtoa_r+0x9c>
 80096dc:	4627      	mov	r7, r4
 80096de:	463b      	mov	r3, r7
 80096e0:	461f      	mov	r7, r3
 80096e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096e6:	2a39      	cmp	r2, #57	; 0x39
 80096e8:	d107      	bne.n	80096fa <_dtoa_r+0x6f2>
 80096ea:	9a03      	ldr	r2, [sp, #12]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d1f7      	bne.n	80096e0 <_dtoa_r+0x6d8>
 80096f0:	2230      	movs	r2, #48	; 0x30
 80096f2:	9903      	ldr	r1, [sp, #12]
 80096f4:	f108 0801 	add.w	r8, r8, #1
 80096f8:	700a      	strb	r2, [r1, #0]
 80096fa:	781a      	ldrb	r2, [r3, #0]
 80096fc:	3201      	adds	r2, #1
 80096fe:	701a      	strb	r2, [r3, #0]
 8009700:	e79e      	b.n	8009640 <_dtoa_r+0x638>
 8009702:	46d8      	mov	r8, fp
 8009704:	e7eb      	b.n	80096de <_dtoa_r+0x6d6>
 8009706:	2200      	movs	r2, #0
 8009708:	4b6d      	ldr	r3, [pc, #436]	; (80098c0 <_dtoa_r+0x8b8>)
 800970a:	f7f6 feef 	bl	80004ec <__aeabi_dmul>
 800970e:	2200      	movs	r2, #0
 8009710:	2300      	movs	r3, #0
 8009712:	4680      	mov	r8, r0
 8009714:	4689      	mov	r9, r1
 8009716:	f7f7 f951 	bl	80009bc <__aeabi_dcmpeq>
 800971a:	2800      	cmp	r0, #0
 800971c:	d09b      	beq.n	8009656 <_dtoa_r+0x64e>
 800971e:	e7cd      	b.n	80096bc <_dtoa_r+0x6b4>
 8009720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009722:	2a00      	cmp	r2, #0
 8009724:	f000 80c4 	beq.w	80098b0 <_dtoa_r+0x8a8>
 8009728:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800972a:	2a01      	cmp	r2, #1
 800972c:	f300 80a8 	bgt.w	8009880 <_dtoa_r+0x878>
 8009730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009732:	2a00      	cmp	r2, #0
 8009734:	f000 80a0 	beq.w	8009878 <_dtoa_r+0x870>
 8009738:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800973c:	464f      	mov	r7, r9
 800973e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009742:	2101      	movs	r1, #1
 8009744:	441a      	add	r2, r3
 8009746:	4628      	mov	r0, r5
 8009748:	4499      	add	r9, r3
 800974a:	9209      	str	r2, [sp, #36]	; 0x24
 800974c:	f000 fc32 	bl	8009fb4 <__i2b>
 8009750:	4606      	mov	r6, r0
 8009752:	b15f      	cbz	r7, 800976c <_dtoa_r+0x764>
 8009754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009756:	2b00      	cmp	r3, #0
 8009758:	dd08      	ble.n	800976c <_dtoa_r+0x764>
 800975a:	42bb      	cmp	r3, r7
 800975c:	bfa8      	it	ge
 800975e:	463b      	movge	r3, r7
 8009760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009762:	eba9 0903 	sub.w	r9, r9, r3
 8009766:	1aff      	subs	r7, r7, r3
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	9309      	str	r3, [sp, #36]	; 0x24
 800976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976e:	b1f3      	cbz	r3, 80097ae <_dtoa_r+0x7a6>
 8009770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009772:	2b00      	cmp	r3, #0
 8009774:	f000 80a0 	beq.w	80098b8 <_dtoa_r+0x8b0>
 8009778:	2c00      	cmp	r4, #0
 800977a:	dd10      	ble.n	800979e <_dtoa_r+0x796>
 800977c:	4631      	mov	r1, r6
 800977e:	4622      	mov	r2, r4
 8009780:	4628      	mov	r0, r5
 8009782:	f000 fcd5 	bl	800a130 <__pow5mult>
 8009786:	4652      	mov	r2, sl
 8009788:	4601      	mov	r1, r0
 800978a:	4606      	mov	r6, r0
 800978c:	4628      	mov	r0, r5
 800978e:	f000 fc27 	bl	8009fe0 <__multiply>
 8009792:	4680      	mov	r8, r0
 8009794:	4651      	mov	r1, sl
 8009796:	4628      	mov	r0, r5
 8009798:	f000 fb56 	bl	8009e48 <_Bfree>
 800979c:	46c2      	mov	sl, r8
 800979e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a0:	1b1a      	subs	r2, r3, r4
 80097a2:	d004      	beq.n	80097ae <_dtoa_r+0x7a6>
 80097a4:	4651      	mov	r1, sl
 80097a6:	4628      	mov	r0, r5
 80097a8:	f000 fcc2 	bl	800a130 <__pow5mult>
 80097ac:	4682      	mov	sl, r0
 80097ae:	2101      	movs	r1, #1
 80097b0:	4628      	mov	r0, r5
 80097b2:	f000 fbff 	bl	8009fb4 <__i2b>
 80097b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b8:	4604      	mov	r4, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f340 8082 	ble.w	80098c4 <_dtoa_r+0x8bc>
 80097c0:	461a      	mov	r2, r3
 80097c2:	4601      	mov	r1, r0
 80097c4:	4628      	mov	r0, r5
 80097c6:	f000 fcb3 	bl	800a130 <__pow5mult>
 80097ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097cc:	4604      	mov	r4, r0
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	dd7b      	ble.n	80098ca <_dtoa_r+0x8c2>
 80097d2:	f04f 0800 	mov.w	r8, #0
 80097d6:	6923      	ldr	r3, [r4, #16]
 80097d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097dc:	6918      	ldr	r0, [r3, #16]
 80097de:	f000 fb9b 	bl	8009f18 <__hi0bits>
 80097e2:	f1c0 0020 	rsb	r0, r0, #32
 80097e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e8:	4418      	add	r0, r3
 80097ea:	f010 001f 	ands.w	r0, r0, #31
 80097ee:	f000 8092 	beq.w	8009916 <_dtoa_r+0x90e>
 80097f2:	f1c0 0320 	rsb	r3, r0, #32
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	f340 8085 	ble.w	8009906 <_dtoa_r+0x8fe>
 80097fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fe:	f1c0 001c 	rsb	r0, r0, #28
 8009802:	4403      	add	r3, r0
 8009804:	4481      	add	r9, r0
 8009806:	4407      	add	r7, r0
 8009808:	9309      	str	r3, [sp, #36]	; 0x24
 800980a:	f1b9 0f00 	cmp.w	r9, #0
 800980e:	dd05      	ble.n	800981c <_dtoa_r+0x814>
 8009810:	4651      	mov	r1, sl
 8009812:	464a      	mov	r2, r9
 8009814:	4628      	mov	r0, r5
 8009816:	f000 fce5 	bl	800a1e4 <__lshift>
 800981a:	4682      	mov	sl, r0
 800981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	dd05      	ble.n	800982e <_dtoa_r+0x826>
 8009822:	4621      	mov	r1, r4
 8009824:	461a      	mov	r2, r3
 8009826:	4628      	mov	r0, r5
 8009828:	f000 fcdc 	bl	800a1e4 <__lshift>
 800982c:	4604      	mov	r4, r0
 800982e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d072      	beq.n	800991a <_dtoa_r+0x912>
 8009834:	4621      	mov	r1, r4
 8009836:	4650      	mov	r0, sl
 8009838:	f000 fd40 	bl	800a2bc <__mcmp>
 800983c:	2800      	cmp	r0, #0
 800983e:	da6c      	bge.n	800991a <_dtoa_r+0x912>
 8009840:	2300      	movs	r3, #0
 8009842:	4651      	mov	r1, sl
 8009844:	220a      	movs	r2, #10
 8009846:	4628      	mov	r0, r5
 8009848:	f000 fb20 	bl	8009e8c <__multadd>
 800984c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800984e:	4682      	mov	sl, r0
 8009850:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 81ac 	beq.w	8009bb2 <_dtoa_r+0xbaa>
 800985a:	2300      	movs	r3, #0
 800985c:	4631      	mov	r1, r6
 800985e:	220a      	movs	r2, #10
 8009860:	4628      	mov	r0, r5
 8009862:	f000 fb13 	bl	8009e8c <__multadd>
 8009866:	9b06      	ldr	r3, [sp, #24]
 8009868:	4606      	mov	r6, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	f300 8093 	bgt.w	8009996 <_dtoa_r+0x98e>
 8009870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009872:	2b02      	cmp	r3, #2
 8009874:	dc59      	bgt.n	800992a <_dtoa_r+0x922>
 8009876:	e08e      	b.n	8009996 <_dtoa_r+0x98e>
 8009878:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800987a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800987e:	e75d      	b.n	800973c <_dtoa_r+0x734>
 8009880:	9b08      	ldr	r3, [sp, #32]
 8009882:	1e5c      	subs	r4, r3, #1
 8009884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009886:	42a3      	cmp	r3, r4
 8009888:	bfbf      	itttt	lt
 800988a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800988c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800988e:	1ae3      	sublt	r3, r4, r3
 8009890:	18d2      	addlt	r2, r2, r3
 8009892:	bfa8      	it	ge
 8009894:	1b1c      	subge	r4, r3, r4
 8009896:	9b08      	ldr	r3, [sp, #32]
 8009898:	bfbe      	ittt	lt
 800989a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800989c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800989e:	2400      	movlt	r4, #0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfb5      	itete	lt
 80098a4:	eba9 0703 	sublt.w	r7, r9, r3
 80098a8:	464f      	movge	r7, r9
 80098aa:	2300      	movlt	r3, #0
 80098ac:	9b08      	ldrge	r3, [sp, #32]
 80098ae:	e747      	b.n	8009740 <_dtoa_r+0x738>
 80098b0:	464f      	mov	r7, r9
 80098b2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80098b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80098b6:	e74c      	b.n	8009752 <_dtoa_r+0x74a>
 80098b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ba:	e773      	b.n	80097a4 <_dtoa_r+0x79c>
 80098bc:	3fe00000 	.word	0x3fe00000
 80098c0:	40240000 	.word	0x40240000
 80098c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	dc18      	bgt.n	80098fc <_dtoa_r+0x8f4>
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	b9b3      	cbnz	r3, 80098fc <_dtoa_r+0x8f4>
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098d4:	b993      	cbnz	r3, 80098fc <_dtoa_r+0x8f4>
 80098d6:	9b05      	ldr	r3, [sp, #20]
 80098d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	0d1b      	lsrs	r3, r3, #20
 80098de:	051b      	lsls	r3, r3, #20
 80098e0:	b17b      	cbz	r3, 8009902 <_dtoa_r+0x8fa>
 80098e2:	f04f 0801 	mov.w	r8, #1
 80098e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e8:	f109 0901 	add.w	r9, r9, #1
 80098ec:	3301      	adds	r3, #1
 80098ee:	9309      	str	r3, [sp, #36]	; 0x24
 80098f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f47f af6f 	bne.w	80097d6 <_dtoa_r+0x7ce>
 80098f8:	2001      	movs	r0, #1
 80098fa:	e774      	b.n	80097e6 <_dtoa_r+0x7de>
 80098fc:	f04f 0800 	mov.w	r8, #0
 8009900:	e7f6      	b.n	80098f0 <_dtoa_r+0x8e8>
 8009902:	4698      	mov	r8, r3
 8009904:	e7f4      	b.n	80098f0 <_dtoa_r+0x8e8>
 8009906:	d080      	beq.n	800980a <_dtoa_r+0x802>
 8009908:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800990a:	331c      	adds	r3, #28
 800990c:	441a      	add	r2, r3
 800990e:	4499      	add	r9, r3
 8009910:	441f      	add	r7, r3
 8009912:	9209      	str	r2, [sp, #36]	; 0x24
 8009914:	e779      	b.n	800980a <_dtoa_r+0x802>
 8009916:	4603      	mov	r3, r0
 8009918:	e7f6      	b.n	8009908 <_dtoa_r+0x900>
 800991a:	9b08      	ldr	r3, [sp, #32]
 800991c:	2b00      	cmp	r3, #0
 800991e:	dc34      	bgt.n	800998a <_dtoa_r+0x982>
 8009920:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009922:	2b02      	cmp	r3, #2
 8009924:	dd31      	ble.n	800998a <_dtoa_r+0x982>
 8009926:	9b08      	ldr	r3, [sp, #32]
 8009928:	9306      	str	r3, [sp, #24]
 800992a:	9b06      	ldr	r3, [sp, #24]
 800992c:	b963      	cbnz	r3, 8009948 <_dtoa_r+0x940>
 800992e:	4621      	mov	r1, r4
 8009930:	2205      	movs	r2, #5
 8009932:	4628      	mov	r0, r5
 8009934:	f000 faaa 	bl	8009e8c <__multadd>
 8009938:	4601      	mov	r1, r0
 800993a:	4604      	mov	r4, r0
 800993c:	4650      	mov	r0, sl
 800993e:	f000 fcbd 	bl	800a2bc <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	f73f adbf 	bgt.w	80094c6 <_dtoa_r+0x4be>
 8009948:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800994a:	9f03      	ldr	r7, [sp, #12]
 800994c:	ea6f 0b03 	mvn.w	fp, r3
 8009950:	f04f 0800 	mov.w	r8, #0
 8009954:	4621      	mov	r1, r4
 8009956:	4628      	mov	r0, r5
 8009958:	f000 fa76 	bl	8009e48 <_Bfree>
 800995c:	2e00      	cmp	r6, #0
 800995e:	f43f aead 	beq.w	80096bc <_dtoa_r+0x6b4>
 8009962:	f1b8 0f00 	cmp.w	r8, #0
 8009966:	d005      	beq.n	8009974 <_dtoa_r+0x96c>
 8009968:	45b0      	cmp	r8, r6
 800996a:	d003      	beq.n	8009974 <_dtoa_r+0x96c>
 800996c:	4641      	mov	r1, r8
 800996e:	4628      	mov	r0, r5
 8009970:	f000 fa6a 	bl	8009e48 <_Bfree>
 8009974:	4631      	mov	r1, r6
 8009976:	4628      	mov	r0, r5
 8009978:	f000 fa66 	bl	8009e48 <_Bfree>
 800997c:	e69e      	b.n	80096bc <_dtoa_r+0x6b4>
 800997e:	2400      	movs	r4, #0
 8009980:	4626      	mov	r6, r4
 8009982:	e7e1      	b.n	8009948 <_dtoa_r+0x940>
 8009984:	46c3      	mov	fp, r8
 8009986:	4626      	mov	r6, r4
 8009988:	e59d      	b.n	80094c6 <_dtoa_r+0x4be>
 800998a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 80c8 	beq.w	8009b22 <_dtoa_r+0xb1a>
 8009992:	9b08      	ldr	r3, [sp, #32]
 8009994:	9306      	str	r3, [sp, #24]
 8009996:	2f00      	cmp	r7, #0
 8009998:	dd05      	ble.n	80099a6 <_dtoa_r+0x99e>
 800999a:	4631      	mov	r1, r6
 800999c:	463a      	mov	r2, r7
 800999e:	4628      	mov	r0, r5
 80099a0:	f000 fc20 	bl	800a1e4 <__lshift>
 80099a4:	4606      	mov	r6, r0
 80099a6:	f1b8 0f00 	cmp.w	r8, #0
 80099aa:	d05b      	beq.n	8009a64 <_dtoa_r+0xa5c>
 80099ac:	4628      	mov	r0, r5
 80099ae:	6871      	ldr	r1, [r6, #4]
 80099b0:	f000 fa0a 	bl	8009dc8 <_Balloc>
 80099b4:	4607      	mov	r7, r0
 80099b6:	b928      	cbnz	r0, 80099c4 <_dtoa_r+0x9bc>
 80099b8:	4602      	mov	r2, r0
 80099ba:	f240 21ef 	movw	r1, #751	; 0x2ef
 80099be:	4b81      	ldr	r3, [pc, #516]	; (8009bc4 <_dtoa_r+0xbbc>)
 80099c0:	f7ff bb36 	b.w	8009030 <_dtoa_r+0x28>
 80099c4:	6932      	ldr	r2, [r6, #16]
 80099c6:	f106 010c 	add.w	r1, r6, #12
 80099ca:	3202      	adds	r2, #2
 80099cc:	0092      	lsls	r2, r2, #2
 80099ce:	300c      	adds	r0, #12
 80099d0:	f7ff fa82 	bl	8008ed8 <memcpy>
 80099d4:	2201      	movs	r2, #1
 80099d6:	4639      	mov	r1, r7
 80099d8:	4628      	mov	r0, r5
 80099da:	f000 fc03 	bl	800a1e4 <__lshift>
 80099de:	46b0      	mov	r8, r6
 80099e0:	4606      	mov	r6, r0
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	9a03      	ldr	r2, [sp, #12]
 80099e6:	3301      	adds	r3, #1
 80099e8:	9308      	str	r3, [sp, #32]
 80099ea:	9b06      	ldr	r3, [sp, #24]
 80099ec:	4413      	add	r3, r2
 80099ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80099f0:	9b04      	ldr	r3, [sp, #16]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	930a      	str	r3, [sp, #40]	; 0x28
 80099f8:	9b08      	ldr	r3, [sp, #32]
 80099fa:	4621      	mov	r1, r4
 80099fc:	3b01      	subs	r3, #1
 80099fe:	4650      	mov	r0, sl
 8009a00:	9304      	str	r3, [sp, #16]
 8009a02:	f7ff fa77 	bl	8008ef4 <quorem>
 8009a06:	4641      	mov	r1, r8
 8009a08:	9006      	str	r0, [sp, #24]
 8009a0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a0e:	4650      	mov	r0, sl
 8009a10:	f000 fc54 	bl	800a2bc <__mcmp>
 8009a14:	4632      	mov	r2, r6
 8009a16:	9009      	str	r0, [sp, #36]	; 0x24
 8009a18:	4621      	mov	r1, r4
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f000 fc6a 	bl	800a2f4 <__mdiff>
 8009a20:	68c2      	ldr	r2, [r0, #12]
 8009a22:	4607      	mov	r7, r0
 8009a24:	bb02      	cbnz	r2, 8009a68 <_dtoa_r+0xa60>
 8009a26:	4601      	mov	r1, r0
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f000 fc47 	bl	800a2bc <__mcmp>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	4639      	mov	r1, r7
 8009a32:	4628      	mov	r0, r5
 8009a34:	920c      	str	r2, [sp, #48]	; 0x30
 8009a36:	f000 fa07 	bl	8009e48 <_Bfree>
 8009a3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a3e:	9f08      	ldr	r7, [sp, #32]
 8009a40:	ea43 0102 	orr.w	r1, r3, r2
 8009a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a46:	4319      	orrs	r1, r3
 8009a48:	d110      	bne.n	8009a6c <_dtoa_r+0xa64>
 8009a4a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a4e:	d029      	beq.n	8009aa4 <_dtoa_r+0xa9c>
 8009a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dd02      	ble.n	8009a5c <_dtoa_r+0xa54>
 8009a56:	9b06      	ldr	r3, [sp, #24]
 8009a58:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009a5c:	9b04      	ldr	r3, [sp, #16]
 8009a5e:	f883 9000 	strb.w	r9, [r3]
 8009a62:	e777      	b.n	8009954 <_dtoa_r+0x94c>
 8009a64:	4630      	mov	r0, r6
 8009a66:	e7ba      	b.n	80099de <_dtoa_r+0x9d6>
 8009a68:	2201      	movs	r2, #1
 8009a6a:	e7e1      	b.n	8009a30 <_dtoa_r+0xa28>
 8009a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	db04      	blt.n	8009a7c <_dtoa_r+0xa74>
 8009a72:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009a74:	430b      	orrs	r3, r1
 8009a76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	d120      	bne.n	8009abe <_dtoa_r+0xab6>
 8009a7c:	2a00      	cmp	r2, #0
 8009a7e:	dded      	ble.n	8009a5c <_dtoa_r+0xa54>
 8009a80:	4651      	mov	r1, sl
 8009a82:	2201      	movs	r2, #1
 8009a84:	4628      	mov	r0, r5
 8009a86:	f000 fbad 	bl	800a1e4 <__lshift>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4682      	mov	sl, r0
 8009a8e:	f000 fc15 	bl	800a2bc <__mcmp>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	dc03      	bgt.n	8009a9e <_dtoa_r+0xa96>
 8009a96:	d1e1      	bne.n	8009a5c <_dtoa_r+0xa54>
 8009a98:	f019 0f01 	tst.w	r9, #1
 8009a9c:	d0de      	beq.n	8009a5c <_dtoa_r+0xa54>
 8009a9e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009aa2:	d1d8      	bne.n	8009a56 <_dtoa_r+0xa4e>
 8009aa4:	2339      	movs	r3, #57	; 0x39
 8009aa6:	9a04      	ldr	r2, [sp, #16]
 8009aa8:	7013      	strb	r3, [r2, #0]
 8009aaa:	463b      	mov	r3, r7
 8009aac:	461f      	mov	r7, r3
 8009aae:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	2a39      	cmp	r2, #57	; 0x39
 8009ab6:	d06b      	beq.n	8009b90 <_dtoa_r+0xb88>
 8009ab8:	3201      	adds	r2, #1
 8009aba:	701a      	strb	r2, [r3, #0]
 8009abc:	e74a      	b.n	8009954 <_dtoa_r+0x94c>
 8009abe:	2a00      	cmp	r2, #0
 8009ac0:	dd07      	ble.n	8009ad2 <_dtoa_r+0xaca>
 8009ac2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ac6:	d0ed      	beq.n	8009aa4 <_dtoa_r+0xa9c>
 8009ac8:	9a04      	ldr	r2, [sp, #16]
 8009aca:	f109 0301 	add.w	r3, r9, #1
 8009ace:	7013      	strb	r3, [r2, #0]
 8009ad0:	e740      	b.n	8009954 <_dtoa_r+0x94c>
 8009ad2:	9b08      	ldr	r3, [sp, #32]
 8009ad4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ad6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d042      	beq.n	8009b64 <_dtoa_r+0xb5c>
 8009ade:	4651      	mov	r1, sl
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 f9d1 	bl	8009e8c <__multadd>
 8009aea:	45b0      	cmp	r8, r6
 8009aec:	4682      	mov	sl, r0
 8009aee:	f04f 0300 	mov.w	r3, #0
 8009af2:	f04f 020a 	mov.w	r2, #10
 8009af6:	4641      	mov	r1, r8
 8009af8:	4628      	mov	r0, r5
 8009afa:	d107      	bne.n	8009b0c <_dtoa_r+0xb04>
 8009afc:	f000 f9c6 	bl	8009e8c <__multadd>
 8009b00:	4680      	mov	r8, r0
 8009b02:	4606      	mov	r6, r0
 8009b04:	9b08      	ldr	r3, [sp, #32]
 8009b06:	3301      	adds	r3, #1
 8009b08:	9308      	str	r3, [sp, #32]
 8009b0a:	e775      	b.n	80099f8 <_dtoa_r+0x9f0>
 8009b0c:	f000 f9be 	bl	8009e8c <__multadd>
 8009b10:	4631      	mov	r1, r6
 8009b12:	4680      	mov	r8, r0
 8009b14:	2300      	movs	r3, #0
 8009b16:	220a      	movs	r2, #10
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f000 f9b7 	bl	8009e8c <__multadd>
 8009b1e:	4606      	mov	r6, r0
 8009b20:	e7f0      	b.n	8009b04 <_dtoa_r+0xafc>
 8009b22:	9b08      	ldr	r3, [sp, #32]
 8009b24:	9306      	str	r3, [sp, #24]
 8009b26:	9f03      	ldr	r7, [sp, #12]
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	f7ff f9e2 	bl	8008ef4 <quorem>
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b36:	f807 9b01 	strb.w	r9, [r7], #1
 8009b3a:	1afa      	subs	r2, r7, r3
 8009b3c:	9b06      	ldr	r3, [sp, #24]
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	dd07      	ble.n	8009b52 <_dtoa_r+0xb4a>
 8009b42:	4651      	mov	r1, sl
 8009b44:	2300      	movs	r3, #0
 8009b46:	220a      	movs	r2, #10
 8009b48:	4628      	mov	r0, r5
 8009b4a:	f000 f99f 	bl	8009e8c <__multadd>
 8009b4e:	4682      	mov	sl, r0
 8009b50:	e7ea      	b.n	8009b28 <_dtoa_r+0xb20>
 8009b52:	9b06      	ldr	r3, [sp, #24]
 8009b54:	f04f 0800 	mov.w	r8, #0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	bfcc      	ite	gt
 8009b5c:	461f      	movgt	r7, r3
 8009b5e:	2701      	movle	r7, #1
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	441f      	add	r7, r3
 8009b64:	4651      	mov	r1, sl
 8009b66:	2201      	movs	r2, #1
 8009b68:	4628      	mov	r0, r5
 8009b6a:	f000 fb3b 	bl	800a1e4 <__lshift>
 8009b6e:	4621      	mov	r1, r4
 8009b70:	4682      	mov	sl, r0
 8009b72:	f000 fba3 	bl	800a2bc <__mcmp>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	dc97      	bgt.n	8009aaa <_dtoa_r+0xaa2>
 8009b7a:	d102      	bne.n	8009b82 <_dtoa_r+0xb7a>
 8009b7c:	f019 0f01 	tst.w	r9, #1
 8009b80:	d193      	bne.n	8009aaa <_dtoa_r+0xaa2>
 8009b82:	463b      	mov	r3, r7
 8009b84:	461f      	mov	r7, r3
 8009b86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b8a:	2a30      	cmp	r2, #48	; 0x30
 8009b8c:	d0fa      	beq.n	8009b84 <_dtoa_r+0xb7c>
 8009b8e:	e6e1      	b.n	8009954 <_dtoa_r+0x94c>
 8009b90:	9a03      	ldr	r2, [sp, #12]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d18a      	bne.n	8009aac <_dtoa_r+0xaa4>
 8009b96:	2331      	movs	r3, #49	; 0x31
 8009b98:	f10b 0b01 	add.w	fp, fp, #1
 8009b9c:	e797      	b.n	8009ace <_dtoa_r+0xac6>
 8009b9e:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <_dtoa_r+0xbc0>)
 8009ba0:	f7ff ba9f 	b.w	80090e2 <_dtoa_r+0xda>
 8009ba4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	f47f aa77 	bne.w	800909a <_dtoa_r+0x92>
 8009bac:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <_dtoa_r+0xbc4>)
 8009bae:	f7ff ba98 	b.w	80090e2 <_dtoa_r+0xda>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	dcb6      	bgt.n	8009b26 <_dtoa_r+0xb1e>
 8009bb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	f73f aeb5 	bgt.w	800992a <_dtoa_r+0x922>
 8009bc0:	e7b1      	b.n	8009b26 <_dtoa_r+0xb1e>
 8009bc2:	bf00      	nop
 8009bc4:	0800b61b 	.word	0x0800b61b
 8009bc8:	0800b57b 	.word	0x0800b57b
 8009bcc:	0800b59f 	.word	0x0800b59f

08009bd0 <_free_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	2900      	cmp	r1, #0
 8009bd6:	d040      	beq.n	8009c5a <_free_r+0x8a>
 8009bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bdc:	1f0c      	subs	r4, r1, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfb8      	it	lt
 8009be2:	18e4      	addlt	r4, r4, r3
 8009be4:	f000 f8e4 	bl	8009db0 <__malloc_lock>
 8009be8:	4a1c      	ldr	r2, [pc, #112]	; (8009c5c <_free_r+0x8c>)
 8009bea:	6813      	ldr	r3, [r2, #0]
 8009bec:	b933      	cbnz	r3, 8009bfc <_free_r+0x2c>
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	6014      	str	r4, [r2, #0]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf8:	f000 b8e0 	b.w	8009dbc <__malloc_unlock>
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	d908      	bls.n	8009c12 <_free_r+0x42>
 8009c00:	6820      	ldr	r0, [r4, #0]
 8009c02:	1821      	adds	r1, r4, r0
 8009c04:	428b      	cmp	r3, r1
 8009c06:	bf01      	itttt	eq
 8009c08:	6819      	ldreq	r1, [r3, #0]
 8009c0a:	685b      	ldreq	r3, [r3, #4]
 8009c0c:	1809      	addeq	r1, r1, r0
 8009c0e:	6021      	streq	r1, [r4, #0]
 8009c10:	e7ed      	b.n	8009bee <_free_r+0x1e>
 8009c12:	461a      	mov	r2, r3
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	b10b      	cbz	r3, 8009c1c <_free_r+0x4c>
 8009c18:	42a3      	cmp	r3, r4
 8009c1a:	d9fa      	bls.n	8009c12 <_free_r+0x42>
 8009c1c:	6811      	ldr	r1, [r2, #0]
 8009c1e:	1850      	adds	r0, r2, r1
 8009c20:	42a0      	cmp	r0, r4
 8009c22:	d10b      	bne.n	8009c3c <_free_r+0x6c>
 8009c24:	6820      	ldr	r0, [r4, #0]
 8009c26:	4401      	add	r1, r0
 8009c28:	1850      	adds	r0, r2, r1
 8009c2a:	4283      	cmp	r3, r0
 8009c2c:	6011      	str	r1, [r2, #0]
 8009c2e:	d1e0      	bne.n	8009bf2 <_free_r+0x22>
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	4408      	add	r0, r1
 8009c36:	6010      	str	r0, [r2, #0]
 8009c38:	6053      	str	r3, [r2, #4]
 8009c3a:	e7da      	b.n	8009bf2 <_free_r+0x22>
 8009c3c:	d902      	bls.n	8009c44 <_free_r+0x74>
 8009c3e:	230c      	movs	r3, #12
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	e7d6      	b.n	8009bf2 <_free_r+0x22>
 8009c44:	6820      	ldr	r0, [r4, #0]
 8009c46:	1821      	adds	r1, r4, r0
 8009c48:	428b      	cmp	r3, r1
 8009c4a:	bf01      	itttt	eq
 8009c4c:	6819      	ldreq	r1, [r3, #0]
 8009c4e:	685b      	ldreq	r3, [r3, #4]
 8009c50:	1809      	addeq	r1, r1, r0
 8009c52:	6021      	streq	r1, [r4, #0]
 8009c54:	6063      	str	r3, [r4, #4]
 8009c56:	6054      	str	r4, [r2, #4]
 8009c58:	e7cb      	b.n	8009bf2 <_free_r+0x22>
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	20000838 	.word	0x20000838

08009c60 <malloc>:
 8009c60:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <malloc+0xc>)
 8009c62:	4601      	mov	r1, r0
 8009c64:	6818      	ldr	r0, [r3, #0]
 8009c66:	f000 b823 	b.w	8009cb0 <_malloc_r>
 8009c6a:	bf00      	nop
 8009c6c:	20000064 	.word	0x20000064

08009c70 <sbrk_aligned>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4e0e      	ldr	r6, [pc, #56]	; (8009cac <sbrk_aligned+0x3c>)
 8009c74:	460c      	mov	r4, r1
 8009c76:	6831      	ldr	r1, [r6, #0]
 8009c78:	4605      	mov	r5, r0
 8009c7a:	b911      	cbnz	r1, 8009c82 <sbrk_aligned+0x12>
 8009c7c:	f000 febc 	bl	800a9f8 <_sbrk_r>
 8009c80:	6030      	str	r0, [r6, #0]
 8009c82:	4621      	mov	r1, r4
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 feb7 	bl	800a9f8 <_sbrk_r>
 8009c8a:	1c43      	adds	r3, r0, #1
 8009c8c:	d00a      	beq.n	8009ca4 <sbrk_aligned+0x34>
 8009c8e:	1cc4      	adds	r4, r0, #3
 8009c90:	f024 0403 	bic.w	r4, r4, #3
 8009c94:	42a0      	cmp	r0, r4
 8009c96:	d007      	beq.n	8009ca8 <sbrk_aligned+0x38>
 8009c98:	1a21      	subs	r1, r4, r0
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 feac 	bl	800a9f8 <_sbrk_r>
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d101      	bne.n	8009ca8 <sbrk_aligned+0x38>
 8009ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ca8:	4620      	mov	r0, r4
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	2000083c 	.word	0x2000083c

08009cb0 <_malloc_r>:
 8009cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb4:	1ccd      	adds	r5, r1, #3
 8009cb6:	f025 0503 	bic.w	r5, r5, #3
 8009cba:	3508      	adds	r5, #8
 8009cbc:	2d0c      	cmp	r5, #12
 8009cbe:	bf38      	it	cc
 8009cc0:	250c      	movcc	r5, #12
 8009cc2:	2d00      	cmp	r5, #0
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	db01      	blt.n	8009ccc <_malloc_r+0x1c>
 8009cc8:	42a9      	cmp	r1, r5
 8009cca:	d905      	bls.n	8009cd8 <_malloc_r+0x28>
 8009ccc:	230c      	movs	r3, #12
 8009cce:	2600      	movs	r6, #0
 8009cd0:	603b      	str	r3, [r7, #0]
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009dac <_malloc_r+0xfc>
 8009cdc:	f000 f868 	bl	8009db0 <__malloc_lock>
 8009ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ce4:	461c      	mov	r4, r3
 8009ce6:	bb5c      	cbnz	r4, 8009d40 <_malloc_r+0x90>
 8009ce8:	4629      	mov	r1, r5
 8009cea:	4638      	mov	r0, r7
 8009cec:	f7ff ffc0 	bl	8009c70 <sbrk_aligned>
 8009cf0:	1c43      	adds	r3, r0, #1
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	d155      	bne.n	8009da2 <_malloc_r+0xf2>
 8009cf6:	f8d8 4000 	ldr.w	r4, [r8]
 8009cfa:	4626      	mov	r6, r4
 8009cfc:	2e00      	cmp	r6, #0
 8009cfe:	d145      	bne.n	8009d8c <_malloc_r+0xdc>
 8009d00:	2c00      	cmp	r4, #0
 8009d02:	d048      	beq.n	8009d96 <_malloc_r+0xe6>
 8009d04:	6823      	ldr	r3, [r4, #0]
 8009d06:	4631      	mov	r1, r6
 8009d08:	4638      	mov	r0, r7
 8009d0a:	eb04 0903 	add.w	r9, r4, r3
 8009d0e:	f000 fe73 	bl	800a9f8 <_sbrk_r>
 8009d12:	4581      	cmp	r9, r0
 8009d14:	d13f      	bne.n	8009d96 <_malloc_r+0xe6>
 8009d16:	6821      	ldr	r1, [r4, #0]
 8009d18:	4638      	mov	r0, r7
 8009d1a:	1a6d      	subs	r5, r5, r1
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7ff ffa7 	bl	8009c70 <sbrk_aligned>
 8009d22:	3001      	adds	r0, #1
 8009d24:	d037      	beq.n	8009d96 <_malloc_r+0xe6>
 8009d26:	6823      	ldr	r3, [r4, #0]
 8009d28:	442b      	add	r3, r5
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d038      	beq.n	8009da6 <_malloc_r+0xf6>
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	42a2      	cmp	r2, r4
 8009d38:	d12b      	bne.n	8009d92 <_malloc_r+0xe2>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	605a      	str	r2, [r3, #4]
 8009d3e:	e00f      	b.n	8009d60 <_malloc_r+0xb0>
 8009d40:	6822      	ldr	r2, [r4, #0]
 8009d42:	1b52      	subs	r2, r2, r5
 8009d44:	d41f      	bmi.n	8009d86 <_malloc_r+0xd6>
 8009d46:	2a0b      	cmp	r2, #11
 8009d48:	d917      	bls.n	8009d7a <_malloc_r+0xca>
 8009d4a:	1961      	adds	r1, r4, r5
 8009d4c:	42a3      	cmp	r3, r4
 8009d4e:	6025      	str	r5, [r4, #0]
 8009d50:	bf18      	it	ne
 8009d52:	6059      	strne	r1, [r3, #4]
 8009d54:	6863      	ldr	r3, [r4, #4]
 8009d56:	bf08      	it	eq
 8009d58:	f8c8 1000 	streq.w	r1, [r8]
 8009d5c:	5162      	str	r2, [r4, r5]
 8009d5e:	604b      	str	r3, [r1, #4]
 8009d60:	4638      	mov	r0, r7
 8009d62:	f104 060b 	add.w	r6, r4, #11
 8009d66:	f000 f829 	bl	8009dbc <__malloc_unlock>
 8009d6a:	f026 0607 	bic.w	r6, r6, #7
 8009d6e:	1d23      	adds	r3, r4, #4
 8009d70:	1af2      	subs	r2, r6, r3
 8009d72:	d0ae      	beq.n	8009cd2 <_malloc_r+0x22>
 8009d74:	1b9b      	subs	r3, r3, r6
 8009d76:	50a3      	str	r3, [r4, r2]
 8009d78:	e7ab      	b.n	8009cd2 <_malloc_r+0x22>
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	6862      	ldr	r2, [r4, #4]
 8009d7e:	d1dd      	bne.n	8009d3c <_malloc_r+0x8c>
 8009d80:	f8c8 2000 	str.w	r2, [r8]
 8009d84:	e7ec      	b.n	8009d60 <_malloc_r+0xb0>
 8009d86:	4623      	mov	r3, r4
 8009d88:	6864      	ldr	r4, [r4, #4]
 8009d8a:	e7ac      	b.n	8009ce6 <_malloc_r+0x36>
 8009d8c:	4634      	mov	r4, r6
 8009d8e:	6876      	ldr	r6, [r6, #4]
 8009d90:	e7b4      	b.n	8009cfc <_malloc_r+0x4c>
 8009d92:	4613      	mov	r3, r2
 8009d94:	e7cc      	b.n	8009d30 <_malloc_r+0x80>
 8009d96:	230c      	movs	r3, #12
 8009d98:	4638      	mov	r0, r7
 8009d9a:	603b      	str	r3, [r7, #0]
 8009d9c:	f000 f80e 	bl	8009dbc <__malloc_unlock>
 8009da0:	e797      	b.n	8009cd2 <_malloc_r+0x22>
 8009da2:	6025      	str	r5, [r4, #0]
 8009da4:	e7dc      	b.n	8009d60 <_malloc_r+0xb0>
 8009da6:	605b      	str	r3, [r3, #4]
 8009da8:	deff      	udf	#255	; 0xff
 8009daa:	bf00      	nop
 8009dac:	20000838 	.word	0x20000838

08009db0 <__malloc_lock>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__malloc_lock+0x8>)
 8009db2:	f7ff b881 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 8009db6:	bf00      	nop
 8009db8:	20000834 	.word	0x20000834

08009dbc <__malloc_unlock>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	; (8009dc4 <__malloc_unlock+0x8>)
 8009dbe:	f7ff b87c 	b.w	8008eba <__retarget_lock_release_recursive>
 8009dc2:	bf00      	nop
 8009dc4:	20000834 	.word	0x20000834

08009dc8 <_Balloc>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	69c6      	ldr	r6, [r0, #28]
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	b976      	cbnz	r6, 8009df0 <_Balloc+0x28>
 8009dd2:	2010      	movs	r0, #16
 8009dd4:	f7ff ff44 	bl	8009c60 <malloc>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	61e0      	str	r0, [r4, #28]
 8009ddc:	b920      	cbnz	r0, 8009de8 <_Balloc+0x20>
 8009dde:	216b      	movs	r1, #107	; 0x6b
 8009de0:	4b17      	ldr	r3, [pc, #92]	; (8009e40 <_Balloc+0x78>)
 8009de2:	4818      	ldr	r0, [pc, #96]	; (8009e44 <_Balloc+0x7c>)
 8009de4:	f000 fe18 	bl	800aa18 <__assert_func>
 8009de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dec:	6006      	str	r6, [r0, #0]
 8009dee:	60c6      	str	r6, [r0, #12]
 8009df0:	69e6      	ldr	r6, [r4, #28]
 8009df2:	68f3      	ldr	r3, [r6, #12]
 8009df4:	b183      	cbz	r3, 8009e18 <_Balloc+0x50>
 8009df6:	69e3      	ldr	r3, [r4, #28]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dfe:	b9b8      	cbnz	r0, 8009e30 <_Balloc+0x68>
 8009e00:	2101      	movs	r1, #1
 8009e02:	fa01 f605 	lsl.w	r6, r1, r5
 8009e06:	1d72      	adds	r2, r6, #5
 8009e08:	4620      	mov	r0, r4
 8009e0a:	0092      	lsls	r2, r2, #2
 8009e0c:	f000 fe22 	bl	800aa54 <_calloc_r>
 8009e10:	b160      	cbz	r0, 8009e2c <_Balloc+0x64>
 8009e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e16:	e00e      	b.n	8009e36 <_Balloc+0x6e>
 8009e18:	2221      	movs	r2, #33	; 0x21
 8009e1a:	2104      	movs	r1, #4
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	f000 fe19 	bl	800aa54 <_calloc_r>
 8009e22:	69e3      	ldr	r3, [r4, #28]
 8009e24:	60f0      	str	r0, [r6, #12]
 8009e26:	68db      	ldr	r3, [r3, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e4      	bne.n	8009df6 <_Balloc+0x2e>
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	6802      	ldr	r2, [r0, #0]
 8009e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e36:	2300      	movs	r3, #0
 8009e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e3c:	e7f7      	b.n	8009e2e <_Balloc+0x66>
 8009e3e:	bf00      	nop
 8009e40:	0800b5ac 	.word	0x0800b5ac
 8009e44:	0800b62c 	.word	0x0800b62c

08009e48 <_Bfree>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	69c6      	ldr	r6, [r0, #28]
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	460c      	mov	r4, r1
 8009e50:	b976      	cbnz	r6, 8009e70 <_Bfree+0x28>
 8009e52:	2010      	movs	r0, #16
 8009e54:	f7ff ff04 	bl	8009c60 <malloc>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	61e8      	str	r0, [r5, #28]
 8009e5c:	b920      	cbnz	r0, 8009e68 <_Bfree+0x20>
 8009e5e:	218f      	movs	r1, #143	; 0x8f
 8009e60:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <_Bfree+0x3c>)
 8009e62:	4809      	ldr	r0, [pc, #36]	; (8009e88 <_Bfree+0x40>)
 8009e64:	f000 fdd8 	bl	800aa18 <__assert_func>
 8009e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e6c:	6006      	str	r6, [r0, #0]
 8009e6e:	60c6      	str	r6, [r0, #12]
 8009e70:	b13c      	cbz	r4, 8009e82 <_Bfree+0x3a>
 8009e72:	69eb      	ldr	r3, [r5, #28]
 8009e74:	6862      	ldr	r2, [r4, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e7c:	6021      	str	r1, [r4, #0]
 8009e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e82:	bd70      	pop	{r4, r5, r6, pc}
 8009e84:	0800b5ac 	.word	0x0800b5ac
 8009e88:	0800b62c 	.word	0x0800b62c

08009e8c <__multadd>:
 8009e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e90:	4607      	mov	r7, r0
 8009e92:	460c      	mov	r4, r1
 8009e94:	461e      	mov	r6, r3
 8009e96:	2000      	movs	r0, #0
 8009e98:	690d      	ldr	r5, [r1, #16]
 8009e9a:	f101 0c14 	add.w	ip, r1, #20
 8009e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	b299      	uxth	r1, r3
 8009ea6:	fb02 6101 	mla	r1, r2, r1, r6
 8009eaa:	0c1e      	lsrs	r6, r3, #16
 8009eac:	0c0b      	lsrs	r3, r1, #16
 8009eae:	fb02 3306 	mla	r3, r2, r6, r3
 8009eb2:	b289      	uxth	r1, r1
 8009eb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009eb8:	4285      	cmp	r5, r0
 8009eba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ebe:	f84c 1b04 	str.w	r1, [ip], #4
 8009ec2:	dcec      	bgt.n	8009e9e <__multadd+0x12>
 8009ec4:	b30e      	cbz	r6, 8009f0a <__multadd+0x7e>
 8009ec6:	68a3      	ldr	r3, [r4, #8]
 8009ec8:	42ab      	cmp	r3, r5
 8009eca:	dc19      	bgt.n	8009f00 <__multadd+0x74>
 8009ecc:	6861      	ldr	r1, [r4, #4]
 8009ece:	4638      	mov	r0, r7
 8009ed0:	3101      	adds	r1, #1
 8009ed2:	f7ff ff79 	bl	8009dc8 <_Balloc>
 8009ed6:	4680      	mov	r8, r0
 8009ed8:	b928      	cbnz	r0, 8009ee6 <__multadd+0x5a>
 8009eda:	4602      	mov	r2, r0
 8009edc:	21ba      	movs	r1, #186	; 0xba
 8009ede:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <__multadd+0x84>)
 8009ee0:	480c      	ldr	r0, [pc, #48]	; (8009f14 <__multadd+0x88>)
 8009ee2:	f000 fd99 	bl	800aa18 <__assert_func>
 8009ee6:	6922      	ldr	r2, [r4, #16]
 8009ee8:	f104 010c 	add.w	r1, r4, #12
 8009eec:	3202      	adds	r2, #2
 8009eee:	0092      	lsls	r2, r2, #2
 8009ef0:	300c      	adds	r0, #12
 8009ef2:	f7fe fff1 	bl	8008ed8 <memcpy>
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f7ff ffa5 	bl	8009e48 <_Bfree>
 8009efe:	4644      	mov	r4, r8
 8009f00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f04:	3501      	adds	r5, #1
 8009f06:	615e      	str	r6, [r3, #20]
 8009f08:	6125      	str	r5, [r4, #16]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f10:	0800b61b 	.word	0x0800b61b
 8009f14:	0800b62c 	.word	0x0800b62c

08009f18 <__hi0bits>:
 8009f18:	0c02      	lsrs	r2, r0, #16
 8009f1a:	0412      	lsls	r2, r2, #16
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	b9ca      	cbnz	r2, 8009f54 <__hi0bits+0x3c>
 8009f20:	0403      	lsls	r3, r0, #16
 8009f22:	2010      	movs	r0, #16
 8009f24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009f28:	bf04      	itt	eq
 8009f2a:	021b      	lsleq	r3, r3, #8
 8009f2c:	3008      	addeq	r0, #8
 8009f2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009f32:	bf04      	itt	eq
 8009f34:	011b      	lsleq	r3, r3, #4
 8009f36:	3004      	addeq	r0, #4
 8009f38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009f3c:	bf04      	itt	eq
 8009f3e:	009b      	lsleq	r3, r3, #2
 8009f40:	3002      	addeq	r0, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	db05      	blt.n	8009f52 <__hi0bits+0x3a>
 8009f46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009f4a:	f100 0001 	add.w	r0, r0, #1
 8009f4e:	bf08      	it	eq
 8009f50:	2020      	moveq	r0, #32
 8009f52:	4770      	bx	lr
 8009f54:	2000      	movs	r0, #0
 8009f56:	e7e5      	b.n	8009f24 <__hi0bits+0xc>

08009f58 <__lo0bits>:
 8009f58:	6803      	ldr	r3, [r0, #0]
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	f013 0007 	ands.w	r0, r3, #7
 8009f60:	d00b      	beq.n	8009f7a <__lo0bits+0x22>
 8009f62:	07d9      	lsls	r1, r3, #31
 8009f64:	d421      	bmi.n	8009faa <__lo0bits+0x52>
 8009f66:	0798      	lsls	r0, r3, #30
 8009f68:	bf49      	itett	mi
 8009f6a:	085b      	lsrmi	r3, r3, #1
 8009f6c:	089b      	lsrpl	r3, r3, #2
 8009f6e:	2001      	movmi	r0, #1
 8009f70:	6013      	strmi	r3, [r2, #0]
 8009f72:	bf5c      	itt	pl
 8009f74:	2002      	movpl	r0, #2
 8009f76:	6013      	strpl	r3, [r2, #0]
 8009f78:	4770      	bx	lr
 8009f7a:	b299      	uxth	r1, r3
 8009f7c:	b909      	cbnz	r1, 8009f82 <__lo0bits+0x2a>
 8009f7e:	2010      	movs	r0, #16
 8009f80:	0c1b      	lsrs	r3, r3, #16
 8009f82:	b2d9      	uxtb	r1, r3
 8009f84:	b909      	cbnz	r1, 8009f8a <__lo0bits+0x32>
 8009f86:	3008      	adds	r0, #8
 8009f88:	0a1b      	lsrs	r3, r3, #8
 8009f8a:	0719      	lsls	r1, r3, #28
 8009f8c:	bf04      	itt	eq
 8009f8e:	091b      	lsreq	r3, r3, #4
 8009f90:	3004      	addeq	r0, #4
 8009f92:	0799      	lsls	r1, r3, #30
 8009f94:	bf04      	itt	eq
 8009f96:	089b      	lsreq	r3, r3, #2
 8009f98:	3002      	addeq	r0, #2
 8009f9a:	07d9      	lsls	r1, r3, #31
 8009f9c:	d403      	bmi.n	8009fa6 <__lo0bits+0x4e>
 8009f9e:	085b      	lsrs	r3, r3, #1
 8009fa0:	f100 0001 	add.w	r0, r0, #1
 8009fa4:	d003      	beq.n	8009fae <__lo0bits+0x56>
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	4770      	bx	lr
 8009faa:	2000      	movs	r0, #0
 8009fac:	4770      	bx	lr
 8009fae:	2020      	movs	r0, #32
 8009fb0:	4770      	bx	lr
	...

08009fb4 <__i2b>:
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	2101      	movs	r1, #1
 8009fba:	f7ff ff05 	bl	8009dc8 <_Balloc>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	b928      	cbnz	r0, 8009fce <__i2b+0x1a>
 8009fc2:	f240 1145 	movw	r1, #325	; 0x145
 8009fc6:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <__i2b+0x24>)
 8009fc8:	4804      	ldr	r0, [pc, #16]	; (8009fdc <__i2b+0x28>)
 8009fca:	f000 fd25 	bl	800aa18 <__assert_func>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	6144      	str	r4, [r0, #20]
 8009fd2:	6103      	str	r3, [r0, #16]
 8009fd4:	bd10      	pop	{r4, pc}
 8009fd6:	bf00      	nop
 8009fd8:	0800b61b 	.word	0x0800b61b
 8009fdc:	0800b62c 	.word	0x0800b62c

08009fe0 <__multiply>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	4691      	mov	r9, r2
 8009fe6:	690a      	ldr	r2, [r1, #16]
 8009fe8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fec:	460c      	mov	r4, r1
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	bfbe      	ittt	lt
 8009ff2:	460b      	movlt	r3, r1
 8009ff4:	464c      	movlt	r4, r9
 8009ff6:	4699      	movlt	r9, r3
 8009ff8:	6927      	ldr	r7, [r4, #16]
 8009ffa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	6861      	ldr	r1, [r4, #4]
 800a002:	eb07 060a 	add.w	r6, r7, sl
 800a006:	42b3      	cmp	r3, r6
 800a008:	b085      	sub	sp, #20
 800a00a:	bfb8      	it	lt
 800a00c:	3101      	addlt	r1, #1
 800a00e:	f7ff fedb 	bl	8009dc8 <_Balloc>
 800a012:	b930      	cbnz	r0, 800a022 <__multiply+0x42>
 800a014:	4602      	mov	r2, r0
 800a016:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a01a:	4b43      	ldr	r3, [pc, #268]	; (800a128 <__multiply+0x148>)
 800a01c:	4843      	ldr	r0, [pc, #268]	; (800a12c <__multiply+0x14c>)
 800a01e:	f000 fcfb 	bl	800aa18 <__assert_func>
 800a022:	f100 0514 	add.w	r5, r0, #20
 800a026:	462b      	mov	r3, r5
 800a028:	2200      	movs	r2, #0
 800a02a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a02e:	4543      	cmp	r3, r8
 800a030:	d321      	bcc.n	800a076 <__multiply+0x96>
 800a032:	f104 0314 	add.w	r3, r4, #20
 800a036:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a03a:	f109 0314 	add.w	r3, r9, #20
 800a03e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a042:	9202      	str	r2, [sp, #8]
 800a044:	1b3a      	subs	r2, r7, r4
 800a046:	3a15      	subs	r2, #21
 800a048:	f022 0203 	bic.w	r2, r2, #3
 800a04c:	3204      	adds	r2, #4
 800a04e:	f104 0115 	add.w	r1, r4, #21
 800a052:	428f      	cmp	r7, r1
 800a054:	bf38      	it	cc
 800a056:	2204      	movcc	r2, #4
 800a058:	9201      	str	r2, [sp, #4]
 800a05a:	9a02      	ldr	r2, [sp, #8]
 800a05c:	9303      	str	r3, [sp, #12]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d80c      	bhi.n	800a07c <__multiply+0x9c>
 800a062:	2e00      	cmp	r6, #0
 800a064:	dd03      	ble.n	800a06e <__multiply+0x8e>
 800a066:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d05a      	beq.n	800a124 <__multiply+0x144>
 800a06e:	6106      	str	r6, [r0, #16]
 800a070:	b005      	add	sp, #20
 800a072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a076:	f843 2b04 	str.w	r2, [r3], #4
 800a07a:	e7d8      	b.n	800a02e <__multiply+0x4e>
 800a07c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a080:	f1ba 0f00 	cmp.w	sl, #0
 800a084:	d023      	beq.n	800a0ce <__multiply+0xee>
 800a086:	46a9      	mov	r9, r5
 800a088:	f04f 0c00 	mov.w	ip, #0
 800a08c:	f104 0e14 	add.w	lr, r4, #20
 800a090:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a094:	f8d9 1000 	ldr.w	r1, [r9]
 800a098:	fa1f fb82 	uxth.w	fp, r2
 800a09c:	b289      	uxth	r1, r1
 800a09e:	fb0a 110b 	mla	r1, sl, fp, r1
 800a0a2:	4461      	add	r1, ip
 800a0a4:	f8d9 c000 	ldr.w	ip, [r9]
 800a0a8:	0c12      	lsrs	r2, r2, #16
 800a0aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a0ae:	fb0a c202 	mla	r2, sl, r2, ip
 800a0b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a0b6:	b289      	uxth	r1, r1
 800a0b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0bc:	4577      	cmp	r7, lr
 800a0be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0c2:	f849 1b04 	str.w	r1, [r9], #4
 800a0c6:	d8e3      	bhi.n	800a090 <__multiply+0xb0>
 800a0c8:	9a01      	ldr	r2, [sp, #4]
 800a0ca:	f845 c002 	str.w	ip, [r5, r2]
 800a0ce:	9a03      	ldr	r2, [sp, #12]
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0d6:	f1b9 0f00 	cmp.w	r9, #0
 800a0da:	d021      	beq.n	800a120 <__multiply+0x140>
 800a0dc:	46ae      	mov	lr, r5
 800a0de:	f04f 0a00 	mov.w	sl, #0
 800a0e2:	6829      	ldr	r1, [r5, #0]
 800a0e4:	f104 0c14 	add.w	ip, r4, #20
 800a0e8:	f8bc b000 	ldrh.w	fp, [ip]
 800a0ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0f0:	b289      	uxth	r1, r1
 800a0f2:	fb09 220b 	mla	r2, r9, fp, r2
 800a0f6:	4452      	add	r2, sl
 800a0f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0fc:	f84e 1b04 	str.w	r1, [lr], #4
 800a100:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a104:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a108:	f8be 1000 	ldrh.w	r1, [lr]
 800a10c:	4567      	cmp	r7, ip
 800a10e:	fb09 110a 	mla	r1, r9, sl, r1
 800a112:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a116:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a11a:	d8e5      	bhi.n	800a0e8 <__multiply+0x108>
 800a11c:	9a01      	ldr	r2, [sp, #4]
 800a11e:	50a9      	str	r1, [r5, r2]
 800a120:	3504      	adds	r5, #4
 800a122:	e79a      	b.n	800a05a <__multiply+0x7a>
 800a124:	3e01      	subs	r6, #1
 800a126:	e79c      	b.n	800a062 <__multiply+0x82>
 800a128:	0800b61b 	.word	0x0800b61b
 800a12c:	0800b62c 	.word	0x0800b62c

0800a130 <__pow5mult>:
 800a130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a134:	4615      	mov	r5, r2
 800a136:	f012 0203 	ands.w	r2, r2, #3
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	d007      	beq.n	800a150 <__pow5mult+0x20>
 800a140:	4c25      	ldr	r4, [pc, #148]	; (800a1d8 <__pow5mult+0xa8>)
 800a142:	3a01      	subs	r2, #1
 800a144:	2300      	movs	r3, #0
 800a146:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a14a:	f7ff fe9f 	bl	8009e8c <__multadd>
 800a14e:	4607      	mov	r7, r0
 800a150:	10ad      	asrs	r5, r5, #2
 800a152:	d03d      	beq.n	800a1d0 <__pow5mult+0xa0>
 800a154:	69f4      	ldr	r4, [r6, #28]
 800a156:	b97c      	cbnz	r4, 800a178 <__pow5mult+0x48>
 800a158:	2010      	movs	r0, #16
 800a15a:	f7ff fd81 	bl	8009c60 <malloc>
 800a15e:	4602      	mov	r2, r0
 800a160:	61f0      	str	r0, [r6, #28]
 800a162:	b928      	cbnz	r0, 800a170 <__pow5mult+0x40>
 800a164:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a168:	4b1c      	ldr	r3, [pc, #112]	; (800a1dc <__pow5mult+0xac>)
 800a16a:	481d      	ldr	r0, [pc, #116]	; (800a1e0 <__pow5mult+0xb0>)
 800a16c:	f000 fc54 	bl	800aa18 <__assert_func>
 800a170:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a174:	6004      	str	r4, [r0, #0]
 800a176:	60c4      	str	r4, [r0, #12]
 800a178:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a17c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a180:	b94c      	cbnz	r4, 800a196 <__pow5mult+0x66>
 800a182:	f240 2171 	movw	r1, #625	; 0x271
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff ff14 	bl	8009fb4 <__i2b>
 800a18c:	2300      	movs	r3, #0
 800a18e:	4604      	mov	r4, r0
 800a190:	f8c8 0008 	str.w	r0, [r8, #8]
 800a194:	6003      	str	r3, [r0, #0]
 800a196:	f04f 0900 	mov.w	r9, #0
 800a19a:	07eb      	lsls	r3, r5, #31
 800a19c:	d50a      	bpl.n	800a1b4 <__pow5mult+0x84>
 800a19e:	4639      	mov	r1, r7
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f7ff ff1c 	bl	8009fe0 <__multiply>
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	f7ff fe4b 	bl	8009e48 <_Bfree>
 800a1b2:	4647      	mov	r7, r8
 800a1b4:	106d      	asrs	r5, r5, #1
 800a1b6:	d00b      	beq.n	800a1d0 <__pow5mult+0xa0>
 800a1b8:	6820      	ldr	r0, [r4, #0]
 800a1ba:	b938      	cbnz	r0, 800a1cc <__pow5mult+0x9c>
 800a1bc:	4622      	mov	r2, r4
 800a1be:	4621      	mov	r1, r4
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff ff0d 	bl	8009fe0 <__multiply>
 800a1c6:	6020      	str	r0, [r4, #0]
 800a1c8:	f8c0 9000 	str.w	r9, [r0]
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	e7e4      	b.n	800a19a <__pow5mult+0x6a>
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d6:	bf00      	nop
 800a1d8:	0800b778 	.word	0x0800b778
 800a1dc:	0800b5ac 	.word	0x0800b5ac
 800a1e0:	0800b62c 	.word	0x0800b62c

0800a1e4 <__lshift>:
 800a1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	4607      	mov	r7, r0
 800a1ec:	4691      	mov	r9, r2
 800a1ee:	6923      	ldr	r3, [r4, #16]
 800a1f0:	6849      	ldr	r1, [r1, #4]
 800a1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1f6:	68a3      	ldr	r3, [r4, #8]
 800a1f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1fc:	f108 0601 	add.w	r6, r8, #1
 800a200:	42b3      	cmp	r3, r6
 800a202:	db0b      	blt.n	800a21c <__lshift+0x38>
 800a204:	4638      	mov	r0, r7
 800a206:	f7ff fddf 	bl	8009dc8 <_Balloc>
 800a20a:	4605      	mov	r5, r0
 800a20c:	b948      	cbnz	r0, 800a222 <__lshift+0x3e>
 800a20e:	4602      	mov	r2, r0
 800a210:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a214:	4b27      	ldr	r3, [pc, #156]	; (800a2b4 <__lshift+0xd0>)
 800a216:	4828      	ldr	r0, [pc, #160]	; (800a2b8 <__lshift+0xd4>)
 800a218:	f000 fbfe 	bl	800aa18 <__assert_func>
 800a21c:	3101      	adds	r1, #1
 800a21e:	005b      	lsls	r3, r3, #1
 800a220:	e7ee      	b.n	800a200 <__lshift+0x1c>
 800a222:	2300      	movs	r3, #0
 800a224:	f100 0114 	add.w	r1, r0, #20
 800a228:	f100 0210 	add.w	r2, r0, #16
 800a22c:	4618      	mov	r0, r3
 800a22e:	4553      	cmp	r3, sl
 800a230:	db33      	blt.n	800a29a <__lshift+0xb6>
 800a232:	6920      	ldr	r0, [r4, #16]
 800a234:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a238:	f104 0314 	add.w	r3, r4, #20
 800a23c:	f019 091f 	ands.w	r9, r9, #31
 800a240:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a244:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a248:	d02b      	beq.n	800a2a2 <__lshift+0xbe>
 800a24a:	468a      	mov	sl, r1
 800a24c:	2200      	movs	r2, #0
 800a24e:	f1c9 0e20 	rsb	lr, r9, #32
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	fa00 f009 	lsl.w	r0, r0, r9
 800a258:	4310      	orrs	r0, r2
 800a25a:	f84a 0b04 	str.w	r0, [sl], #4
 800a25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a262:	459c      	cmp	ip, r3
 800a264:	fa22 f20e 	lsr.w	r2, r2, lr
 800a268:	d8f3      	bhi.n	800a252 <__lshift+0x6e>
 800a26a:	ebac 0304 	sub.w	r3, ip, r4
 800a26e:	3b15      	subs	r3, #21
 800a270:	f023 0303 	bic.w	r3, r3, #3
 800a274:	3304      	adds	r3, #4
 800a276:	f104 0015 	add.w	r0, r4, #21
 800a27a:	4584      	cmp	ip, r0
 800a27c:	bf38      	it	cc
 800a27e:	2304      	movcc	r3, #4
 800a280:	50ca      	str	r2, [r1, r3]
 800a282:	b10a      	cbz	r2, 800a288 <__lshift+0xa4>
 800a284:	f108 0602 	add.w	r6, r8, #2
 800a288:	3e01      	subs	r6, #1
 800a28a:	4638      	mov	r0, r7
 800a28c:	4621      	mov	r1, r4
 800a28e:	612e      	str	r6, [r5, #16]
 800a290:	f7ff fdda 	bl	8009e48 <_Bfree>
 800a294:	4628      	mov	r0, r5
 800a296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a29a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a29e:	3301      	adds	r3, #1
 800a2a0:	e7c5      	b.n	800a22e <__lshift+0x4a>
 800a2a2:	3904      	subs	r1, #4
 800a2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a8:	459c      	cmp	ip, r3
 800a2aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2ae:	d8f9      	bhi.n	800a2a4 <__lshift+0xc0>
 800a2b0:	e7ea      	b.n	800a288 <__lshift+0xa4>
 800a2b2:	bf00      	nop
 800a2b4:	0800b61b 	.word	0x0800b61b
 800a2b8:	0800b62c 	.word	0x0800b62c

0800a2bc <__mcmp>:
 800a2bc:	4603      	mov	r3, r0
 800a2be:	690a      	ldr	r2, [r1, #16]
 800a2c0:	6900      	ldr	r0, [r0, #16]
 800a2c2:	b530      	push	{r4, r5, lr}
 800a2c4:	1a80      	subs	r0, r0, r2
 800a2c6:	d10d      	bne.n	800a2e4 <__mcmp+0x28>
 800a2c8:	3314      	adds	r3, #20
 800a2ca:	3114      	adds	r1, #20
 800a2cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2dc:	4295      	cmp	r5, r2
 800a2de:	d002      	beq.n	800a2e6 <__mcmp+0x2a>
 800a2e0:	d304      	bcc.n	800a2ec <__mcmp+0x30>
 800a2e2:	2001      	movs	r0, #1
 800a2e4:	bd30      	pop	{r4, r5, pc}
 800a2e6:	42a3      	cmp	r3, r4
 800a2e8:	d3f4      	bcc.n	800a2d4 <__mcmp+0x18>
 800a2ea:	e7fb      	b.n	800a2e4 <__mcmp+0x28>
 800a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f0:	e7f8      	b.n	800a2e4 <__mcmp+0x28>
	...

0800a2f4 <__mdiff>:
 800a2f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	4628      	mov	r0, r5
 800a300:	4614      	mov	r4, r2
 800a302:	f7ff ffdb 	bl	800a2bc <__mcmp>
 800a306:	1e06      	subs	r6, r0, #0
 800a308:	d111      	bne.n	800a32e <__mdiff+0x3a>
 800a30a:	4631      	mov	r1, r6
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7ff fd5b 	bl	8009dc8 <_Balloc>
 800a312:	4602      	mov	r2, r0
 800a314:	b928      	cbnz	r0, 800a322 <__mdiff+0x2e>
 800a316:	f240 2137 	movw	r1, #567	; 0x237
 800a31a:	4b3a      	ldr	r3, [pc, #232]	; (800a404 <__mdiff+0x110>)
 800a31c:	483a      	ldr	r0, [pc, #232]	; (800a408 <__mdiff+0x114>)
 800a31e:	f000 fb7b 	bl	800aa18 <__assert_func>
 800a322:	2301      	movs	r3, #1
 800a324:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a328:	4610      	mov	r0, r2
 800a32a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	bfa4      	itt	ge
 800a330:	4623      	movge	r3, r4
 800a332:	462c      	movge	r4, r5
 800a334:	4638      	mov	r0, r7
 800a336:	6861      	ldr	r1, [r4, #4]
 800a338:	bfa6      	itte	ge
 800a33a:	461d      	movge	r5, r3
 800a33c:	2600      	movge	r6, #0
 800a33e:	2601      	movlt	r6, #1
 800a340:	f7ff fd42 	bl	8009dc8 <_Balloc>
 800a344:	4602      	mov	r2, r0
 800a346:	b918      	cbnz	r0, 800a350 <__mdiff+0x5c>
 800a348:	f240 2145 	movw	r1, #581	; 0x245
 800a34c:	4b2d      	ldr	r3, [pc, #180]	; (800a404 <__mdiff+0x110>)
 800a34e:	e7e5      	b.n	800a31c <__mdiff+0x28>
 800a350:	f102 0814 	add.w	r8, r2, #20
 800a354:	46c2      	mov	sl, r8
 800a356:	f04f 0c00 	mov.w	ip, #0
 800a35a:	6927      	ldr	r7, [r4, #16]
 800a35c:	60c6      	str	r6, [r0, #12]
 800a35e:	692e      	ldr	r6, [r5, #16]
 800a360:	f104 0014 	add.w	r0, r4, #20
 800a364:	f105 0914 	add.w	r9, r5, #20
 800a368:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a36c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a370:	3410      	adds	r4, #16
 800a372:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a376:	f859 3b04 	ldr.w	r3, [r9], #4
 800a37a:	fa1f f18b 	uxth.w	r1, fp
 800a37e:	4461      	add	r1, ip
 800a380:	fa1f fc83 	uxth.w	ip, r3
 800a384:	0c1b      	lsrs	r3, r3, #16
 800a386:	eba1 010c 	sub.w	r1, r1, ip
 800a38a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a38e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a392:	b289      	uxth	r1, r1
 800a394:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a398:	454e      	cmp	r6, r9
 800a39a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a39e:	f84a 1b04 	str.w	r1, [sl], #4
 800a3a2:	d8e6      	bhi.n	800a372 <__mdiff+0x7e>
 800a3a4:	1b73      	subs	r3, r6, r5
 800a3a6:	3b15      	subs	r3, #21
 800a3a8:	f023 0303 	bic.w	r3, r3, #3
 800a3ac:	3515      	adds	r5, #21
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	42ae      	cmp	r6, r5
 800a3b2:	bf38      	it	cc
 800a3b4:	2304      	movcc	r3, #4
 800a3b6:	4418      	add	r0, r3
 800a3b8:	4443      	add	r3, r8
 800a3ba:	461e      	mov	r6, r3
 800a3bc:	4605      	mov	r5, r0
 800a3be:	4575      	cmp	r5, lr
 800a3c0:	d30e      	bcc.n	800a3e0 <__mdiff+0xec>
 800a3c2:	f10e 0103 	add.w	r1, lr, #3
 800a3c6:	1a09      	subs	r1, r1, r0
 800a3c8:	f021 0103 	bic.w	r1, r1, #3
 800a3cc:	3803      	subs	r0, #3
 800a3ce:	4586      	cmp	lr, r0
 800a3d0:	bf38      	it	cc
 800a3d2:	2100      	movcc	r1, #0
 800a3d4:	440b      	add	r3, r1
 800a3d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3da:	b189      	cbz	r1, 800a400 <__mdiff+0x10c>
 800a3dc:	6117      	str	r7, [r2, #16]
 800a3de:	e7a3      	b.n	800a328 <__mdiff+0x34>
 800a3e0:	f855 8b04 	ldr.w	r8, [r5], #4
 800a3e4:	fa1f f188 	uxth.w	r1, r8
 800a3e8:	4461      	add	r1, ip
 800a3ea:	140c      	asrs	r4, r1, #16
 800a3ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3f0:	b289      	uxth	r1, r1
 800a3f2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a3f6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a3fa:	f846 1b04 	str.w	r1, [r6], #4
 800a3fe:	e7de      	b.n	800a3be <__mdiff+0xca>
 800a400:	3f01      	subs	r7, #1
 800a402:	e7e8      	b.n	800a3d6 <__mdiff+0xe2>
 800a404:	0800b61b 	.word	0x0800b61b
 800a408:	0800b62c 	.word	0x0800b62c

0800a40c <__d2b>:
 800a40c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a40e:	2101      	movs	r1, #1
 800a410:	4617      	mov	r7, r2
 800a412:	461c      	mov	r4, r3
 800a414:	9e08      	ldr	r6, [sp, #32]
 800a416:	f7ff fcd7 	bl	8009dc8 <_Balloc>
 800a41a:	4605      	mov	r5, r0
 800a41c:	b930      	cbnz	r0, 800a42c <__d2b+0x20>
 800a41e:	4602      	mov	r2, r0
 800a420:	f240 310f 	movw	r1, #783	; 0x30f
 800a424:	4b22      	ldr	r3, [pc, #136]	; (800a4b0 <__d2b+0xa4>)
 800a426:	4823      	ldr	r0, [pc, #140]	; (800a4b4 <__d2b+0xa8>)
 800a428:	f000 faf6 	bl	800aa18 <__assert_func>
 800a42c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a430:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a434:	bb24      	cbnz	r4, 800a480 <__d2b+0x74>
 800a436:	2f00      	cmp	r7, #0
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	d026      	beq.n	800a48a <__d2b+0x7e>
 800a43c:	4668      	mov	r0, sp
 800a43e:	9700      	str	r7, [sp, #0]
 800a440:	f7ff fd8a 	bl	8009f58 <__lo0bits>
 800a444:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a448:	b1e8      	cbz	r0, 800a486 <__d2b+0x7a>
 800a44a:	f1c0 0320 	rsb	r3, r0, #32
 800a44e:	fa02 f303 	lsl.w	r3, r2, r3
 800a452:	430b      	orrs	r3, r1
 800a454:	40c2      	lsrs	r2, r0
 800a456:	616b      	str	r3, [r5, #20]
 800a458:	9201      	str	r2, [sp, #4]
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	bf14      	ite	ne
 800a460:	2102      	movne	r1, #2
 800a462:	2101      	moveq	r1, #1
 800a464:	61ab      	str	r3, [r5, #24]
 800a466:	6129      	str	r1, [r5, #16]
 800a468:	b1bc      	cbz	r4, 800a49a <__d2b+0x8e>
 800a46a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a46e:	4404      	add	r4, r0
 800a470:	6034      	str	r4, [r6, #0]
 800a472:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a478:	6018      	str	r0, [r3, #0]
 800a47a:	4628      	mov	r0, r5
 800a47c:	b003      	add	sp, #12
 800a47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a484:	e7d7      	b.n	800a436 <__d2b+0x2a>
 800a486:	6169      	str	r1, [r5, #20]
 800a488:	e7e7      	b.n	800a45a <__d2b+0x4e>
 800a48a:	a801      	add	r0, sp, #4
 800a48c:	f7ff fd64 	bl	8009f58 <__lo0bits>
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	2101      	movs	r1, #1
 800a494:	616b      	str	r3, [r5, #20]
 800a496:	3020      	adds	r0, #32
 800a498:	e7e5      	b.n	800a466 <__d2b+0x5a>
 800a49a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a49e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a4a2:	6030      	str	r0, [r6, #0]
 800a4a4:	6918      	ldr	r0, [r3, #16]
 800a4a6:	f7ff fd37 	bl	8009f18 <__hi0bits>
 800a4aa:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a4ae:	e7e2      	b.n	800a476 <__d2b+0x6a>
 800a4b0:	0800b61b 	.word	0x0800b61b
 800a4b4:	0800b62c 	.word	0x0800b62c

0800a4b8 <__ssputs_r>:
 800a4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4bc:	461f      	mov	r7, r3
 800a4be:	688e      	ldr	r6, [r1, #8]
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	42be      	cmp	r6, r7
 800a4c4:	460c      	mov	r4, r1
 800a4c6:	4690      	mov	r8, r2
 800a4c8:	680b      	ldr	r3, [r1, #0]
 800a4ca:	d82c      	bhi.n	800a526 <__ssputs_r+0x6e>
 800a4cc:	898a      	ldrh	r2, [r1, #12]
 800a4ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4d2:	d026      	beq.n	800a522 <__ssputs_r+0x6a>
 800a4d4:	6965      	ldr	r5, [r4, #20]
 800a4d6:	6909      	ldr	r1, [r1, #16]
 800a4d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4dc:	eba3 0901 	sub.w	r9, r3, r1
 800a4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4e4:	1c7b      	adds	r3, r7, #1
 800a4e6:	444b      	add	r3, r9
 800a4e8:	106d      	asrs	r5, r5, #1
 800a4ea:	429d      	cmp	r5, r3
 800a4ec:	bf38      	it	cc
 800a4ee:	461d      	movcc	r5, r3
 800a4f0:	0553      	lsls	r3, r2, #21
 800a4f2:	d527      	bpl.n	800a544 <__ssputs_r+0x8c>
 800a4f4:	4629      	mov	r1, r5
 800a4f6:	f7ff fbdb 	bl	8009cb0 <_malloc_r>
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	b360      	cbz	r0, 800a558 <__ssputs_r+0xa0>
 800a4fe:	464a      	mov	r2, r9
 800a500:	6921      	ldr	r1, [r4, #16]
 800a502:	f7fe fce9 	bl	8008ed8 <memcpy>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a510:	81a3      	strh	r3, [r4, #12]
 800a512:	6126      	str	r6, [r4, #16]
 800a514:	444e      	add	r6, r9
 800a516:	6026      	str	r6, [r4, #0]
 800a518:	463e      	mov	r6, r7
 800a51a:	6165      	str	r5, [r4, #20]
 800a51c:	eba5 0509 	sub.w	r5, r5, r9
 800a520:	60a5      	str	r5, [r4, #8]
 800a522:	42be      	cmp	r6, r7
 800a524:	d900      	bls.n	800a528 <__ssputs_r+0x70>
 800a526:	463e      	mov	r6, r7
 800a528:	4632      	mov	r2, r6
 800a52a:	4641      	mov	r1, r8
 800a52c:	6820      	ldr	r0, [r4, #0]
 800a52e:	f000 fa26 	bl	800a97e <memmove>
 800a532:	2000      	movs	r0, #0
 800a534:	68a3      	ldr	r3, [r4, #8]
 800a536:	1b9b      	subs	r3, r3, r6
 800a538:	60a3      	str	r3, [r4, #8]
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	4433      	add	r3, r6
 800a53e:	6023      	str	r3, [r4, #0]
 800a540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a544:	462a      	mov	r2, r5
 800a546:	f000 faab 	bl	800aaa0 <_realloc_r>
 800a54a:	4606      	mov	r6, r0
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d1e0      	bne.n	800a512 <__ssputs_r+0x5a>
 800a550:	4650      	mov	r0, sl
 800a552:	6921      	ldr	r1, [r4, #16]
 800a554:	f7ff fb3c 	bl	8009bd0 <_free_r>
 800a558:	230c      	movs	r3, #12
 800a55a:	f8ca 3000 	str.w	r3, [sl]
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	f04f 30ff 	mov.w	r0, #4294967295
 800a564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	e7e9      	b.n	800a540 <__ssputs_r+0x88>

0800a56c <_svfiprintf_r>:
 800a56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a570:	4698      	mov	r8, r3
 800a572:	898b      	ldrh	r3, [r1, #12]
 800a574:	4607      	mov	r7, r0
 800a576:	061b      	lsls	r3, r3, #24
 800a578:	460d      	mov	r5, r1
 800a57a:	4614      	mov	r4, r2
 800a57c:	b09d      	sub	sp, #116	; 0x74
 800a57e:	d50e      	bpl.n	800a59e <_svfiprintf_r+0x32>
 800a580:	690b      	ldr	r3, [r1, #16]
 800a582:	b963      	cbnz	r3, 800a59e <_svfiprintf_r+0x32>
 800a584:	2140      	movs	r1, #64	; 0x40
 800a586:	f7ff fb93 	bl	8009cb0 <_malloc_r>
 800a58a:	6028      	str	r0, [r5, #0]
 800a58c:	6128      	str	r0, [r5, #16]
 800a58e:	b920      	cbnz	r0, 800a59a <_svfiprintf_r+0x2e>
 800a590:	230c      	movs	r3, #12
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	e0d0      	b.n	800a73c <_svfiprintf_r+0x1d0>
 800a59a:	2340      	movs	r3, #64	; 0x40
 800a59c:	616b      	str	r3, [r5, #20]
 800a59e:	2300      	movs	r3, #0
 800a5a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a2:	2320      	movs	r3, #32
 800a5a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5a8:	2330      	movs	r3, #48	; 0x30
 800a5aa:	f04f 0901 	mov.w	r9, #1
 800a5ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5b2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a754 <_svfiprintf_r+0x1e8>
 800a5b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ba:	4623      	mov	r3, r4
 800a5bc:	469a      	mov	sl, r3
 800a5be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5c2:	b10a      	cbz	r2, 800a5c8 <_svfiprintf_r+0x5c>
 800a5c4:	2a25      	cmp	r2, #37	; 0x25
 800a5c6:	d1f9      	bne.n	800a5bc <_svfiprintf_r+0x50>
 800a5c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a5cc:	d00b      	beq.n	800a5e6 <_svfiprintf_r+0x7a>
 800a5ce:	465b      	mov	r3, fp
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	4629      	mov	r1, r5
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f7ff ff6f 	bl	800a4b8 <__ssputs_r>
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f000 80a9 	beq.w	800a732 <_svfiprintf_r+0x1c6>
 800a5e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5e2:	445a      	add	r2, fp
 800a5e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	f000 80a1 	beq.w	800a732 <_svfiprintf_r+0x1c6>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5fa:	f10a 0a01 	add.w	sl, sl, #1
 800a5fe:	9304      	str	r3, [sp, #16]
 800a600:	9307      	str	r3, [sp, #28]
 800a602:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a606:	931a      	str	r3, [sp, #104]	; 0x68
 800a608:	4654      	mov	r4, sl
 800a60a:	2205      	movs	r2, #5
 800a60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a610:	4850      	ldr	r0, [pc, #320]	; (800a754 <_svfiprintf_r+0x1e8>)
 800a612:	f7fe fc53 	bl	8008ebc <memchr>
 800a616:	9a04      	ldr	r2, [sp, #16]
 800a618:	b9d8      	cbnz	r0, 800a652 <_svfiprintf_r+0xe6>
 800a61a:	06d0      	lsls	r0, r2, #27
 800a61c:	bf44      	itt	mi
 800a61e:	2320      	movmi	r3, #32
 800a620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a624:	0711      	lsls	r1, r2, #28
 800a626:	bf44      	itt	mi
 800a628:	232b      	movmi	r3, #43	; 0x2b
 800a62a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a62e:	f89a 3000 	ldrb.w	r3, [sl]
 800a632:	2b2a      	cmp	r3, #42	; 0x2a
 800a634:	d015      	beq.n	800a662 <_svfiprintf_r+0xf6>
 800a636:	4654      	mov	r4, sl
 800a638:	2000      	movs	r0, #0
 800a63a:	f04f 0c0a 	mov.w	ip, #10
 800a63e:	9a07      	ldr	r2, [sp, #28]
 800a640:	4621      	mov	r1, r4
 800a642:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a646:	3b30      	subs	r3, #48	; 0x30
 800a648:	2b09      	cmp	r3, #9
 800a64a:	d94d      	bls.n	800a6e8 <_svfiprintf_r+0x17c>
 800a64c:	b1b0      	cbz	r0, 800a67c <_svfiprintf_r+0x110>
 800a64e:	9207      	str	r2, [sp, #28]
 800a650:	e014      	b.n	800a67c <_svfiprintf_r+0x110>
 800a652:	eba0 0308 	sub.w	r3, r0, r8
 800a656:	fa09 f303 	lsl.w	r3, r9, r3
 800a65a:	4313      	orrs	r3, r2
 800a65c:	46a2      	mov	sl, r4
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	e7d2      	b.n	800a608 <_svfiprintf_r+0x9c>
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	1d19      	adds	r1, r3, #4
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	9103      	str	r1, [sp, #12]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	bfbb      	ittet	lt
 800a66e:	425b      	neglt	r3, r3
 800a670:	f042 0202 	orrlt.w	r2, r2, #2
 800a674:	9307      	strge	r3, [sp, #28]
 800a676:	9307      	strlt	r3, [sp, #28]
 800a678:	bfb8      	it	lt
 800a67a:	9204      	strlt	r2, [sp, #16]
 800a67c:	7823      	ldrb	r3, [r4, #0]
 800a67e:	2b2e      	cmp	r3, #46	; 0x2e
 800a680:	d10c      	bne.n	800a69c <_svfiprintf_r+0x130>
 800a682:	7863      	ldrb	r3, [r4, #1]
 800a684:	2b2a      	cmp	r3, #42	; 0x2a
 800a686:	d134      	bne.n	800a6f2 <_svfiprintf_r+0x186>
 800a688:	9b03      	ldr	r3, [sp, #12]
 800a68a:	3402      	adds	r4, #2
 800a68c:	1d1a      	adds	r2, r3, #4
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	9203      	str	r2, [sp, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	bfb8      	it	lt
 800a696:	f04f 33ff 	movlt.w	r3, #4294967295
 800a69a:	9305      	str	r3, [sp, #20]
 800a69c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a758 <_svfiprintf_r+0x1ec>
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	4650      	mov	r0, sl
 800a6a4:	7821      	ldrb	r1, [r4, #0]
 800a6a6:	f7fe fc09 	bl	8008ebc <memchr>
 800a6aa:	b138      	cbz	r0, 800a6bc <_svfiprintf_r+0x150>
 800a6ac:	2240      	movs	r2, #64	; 0x40
 800a6ae:	9b04      	ldr	r3, [sp, #16]
 800a6b0:	eba0 000a 	sub.w	r0, r0, sl
 800a6b4:	4082      	lsls	r2, r0
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	3401      	adds	r4, #1
 800a6ba:	9304      	str	r3, [sp, #16]
 800a6bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c0:	2206      	movs	r2, #6
 800a6c2:	4826      	ldr	r0, [pc, #152]	; (800a75c <_svfiprintf_r+0x1f0>)
 800a6c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6c8:	f7fe fbf8 	bl	8008ebc <memchr>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d038      	beq.n	800a742 <_svfiprintf_r+0x1d6>
 800a6d0:	4b23      	ldr	r3, [pc, #140]	; (800a760 <_svfiprintf_r+0x1f4>)
 800a6d2:	bb1b      	cbnz	r3, 800a71c <_svfiprintf_r+0x1b0>
 800a6d4:	9b03      	ldr	r3, [sp, #12]
 800a6d6:	3307      	adds	r3, #7
 800a6d8:	f023 0307 	bic.w	r3, r3, #7
 800a6dc:	3308      	adds	r3, #8
 800a6de:	9303      	str	r3, [sp, #12]
 800a6e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e2:	4433      	add	r3, r6
 800a6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a6e6:	e768      	b.n	800a5ba <_svfiprintf_r+0x4e>
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f0:	e7a6      	b.n	800a640 <_svfiprintf_r+0xd4>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	f04f 0c0a 	mov.w	ip, #10
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	3401      	adds	r4, #1
 800a6fc:	9305      	str	r3, [sp, #20]
 800a6fe:	4620      	mov	r0, r4
 800a700:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a704:	3a30      	subs	r2, #48	; 0x30
 800a706:	2a09      	cmp	r2, #9
 800a708:	d903      	bls.n	800a712 <_svfiprintf_r+0x1a6>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0c6      	beq.n	800a69c <_svfiprintf_r+0x130>
 800a70e:	9105      	str	r1, [sp, #20]
 800a710:	e7c4      	b.n	800a69c <_svfiprintf_r+0x130>
 800a712:	4604      	mov	r4, r0
 800a714:	2301      	movs	r3, #1
 800a716:	fb0c 2101 	mla	r1, ip, r1, r2
 800a71a:	e7f0      	b.n	800a6fe <_svfiprintf_r+0x192>
 800a71c:	ab03      	add	r3, sp, #12
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	462a      	mov	r2, r5
 800a722:	4638      	mov	r0, r7
 800a724:	4b0f      	ldr	r3, [pc, #60]	; (800a764 <_svfiprintf_r+0x1f8>)
 800a726:	a904      	add	r1, sp, #16
 800a728:	f7fd fd70 	bl	800820c <_printf_float>
 800a72c:	1c42      	adds	r2, r0, #1
 800a72e:	4606      	mov	r6, r0
 800a730:	d1d6      	bne.n	800a6e0 <_svfiprintf_r+0x174>
 800a732:	89ab      	ldrh	r3, [r5, #12]
 800a734:	065b      	lsls	r3, r3, #25
 800a736:	f53f af2d 	bmi.w	800a594 <_svfiprintf_r+0x28>
 800a73a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a73c:	b01d      	add	sp, #116	; 0x74
 800a73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a742:	ab03      	add	r3, sp, #12
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	462a      	mov	r2, r5
 800a748:	4638      	mov	r0, r7
 800a74a:	4b06      	ldr	r3, [pc, #24]	; (800a764 <_svfiprintf_r+0x1f8>)
 800a74c:	a904      	add	r1, sp, #16
 800a74e:	f7fd fffd 	bl	800874c <_printf_i>
 800a752:	e7eb      	b.n	800a72c <_svfiprintf_r+0x1c0>
 800a754:	0800b784 	.word	0x0800b784
 800a758:	0800b78a 	.word	0x0800b78a
 800a75c:	0800b78e 	.word	0x0800b78e
 800a760:	0800820d 	.word	0x0800820d
 800a764:	0800a4b9 	.word	0x0800a4b9

0800a768 <__sflush_r>:
 800a768:	898a      	ldrh	r2, [r1, #12]
 800a76a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76c:	4605      	mov	r5, r0
 800a76e:	0710      	lsls	r0, r2, #28
 800a770:	460c      	mov	r4, r1
 800a772:	d457      	bmi.n	800a824 <__sflush_r+0xbc>
 800a774:	684b      	ldr	r3, [r1, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	dc04      	bgt.n	800a784 <__sflush_r+0x1c>
 800a77a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dc01      	bgt.n	800a784 <__sflush_r+0x1c>
 800a780:	2000      	movs	r0, #0
 800a782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a786:	2e00      	cmp	r6, #0
 800a788:	d0fa      	beq.n	800a780 <__sflush_r+0x18>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a790:	682f      	ldr	r7, [r5, #0]
 800a792:	6a21      	ldr	r1, [r4, #32]
 800a794:	602b      	str	r3, [r5, #0]
 800a796:	d032      	beq.n	800a7fe <__sflush_r+0x96>
 800a798:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a79a:	89a3      	ldrh	r3, [r4, #12]
 800a79c:	075a      	lsls	r2, r3, #29
 800a79e:	d505      	bpl.n	800a7ac <__sflush_r+0x44>
 800a7a0:	6863      	ldr	r3, [r4, #4]
 800a7a2:	1ac0      	subs	r0, r0, r3
 800a7a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7a6:	b10b      	cbz	r3, 800a7ac <__sflush_r+0x44>
 800a7a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7aa:	1ac0      	subs	r0, r0, r3
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	6a21      	ldr	r1, [r4, #32]
 800a7b6:	47b0      	blx	r6
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	d106      	bne.n	800a7cc <__sflush_r+0x64>
 800a7be:	6829      	ldr	r1, [r5, #0]
 800a7c0:	291d      	cmp	r1, #29
 800a7c2:	d82b      	bhi.n	800a81c <__sflush_r+0xb4>
 800a7c4:	4a28      	ldr	r2, [pc, #160]	; (800a868 <__sflush_r+0x100>)
 800a7c6:	410a      	asrs	r2, r1
 800a7c8:	07d6      	lsls	r6, r2, #31
 800a7ca:	d427      	bmi.n	800a81c <__sflush_r+0xb4>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	6062      	str	r2, [r4, #4]
 800a7d0:	6922      	ldr	r2, [r4, #16]
 800a7d2:	04d9      	lsls	r1, r3, #19
 800a7d4:	6022      	str	r2, [r4, #0]
 800a7d6:	d504      	bpl.n	800a7e2 <__sflush_r+0x7a>
 800a7d8:	1c42      	adds	r2, r0, #1
 800a7da:	d101      	bne.n	800a7e0 <__sflush_r+0x78>
 800a7dc:	682b      	ldr	r3, [r5, #0]
 800a7de:	b903      	cbnz	r3, 800a7e2 <__sflush_r+0x7a>
 800a7e0:	6560      	str	r0, [r4, #84]	; 0x54
 800a7e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7e4:	602f      	str	r7, [r5, #0]
 800a7e6:	2900      	cmp	r1, #0
 800a7e8:	d0ca      	beq.n	800a780 <__sflush_r+0x18>
 800a7ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	d002      	beq.n	800a7f8 <__sflush_r+0x90>
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f7ff f9ec 	bl	8009bd0 <_free_r>
 800a7f8:	2000      	movs	r0, #0
 800a7fa:	6360      	str	r0, [r4, #52]	; 0x34
 800a7fc:	e7c1      	b.n	800a782 <__sflush_r+0x1a>
 800a7fe:	2301      	movs	r3, #1
 800a800:	4628      	mov	r0, r5
 800a802:	47b0      	blx	r6
 800a804:	1c41      	adds	r1, r0, #1
 800a806:	d1c8      	bne.n	800a79a <__sflush_r+0x32>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0c5      	beq.n	800a79a <__sflush_r+0x32>
 800a80e:	2b1d      	cmp	r3, #29
 800a810:	d001      	beq.n	800a816 <__sflush_r+0xae>
 800a812:	2b16      	cmp	r3, #22
 800a814:	d101      	bne.n	800a81a <__sflush_r+0xb2>
 800a816:	602f      	str	r7, [r5, #0]
 800a818:	e7b2      	b.n	800a780 <__sflush_r+0x18>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e7ae      	b.n	800a782 <__sflush_r+0x1a>
 800a824:	690f      	ldr	r7, [r1, #16]
 800a826:	2f00      	cmp	r7, #0
 800a828:	d0aa      	beq.n	800a780 <__sflush_r+0x18>
 800a82a:	0793      	lsls	r3, r2, #30
 800a82c:	bf18      	it	ne
 800a82e:	2300      	movne	r3, #0
 800a830:	680e      	ldr	r6, [r1, #0]
 800a832:	bf08      	it	eq
 800a834:	694b      	ldreq	r3, [r1, #20]
 800a836:	1bf6      	subs	r6, r6, r7
 800a838:	600f      	str	r7, [r1, #0]
 800a83a:	608b      	str	r3, [r1, #8]
 800a83c:	2e00      	cmp	r6, #0
 800a83e:	dd9f      	ble.n	800a780 <__sflush_r+0x18>
 800a840:	4633      	mov	r3, r6
 800a842:	463a      	mov	r2, r7
 800a844:	4628      	mov	r0, r5
 800a846:	6a21      	ldr	r1, [r4, #32]
 800a848:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a84c:	47e0      	blx	ip
 800a84e:	2800      	cmp	r0, #0
 800a850:	dc06      	bgt.n	800a860 <__sflush_r+0xf8>
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	f04f 30ff 	mov.w	r0, #4294967295
 800a858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85c:	81a3      	strh	r3, [r4, #12]
 800a85e:	e790      	b.n	800a782 <__sflush_r+0x1a>
 800a860:	4407      	add	r7, r0
 800a862:	1a36      	subs	r6, r6, r0
 800a864:	e7ea      	b.n	800a83c <__sflush_r+0xd4>
 800a866:	bf00      	nop
 800a868:	dfbffffe 	.word	0xdfbffffe

0800a86c <_fflush_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	690b      	ldr	r3, [r1, #16]
 800a870:	4605      	mov	r5, r0
 800a872:	460c      	mov	r4, r1
 800a874:	b913      	cbnz	r3, 800a87c <_fflush_r+0x10>
 800a876:	2500      	movs	r5, #0
 800a878:	4628      	mov	r0, r5
 800a87a:	bd38      	pop	{r3, r4, r5, pc}
 800a87c:	b118      	cbz	r0, 800a886 <_fflush_r+0x1a>
 800a87e:	6a03      	ldr	r3, [r0, #32]
 800a880:	b90b      	cbnz	r3, 800a886 <_fflush_r+0x1a>
 800a882:	f7fe f8ff 	bl	8008a84 <__sinit>
 800a886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d0f3      	beq.n	800a876 <_fflush_r+0xa>
 800a88e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a890:	07d0      	lsls	r0, r2, #31
 800a892:	d404      	bmi.n	800a89e <_fflush_r+0x32>
 800a894:	0599      	lsls	r1, r3, #22
 800a896:	d402      	bmi.n	800a89e <_fflush_r+0x32>
 800a898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a89a:	f7fe fb0d 	bl	8008eb8 <__retarget_lock_acquire_recursive>
 800a89e:	4628      	mov	r0, r5
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	f7ff ff61 	bl	800a768 <__sflush_r>
 800a8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8a8:	4605      	mov	r5, r0
 800a8aa:	07da      	lsls	r2, r3, #31
 800a8ac:	d4e4      	bmi.n	800a878 <_fflush_r+0xc>
 800a8ae:	89a3      	ldrh	r3, [r4, #12]
 800a8b0:	059b      	lsls	r3, r3, #22
 800a8b2:	d4e1      	bmi.n	800a878 <_fflush_r+0xc>
 800a8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8b6:	f7fe fb00 	bl	8008eba <__retarget_lock_release_recursive>
 800a8ba:	e7dd      	b.n	800a878 <_fflush_r+0xc>

0800a8bc <__swhatbuf_r>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	460c      	mov	r4, r1
 800a8c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c4:	4615      	mov	r5, r2
 800a8c6:	2900      	cmp	r1, #0
 800a8c8:	461e      	mov	r6, r3
 800a8ca:	b096      	sub	sp, #88	; 0x58
 800a8cc:	da0c      	bge.n	800a8e8 <__swhatbuf_r+0x2c>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a8d6:	bf0c      	ite	eq
 800a8d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a8dc:	2340      	movne	r3, #64	; 0x40
 800a8de:	2000      	movs	r0, #0
 800a8e0:	6031      	str	r1, [r6, #0]
 800a8e2:	602b      	str	r3, [r5, #0]
 800a8e4:	b016      	add	sp, #88	; 0x58
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	466a      	mov	r2, sp
 800a8ea:	f000 f863 	bl	800a9b4 <_fstat_r>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	dbed      	blt.n	800a8ce <__swhatbuf_r+0x12>
 800a8f2:	9901      	ldr	r1, [sp, #4]
 800a8f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a8f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a8fc:	4259      	negs	r1, r3
 800a8fe:	4159      	adcs	r1, r3
 800a900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a904:	e7eb      	b.n	800a8de <__swhatbuf_r+0x22>

0800a906 <__smakebuf_r>:
 800a906:	898b      	ldrh	r3, [r1, #12]
 800a908:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a90a:	079d      	lsls	r5, r3, #30
 800a90c:	4606      	mov	r6, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	d507      	bpl.n	800a922 <__smakebuf_r+0x1c>
 800a912:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a916:	6023      	str	r3, [r4, #0]
 800a918:	6123      	str	r3, [r4, #16]
 800a91a:	2301      	movs	r3, #1
 800a91c:	6163      	str	r3, [r4, #20]
 800a91e:	b002      	add	sp, #8
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	466a      	mov	r2, sp
 800a924:	ab01      	add	r3, sp, #4
 800a926:	f7ff ffc9 	bl	800a8bc <__swhatbuf_r>
 800a92a:	9900      	ldr	r1, [sp, #0]
 800a92c:	4605      	mov	r5, r0
 800a92e:	4630      	mov	r0, r6
 800a930:	f7ff f9be 	bl	8009cb0 <_malloc_r>
 800a934:	b948      	cbnz	r0, 800a94a <__smakebuf_r+0x44>
 800a936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93a:	059a      	lsls	r2, r3, #22
 800a93c:	d4ef      	bmi.n	800a91e <__smakebuf_r+0x18>
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	f043 0302 	orr.w	r3, r3, #2
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	e7e3      	b.n	800a912 <__smakebuf_r+0xc>
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	6020      	str	r0, [r4, #0]
 800a94e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a952:	81a3      	strh	r3, [r4, #12]
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	6120      	str	r0, [r4, #16]
 800a958:	6163      	str	r3, [r4, #20]
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	b15b      	cbz	r3, 800a976 <__smakebuf_r+0x70>
 800a95e:	4630      	mov	r0, r6
 800a960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a964:	f000 f838 	bl	800a9d8 <_isatty_r>
 800a968:	b128      	cbz	r0, 800a976 <__smakebuf_r+0x70>
 800a96a:	89a3      	ldrh	r3, [r4, #12]
 800a96c:	f023 0303 	bic.w	r3, r3, #3
 800a970:	f043 0301 	orr.w	r3, r3, #1
 800a974:	81a3      	strh	r3, [r4, #12]
 800a976:	89a3      	ldrh	r3, [r4, #12]
 800a978:	431d      	orrs	r5, r3
 800a97a:	81a5      	strh	r5, [r4, #12]
 800a97c:	e7cf      	b.n	800a91e <__smakebuf_r+0x18>

0800a97e <memmove>:
 800a97e:	4288      	cmp	r0, r1
 800a980:	b510      	push	{r4, lr}
 800a982:	eb01 0402 	add.w	r4, r1, r2
 800a986:	d902      	bls.n	800a98e <memmove+0x10>
 800a988:	4284      	cmp	r4, r0
 800a98a:	4623      	mov	r3, r4
 800a98c:	d807      	bhi.n	800a99e <memmove+0x20>
 800a98e:	1e43      	subs	r3, r0, #1
 800a990:	42a1      	cmp	r1, r4
 800a992:	d008      	beq.n	800a9a6 <memmove+0x28>
 800a994:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a998:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a99c:	e7f8      	b.n	800a990 <memmove+0x12>
 800a99e:	4601      	mov	r1, r0
 800a9a0:	4402      	add	r2, r0
 800a9a2:	428a      	cmp	r2, r1
 800a9a4:	d100      	bne.n	800a9a8 <memmove+0x2a>
 800a9a6:	bd10      	pop	{r4, pc}
 800a9a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9b0:	e7f7      	b.n	800a9a2 <memmove+0x24>
	...

0800a9b4 <_fstat_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4d06      	ldr	r5, [pc, #24]	; (800a9d4 <_fstat_r+0x20>)
 800a9ba:	4604      	mov	r4, r0
 800a9bc:	4608      	mov	r0, r1
 800a9be:	4611      	mov	r1, r2
 800a9c0:	602b      	str	r3, [r5, #0]
 800a9c2:	f7f8 fab6 	bl	8002f32 <_fstat>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	d102      	bne.n	800a9d0 <_fstat_r+0x1c>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	b103      	cbz	r3, 800a9d0 <_fstat_r+0x1c>
 800a9ce:	6023      	str	r3, [r4, #0]
 800a9d0:	bd38      	pop	{r3, r4, r5, pc}
 800a9d2:	bf00      	nop
 800a9d4:	20000830 	.word	0x20000830

0800a9d8 <_isatty_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	2300      	movs	r3, #0
 800a9dc:	4d05      	ldr	r5, [pc, #20]	; (800a9f4 <_isatty_r+0x1c>)
 800a9de:	4604      	mov	r4, r0
 800a9e0:	4608      	mov	r0, r1
 800a9e2:	602b      	str	r3, [r5, #0]
 800a9e4:	f7f8 fab4 	bl	8002f50 <_isatty>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d102      	bne.n	800a9f2 <_isatty_r+0x1a>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	b103      	cbz	r3, 800a9f2 <_isatty_r+0x1a>
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	20000830 	.word	0x20000830

0800a9f8 <_sbrk_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	4d05      	ldr	r5, [pc, #20]	; (800aa14 <_sbrk_r+0x1c>)
 800a9fe:	4604      	mov	r4, r0
 800aa00:	4608      	mov	r0, r1
 800aa02:	602b      	str	r3, [r5, #0]
 800aa04:	f7f8 faba 	bl	8002f7c <_sbrk>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <_sbrk_r+0x1a>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	b103      	cbz	r3, 800aa12 <_sbrk_r+0x1a>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	20000830 	.word	0x20000830

0800aa18 <__assert_func>:
 800aa18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa1a:	4614      	mov	r4, r2
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <__assert_func+0x2c>)
 800aa20:	4605      	mov	r5, r0
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68d8      	ldr	r0, [r3, #12]
 800aa26:	b14c      	cbz	r4, 800aa3c <__assert_func+0x24>
 800aa28:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <__assert_func+0x30>)
 800aa2a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa2e:	9100      	str	r1, [sp, #0]
 800aa30:	462b      	mov	r3, r5
 800aa32:	4906      	ldr	r1, [pc, #24]	; (800aa4c <__assert_func+0x34>)
 800aa34:	f000 f870 	bl	800ab18 <fiprintf>
 800aa38:	f000 f880 	bl	800ab3c <abort>
 800aa3c:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <__assert_func+0x38>)
 800aa3e:	461c      	mov	r4, r3
 800aa40:	e7f3      	b.n	800aa2a <__assert_func+0x12>
 800aa42:	bf00      	nop
 800aa44:	20000064 	.word	0x20000064
 800aa48:	0800b79f 	.word	0x0800b79f
 800aa4c:	0800b7ac 	.word	0x0800b7ac
 800aa50:	0800b7da 	.word	0x0800b7da

0800aa54 <_calloc_r>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	fba1 5402 	umull	r5, r4, r1, r2
 800aa5a:	b934      	cbnz	r4, 800aa6a <_calloc_r+0x16>
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	f7ff f927 	bl	8009cb0 <_malloc_r>
 800aa62:	4606      	mov	r6, r0
 800aa64:	b928      	cbnz	r0, 800aa72 <_calloc_r+0x1e>
 800aa66:	4630      	mov	r0, r6
 800aa68:	bd70      	pop	{r4, r5, r6, pc}
 800aa6a:	220c      	movs	r2, #12
 800aa6c:	2600      	movs	r6, #0
 800aa6e:	6002      	str	r2, [r0, #0]
 800aa70:	e7f9      	b.n	800aa66 <_calloc_r+0x12>
 800aa72:	462a      	mov	r2, r5
 800aa74:	4621      	mov	r1, r4
 800aa76:	f7fe f9a3 	bl	8008dc0 <memset>
 800aa7a:	e7f4      	b.n	800aa66 <_calloc_r+0x12>

0800aa7c <__ascii_mbtowc>:
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	b901      	cbnz	r1, 800aa82 <__ascii_mbtowc+0x6>
 800aa80:	a901      	add	r1, sp, #4
 800aa82:	b142      	cbz	r2, 800aa96 <__ascii_mbtowc+0x1a>
 800aa84:	b14b      	cbz	r3, 800aa9a <__ascii_mbtowc+0x1e>
 800aa86:	7813      	ldrb	r3, [r2, #0]
 800aa88:	600b      	str	r3, [r1, #0]
 800aa8a:	7812      	ldrb	r2, [r2, #0]
 800aa8c:	1e10      	subs	r0, r2, #0
 800aa8e:	bf18      	it	ne
 800aa90:	2001      	movne	r0, #1
 800aa92:	b002      	add	sp, #8
 800aa94:	4770      	bx	lr
 800aa96:	4610      	mov	r0, r2
 800aa98:	e7fb      	b.n	800aa92 <__ascii_mbtowc+0x16>
 800aa9a:	f06f 0001 	mvn.w	r0, #1
 800aa9e:	e7f8      	b.n	800aa92 <__ascii_mbtowc+0x16>

0800aaa0 <_realloc_r>:
 800aaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	4614      	mov	r4, r2
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	b921      	cbnz	r1, 800aab6 <_realloc_r+0x16>
 800aaac:	4611      	mov	r1, r2
 800aaae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	f7ff b8fd 	b.w	8009cb0 <_malloc_r>
 800aab6:	b92a      	cbnz	r2, 800aac4 <_realloc_r+0x24>
 800aab8:	f7ff f88a 	bl	8009bd0 <_free_r>
 800aabc:	4625      	mov	r5, r4
 800aabe:	4628      	mov	r0, r5
 800aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aac4:	f000 f841 	bl	800ab4a <_malloc_usable_size_r>
 800aac8:	4284      	cmp	r4, r0
 800aaca:	4607      	mov	r7, r0
 800aacc:	d802      	bhi.n	800aad4 <_realloc_r+0x34>
 800aace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aad2:	d812      	bhi.n	800aafa <_realloc_r+0x5a>
 800aad4:	4621      	mov	r1, r4
 800aad6:	4640      	mov	r0, r8
 800aad8:	f7ff f8ea 	bl	8009cb0 <_malloc_r>
 800aadc:	4605      	mov	r5, r0
 800aade:	2800      	cmp	r0, #0
 800aae0:	d0ed      	beq.n	800aabe <_realloc_r+0x1e>
 800aae2:	42bc      	cmp	r4, r7
 800aae4:	4622      	mov	r2, r4
 800aae6:	4631      	mov	r1, r6
 800aae8:	bf28      	it	cs
 800aaea:	463a      	movcs	r2, r7
 800aaec:	f7fe f9f4 	bl	8008ed8 <memcpy>
 800aaf0:	4631      	mov	r1, r6
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	f7ff f86c 	bl	8009bd0 <_free_r>
 800aaf8:	e7e1      	b.n	800aabe <_realloc_r+0x1e>
 800aafa:	4635      	mov	r5, r6
 800aafc:	e7df      	b.n	800aabe <_realloc_r+0x1e>

0800aafe <__ascii_wctomb>:
 800aafe:	4603      	mov	r3, r0
 800ab00:	4608      	mov	r0, r1
 800ab02:	b141      	cbz	r1, 800ab16 <__ascii_wctomb+0x18>
 800ab04:	2aff      	cmp	r2, #255	; 0xff
 800ab06:	d904      	bls.n	800ab12 <__ascii_wctomb+0x14>
 800ab08:	228a      	movs	r2, #138	; 0x8a
 800ab0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0e:	601a      	str	r2, [r3, #0]
 800ab10:	4770      	bx	lr
 800ab12:	2001      	movs	r0, #1
 800ab14:	700a      	strb	r2, [r1, #0]
 800ab16:	4770      	bx	lr

0800ab18 <fiprintf>:
 800ab18:	b40e      	push	{r1, r2, r3}
 800ab1a:	b503      	push	{r0, r1, lr}
 800ab1c:	4601      	mov	r1, r0
 800ab1e:	ab03      	add	r3, sp, #12
 800ab20:	4805      	ldr	r0, [pc, #20]	; (800ab38 <fiprintf+0x20>)
 800ab22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab26:	6800      	ldr	r0, [r0, #0]
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	f000 f83d 	bl	800aba8 <_vfiprintf_r>
 800ab2e:	b002      	add	sp, #8
 800ab30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab34:	b003      	add	sp, #12
 800ab36:	4770      	bx	lr
 800ab38:	20000064 	.word	0x20000064

0800ab3c <abort>:
 800ab3c:	2006      	movs	r0, #6
 800ab3e:	b508      	push	{r3, lr}
 800ab40:	f000 f974 	bl	800ae2c <raise>
 800ab44:	2001      	movs	r0, #1
 800ab46:	f7f8 f9a6 	bl	8002e96 <_exit>

0800ab4a <_malloc_usable_size_r>:
 800ab4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab4e:	1f18      	subs	r0, r3, #4
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bfbc      	itt	lt
 800ab54:	580b      	ldrlt	r3, [r1, r0]
 800ab56:	18c0      	addlt	r0, r0, r3
 800ab58:	4770      	bx	lr

0800ab5a <__sfputc_r>:
 800ab5a:	6893      	ldr	r3, [r2, #8]
 800ab5c:	b410      	push	{r4}
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	6093      	str	r3, [r2, #8]
 800ab64:	da07      	bge.n	800ab76 <__sfputc_r+0x1c>
 800ab66:	6994      	ldr	r4, [r2, #24]
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	db01      	blt.n	800ab70 <__sfputc_r+0x16>
 800ab6c:	290a      	cmp	r1, #10
 800ab6e:	d102      	bne.n	800ab76 <__sfputc_r+0x1c>
 800ab70:	bc10      	pop	{r4}
 800ab72:	f7fe b890 	b.w	8008c96 <__swbuf_r>
 800ab76:	6813      	ldr	r3, [r2, #0]
 800ab78:	1c58      	adds	r0, r3, #1
 800ab7a:	6010      	str	r0, [r2, #0]
 800ab7c:	7019      	strb	r1, [r3, #0]
 800ab7e:	4608      	mov	r0, r1
 800ab80:	bc10      	pop	{r4}
 800ab82:	4770      	bx	lr

0800ab84 <__sfputs_r>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	4606      	mov	r6, r0
 800ab88:	460f      	mov	r7, r1
 800ab8a:	4614      	mov	r4, r2
 800ab8c:	18d5      	adds	r5, r2, r3
 800ab8e:	42ac      	cmp	r4, r5
 800ab90:	d101      	bne.n	800ab96 <__sfputs_r+0x12>
 800ab92:	2000      	movs	r0, #0
 800ab94:	e007      	b.n	800aba6 <__sfputs_r+0x22>
 800ab96:	463a      	mov	r2, r7
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9e:	f7ff ffdc 	bl	800ab5a <__sfputc_r>
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	d1f3      	bne.n	800ab8e <__sfputs_r+0xa>
 800aba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aba8 <_vfiprintf_r>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	460d      	mov	r5, r1
 800abae:	4614      	mov	r4, r2
 800abb0:	4698      	mov	r8, r3
 800abb2:	4606      	mov	r6, r0
 800abb4:	b09d      	sub	sp, #116	; 0x74
 800abb6:	b118      	cbz	r0, 800abc0 <_vfiprintf_r+0x18>
 800abb8:	6a03      	ldr	r3, [r0, #32]
 800abba:	b90b      	cbnz	r3, 800abc0 <_vfiprintf_r+0x18>
 800abbc:	f7fd ff62 	bl	8008a84 <__sinit>
 800abc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abc2:	07d9      	lsls	r1, r3, #31
 800abc4:	d405      	bmi.n	800abd2 <_vfiprintf_r+0x2a>
 800abc6:	89ab      	ldrh	r3, [r5, #12]
 800abc8:	059a      	lsls	r2, r3, #22
 800abca:	d402      	bmi.n	800abd2 <_vfiprintf_r+0x2a>
 800abcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abce:	f7fe f973 	bl	8008eb8 <__retarget_lock_acquire_recursive>
 800abd2:	89ab      	ldrh	r3, [r5, #12]
 800abd4:	071b      	lsls	r3, r3, #28
 800abd6:	d501      	bpl.n	800abdc <_vfiprintf_r+0x34>
 800abd8:	692b      	ldr	r3, [r5, #16]
 800abda:	b99b      	cbnz	r3, 800ac04 <_vfiprintf_r+0x5c>
 800abdc:	4629      	mov	r1, r5
 800abde:	4630      	mov	r0, r6
 800abe0:	f7fe f896 	bl	8008d10 <__swsetup_r>
 800abe4:	b170      	cbz	r0, 800ac04 <_vfiprintf_r+0x5c>
 800abe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abe8:	07dc      	lsls	r4, r3, #31
 800abea:	d504      	bpl.n	800abf6 <_vfiprintf_r+0x4e>
 800abec:	f04f 30ff 	mov.w	r0, #4294967295
 800abf0:	b01d      	add	sp, #116	; 0x74
 800abf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf6:	89ab      	ldrh	r3, [r5, #12]
 800abf8:	0598      	lsls	r0, r3, #22
 800abfa:	d4f7      	bmi.n	800abec <_vfiprintf_r+0x44>
 800abfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abfe:	f7fe f95c 	bl	8008eba <__retarget_lock_release_recursive>
 800ac02:	e7f3      	b.n	800abec <_vfiprintf_r+0x44>
 800ac04:	2300      	movs	r3, #0
 800ac06:	9309      	str	r3, [sp, #36]	; 0x24
 800ac08:	2320      	movs	r3, #32
 800ac0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac0e:	2330      	movs	r3, #48	; 0x30
 800ac10:	f04f 0901 	mov.w	r9, #1
 800ac14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac18:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800adc8 <_vfiprintf_r+0x220>
 800ac1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac20:	4623      	mov	r3, r4
 800ac22:	469a      	mov	sl, r3
 800ac24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac28:	b10a      	cbz	r2, 800ac2e <_vfiprintf_r+0x86>
 800ac2a:	2a25      	cmp	r2, #37	; 0x25
 800ac2c:	d1f9      	bne.n	800ac22 <_vfiprintf_r+0x7a>
 800ac2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac32:	d00b      	beq.n	800ac4c <_vfiprintf_r+0xa4>
 800ac34:	465b      	mov	r3, fp
 800ac36:	4622      	mov	r2, r4
 800ac38:	4629      	mov	r1, r5
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	f7ff ffa2 	bl	800ab84 <__sfputs_r>
 800ac40:	3001      	adds	r0, #1
 800ac42:	f000 80a9 	beq.w	800ad98 <_vfiprintf_r+0x1f0>
 800ac46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac48:	445a      	add	r2, fp
 800ac4a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	f000 80a1 	beq.w	800ad98 <_vfiprintf_r+0x1f0>
 800ac56:	2300      	movs	r3, #0
 800ac58:	f04f 32ff 	mov.w	r2, #4294967295
 800ac5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac60:	f10a 0a01 	add.w	sl, sl, #1
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	9307      	str	r3, [sp, #28]
 800ac68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac6c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac6e:	4654      	mov	r4, sl
 800ac70:	2205      	movs	r2, #5
 800ac72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac76:	4854      	ldr	r0, [pc, #336]	; (800adc8 <_vfiprintf_r+0x220>)
 800ac78:	f7fe f920 	bl	8008ebc <memchr>
 800ac7c:	9a04      	ldr	r2, [sp, #16]
 800ac7e:	b9d8      	cbnz	r0, 800acb8 <_vfiprintf_r+0x110>
 800ac80:	06d1      	lsls	r1, r2, #27
 800ac82:	bf44      	itt	mi
 800ac84:	2320      	movmi	r3, #32
 800ac86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac8a:	0713      	lsls	r3, r2, #28
 800ac8c:	bf44      	itt	mi
 800ac8e:	232b      	movmi	r3, #43	; 0x2b
 800ac90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac94:	f89a 3000 	ldrb.w	r3, [sl]
 800ac98:	2b2a      	cmp	r3, #42	; 0x2a
 800ac9a:	d015      	beq.n	800acc8 <_vfiprintf_r+0x120>
 800ac9c:	4654      	mov	r4, sl
 800ac9e:	2000      	movs	r0, #0
 800aca0:	f04f 0c0a 	mov.w	ip, #10
 800aca4:	9a07      	ldr	r2, [sp, #28]
 800aca6:	4621      	mov	r1, r4
 800aca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acac:	3b30      	subs	r3, #48	; 0x30
 800acae:	2b09      	cmp	r3, #9
 800acb0:	d94d      	bls.n	800ad4e <_vfiprintf_r+0x1a6>
 800acb2:	b1b0      	cbz	r0, 800ace2 <_vfiprintf_r+0x13a>
 800acb4:	9207      	str	r2, [sp, #28]
 800acb6:	e014      	b.n	800ace2 <_vfiprintf_r+0x13a>
 800acb8:	eba0 0308 	sub.w	r3, r0, r8
 800acbc:	fa09 f303 	lsl.w	r3, r9, r3
 800acc0:	4313      	orrs	r3, r2
 800acc2:	46a2      	mov	sl, r4
 800acc4:	9304      	str	r3, [sp, #16]
 800acc6:	e7d2      	b.n	800ac6e <_vfiprintf_r+0xc6>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	1d19      	adds	r1, r3, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	9103      	str	r1, [sp, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	bfbb      	ittet	lt
 800acd4:	425b      	neglt	r3, r3
 800acd6:	f042 0202 	orrlt.w	r2, r2, #2
 800acda:	9307      	strge	r3, [sp, #28]
 800acdc:	9307      	strlt	r3, [sp, #28]
 800acde:	bfb8      	it	lt
 800ace0:	9204      	strlt	r2, [sp, #16]
 800ace2:	7823      	ldrb	r3, [r4, #0]
 800ace4:	2b2e      	cmp	r3, #46	; 0x2e
 800ace6:	d10c      	bne.n	800ad02 <_vfiprintf_r+0x15a>
 800ace8:	7863      	ldrb	r3, [r4, #1]
 800acea:	2b2a      	cmp	r3, #42	; 0x2a
 800acec:	d134      	bne.n	800ad58 <_vfiprintf_r+0x1b0>
 800acee:	9b03      	ldr	r3, [sp, #12]
 800acf0:	3402      	adds	r4, #2
 800acf2:	1d1a      	adds	r2, r3, #4
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	9203      	str	r2, [sp, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bfb8      	it	lt
 800acfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800adcc <_vfiprintf_r+0x224>
 800ad06:	2203      	movs	r2, #3
 800ad08:	4650      	mov	r0, sl
 800ad0a:	7821      	ldrb	r1, [r4, #0]
 800ad0c:	f7fe f8d6 	bl	8008ebc <memchr>
 800ad10:	b138      	cbz	r0, 800ad22 <_vfiprintf_r+0x17a>
 800ad12:	2240      	movs	r2, #64	; 0x40
 800ad14:	9b04      	ldr	r3, [sp, #16]
 800ad16:	eba0 000a 	sub.w	r0, r0, sl
 800ad1a:	4082      	lsls	r2, r0
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	3401      	adds	r4, #1
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad26:	2206      	movs	r2, #6
 800ad28:	4829      	ldr	r0, [pc, #164]	; (800add0 <_vfiprintf_r+0x228>)
 800ad2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad2e:	f7fe f8c5 	bl	8008ebc <memchr>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d03f      	beq.n	800adb6 <_vfiprintf_r+0x20e>
 800ad36:	4b27      	ldr	r3, [pc, #156]	; (800add4 <_vfiprintf_r+0x22c>)
 800ad38:	bb1b      	cbnz	r3, 800ad82 <_vfiprintf_r+0x1da>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	3307      	adds	r3, #7
 800ad3e:	f023 0307 	bic.w	r3, r3, #7
 800ad42:	3308      	adds	r3, #8
 800ad44:	9303      	str	r3, [sp, #12]
 800ad46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad48:	443b      	add	r3, r7
 800ad4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad4c:	e768      	b.n	800ac20 <_vfiprintf_r+0x78>
 800ad4e:	460c      	mov	r4, r1
 800ad50:	2001      	movs	r0, #1
 800ad52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad56:	e7a6      	b.n	800aca6 <_vfiprintf_r+0xfe>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f04f 0c0a 	mov.w	ip, #10
 800ad5e:	4619      	mov	r1, r3
 800ad60:	3401      	adds	r4, #1
 800ad62:	9305      	str	r3, [sp, #20]
 800ad64:	4620      	mov	r0, r4
 800ad66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad6a:	3a30      	subs	r2, #48	; 0x30
 800ad6c:	2a09      	cmp	r2, #9
 800ad6e:	d903      	bls.n	800ad78 <_vfiprintf_r+0x1d0>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d0c6      	beq.n	800ad02 <_vfiprintf_r+0x15a>
 800ad74:	9105      	str	r1, [sp, #20]
 800ad76:	e7c4      	b.n	800ad02 <_vfiprintf_r+0x15a>
 800ad78:	4604      	mov	r4, r0
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad80:	e7f0      	b.n	800ad64 <_vfiprintf_r+0x1bc>
 800ad82:	ab03      	add	r3, sp, #12
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	462a      	mov	r2, r5
 800ad88:	4630      	mov	r0, r6
 800ad8a:	4b13      	ldr	r3, [pc, #76]	; (800add8 <_vfiprintf_r+0x230>)
 800ad8c:	a904      	add	r1, sp, #16
 800ad8e:	f7fd fa3d 	bl	800820c <_printf_float>
 800ad92:	4607      	mov	r7, r0
 800ad94:	1c78      	adds	r0, r7, #1
 800ad96:	d1d6      	bne.n	800ad46 <_vfiprintf_r+0x19e>
 800ad98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad9a:	07d9      	lsls	r1, r3, #31
 800ad9c:	d405      	bmi.n	800adaa <_vfiprintf_r+0x202>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	059a      	lsls	r2, r3, #22
 800ada2:	d402      	bmi.n	800adaa <_vfiprintf_r+0x202>
 800ada4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ada6:	f7fe f888 	bl	8008eba <__retarget_lock_release_recursive>
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	065b      	lsls	r3, r3, #25
 800adae:	f53f af1d 	bmi.w	800abec <_vfiprintf_r+0x44>
 800adb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adb4:	e71c      	b.n	800abf0 <_vfiprintf_r+0x48>
 800adb6:	ab03      	add	r3, sp, #12
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	462a      	mov	r2, r5
 800adbc:	4630      	mov	r0, r6
 800adbe:	4b06      	ldr	r3, [pc, #24]	; (800add8 <_vfiprintf_r+0x230>)
 800adc0:	a904      	add	r1, sp, #16
 800adc2:	f7fd fcc3 	bl	800874c <_printf_i>
 800adc6:	e7e4      	b.n	800ad92 <_vfiprintf_r+0x1ea>
 800adc8:	0800b784 	.word	0x0800b784
 800adcc:	0800b78a 	.word	0x0800b78a
 800add0:	0800b78e 	.word	0x0800b78e
 800add4:	0800820d 	.word	0x0800820d
 800add8:	0800ab85 	.word	0x0800ab85

0800addc <_raise_r>:
 800addc:	291f      	cmp	r1, #31
 800adde:	b538      	push	{r3, r4, r5, lr}
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	d904      	bls.n	800adf0 <_raise_r+0x14>
 800ade6:	2316      	movs	r3, #22
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	f04f 30ff 	mov.w	r0, #4294967295
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800adf2:	b112      	cbz	r2, 800adfa <_raise_r+0x1e>
 800adf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adf8:	b94b      	cbnz	r3, 800ae0e <_raise_r+0x32>
 800adfa:	4620      	mov	r0, r4
 800adfc:	f000 f830 	bl	800ae60 <_getpid_r>
 800ae00:	462a      	mov	r2, r5
 800ae02:	4601      	mov	r1, r0
 800ae04:	4620      	mov	r0, r4
 800ae06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae0a:	f000 b817 	b.w	800ae3c <_kill_r>
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d00a      	beq.n	800ae28 <_raise_r+0x4c>
 800ae12:	1c59      	adds	r1, r3, #1
 800ae14:	d103      	bne.n	800ae1e <_raise_r+0x42>
 800ae16:	2316      	movs	r3, #22
 800ae18:	6003      	str	r3, [r0, #0]
 800ae1a:	2001      	movs	r0, #1
 800ae1c:	e7e7      	b.n	800adee <_raise_r+0x12>
 800ae1e:	2400      	movs	r4, #0
 800ae20:	4628      	mov	r0, r5
 800ae22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae26:	4798      	blx	r3
 800ae28:	2000      	movs	r0, #0
 800ae2a:	e7e0      	b.n	800adee <_raise_r+0x12>

0800ae2c <raise>:
 800ae2c:	4b02      	ldr	r3, [pc, #8]	; (800ae38 <raise+0xc>)
 800ae2e:	4601      	mov	r1, r0
 800ae30:	6818      	ldr	r0, [r3, #0]
 800ae32:	f7ff bfd3 	b.w	800addc <_raise_r>
 800ae36:	bf00      	nop
 800ae38:	20000064 	.word	0x20000064

0800ae3c <_kill_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	2300      	movs	r3, #0
 800ae40:	4d06      	ldr	r5, [pc, #24]	; (800ae5c <_kill_r+0x20>)
 800ae42:	4604      	mov	r4, r0
 800ae44:	4608      	mov	r0, r1
 800ae46:	4611      	mov	r1, r2
 800ae48:	602b      	str	r3, [r5, #0]
 800ae4a:	f7f8 f814 	bl	8002e76 <_kill>
 800ae4e:	1c43      	adds	r3, r0, #1
 800ae50:	d102      	bne.n	800ae58 <_kill_r+0x1c>
 800ae52:	682b      	ldr	r3, [r5, #0]
 800ae54:	b103      	cbz	r3, 800ae58 <_kill_r+0x1c>
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	bd38      	pop	{r3, r4, r5, pc}
 800ae5a:	bf00      	nop
 800ae5c:	20000830 	.word	0x20000830

0800ae60 <_getpid_r>:
 800ae60:	f7f8 b802 	b.w	8002e68 <_getpid>

0800ae64 <atan2>:
 800ae64:	f000 b800 	b.w	800ae68 <__ieee754_atan2>

0800ae68 <__ieee754_atan2>:
 800ae68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	4617      	mov	r7, r2
 800ae6e:	4692      	mov	sl, r2
 800ae70:	4699      	mov	r9, r3
 800ae72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ae76:	427b      	negs	r3, r7
 800ae78:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800aff8 <__ieee754_atan2+0x190>
 800ae7c:	433b      	orrs	r3, r7
 800ae7e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ae82:	4543      	cmp	r3, r8
 800ae84:	4604      	mov	r4, r0
 800ae86:	460d      	mov	r5, r1
 800ae88:	d809      	bhi.n	800ae9e <__ieee754_atan2+0x36>
 800ae8a:	4246      	negs	r6, r0
 800ae8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae90:	4306      	orrs	r6, r0
 800ae92:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ae96:	4546      	cmp	r6, r8
 800ae98:	468e      	mov	lr, r1
 800ae9a:	4683      	mov	fp, r0
 800ae9c:	d908      	bls.n	800aeb0 <__ieee754_atan2+0x48>
 800ae9e:	4652      	mov	r2, sl
 800aea0:	464b      	mov	r3, r9
 800aea2:	4620      	mov	r0, r4
 800aea4:	4629      	mov	r1, r5
 800aea6:	f7f5 f96b 	bl	8000180 <__adddf3>
 800aeaa:	4604      	mov	r4, r0
 800aeac:	460d      	mov	r5, r1
 800aeae:	e019      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800aeb0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800aeb4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800aeb8:	433e      	orrs	r6, r7
 800aeba:	d103      	bne.n	800aec4 <__ieee754_atan2+0x5c>
 800aebc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	f000 b8a2 	b.w	800b008 <atan>
 800aec4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800aec8:	f006 0602 	and.w	r6, r6, #2
 800aecc:	ea53 0b0b 	orrs.w	fp, r3, fp
 800aed0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800aed4:	d10a      	bne.n	800aeec <__ieee754_atan2+0x84>
 800aed6:	2e02      	cmp	r6, #2
 800aed8:	d067      	beq.n	800afaa <__ieee754_atan2+0x142>
 800aeda:	2e03      	cmp	r6, #3
 800aedc:	d102      	bne.n	800aee4 <__ieee754_atan2+0x7c>
 800aede:	a53a      	add	r5, pc, #232	; (adr r5, 800afc8 <__ieee754_atan2+0x160>)
 800aee0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aee4:	4620      	mov	r0, r4
 800aee6:	4629      	mov	r1, r5
 800aee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeec:	4317      	orrs	r7, r2
 800aeee:	d106      	bne.n	800aefe <__ieee754_atan2+0x96>
 800aef0:	f1be 0f00 	cmp.w	lr, #0
 800aef4:	da64      	bge.n	800afc0 <__ieee754_atan2+0x158>
 800aef6:	a536      	add	r5, pc, #216	; (adr r5, 800afd0 <__ieee754_atan2+0x168>)
 800aef8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aefc:	e7f2      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800aefe:	4542      	cmp	r2, r8
 800af00:	d10f      	bne.n	800af22 <__ieee754_atan2+0xba>
 800af02:	4293      	cmp	r3, r2
 800af04:	f106 36ff 	add.w	r6, r6, #4294967295
 800af08:	d107      	bne.n	800af1a <__ieee754_atan2+0xb2>
 800af0a:	2e02      	cmp	r6, #2
 800af0c:	d851      	bhi.n	800afb2 <__ieee754_atan2+0x14a>
 800af0e:	4b3b      	ldr	r3, [pc, #236]	; (800affc <__ieee754_atan2+0x194>)
 800af10:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800af14:	e9d3 4500 	ldrd	r4, r5, [r3]
 800af18:	e7e4      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800af1a:	2e02      	cmp	r6, #2
 800af1c:	d84d      	bhi.n	800afba <__ieee754_atan2+0x152>
 800af1e:	4b38      	ldr	r3, [pc, #224]	; (800b000 <__ieee754_atan2+0x198>)
 800af20:	e7f6      	b.n	800af10 <__ieee754_atan2+0xa8>
 800af22:	4543      	cmp	r3, r8
 800af24:	d0e4      	beq.n	800aef0 <__ieee754_atan2+0x88>
 800af26:	1a9b      	subs	r3, r3, r2
 800af28:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800af2c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af30:	da21      	bge.n	800af76 <__ieee754_atan2+0x10e>
 800af32:	f1b9 0f00 	cmp.w	r9, #0
 800af36:	da01      	bge.n	800af3c <__ieee754_atan2+0xd4>
 800af38:	323c      	adds	r2, #60	; 0x3c
 800af3a:	db20      	blt.n	800af7e <__ieee754_atan2+0x116>
 800af3c:	4652      	mov	r2, sl
 800af3e:	464b      	mov	r3, r9
 800af40:	4620      	mov	r0, r4
 800af42:	4629      	mov	r1, r5
 800af44:	f7f5 fbfc 	bl	8000740 <__aeabi_ddiv>
 800af48:	f000 f9e8 	bl	800b31c <fabs>
 800af4c:	f000 f85c 	bl	800b008 <atan>
 800af50:	4604      	mov	r4, r0
 800af52:	460d      	mov	r5, r1
 800af54:	2e01      	cmp	r6, #1
 800af56:	d015      	beq.n	800af84 <__ieee754_atan2+0x11c>
 800af58:	2e02      	cmp	r6, #2
 800af5a:	d017      	beq.n	800af8c <__ieee754_atan2+0x124>
 800af5c:	2e00      	cmp	r6, #0
 800af5e:	d0c1      	beq.n	800aee4 <__ieee754_atan2+0x7c>
 800af60:	a31d      	add	r3, pc, #116	; (adr r3, 800afd8 <__ieee754_atan2+0x170>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	4620      	mov	r0, r4
 800af68:	4629      	mov	r1, r5
 800af6a:	f7f5 f907 	bl	800017c <__aeabi_dsub>
 800af6e:	a31c      	add	r3, pc, #112	; (adr r3, 800afe0 <__ieee754_atan2+0x178>)
 800af70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af74:	e016      	b.n	800afa4 <__ieee754_atan2+0x13c>
 800af76:	a51c      	add	r5, pc, #112	; (adr r5, 800afe8 <__ieee754_atan2+0x180>)
 800af78:	e9d5 4500 	ldrd	r4, r5, [r5]
 800af7c:	e7ea      	b.n	800af54 <__ieee754_atan2+0xec>
 800af7e:	2400      	movs	r4, #0
 800af80:	2500      	movs	r5, #0
 800af82:	e7e7      	b.n	800af54 <__ieee754_atan2+0xec>
 800af84:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800af88:	461d      	mov	r5, r3
 800af8a:	e7ab      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800af8c:	a312      	add	r3, pc, #72	; (adr r3, 800afd8 <__ieee754_atan2+0x170>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	4620      	mov	r0, r4
 800af94:	4629      	mov	r1, r5
 800af96:	f7f5 f8f1 	bl	800017c <__aeabi_dsub>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	a110      	add	r1, pc, #64	; (adr r1, 800afe0 <__ieee754_atan2+0x178>)
 800afa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa4:	f7f5 f8ea 	bl	800017c <__aeabi_dsub>
 800afa8:	e77f      	b.n	800aeaa <__ieee754_atan2+0x42>
 800afaa:	a50d      	add	r5, pc, #52	; (adr r5, 800afe0 <__ieee754_atan2+0x178>)
 800afac:	e9d5 4500 	ldrd	r4, r5, [r5]
 800afb0:	e798      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800afb2:	a50f      	add	r5, pc, #60	; (adr r5, 800aff0 <__ieee754_atan2+0x188>)
 800afb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800afb8:	e794      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800afba:	2400      	movs	r4, #0
 800afbc:	2500      	movs	r5, #0
 800afbe:	e791      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800afc0:	a509      	add	r5, pc, #36	; (adr r5, 800afe8 <__ieee754_atan2+0x180>)
 800afc2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800afc6:	e78d      	b.n	800aee4 <__ieee754_atan2+0x7c>
 800afc8:	54442d18 	.word	0x54442d18
 800afcc:	c00921fb 	.word	0xc00921fb
 800afd0:	54442d18 	.word	0x54442d18
 800afd4:	bff921fb 	.word	0xbff921fb
 800afd8:	33145c07 	.word	0x33145c07
 800afdc:	3ca1a626 	.word	0x3ca1a626
 800afe0:	54442d18 	.word	0x54442d18
 800afe4:	400921fb 	.word	0x400921fb
 800afe8:	54442d18 	.word	0x54442d18
 800afec:	3ff921fb 	.word	0x3ff921fb
 800aff0:	54442d18 	.word	0x54442d18
 800aff4:	3fe921fb 	.word	0x3fe921fb
 800aff8:	7ff00000 	.word	0x7ff00000
 800affc:	0800b7e0 	.word	0x0800b7e0
 800b000:	0800b7f8 	.word	0x0800b7f8
 800b004:	00000000 	.word	0x00000000

0800b008 <atan>:
 800b008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	4bb6      	ldr	r3, [pc, #728]	; (800b2e8 <atan+0x2e0>)
 800b00e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b012:	429e      	cmp	r6, r3
 800b014:	4604      	mov	r4, r0
 800b016:	460d      	mov	r5, r1
 800b018:	468b      	mov	fp, r1
 800b01a:	dd17      	ble.n	800b04c <atan+0x44>
 800b01c:	4bb3      	ldr	r3, [pc, #716]	; (800b2ec <atan+0x2e4>)
 800b01e:	429e      	cmp	r6, r3
 800b020:	dc01      	bgt.n	800b026 <atan+0x1e>
 800b022:	d109      	bne.n	800b038 <atan+0x30>
 800b024:	b140      	cbz	r0, 800b038 <atan+0x30>
 800b026:	4622      	mov	r2, r4
 800b028:	462b      	mov	r3, r5
 800b02a:	4620      	mov	r0, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 f8a7 	bl	8000180 <__adddf3>
 800b032:	4604      	mov	r4, r0
 800b034:	460d      	mov	r5, r1
 800b036:	e005      	b.n	800b044 <atan+0x3c>
 800b038:	f1bb 0f00 	cmp.w	fp, #0
 800b03c:	4cac      	ldr	r4, [pc, #688]	; (800b2f0 <atan+0x2e8>)
 800b03e:	f300 8121 	bgt.w	800b284 <atan+0x27c>
 800b042:	4dac      	ldr	r5, [pc, #688]	; (800b2f4 <atan+0x2ec>)
 800b044:	4620      	mov	r0, r4
 800b046:	4629      	mov	r1, r5
 800b048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	4baa      	ldr	r3, [pc, #680]	; (800b2f8 <atan+0x2f0>)
 800b04e:	429e      	cmp	r6, r3
 800b050:	dc11      	bgt.n	800b076 <atan+0x6e>
 800b052:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b056:	429e      	cmp	r6, r3
 800b058:	dc0a      	bgt.n	800b070 <atan+0x68>
 800b05a:	a38b      	add	r3, pc, #556	; (adr r3, 800b288 <atan+0x280>)
 800b05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b060:	f7f5 f88e 	bl	8000180 <__adddf3>
 800b064:	2200      	movs	r2, #0
 800b066:	4ba5      	ldr	r3, [pc, #660]	; (800b2fc <atan+0x2f4>)
 800b068:	f7f5 fcd0 	bl	8000a0c <__aeabi_dcmpgt>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d1e9      	bne.n	800b044 <atan+0x3c>
 800b070:	f04f 3aff 	mov.w	sl, #4294967295
 800b074:	e027      	b.n	800b0c6 <atan+0xbe>
 800b076:	f000 f951 	bl	800b31c <fabs>
 800b07a:	4ba1      	ldr	r3, [pc, #644]	; (800b300 <atan+0x2f8>)
 800b07c:	4604      	mov	r4, r0
 800b07e:	429e      	cmp	r6, r3
 800b080:	460d      	mov	r5, r1
 800b082:	f300 80b8 	bgt.w	800b1f6 <atan+0x1ee>
 800b086:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b08a:	429e      	cmp	r6, r3
 800b08c:	f300 809c 	bgt.w	800b1c8 <atan+0x1c0>
 800b090:	4602      	mov	r2, r0
 800b092:	460b      	mov	r3, r1
 800b094:	f7f5 f874 	bl	8000180 <__adddf3>
 800b098:	2200      	movs	r2, #0
 800b09a:	4b98      	ldr	r3, [pc, #608]	; (800b2fc <atan+0x2f4>)
 800b09c:	f7f5 f86e 	bl	800017c <__aeabi_dsub>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	460f      	mov	r7, r1
 800b0a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	4629      	mov	r1, r5
 800b0ae:	f7f5 f867 	bl	8000180 <__adddf3>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4630      	mov	r0, r6
 800b0b8:	4639      	mov	r1, r7
 800b0ba:	f7f5 fb41 	bl	8000740 <__aeabi_ddiv>
 800b0be:	f04f 0a00 	mov.w	sl, #0
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	462b      	mov	r3, r5
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 fa0d 	bl	80004ec <__aeabi_dmul>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4680      	mov	r8, r0
 800b0d8:	4689      	mov	r9, r1
 800b0da:	f7f5 fa07 	bl	80004ec <__aeabi_dmul>
 800b0de:	a36c      	add	r3, pc, #432	; (adr r3, 800b290 <atan+0x288>)
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	460f      	mov	r7, r1
 800b0e8:	f7f5 fa00 	bl	80004ec <__aeabi_dmul>
 800b0ec:	a36a      	add	r3, pc, #424	; (adr r3, 800b298 <atan+0x290>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 f845 	bl	8000180 <__adddf3>
 800b0f6:	4632      	mov	r2, r6
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	f7f5 f9f7 	bl	80004ec <__aeabi_dmul>
 800b0fe:	a368      	add	r3, pc, #416	; (adr r3, 800b2a0 <atan+0x298>)
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	f7f5 f83c 	bl	8000180 <__adddf3>
 800b108:	4632      	mov	r2, r6
 800b10a:	463b      	mov	r3, r7
 800b10c:	f7f5 f9ee 	bl	80004ec <__aeabi_dmul>
 800b110:	a365      	add	r3, pc, #404	; (adr r3, 800b2a8 <atan+0x2a0>)
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f7f5 f833 	bl	8000180 <__adddf3>
 800b11a:	4632      	mov	r2, r6
 800b11c:	463b      	mov	r3, r7
 800b11e:	f7f5 f9e5 	bl	80004ec <__aeabi_dmul>
 800b122:	a363      	add	r3, pc, #396	; (adr r3, 800b2b0 <atan+0x2a8>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	f7f5 f82a 	bl	8000180 <__adddf3>
 800b12c:	4632      	mov	r2, r6
 800b12e:	463b      	mov	r3, r7
 800b130:	f7f5 f9dc 	bl	80004ec <__aeabi_dmul>
 800b134:	a360      	add	r3, pc, #384	; (adr r3, 800b2b8 <atan+0x2b0>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	f7f5 f821 	bl	8000180 <__adddf3>
 800b13e:	4642      	mov	r2, r8
 800b140:	464b      	mov	r3, r9
 800b142:	f7f5 f9d3 	bl	80004ec <__aeabi_dmul>
 800b146:	a35e      	add	r3, pc, #376	; (adr r3, 800b2c0 <atan+0x2b8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	4680      	mov	r8, r0
 800b14e:	4689      	mov	r9, r1
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 f9ca 	bl	80004ec <__aeabi_dmul>
 800b158:	a35b      	add	r3, pc, #364	; (adr r3, 800b2c8 <atan+0x2c0>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 f80d 	bl	800017c <__aeabi_dsub>
 800b162:	4632      	mov	r2, r6
 800b164:	463b      	mov	r3, r7
 800b166:	f7f5 f9c1 	bl	80004ec <__aeabi_dmul>
 800b16a:	a359      	add	r3, pc, #356	; (adr r3, 800b2d0 <atan+0x2c8>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 f804 	bl	800017c <__aeabi_dsub>
 800b174:	4632      	mov	r2, r6
 800b176:	463b      	mov	r3, r7
 800b178:	f7f5 f9b8 	bl	80004ec <__aeabi_dmul>
 800b17c:	a356      	add	r3, pc, #344	; (adr r3, 800b2d8 <atan+0x2d0>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f4 fffb 	bl	800017c <__aeabi_dsub>
 800b186:	4632      	mov	r2, r6
 800b188:	463b      	mov	r3, r7
 800b18a:	f7f5 f9af 	bl	80004ec <__aeabi_dmul>
 800b18e:	a354      	add	r3, pc, #336	; (adr r3, 800b2e0 <atan+0x2d8>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f7f4 fff2 	bl	800017c <__aeabi_dsub>
 800b198:	4632      	mov	r2, r6
 800b19a:	463b      	mov	r3, r7
 800b19c:	f7f5 f9a6 	bl	80004ec <__aeabi_dmul>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4640      	mov	r0, r8
 800b1a6:	4649      	mov	r1, r9
 800b1a8:	f7f4 ffea 	bl	8000180 <__adddf3>
 800b1ac:	4622      	mov	r2, r4
 800b1ae:	462b      	mov	r3, r5
 800b1b0:	f7f5 f99c 	bl	80004ec <__aeabi_dmul>
 800b1b4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	d144      	bne.n	800b248 <atan+0x240>
 800b1be:	4620      	mov	r0, r4
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	f7f4 ffdb 	bl	800017c <__aeabi_dsub>
 800b1c6:	e734      	b.n	800b032 <atan+0x2a>
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	4b4c      	ldr	r3, [pc, #304]	; (800b2fc <atan+0x2f4>)
 800b1cc:	f7f4 ffd6 	bl	800017c <__aeabi_dsub>
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	460f      	mov	r7, r1
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	4629      	mov	r1, r5
 800b1da:	4b48      	ldr	r3, [pc, #288]	; (800b2fc <atan+0x2f4>)
 800b1dc:	f7f4 ffd0 	bl	8000180 <__adddf3>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	4639      	mov	r1, r7
 800b1e8:	f7f5 faaa 	bl	8000740 <__aeabi_ddiv>
 800b1ec:	f04f 0a01 	mov.w	sl, #1
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	460d      	mov	r5, r1
 800b1f4:	e767      	b.n	800b0c6 <atan+0xbe>
 800b1f6:	4b43      	ldr	r3, [pc, #268]	; (800b304 <atan+0x2fc>)
 800b1f8:	429e      	cmp	r6, r3
 800b1fa:	da1a      	bge.n	800b232 <atan+0x22a>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4b42      	ldr	r3, [pc, #264]	; (800b308 <atan+0x300>)
 800b200:	f7f4 ffbc 	bl	800017c <__aeabi_dsub>
 800b204:	2200      	movs	r2, #0
 800b206:	4606      	mov	r6, r0
 800b208:	460f      	mov	r7, r1
 800b20a:	4620      	mov	r0, r4
 800b20c:	4629      	mov	r1, r5
 800b20e:	4b3e      	ldr	r3, [pc, #248]	; (800b308 <atan+0x300>)
 800b210:	f7f5 f96c 	bl	80004ec <__aeabi_dmul>
 800b214:	2200      	movs	r2, #0
 800b216:	4b39      	ldr	r3, [pc, #228]	; (800b2fc <atan+0x2f4>)
 800b218:	f7f4 ffb2 	bl	8000180 <__adddf3>
 800b21c:	4602      	mov	r2, r0
 800b21e:	460b      	mov	r3, r1
 800b220:	4630      	mov	r0, r6
 800b222:	4639      	mov	r1, r7
 800b224:	f7f5 fa8c 	bl	8000740 <__aeabi_ddiv>
 800b228:	f04f 0a02 	mov.w	sl, #2
 800b22c:	4604      	mov	r4, r0
 800b22e:	460d      	mov	r5, r1
 800b230:	e749      	b.n	800b0c6 <atan+0xbe>
 800b232:	4602      	mov	r2, r0
 800b234:	460b      	mov	r3, r1
 800b236:	2000      	movs	r0, #0
 800b238:	4934      	ldr	r1, [pc, #208]	; (800b30c <atan+0x304>)
 800b23a:	f7f5 fa81 	bl	8000740 <__aeabi_ddiv>
 800b23e:	f04f 0a03 	mov.w	sl, #3
 800b242:	4604      	mov	r4, r0
 800b244:	460d      	mov	r5, r1
 800b246:	e73e      	b.n	800b0c6 <atan+0xbe>
 800b248:	4b31      	ldr	r3, [pc, #196]	; (800b310 <atan+0x308>)
 800b24a:	4e32      	ldr	r6, [pc, #200]	; (800b314 <atan+0x30c>)
 800b24c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f7f4 ff92 	bl	800017c <__aeabi_dsub>
 800b258:	4622      	mov	r2, r4
 800b25a:	462b      	mov	r3, r5
 800b25c:	f7f4 ff8e 	bl	800017c <__aeabi_dsub>
 800b260:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b26c:	f7f4 ff86 	bl	800017c <__aeabi_dsub>
 800b270:	f1bb 0f00 	cmp.w	fp, #0
 800b274:	4604      	mov	r4, r0
 800b276:	460d      	mov	r5, r1
 800b278:	f6bf aee4 	bge.w	800b044 <atan+0x3c>
 800b27c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b280:	461d      	mov	r5, r3
 800b282:	e6df      	b.n	800b044 <atan+0x3c>
 800b284:	4d24      	ldr	r5, [pc, #144]	; (800b318 <atan+0x310>)
 800b286:	e6dd      	b.n	800b044 <atan+0x3c>
 800b288:	8800759c 	.word	0x8800759c
 800b28c:	7e37e43c 	.word	0x7e37e43c
 800b290:	e322da11 	.word	0xe322da11
 800b294:	3f90ad3a 	.word	0x3f90ad3a
 800b298:	24760deb 	.word	0x24760deb
 800b29c:	3fa97b4b 	.word	0x3fa97b4b
 800b2a0:	a0d03d51 	.word	0xa0d03d51
 800b2a4:	3fb10d66 	.word	0x3fb10d66
 800b2a8:	c54c206e 	.word	0xc54c206e
 800b2ac:	3fb745cd 	.word	0x3fb745cd
 800b2b0:	920083ff 	.word	0x920083ff
 800b2b4:	3fc24924 	.word	0x3fc24924
 800b2b8:	5555550d 	.word	0x5555550d
 800b2bc:	3fd55555 	.word	0x3fd55555
 800b2c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b2c4:	bfa2b444 	.word	0xbfa2b444
 800b2c8:	52defd9a 	.word	0x52defd9a
 800b2cc:	3fadde2d 	.word	0x3fadde2d
 800b2d0:	af749a6d 	.word	0xaf749a6d
 800b2d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b2d8:	fe231671 	.word	0xfe231671
 800b2dc:	3fbc71c6 	.word	0x3fbc71c6
 800b2e0:	9998ebc4 	.word	0x9998ebc4
 800b2e4:	3fc99999 	.word	0x3fc99999
 800b2e8:	440fffff 	.word	0x440fffff
 800b2ec:	7ff00000 	.word	0x7ff00000
 800b2f0:	54442d18 	.word	0x54442d18
 800b2f4:	bff921fb 	.word	0xbff921fb
 800b2f8:	3fdbffff 	.word	0x3fdbffff
 800b2fc:	3ff00000 	.word	0x3ff00000
 800b300:	3ff2ffff 	.word	0x3ff2ffff
 800b304:	40038000 	.word	0x40038000
 800b308:	3ff80000 	.word	0x3ff80000
 800b30c:	bff00000 	.word	0xbff00000
 800b310:	0800b830 	.word	0x0800b830
 800b314:	0800b810 	.word	0x0800b810
 800b318:	3ff921fb 	.word	0x3ff921fb

0800b31c <fabs>:
 800b31c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b320:	4619      	mov	r1, r3
 800b322:	4770      	bx	lr

0800b324 <_init>:
 800b324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b326:	bf00      	nop
 800b328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b32a:	bc08      	pop	{r3}
 800b32c:	469e      	mov	lr, r3
 800b32e:	4770      	bx	lr

0800b330 <_fini>:
 800b330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b332:	bf00      	nop
 800b334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b336:	bc08      	pop	{r3}
 800b338:	469e      	mov	lr, r3
 800b33a:	4770      	bx	lr
