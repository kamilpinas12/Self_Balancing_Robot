
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800b1f8  0800b1f8  0001b1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b708  0800b708  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b708  0800b708  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b708  0800b708  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b708  0800b708  0001b708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b70c  0800b70c  0001b70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  200001d4  0800b8e4  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  0800b8e4  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013670  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003318  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001200  00000000  00000000  00036bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e08  00000000  00000000  00037dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa76  00000000  00000000  00038bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017fed  00000000  00000000  00053646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fc5b  00000000  00000000  0006b633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005e18  00000000  00000000  000fb290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001010a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b1dc 	.word	0x0800b1dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800b1dc 	.word	0x0800b1dc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_DMA_Init+0x48>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <MX_DMA_Init+0x48>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6153      	str	r3, [r2, #20]
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_DMA_Init+0x48>)
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	200e      	movs	r0, #14
 8001194:	f002 fd2f 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001198:	200e      	movs	r0, #14
 800119a:	f002 fd48 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	200f      	movs	r0, #15
 80011a4:	f002 fd27 	bl	8003bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011a8:	200f      	movs	r0, #15
 80011aa:	f002 fd40 	bl	8003c2e <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000

080011bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0310 	add.w	r3, r7, #16
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a3f      	ldr	r2, [pc, #252]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e8:	4b3a      	ldr	r3, [pc, #232]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a39      	ldr	r2, [pc, #228]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011ee:	f043 0320 	orr.w	r3, r3, #32
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <MX_GPIO_Init+0x118>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0320 	and.w	r3, r3, #32
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001200:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <MX_GPIO_Init+0x118>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a33      	ldr	r2, [pc, #204]	; (80012d4 <MX_GPIO_Init+0x118>)
 8001206:	f043 0304 	orr.w	r3, r3, #4
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <MX_GPIO_Init+0x118>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b2e      	ldr	r3, [pc, #184]	; (80012d4 <MX_GPIO_Init+0x118>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <MX_GPIO_Init+0x118>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <MX_GPIO_Init+0x118>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001236:	4828      	ldr	r0, [pc, #160]	; (80012d8 <MX_GPIO_Init+0x11c>)
 8001238:	f003 f93a 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2108      	movs	r1, #8
 8001240:	4826      	ldr	r0, [pc, #152]	; (80012dc <MX_GPIO_Init+0x120>)
 8001242:	f003 f935 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	4824      	ldr	r0, [pc, #144]	; (80012dc <MX_GPIO_Init+0x120>)
 800124c:	f003 f930 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2102      	movs	r1, #2
 8001254:	4822      	ldr	r0, [pc, #136]	; (80012e0 <MX_GPIO_Init+0x124>)
 8001256:	f003 f92b 	bl	80044b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800125a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2302      	movs	r3, #2
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	4619      	mov	r1, r3
 8001272:	4819      	ldr	r0, [pc, #100]	; (80012d8 <MX_GPIO_Init+0x11c>)
 8001274:	f002 ff98 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 8001278:	2388      	movs	r3, #136	; 0x88
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	4619      	mov	r1, r3
 800128e:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_GPIO_Init+0x120>)
 8001290:	f002 ff8a 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 8001294:	2302      	movs	r3, #2
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001298:	2301      	movs	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2302      	movs	r3, #2
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_GPIO_Init+0x124>)
 80012ac:	f002 ff7c 	bl	80041a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_STATE_Pin;
 80012b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0310 	add.w	r3, r7, #16
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_GPIO_Init+0x120>)
 80012c6:	f002 ff6f 	bl	80041a8 <HAL_GPIO_Init>

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <saturation>:





void saturation(float min, float max, float* val){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	if(*val > max) *val = max;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	68b8      	ldr	r0, [r7, #8]
 80012f8:	f7ff feec 	bl	80010d4 <__aeabi_fcmplt>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <saturation+0x24>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	601a      	str	r2, [r3, #0]
	if(*val < min) *val = min;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f7ff fefe 	bl	8001110 <__aeabi_fcmpgt>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d100      	bne.n	800131c <saturation+0x38>
}
 800131a:	e002      	b.n	8001322 <saturation+0x3e>
	if(*val < min) *val = min;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <MX_I2C1_Init+0x50>)
 8001332:	4a13      	ldr	r2, [pc, #76]	; (8001380 <MX_I2C1_Init+0x54>)
 8001334:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_I2C1_Init+0x50>)
 8001338:	4a12      	ldr	r2, [pc, #72]	; (8001384 <MX_I2C1_Init+0x58>)
 800133a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_I2C1_Init+0x50>)
 800134a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800134e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <MX_I2C1_Init+0x50>)
 8001352:	2200      	movs	r2, #0
 8001354:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_I2C1_Init+0x50>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_I2C1_Init+0x50>)
 800136a:	f003 f8b9 	bl	80044e0 <HAL_I2C_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001374:	f000 fdfe 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200001f0 	.word	0x200001f0
 8001380:	40005400 	.word	0x40005400
 8001384:	000186a0 	.word	0x000186a0

08001388 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_I2C2_Init+0x50>)
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <MX_I2C2_Init+0x54>)
 8001390:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <MX_I2C2_Init+0x50>)
 8001394:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <MX_I2C2_Init+0x58>)
 8001396:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_I2C2_Init+0x50>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_I2C2_Init+0x50>)
 80013c6:	f003 f88b 	bl	80044e0 <HAL_I2C_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d0:	f000 fdd0 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000244 	.word	0x20000244
 80013dc:	40005800 	.word	0x40005800
 80013e0:	000186a0 	.word	0x000186a0

080013e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <HAL_I2C_MspInit+0xc8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d124      	bne.n	800144e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a29      	ldr	r2, [pc, #164]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b27      	ldr	r3, [pc, #156]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800141c:	23c0      	movs	r3, #192	; 0xc0
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001420:	2312      	movs	r3, #18
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4619      	mov	r1, r3
 800142e:	4821      	ldr	r0, [pc, #132]	; (80014b4 <HAL_I2C_MspInit+0xd0>)
 8001430:	f002 feba 	bl	80041a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800143a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143e:	61d3      	str	r3, [r2, #28]
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800144c:	e029      	b.n	80014a2 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a19      	ldr	r2, [pc, #100]	; (80014b8 <HAL_I2C_MspInit+0xd4>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d124      	bne.n	80014a2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6193      	str	r3, [r2, #24]
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001470:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001476:	2312      	movs	r3, #18
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4619      	mov	r1, r3
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <HAL_I2C_MspInit+0xd0>)
 8001486:	f002 fe8f 	bl	80041a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001494:	61d3      	str	r3, [r2, #28]
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_I2C_MspInit+0xcc>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	; 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40005400 	.word	0x40005400
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	40005800 	.word	0x40005800

080014bc <filter_init>:
 */

#include "low_pass_filter.h"


filter_typedef filter_init(float alpha){
 80014bc:	b490      	push	{r4, r7}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	filter_typedef f = {alpha, 0, 1};
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	2301      	movs	r3, #1
 80014d2:	753b      	strb	r3, [r7, #20]
	return f;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	461c      	mov	r4, r3
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc90      	pop	{r4, r7}
 80014ec:	4770      	bx	lr

080014ee <filter>:


float filter(filter_typedef* filter, float new_value){
 80014ee:	b590      	push	{r4, r7, lr}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
	if(filter->reset){
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7a1b      	ldrb	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <filter+0x22>
		filter->reset = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	721a      	strb	r2, [r3, #8]
		filter->prev_value = new_value;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	605a      	str	r2, [r3, #4]
		return new_value;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	e021      	b.n	8001554 <filter+0x66>
	}
	else{
		float filtered_value = (filter->alpha) * new_value + (1 - filter->alpha) * filter->prev_value;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6839      	ldr	r1, [r7, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fc3e 	bl	8000d98 <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	461c      	mov	r4, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800152a:	f7ff fb2b 	bl	8000b84 <__aeabi_fsub>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4619      	mov	r1, r3
 8001538:	4610      	mov	r0, r2
 800153a:	f7ff fc2d 	bl	8000d98 <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	4619      	mov	r1, r3
 8001542:	4620      	mov	r0, r4
 8001544:	f7ff fb20 	bl	8000b88 <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	60fb      	str	r3, [r7, #12]
		filter->prev_value = filtered_value;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
		return filtered_value;
 8001552:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}

0800155c <reset_filter>:


void reset_filter(filter_typedef* filter){
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	filter->reset = 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	721a      	strb	r2, [r3, #8]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b0a      	cmp	r3, #10
 8001580:	d109      	bne.n	8001596 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8001582:	230d      	movs	r3, #13
 8001584:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 8001586:	f107 010f 	add.w	r1, r7, #15
 800158a:	f04f 33ff 	mov.w	r3, #4294967295
 800158e:	2201      	movs	r2, #1
 8001590:	4807      	ldr	r0, [pc, #28]	; (80015b0 <__io_putchar+0x3c>)
 8001592:	f005 fbc5 	bl	8006d20 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001596:	1d39      	adds	r1, r7, #4
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
 800159c:	2201      	movs	r2, #1
 800159e:	4804      	ldr	r0, [pc, #16]	; (80015b0 <__io_putchar+0x3c>)
 80015a0:	f005 fbbe 	bl	8006d20 <HAL_UART_Transmit>
    return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000620 	.word	0x20000620

080015b4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if(htim == stepper1.htim){
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d103      	bne.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x1a>
		stepper_update(&stepper1);
 80015c6:	4808      	ldr	r0, [pc, #32]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015c8:	f001 fae8 	bl	8002b9c <stepper_update>
	}
	else if(htim == stepper2.htim){
		stepper_update(&stepper2);
	}
}
 80015cc:	e007      	b.n	80015de <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == stepper2.htim){
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d102      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x2a>
		stepper_update(&stepper2);
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015da:	f001 fadf 	bl	8002b9c <stepper_update>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000298 	.word	0x20000298
 80015ec:	200002c4 	.word	0x200002c4

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015f4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80015f8:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fa:	f002 f99f 	bl	800393c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015fe:	f000 fc73 	bl	8001ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001602:	f7ff fddb 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001606:	f7ff fdb3 	bl	8001170 <MX_DMA_Init>
  MX_I2C1_Init();
 800160a:	f7ff fe8f 	bl	800132c <MX_I2C1_Init>
  MX_TIM2_Init();
 800160e:	f001 fc5d 	bl	8002ecc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001612:	f001 fcd1 	bl	8002fb8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001616:	f002 f803 	bl	8003620 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800161a:	f7ff feb5 	bl	8001388 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // stepper motor setup
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	9304      	str	r3, [sp, #16]
 8001624:	f241 7370 	movw	r3, #6000	; 0x1770
 8001628:	9303      	str	r3, [sp, #12]
 800162a:	2308      	movs	r3, #8
 800162c:	9302      	str	r3, [sp, #8]
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <main+0x200>)
 8001630:	9301      	str	r3, [sp, #4]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4b6e      	ldr	r3, [pc, #440]	; (80017f0 <main+0x200>)
 8001638:	2200      	movs	r2, #0
 800163a:	496e      	ldr	r1, [pc, #440]	; (80017f4 <main+0x204>)
 800163c:	486e      	ldr	r0, [pc, #440]	; (80017f8 <main+0x208>)
 800163e:	f001 f922 	bl	8002886 <stepper_init>
		  DIR1_GPIO_Port, DIR1_Pin, 6000, -1);
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001642:	2301      	movs	r3, #1
 8001644:	9304      	str	r3, [sp, #16]
 8001646:	f241 7370 	movw	r3, #6000	; 0x1770
 800164a:	9303      	str	r3, [sp, #12]
 800164c:	2302      	movs	r3, #2
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	4b6a      	ldr	r3, [pc, #424]	; (80017fc <main+0x20c>)
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <main+0x200>)
 800165a:	2200      	movs	r2, #0
 800165c:	4968      	ldr	r1, [pc, #416]	; (8001800 <main+0x210>)
 800165e:	4869      	ldr	r0, [pc, #420]	; (8001804 <main+0x214>)
 8001660:	f001 f911 	bl	8002886 <stepper_init>
		  DIR2_GPIO_Port, DIR2_Pin, 6000, 1);


  // MPU setup
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 8001664:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001668:	22d0      	movs	r2, #208	; 0xd0
 800166a:	4967      	ldr	r1, [pc, #412]	; (8001808 <main+0x218>)
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fdf3 	bl	8002258 <mpu_init>

  if(mpu_who_am_i(&mpu) != HAL_OK)
 8001672:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fdda 	bl	8002230 <mpu_who_am_i>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <main+0xa2>
  {
	  while(1)
	  {
		  printf("Error while connecting to mpu 6050\n");
 8001682:	4862      	ldr	r0, [pc, #392]	; (800180c <main+0x21c>)
 8001684:	f007 f9e2 	bl	8008a4c <puts>
		  HAL_Delay(1000);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f002 f9b8 	bl	8003a00 <HAL_Delay>
		  printf("Error while connecting to mpu 6050\n");
 8001690:	e7f7      	b.n	8001682 <main+0x92>
	  }
  }

  set_gyro_scale(&mpu, range_250);
 8001692:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fd09 	bl	80020b0 <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 800169e:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fd51 	bl	800214c <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc21Hz_Gyro20Hz);
 80016aa:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80016ae:	2104      	movs	r1, #4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fd99 	bl	80021e8 <mpu_low_pass_filter>
  HAL_Delay(300);
 80016b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016ba:	f002 f9a1 	bl	8003a00 <HAL_Delay>


  mpu_gyro_calibration(&mpu);
 80016be:	f507 7309 	add.w	r3, r7, #548	; 0x224
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 febc 	bl	8002440 <mpu_gyro_calibration>



  user_function_typedef user_function_array[] = {
 80016c8:	4a51      	ldr	r2, [pc, #324]	; (8001810 <main+0x220>)
 80016ca:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80016ce:	4611      	mov	r1, r2
 80016d0:	2278      	movs	r2, #120	; 0x78
 80016d2:	4618      	mov	r0, r3
 80016d4:	f007 fb5a 	bl	8008d8c <memcpy>
		{&rotate_deg, "rotate", 2}

  };


  uart_interface_init(&uart_interface, &huart1, &hdma_usart1_rx, user_function_array, sizeof(user_function_array) / sizeof(user_function_typedef));
 80016d8:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 80016dc:	2205      	movs	r2, #5
 80016de:	9200      	str	r2, [sp, #0]
 80016e0:	4a4c      	ldr	r2, [pc, #304]	; (8001814 <main+0x224>)
 80016e2:	494d      	ldr	r1, [pc, #308]	; (8001818 <main+0x228>)
 80016e4:	484d      	ldr	r0, [pc, #308]	; (800181c <main+0x22c>)
 80016e6:	f001 fd6d 	bl	80031c4 <uart_interface_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // control parameters
  int delay = 4;
 80016ea:	2304      	movs	r3, #4
 80016ec:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c


  pid_typedef angle_pid = pid_init(480, 6, 1200);
 80016f0:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80016f4:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80016f8:	4b49      	ldr	r3, [pc, #292]	; (8001820 <main+0x230>)
 80016fa:	4a4a      	ldr	r2, [pc, #296]	; (8001824 <main+0x234>)
 80016fc:	494a      	ldr	r1, [pc, #296]	; (8001828 <main+0x238>)
 80016fe:	f001 f837 	bl	8002770 <pid_init>
  pid_typedef pos_pid = pid_init(0.0025, 0.000001, 0.005);
 8001702:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001706:	f5a3 7096 	sub.w	r0, r3, #300	; 0x12c
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <main+0x23c>)
 800170c:	4a48      	ldr	r2, [pc, #288]	; (8001830 <main+0x240>)
 800170e:	4949      	ldr	r1, [pc, #292]	; (8001834 <main+0x244>)
 8001710:	f001 f82e 	bl	8002770 <pid_init>


  filter_typedef pos_pid_filter = filter_init(0.05);
 8001714:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001718:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800171c:	4946      	ldr	r1, [pc, #280]	; (8001838 <main+0x248>)
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fecc 	bl	80014bc <filter_init>
  filter_typedef pos_pid_derivative_filter = filter_init(0.005);
 8001724:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001728:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800172c:	493f      	ldr	r1, [pc, #252]	; (800182c <main+0x23c>)
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fec4 	bl	80014bc <filter_init>
  filter_typedef angle_pid_derivative_filter = filter_init(0.3);
 8001734:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001738:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800173c:	493f      	ldr	r1, [pc, #252]	; (800183c <main+0x24c>)
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff febc 	bl	80014bc <filter_init>
  filter_typedef output_filter = filter_init(0.7);
 8001744:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001748:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800174c:	493c      	ldr	r1, [pc, #240]	; (8001840 <main+0x250>)
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff feb4 	bl	80014bc <filter_init>
  filter_typedef gain_factor_filter = filter_init(0.1);
 8001754:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001758:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800175c:	4939      	ldr	r1, [pc, #228]	; (8001844 <main+0x254>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff feac 	bl	80014bc <filter_init>
  filter_typedef robot_speed_filter = filter_init(0.1);
 8001764:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001768:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800176c:	4935      	ldr	r1, [pc, #212]	; (8001844 <main+0x254>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fea4 	bl	80014bc <filter_init>



  unsigned long lst_time = HAL_GetTick();
 8001774:	f002 f93a 	bl	80039ec <HAL_GetTick>
 8001778:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294


  while (1)
  {
	  mpu_calc_x_angle(&mpu);
 800177c:	f507 7309 	add.w	r3, r7, #548	; 0x224
 8001780:	4618      	mov	r0, r3
 8001782:	f000 ff51 	bl	8002628 <mpu_calc_x_angle>

	  execute_received_command(&uart_interface);
 8001786:	4825      	ldr	r0, [pc, #148]	; (800181c <main+0x22c>)
 8001788:	f001 fdfe 	bl	8003388 <execute_received_command>
	  start_uart_interface(&uart_interface);
 800178c:	4823      	ldr	r0, [pc, #140]	; (800181c <main+0x22c>)
 800178e:	f001 fd48 	bl	8003222 <start_uart_interface>

	  if(fabsf(mpu.x_angle) < 0.01){
 8001792:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001796:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fe4e 	bl	800043c <__aeabi_f2d>
 80017a0:	a311      	add	r3, pc, #68	; (adr r3, 80017e8 <main+0x1f8>)
 80017a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a6:	f7ff f913 	bl	80009d0 <__aeabi_dcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8385 	beq.w	8001ebc <main+0x8cc>
		  // set up before entering main loop
		  lst_time = HAL_GetTick();
 80017b2:	f002 f91b 	bl	80039ec <HAL_GetTick>
 80017b6:	f8c7 0294 	str.w	r0, [r7, #660]	; 0x294

		  // start motors
		  stepper_enable(&stepper1, 1);
 80017ba:	2101      	movs	r1, #1
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <main+0x208>)
 80017be:	f001 f8aa 	bl	8002916 <stepper_enable>
		  stepper_enable(&stepper2, 1);
 80017c2:	2101      	movs	r1, #1
 80017c4:	480f      	ldr	r0, [pc, #60]	; (8001804 <main+0x214>)
 80017c6:	f001 f8a6 	bl	8002916 <stepper_enable>

		  //restart motor position
		  stepper1.step_counter = 0;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <main+0x208>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
		  stepper2.step_counter = 0;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <main+0x214>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
		  set_pos = 0;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <main+0x258>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

		  spin_duration_ms = 0;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <main+0x25c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	801a      	strh	r2, [r3, #0]

		  // main loop
		  while(fabsf(mpu.x_angle) < 0.7){
 80017e2:	e321      	b.n	8001e28 <main+0x838>
 80017e4:	f3af 8000 	nop.w
 80017e8:	47ae147b 	.word	0x47ae147b
 80017ec:	3f847ae1 	.word	0x3f847ae1
 80017f0:	40010800 	.word	0x40010800
 80017f4:	20000590 	.word	0x20000590
 80017f8:	20000298 	.word	0x20000298
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	200005d8 	.word	0x200005d8
 8001804:	200002c4 	.word	0x200002c4
 8001808:	200001f0 	.word	0x200001f0
 800180c:	0800b1f8 	.word	0x0800b1f8
 8001810:	0800b248 	.word	0x0800b248
 8001814:	20000668 	.word	0x20000668
 8001818:	20000620 	.word	0x20000620
 800181c:	200002f4 	.word	0x200002f4
 8001820:	44960000 	.word	0x44960000
 8001824:	40c00000 	.word	0x40c00000
 8001828:	43f00000 	.word	0x43f00000
 800182c:	3ba3d70a 	.word	0x3ba3d70a
 8001830:	358637bd 	.word	0x358637bd
 8001834:	3b23d70a 	.word	0x3b23d70a
 8001838:	3d4ccccd 	.word	0x3d4ccccd
 800183c:	3e99999a 	.word	0x3e99999a
 8001840:	3f333333 	.word	0x3f333333
 8001844:	3dcccccd 	.word	0x3dcccccd
 8001848:	200002f0 	.word	0x200002f0
 800184c:	20000584 	.word	0x20000584
			  if((HAL_GetTick() - mpu.lst_time_x_angle) >= delay){
 8001850:	f002 f8cc 	bl	80039ec <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800185a:	1ad2      	subs	r2, r2, r3
 800185c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001860:	429a      	cmp	r2, r3
 8001862:	f0c0 82e1 	bcc.w	8001e28 <main+0x838>

				  mpu_calc_x_angle(&mpu);
 8001866:	f507 7309 	add.w	r3, r7, #548	; 0x224
 800186a:	4618      	mov	r0, r3
 800186c:	f000 fedc 	bl	8002628 <mpu_calc_x_angle>
				  float time_delta = (mpu.lst_time_x_angle - lst_time);
 8001870:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8001874:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fa34 	bl	8000ce8 <__aeabi_ui2f>
 8001880:	4603      	mov	r3, r0
 8001882:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
				  lst_time = mpu.lst_time_x_angle;
 8001886:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800188a:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294


				  float robot_speed = filter(&robot_speed_filter, (stepper1.speed + stepper2.speed) / 2);
 800188e:	4bc8      	ldr	r3, [pc, #800]	; (8001bb0 <main+0x5c0>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001892:	4ac8      	ldr	r2, [pc, #800]	; (8001bb4 <main+0x5c4>)
 8001894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff f975 	bl	8000b88 <__addsf3>
 800189e:	4603      	mov	r3, r0
 80018a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fb2b 	bl	8000f00 <__aeabi_fdiv>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe1a 	bl	80014ee <filter>
 80018ba:	f8c7 0284 	str.w	r0, [r7, #644]	; 0x284
				  float position_error = -((stepper2.step_counter + stepper1.step_counter)/2) - set_pos;
 80018be:	4bbd      	ldr	r3, [pc, #756]	; (8001bb4 <main+0x5c4>)
 80018c0:	699a      	ldr	r2, [r3, #24]
 80018c2:	4bbb      	ldr	r3, [pc, #748]	; (8001bb0 <main+0x5c0>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4413      	add	r3, r2
 80018c8:	0fda      	lsrs	r2, r3, #31
 80018ca:	4413      	add	r3, r2
 80018cc:	105b      	asrs	r3, r3, #1
 80018ce:	425b      	negs	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4bb9      	ldr	r3, [pc, #740]	; (8001bb8 <main+0x5c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fa09 	bl	8000cf0 <__aeabi_i2f>
 80018de:	4603      	mov	r3, r0
 80018e0:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
				  robot_angle = (360.0 * 21.3)/(2*3.14*15.5 * 1600.0) * (stepper2.step_counter - stepper1.step_counter);
 80018e4:	4bb3      	ldr	r3, [pc, #716]	; (8001bb4 <main+0x5c4>)
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	4bb1      	ldr	r3, [pc, #708]	; (8001bb0 <main+0x5c0>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fd92 	bl	8000418 <__aeabi_i2d>
 80018f4:	a3aa      	add	r3, pc, #680	; (adr r3, 8001ba0 <main+0x5b0>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fdf7 	bl	80004ec <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4610      	mov	r0, r2
 8001904:	4619      	mov	r1, r3
 8001906:	f7ff f8e9 	bl	8000adc <__aeabi_d2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4aab      	ldr	r2, [pc, #684]	; (8001bbc <main+0x5cc>)
 800190e:	6013      	str	r3, [r2, #0]


				  // pos hold PID
				  float desired_speed = (position_error * 0.05);
 8001910:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001914:	f7fe fd92 	bl	800043c <__aeabi_f2d>
 8001918:	a3a3      	add	r3, pc, #652	; (adr r3, 8001ba8 <main+0x5b8>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fde5 	bl	80004ec <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f8d7 	bl	8000adc <__aeabi_d2f>
 800192e:	4602      	mov	r2, r0
 8001930:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001934:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001938:	601a      	str	r2, [r3, #0]
				  saturation(-50, 50, &desired_speed);
 800193a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800193e:	461a      	mov	r2, r3
 8001940:	499f      	ldr	r1, [pc, #636]	; (8001bc0 <main+0x5d0>)
 8001942:	48a0      	ldr	r0, [pc, #640]	; (8001bc4 <main+0x5d4>)
 8001944:	f7ff fcce 	bl	80012e4 <saturation>

				  float error = robot_speed - desired_speed;
 8001948:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800194c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4619      	mov	r1, r3
 8001954:	f8d7 0284 	ldr.w	r0, [r7, #644]	; 0x284
 8001958:	f7ff f914 	bl	8000b84 <__aeabi_fsub>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001964:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001968:	601a      	str	r2, [r3, #0]
				  saturation(-50, 50, &error);
 800196a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800196e:	461a      	mov	r2, r3
 8001970:	4993      	ldr	r1, [pc, #588]	; (8001bc0 <main+0x5d0>)
 8001972:	4894      	ldr	r0, [pc, #592]	; (8001bc4 <main+0x5d4>)
 8001974:	f7ff fcb6 	bl	80012e4 <saturation>

				  pos_pid.error = filter(&pos_pid_filter, error);
 8001978:	f507 7326 	add.w	r3, r7, #664	; 0x298
 800197c:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001986:	4611      	mov	r1, r2
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fdb0 	bl	80014ee <filter>
 800198e:	4602      	mov	r2, r0
 8001990:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001998:	611a      	str	r2, [r3, #16]
				  pos_pid.measurement = filter(&pos_pid_derivative_filter, robot_speed);
 800199a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800199e:	f8d7 1284 	ldr.w	r1, [r7, #644]	; 0x284
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fda3 	bl	80014ee <filter>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 80019ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80019b2:	619a      	str	r2, [r3, #24]


				  float gain_factor = 1;
 80019b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019b8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
				  if(fabs(position_error) < 100 && fabs(robot_speed) < 20){
 80019bc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80019c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019c4:	4980      	ldr	r1, [pc, #512]	; (8001bc8 <main+0x5d8>)
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fb84 	bl	80010d4 <__aeabi_fcmplt>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <main+0x40e>
 80019d2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80019d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019da:	497c      	ldr	r1, [pc, #496]	; (8001bcc <main+0x5dc>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fb79 	bl	80010d4 <__aeabi_fcmplt>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <main+0x40e>
					  gain_factor = fabs(position_error) / 150;
 80019e8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80019ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019f0:	4977      	ldr	r1, [pc, #476]	; (8001bd0 <main+0x5e0>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fa84 	bl	8000f00 <__aeabi_fdiv>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
				  }

				  gain_factor = filter(&gain_factor_filter, gain_factor);
 80019fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001a02:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fd71 	bl	80014ee <filter>
 8001a0c:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290


				  // pos P
				  float p_pos = gain_factor * pos_pid.error * pos_pid.kp;
 8001a10:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f9ba 	bl	8000d98 <__aeabi_fmul>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	4610      	mov	r0, r2
 8001a36:	f7ff f9af 	bl	8000d98 <__aeabi_fmul>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c

				  // pos I
				  pos_pid.i += 0.5 * (pos_pid.error + pos_pid.prev_error) * pos_pid.ki * time_delta;
 8001a40:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fcf6 	bl	800043c <__aeabi_f2d>
 8001a50:	4604      	mov	r4, r0
 8001a52:	460d      	mov	r5, r1
 8001a54:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	f7ff f88c 	bl	8000b88 <__addsf3>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fce2 	bl	800043c <__aeabi_f2d>
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <main+0x5e4>)
 8001a7e:	f7fe fd35 	bl	80004ec <__aeabi_dmul>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4690      	mov	r8, r2
 8001a88:	4699      	mov	r9, r3
 8001a8a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fcd1 	bl	800043c <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4640      	mov	r0, r8
 8001aa0:	4649      	mov	r1, r9
 8001aa2:	f7fe fd23 	bl	80004ec <__aeabi_dmul>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4690      	mov	r8, r2
 8001aac:	4699      	mov	r9, r3
 8001aae:	f8d7 0288 	ldr.w	r0, [r7, #648]	; 0x288
 8001ab2:	f7fe fcc3 	bl	800043c <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4640      	mov	r0, r8
 8001abc:	4649      	mov	r1, r9
 8001abe:	f7fe fd15 	bl	80004ec <__aeabi_dmul>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	4629      	mov	r1, r5
 8001aca:	f7fe fb59 	bl	8000180 <__adddf3>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f801 	bl	8000adc <__aeabi_d2f>
 8001ada:	4602      	mov	r2, r0
 8001adc:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001ae0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ae4:	60da      	str	r2, [r3, #12]
				  saturation(-0.55, 0.55, &pos_pid.i);
 8001ae6:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001aea:	330c      	adds	r3, #12
 8001aec:	461a      	mov	r2, r3
 8001aee:	493a      	ldr	r1, [pc, #232]	; (8001bd8 <main+0x5e8>)
 8001af0:	483a      	ldr	r0, [pc, #232]	; (8001bdc <main+0x5ec>)
 8001af2:	f7ff fbf7 	bl	80012e4 <saturation>

				  // pos D
				  float d_pos = gain_factor * pos_pid.kd * (pos_pid.measurement - pos_pid.prev_measurement) / time_delta;
 8001af6:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f8d7 1290 	ldr.w	r1, [r7, #656]	; 0x290
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f947 	bl	8000d98 <__aeabi_fmul>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	461c      	mov	r4, r3
 8001b0e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4610      	mov	r0, r2
 8001b26:	f7ff f82d 	bl	8000b84 <__aeabi_fsub>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4620      	mov	r0, r4
 8001b30:	f7ff f932 	bl	8000d98 <__aeabi_fmul>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f9e0 	bl	8000f00 <__aeabi_fdiv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278



				  //target angle
				  float target_angle = p_pos + pos_pid.i + d_pos;
 8001b46:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f8d7 127c 	ldr.w	r1, [r7, #636]	; 0x27c
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff f817 	bl	8000b88 <__addsf3>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f811 	bl	8000b88 <__addsf3>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b72:	601a      	str	r2, [r3, #0]
				  saturation(-0.6, 0.6, &target_angle);
 8001b74:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4919      	ldr	r1, [pc, #100]	; (8001be0 <main+0x5f0>)
 8001b7c:	4819      	ldr	r0, [pc, #100]	; (8001be4 <main+0x5f4>)
 8001b7e:	f7ff fbb1 	bl	80012e4 <saturation>



				  // angle PID
				  angle_pid.error =  target_angle - mpu.x_angle;
 8001b82:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001b86:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8001b90:	4611      	mov	r1, r2
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fff6 	bl	8000b84 <__aeabi_fsub>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	e024      	b.n	8001be8 <main+0x5f8>
 8001b9e:	bf00      	nop
 8001ba0:	6dd3b627 	.word	0x6dd3b627
 8001ba4:	3fa93548 	.word	0x3fa93548
 8001ba8:	9999999a 	.word	0x9999999a
 8001bac:	3fa99999 	.word	0x3fa99999
 8001bb0:	20000298 	.word	0x20000298
 8001bb4:	200002c4 	.word	0x200002c4
 8001bb8:	200002f0 	.word	0x200002f0
 8001bbc:	20000588 	.word	0x20000588
 8001bc0:	42480000 	.word	0x42480000
 8001bc4:	c2480000 	.word	0xc2480000
 8001bc8:	42c80000 	.word	0x42c80000
 8001bcc:	41a00000 	.word	0x41a00000
 8001bd0:	43160000 	.word	0x43160000
 8001bd4:	3fe00000 	.word	0x3fe00000
 8001bd8:	3f0ccccd 	.word	0x3f0ccccd
 8001bdc:	bf0ccccd 	.word	0xbf0ccccd
 8001be0:	3f19999a 	.word	0x3f19999a
 8001be4:	bf19999a 	.word	0xbf19999a
 8001be8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001bec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bf0:	611a      	str	r2, [r3, #16]
				  angle_pid.measurement = -mpu.x_angle;
 8001bf2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001bf6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001bfa:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c02:	619a      	str	r2, [r3, #24]

				  // P angle
				  float p = angle_pid.error * angle_pid.kp;
 8001c04:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001c08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001c12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	f7ff f8bc 	bl	8000d98 <__aeabi_fmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274

				  // I angle
				  angle_pid.i += ((angle_pid.error + angle_pid.prev_error) * time_delta * angle_pid.ki) / 2;
 8001c26:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001c2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c2e:	68dc      	ldr	r4, [r3, #12]
 8001c30:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001c34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001c3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4619      	mov	r1, r3
 8001c46:	4610      	mov	r0, r2
 8001c48:	f7fe ff9e 	bl	8000b88 <__addsf3>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f8a0 	bl	8000d98 <__aeabi_fmul>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001c60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f7ff f895 	bl	8000d98 <__aeabi_fmul>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff f943 	bl	8000f00 <__aeabi_fdiv>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4620      	mov	r0, r4
 8001c80:	f7fe ff82 	bl	8000b88 <__addsf3>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c90:	60da      	str	r2, [r3, #12]
				  saturation(-60, 60, &angle_pid.i);
 8001c92:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001c96:	330c      	adds	r3, #12
 8001c98:	461a      	mov	r2, r3
 8001c9a:	498d      	ldr	r1, [pc, #564]	; (8001ed0 <main+0x8e0>)
 8001c9c:	488d      	ldr	r0, [pc, #564]	; (8001ed4 <main+0x8e4>)
 8001c9e:	f7ff fb21 	bl	80012e4 <saturation>

				  // D angle
				  pos_pid.measurement = filter(&angle_pid_derivative_filter, angle_pid.measurement);
 8001ca2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001ca6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fc1b 	bl	80014ee <filter>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001cbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cc2:	619a      	str	r2, [r3, #24]
				  float d = angle_pid.kd * (pos_pid.measurement - angle_pid.prev_measurement)/time_delta;
 8001cc4:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001cc8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ccc:	689c      	ldr	r4, [r3, #8]
 8001cce:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001cdc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f7fe ff4d 	bl	8000b84 <__aeabi_fsub>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7ff f852 	bl	8000d98 <__aeabi_fmul>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f8d7 1288 	ldr.w	r1, [r7, #648]	; 0x288
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f900 	bl	8000f00 <__aeabi_fdiv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270


				  float pid = p + angle_pid.i + d;
 8001d06:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001d0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f8d7 1274 	ldr.w	r1, [r7, #628]	; 0x274
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe ff37 	bl	8000b88 <__addsf3>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f8d7 0270 	ldr.w	r0, [r7, #624]	; 0x270
 8001d22:	f7fe ff31 	bl	8000b88 <__addsf3>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c

				  pid = filter(&output_filter, pid);
 8001d2c:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001d30:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fbda 	bl	80014ee <filter>
 8001d3a:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c


				  stepper_set_speed(&stepper1, pid);
 8001d3e:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8001d42:	4865      	ldr	r0, [pc, #404]	; (8001ed8 <main+0x8e8>)
 8001d44:	f000 fe1c 	bl	8002980 <stepper_set_speed>
				  stepper_set_speed(&stepper2, pid);
 8001d48:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8001d4c:	4863      	ldr	r0, [pc, #396]	; (8001edc <main+0x8ec>)
 8001d4e:	f000 fe17 	bl	8002980 <stepper_set_speed>
//				  }




				  pid_step(&angle_pid);
 8001d52:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fd4a 	bl	80027f0 <pid_step>
				  pid_step(&pos_pid);
 8001d5c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fd45 	bl	80027f0 <pid_step>


				  execute_received_command(&uart_interface);
 8001d66:	485e      	ldr	r0, [pc, #376]	; (8001ee0 <main+0x8f0>)
 8001d68:	f001 fb0e 	bl	8003388 <execute_received_command>
				  start_uart_interface(&uart_interface);
 8001d6c:	485c      	ldr	r0, [pc, #368]	; (8001ee0 <main+0x8f0>)
 8001d6e:	f001 fa58 	bl	8003222 <start_uart_interface>

				  // send data

				  uint8_t buffer[BUFFER_SIZE_TX];
				  //uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%ld, %ld, %.3f\r\n", stepper1.step_counter, stepper2.step_counter, robot_angle);
				  uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\n", robot_speed, desired_speed, pos_pid.error, p_pos, pos_pid.i, d_pos, position_error);
 8001d72:	f8d7 0284 	ldr.w	r0, [r7, #644]	; 0x284
 8001d76:	f7fe fb61 	bl	800043c <__aeabi_f2d>
 8001d7a:	4680      	mov	r8, r0
 8001d7c:	4689      	mov	r9, r1
 8001d7e:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001d82:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fb57 	bl	800043c <__aeabi_f2d>
 8001d8e:	4682      	mov	sl, r0
 8001d90:	468b      	mov	fp, r1
 8001d92:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fb4d 	bl	800043c <__aeabi_f2d>
 8001da2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001da6:	f8d7 027c 	ldr.w	r0, [r7, #636]	; 0x27c
 8001daa:	f7fe fb47 	bl	800043c <__aeabi_f2d>
 8001dae:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001db2:	f507 7326 	add.w	r3, r7, #664	; 0x298
 8001db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fb3d 	bl	800043c <__aeabi_f2d>
 8001dc2:	e9c7 0100 	strd	r0, r1, [r7]
 8001dc6:	f8d7 0278 	ldr.w	r0, [r7, #632]	; 0x278
 8001dca:	f7fe fb37 	bl	800043c <__aeabi_f2d>
 8001dce:	4604      	mov	r4, r0
 8001dd0:	460d      	mov	r5, r1
 8001dd2:	f8d7 0280 	ldr.w	r0, [r7, #640]	; 0x280
 8001dd6:	f7fe fb31 	bl	800043c <__aeabi_f2d>
 8001dda:	f107 0318 	add.w	r3, r7, #24
 8001dde:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001de2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8001de6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dea:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8001dee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001df2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8001df6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001dfa:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8001dfe:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001e02:	e9cd 8900 	strd	r8, r9, [sp]
 8001e06:	4a37      	ldr	r2, [pc, #220]	; (8001ee4 <main+0x8f4>)
 8001e08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f006 fe25 	bl	8008a5c <sniprintf>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f8a7 326a 	strh.w	r3, [r7, #618]	; 0x26a
				  //uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f\n", robot_speed - desired_speed, pos_pid.error);

				  //uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f\n", mpu.x_angle, target_angle);

				  uart_send(&uart_interface, buffer, size, 0);
 8001e18:	f8b7 226a 	ldrh.w	r2, [r7, #618]	; 0x26a
 8001e1c:	f107 0118 	add.w	r1, r7, #24
 8001e20:	2300      	movs	r3, #0
 8001e22:	482f      	ldr	r0, [pc, #188]	; (8001ee0 <main+0x8f0>)
 8001e24:	f001 fa0d 	bl	8003242 <uart_send>
		  while(fabsf(mpu.x_angle) < 0.7){
 8001e28:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb03 	bl	800043c <__aeabi_f2d>
 8001e36:	a324      	add	r3, pc, #144	; (adr r3, 8001ec8 <main+0x8d8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fdc8 	bl	80009d0 <__aeabi_dcmplt>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f47f ad04 	bne.w	8001850 <main+0x260>


			  }
		  }
		  //stop motors
		  stepper_set_speed(&stepper1, 0);
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	4822      	ldr	r0, [pc, #136]	; (8001ed8 <main+0x8e8>)
 8001e4e:	f000 fd97 	bl	8002980 <stepper_set_speed>
		  stepper_set_speed(&stepper2, 0);
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	4821      	ldr	r0, [pc, #132]	; (8001edc <main+0x8ec>)
 8001e58:	f000 fd92 	bl	8002980 <stepper_set_speed>
		  stepper_enable(&stepper1, 0);
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	481e      	ldr	r0, [pc, #120]	; (8001ed8 <main+0x8e8>)
 8001e60:	f000 fd59 	bl	8002916 <stepper_enable>
		  stepper_enable(&stepper2, 0);
 8001e64:	2100      	movs	r1, #0
 8001e66:	481d      	ldr	r0, [pc, #116]	; (8001edc <main+0x8ec>)
 8001e68:	f000 fd55 	bl	8002916 <stepper_enable>

		  pid_reset(&angle_pid);
 8001e6c:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fca8 	bl	80027c6 <pid_reset>
		  pid_reset(&pos_pid);
 8001e76:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fca3 	bl	80027c6 <pid_reset>


		  reset_filter(&pos_pid_filter);
 8001e80:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fb69 	bl	800155c <reset_filter>
		  reset_filter(&angle_pid_derivative_filter);
 8001e8a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fb64 	bl	800155c <reset_filter>
		  reset_filter(&pos_pid_derivative_filter);
 8001e94:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fb5f 	bl	800155c <reset_filter>
		  reset_filter(&output_filter);
 8001e9e:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff fb5a 	bl	800155c <reset_filter>
		  reset_filter(&gain_factor_filter);
 8001ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fb55 	bl	800155c <reset_filter>
		  reset_filter(&robot_speed_filter);
 8001eb2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fb50 	bl	800155c <reset_filter>


	  }


	  HAL_Delay(delay);
 8001ebc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 fd9d 	bl	8003a00 <HAL_Delay>
	  mpu_calc_x_angle(&mpu);
 8001ec6:	e459      	b.n	800177c <main+0x18c>
 8001ec8:	66666666 	.word	0x66666666
 8001ecc:	3fe66666 	.word	0x3fe66666
 8001ed0:	42700000 	.word	0x42700000
 8001ed4:	c2700000 	.word	0xc2700000
 8001ed8:	20000298 	.word	0x20000298
 8001edc:	200002c4 	.word	0x200002c4
 8001ee0:	200002f4 	.word	0x200002f4
 8001ee4:	0800b21c 	.word	0x0800b21c

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b090      	sub	sp, #64	; 0x40
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 0318 	add.w	r3, r7, #24
 8001ef2:	2228      	movs	r2, #40	; 0x28
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f006 febc 	bl	8008c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	605a      	str	r2, [r3, #4]
 8001f04:	609a      	str	r2, [r3, #8]
 8001f06:	60da      	str	r2, [r3, #12]
 8001f08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fb3b 	bl	80055ac <HAL_RCC_OscConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001f3c:	f000 f81a 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f40:	230f      	movs	r3, #15
 8001f42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f44:	2302      	movs	r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2102      	movs	r1, #2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fda8 	bl	8005ab0 <HAL_RCC_ClockConfig>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f66:	f000 f805 	bl	8001f74 <Error_Handler>
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	3740      	adds	r7, #64	; 0x40
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  stepper_set_speed(&stepper1, 0);
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	4809      	ldr	r0, [pc, #36]	; (8001fa4 <Error_Handler+0x30>)
 8001f7e:	f000 fcff 	bl	8002980 <stepper_set_speed>
  stepper_set_speed(&stepper2, 0);
 8001f82:	f04f 0100 	mov.w	r1, #0
 8001f86:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <Error_Handler+0x34>)
 8001f88:	f000 fcfa 	bl	8002980 <stepper_set_speed>
  stepper_enable(&stepper1, 0);
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4805      	ldr	r0, [pc, #20]	; (8001fa4 <Error_Handler+0x30>)
 8001f90:	f000 fcc1 	bl	8002916 <stepper_enable>
  stepper_enable(&stepper2, 0);
 8001f94:	2100      	movs	r1, #0
 8001f96:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <Error_Handler+0x34>)
 8001f98:	f000 fcbd 	bl	8002916 <stepper_enable>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop

  __disable_irq();
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <Error_Handler+0x2c>
 8001fa2:	bf00      	nop
 8001fa4:	20000298 	.word	0x20000298
 8001fa8:	200002c4 	.word	0x200002c4

08001fac <mpu_write_reg>:




static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af04      	add	r7, sp, #16
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	b299      	uxth	r1, r3
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	1cbb      	adds	r3, r7, #2
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f002 fbc5 	bl	8004768 <HAL_I2C_Mem_Write>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b088      	sub	sp, #32
 8001fea:	af04      	add	r7, sp, #16
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	791b      	ldrb	r3, [r3, #4]
 8001ffa:	b299      	uxth	r1, r3
 8001ffc:	78fb      	ldrb	r3, [r7, #3]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f04f 33ff 	mov.w	r3, #4294967295
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	2301      	movs	r3, #1
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	f107 030f 	add.w	r3, r7, #15
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	2301      	movs	r3, #1
 8002012:	f002 fca3 	bl	800495c <HAL_I2C_Mem_Read>
	return tmp;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 800202c:	216b      	movs	r1, #107	; 0x6b
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffd9 	bl	8001fe6 <mpu_read_reg>
 8002034:	4603      	mov	r3, r0
 8002036:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800203e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	01db      	lsls	r3, r3, #7
 8002044:	b25a      	sxtb	r2, r3
 8002046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204a:	4313      	orrs	r3, r2
 800204c:	b25b      	sxtb	r3, r3
 800204e:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	461a      	mov	r2, r3
 8002054:	216b      	movs	r1, #107	; 0x6b
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ffa8 	bl	8001fac <mpu_write_reg>
}
 800205c:	bf00      	nop
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8002070:	216b      	movs	r1, #107	; 0x6b
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffb7 	bl	8001fe6 <mpu_read_reg>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002082:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	019b      	lsls	r3, r3, #6
 8002088:	b25b      	sxtb	r3, r3
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	b25a      	sxtb	r2, r3
 8002090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002094:	4313      	orrs	r3, r2
 8002096:	b25b      	sxtb	r3, r3
 8002098:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	461a      	mov	r2, r3
 800209e:	216b      	movs	r1, #107	; 0x6b
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff ff83 	bl	8001fac <mpu_write_reg>
}
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 80020bc:	211b      	movs	r1, #27
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff ff91 	bl	8001fe6 <mpu_read_reg>
 80020c4:	4603      	mov	r3, r0
 80020c6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	f023 0318 	bic.w	r3, r3, #24
 80020ce:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	b25b      	sxtb	r3, r3
 80020d6:	f003 0318 	and.w	r3, r3, #24
 80020da:	b25a      	sxtb	r2, r3
 80020dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	461a      	mov	r2, r3
 80020ea:	211b      	movs	r1, #27
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff5d 	bl	8001fac <mpu_write_reg>

	switch (range){
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d81b      	bhi.n	8002130 <set_gyro_scale+0x80>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <set_gyro_scale+0x50>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002111 	.word	0x08002111
 8002104:	08002119 	.word	0x08002119
 8002108:	08002121 	.word	0x08002121
 800210c:	08002129 	.word	0x08002129
	case range_250:
		mpu->gyro_scale = 0.007633;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <set_gyro_scale+0x8c>)
 8002114:	609a      	str	r2, [r3, #8]
		break;
 8002116:	e00c      	b.n	8002132 <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <set_gyro_scale+0x90>)
 800211c:	609a      	str	r2, [r3, #8]
		break;
 800211e:	e008      	b.n	8002132 <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <set_gyro_scale+0x94>)
 8002124:	609a      	str	r2, [r3, #8]
		break;
 8002126:	e004      	b.n	8002132 <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a07      	ldr	r2, [pc, #28]	; (8002148 <set_gyro_scale+0x98>)
 800212c:	609a      	str	r2, [r3, #8]
		break;
 800212e:	e000      	b.n	8002132 <set_gyro_scale+0x82>
	default:
		break;
 8002130:	bf00      	nop
	}
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	3bfa1e3f 	.word	0x3bfa1e3f
 8002140:	3c7a2270 	.word	0x3c7a2270
 8002144:	3cf9bfdf 	.word	0x3cf9bfdf
 8002148:	3d79c0ec 	.word	0x3d79c0ec

0800214c <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8002158:	211c      	movs	r1, #28
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ff43 	bl	8001fe6 <mpu_read_reg>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	f023 0318 	bic.w	r3, r3, #24
 800216a:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	b25b      	sxtb	r3, r3
 8002172:	f003 0318 	and.w	r3, r3, #24
 8002176:	b25a      	sxtb	r2, r3
 8002178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217c:	4313      	orrs	r3, r2
 800217e:	b25b      	sxtb	r3, r3
 8002180:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	461a      	mov	r2, r3
 8002186:	211c      	movs	r1, #28
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff0f 	bl	8001fac <mpu_write_reg>

	switch (range)
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d81b      	bhi.n	80021cc <set_accelerometer_scale+0x80>
 8002194:	a201      	add	r2, pc, #4	; (adr r2, 800219c <set_accelerometer_scale+0x50>)
 8002196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219a:	bf00      	nop
 800219c:	080021ad 	.word	0x080021ad
 80021a0:	080021b5 	.word	0x080021b5
 80021a4:	080021bd 	.word	0x080021bd
 80021a8:	080021c5 	.word	0x080021c5
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <set_accelerometer_scale+0x8c>)
 80021b0:	60da      	str	r2, [r3, #12]
		break;
 80021b2:	e00c      	b.n	80021ce <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a09      	ldr	r2, [pc, #36]	; (80021dc <set_accelerometer_scale+0x90>)
 80021b8:	60da      	str	r2, [r3, #12]
		break;
 80021ba:	e008      	b.n	80021ce <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <set_accelerometer_scale+0x94>)
 80021c0:	60da      	str	r2, [r3, #12]
		break;
 80021c2:	e004      	b.n	80021ce <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <set_accelerometer_scale+0x98>)
 80021c8:	60da      	str	r2, [r3, #12]
		break;
 80021ca:	e000      	b.n	80021ce <set_accelerometer_scale+0x82>
	default:
		break;
 80021cc:	bf00      	nop
	}
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	387fda40 	.word	0x387fda40
 80021dc:	38ffda40 	.word	0x38ffda40
 80021e0:	397fda40 	.word	0x397fda40
 80021e4:	39fff518 	.word	0x39fff518

080021e8 <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 80021f4:	211a      	movs	r1, #26
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fef5 	bl	8001fe6 <mpu_read_reg>
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	f023 0307 	bic.w	r3, r3, #7
 8002206:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 8002208:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	b25a      	sxtb	r2, r3
 8002212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002216:	4313      	orrs	r3, r2
 8002218:	b25b      	sxtb	r3, r3
 800221a:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	461a      	mov	r2, r3
 8002220:	211a      	movs	r1, #26
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fec2 	bl	8001fac <mpu_write_reg>
}
 8002228:	bf00      	nop
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8002238:	2175      	movs	r1, #117	; 0x75
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fed3 	bl	8001fe6 <mpu_read_reg>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b68      	cmp	r3, #104	; 0x68
 8002248:	d101      	bne.n	800224e <mpu_who_am_i+0x1e>
		return HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	e000      	b.n	8002250 <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
	}
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b096      	sub	sp, #88	; 0x58
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	4613      	mov	r3, r2
 8002264:	71fb      	strb	r3, [r7, #7]
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	617b      	str	r3, [r7, #20]
	mpu.i2c_address = i2c_address;
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	763b      	strb	r3, [r7, #24]


	mpu_reset(&mpu, 1);
 800226e:	f107 0314 	add.w	r3, r7, #20
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fed3 	bl	8002020 <mpu_reset>

	HAL_Delay(1000);
 800227a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800227e:	f001 fbbf 	bl	8003a00 <HAL_Delay>

	mpu_sleep_mode(&mpu, 0);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff feeb 	bl	8002064 <mpu_sleep_mode>

	set_gyro_scale(&mpu, range_250);
 800228e:	f107 0314 	add.w	r3, r7, #20
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff0b 	bl	80020b0 <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff53 	bl	800214c <set_accelerometer_scale>

	mpu.gx_bias = 0;
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
	mpu.gy_bias = 0;
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
	mpu.gz_bias = 0;
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	mpu.lst_time_x_angle = HAL_GetTick();
 80022b8:	f001 fb98 	bl	80039ec <HAL_GetTick>
 80022bc:	4603      	mov	r3, r0
 80022be:	653b      	str	r3, [r7, #80]	; 0x50
	mpu.lst_time_y_angle = HAL_GetTick();
 80022c0:	f001 fb94 	bl	80039ec <HAL_GetTick>
 80022c4:	4603      	mov	r3, r0
 80022c6:	657b      	str	r3, [r7, #84]	; 0x54


	return mpu;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2244      	movs	r2, #68	; 0x44
 80022d2:	4619      	mov	r1, r3
 80022d4:	f006 fd5a 	bl	8008d8c <memcpy>
}
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	3758      	adds	r7, #88	; 0x58
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <mpu_get_data>:



void mpu_get_data(mpu6050_typedef *mpu)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af04      	add	r7, sp, #16
 80022e6:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	791b      	ldrb	r3, [r3, #4]
 80022f0:	b299      	uxth	r1, r3
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	9302      	str	r3, [sp, #8]
 80022f8:	230e      	movs	r3, #14
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	f107 0308 	add.w	r3, r7, #8
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2301      	movs	r3, #1
 8002304:	223b      	movs	r2, #59	; 0x3b
 8002306:	f002 fb29 	bl	800495c <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 800230a:	7a3b      	ldrb	r3, [r7, #8]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	b21a      	sxth	r2, r3
 8002310:	7a7b      	ldrb	r3, [r7, #9]
 8002312:	b21b      	sxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	b21b      	sxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fce9 	bl	8000cf0 <__aeabi_i2f>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f7fe fd36 	bl	8000d98 <__aeabi_fmul>
 800232c:	4603      	mov	r3, r0
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 8002334:	7abb      	ldrb	r3, [r7, #10]
 8002336:	021b      	lsls	r3, r3, #8
 8002338:	b21a      	sxth	r2, r3
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	b21b      	sxth	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	b21b      	sxth	r3, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fcd4 	bl	8000cf0 <__aeabi_i2f>
 8002348:	4602      	mov	r2, r0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7fe fd21 	bl	8000d98 <__aeabi_fmul>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 800235e:	7b3b      	ldrb	r3, [r7, #12]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	b21a      	sxth	r2, r3
 8002364:	7b7b      	ldrb	r3, [r7, #13]
 8002366:	b21b      	sxth	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b21b      	sxth	r3, r3
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fcbf 	bl	8000cf0 <__aeabi_i2f>
 8002372:	4602      	mov	r2, r0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f7fe fd0c 	bl	8000d98 <__aeabi_fmul>
 8002380:	4603      	mov	r3, r0
 8002382:	461a      	mov	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	625a      	str	r2, [r3, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 8002388:	7c3b      	ldrb	r3, [r7, #16]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	b21a      	sxth	r2, r3
 800238e:	7c7b      	ldrb	r3, [r7, #17]
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21b      	sxth	r3, r3
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fcaa 	bl	8000cf0 <__aeabi_i2f>
 800239c:	4602      	mov	r2, r0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f7fe fcf7 	bl	8000d98 <__aeabi_fmul>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f7fe fbe5 	bl	8000b84 <__aeabi_fsub>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 80023c2:	7cbb      	ldrb	r3, [r7, #18]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	b21b      	sxth	r3, r3
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fc8d 	bl	8000cf0 <__aeabi_i2f>
 80023d6:	4602      	mov	r2, r0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7fe fcda 	bl	8000d98 <__aeabi_fmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f7fe fbc8 	bl	8000b84 <__aeabi_fsub>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 80023fc:	7d3b      	ldrb	r3, [r7, #20]
 80023fe:	021b      	lsls	r3, r3, #8
 8002400:	b21a      	sxth	r2, r3
 8002402:	7d7b      	ldrb	r3, [r7, #21]
 8002404:	b21b      	sxth	r3, r3
 8002406:	4313      	orrs	r3, r2
 8002408:	b21b      	sxth	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fc70 	bl	8000cf0 <__aeabi_i2f>
 8002410:	4602      	mov	r2, r0
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7fe fcbd 	bl	8000d98 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f7fe fbab 	bl	8000b84 <__aeabi_fsub>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
	...

08002440 <mpu_gyro_calibration>:


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b089      	sub	sp, #36	; 0x24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002448:	2200      	movs	r2, #0
 800244a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800244e:	485e      	ldr	r0, [pc, #376]	; (80025c8 <mpu_gyro_calibration+0x188>)
 8002450:	f002 f82e 	bl	80044b0 <HAL_GPIO_WritePin>
	uint8_t counter = 100;
 8002454:	2364      	movs	r3, #100	; 0x64
 8002456:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	e060      	b.n	8002532 <mpu_gyro_calibration+0xf2>
	{
		mpu_get_data(mpu);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff35 	bl	80022e0 <mpu_get_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800247e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fe44 	bl	8001110 <__aeabi_fcmpgt>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d117      	bne.n	80024be <mpu_gyro_calibration+0x7e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002496:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fe38 	bl	8001110 <__aeabi_fcmpgt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10b      	bne.n	80024be <mpu_gyro_calibration+0x7e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024ae:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fe2c 	bl	8001110 <__aeabi_fcmpgt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01b      	beq.n	80024f6 <mpu_gyro_calibration+0xb6>
			i = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
			gx_sum = 0;
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
			gy_sum = 0;
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
			gz_sum = 0;
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80024d4:	2201      	movs	r2, #1
 80024d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024da:	483b      	ldr	r0, [pc, #236]	; (80025c8 <mpu_gyro_calibration+0x188>)
 80024dc:	f001 ffe8 	bl	80044b0 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80024e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024e4:	f001 fa8c 	bl	8003a00 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80024e8:	2200      	movs	r2, #0
 80024ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ee:	4836      	ldr	r0, [pc, #216]	; (80025c8 <mpu_gyro_calibration+0x188>)
 80024f0:	f001 ffde 	bl	80044b0 <HAL_GPIO_WritePin>
			continue;
 80024f4:	e01a      	b.n	800252c <mpu_gyro_calibration+0xec>
		}

		gx_sum += mpu->gx;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	4619      	mov	r1, r3
 80024fc:	69f8      	ldr	r0, [r7, #28]
 80024fe:	f7fe fb43 	bl	8000b88 <__addsf3>
 8002502:	4603      	mov	r3, r0
 8002504:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	69b8      	ldr	r0, [r7, #24]
 800250e:	f7fe fb3b 	bl	8000b88 <__addsf3>
 8002512:	4603      	mov	r3, r0
 8002514:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4619      	mov	r1, r3
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f7fe fb33 	bl	8000b88 <__addsf3>
 8002522:	4603      	mov	r3, r0
 8002524:	617b      	str	r3, [r7, #20]

		HAL_Delay(4);
 8002526:	2004      	movs	r0, #4
 8002528:	f001 fa6a 	bl	8003a00 <HAL_Delay>
	for(int i = 0; i < counter; i++)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	3301      	adds	r3, #1
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	429a      	cmp	r2, r3
 8002538:	db9a      	blt.n	8002470 <mpu_gyro_calibration+0x30>
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691c      	ldr	r4, [r3, #16]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fbd5 	bl	8000cf0 <__aeabi_i2f>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	69f8      	ldr	r0, [r7, #28]
 800254c:	f7fe fcd8 	bl	8000f00 <__aeabi_fdiv>
 8002550:	4603      	mov	r3, r0
 8002552:	4619      	mov	r1, r3
 8002554:	4620      	mov	r0, r4
 8002556:	f7fe fb17 	bl	8000b88 <__addsf3>
 800255a:	4603      	mov	r3, r0
 800255c:	461a      	mov	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695c      	ldr	r4, [r3, #20]
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe fbc1 	bl	8000cf0 <__aeabi_i2f>
 800256e:	4603      	mov	r3, r0
 8002570:	4619      	mov	r1, r3
 8002572:	69b8      	ldr	r0, [r7, #24]
 8002574:	f7fe fcc4 	bl	8000f00 <__aeabi_fdiv>
 8002578:	4603      	mov	r3, r0
 800257a:	4619      	mov	r1, r3
 800257c:	4620      	mov	r0, r4
 800257e:	f7fe fb03 	bl	8000b88 <__addsf3>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699c      	ldr	r4, [r3, #24]
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fbad 	bl	8000cf0 <__aeabi_i2f>
 8002596:	4603      	mov	r3, r0
 8002598:	4619      	mov	r1, r3
 800259a:	6978      	ldr	r0, [r7, #20]
 800259c:	f7fe fcb0 	bl	8000f00 <__aeabi_fdiv>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4619      	mov	r1, r3
 80025a4:	4620      	mov	r0, r4
 80025a6:	f7fe faef 	bl	8000b88 <__addsf3>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80025b2:	2201      	movs	r2, #1
 80025b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <mpu_gyro_calibration+0x188>)
 80025ba:	f001 ff79 	bl	80044b0 <HAL_GPIO_WritePin>
}
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd90      	pop	{r4, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40011000 	.word	0x40011000
 80025cc:	00000000 	.word	0x00000000

080025d0 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ax, mpu->az) + M_PI/2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ff2d 	bl	800043c <__aeabi_f2d>
 80025e2:	4604      	mov	r4, r0
 80025e4:	460d      	mov	r5, r1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff26 	bl	800043c <__aeabi_f2d>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4620      	mov	r0, r4
 80025f6:	4629      	mov	r1, r5
 80025f8:	f008 fb90 	bl	800ad1c <atan2>
 80025fc:	a308      	add	r3, pc, #32	; (adr r3, 8002620 <mpu_get_acc_x_angle+0x50>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fd fdbd 	bl	8000180 <__adddf3>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fa65 	bl	8000adc <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bdb0      	pop	{r4, r5, r7, pc}
 800261c:	f3af 8000 	nop.w
 8002620:	54442d18 	.word	0x54442d18
 8002624:	3ff921fb 	.word	0x3ff921fb

08002628 <mpu_calc_x_angle>:

}


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8002628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
	mpu_get_data(mpu);
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f7ff fe54 	bl	80022e0 <mpu_get_data>
	float delta = (HAL_GetTick() - mpu->lst_time_x_angle) / 1000.0;
 8002638:	f001 f9d8 	bl	80039ec <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd fed7 	bl	80003f8 <__aeabi_ui2d>
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	4b46      	ldr	r3, [pc, #280]	; (8002768 <mpu_calc_x_angle+0x140>)
 8002650:	f7fe f876 	bl	8000740 <__aeabi_ddiv>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fa3e 	bl	8000adc <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	617b      	str	r3, [r7, #20]
	mpu->lst_time_x_angle = HAL_GetTick();
 8002664:	f001 f9c2 	bl	80039ec <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	63da      	str	r2, [r3, #60]	; 0x3c
	if(delta > 0.01)
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7fd fee4 	bl	800043c <__aeabi_f2d>
 8002674:	a338      	add	r3, pc, #224	; (adr r3, 8002758 <mpu_calc_x_angle+0x130>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fe f9c7 	bl	8000a0c <__aeabi_dcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <mpu_calc_x_angle+0x74>
	{
		mpu->x_angle = mpu_get_acc_x_angle(mpu);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff ffa3 	bl	80025d0 <mpu_get_acc_x_angle>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	635a      	str	r2, [r3, #52]	; 0x34
		mpu->lst_time_x_angle = HAL_GetTick();
 8002690:	f001 f9ac 	bl	80039ec <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		//complementary filter
		float alpha = 0.001;
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
	}
}
 800269a:	e055      	b.n	8002748 <mpu_calc_x_angle+0x120>
		float alpha = 0.001;
 800269c:	4b33      	ldr	r3, [pc, #204]	; (800276c <mpu_calc_x_angle+0x144>)
 800269e:	613b      	str	r3, [r7, #16]
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff ff95 	bl	80025d0 <mpu_get_acc_x_angle>
 80026a6:	4603      	mov	r3, r0
 80026a8:	6939      	ldr	r1, [r7, #16]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fb74 	bl	8000d98 <__aeabi_fmul>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fd fec2 	bl	800043c <__aeabi_f2d>
 80026b8:	4604      	mov	r4, r0
 80026ba:	460d      	mov	r5, r1
 80026bc:	6939      	ldr	r1, [r7, #16]
 80026be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80026c2:	f7fe fa5f 	bl	8000b84 <__aeabi_fsub>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd feb7 	bl	800043c <__aeabi_f2d>
 80026ce:	4680      	mov	r8, r0
 80026d0:	4689      	mov	r9, r1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd feb0 	bl	800043c <__aeabi_f2d>
 80026dc:	4682      	mov	sl, r0
 80026de:	468b      	mov	fp, r1
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd fea7 	bl	800043c <__aeabi_f2d>
 80026ee:	a31c      	add	r3, pc, #112	; (adr r3, 8002760 <mpu_calc_x_angle+0x138>)
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f7fd fefa 	bl	80004ec <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	e9c7 2300 	strd	r2, r3, [r7]
 8002700:	6978      	ldr	r0, [r7, #20]
 8002702:	f7fd fe9b 	bl	800043c <__aeabi_f2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800270e:	f7fd feed 	bl	80004ec <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4650      	mov	r0, sl
 8002718:	4659      	mov	r1, fp
 800271a:	f7fd fd31 	bl	8000180 <__adddf3>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4640      	mov	r0, r8
 8002724:	4649      	mov	r1, r9
 8002726:	f7fd fee1 	bl	80004ec <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	f7fd fd25 	bl	8000180 <__adddf3>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f7fe f9cd 	bl	8000adc <__aeabi_d2f>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002752:	bf00      	nop
 8002754:	f3af 8000 	nop.w
 8002758:	47ae147b 	.word	0x47ae147b
 800275c:	3f847ae1 	.word	0x3f847ae1
 8002760:	22d4405f 	.word	0x22d4405f
 8002764:	3f91df47 	.word	0x3f91df47
 8002768:	408f4000 	.word	0x408f4000
 800276c:	3a83126f 	.word	0x3a83126f

08002770 <pid_init>:
#include "pid_lib.h"




pid_typedef pid_init(float kp, float ki, float kd){
 8002770:	b4b0      	push	{r4, r5, r7}
 8002772:	b08d      	sub	sp, #52	; 0x34
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
	pid_typedef pid = {kp, ki, kd, 0, 0, 0, 0, 1};
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	61bb      	str	r3, [r7, #24]
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	return pid;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	461d      	mov	r5, r3
 80027ac:	f107 0410 	add.w	r4, r7, #16
 80027b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027b4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	3734      	adds	r7, #52	; 0x34
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bcb0      	pop	{r4, r5, r7}
 80027c4:	4770      	bx	lr

080027c6 <pid_reset>:


void pid_reset(pid_typedef* pid){
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	pid->i = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
	pid->prev_measurement = 0;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <pid_step>:


void pid_step(pid_typedef* pid){
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	pid->prev_error = pid->error;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	615a      	str	r2, [r3, #20]
	pid->prev_measurement = pid->measurement;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699a      	ldr	r2, [r3, #24]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	61da      	str	r2, [r3, #28]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <set_dir>:


extern volatile uint8_t spin_duration_ms;


static void set_dir(stepper_typedef *stepper, int8_t dir){
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	460b      	mov	r3, r1
 800281c:	70fb      	strb	r3, [r7, #3]
	if(stepper->dir_polarity * dir == 1){
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002824:	b25b      	sxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d110      	bne.n	8002856 <set_dir+0x44>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6918      	ldr	r0, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8a9b      	ldrh	r3, [r3, #20]
 800283c:	b29b      	uxth	r3, r3
 800283e:	2201      	movs	r2, #1
 8002840:	4619      	mov	r1, r3
 8002842:	f001 fe35 	bl	80044b0 <HAL_GPIO_WritePin>
		stepper->dir = stepper->dir_polarity;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800284c:	b25a      	sxtb	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -stepper->dir_polarity;
	}
}
 8002854:	e013      	b.n	800287e <set_dir+0x6c>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6918      	ldr	r0, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	8a9b      	ldrh	r3, [r3, #20]
 800285e:	b29b      	uxth	r3, r3
 8002860:	2200      	movs	r2, #0
 8002862:	4619      	mov	r1, r3
 8002864:	f001 fe24 	bl	80044b0 <HAL_GPIO_WritePin>
		stepper->dir = -stepper->dir_polarity;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800286e:	b25b      	sxtb	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	425b      	negs	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	b25a      	sxtb	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <stepper_init>:


//dir pin polarity : 1 or -1
void stepper_init(stepper_typedef *stepper, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *EN_Port, uint16_t EN_Pin,
		GPIO_TypeDef *DIR_Port, uint16_t DIR_Pin, unsigned int max_speed, int8_t dir_polarity)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
	stepper->htim = htim;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	601a      	str	r2, [r3, #0]
	stepper->Channel = Channel;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	605a      	str	r2, [r3, #4]

	stepper->EN_Port = EN_Port;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	609a      	str	r2, [r3, #8]
	stepper->EN_Pin = EN_Pin;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8b3a      	ldrh	r2, [r7, #24]
 80028aa:	819a      	strh	r2, [r3, #12]
	stepper->DIR_Port = DIR_Port;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	611a      	str	r2, [r3, #16]
	stepper->DIR_Pin = DIR_Pin;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8c3a      	ldrh	r2, [r7, #32]
 80028b6:	829a      	strh	r2, [r3, #20]

	stepper->step_counter = 0;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	619a      	str	r2, [r3, #24]
	stepper->on_off = 0;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
	stepper-> new_counter = 65000;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 80028ca:	621a      	str	r2, [r3, #32]

	stepper->dir_polarity = dir_polarity;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80028d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	stepper->max_speed = max_speed;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	82da      	strh	r2, [r3, #22]

	set_dir(stepper, 1);
 80028de:	2101      	movs	r1, #1
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff ff96 	bl	8002812 <set_dir>
	stepper_enable(stepper, 0);
 80028e6:	2100      	movs	r1, #0
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f814 	bl	8002916 <stepper_enable>
	stepper_set_speed(stepper, 0);
 80028ee:	f04f 0100 	mov.w	r1, #0
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 f844 	bl	8002980 <stepper_set_speed>
	stepper->speed = 0;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24


	// start timer
	HAL_TIM_Base_Start_IT(htim);
 8002900:	68b8      	ldr	r0, [r7, #8]
 8002902:	f003 fab3 	bl	8005e6c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	f003 fb59 	bl	8005fc0 <HAL_TIM_PWM_Start>
}
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <stepper_enable>:



void stepper_enable(stepper_typedef *stepper, bool en)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]
	if(en){
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <stepper_enable+0x2e>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6898      	ldr	r0, [r3, #8]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	899b      	ldrh	r3, [r3, #12]
 8002930:	b29b      	uxth	r3, r3
 8002932:	2200      	movs	r2, #0
 8002934:	4619      	mov	r1, r3
 8002936:	f001 fdbb 	bl	80044b0 <HAL_GPIO_WritePin>
		stepper->enable = 1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		stepper_set_speed(stepper, 0);
		stepper->enable = 0;
		stepper->on_off = 0;
		stepper->speed = 0;
	}
}
 8002942:	e018      	b.n	8002976 <stepper_enable+0x60>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6898      	ldr	r0, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	899b      	ldrh	r3, [r3, #12]
 800294c:	b29b      	uxth	r3, r3
 800294e:	2201      	movs	r2, #1
 8002950:	4619      	mov	r1, r3
 8002952:	f001 fdad 	bl	80044b0 <HAL_GPIO_WritePin>
		stepper_set_speed(stepper, 0);
 8002956:	f04f 0100 	mov.w	r1, #0
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f810 	bl	8002980 <stepper_set_speed>
		stepper->enable = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		stepper->on_off = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	771a      	strb	r2, [r3, #28]
		stepper->speed = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <stepper_set_speed>:



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
	saturation(-100, 100, &speed);
 800298a:	463b      	mov	r3, r7
 800298c:	461a      	mov	r2, r3
 800298e:	497e      	ldr	r1, [pc, #504]	; (8002b88 <stepper_set_speed+0x208>)
 8002990:	487e      	ldr	r0, [pc, #504]	; (8002b8c <stepper_set_speed+0x20c>)
 8002992:	f7fe fca7 	bl	80012e4 <saturation>

	stepper->speed = speed;
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

	if(speed == 0){
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	f04f 0100 	mov.w	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fb8c 	bl	80010c0 <__aeabi_fcmpeq>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d031      	beq.n	8002a12 <stepper_set_speed+0x92>
		stepper->on_off = 0;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <stepper_set_speed+0x48>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2200      	movs	r2, #0
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34
 80029c6:	e018      	b.n	80029fa <stepper_set_speed+0x7a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d105      	bne.n	80029dc <stepper_set_speed+0x5c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2300      	movs	r3, #0
 80029d8:	6393      	str	r3, [r2, #56]	; 0x38
 80029da:	e00e      	b.n	80029fa <stepper_set_speed+0x7a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d105      	bne.n	80029f0 <stepper_set_speed+0x70>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80029ee:	e004      	b.n	80029fa <stepper_set_speed+0x7a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	2300      	movs	r3, #0
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a0e:	60da      	str	r2, [r3, #12]
		if(speed > 0) set_dir(stepper, 1);
		else set_dir(stepper, -1);

	}

}
 8002a10:	e0b2      	b.n	8002b78 <stepper_set_speed+0x1f8>
		stepper->on_off = 1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]
		speed = stepper->max_speed * (speed / 100.0);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8adb      	ldrh	r3, [r3, #22]
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fd fcfa 	bl	8000418 <__aeabi_i2d>
 8002a24:	4604      	mov	r4, r0
 8002a26:	460d      	mov	r5, r1
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd06 	bl	800043c <__aeabi_f2d>
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	4b56      	ldr	r3, [pc, #344]	; (8002b90 <stepper_set_speed+0x210>)
 8002a36:	f7fd fe83 	bl	8000740 <__aeabi_ddiv>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4620      	mov	r0, r4
 8002a40:	4629      	mov	r1, r5
 8002a42:	f7fd fd53 	bl	80004ec <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f7fe f845 	bl	8000adc <__aeabi_d2f>
 8002a52:	4603      	mov	r3, r0
 8002a54:	603b      	str	r3, [r7, #0]
		if(speed > stepper->max_speed) speed = stepper->max_speed;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8adb      	ldrh	r3, [r3, #22]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f947 	bl	8000cf0 <__aeabi_i2f>
 8002a62:	4602      	mov	r2, r0
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	4619      	mov	r1, r3
 8002a68:	4610      	mov	r0, r2
 8002a6a:	f7fe fb33 	bl	80010d4 <__aeabi_fcmplt>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <stepper_set_speed+0x104>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8adb      	ldrh	r3, [r3, #22]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f934 	bl	8000ce8 <__aeabi_ui2f>
 8002a80:	4603      	mov	r3, r0
 8002a82:	603b      	str	r3, [r7, #0]
		if(speed < -stepper->max_speed) speed = -stepper->max_speed;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8adb      	ldrh	r3, [r3, #22]
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe f92f 	bl	8000cf0 <__aeabi_i2f>
 8002a92:	4602      	mov	r2, r0
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7fe fb39 	bl	8001110 <__aeabi_fcmpgt>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <stepper_set_speed+0x136>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8adb      	ldrh	r3, [r3, #22]
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	425b      	negs	r3, r3
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe f91f 	bl	8000cf0 <__aeabi_i2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	603b      	str	r3, [r7, #0]
		if(speed > 0 && speed < 16) speed = 16;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe fb27 	bl	8001110 <__aeabi_fcmpgt>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <stepper_set_speed+0x160>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fb00 	bl	80010d4 <__aeabi_fcmplt>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <stepper_set_speed+0x160>
 8002ada:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002ade:	603b      	str	r3, [r7, #0]
		if(speed < 0 && speed >-16) speed = -16;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	f04f 0100 	mov.w	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe faf4 	bl	80010d4 <__aeabi_fcmplt>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <stepper_set_speed+0x186>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	4927      	ldr	r1, [pc, #156]	; (8002b94 <stepper_set_speed+0x214>)
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe fb0a 	bl	8001110 <__aeabi_fcmpgt>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <stepper_set_speed+0x186>
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <stepper_set_speed+0x214>)
 8002b04:	603b      	str	r3, [r7, #0]
		uint16_t counter = (1.0/abs(speed)) * SEC2uSEC;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fe fb0b 	bl	8001124 <__aeabi_f2iz>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	bfb8      	it	lt
 8002b14:	425b      	neglt	r3, r3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fc7e 	bl	8000418 <__aeabi_i2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	f04f 0000 	mov.w	r0, #0
 8002b24:	491c      	ldr	r1, [pc, #112]	; (8002b98 <stepper_set_speed+0x218>)
 8002b26:	f7fd fe0b 	bl	8000740 <__aeabi_ddiv>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	a313      	add	r3, pc, #76	; (adr r3, 8002b80 <stepper_set_speed+0x200>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f7fd fcd8 	bl	80004ec <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f7fd ffaa 	bl	8000a9c <__aeabi_d2uiz>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	81fb      	strh	r3, [r7, #14]
		stepper->new_counter = counter;
 8002b4c:	89fa      	ldrh	r2, [r7, #14]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	621a      	str	r2, [r3, #32]
		if(speed > 0) set_dir(stepper, 1);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7fe fad9 	bl	8001110 <__aeabi_fcmpgt>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <stepper_set_speed+0x1ee>
 8002b64:	2101      	movs	r1, #1
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fe53 	bl	8002812 <set_dir>
}
 8002b6c:	e004      	b.n	8002b78 <stepper_set_speed+0x1f8>
		else set_dir(stepper, -1);
 8002b6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fe4d 	bl	8002812 <set_dir>
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b80:	00000000 	.word	0x00000000
 8002b84:	412e8480 	.word	0x412e8480
 8002b88:	42c80000 	.word	0x42c80000
 8002b8c:	c2c80000 	.word	0xc2c80000
 8002b90:	40590000 	.word	0x40590000
 8002b94:	c1800000 	.word	0xc1800000
 8002b98:	3ff00000 	.word	0x3ff00000

08002b9c <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	if(stepper->on_off){
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7f1b      	ldrb	r3, [r3, #28]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d036      	beq.n	8002c1c <stepper_update+0x80>
		stepper->step_counter += stepper->dir;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bb4:	b25a      	sxtb	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	441a      	add	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]

		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1a      	ldr	r2, [r3, #32]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <stepper_update+0x4e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2264      	movs	r2, #100	; 0x64
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002be8:	e018      	b.n	8002c1c <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d105      	bne.n	8002bfe <stepper_update+0x62>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2364      	movs	r3, #100	; 0x64
 8002bfa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002bfc:	e00e      	b.n	8002c1c <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d105      	bne.n	8002c12 <stepper_update+0x76>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2364      	movs	r3, #100	; 0x64
 8002c0e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002c10:	e004      	b.n	8002c1c <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	2364      	movs	r3, #100	; 0x64
 8002c1a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c2e:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6193      	str	r3, [r2, #24]
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4a0e      	ldr	r2, [pc, #56]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	61d3      	str	r3, [r2, #28]
 8002c52:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <HAL_MspInit+0x5c>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_MspInit+0x60>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <HAL_MspInit+0x60>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c90:	e7fe      	b.n	8002c90 <NMI_Handler+0x4>

08002c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c96:	e7fe      	b.n	8002c96 <HardFault_Handler+0x4>

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <MemManage_Handler+0x4>

08002c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <BusFault_Handler+0x4>

08002ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <UsageFault_Handler+0x4>

08002caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd2:	f000 fe79 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ce0:	4802      	ldr	r0, [pc, #8]	; (8002cec <DMA1_Channel4_IRQHandler+0x10>)
 8002ce2:	f001 f92d 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	200006ac 	.word	0x200006ac

08002cf0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cf4:	4802      	ldr	r0, [pc, #8]	; (8002d00 <DMA1_Channel5_IRQHandler+0x10>)
 8002cf6:	f001 f923 	bl	8003f40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000668 	.word	0x20000668

08002d04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d08:	4802      	ldr	r0, [pc, #8]	; (8002d14 <TIM2_IRQHandler+0x10>)
 8002d0a:	f003 f9fb 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000590 	.word	0x20000590

08002d18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d1c:	4802      	ldr	r0, [pc, #8]	; (8002d28 <TIM3_IRQHandler+0x10>)
 8002d1e:	f003 f9f1 	bl	8006104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200005d8 	.word	0x200005d8

08002d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d30:	4802      	ldr	r0, [pc, #8]	; (8002d3c <USART1_IRQHandler+0x10>)
 8002d32:	f004 f94b 	bl	8006fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000620 	.word	0x20000620

08002d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return 1;
 8002d44:	2301      	movs	r3, #1
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <_kill>:

int _kill(int pid, int sig)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d58:	f005 ffde 	bl	8008d18 <__errno>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2216      	movs	r2, #22
 8002d60:	601a      	str	r2, [r3, #0]
  return -1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <_exit>:

void _exit (int status)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d76:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ffe7 	bl	8002d4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d80:	e7fe      	b.n	8002d80 <_exit+0x12>

08002d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e00a      	b.n	8002daa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d94:	f3af 8000 	nop.w
 8002d98:	4601      	mov	r1, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	60ba      	str	r2, [r7, #8]
 8002da0:	b2ca      	uxtb	r2, r1
 8002da2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	3301      	adds	r3, #1
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	dbf0      	blt.n	8002d94 <_read+0x12>
  }

  return len;
 8002db2:	687b      	ldr	r3, [r7, #4]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e009      	b.n	8002de2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	60ba      	str	r2, [r7, #8]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe fbcc 	bl	8001574 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbf1      	blt.n	8002dce <_write+0x12>
  }
  return len;
 8002dea:	687b      	ldr	r3, [r7, #4]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_close>:

int _close(int file)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e1a:	605a      	str	r2, [r3, #4]
  return 0;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <_isatty>:

int _isatty(int file)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr

08002e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b086      	sub	sp, #24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e5c:	4a14      	ldr	r2, [pc, #80]	; (8002eb0 <_sbrk+0x5c>)
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <_sbrk+0x60>)
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <_sbrk+0x64>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d102      	bne.n	8002e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <_sbrk+0x64>)
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <_sbrk+0x68>)
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d207      	bcs.n	8002e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e84:	f005 ff48 	bl	8008d18 <__errno>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	220c      	movs	r2, #12
 8002e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	e009      	b.n	8002ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <_sbrk+0x64>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <_sbrk+0x64>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <_sbrk+0x64>)
 8002ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3718      	adds	r7, #24
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20005000 	.word	0x20005000
 8002eb4:	00000400 	.word	0x00000400
 8002eb8:	2000058c 	.word	0x2000058c
 8002ebc:	20000840 	.word	0x20000840

08002ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bc80      	pop	{r7}
 8002eca:	4770      	bx	lr

08002ecc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	; 0x38
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]
 8002ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ee0:	f107 0320 	add.w	r3, r7, #32
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	1d3b      	adds	r3, r7, #4
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	611a      	str	r2, [r3, #16]
 8002ef8:	615a      	str	r2, [r3, #20]
 8002efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002efc:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002f04:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f06:	2247      	movs	r2, #71	; 0x47
 8002f08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f1e:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f24:	4823      	ldr	r0, [pc, #140]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f26:	f002 ff51 	bl	8005dcc <HAL_TIM_Base_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002f30:	f7ff f820 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481c      	ldr	r0, [pc, #112]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f42:	f003 fa91 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002f4c:	f7ff f812 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f50:	4818      	ldr	r0, [pc, #96]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f52:	f002 ffdd 	bl	8005f10 <HAL_TIM_PWM_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002f5c:	f7ff f80a 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f68:	f107 0320 	add.w	r3, r7, #32
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4811      	ldr	r0, [pc, #68]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f70:	f003 fe16 	bl	8006ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002f7a:	f7fe fffb 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f7e:	2360      	movs	r3, #96	; 0x60
 8002f80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2200      	movs	r2, #0
 8002f92:	4619      	mov	r1, r3
 8002f94:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002f96:	f003 f9a5 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002fa0:	f7fe ffe8 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002fa4:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <MX_TIM2_Init+0xe8>)
 8002fa6:	f000 f8bd 	bl	8003124 <HAL_TIM_MspPostInit>

}
 8002faa:	bf00      	nop
 8002fac:	3738      	adds	r7, #56	; 0x38
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000590 	.word	0x20000590

08002fb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08e      	sub	sp, #56	; 0x38
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fcc:	f107 0320 	add.w	r3, r7, #32
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
 8002fe4:	615a      	str	r2, [r3, #20]
 8002fe6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	; (800309c <MX_TIM3_Init+0xe4>)
 8002fea:	4a2d      	ldr	r2, [pc, #180]	; (80030a0 <MX_TIM3_Init+0xe8>)
 8002fec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002fee:	4b2b      	ldr	r3, [pc, #172]	; (800309c <MX_TIM3_Init+0xe4>)
 8002ff0:	2247      	movs	r2, #71	; 0x47
 8002ff2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ff4:	4b29      	ldr	r3, [pc, #164]	; (800309c <MX_TIM3_Init+0xe4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <MX_TIM3_Init+0xe4>)
 8002ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003000:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003002:	4b26      	ldr	r3, [pc, #152]	; (800309c <MX_TIM3_Init+0xe4>)
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003008:	4b24      	ldr	r3, [pc, #144]	; (800309c <MX_TIM3_Init+0xe4>)
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800300e:	4823      	ldr	r0, [pc, #140]	; (800309c <MX_TIM3_Init+0xe4>)
 8003010:	f002 fedc 	bl	8005dcc <HAL_TIM_Base_Init>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800301a:	f7fe ffab 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800301e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003028:	4619      	mov	r1, r3
 800302a:	481c      	ldr	r0, [pc, #112]	; (800309c <MX_TIM3_Init+0xe4>)
 800302c:	f003 fa1c 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003036:	f7fe ff9d 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800303a:	4818      	ldr	r0, [pc, #96]	; (800309c <MX_TIM3_Init+0xe4>)
 800303c:	f002 ff68 	bl	8005f10 <HAL_TIM_PWM_Init>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003046:	f7fe ff95 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003052:	f107 0320 	add.w	r3, r7, #32
 8003056:	4619      	mov	r1, r3
 8003058:	4810      	ldr	r0, [pc, #64]	; (800309c <MX_TIM3_Init+0xe4>)
 800305a:	f003 fda1 	bl	8006ba0 <HAL_TIMEx_MasterConfigSynchronization>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8003064:	f7fe ff86 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003068:	2360      	movs	r3, #96	; 0x60
 800306a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	2200      	movs	r2, #0
 800307c:	4619      	mov	r1, r3
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <MX_TIM3_Init+0xe4>)
 8003080:	f003 f930 	bl	80062e4 <HAL_TIM_PWM_ConfigChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800308a:	f7fe ff73 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800308e:	4803      	ldr	r0, [pc, #12]	; (800309c <MX_TIM3_Init+0xe4>)
 8003090:	f000 f848 	bl	8003124 <HAL_TIM_MspPostInit>

}
 8003094:	bf00      	nop
 8003096:	3738      	adds	r7, #56	; 0x38
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	200005d8 	.word	0x200005d8
 80030a0:	40000400 	.word	0x40000400

080030a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b4:	d114      	bne.n	80030e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030b6:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_TIM_Base_MspInit+0x78>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_TIM_Base_MspInit+0x78>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	61d3      	str	r3, [r2, #28]
 80030c2:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_TIM_Base_MspInit+0x78>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2100      	movs	r1, #0
 80030d2:	201c      	movs	r0, #28
 80030d4:	f000 fd8f 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030d8:	201c      	movs	r0, #28
 80030da:	f000 fda8 	bl	8003c2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80030de:	e018      	b.n	8003112 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_TIM_Base_MspInit+0x7c>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d113      	bne.n	8003112 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_TIM_Base_MspInit+0x78>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <HAL_TIM_Base_MspInit+0x78>)
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	61d3      	str	r3, [r2, #28]
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_TIM_Base_MspInit+0x78>)
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	201d      	movs	r0, #29
 8003108:	f000 fd75 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800310c:	201d      	movs	r0, #29
 800310e:	f000 fd8e 	bl	8003c2e <HAL_NVIC_EnableIRQ>
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	40000400 	.word	0x40000400

08003124 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b088      	sub	sp, #32
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0310 	add.w	r3, r7, #16
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003142:	d118      	bne.n	8003176 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
 800314a:	f043 0304 	orr.w	r3, r3, #4
 800314e:	6193      	str	r3, [r2, #24]
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 800315c:	2301      	movs	r3, #1
 800315e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003164:	2302      	movs	r3, #2
 8003166:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003168:	f107 0310 	add.w	r3, r7, #16
 800316c:	4619      	mov	r1, r3
 800316e:	4813      	ldr	r0, [pc, #76]	; (80031bc <HAL_TIM_MspPostInit+0x98>)
 8003170:	f001 f81a 	bl	80041a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003174:	e01c      	b.n	80031b0 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <HAL_TIM_MspPostInit+0x9c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d117      	bne.n	80031b0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
 8003186:	f043 0304 	orr.w	r3, r3, #4
 800318a:	6193      	str	r3, [r2, #24]
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_TIM_MspPostInit+0x94>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003198:	2340      	movs	r3, #64	; 0x40
 800319a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319c:	2302      	movs	r3, #2
 800319e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a0:	2302      	movs	r3, #2
 80031a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80031a4:	f107 0310 	add.w	r3, r7, #16
 80031a8:	4619      	mov	r1, r3
 80031aa:	4804      	ldr	r0, [pc, #16]	; (80031bc <HAL_TIM_MspPostInit+0x98>)
 80031ac:	f000 fffc 	bl	80041a8 <HAL_GPIO_Init>
}
 80031b0:	bf00      	nop
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40010800 	.word	0x40010800
 80031c0:	40000400 	.word	0x40000400

080031c4 <uart_interface_init>:
extern uart_interface_typedef uart_interface;



void uart_interface_init(uart_interface_typedef* uart_int, UART_HandleTypeDef *huart, DMA_HandleTypeDef* hdma_usart_rx,
		user_function_typedef* functions_array, uint8_t num_functions){
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]

	__HAL_DMA_DISABLE_IT(hdma_usart_rx, DMA_IT_HT); //disable half transfer DMA interrupt
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0204 	bic.w	r2, r2, #4
 80031e0:	601a      	str	r2, [r3, #0]

	uart_int->huart = huart;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	601a      	str	r2, [r3, #0]
	uart_int->received_command_size = 0;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	uart_int->command_received_flag = 0;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
	uart_int->functions_array = functions_array;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	uart_int->num_functions = num_functions;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	7e3a      	ldrb	r2, [r7, #24]
 8003204:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	uart_int->uart_tx_ready = 1;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	uart_int->queue_empty = 1;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e


}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <start_uart_interface>:


void start_uart_interface(uart_interface_typedef* uart_int){
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_int->huart, uart_int->receive_buffer, BUFFER_SIZE_RX);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2280      	movs	r2, #128	; 0x80
 8003234:	4619      	mov	r1, r3
 8003236:	f003 fe6f 	bl	8006f18 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800323a:	bf00      	nop
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <uart_send>:


void uart_send(uart_interface_typedef* uart_int, uint8_t* buffer, uint16_t size, bool add_to_queue){
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	4611      	mov	r1, r2
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	80fb      	strh	r3, [r7, #6]
 8003254:	4613      	mov	r3, r2
 8003256:	717b      	strb	r3, [r7, #5]
	if(size < BUFFER_SIZE_TX){
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	2bff      	cmp	r3, #255	; 0xff
 800325c:	d833      	bhi.n	80032c6 <uart_send+0x84>
		if(uart_int->uart_tx_ready){
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d013      	beq.n	8003292 <uart_send+0x50>
			uart_int->uart_tx_ready = 0;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
			memcpy(uart_int->transmit_buffer, buffer, size);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3384      	adds	r3, #132	; 0x84
 8003276:	88fa      	ldrh	r2, [r7, #6]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f005 fd86 	bl	8008d8c <memcpy>
			HAL_UART_Transmit_DMA(uart_int->huart, uart_int->transmit_buffer, size);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	3384      	adds	r3, #132	; 0x84
 8003288:	88fa      	ldrh	r2, [r7, #6]
 800328a:	4619      	mov	r1, r3
 800328c:	f003 fdd4 	bl	8006e38 <HAL_UART_Transmit_DMA>
			uart_int->queue_empty = 0;


		}
	}
}
 8003290:	e019      	b.n	80032c6 <uart_send+0x84>
		else if(add_to_queue && uart_int->queue_empty){
 8003292:	797b      	ldrb	r3, [r7, #5]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d016      	beq.n	80032c6 <uart_send+0x84>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <uart_send+0x84>
			memcpy(uart_int->queue, buffer, size);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f203 138d 	addw	r3, r3, #397	; 0x18d
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f005 fd6c 	bl	8008d8c <memcpy>
			uart_int->queue_data_size = size;
 80032b4:	88fb      	ldrh	r3, [r7, #6]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			uart_int->queue_empty = 0;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
}
 80032c6:	bf00      	nop
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_UARTEx_RxEventCallback>:

/*
 * command received interrupt
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == uart_interface.huart->Instance)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <HAL_UARTEx_RxEventCallback+0x34>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d107      	bne.n	80032fa <HAL_UARTEx_RxEventCallback+0x2a>
    {
    	uart_interface.command_received_flag = 1;
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_UARTEx_RxEventCallback+0x34>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    	uart_interface.received_command_size = Size;
 80032f2:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_UARTEx_RxEventCallback+0x34>)
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	f8a2 3184 	strh.w	r3, [r2, #388]	; 0x184

    }
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	200002f4 	.word	0x200002f4

08003308 <HAL_UART_TxCpltCallback>:

/*
 * transnmit completed, if there is element in queue buffer send it, otherwise set uart transmit to ready
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_interface.huart->Instance){
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d129      	bne.n	8003372 <HAL_UART_TxCpltCallback+0x6a>
		if(uart_interface.queue_empty == 0){
 800331e:	4b17      	ldr	r3, [pc, #92]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 8003320:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f083 0301 	eor.w	r3, r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01c      	beq.n	800336a <HAL_UART_TxCpltCallback+0x62>
			memcpy(uart_interface.transmit_buffer, uart_interface.queue, uart_interface.queue_data_size);
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 8003332:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	4911      	ldr	r1, [pc, #68]	; (8003380 <HAL_UART_TxCpltCallback+0x78>)
 800333c:	4811      	ldr	r0, [pc, #68]	; (8003384 <HAL_UART_TxCpltCallback+0x7c>)
 800333e:	f005 fd25 	bl	8008d8c <memcpy>
			HAL_UART_Transmit_DMA(uart_interface.huart, uart_interface.transmit_buffer, uart_interface.queue_data_size);
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0d      	ldr	r2, [pc, #52]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 8003348:	f892 228d 	ldrb.w	r2, [r2, #653]	; 0x28d
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	b292      	uxth	r2, r2
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <HAL_UART_TxCpltCallback+0x7c>)
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fd70 	bl	8006e38 <HAL_UART_Transmit_DMA>
			uart_interface.queue_empty = 1;
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 800335a:	2201      	movs	r2, #1
 800335c:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
			uart_interface.uart_tx_ready = 0;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
		}
		else{
			uart_interface.uart_tx_ready = 1;
		}
	}
}
 8003368:	e003      	b.n	8003372 <HAL_UART_TxCpltCallback+0x6a>
			uart_interface.uart_tx_ready = 1;
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_UART_TxCpltCallback+0x74>)
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	200002f4 	.word	0x200002f4
 8003380:	20000481 	.word	0x20000481
 8003384:	20000378 	.word	0x20000378

08003388 <execute_received_command>:


int8_t execute_received_command(uart_interface_typedef* uart_int){
 8003388:	b580      	push	{r7, lr}
 800338a:	b0a4      	sub	sp, #144	; 0x90
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	if(!uart_int->command_received_flag) return 0;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f083 0301 	eor.w	r3, r3, #1
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <execute_received_command+0x1e>
 80033a2:	2300      	movs	r3, #0
 80033a4:	e12c      	b.n	8003600 <execute_received_command+0x278>

	uart_int->command_received_flag = 0;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
	char function_code[FUNCTION_CODE_MAX_LENGTH];
	char args[MAX_NUM_ARGS][ARG_MAX_LENGTH];


	// parse function code
	uint8_t idx = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80033ba:	e031      	b.n	8003420 <execute_received_command+0x98>
		idx ++;
 80033bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80033c0:	3301      	adds	r3, #1
 80033c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		char elem = uart_int->receive_buffer[i];
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033cc:	4413      	add	r3, r2
 80033ce:	3304      	adds	r3, #4
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		if(elem == '\0' || elem == '\r' || elem == '\n' || elem == '('){
 80033d6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <execute_received_command+0x6e>
 80033de:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80033e2:	2b0d      	cmp	r3, #13
 80033e4:	d007      	beq.n	80033f6 <execute_received_command+0x6e>
 80033e6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80033ea:	2b0a      	cmp	r3, #10
 80033ec:	d003      	beq.n	80033f6 <execute_received_command+0x6e>
 80033ee:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80033f2:	2b28      	cmp	r3, #40	; 0x28
 80033f4:	d107      	bne.n	8003406 <execute_received_command+0x7e>
			function_code[i] = '\0';
 80033f6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80033fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033fe:	4413      	add	r3, r2
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
			break;
 8003404:	e018      	b.n	8003438 <execute_received_command+0xb0>
		}
		else function_code[i] = elem;
 8003406:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800340a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800340e:	4413      	add	r3, r2
 8003410:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8003414:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8003416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800341a:	3301      	adds	r3, #1
 800341c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 8003426:	461a      	mov	r2, r3
 8003428:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800342c:	4293      	cmp	r3, r2
 800342e:	dbc5      	blt.n	80033bc <execute_received_command+0x34>
 8003430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003434:	2b0f      	cmp	r3, #15
 8003436:	ddc1      	ble.n	80033bc <execute_received_command+0x34>
	}


	//parse arguments
	bool no_args = 1;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t arg_len = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint8_t arg_counter = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	for(int i = idx; i < uart_int->received_command_size; i++)
 800344a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800344e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003452:	e071      	b.n	8003538 <execute_received_command+0x1b0>
	{
		if(arg_counter >= MAX_NUM_ARGS || arg_len >= ARG_MAX_LENGTH) return -1; //error, to many argumenst/to long argument
 8003454:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8003458:	2b07      	cmp	r3, #7
 800345a:	d803      	bhi.n	8003464 <execute_received_command+0xdc>
 800345c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003460:	2b0b      	cmp	r3, #11
 8003462:	d902      	bls.n	800346a <execute_received_command+0xe2>
 8003464:	f04f 33ff 	mov.w	r3, #4294967295
 8003468:	e0ca      	b.n	8003600 <execute_received_command+0x278>

		char elem = uart_int->receive_buffer[i];
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003470:	4413      	add	r3, r2
 8003472:	3304      	adds	r3, #4
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		if(elem == '\0' || elem == '\r' || elem == '\n') return -1; //error, commands ends with ')'
 800347a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <execute_received_command+0x10a>
 8003482:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8003486:	2b0d      	cmp	r3, #13
 8003488:	d003      	beq.n	8003492 <execute_received_command+0x10a>
 800348a:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800348e:	2b0a      	cmp	r3, #10
 8003490:	d102      	bne.n	8003498 <execute_received_command+0x110>
 8003492:	f04f 33ff 	mov.w	r3, #4294967295
 8003496:	e0b3      	b.n	8003600 <execute_received_command+0x278>

		else if(elem == ')'){
 8003498:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 800349c:	2b29      	cmp	r3, #41	; 0x29
 800349e:	d10e      	bne.n	80034be <execute_received_command+0x136>
			args[arg_counter][arg_len] = '\0';
 80034a0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80034a4:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80034a8:	4613      	mov	r3, r2
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	3390      	adds	r3, #144	; 0x90
 80034b2:	443b      	add	r3, r7
 80034b4:	440b      	add	r3, r1
 80034b6:	3b88      	subs	r3, #136	; 0x88
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
			break;
 80034bc:	e044      	b.n	8003548 <execute_received_command+0x1c0>
		}
		else if(elem == ','){
 80034be:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80034c2:	2b2c      	cmp	r3, #44	; 0x2c
 80034c4:	d116      	bne.n	80034f4 <execute_received_command+0x16c>
			args[arg_counter][arg_len] = '\0';
 80034c6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80034ca:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	3390      	adds	r3, #144	; 0x90
 80034d8:	443b      	add	r3, r7
 80034da:	440b      	add	r3, r1
 80034dc:	3b88      	subs	r3, #136	; 0x88
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
			arg_counter++;
 80034e2:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80034e6:	3301      	adds	r3, #1
 80034e8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			arg_len = 0;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80034f2:	e01c      	b.n	800352e <execute_received_command+0x1a6>
		}
		else if(elem == ' '){
 80034f4:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	d017      	beq.n	800352c <execute_received_command+0x1a4>
			continue;
		}
		else{
			no_args = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			args[arg_counter][arg_len] = elem;
 8003502:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8003506:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3390      	adds	r3, #144	; 0x90
 8003514:	443b      	add	r3, r7
 8003516:	440b      	add	r3, r1
 8003518:	3b88      	subs	r3, #136	; 0x88
 800351a:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 800351e:	701a      	strb	r2, [r3, #0]
			arg_len ++;
 8003520:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8003524:	3301      	adds	r3, #1
 8003526:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800352a:	e000      	b.n	800352e <execute_received_command+0x1a6>
			continue;
 800352c:	bf00      	nop
	for(int i = idx; i < uart_int->received_command_size; i++)
 800352e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003532:	3301      	adds	r3, #1
 8003534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 800353e:	461a      	mov	r2, r3
 8003540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003544:	4293      	cmp	r3, r2
 8003546:	db85      	blt.n	8003454 <execute_received_command+0xcc>
		}
	}
	if(!no_args) arg_counter++;
 8003548:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800354c:	f083 0301 	eor.w	r3, r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d004      	beq.n	8003560 <execute_received_command+0x1d8>
 8003556:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800355a:	3301      	adds	r3, #1
 800355c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	if(strcmp(function_code, "help") == 0){
 8003560:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003564:	4928      	ldr	r1, [pc, #160]	; (8003608 <execute_received_command+0x280>)
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc fdf2 	bl	8000150 <strcmp>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <execute_received_command+0x1f4>
		help(uart_int);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f84a 	bl	800360c <help>
		return 1;
 8003578:	2301      	movs	r3, #1
 800357a:	e041      	b.n	8003600 <execute_received_command+0x278>
	}



	//run received function
	for(int i = 0; i < uart_int->num_functions; i++){
 800357c:	2300      	movs	r3, #0
 800357e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003580:	e033      	b.n	80035ea <execute_received_command+0x262>
		if(strcmp(function_code, uart_int->functions_array[i].function_code) == 0){
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8003588:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800358a:	4613      	mov	r3, r2
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	440b      	add	r3, r1
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800359a:	4611      	mov	r1, r2
 800359c:	4618      	mov	r0, r3
 800359e:	f7fc fdd7 	bl	8000150 <strcmp>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11d      	bne.n	80035e4 <execute_received_command+0x25c>
			if(uart_int->functions_array[i].num_args == arg_counter){
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80035ae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035b0:	4613      	mov	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	7d1b      	ldrb	r3, [r3, #20]
 80035bc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d11a      	bne.n	80035fa <execute_received_command+0x272>
				(*uart_int->functions_array[i].function_pointer)(args);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 80035ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	440b      	add	r3, r1
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f107 0208 	add.w	r2, r7, #8
 80035dc:	4610      	mov	r0, r2
 80035de:	4798      	blx	r3
				return 1;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e00d      	b.n	8003600 <execute_received_command+0x278>
	for(int i = 0; i < uart_int->num_functions; i++){
 80035e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e6:	3301      	adds	r3, #1
 80035e8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 80035f0:	461a      	mov	r2, r3
 80035f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035f4:	4293      	cmp	r3, r2
 80035f6:	dbc4      	blt.n	8003582 <execute_received_command+0x1fa>
 80035f8:	e000      	b.n	80035fc <execute_received_command+0x274>
			}
			break;
 80035fa:	bf00      	nop
		}
	}
	return -1;
 80035fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003600:	4618      	mov	r0, r3
 8003602:	3790      	adds	r7, #144	; 0x90
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	0800b2c0 	.word	0x0800b2c0

0800360c <help>:

/*
 * send "help()" command to stm, stm will transmit avaible commands and number of arguments for each command
 */

void help(uart_interface_typedef* uart_int){
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
//		}
//
//		offset += written;
//	}
//	uart_send(uart_int, buffer, offset);
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
	...

08003620 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <MX_USART1_UART_Init+0x4c>)
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <MX_USART1_UART_Init+0x50>)
 8003628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <MX_USART1_UART_Init+0x4c>)
 800362c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <MX_USART1_UART_Init+0x4c>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <MX_USART1_UART_Init+0x4c>)
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <MX_USART1_UART_Init+0x4c>)
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003644:	4b09      	ldr	r3, [pc, #36]	; (800366c <MX_USART1_UART_Init+0x4c>)
 8003646:	220c      	movs	r2, #12
 8003648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <MX_USART1_UART_Init+0x4c>)
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <MX_USART1_UART_Init+0x4c>)
 8003652:	2200      	movs	r2, #0
 8003654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003656:	4805      	ldr	r0, [pc, #20]	; (800366c <MX_USART1_UART_Init+0x4c>)
 8003658:	f003 fb12 	bl	8006c80 <HAL_UART_Init>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003662:	f7fe fc87 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000620 	.word	0x20000620
 8003670:	40013800 	.word	0x40013800

08003674 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367c:	f107 0310 	add.w	r3, r7, #16
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a47      	ldr	r2, [pc, #284]	; (80037ac <HAL_UART_MspInit+0x138>)
 8003690:	4293      	cmp	r3, r2
 8003692:	f040 8086 	bne.w	80037a2 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_UART_MspInit+0x13c>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	4a45      	ldr	r2, [pc, #276]	; (80037b0 <HAL_UART_MspInit+0x13c>)
 800369c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036a0:	6193      	str	r3, [r2, #24]
 80036a2:	4b43      	ldr	r3, [pc, #268]	; (80037b0 <HAL_UART_MspInit+0x13c>)
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ae:	4b40      	ldr	r3, [pc, #256]	; (80037b0 <HAL_UART_MspInit+0x13c>)
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	4a3f      	ldr	r2, [pc, #252]	; (80037b0 <HAL_UART_MspInit+0x13c>)
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	6193      	str	r3, [r2, #24]
 80036ba:	4b3d      	ldr	r3, [pc, #244]	; (80037b0 <HAL_UART_MspInit+0x13c>)
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036d0:	2303      	movs	r3, #3
 80036d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	4619      	mov	r1, r3
 80036da:	4836      	ldr	r0, [pc, #216]	; (80037b4 <HAL_UART_MspInit+0x140>)
 80036dc:	f000 fd64 	bl	80041a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ee:	f107 0310 	add.w	r3, r7, #16
 80036f2:	4619      	mov	r1, r3
 80036f4:	482f      	ldr	r0, [pc, #188]	; (80037b4 <HAL_UART_MspInit+0x140>)
 80036f6:	f000 fd57 	bl	80041a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80036fa:	4b2f      	ldr	r3, [pc, #188]	; (80037b8 <HAL_UART_MspInit+0x144>)
 80036fc:	4a2f      	ldr	r2, [pc, #188]	; (80037bc <HAL_UART_MspInit+0x148>)
 80036fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003700:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <HAL_UART_MspInit+0x144>)
 8003702:	2200      	movs	r2, #0
 8003704:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003706:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <HAL_UART_MspInit+0x144>)
 8003708:	2200      	movs	r2, #0
 800370a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800370c:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_UART_MspInit+0x144>)
 800370e:	2280      	movs	r2, #128	; 0x80
 8003710:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_UART_MspInit+0x144>)
 8003714:	2200      	movs	r2, #0
 8003716:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <HAL_UART_MspInit+0x144>)
 800371a:	2200      	movs	r2, #0
 800371c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800371e:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_UART_MspInit+0x144>)
 8003720:	2200      	movs	r2, #0
 8003722:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003724:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <HAL_UART_MspInit+0x144>)
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800372a:	4823      	ldr	r0, [pc, #140]	; (80037b8 <HAL_UART_MspInit+0x144>)
 800372c:	f000 fa9a 	bl	8003c64 <HAL_DMA_Init>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003736:	f7fe fc1d 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a1e      	ldr	r2, [pc, #120]	; (80037b8 <HAL_UART_MspInit+0x144>)
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003740:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <HAL_UART_MspInit+0x144>)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003746:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 8003748:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_UART_MspInit+0x150>)
 800374a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 800374e:	2210      	movs	r2, #16
 8003750:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003752:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003758:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800375e:	4b18      	ldr	r3, [pc, #96]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003764:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 8003766:	2200      	movs	r2, #0
 8003768:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800376a:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 8003772:	2200      	movs	r2, #0
 8003774:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003776:	4812      	ldr	r0, [pc, #72]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 8003778:	f000 fa74 	bl	8003c64 <HAL_DMA_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003782:	f7fe fbf7 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 800378a:	639a      	str	r2, [r3, #56]	; 0x38
 800378c:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <HAL_UART_MspInit+0x14c>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2100      	movs	r1, #0
 8003796:	2025      	movs	r0, #37	; 0x25
 8003798:	f000 fa2d 	bl	8003bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800379c:	2025      	movs	r0, #37	; 0x25
 800379e:	f000 fa46 	bl	8003c2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80037a2:	bf00      	nop
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40013800 	.word	0x40013800
 80037b0:	40021000 	.word	0x40021000
 80037b4:	40010800 	.word	0x40010800
 80037b8:	20000668 	.word	0x20000668
 80037bc:	40020058 	.word	0x40020058
 80037c0:	200006ac 	.word	0x200006ac
 80037c4:	40020044 	.word	0x40020044

080037c8 <led>:





void led(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
	if(strcmp(args[0], "1") == 0){
 80037d0:	490e      	ldr	r1, [pc, #56]	; (800380c <led+0x44>)
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fc fcbc 	bl	8000150 <strcmp>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <led+0x22>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80037de:	2200      	movs	r2, #0
 80037e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <led+0x48>)
 80037e6:	f000 fe63 	bl	80044b0 <HAL_GPIO_WritePin>
	}
	if(strcmp(args[0], "0") == 0){
 80037ea:	490a      	ldr	r1, [pc, #40]	; (8003814 <led+0x4c>)
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fc fcaf 	bl	8000150 <strcmp>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d105      	bne.n	8003804 <led+0x3c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80037f8:	2201      	movs	r2, #1
 80037fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037fe:	4804      	ldr	r0, [pc, #16]	; (8003810 <led+0x48>)
 8003800:	f000 fe56 	bl	80044b0 <HAL_GPIO_WritePin>
	}
}
 8003804:	bf00      	nop
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	0800b2c8 	.word	0x0800b2c8
 8003810:	40011000 	.word	0x40011000
 8003814:	0800b2cc 	.word	0x0800b2cc

08003818 <comunication_test>:

void comunication_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003818:	b580      	push	{r7, lr}
 800381a:	b0c4      	sub	sp, #272	; 0x110
 800381c:	af00      	add	r7, sp, #0
 800381e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003822:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003826:	6018      	str	r0, [r3, #0]
	uint8_t buffer[BUFFER_SIZE_TX];
	uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "----------------Czesc :)--------------\n");
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <comunication_test+0x40>)
 800382e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003832:	4618      	mov	r0, r3
 8003834:	f005 f912 	bl	8008a5c <sniprintf>
 8003838:	4603      	mov	r3, r0
 800383a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uart_send(&uart_interface, buffer, size, 1);
 800383e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8003842:	f107 010c 	add.w	r1, r7, #12
 8003846:	2301      	movs	r3, #1
 8003848:	4804      	ldr	r0, [pc, #16]	; (800385c <comunication_test+0x44>)
 800384a:	f7ff fcfa 	bl	8003242 <uart_send>

}
 800384e:	bf00      	nop
 8003850:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	0800b2d0 	.word	0x0800b2d0
 800385c:	200002f4 	.word	0x200002f4

08003860 <set_position>:


void set_position(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

	if(strcmp(args[0], "0") == 0){
 8003868:	490c      	ldr	r1, [pc, #48]	; (800389c <set_position+0x3c>)
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fc fc70 	bl	8000150 <strcmp>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d103      	bne.n	800387e <set_position+0x1e>
		set_pos = 0;
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <set_position+0x40>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e00b      	b.n	8003896 <set_position+0x36>
	}
	else{
		int32_t val = atoi(args[0]);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f004 faf6 	bl	8007e70 <atoi>
 8003884:	60f8      	str	r0, [r7, #12]
		if(val == 0) return;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <set_position+0x34>
		set_pos = val;
 800388c:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <set_position+0x40>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	e000      	b.n	8003896 <set_position+0x36>
		if(val == 0) return;
 8003894:	bf00      	nop
	}
}
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	0800b2cc 	.word	0x0800b2cc
 80038a0:	200002f0 	.word	0x200002f0

080038a4 <set_angle_fun>:



void set_angle_fun(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	spin_duration_ms = atoi(args[0]);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f004 fadf 	bl	8007e70 <atoi>
 80038b2:	4603      	mov	r3, r0
 80038b4:	b21a      	sxth	r2, r3
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <set_angle_fun+0x30>)
 80038b8:	801a      	strh	r2, [r3, #0]
	spin_value = atoi(args[1]);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	330c      	adds	r3, #12
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fad6 	bl	8007e70 <atoi>
 80038c4:	4603      	mov	r3, r0
 80038c6:	b25a      	sxtb	r2, r3
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <set_angle_fun+0x34>)
 80038ca:	701a      	strb	r2, [r3, #0]
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000584 	.word	0x20000584
 80038d8:	20000586 	.word	0x20000586

080038dc <rotate_deg>:


void rotate_deg(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]

}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
	...

080038f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038f0:	f7ff fae6 	bl	8002ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038f4:	480b      	ldr	r0, [pc, #44]	; (8003924 <LoopFillZerobss+0xe>)
   ldr r1, =_edata
 80038f6:	490c      	ldr	r1, [pc, #48]	; (8003928 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80038f8:	4a0c      	ldr	r2, [pc, #48]	; (800392c <LoopFillZerobss+0x16>)
  movs r3, #0
 80038fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038fc:	e002      	b.n	8003904 <LoopCopyDataInit>

080038fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003902:	3304      	adds	r3, #4

08003904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003908:	d3f9      	bcc.n	80038fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800390a:	4a09      	ldr	r2, [pc, #36]	; (8003930 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800390c:	4c09      	ldr	r4, [pc, #36]	; (8003934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003910:	e001      	b.n	8003916 <LoopFillZerobss>

08003912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003914:	3204      	adds	r2, #4

08003916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003918:	d3fb      	bcc.n	8003912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800391a:	f005 fa03 	bl	8008d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800391e:	f7fd fe67 	bl	80015f0 <main>
  bx lr
 8003922:	4770      	bx	lr
  ldr r0, =_sdata
 8003924:	20000000 	.word	0x20000000
   ldr r1, =_edata
 8003928:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800392c:	0800b710 	.word	0x0800b710
  ldr r2, =_sbss
 8003930:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003934:	20000840 	.word	0x20000840

08003938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003938:	e7fe      	b.n	8003938 <ADC1_2_IRQHandler>
	...

0800393c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003940:	4b08      	ldr	r3, [pc, #32]	; (8003964 <HAL_Init+0x28>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a07      	ldr	r2, [pc, #28]	; (8003964 <HAL_Init+0x28>)
 8003946:	f043 0310 	orr.w	r3, r3, #16
 800394a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800394c:	2003      	movs	r0, #3
 800394e:	f000 f947 	bl	8003be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003952:	200f      	movs	r0, #15
 8003954:	f000 f808 	bl	8003968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003958:	f7ff f966 	bl	8002c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40022000 	.word	0x40022000

08003968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_InitTick+0x54>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_InitTick+0x58>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	4619      	mov	r1, r3
 800397a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003982:	fbb2 f3f3 	udiv	r3, r2, r3
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f95f 	bl	8003c4a <HAL_SYSTICK_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e00e      	b.n	80039b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b0f      	cmp	r3, #15
 800399a:	d80a      	bhi.n	80039b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800399c:	2200      	movs	r2, #0
 800399e:	6879      	ldr	r1, [r7, #4]
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f000 f927 	bl	8003bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a8:	4a06      	ldr	r2, [pc, #24]	; (80039c4 <HAL_InitTick+0x5c>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000008 	.word	0x20000008
 80039c4:	20000004 	.word	0x20000004

080039c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <HAL_IncTick+0x1c>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_IncTick+0x20>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	4a03      	ldr	r2, [pc, #12]	; (80039e8 <HAL_IncTick+0x20>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	20000008 	.word	0x20000008
 80039e8:	200006f0 	.word	0x200006f0

080039ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b02      	ldr	r3, [pc, #8]	; (80039fc <HAL_GetTick+0x10>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	200006f0 	.word	0x200006f0

08003a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a08:	f7ff fff0 	bl	80039ec <HAL_GetTick>
 8003a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a18:	d005      	beq.n	8003a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_Delay+0x44>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a26:	bf00      	nop
 8003a28:	f7ff ffe0 	bl	80039ec <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d8f7      	bhi.n	8003a28 <HAL_Delay+0x28>
  {
  }
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000008 	.word	0x20000008

08003a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <__NVIC_SetPriorityGrouping+0x44>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a64:	4013      	ands	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a7a:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <__NVIC_SetPriorityGrouping+0x44>)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	60d3      	str	r3, [r2, #12]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	0a1b      	lsrs	r3, r3, #8
 8003a9a:	f003 0307 	and.w	r3, r3, #7
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bc80      	pop	{r7}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	db0b      	blt.n	8003ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	f003 021f 	and.w	r2, r3, #31
 8003ac4:	4906      	ldr	r1, [pc, #24]	; (8003ae0 <__NVIC_EnableIRQ+0x34>)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	2001      	movs	r0, #1
 8003ace:	fa00 f202 	lsl.w	r2, r0, r2
 8003ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	e000e100 	.word	0xe000e100

08003ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	6039      	str	r1, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	db0a      	blt.n	8003b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	490c      	ldr	r1, [pc, #48]	; (8003b30 <__NVIC_SetPriority+0x4c>)
 8003afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b02:	0112      	lsls	r2, r2, #4
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	440b      	add	r3, r1
 8003b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b0c:	e00a      	b.n	8003b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4908      	ldr	r1, [pc, #32]	; (8003b34 <__NVIC_SetPriority+0x50>)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3b04      	subs	r3, #4
 8003b1c:	0112      	lsls	r2, r2, #4
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	440b      	add	r3, r1
 8003b22:	761a      	strb	r2, [r3, #24]
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100
 8003b34:	e000ed00 	.word	0xe000ed00

08003b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b089      	sub	sp, #36	; 0x24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	f1c3 0307 	rsb	r3, r3, #7
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	bf28      	it	cs
 8003b56:	2304      	movcs	r3, #4
 8003b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d902      	bls.n	8003b68 <NVIC_EncodePriority+0x30>
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	3b03      	subs	r3, #3
 8003b66:	e000      	b.n	8003b6a <NVIC_EncodePriority+0x32>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	43da      	mvns	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43d9      	mvns	r1, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b90:	4313      	orrs	r3, r2
         );
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bc80      	pop	{r7}
 8003b9a:	4770      	bx	lr

08003b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bac:	d301      	bcc.n	8003bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e00f      	b.n	8003bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bb2:	4a0a      	ldr	r2, [pc, #40]	; (8003bdc <SysTick_Config+0x40>)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bba:	210f      	movs	r1, #15
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	f7ff ff90 	bl	8003ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <SysTick_Config+0x40>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bca:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <SysTick_Config+0x40>)
 8003bcc:	2207      	movs	r2, #7
 8003bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	e000e010 	.word	0xe000e010

08003be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff2d 	bl	8003a48 <__NVIC_SetPriorityGrouping>
}
 8003bee:	bf00      	nop
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c08:	f7ff ff42 	bl	8003a90 <__NVIC_GetPriorityGrouping>
 8003c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	6978      	ldr	r0, [r7, #20]
 8003c14:	f7ff ff90 	bl	8003b38 <NVIC_EncodePriority>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff5f 	bl	8003ae4 <__NVIC_SetPriority>
}
 8003c26:	bf00      	nop
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	4603      	mov	r3, r0
 8003c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff ff35 	bl	8003aac <__NVIC_EnableIRQ>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffa2 	bl	8003b9c <SysTick_Config>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e043      	b.n	8003d02 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <HAL_DMA_Init+0xa8>)
 8003c82:	4413      	add	r3, r2
 8003c84:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_DMA_Init+0xac>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	009a      	lsls	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1f      	ldr	r2, [pc, #124]	; (8003d14 <HAL_DMA_Init+0xb0>)
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003cae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	bffdfff8 	.word	0xbffdfff8
 8003d10:	cccccccd 	.word	0xcccccccd
 8003d14:	40020000 	.word	0x40020000

08003d18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_DMA_Start_IT+0x20>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e04b      	b.n	8003dd0 <HAL_DMA_Start_IT+0xb8>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d13a      	bne.n	8003dc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	68b9      	ldr	r1, [r7, #8]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f9eb 	bl	800414c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 020e 	orr.w	r2, r2, #14
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e00f      	b.n	8003db0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 020a 	orr.w	r2, r2, #10
 8003dae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	e005      	b.n	8003dce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d008      	beq.n	8003e02 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2204      	movs	r2, #4
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e020      	b.n	8003e44 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 020e 	bic.w	r2, r2, #14
 8003e10:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0201 	bic.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e30:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d005      	beq.n	8003e74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
 8003e72:	e051      	b.n	8003f18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 020e 	bic.w	r2, r2, #14
 8003e82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a22      	ldr	r2, [pc, #136]	; (8003f24 <HAL_DMA_Abort_IT+0xd4>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d029      	beq.n	8003ef2 <HAL_DMA_Abort_IT+0xa2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_DMA_Abort_IT+0xd8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d022      	beq.n	8003eee <HAL_DMA_Abort_IT+0x9e>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	; (8003f2c <HAL_DMA_Abort_IT+0xdc>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01a      	beq.n	8003ee8 <HAL_DMA_Abort_IT+0x98>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_DMA_Abort_IT+0xe0>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d012      	beq.n	8003ee2 <HAL_DMA_Abort_IT+0x92>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	; (8003f34 <HAL_DMA_Abort_IT+0xe4>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00a      	beq.n	8003edc <HAL_DMA_Abort_IT+0x8c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_DMA_Abort_IT+0xe8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d102      	bne.n	8003ed6 <HAL_DMA_Abort_IT+0x86>
 8003ed0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ed4:	e00e      	b.n	8003ef4 <HAL_DMA_Abort_IT+0xa4>
 8003ed6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eda:	e00b      	b.n	8003ef4 <HAL_DMA_Abort_IT+0xa4>
 8003edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ee0:	e008      	b.n	8003ef4 <HAL_DMA_Abort_IT+0xa4>
 8003ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ee6:	e005      	b.n	8003ef4 <HAL_DMA_Abort_IT+0xa4>
 8003ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eec:	e002      	b.n	8003ef4 <HAL_DMA_Abort_IT+0xa4>
 8003eee:	2310      	movs	r3, #16
 8003ef0:	e000      	b.n	8003ef4 <HAL_DMA_Abort_IT+0xa4>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <HAL_DMA_Abort_IT+0xec>)
 8003ef6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
    } 
  }
  return status;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40020008 	.word	0x40020008
 8003f28:	4002001c 	.word	0x4002001c
 8003f2c:	40020030 	.word	0x40020030
 8003f30:	40020044 	.word	0x40020044
 8003f34:	40020058 	.word	0x40020058
 8003f38:	4002006c 	.word	0x4002006c
 8003f3c:	40020000 	.word	0x40020000

08003f40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d04f      	beq.n	8004008 <HAL_DMA_IRQHandler+0xc8>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04a      	beq.n	8004008 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d107      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a66      	ldr	r2, [pc, #408]	; (8004130 <HAL_DMA_IRQHandler+0x1f0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d029      	beq.n	8003fee <HAL_DMA_IRQHandler+0xae>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a65      	ldr	r2, [pc, #404]	; (8004134 <HAL_DMA_IRQHandler+0x1f4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_IRQHandler+0xaa>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a63      	ldr	r2, [pc, #396]	; (8004138 <HAL_DMA_IRQHandler+0x1f8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01a      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0xa4>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a62      	ldr	r2, [pc, #392]	; (800413c <HAL_DMA_IRQHandler+0x1fc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d012      	beq.n	8003fde <HAL_DMA_IRQHandler+0x9e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a60      	ldr	r2, [pc, #384]	; (8004140 <HAL_DMA_IRQHandler+0x200>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x98>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5f      	ldr	r2, [pc, #380]	; (8004144 <HAL_DMA_IRQHandler+0x204>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d102      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x92>
 8003fcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003fd0:	e00e      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xb0>
 8003fd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fd6:	e00b      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xb0>
 8003fd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fdc:	e008      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xb0>
 8003fde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fe2:	e005      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xb0>
 8003fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe8:	e002      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xb0>
 8003fea:	2340      	movs	r3, #64	; 0x40
 8003fec:	e000      	b.n	8003ff0 <HAL_DMA_IRQHandler+0xb0>
 8003fee:	2304      	movs	r3, #4
 8003ff0:	4a55      	ldr	r2, [pc, #340]	; (8004148 <HAL_DMA_IRQHandler+0x208>)
 8003ff2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8094 	beq.w	8004126 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004006:	e08e      	b.n	8004126 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400c:	2202      	movs	r2, #2
 800400e:	409a      	lsls	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d056      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x186>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d051      	beq.n	80040c6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 020a 	bic.w	r2, r2, #10
 800403e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a38      	ldr	r2, [pc, #224]	; (8004130 <HAL_DMA_IRQHandler+0x1f0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d029      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x166>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a37      	ldr	r2, [pc, #220]	; (8004134 <HAL_DMA_IRQHandler+0x1f4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d022      	beq.n	80040a2 <HAL_DMA_IRQHandler+0x162>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a35      	ldr	r2, [pc, #212]	; (8004138 <HAL_DMA_IRQHandler+0x1f8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01a      	beq.n	800409c <HAL_DMA_IRQHandler+0x15c>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a34      	ldr	r2, [pc, #208]	; (800413c <HAL_DMA_IRQHandler+0x1fc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d012      	beq.n	8004096 <HAL_DMA_IRQHandler+0x156>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a32      	ldr	r2, [pc, #200]	; (8004140 <HAL_DMA_IRQHandler+0x200>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00a      	beq.n	8004090 <HAL_DMA_IRQHandler+0x150>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a31      	ldr	r2, [pc, #196]	; (8004144 <HAL_DMA_IRQHandler+0x204>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d102      	bne.n	800408a <HAL_DMA_IRQHandler+0x14a>
 8004084:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004088:	e00e      	b.n	80040a8 <HAL_DMA_IRQHandler+0x168>
 800408a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800408e:	e00b      	b.n	80040a8 <HAL_DMA_IRQHandler+0x168>
 8004090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004094:	e008      	b.n	80040a8 <HAL_DMA_IRQHandler+0x168>
 8004096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800409a:	e005      	b.n	80040a8 <HAL_DMA_IRQHandler+0x168>
 800409c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040a0:	e002      	b.n	80040a8 <HAL_DMA_IRQHandler+0x168>
 80040a2:	2320      	movs	r3, #32
 80040a4:	e000      	b.n	80040a8 <HAL_DMA_IRQHandler+0x168>
 80040a6:	2302      	movs	r3, #2
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <HAL_DMA_IRQHandler+0x208>)
 80040aa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d034      	beq.n	8004126 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80040c4:	e02f      	b.n	8004126 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2208      	movs	r2, #8
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d028      	beq.n	8004128 <HAL_DMA_IRQHandler+0x1e8>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 020e 	bic.w	r2, r2, #14
 80040ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f202 	lsl.w	r2, r1, r2
 80040fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	2b00      	cmp	r3, #0
 800411c:	d004      	beq.n	8004128 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
    }
  }
  return;
 8004126:	bf00      	nop
 8004128:	bf00      	nop
}
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40020008 	.word	0x40020008
 8004134:	4002001c 	.word	0x4002001c
 8004138:	40020030 	.word	0x40020030
 800413c:	40020044 	.word	0x40020044
 8004140:	40020058 	.word	0x40020058
 8004144:	4002006c 	.word	0x4002006c
 8004148:	40020000 	.word	0x40020000

0800414c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2101      	movs	r1, #1
 8004164:	fa01 f202 	lsl.w	r2, r1, r2
 8004168:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b10      	cmp	r3, #16
 8004178:	d108      	bne.n	800418c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800418a:	e007      	b.n	800419c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b08b      	sub	sp, #44	; 0x2c
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041b2:	2300      	movs	r3, #0
 80041b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ba:	e169      	b.n	8004490 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80041bc:	2201      	movs	r2, #1
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	f040 8158 	bne.w	800448a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a9a      	ldr	r2, [pc, #616]	; (8004448 <HAL_GPIO_Init+0x2a0>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d05e      	beq.n	80042a2 <HAL_GPIO_Init+0xfa>
 80041e4:	4a98      	ldr	r2, [pc, #608]	; (8004448 <HAL_GPIO_Init+0x2a0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d875      	bhi.n	80042d6 <HAL_GPIO_Init+0x12e>
 80041ea:	4a98      	ldr	r2, [pc, #608]	; (800444c <HAL_GPIO_Init+0x2a4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d058      	beq.n	80042a2 <HAL_GPIO_Init+0xfa>
 80041f0:	4a96      	ldr	r2, [pc, #600]	; (800444c <HAL_GPIO_Init+0x2a4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d86f      	bhi.n	80042d6 <HAL_GPIO_Init+0x12e>
 80041f6:	4a96      	ldr	r2, [pc, #600]	; (8004450 <HAL_GPIO_Init+0x2a8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d052      	beq.n	80042a2 <HAL_GPIO_Init+0xfa>
 80041fc:	4a94      	ldr	r2, [pc, #592]	; (8004450 <HAL_GPIO_Init+0x2a8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d869      	bhi.n	80042d6 <HAL_GPIO_Init+0x12e>
 8004202:	4a94      	ldr	r2, [pc, #592]	; (8004454 <HAL_GPIO_Init+0x2ac>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04c      	beq.n	80042a2 <HAL_GPIO_Init+0xfa>
 8004208:	4a92      	ldr	r2, [pc, #584]	; (8004454 <HAL_GPIO_Init+0x2ac>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d863      	bhi.n	80042d6 <HAL_GPIO_Init+0x12e>
 800420e:	4a92      	ldr	r2, [pc, #584]	; (8004458 <HAL_GPIO_Init+0x2b0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d046      	beq.n	80042a2 <HAL_GPIO_Init+0xfa>
 8004214:	4a90      	ldr	r2, [pc, #576]	; (8004458 <HAL_GPIO_Init+0x2b0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d85d      	bhi.n	80042d6 <HAL_GPIO_Init+0x12e>
 800421a:	2b12      	cmp	r3, #18
 800421c:	d82a      	bhi.n	8004274 <HAL_GPIO_Init+0xcc>
 800421e:	2b12      	cmp	r3, #18
 8004220:	d859      	bhi.n	80042d6 <HAL_GPIO_Init+0x12e>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <HAL_GPIO_Init+0x80>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	080042a3 	.word	0x080042a3
 800422c:	0800427d 	.word	0x0800427d
 8004230:	0800428f 	.word	0x0800428f
 8004234:	080042d1 	.word	0x080042d1
 8004238:	080042d7 	.word	0x080042d7
 800423c:	080042d7 	.word	0x080042d7
 8004240:	080042d7 	.word	0x080042d7
 8004244:	080042d7 	.word	0x080042d7
 8004248:	080042d7 	.word	0x080042d7
 800424c:	080042d7 	.word	0x080042d7
 8004250:	080042d7 	.word	0x080042d7
 8004254:	080042d7 	.word	0x080042d7
 8004258:	080042d7 	.word	0x080042d7
 800425c:	080042d7 	.word	0x080042d7
 8004260:	080042d7 	.word	0x080042d7
 8004264:	080042d7 	.word	0x080042d7
 8004268:	080042d7 	.word	0x080042d7
 800426c:	08004285 	.word	0x08004285
 8004270:	08004299 	.word	0x08004299
 8004274:	4a79      	ldr	r2, [pc, #484]	; (800445c <HAL_GPIO_Init+0x2b4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800427a:	e02c      	b.n	80042d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	623b      	str	r3, [r7, #32]
          break;
 8004282:	e029      	b.n	80042d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	3304      	adds	r3, #4
 800428a:	623b      	str	r3, [r7, #32]
          break;
 800428c:	e024      	b.n	80042d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	3308      	adds	r3, #8
 8004294:	623b      	str	r3, [r7, #32]
          break;
 8004296:	e01f      	b.n	80042d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	330c      	adds	r3, #12
 800429e:	623b      	str	r3, [r7, #32]
          break;
 80042a0:	e01a      	b.n	80042d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80042aa:	2304      	movs	r3, #4
 80042ac:	623b      	str	r3, [r7, #32]
          break;
 80042ae:	e013      	b.n	80042d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d105      	bne.n	80042c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042b8:	2308      	movs	r3, #8
 80042ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	611a      	str	r2, [r3, #16]
          break;
 80042c2:	e009      	b.n	80042d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80042c4:	2308      	movs	r3, #8
 80042c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	615a      	str	r2, [r3, #20]
          break;
 80042ce:	e003      	b.n	80042d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80042d0:	2300      	movs	r3, #0
 80042d2:	623b      	str	r3, [r7, #32]
          break;
 80042d4:	e000      	b.n	80042d8 <HAL_GPIO_Init+0x130>
          break;
 80042d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2bff      	cmp	r3, #255	; 0xff
 80042dc:	d801      	bhi.n	80042e2 <HAL_GPIO_Init+0x13a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	e001      	b.n	80042e6 <HAL_GPIO_Init+0x13e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3304      	adds	r3, #4
 80042e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	2bff      	cmp	r3, #255	; 0xff
 80042ec:	d802      	bhi.n	80042f4 <HAL_GPIO_Init+0x14c>
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	e002      	b.n	80042fa <HAL_GPIO_Init+0x152>
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	3b08      	subs	r3, #8
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	210f      	movs	r1, #15
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	fa01 f303 	lsl.w	r3, r1, r3
 8004308:	43db      	mvns	r3, r3
 800430a:	401a      	ands	r2, r3
 800430c:	6a39      	ldr	r1, [r7, #32]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	fa01 f303 	lsl.w	r3, r1, r3
 8004314:	431a      	orrs	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80b1 	beq.w	800448a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004328:	4b4d      	ldr	r3, [pc, #308]	; (8004460 <HAL_GPIO_Init+0x2b8>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4a4c      	ldr	r2, [pc, #304]	; (8004460 <HAL_GPIO_Init+0x2b8>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6193      	str	r3, [r2, #24]
 8004334:	4b4a      	ldr	r3, [pc, #296]	; (8004460 <HAL_GPIO_Init+0x2b8>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004340:	4a48      	ldr	r2, [pc, #288]	; (8004464 <HAL_GPIO_Init+0x2bc>)
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	220f      	movs	r2, #15
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4013      	ands	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a40      	ldr	r2, [pc, #256]	; (8004468 <HAL_GPIO_Init+0x2c0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_GPIO_Init+0x1ec>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3f      	ldr	r2, [pc, #252]	; (800446c <HAL_GPIO_Init+0x2c4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00d      	beq.n	8004390 <HAL_GPIO_Init+0x1e8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3e      	ldr	r2, [pc, #248]	; (8004470 <HAL_GPIO_Init+0x2c8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <HAL_GPIO_Init+0x1e4>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3d      	ldr	r2, [pc, #244]	; (8004474 <HAL_GPIO_Init+0x2cc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_GPIO_Init+0x1e0>
 8004384:	2303      	movs	r3, #3
 8004386:	e006      	b.n	8004396 <HAL_GPIO_Init+0x1ee>
 8004388:	2304      	movs	r3, #4
 800438a:	e004      	b.n	8004396 <HAL_GPIO_Init+0x1ee>
 800438c:	2302      	movs	r3, #2
 800438e:	e002      	b.n	8004396 <HAL_GPIO_Init+0x1ee>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <HAL_GPIO_Init+0x1ee>
 8004394:	2300      	movs	r3, #0
 8004396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004398:	f002 0203 	and.w	r2, r2, #3
 800439c:	0092      	lsls	r2, r2, #2
 800439e:	4093      	lsls	r3, r2
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80043a6:	492f      	ldr	r1, [pc, #188]	; (8004464 <HAL_GPIO_Init+0x2bc>)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d006      	beq.n	80043ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80043c0:	4b2d      	ldr	r3, [pc, #180]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	492c      	ldr	r1, [pc, #176]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	608b      	str	r3, [r1, #8]
 80043cc:	e006      	b.n	80043dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80043ce:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	4928      	ldr	r1, [pc, #160]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043e8:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4922      	ldr	r1, [pc, #136]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60cb      	str	r3, [r1, #12]
 80043f4:	e006      	b.n	8004404 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	491e      	ldr	r1, [pc, #120]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 8004400:	4013      	ands	r3, r2
 8004402:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d006      	beq.n	800441e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	4918      	ldr	r1, [pc, #96]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
 800441c:	e006      	b.n	800442c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	43db      	mvns	r3, r3
 8004426:	4914      	ldr	r1, [pc, #80]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 8004428:	4013      	ands	r3, r2
 800442a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d021      	beq.n	800447c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	490e      	ldr	r1, [pc, #56]	; (8004478 <HAL_GPIO_Init+0x2d0>)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	600b      	str	r3, [r1, #0]
 8004444:	e021      	b.n	800448a <HAL_GPIO_Init+0x2e2>
 8004446:	bf00      	nop
 8004448:	10320000 	.word	0x10320000
 800444c:	10310000 	.word	0x10310000
 8004450:	10220000 	.word	0x10220000
 8004454:	10210000 	.word	0x10210000
 8004458:	10120000 	.word	0x10120000
 800445c:	10110000 	.word	0x10110000
 8004460:	40021000 	.word	0x40021000
 8004464:	40010000 	.word	0x40010000
 8004468:	40010800 	.word	0x40010800
 800446c:	40010c00 	.word	0x40010c00
 8004470:	40011000 	.word	0x40011000
 8004474:	40011400 	.word	0x40011400
 8004478:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800447c:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_GPIO_Init+0x304>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	43db      	mvns	r3, r3
 8004484:	4909      	ldr	r1, [pc, #36]	; (80044ac <HAL_GPIO_Init+0x304>)
 8004486:	4013      	ands	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	3301      	adds	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	f47f ae8e 	bne.w	80041bc <HAL_GPIO_Init+0x14>
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	372c      	adds	r7, #44	; 0x2c
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr
 80044ac:	40010400 	.word	0x40010400

080044b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	807b      	strh	r3, [r7, #2]
 80044bc:	4613      	mov	r3, r2
 80044be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044c0:	787b      	ldrb	r3, [r7, #1]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044cc:	e003      	b.n	80044d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044ce:	887b      	ldrh	r3, [r7, #2]
 80044d0:	041a      	lsls	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	611a      	str	r2, [r3, #16]
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e12b      	b.n	800474a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fc ff6c 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	; 0x24
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0201 	bic.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004544:	f001 fbfc 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8004548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4a81      	ldr	r2, [pc, #516]	; (8004754 <HAL_I2C_Init+0x274>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d807      	bhi.n	8004564 <HAL_I2C_Init+0x84>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a80      	ldr	r2, [pc, #512]	; (8004758 <HAL_I2C_Init+0x278>)
 8004558:	4293      	cmp	r3, r2
 800455a:	bf94      	ite	ls
 800455c:	2301      	movls	r3, #1
 800455e:	2300      	movhi	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e006      	b.n	8004572 <HAL_I2C_Init+0x92>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	4a7d      	ldr	r2, [pc, #500]	; (800475c <HAL_I2C_Init+0x27c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	bf94      	ite	ls
 800456c:	2301      	movls	r3, #1
 800456e:	2300      	movhi	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0e7      	b.n	800474a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a78      	ldr	r2, [pc, #480]	; (8004760 <HAL_I2C_Init+0x280>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0c9b      	lsrs	r3, r3, #18
 8004584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a6a      	ldr	r2, [pc, #424]	; (8004754 <HAL_I2C_Init+0x274>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d802      	bhi.n	80045b4 <HAL_I2C_Init+0xd4>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	3301      	adds	r3, #1
 80045b2:	e009      	b.n	80045c8 <HAL_I2C_Init+0xe8>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	4a69      	ldr	r2, [pc, #420]	; (8004764 <HAL_I2C_Init+0x284>)
 80045c0:	fba2 2303 	umull	r2, r3, r2, r3
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	3301      	adds	r3, #1
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	430b      	orrs	r3, r1
 80045ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	495c      	ldr	r1, [pc, #368]	; (8004754 <HAL_I2C_Init+0x274>)
 80045e4:	428b      	cmp	r3, r1
 80045e6:	d819      	bhi.n	800461c <HAL_I2C_Init+0x13c>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	1e59      	subs	r1, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045fc:	400b      	ands	r3, r1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_I2C_Init+0x138>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1e59      	subs	r1, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004610:	3301      	adds	r3, #1
 8004612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004616:	e051      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 8004618:	2304      	movs	r3, #4
 800461a:	e04f      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <HAL_I2C_Init+0x168>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e58      	subs	r0, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6859      	ldr	r1, [r3, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	440b      	add	r3, r1
 8004632:	fbb0 f3f3 	udiv	r3, r0, r3
 8004636:	3301      	adds	r3, #1
 8004638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463c:	2b00      	cmp	r3, #0
 800463e:	bf0c      	ite	eq
 8004640:	2301      	moveq	r3, #1
 8004642:	2300      	movne	r3, #0
 8004644:	b2db      	uxtb	r3, r3
 8004646:	e012      	b.n	800466e <HAL_I2C_Init+0x18e>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1e58      	subs	r0, r3, #1
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	460b      	mov	r3, r1
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	0099      	lsls	r1, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	fbb0 f3f3 	udiv	r3, r0, r3
 800465e:	3301      	adds	r3, #1
 8004660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2301      	moveq	r3, #1
 800466a:	2300      	movne	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Init+0x196>
 8004672:	2301      	movs	r3, #1
 8004674:	e022      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10e      	bne.n	800469c <HAL_I2C_Init+0x1bc>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1e58      	subs	r0, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6859      	ldr	r1, [r3, #4]
 8004686:	460b      	mov	r3, r1
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	440b      	add	r3, r1
 800468c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004690:	3301      	adds	r3, #1
 8004692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469a:	e00f      	b.n	80046bc <HAL_I2C_Init+0x1dc>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	0099      	lsls	r1, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b2:	3301      	adds	r3, #1
 80046b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	6809      	ldr	r1, [r1, #0]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6911      	ldr	r1, [r2, #16]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	430b      	orrs	r3, r1
 80046fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695a      	ldr	r2, [r3, #20]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	000186a0 	.word	0x000186a0
 8004758:	001e847f 	.word	0x001e847f
 800475c:	003d08ff 	.word	0x003d08ff
 8004760:	431bde83 	.word	0x431bde83
 8004764:	10624dd3 	.word	0x10624dd3

08004768 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4603      	mov	r3, r0
 8004778:	817b      	strh	r3, [r7, #10]
 800477a:	460b      	mov	r3, r1
 800477c:	813b      	strh	r3, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004782:	f7ff f933 	bl	80039ec <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	f040 80d9 	bne.w	8004948 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2319      	movs	r3, #25
 800479c:	2201      	movs	r2, #1
 800479e:	496d      	ldr	r1, [pc, #436]	; (8004954 <HAL_I2C_Mem_Write+0x1ec>)
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fccd 	bl	8005140 <I2C_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
 80047ae:	e0cc      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_I2C_Mem_Write+0x56>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e0c5      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d007      	beq.n	80047e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2221      	movs	r2, #33	; 0x21
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a3a      	ldr	r2, [r7, #32]
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a4d      	ldr	r2, [pc, #308]	; (8004958 <HAL_I2C_Mem_Write+0x1f0>)
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004826:	88f8      	ldrh	r0, [r7, #6]
 8004828:	893a      	ldrh	r2, [r7, #8]
 800482a:	8979      	ldrh	r1, [r7, #10]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4603      	mov	r3, r0
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fb04 	bl	8004e44 <I2C_RequestMemoryWrite>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d052      	beq.n	80048e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e081      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f000 fd92 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00d      	beq.n	8004872 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	2b04      	cmp	r3, #4
 800485c:	d107      	bne.n	800486e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e06b      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800488c:	3b01      	subs	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_I2C_Mem_Write+0x180>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1aa      	bne.n	8004846 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fd85 	bl	8005404 <I2C_WaitOnBTFFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	2b04      	cmp	r3, #4
 8004906:	d107      	bne.n	8004918 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004916:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e016      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	e000      	b.n	800494a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004948:	2302      	movs	r3, #2
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	00100002 	.word	0x00100002
 8004958:	ffff0000 	.word	0xffff0000

0800495c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800497a:	f7ff f837 	bl	80039ec <HAL_GetTick>
 800497e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b20      	cmp	r3, #32
 800498a:	f040 8250 	bne.w	8004e2e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	9300      	str	r3, [sp, #0]
 8004992:	2319      	movs	r3, #25
 8004994:	2201      	movs	r2, #1
 8004996:	4982      	ldr	r1, [pc, #520]	; (8004ba0 <HAL_I2C_Mem_Read+0x244>)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fbd1 	bl	8005140 <I2C_WaitOnFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
 80049a6:	e243      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_I2C_Mem_Read+0x5a>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e23c      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d007      	beq.n	80049dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2222      	movs	r2, #34	; 0x22
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2240      	movs	r2, #64	; 0x40
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4a62      	ldr	r2, [pc, #392]	; (8004ba4 <HAL_I2C_Mem_Read+0x248>)
 8004a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a1e:	88f8      	ldrh	r0, [r7, #6]
 8004a20:	893a      	ldrh	r2, [r7, #8]
 8004a22:	8979      	ldrh	r1, [r7, #10]
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fa9e 	bl	8004f70 <I2C_RequestMemoryRead>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e1f8      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d113      	bne.n	8004a6e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	e1cc      	b.n	8004e08 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d11e      	bne.n	8004ab4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a86:	b672      	cpsid	i
}
 8004a88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	61bb      	str	r3, [r7, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004ab0:	b662      	cpsie	i
}
 8004ab2:	e035      	b.n	8004b20 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d11e      	bne.n	8004afa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004acc:	b672      	cpsid	i
}
 8004ace:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004af6:	b662      	cpsie	i
}
 8004af8:	e012      	b.n	8004b20 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b08:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	613b      	str	r3, [r7, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	613b      	str	r3, [r7, #16]
 8004b1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004b20:	e172      	b.n	8004e08 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	f200 811f 	bhi.w	8004d6a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d123      	bne.n	8004b7c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fcab 	bl	8005494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e173      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691a      	ldr	r2, [r3, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b7a:	e145      	b.n	8004e08 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d152      	bne.n	8004c2a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	4906      	ldr	r1, [pc, #24]	; (8004ba8 <HAL_I2C_Mem_Read+0x24c>)
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fad6 	bl	8005140 <I2C_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e148      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
 8004b9e:	bf00      	nop
 8004ba0:	00100002 	.word	0x00100002
 8004ba4:	ffff0000 	.word	0xffff0000
 8004ba8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004bac:	b672      	cpsid	i
}
 8004bae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004bf2:	b662      	cpsie	i
}
 8004bf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c28:	e0ee      	b.n	8004e08 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	2200      	movs	r2, #0
 8004c32:	4981      	ldr	r1, [pc, #516]	; (8004e38 <HAL_I2C_Mem_Read+0x4dc>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fa83 	bl	8005140 <I2C_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0f5      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004c54:	b672      	cpsid	i
}
 8004c56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c8a:	4b6c      	ldr	r3, [pc, #432]	; (8004e3c <HAL_I2C_Mem_Read+0x4e0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	4a6b      	ldr	r2, [pc, #428]	; (8004e40 <HAL_I2C_Mem_Read+0x4e4>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0a1a      	lsrs	r2, r3, #8
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	00da      	lsls	r2, r3, #3
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d118      	bne.n	8004ce2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004cd2:	b662      	cpsie	i
}
 8004cd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e0a6      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d1d9      	bne.n	8004ca4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004d32:	b662      	cpsie	i
}
 8004d34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	b2d2      	uxtb	r2, r2
 8004d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d68:	e04e      	b.n	8004e08 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 fb90 	bl	8005494 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e058      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d124      	bne.n	8004e08 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	691a      	ldr	r2, [r3, #16]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df2:	3b01      	subs	r3, #1
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f47f ae88 	bne.w	8004b22 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e000      	b.n	8004e30 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004e2e:	2302      	movs	r3, #2
  }
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3728      	adds	r7, #40	; 0x28
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	00010004 	.word	0x00010004
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	14f8b589 	.word	0x14f8b589

08004e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b088      	sub	sp, #32
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	461a      	mov	r2, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	817b      	strh	r3, [r7, #10]
 8004e56:	460b      	mov	r3, r1
 8004e58:	813b      	strh	r3, [r7, #8]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f960 	bl	8005140 <I2C_WaitOnFlagUntilTimeout>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00d      	beq.n	8004ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e94:	d103      	bne.n	8004e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e05f      	b.n	8004f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ea2:	897b      	ldrh	r3, [r7, #10]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	492d      	ldr	r1, [pc, #180]	; (8004f6c <I2C_RequestMemoryWrite+0x128>)
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f9bb 	bl	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e04c      	b.n	8004f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	617b      	str	r3, [r7, #20]
 8004edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee0:	6a39      	ldr	r1, [r7, #32]
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fa46 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00d      	beq.n	8004f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d107      	bne.n	8004f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e02b      	b.n	8004f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f10:	893b      	ldrh	r3, [r7, #8]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	611a      	str	r2, [r3, #16]
 8004f1a:	e021      	b.n	8004f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f1c:	893b      	ldrh	r3, [r7, #8]
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	6a39      	ldr	r1, [r7, #32]
 8004f2e:	68f8      	ldr	r0, [r7, #12]
 8004f30:	f000 fa20 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00d      	beq.n	8004f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d107      	bne.n	8004f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e005      	b.n	8004f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f56:	893b      	ldrh	r3, [r7, #8]
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	00010002 	.word	0x00010002

08004f70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	817b      	strh	r3, [r7, #10]
 8004f82:	460b      	mov	r3, r1
 8004f84:	813b      	strh	r3, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f98:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 f8c2 	bl	8005140 <I2C_WaitOnFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd0:	d103      	bne.n	8004fda <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e0aa      	b.n	8005134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	6a3a      	ldr	r2, [r7, #32]
 8004ff2:	4952      	ldr	r1, [pc, #328]	; (800513c <I2C_RequestMemoryRead+0x1cc>)
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f91d 	bl	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e097      	b.n	8005134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501c:	6a39      	ldr	r1, [r7, #32]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f9a8 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	2b04      	cmp	r3, #4
 8005030:	d107      	bne.n	8005042 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005040:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e076      	b.n	8005134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d105      	bne.n	8005058 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800504c:	893b      	ldrh	r3, [r7, #8]
 800504e:	b2da      	uxtb	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	611a      	str	r2, [r3, #16]
 8005056:	e021      	b.n	800509c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005058:	893b      	ldrh	r3, [r7, #8]
 800505a:	0a1b      	lsrs	r3, r3, #8
 800505c:	b29b      	uxth	r3, r3
 800505e:	b2da      	uxtb	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	6a39      	ldr	r1, [r7, #32]
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f982 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00d      	beq.n	8005092 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2b04      	cmp	r3, #4
 800507c:	d107      	bne.n	800508e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e050      	b.n	8005134 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005092:	893b      	ldrh	r3, [r7, #8]
 8005094:	b2da      	uxtb	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800509c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509e:	6a39      	ldr	r1, [r7, #32]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f967 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d107      	bne.n	80050c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e035      	b.n	8005134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	2200      	movs	r2, #0
 80050e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f82b 	bl	8005140 <I2C_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fe:	d103      	bne.n	8005108 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005106:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e013      	b.n	8005134 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800510c:	897b      	ldrh	r3, [r7, #10]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	4906      	ldr	r1, [pc, #24]	; (800513c <I2C_RequestMemoryRead+0x1cc>)
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f886 	bl	8005234 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e000      	b.n	8005134 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	00010002 	.word	0x00010002

08005140 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	603b      	str	r3, [r7, #0]
 800514c:	4613      	mov	r3, r2
 800514e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005150:	e048      	b.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d044      	beq.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800515a:	f7fe fc47 	bl	80039ec <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d302      	bcc.n	8005170 <I2C_WaitOnFlagUntilTimeout+0x30>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d139      	bne.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	0c1b      	lsrs	r3, r3, #16
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10d      	bne.n	8005196 <I2C_WaitOnFlagUntilTimeout+0x56>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	43da      	mvns	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4013      	ands	r3, r2
 8005186:	b29b      	uxth	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	e00c      	b.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	43da      	mvns	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	4013      	ands	r3, r2
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bf0c      	ite	eq
 80051a8:	2301      	moveq	r3, #1
 80051aa:	2300      	movne	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d116      	bne.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e023      	b.n	800522c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d10d      	bne.n	800520a <I2C_WaitOnFlagUntilTimeout+0xca>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	43da      	mvns	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	e00c      	b.n	8005224 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	43da      	mvns	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	429a      	cmp	r2, r3
 8005228:	d093      	beq.n	8005152 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005242:	e071      	b.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005252:	d123      	bne.n	800529c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005262:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800526c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	f043 0204 	orr.w	r2, r3, #4
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e067      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d041      	beq.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a4:	f7fe fba2 	bl	80039ec <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d302      	bcc.n	80052ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d136      	bne.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	0c1b      	lsrs	r3, r3, #16
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10c      	bne.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	43da      	mvns	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4013      	ands	r3, r2
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf14      	ite	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	2300      	moveq	r3, #0
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	e00b      	b.n	80052f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	43da      	mvns	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4013      	ands	r3, r2
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e021      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	0c1b      	lsrs	r3, r3, #16
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10c      	bne.n	800534c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	43da      	mvns	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	bf14      	ite	ne
 8005344:	2301      	movne	r3, #1
 8005346:	2300      	moveq	r3, #0
 8005348:	b2db      	uxtb	r3, r3
 800534a:	e00b      	b.n	8005364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf14      	ite	ne
 800535e:	2301      	movne	r3, #1
 8005360:	2300      	moveq	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f af6d 	bne.w	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005380:	e034      	b.n	80053ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f8e3 	bl	800554e <I2C_IsAcknowledgeFailed>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e034      	b.n	80053fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d028      	beq.n	80053ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539a:	f7fe fb27 	bl	80039ec <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d11d      	bne.n	80053ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d016      	beq.n	80053ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f043 0220 	orr.w	r2, r3, #32
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e007      	b.n	80053fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695b      	ldr	r3, [r3, #20]
 80053f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f6:	2b80      	cmp	r3, #128	; 0x80
 80053f8:	d1c3      	bne.n	8005382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005410:	e034      	b.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 f89b 	bl	800554e <I2C_IsAcknowledgeFailed>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e034      	b.n	800548c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d028      	beq.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fe fadf 	bl	80039ec <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11d      	bne.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b04      	cmp	r3, #4
 800544c:	d016      	beq.n	800547c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	f043 0220 	orr.w	r2, r3, #32
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e007      	b.n	800548c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d1c3      	bne.n	8005412 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054a0:	e049      	b.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b10      	cmp	r3, #16
 80054ae:	d119      	bne.n	80054e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0210 	mvn.w	r2, #16
 80054b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e030      	b.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054e4:	f7fe fa82 	bl	80039ec <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d302      	bcc.n	80054fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d11d      	bne.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b40      	cmp	r3, #64	; 0x40
 8005506:	d016      	beq.n	8005536 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e007      	b.n	8005546 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d1ae      	bne.n	80054a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005564:	d11b      	bne.n	800559e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800556e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2220      	movs	r2, #32
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bc80      	pop	{r7}
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e272      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8087 	beq.w	80056da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055cc:	4b92      	ldr	r3, [pc, #584]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 030c 	and.w	r3, r3, #12
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d00c      	beq.n	80055f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055d8:	4b8f      	ldr	r3, [pc, #572]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f003 030c 	and.w	r3, r3, #12
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d112      	bne.n	800560a <HAL_RCC_OscConfig+0x5e>
 80055e4:	4b8c      	ldr	r3, [pc, #560]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d10b      	bne.n	800560a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f2:	4b89      	ldr	r3, [pc, #548]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d06c      	beq.n	80056d8 <HAL_RCC_OscConfig+0x12c>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d168      	bne.n	80056d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e24c      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005612:	d106      	bne.n	8005622 <HAL_RCC_OscConfig+0x76>
 8005614:	4b80      	ldr	r3, [pc, #512]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a7f      	ldr	r2, [pc, #508]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800561a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e02e      	b.n	8005680 <HAL_RCC_OscConfig+0xd4>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10c      	bne.n	8005644 <HAL_RCC_OscConfig+0x98>
 800562a:	4b7b      	ldr	r3, [pc, #492]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a7a      	ldr	r2, [pc, #488]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	4b78      	ldr	r3, [pc, #480]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a77      	ldr	r2, [pc, #476]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800563c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e01d      	b.n	8005680 <HAL_RCC_OscConfig+0xd4>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800564c:	d10c      	bne.n	8005668 <HAL_RCC_OscConfig+0xbc>
 800564e:	4b72      	ldr	r3, [pc, #456]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a71      	ldr	r2, [pc, #452]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	4b6f      	ldr	r3, [pc, #444]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a6e      	ldr	r2, [pc, #440]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e00b      	b.n	8005680 <HAL_RCC_OscConfig+0xd4>
 8005668:	4b6b      	ldr	r3, [pc, #428]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6a      	ldr	r2, [pc, #424]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800566e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4b68      	ldr	r3, [pc, #416]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a67      	ldr	r2, [pc, #412]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800567a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d013      	beq.n	80056b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005688:	f7fe f9b0 	bl	80039ec <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005690:	f7fe f9ac 	bl	80039ec <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e200      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	4b5d      	ldr	r3, [pc, #372]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0f0      	beq.n	8005690 <HAL_RCC_OscConfig+0xe4>
 80056ae:	e014      	b.n	80056da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b0:	f7fe f99c 	bl	80039ec <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b8:	f7fe f998 	bl	80039ec <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	; 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e1ec      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ca:	4b53      	ldr	r3, [pc, #332]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x10c>
 80056d6:	e000      	b.n	80056da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d063      	beq.n	80057ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056e6:	4b4c      	ldr	r3, [pc, #304]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f003 030c 	and.w	r3, r3, #12
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00b      	beq.n	800570a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80056f2:	4b49      	ldr	r3, [pc, #292]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 030c 	and.w	r3, r3, #12
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d11c      	bne.n	8005738 <HAL_RCC_OscConfig+0x18c>
 80056fe:	4b46      	ldr	r3, [pc, #280]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d116      	bne.n	8005738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570a:	4b43      	ldr	r3, [pc, #268]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_RCC_OscConfig+0x176>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e1c0      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005722:	4b3d      	ldr	r3, [pc, #244]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4939      	ldr	r1, [pc, #228]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005732:	4313      	orrs	r3, r2
 8005734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005736:	e03a      	b.n	80057ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d020      	beq.n	8005782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005740:	4b36      	ldr	r3, [pc, #216]	; (800581c <HAL_RCC_OscConfig+0x270>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005746:	f7fe f951 	bl	80039ec <HAL_GetTick>
 800574a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800574e:	f7fe f94d 	bl	80039ec <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e1a1      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005760:	4b2d      	ldr	r3, [pc, #180]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576c:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	4927      	ldr	r1, [pc, #156]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 800577c:	4313      	orrs	r3, r2
 800577e:	600b      	str	r3, [r1, #0]
 8005780:	e015      	b.n	80057ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005782:	4b26      	ldr	r3, [pc, #152]	; (800581c <HAL_RCC_OscConfig+0x270>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005788:	f7fe f930 	bl	80039ec <HAL_GetTick>
 800578c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005790:	f7fe f92c 	bl	80039ec <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b02      	cmp	r3, #2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e180      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057a2:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d03a      	beq.n	8005830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d019      	beq.n	80057f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057c2:	4b17      	ldr	r3, [pc, #92]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057c8:	f7fe f910 	bl	80039ec <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d0:	f7fe f90c 	bl	80039ec <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e160      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057e2:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80057ee:	2001      	movs	r0, #1
 80057f0:	f000 face 	bl	8005d90 <RCC_Delay>
 80057f4:	e01c      	b.n	8005830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <HAL_RCC_OscConfig+0x274>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057fc:	f7fe f8f6 	bl	80039ec <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005802:	e00f      	b.n	8005824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005804:	f7fe f8f2 	bl	80039ec <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d908      	bls.n	8005824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e146      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	42420000 	.word	0x42420000
 8005820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005824:	4b92      	ldr	r3, [pc, #584]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e9      	bne.n	8005804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80a6 	beq.w	800598a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005842:	4b8b      	ldr	r3, [pc, #556]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	4b88      	ldr	r3, [pc, #544]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	4a87      	ldr	r2, [pc, #540]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005858:	61d3      	str	r3, [r2, #28]
 800585a:	4b85      	ldr	r3, [pc, #532]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005866:	2301      	movs	r3, #1
 8005868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586a:	4b82      	ldr	r3, [pc, #520]	; (8005a74 <HAL_RCC_OscConfig+0x4c8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d118      	bne.n	80058a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005876:	4b7f      	ldr	r3, [pc, #508]	; (8005a74 <HAL_RCC_OscConfig+0x4c8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a7e      	ldr	r2, [pc, #504]	; (8005a74 <HAL_RCC_OscConfig+0x4c8>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005882:	f7fe f8b3 	bl	80039ec <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588a:	f7fe f8af 	bl	80039ec <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b64      	cmp	r3, #100	; 0x64
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e103      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589c:	4b75      	ldr	r3, [pc, #468]	; (8005a74 <HAL_RCC_OscConfig+0x4c8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d106      	bne.n	80058be <HAL_RCC_OscConfig+0x312>
 80058b0:	4b6f      	ldr	r3, [pc, #444]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	4a6e      	ldr	r2, [pc, #440]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058b6:	f043 0301 	orr.w	r3, r3, #1
 80058ba:	6213      	str	r3, [r2, #32]
 80058bc:	e02d      	b.n	800591a <HAL_RCC_OscConfig+0x36e>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10c      	bne.n	80058e0 <HAL_RCC_OscConfig+0x334>
 80058c6:	4b6a      	ldr	r3, [pc, #424]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	4a69      	ldr	r2, [pc, #420]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	6213      	str	r3, [r2, #32]
 80058d2:	4b67      	ldr	r3, [pc, #412]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	4a66      	ldr	r2, [pc, #408]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058d8:	f023 0304 	bic.w	r3, r3, #4
 80058dc:	6213      	str	r3, [r2, #32]
 80058de:	e01c      	b.n	800591a <HAL_RCC_OscConfig+0x36e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b05      	cmp	r3, #5
 80058e6:	d10c      	bne.n	8005902 <HAL_RCC_OscConfig+0x356>
 80058e8:	4b61      	ldr	r3, [pc, #388]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	4a60      	ldr	r2, [pc, #384]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058ee:	f043 0304 	orr.w	r3, r3, #4
 80058f2:	6213      	str	r3, [r2, #32]
 80058f4:	4b5e      	ldr	r3, [pc, #376]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	4a5d      	ldr	r2, [pc, #372]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	6213      	str	r3, [r2, #32]
 8005900:	e00b      	b.n	800591a <HAL_RCC_OscConfig+0x36e>
 8005902:	4b5b      	ldr	r3, [pc, #364]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	4a5a      	ldr	r2, [pc, #360]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	6213      	str	r3, [r2, #32]
 800590e:	4b58      	ldr	r3, [pc, #352]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	4a57      	ldr	r2, [pc, #348]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005914:	f023 0304 	bic.w	r3, r3, #4
 8005918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d015      	beq.n	800594e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005922:	f7fe f863 	bl	80039ec <HAL_GetTick>
 8005926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005928:	e00a      	b.n	8005940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fe f85f 	bl	80039ec <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e0b1      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005940:	4b4b      	ldr	r3, [pc, #300]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ee      	beq.n	800592a <HAL_RCC_OscConfig+0x37e>
 800594c:	e014      	b.n	8005978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594e:	f7fe f84d 	bl	80039ec <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005954:	e00a      	b.n	800596c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005956:	f7fe f849 	bl	80039ec <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	f241 3288 	movw	r2, #5000	; 0x1388
 8005964:	4293      	cmp	r3, r2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e09b      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800596c:	4b40      	ldr	r3, [pc, #256]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1ee      	bne.n	8005956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597e:	4b3c      	ldr	r3, [pc, #240]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 8087 	beq.w	8005aa2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005994:	4b36      	ldr	r3, [pc, #216]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b08      	cmp	r3, #8
 800599e:	d061      	beq.n	8005a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d146      	bne.n	8005a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a8:	4b33      	ldr	r3, [pc, #204]	; (8005a78 <HAL_RCC_OscConfig+0x4cc>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ae:	f7fe f81d 	bl	80039ec <HAL_GetTick>
 80059b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b6:	f7fe f819 	bl	80039ec <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e06d      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059c8:	4b29      	ldr	r3, [pc, #164]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f0      	bne.n	80059b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a1b      	ldr	r3, [r3, #32]
 80059d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059dc:	d108      	bne.n	80059f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059de:	4b24      	ldr	r3, [pc, #144]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	4921      	ldr	r1, [pc, #132]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f0:	4b1f      	ldr	r3, [pc, #124]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a19      	ldr	r1, [r3, #32]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	430b      	orrs	r3, r1
 8005a02:	491b      	ldr	r1, [pc, #108]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <HAL_RCC_OscConfig+0x4cc>)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a0e:	f7fd ffed 	bl	80039ec <HAL_GetTick>
 8005a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fd ffe9 	bl	80039ec <HAL_GetTick>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e03d      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a28:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d0f0      	beq.n	8005a16 <HAL_RCC_OscConfig+0x46a>
 8005a34:	e035      	b.n	8005aa2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a36:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <HAL_RCC_OscConfig+0x4cc>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fd ffd6 	bl	80039ec <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a44:	f7fd ffd2 	bl	80039ec <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e026      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <HAL_RCC_OscConfig+0x4c4>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0x498>
 8005a62:	e01e      	b.n	8005aa2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d107      	bne.n	8005a7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e019      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40007000 	.word	0x40007000
 8005a78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCC_OscConfig+0x500>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d001      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40021000 	.word	0x40021000

08005ab0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0d0      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac4:	4b6a      	ldr	r3, [pc, #424]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d910      	bls.n	8005af4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad2:	4b67      	ldr	r3, [pc, #412]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f023 0207 	bic.w	r2, r3, #7
 8005ada:	4965      	ldr	r1, [pc, #404]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ae2:	4b63      	ldr	r3, [pc, #396]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d001      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0b8      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d020      	beq.n	8005b42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b0c:	4b59      	ldr	r3, [pc, #356]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4a58      	ldr	r2, [pc, #352]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b24:	4b53      	ldr	r3, [pc, #332]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a52      	ldr	r2, [pc, #328]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b30:	4b50      	ldr	r3, [pc, #320]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	494d      	ldr	r1, [pc, #308]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d040      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d107      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d115      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e07f      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d107      	bne.n	8005b7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6e:	4b41      	ldr	r3, [pc, #260]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d109      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e073      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7e:	4b3d      	ldr	r3, [pc, #244]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e06b      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b8e:	4b39      	ldr	r3, [pc, #228]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	f023 0203 	bic.w	r2, r3, #3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4936      	ldr	r1, [pc, #216]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ba0:	f7fd ff24 	bl	80039ec <HAL_GetTick>
 8005ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba8:	f7fd ff20 	bl	80039ec <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e053      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f003 020c 	and.w	r2, r3, #12
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d1eb      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd0:	4b27      	ldr	r3, [pc, #156]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d210      	bcs.n	8005c00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 0207 	bic.w	r2, r3, #7
 8005be6:	4922      	ldr	r1, [pc, #136]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bee:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_RCC_ClockConfig+0x1c0>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e032      	b.n	8005c66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d008      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c0c:	4b19      	ldr	r3, [pc, #100]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4916      	ldr	r1, [pc, #88]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d009      	beq.n	8005c3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c2a:	4b12      	ldr	r3, [pc, #72]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	490e      	ldr	r1, [pc, #56]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c3e:	f000 f821 	bl	8005c84 <HAL_RCC_GetSysClockFreq>
 8005c42:	4602      	mov	r2, r0
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCC_ClockConfig+0x1c4>)
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f003 030f 	and.w	r3, r3, #15
 8005c4e:	490a      	ldr	r1, [pc, #40]	; (8005c78 <HAL_RCC_ClockConfig+0x1c8>)
 8005c50:	5ccb      	ldrb	r3, [r1, r3]
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	4a09      	ldr	r2, [pc, #36]	; (8005c7c <HAL_RCC_ClockConfig+0x1cc>)
 8005c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c5a:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <HAL_RCC_ClockConfig+0x1d0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fd fe82 	bl	8003968 <HAL_InitTick>

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	40022000 	.word	0x40022000
 8005c74:	40021000 	.word	0x40021000
 8005c78:	0800b2f8 	.word	0x0800b2f8
 8005c7c:	20000000 	.word	0x20000000
 8005c80:	20000004 	.word	0x20000004

08005c84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60bb      	str	r3, [r7, #8]
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	2300      	movs	r3, #0
 8005c98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c9e:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 030c 	and.w	r3, r3, #12
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d002      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x30>
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_GetSysClockFreq+0x36>
 8005cb2:	e027      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005cb4:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8005cb6:	613b      	str	r3, [r7, #16]
      break;
 8005cb8:	e027      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	0c9b      	lsrs	r3, r3, #18
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a17      	ldr	r2, [pc, #92]	; (8005d20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cc4:	5cd3      	ldrb	r3, [r2, r3]
 8005cc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cd2:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	0c5b      	lsrs	r3, r3, #17
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005cde:	5cd3      	ldrb	r3, [r2, r3]
 8005ce0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a0d      	ldr	r2, [pc, #52]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8005ce6:	fb03 f202 	mul.w	r2, r3, r2
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	e004      	b.n	8005cfe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005cf8:	fb02 f303 	mul.w	r3, r2, r3
 8005cfc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	613b      	str	r3, [r7, #16]
      break;
 8005d02:	e002      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x98>)
 8005d06:	613b      	str	r3, [r7, #16]
      break;
 8005d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d0a:	693b      	ldr	r3, [r7, #16]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	007a1200 	.word	0x007a1200
 8005d20:	0800b310 	.word	0x0800b310
 8005d24:	0800b320 	.word	0x0800b320
 8005d28:	003d0900 	.word	0x003d0900

08005d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d30:	4b02      	ldr	r3, [pc, #8]	; (8005d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr
 8005d3c:	20000000 	.word	0x20000000

08005d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d44:	f7ff fff2 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4903      	ldr	r1, [pc, #12]	; (8005d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40021000 	.word	0x40021000
 8005d64:	0800b308 	.word	0x0800b308

08005d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d6c:	f7ff ffde 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d70:	4602      	mov	r2, r0
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	0adb      	lsrs	r3, r3, #11
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	4903      	ldr	r1, [pc, #12]	; (8005d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d7e:	5ccb      	ldrb	r3, [r1, r3]
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	0800b308 	.word	0x0800b308

08005d90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <RCC_Delay+0x34>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <RCC_Delay+0x38>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	0a5b      	lsrs	r3, r3, #9
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005dac:	bf00      	nop
  }
  while (Delay --);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1e5a      	subs	r2, r3, #1
 8005db2:	60fa      	str	r2, [r7, #12]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f9      	bne.n	8005dac <RCC_Delay+0x1c>
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	10624dd3 	.word	0x10624dd3

08005dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e041      	b.n	8005e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fd f956 	bl	80030a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f000 fc18 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
	...

08005e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d001      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e03a      	b.n	8005efa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a18      	ldr	r2, [pc, #96]	; (8005f04 <HAL_TIM_Base_Start_IT+0x98>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x58>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x58>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <HAL_TIM_Base_Start_IT+0x9c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x58>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <HAL_TIM_Base_Start_IT+0xa0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d111      	bne.n	8005ee8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d010      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	e007      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800

08005f10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d101      	bne.n	8005f22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e041      	b.n	8005fa6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d106      	bne.n	8005f3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f839 	bl	8005fae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f000 fb76 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <HAL_TIM_PWM_Start+0x24>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e022      	b.n	800602a <HAL_TIM_PWM_Start+0x6a>
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d109      	bne.n	8005ffe <HAL_TIM_PWM_Start+0x3e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	e015      	b.n	800602a <HAL_TIM_PWM_Start+0x6a>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b08      	cmp	r3, #8
 8006002:	d109      	bne.n	8006018 <HAL_TIM_PWM_Start+0x58>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	bf14      	ite	ne
 8006010:	2301      	movne	r3, #1
 8006012:	2300      	moveq	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	e008      	b.n	800602a <HAL_TIM_PWM_Start+0x6a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e05e      	b.n	80060f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d104      	bne.n	8006042 <HAL_TIM_PWM_Start+0x82>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006040:	e013      	b.n	800606a <HAL_TIM_PWM_Start+0xaa>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b04      	cmp	r3, #4
 8006046:	d104      	bne.n	8006052 <HAL_TIM_PWM_Start+0x92>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006050:	e00b      	b.n	800606a <HAL_TIM_PWM_Start+0xaa>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d104      	bne.n	8006062 <HAL_TIM_PWM_Start+0xa2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006060:	e003      	b.n	800606a <HAL_TIM_PWM_Start+0xaa>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2201      	movs	r2, #1
 8006070:	6839      	ldr	r1, [r7, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fd70 	bl	8006b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1e      	ldr	r2, [pc, #120]	; (80060f8 <HAL_TIM_PWM_Start+0x138>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d107      	bne.n	8006092 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <HAL_TIM_PWM_Start+0x138>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00e      	beq.n	80060ba <HAL_TIM_PWM_Start+0xfa>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a4:	d009      	beq.n	80060ba <HAL_TIM_PWM_Start+0xfa>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a14      	ldr	r2, [pc, #80]	; (80060fc <HAL_TIM_PWM_Start+0x13c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d004      	beq.n	80060ba <HAL_TIM_PWM_Start+0xfa>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a12      	ldr	r2, [pc, #72]	; (8006100 <HAL_TIM_PWM_Start+0x140>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d111      	bne.n	80060de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	d010      	beq.n	80060ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060dc:	e007      	b.n	80060ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40012c00 	.word	0x40012c00
 80060fc:	40000400 	.word	0x40000400
 8006100:	40000800 	.word	0x40000800

08006104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d020      	beq.n	8006168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01b      	beq.n	8006168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f06f 0202 	mvn.w	r2, #2
 8006138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa5a 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 8006154:	e005      	b.n	8006162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa4d 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa5c 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d020      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01b      	beq.n	80061b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0204 	mvn.w	r2, #4
 8006184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699b      	ldr	r3, [r3, #24]
 8006192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fa34 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80061a0:	e005      	b.n	80061ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa27 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 fa36 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d020      	beq.n	8006200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0208 	mvn.w	r2, #8
 80061d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2204      	movs	r2, #4
 80061d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa0e 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 80061ec:	e005      	b.n	80061fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fa01 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa10 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	d020      	beq.n	800624c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01b      	beq.n	800624c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0210 	mvn.w	r2, #16
 800621c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2208      	movs	r2, #8
 8006222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f9e8 	bl	8006608 <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9db 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f9ea 	bl	800661a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00c      	beq.n	8006270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d007      	beq.n	8006270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0201 	mvn.w	r2, #1
 8006268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fb f9a2 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00c      	beq.n	8006294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fced 	bl	8006c6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00c      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9ba 	bl	800662c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00c      	beq.n	80062dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f003 0320 	and.w	r3, r3, #32
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f06f 0220 	mvn.w	r2, #32
 80062d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fcc0 	bl	8006c5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062dc:	bf00      	nop
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062fe:	2302      	movs	r3, #2
 8006300:	e0ae      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b0c      	cmp	r3, #12
 800630e:	f200 809f 	bhi.w	8006450 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	0800634d 	.word	0x0800634d
 800631c:	08006451 	.word	0x08006451
 8006320:	08006451 	.word	0x08006451
 8006324:	08006451 	.word	0x08006451
 8006328:	0800638d 	.word	0x0800638d
 800632c:	08006451 	.word	0x08006451
 8006330:	08006451 	.word	0x08006451
 8006334:	08006451 	.word	0x08006451
 8006338:	080063cf 	.word	0x080063cf
 800633c:	08006451 	.word	0x08006451
 8006340:	08006451 	.word	0x08006451
 8006344:	08006451 	.word	0x08006451
 8006348:	0800640f 	.word	0x0800640f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f9e2 	bl	800671c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699a      	ldr	r2, [r3, #24]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0208 	orr.w	r2, r2, #8
 8006366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	699a      	ldr	r2, [r3, #24]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0204 	bic.w	r2, r2, #4
 8006376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6999      	ldr	r1, [r3, #24]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	619a      	str	r2, [r3, #24]
      break;
 800638a:	e064      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68b9      	ldr	r1, [r7, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f000 fa28 	bl	80067e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699a      	ldr	r2, [r3, #24]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6999      	ldr	r1, [r3, #24]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	619a      	str	r2, [r3, #24]
      break;
 80063cc:	e043      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68b9      	ldr	r1, [r7, #8]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fa71 	bl	80068bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0208 	orr.w	r2, r2, #8
 80063e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0204 	bic.w	r2, r2, #4
 80063f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69d9      	ldr	r1, [r3, #28]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	430a      	orrs	r2, r1
 800640a:	61da      	str	r2, [r3, #28]
      break;
 800640c:	e023      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68b9      	ldr	r1, [r7, #8]
 8006414:	4618      	mov	r0, r3
 8006416:	f000 fabb 	bl	8006990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69da      	ldr	r2, [r3, #28]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69d9      	ldr	r1, [r3, #28]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	021a      	lsls	r2, r3, #8
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	430a      	orrs	r2, r1
 800644c:	61da      	str	r2, [r3, #28]
      break;
 800644e:	e002      	b.n	8006456 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800645e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIM_ConfigClockSource+0x1c>
 8006480:	2302      	movs	r3, #2
 8006482:	e0b4      	b.n	80065ee <HAL_TIM_ConfigClockSource+0x186>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064bc:	d03e      	beq.n	800653c <HAL_TIM_ConfigClockSource+0xd4>
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064c2:	f200 8087 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	f000 8086 	beq.w	80065da <HAL_TIM_ConfigClockSource+0x172>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064d2:	d87f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b70      	cmp	r3, #112	; 0x70
 80064d6:	d01a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xa6>
 80064d8:	2b70      	cmp	r3, #112	; 0x70
 80064da:	d87b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b60      	cmp	r3, #96	; 0x60
 80064de:	d050      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x11a>
 80064e0:	2b60      	cmp	r3, #96	; 0x60
 80064e2:	d877      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b50      	cmp	r3, #80	; 0x50
 80064e6:	d03c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0xfa>
 80064e8:	2b50      	cmp	r3, #80	; 0x50
 80064ea:	d873      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d058      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x13a>
 80064f0:	2b40      	cmp	r3, #64	; 0x40
 80064f2:	d86f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b30      	cmp	r3, #48	; 0x30
 80064f6:	d064      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	2b30      	cmp	r3, #48	; 0x30
 80064fa:	d86b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d060      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d867      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006508:	2b10      	cmp	r3, #16
 800650a:	d05a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 800650c:	e062      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800651e:	f000 fafc 	bl	8006b1a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	609a      	str	r2, [r3, #8]
      break;
 800653a:	e04f      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800654c:	f000 fae5 	bl	8006b1a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800655e:	609a      	str	r2, [r3, #8]
      break;
 8006560:	e03c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	461a      	mov	r2, r3
 8006570:	f000 fa5c 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2150      	movs	r1, #80	; 0x50
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fab3 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8006580:	e02c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 fa7a 	bl	8006a88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2160      	movs	r1, #96	; 0x60
 800659a:	4618      	mov	r0, r3
 800659c:	f000 faa3 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80065a0:	e01c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 fa3c 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2140      	movs	r1, #64	; 0x40
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fa93 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e00c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 fa8a 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 80065d2:	e003      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e000      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bc80      	pop	{r7}
 8006618:	4770      	bx	lr

0800661a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006622:	bf00      	nop
 8006624:	370c      	adds	r7, #12
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	bc80      	pop	{r7}
 800663c:	4770      	bx	lr
	...

08006640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2f      	ldr	r2, [pc, #188]	; (8006710 <TIM_Base_SetConfig+0xd0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00b      	beq.n	8006670 <TIM_Base_SetConfig+0x30>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665e:	d007      	beq.n	8006670 <TIM_Base_SetConfig+0x30>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a2c      	ldr	r2, [pc, #176]	; (8006714 <TIM_Base_SetConfig+0xd4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_Base_SetConfig+0x30>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a2b      	ldr	r2, [pc, #172]	; (8006718 <TIM_Base_SetConfig+0xd8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d108      	bne.n	8006682 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a22      	ldr	r2, [pc, #136]	; (8006710 <TIM_Base_SetConfig+0xd0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00b      	beq.n	80066a2 <TIM_Base_SetConfig+0x62>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006690:	d007      	beq.n	80066a2 <TIM_Base_SetConfig+0x62>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <TIM_Base_SetConfig+0xd4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_Base_SetConfig+0x62>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <TIM_Base_SetConfig+0xd8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d108      	bne.n	80066b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689a      	ldr	r2, [r3, #8]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a0d      	ldr	r2, [pc, #52]	; (8006710 <TIM_Base_SetConfig+0xd0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d103      	bne.n	80066e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691a      	ldr	r2, [r3, #16]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f023 0201 	bic.w	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	611a      	str	r2, [r3, #16]
  }
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800

0800671c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	f023 0201 	bic.w	r2, r3, #1
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f023 0303 	bic.w	r3, r3, #3
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f023 0302 	bic.w	r3, r3, #2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1c      	ldr	r2, [pc, #112]	; (80067e4 <TIM_OC1_SetConfig+0xc8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d10c      	bne.n	8006792 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 0308 	bic.w	r3, r3, #8
 800677e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f023 0304 	bic.w	r3, r3, #4
 8006790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a13      	ldr	r2, [pc, #76]	; (80067e4 <TIM_OC1_SetConfig+0xc8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d111      	bne.n	80067be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	621a      	str	r2, [r3, #32]
}
 80067d8:	bf00      	nop
 80067da:	371c      	adds	r7, #28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	40012c00 	.word	0x40012c00

080067e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f023 0210 	bic.w	r2, r3, #16
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0320 	bic.w	r3, r3, #32
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1d      	ldr	r2, [pc, #116]	; (80068b8 <TIM_OC2_SetConfig+0xd0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10d      	bne.n	8006864 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	011b      	lsls	r3, r3, #4
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	4313      	orrs	r3, r2
 800685a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006862:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <TIM_OC2_SetConfig+0xd0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d113      	bne.n	8006894 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr
 80068b8:	40012c00 	.word	0x40012c00

080068bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	021b      	lsls	r3, r3, #8
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1d      	ldr	r2, [pc, #116]	; (800698c <TIM_OC3_SetConfig+0xd0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d10d      	bne.n	8006936 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	4313      	orrs	r3, r2
 800692c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a14      	ldr	r2, [pc, #80]	; (800698c <TIM_OC3_SetConfig+0xd0>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d113      	bne.n	8006966 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800694c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	011b      	lsls	r3, r3, #4
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	4313      	orrs	r3, r2
 8006958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40012c00 	.word	0x40012c00

08006990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006990:	b480      	push	{r7}
 8006992:	b087      	sub	sp, #28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	021b      	lsls	r3, r3, #8
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	031b      	lsls	r3, r3, #12
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a0f      	ldr	r2, [pc, #60]	; (8006a28 <TIM_OC4_SetConfig+0x98>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d109      	bne.n	8006a04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	019b      	lsls	r3, r3, #6
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	693a      	ldr	r2, [r7, #16]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr
 8006a28:	40012c00 	.word	0x40012c00

08006a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 030a 	bic.w	r3, r3, #10
 8006a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr

08006a88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a1b      	ldr	r3, [r3, #32]
 8006a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0210 	bic.w	r2, r3, #16
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	031b      	lsls	r3, r3, #12
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	621a      	str	r2, [r3, #32]
}
 8006adc:	bf00      	nop
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f043 0307 	orr.w	r3, r3, #7
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bc80      	pop	{r7}
 8006b18:	4770      	bx	lr

08006b1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	021a      	lsls	r2, r3, #8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	609a      	str	r2, [r3, #8]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a1a      	ldr	r2, [r3, #32]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	43db      	mvns	r3, r3
 8006b7a:	401a      	ands	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1a      	ldr	r2, [r3, #32]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	6879      	ldr	r1, [r7, #4]
 8006b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b90:	431a      	orrs	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	621a      	str	r2, [r3, #32]
}
 8006b96:	bf00      	nop
 8006b98:	371c      	adds	r7, #28
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e046      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a16      	ldr	r2, [pc, #88]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a12      	ldr	r2, [pc, #72]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3714      	adds	r7, #20
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800

08006c5c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bc80      	pop	{r7}
 8006c6c:	4770      	bx	lr

08006c6e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c76:	bf00      	nop
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e042      	b.n	8006d18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fc fce4 	bl	8003674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	; 0x24
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 f845 	bl	8007d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	; 0x28
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d175      	bne.n	8006e2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_UART_Transmit+0x2c>
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e06e      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2221      	movs	r2, #33	; 0x21
 8006d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d5e:	f7fc fe45 	bl	80039ec <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d78:	d108      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e003      	b.n	8006d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d94:	e02e      	b.n	8006df4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fd22 	bl	80077ea <UART_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e03a      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	e007      	b.n	8006de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3301      	adds	r3, #1
 8006de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1cb      	bne.n	8006d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2200      	movs	r2, #0
 8006e06:	2140      	movs	r1, #64	; 0x40
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 fcee 	bl	80077ea <UART_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e2c:	2302      	movs	r3, #2
  }
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08c      	sub	sp, #48	; 0x30
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	4613      	mov	r3, r2
 8006e44:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d156      	bne.n	8006f00 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d002      	beq.n	8006e5e <HAL_UART_Transmit_DMA+0x26>
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e04f      	b.n	8006f02 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	88fa      	ldrh	r2, [r7, #6]
 8006e6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	88fa      	ldrh	r2, [r7, #6]
 8006e72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2221      	movs	r2, #33	; 0x21
 8006e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	4a21      	ldr	r2, [pc, #132]	; (8006f0c <HAL_UART_Transmit_DMA+0xd4>)
 8006e88:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_UART_Transmit_DMA+0xd8>)
 8006e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	4a1f      	ldr	r2, [pc, #124]	; (8006f14 <HAL_UART_Transmit_DMA+0xdc>)
 8006e98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	f7fc ff2d 	bl	8003d18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ec6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3314      	adds	r3, #20
 8006ece:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	e853 3f00 	ldrex	r3, [r3]
 8006ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3314      	adds	r3, #20
 8006ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee8:	627a      	str	r2, [r7, #36]	; 0x24
 8006eea:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eec:	6a39      	ldr	r1, [r7, #32]
 8006eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ef0:	e841 2300 	strex	r3, r2, [r1]
 8006ef4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e5      	bne.n	8006ec8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	e000      	b.n	8006f02 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006f00:	2302      	movs	r3, #2
  }
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3730      	adds	r7, #48	; 0x30
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	08007539 	.word	0x08007539
 8006f10:	080075d3 	.word	0x080075d3
 8006f14:	08007757 	.word	0x08007757

08006f18 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b08c      	sub	sp, #48	; 0x30
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d146      	bne.n	8006fc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e03f      	b.n	8006fc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006f4e:	88fb      	ldrh	r3, [r7, #6]
 8006f50:	461a      	mov	r2, r3
 8006f52:	68b9      	ldr	r1, [r7, #8]
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fca1 	bl	800789c <UART_Start_Receive_DMA>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d125      	bne.n	8006fb4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f68:	2300      	movs	r3, #0
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	330c      	adds	r3, #12
 8006f84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f043 0310 	orr.w	r3, r3, #16
 8006f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	330c      	adds	r3, #12
 8006f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9e:	627a      	str	r2, [r7, #36]	; 0x24
 8006fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6a39      	ldr	r1, [r7, #32]
 8006fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e5      	bne.n	8006f7e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006fb2:	e002      	b.n	8006fba <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8006fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006fbe:	e000      	b.n	8006fc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
	...

08006fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b0ba      	sub	sp, #232	; 0xe8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800700a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10f      	bne.n	8007032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_UART_IRQHandler+0x66>
 800701e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fdd4 	bl	8007bd8 <UART_Receive_IT>
      return;
 8007030:	e25b      	b.n	80074ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80de 	beq.w	80071f8 <HAL_UART_IRQHandler+0x22c>
 800703c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 80d1 	beq.w	80071f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <HAL_UART_IRQHandler+0xae>
 8007062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007072:	f043 0201 	orr.w	r2, r3, #1
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <HAL_UART_IRQHandler+0xd2>
 8007086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007096:	f043 0202 	orr.w	r2, r3, #2
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00b      	beq.n	80070c2 <HAL_UART_IRQHandler+0xf6>
 80070aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	f043 0204 	orr.w	r2, r3, #4
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80070c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d011      	beq.n	80070f2 <HAL_UART_IRQHandler+0x126>
 80070ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d105      	bne.n	80070e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80070da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	f043 0208 	orr.w	r2, r3, #8
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	f000 81f2 	beq.w	80074e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007100:	f003 0320 	and.w	r3, r3, #32
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_UART_IRQHandler+0x14e>
 8007108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fd5f 	bl	8007bd8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f003 0308 	and.w	r3, r3, #8
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_UART_IRQHandler+0x17a>
 800713e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007142:	2b00      	cmp	r3, #0
 8007144:	d04f      	beq.n	80071e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fc69 	bl	8007a1e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d041      	beq.n	80071de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3314      	adds	r3, #20
 8007160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3314      	adds	r3, #20
 8007182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800718a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800719e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1d9      	bne.n	800715a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d013      	beq.n	80071d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	4a7e      	ldr	r2, [pc, #504]	; (80073ac <HAL_UART_IRQHandler+0x3e0>)
 80071b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fc fe48 	bl	8003e50 <HAL_DMA_Abort_IT>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d4:	e00e      	b.n	80071f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9a5 	bl	8007526 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071dc:	e00a      	b.n	80071f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9a1 	bl	8007526 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071e4:	e006      	b.n	80071f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f99d 	bl	8007526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80071f2:	e175      	b.n	80074e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	bf00      	nop
    return;
 80071f6:	e173      	b.n	80074e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	f040 814f 	bne.w	80074a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8148 	beq.w	80074a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 8141 	beq.w	80074a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	60bb      	str	r3, [r7, #8]
 8007232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80b6 	beq.w	80073b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8145 	beq.w	80074e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800725e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007262:	429a      	cmp	r2, r3
 8007264:	f080 813e 	bcs.w	80074e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800726e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	2b20      	cmp	r3, #32
 8007278:	f000 8088 	beq.w	800738c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	330c      	adds	r3, #12
 8007282:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800729a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80072a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80072ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80072b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80072b8:	e841 2300 	strex	r3, r2, [r1]
 80072bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80072c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1d9      	bne.n	800727c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3314      	adds	r3, #20
 80072ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80072d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80072f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80072f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80072fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e1      	bne.n	80072c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3314      	adds	r3, #20
 800730a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3314      	adds	r3, #20
 8007324:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007328:	66fa      	str	r2, [r7, #108]	; 0x6c
 800732a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800732e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e3      	bne.n	8007304 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2220      	movs	r2, #32
 8007340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	330c      	adds	r3, #12
 8007350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800735a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735c:	f023 0310 	bic.w	r3, r3, #16
 8007360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	330c      	adds	r3, #12
 800736a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800736e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007370:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800737c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e3      	bne.n	800734a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007386:	4618      	mov	r0, r3
 8007388:	f7fc fd26 	bl	8003dd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2202      	movs	r2, #2
 8007390:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800739a:	b29b      	uxth	r3, r3
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4619      	mov	r1, r3
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb ff94 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80073a8:	e09c      	b.n	80074e4 <HAL_UART_IRQHandler+0x518>
 80073aa:	bf00      	nop
 80073ac:	08007ae3 	.word	0x08007ae3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 808e 	beq.w	80074e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80073cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 8089 	beq.w	80074e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	330c      	adds	r3, #12
 80073dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	330c      	adds	r3, #12
 80073f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80073fa:	647a      	str	r2, [r7, #68]	; 0x44
 80073fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e3      	bne.n	80073d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3314      	adds	r3, #20
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	623b      	str	r3, [r7, #32]
   return(result);
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3314      	adds	r3, #20
 800742e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007432:	633a      	str	r2, [r7, #48]	; 0x30
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743a:	e841 2300 	strex	r3, r2, [r1]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e3      	bne.n	800740e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	e853 3f00 	ldrex	r3, [r3]
 8007462:	60fb      	str	r3, [r7, #12]
   return(result);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0310 	bic.w	r3, r3, #16
 800746a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007478:	61fa      	str	r2, [r7, #28]
 800747a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747c:	69b9      	ldr	r1, [r7, #24]
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	e841 2300 	strex	r3, r2, [r1]
 8007484:	617b      	str	r3, [r7, #20]
   return(result);
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e3      	bne.n	8007454 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007496:	4619      	mov	r1, r3
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7fb ff19 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800749e:	e023      	b.n	80074e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d009      	beq.n	80074c0 <HAL_UART_IRQHandler+0x4f4>
 80074ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fb26 	bl	8007b0a <UART_Transmit_IT>
    return;
 80074be:	e014      	b.n	80074ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <HAL_UART_IRQHandler+0x51e>
 80074cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fb65 	bl	8007ba8 <UART_EndTransmit_IT>
    return;
 80074de:	e004      	b.n	80074ea <HAL_UART_IRQHandler+0x51e>
    return;
 80074e0:	bf00      	nop
 80074e2:	e002      	b.n	80074ea <HAL_UART_IRQHandler+0x51e>
      return;
 80074e4:	bf00      	nop
 80074e6:	e000      	b.n	80074ea <HAL_UART_IRQHandler+0x51e>
      return;
 80074e8:	bf00      	nop
  }
}
 80074ea:	37e8      	adds	r7, #232	; 0xe8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800750a:	bf00      	nop
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	bc80      	pop	{r7}
 8007512:	4770      	bx	lr

08007514 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr

08007526 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	bc80      	pop	{r7}
 8007536:	4770      	bx	lr

08007538 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b090      	sub	sp, #64	; 0x40
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007544:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0320 	and.w	r3, r3, #32
 8007550:	2b00      	cmp	r3, #0
 8007552:	d137      	bne.n	80075c4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007556:	2200      	movs	r2, #0
 8007558:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800755a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3314      	adds	r3, #20
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	623b      	str	r3, [r7, #32]
   return(result);
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007570:	63bb      	str	r3, [r7, #56]	; 0x38
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3314      	adds	r3, #20
 8007578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800757a:	633a      	str	r2, [r7, #48]	; 0x30
 800757c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e5      	bne.n	800755a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800758e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	330c      	adds	r3, #12
 8007594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	60fb      	str	r3, [r7, #12]
   return(result);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075a4:	637b      	str	r3, [r7, #52]	; 0x34
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ae:	61fa      	str	r2, [r7, #28]
 80075b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	69b9      	ldr	r1, [r7, #24]
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	617b      	str	r3, [r7, #20]
   return(result);
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e5      	bne.n	800758e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075c2:	e002      	b.n	80075ca <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80075c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80075c6:	f7fb fe9f 	bl	8003308 <HAL_UART_TxCpltCallback>
}
 80075ca:	bf00      	nop
 80075cc:	3740      	adds	r7, #64	; 0x40
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	f7ff ff85 	bl	80074f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b09c      	sub	sp, #112	; 0x70
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0320 	and.w	r3, r3, #32
 8007606:	2b00      	cmp	r3, #0
 8007608:	d172      	bne.n	80076f0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	2200      	movs	r2, #0
 800760e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007622:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007626:	66bb      	str	r3, [r7, #104]	; 0x68
 8007628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	330c      	adds	r3, #12
 800762e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007630:	65ba      	str	r2, [r7, #88]	; 0x58
 8007632:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007636:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800763e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e5      	bne.n	8007610 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3314      	adds	r3, #20
 800764a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007656:	f023 0301 	bic.w	r3, r3, #1
 800765a:	667b      	str	r3, [r7, #100]	; 0x64
 800765c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3314      	adds	r3, #20
 8007662:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007664:	647a      	str	r2, [r7, #68]	; 0x44
 8007666:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800766a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800766c:	e841 2300 	strex	r3, r2, [r1]
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3314      	adds	r3, #20
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	623b      	str	r3, [r7, #32]
   return(result);
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	663b      	str	r3, [r7, #96]	; 0x60
 8007690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3314      	adds	r3, #20
 8007696:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007698:	633a      	str	r2, [r7, #48]	; 0x30
 800769a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800769e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e5      	bne.n	8007678 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ae:	2220      	movs	r2, #32
 80076b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d119      	bne.n	80076f0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	330c      	adds	r3, #12
 80076c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	e853 3f00 	ldrex	r3, [r3]
 80076ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0310 	bic.w	r3, r3, #16
 80076d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076dc:	61fa      	str	r2, [r7, #28]
 80076de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	69b9      	ldr	r1, [r7, #24]
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	617b      	str	r3, [r7, #20]
   return(result);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e5      	bne.n	80076bc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f2:	2200      	movs	r2, #0
 80076f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d106      	bne.n	800770c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007700:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007702:	4619      	mov	r1, r3
 8007704:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007706:	f7fb fde3 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800770a:	e002      	b.n	8007712 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800770c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800770e:	f7ff fef8 	bl	8007502 <HAL_UART_RxCpltCallback>
}
 8007712:	bf00      	nop
 8007714:	3770      	adds	r7, #112	; 0x70
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007732:	2b01      	cmp	r3, #1
 8007734:	d108      	bne.n	8007748 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800773a:	085b      	lsrs	r3, r3, #1
 800773c:	b29b      	uxth	r3, r3
 800773e:	4619      	mov	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7fb fdc5 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007746:	e002      	b.n	800774e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff fee3 	bl	8007514 <HAL_UART_RxHalfCpltCallback>
}
 800774e:	bf00      	nop
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf14      	ite	ne
 8007776:	2301      	movne	r3, #1
 8007778:	2300      	moveq	r3, #0
 800777a:	b2db      	uxtb	r3, r3
 800777c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b21      	cmp	r3, #33	; 0x21
 8007788:	d108      	bne.n	800779c <UART_DMAError+0x46>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	2200      	movs	r2, #0
 8007794:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007796:	68b8      	ldr	r0, [r7, #8]
 8007798:	f000 f91a 	bl	80079d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	bf14      	ite	ne
 80077aa:	2301      	movne	r3, #1
 80077ac:	2300      	moveq	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b22      	cmp	r3, #34	; 0x22
 80077bc:	d108      	bne.n	80077d0 <UART_DMAError+0x7a>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80077ca:	68b8      	ldr	r0, [r7, #8]
 80077cc:	f000 f927 	bl	8007a1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d4:	f043 0210 	orr.w	r2, r3, #16
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077dc:	68b8      	ldr	r0, [r7, #8]
 80077de:	f7ff fea2 	bl	8007526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b086      	sub	sp, #24
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	60f8      	str	r0, [r7, #12]
 80077f2:	60b9      	str	r1, [r7, #8]
 80077f4:	603b      	str	r3, [r7, #0]
 80077f6:	4613      	mov	r3, r2
 80077f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077fa:	e03b      	b.n	8007874 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d037      	beq.n	8007874 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007804:	f7fc f8f2 	bl	80039ec <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	6a3a      	ldr	r2, [r7, #32]
 8007810:	429a      	cmp	r2, r3
 8007812:	d302      	bcc.n	800781a <UART_WaitOnFlagUntilTimeout+0x30>
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e03a      	b.n	8007894 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f003 0304 	and.w	r3, r3, #4
 8007828:	2b00      	cmp	r3, #0
 800782a:	d023      	beq.n	8007874 <UART_WaitOnFlagUntilTimeout+0x8a>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b80      	cmp	r3, #128	; 0x80
 8007830:	d020      	beq.n	8007874 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b40      	cmp	r3, #64	; 0x40
 8007836:	d01d      	beq.n	8007874 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b08      	cmp	r3, #8
 8007844:	d116      	bne.n	8007874 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	617b      	str	r3, [r7, #20]
 800785a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f8de 	bl	8007a1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2208      	movs	r2, #8
 8007866:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e00f      	b.n	8007894 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4013      	ands	r3, r2
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	429a      	cmp	r2, r3
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	79fb      	ldrb	r3, [r7, #7]
 800788e:	429a      	cmp	r2, r3
 8007890:	d0b4      	beq.n	80077fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b098      	sub	sp, #96	; 0x60
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	88fa      	ldrh	r2, [r7, #6]
 80078b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2222      	movs	r2, #34	; 0x22
 80078c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c8:	4a3e      	ldr	r2, [pc, #248]	; (80079c4 <UART_Start_Receive_DMA+0x128>)
 80078ca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d0:	4a3d      	ldr	r2, [pc, #244]	; (80079c8 <UART_Start_Receive_DMA+0x12c>)
 80078d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d8:	4a3c      	ldr	r2, [pc, #240]	; (80079cc <UART_Start_Receive_DMA+0x130>)
 80078da:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e0:	2200      	movs	r2, #0
 80078e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80078e4:	f107 0308 	add.w	r3, r7, #8
 80078e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3304      	adds	r3, #4
 80078f4:	4619      	mov	r1, r3
 80078f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	88fb      	ldrh	r3, [r7, #6]
 80078fc:	f7fc fa0c 	bl	8003d18 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007900:	2300      	movs	r3, #0
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d019      	beq.n	8007952 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	330c      	adds	r3, #12
 8007924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007928:	e853 3f00 	ldrex	r3, [r3]
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007934:	65bb      	str	r3, [r7, #88]	; 0x58
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	330c      	adds	r3, #12
 800793c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800793e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007940:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007944:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800794c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e5      	bne.n	800791e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3314      	adds	r3, #20
 8007958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	f043 0301 	orr.w	r3, r3, #1
 8007968:	657b      	str	r3, [r7, #84]	; 0x54
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3314      	adds	r3, #20
 8007970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007972:	63ba      	str	r2, [r7, #56]	; 0x38
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007976:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007978:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800797a:	e841 2300 	strex	r3, r2, [r1]
 800797e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	3314      	adds	r3, #20
 800798c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	617b      	str	r3, [r7, #20]
   return(result);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800799c:	653b      	str	r3, [r7, #80]	; 0x50
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3314      	adds	r3, #20
 80079a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079a6:	627a      	str	r2, [r7, #36]	; 0x24
 80079a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6a39      	ldr	r1, [r7, #32]
 80079ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e5      	bne.n	8007986 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3760      	adds	r7, #96	; 0x60
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	080075ef 	.word	0x080075ef
 80079c8:	0800771b 	.word	0x0800771b
 80079cc:	08007757 	.word	0x08007757

080079d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b089      	sub	sp, #36	; 0x24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	330c      	adds	r3, #12
 80079de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	e853 3f00 	ldrex	r3, [r3]
 80079e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079ee:	61fb      	str	r3, [r7, #28]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	330c      	adds	r3, #12
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	61ba      	str	r2, [r7, #24]
 80079fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fc:	6979      	ldr	r1, [r7, #20]
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	e841 2300 	strex	r3, r2, [r1]
 8007a04:	613b      	str	r3, [r7, #16]
   return(result);
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1e5      	bne.n	80079d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8007a14:	bf00      	nop
 8007a16:	3724      	adds	r7, #36	; 0x24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr

08007a1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b095      	sub	sp, #84	; 0x54
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a46:	643a      	str	r2, [r7, #64]	; 0x40
 8007a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f023 0301 	bic.w	r3, r3, #1
 8007a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3314      	adds	r3, #20
 8007a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d119      	bne.n	8007aca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	f023 0310 	bic.w	r3, r3, #16
 8007aac:	647b      	str	r3, [r7, #68]	; 0x44
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab6:	61ba      	str	r2, [r7, #24]
 8007ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6979      	ldr	r1, [r7, #20]
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ad8:	bf00      	nop
 8007ada:	3754      	adds	r7, #84	; 0x54
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr

08007ae2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f7ff fd12 	bl	8007526 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b02:	bf00      	nop
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b21      	cmp	r3, #33	; 0x21
 8007b1c:	d13e      	bne.n	8007b9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b26:	d114      	bne.n	8007b52 <UART_Transmit_IT+0x48>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d110      	bne.n	8007b52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a1b      	ldr	r3, [r3, #32]
 8007b34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	1c9a      	adds	r2, r3, #2
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	621a      	str	r2, [r3, #32]
 8007b50:	e008      	b.n	8007b64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	1c59      	adds	r1, r3, #1
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6211      	str	r1, [r2, #32]
 8007b5c:	781a      	ldrb	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	4619      	mov	r1, r3
 8007b72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10f      	bne.n	8007b98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68da      	ldr	r2, [r3, #12]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	e000      	b.n	8007b9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b9c:	2302      	movs	r3, #2
  }
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr

08007ba8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bbe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7fb fb9d 	bl	8003308 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08c      	sub	sp, #48	; 0x30
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b22      	cmp	r3, #34	; 0x22
 8007bea:	f040 80ae 	bne.w	8007d4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf6:	d117      	bne.n	8007c28 <UART_Receive_IT+0x50>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d113      	bne.n	8007c28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c20:	1c9a      	adds	r2, r3, #2
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	629a      	str	r2, [r3, #40]	; 0x28
 8007c26:	e026      	b.n	8007c76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c3a:	d007      	beq.n	8007c4c <UART_Receive_IT+0x74>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10a      	bne.n	8007c5a <UART_Receive_IT+0x82>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c56:	701a      	strb	r2, [r3, #0]
 8007c58:	e008      	b.n	8007c6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	1c5a      	adds	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	4619      	mov	r1, r3
 8007c84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d15d      	bne.n	8007d46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0220 	bic.w	r2, r2, #32
 8007c98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0201 	bic.w	r2, r2, #1
 8007cb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d135      	bne.n	8007d3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	e853 3f00 	ldrex	r3, [r3]
 8007ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f023 0310 	bic.w	r3, r3, #16
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	330c      	adds	r3, #12
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	623a      	str	r2, [r7, #32]
 8007cf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfa:	69f9      	ldr	r1, [r7, #28]
 8007cfc:	6a3a      	ldr	r2, [r7, #32]
 8007cfe:	e841 2300 	strex	r3, r2, [r1]
 8007d02:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1e5      	bne.n	8007cd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d10a      	bne.n	8007d2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d32:	4619      	mov	r1, r3
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7fb facb 	bl	80032d0 <HAL_UARTEx_RxEventCallback>
 8007d3a:	e002      	b.n	8007d42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fbe0 	bl	8007502 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e002      	b.n	8007d4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	e000      	b.n	8007d4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d4a:	2302      	movs	r3, #2
  }
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3730      	adds	r7, #48	; 0x30
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68da      	ldr	r2, [r3, #12]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007d8e:	f023 030c 	bic.w	r3, r3, #12
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	430b      	orrs	r3, r1
 8007d9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695b      	ldr	r3, [r3, #20]
 8007da2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2c      	ldr	r2, [pc, #176]	; (8007e68 <UART_SetConfig+0x114>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d103      	bne.n	8007dc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007dbc:	f7fd ffd4 	bl	8005d68 <HAL_RCC_GetPCLK2Freq>
 8007dc0:	60f8      	str	r0, [r7, #12]
 8007dc2:	e002      	b.n	8007dca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fd ffbc 	bl	8005d40 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	009a      	lsls	r2, r3, #2
 8007dd4:	441a      	add	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de0:	4a22      	ldr	r2, [pc, #136]	; (8007e6c <UART_SetConfig+0x118>)
 8007de2:	fba2 2303 	umull	r2, r3, r2, r3
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	0119      	lsls	r1, r3, #4
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4613      	mov	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	009a      	lsls	r2, r3, #2
 8007df4:	441a      	add	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e00:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <UART_SetConfig+0x118>)
 8007e02:	fba3 0302 	umull	r0, r3, r3, r2
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	2064      	movs	r0, #100	; 0x64
 8007e0a:	fb00 f303 	mul.w	r3, r0, r3
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	3332      	adds	r3, #50	; 0x32
 8007e14:	4a15      	ldr	r2, [pc, #84]	; (8007e6c <UART_SetConfig+0x118>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e20:	4419      	add	r1, r3
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	4613      	mov	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	009a      	lsls	r2, r3, #2
 8007e2c:	441a      	add	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e38:	4b0c      	ldr	r3, [pc, #48]	; (8007e6c <UART_SetConfig+0x118>)
 8007e3a:	fba3 0302 	umull	r0, r3, r3, r2
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	2064      	movs	r0, #100	; 0x64
 8007e42:	fb00 f303 	mul.w	r3, r0, r3
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	3332      	adds	r3, #50	; 0x32
 8007e4c:	4a07      	ldr	r2, [pc, #28]	; (8007e6c <UART_SetConfig+0x118>)
 8007e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e52:	095b      	lsrs	r3, r3, #5
 8007e54:	f003 020f 	and.w	r2, r3, #15
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	440a      	add	r2, r1
 8007e5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	40013800 	.word	0x40013800
 8007e6c:	51eb851f 	.word	0x51eb851f

08007e70 <atoi>:
 8007e70:	220a      	movs	r2, #10
 8007e72:	2100      	movs	r1, #0
 8007e74:	f000 b87e 	b.w	8007f74 <strtol>

08007e78 <_strtol_l.constprop.0>:
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e7e:	4686      	mov	lr, r0
 8007e80:	4690      	mov	r8, r2
 8007e82:	d001      	beq.n	8007e88 <_strtol_l.constprop.0+0x10>
 8007e84:	2b24      	cmp	r3, #36	; 0x24
 8007e86:	d906      	bls.n	8007e96 <_strtol_l.constprop.0+0x1e>
 8007e88:	f000 ff46 	bl	8008d18 <__errno>
 8007e8c:	2316      	movs	r3, #22
 8007e8e:	6003      	str	r3, [r0, #0]
 8007e90:	2000      	movs	r0, #0
 8007e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e96:	460d      	mov	r5, r1
 8007e98:	4835      	ldr	r0, [pc, #212]	; (8007f70 <_strtol_l.constprop.0+0xf8>)
 8007e9a:	462a      	mov	r2, r5
 8007e9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ea0:	5d06      	ldrb	r6, [r0, r4]
 8007ea2:	f016 0608 	ands.w	r6, r6, #8
 8007ea6:	d1f8      	bne.n	8007e9a <_strtol_l.constprop.0+0x22>
 8007ea8:	2c2d      	cmp	r4, #45	; 0x2d
 8007eaa:	d12e      	bne.n	8007f0a <_strtol_l.constprop.0+0x92>
 8007eac:	2601      	movs	r6, #1
 8007eae:	782c      	ldrb	r4, [r5, #0]
 8007eb0:	1c95      	adds	r5, r2, #2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d057      	beq.n	8007f66 <_strtol_l.constprop.0+0xee>
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d109      	bne.n	8007ece <_strtol_l.constprop.0+0x56>
 8007eba:	2c30      	cmp	r4, #48	; 0x30
 8007ebc:	d107      	bne.n	8007ece <_strtol_l.constprop.0+0x56>
 8007ebe:	782a      	ldrb	r2, [r5, #0]
 8007ec0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007ec4:	2a58      	cmp	r2, #88	; 0x58
 8007ec6:	d149      	bne.n	8007f5c <_strtol_l.constprop.0+0xe4>
 8007ec8:	2310      	movs	r3, #16
 8007eca:	786c      	ldrb	r4, [r5, #1]
 8007ecc:	3502      	adds	r5, #2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8007ed4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ed8:	fbbc f9f3 	udiv	r9, ip, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ee2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007ee6:	2f09      	cmp	r7, #9
 8007ee8:	d814      	bhi.n	8007f14 <_strtol_l.constprop.0+0x9c>
 8007eea:	463c      	mov	r4, r7
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	dd20      	ble.n	8007f32 <_strtol_l.constprop.0+0xba>
 8007ef0:	1c57      	adds	r7, r2, #1
 8007ef2:	d007      	beq.n	8007f04 <_strtol_l.constprop.0+0x8c>
 8007ef4:	4581      	cmp	r9, r0
 8007ef6:	d319      	bcc.n	8007f2c <_strtol_l.constprop.0+0xb4>
 8007ef8:	d101      	bne.n	8007efe <_strtol_l.constprop.0+0x86>
 8007efa:	45a2      	cmp	sl, r4
 8007efc:	db16      	blt.n	8007f2c <_strtol_l.constprop.0+0xb4>
 8007efe:	2201      	movs	r2, #1
 8007f00:	fb00 4003 	mla	r0, r0, r3, r4
 8007f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f08:	e7eb      	b.n	8007ee2 <_strtol_l.constprop.0+0x6a>
 8007f0a:	2c2b      	cmp	r4, #43	; 0x2b
 8007f0c:	bf04      	itt	eq
 8007f0e:	782c      	ldrbeq	r4, [r5, #0]
 8007f10:	1c95      	addeq	r5, r2, #2
 8007f12:	e7ce      	b.n	8007eb2 <_strtol_l.constprop.0+0x3a>
 8007f14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007f18:	2f19      	cmp	r7, #25
 8007f1a:	d801      	bhi.n	8007f20 <_strtol_l.constprop.0+0xa8>
 8007f1c:	3c37      	subs	r4, #55	; 0x37
 8007f1e:	e7e5      	b.n	8007eec <_strtol_l.constprop.0+0x74>
 8007f20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007f24:	2f19      	cmp	r7, #25
 8007f26:	d804      	bhi.n	8007f32 <_strtol_l.constprop.0+0xba>
 8007f28:	3c57      	subs	r4, #87	; 0x57
 8007f2a:	e7df      	b.n	8007eec <_strtol_l.constprop.0+0x74>
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	e7e8      	b.n	8007f04 <_strtol_l.constprop.0+0x8c>
 8007f32:	1c53      	adds	r3, r2, #1
 8007f34:	d108      	bne.n	8007f48 <_strtol_l.constprop.0+0xd0>
 8007f36:	2322      	movs	r3, #34	; 0x22
 8007f38:	4660      	mov	r0, ip
 8007f3a:	f8ce 3000 	str.w	r3, [lr]
 8007f3e:	f1b8 0f00 	cmp.w	r8, #0
 8007f42:	d0a6      	beq.n	8007e92 <_strtol_l.constprop.0+0x1a>
 8007f44:	1e69      	subs	r1, r5, #1
 8007f46:	e006      	b.n	8007f56 <_strtol_l.constprop.0+0xde>
 8007f48:	b106      	cbz	r6, 8007f4c <_strtol_l.constprop.0+0xd4>
 8007f4a:	4240      	negs	r0, r0
 8007f4c:	f1b8 0f00 	cmp.w	r8, #0
 8007f50:	d09f      	beq.n	8007e92 <_strtol_l.constprop.0+0x1a>
 8007f52:	2a00      	cmp	r2, #0
 8007f54:	d1f6      	bne.n	8007f44 <_strtol_l.constprop.0+0xcc>
 8007f56:	f8c8 1000 	str.w	r1, [r8]
 8007f5a:	e79a      	b.n	8007e92 <_strtol_l.constprop.0+0x1a>
 8007f5c:	2430      	movs	r4, #48	; 0x30
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1b5      	bne.n	8007ece <_strtol_l.constprop.0+0x56>
 8007f62:	2308      	movs	r3, #8
 8007f64:	e7b3      	b.n	8007ece <_strtol_l.constprop.0+0x56>
 8007f66:	2c30      	cmp	r4, #48	; 0x30
 8007f68:	d0a9      	beq.n	8007ebe <_strtol_l.constprop.0+0x46>
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	e7af      	b.n	8007ece <_strtol_l.constprop.0+0x56>
 8007f6e:	bf00      	nop
 8007f70:	0800b323 	.word	0x0800b323

08007f74 <strtol>:
 8007f74:	4613      	mov	r3, r2
 8007f76:	460a      	mov	r2, r1
 8007f78:	4601      	mov	r1, r0
 8007f7a:	4802      	ldr	r0, [pc, #8]	; (8007f84 <strtol+0x10>)
 8007f7c:	6800      	ldr	r0, [r0, #0]
 8007f7e:	f7ff bf7b 	b.w	8007e78 <_strtol_l.constprop.0>
 8007f82:	bf00      	nop
 8007f84:	20000064 	.word	0x20000064

08007f88 <__cvt>:
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8e:	461f      	mov	r7, r3
 8007f90:	bfbb      	ittet	lt
 8007f92:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f96:	461f      	movlt	r7, r3
 8007f98:	2300      	movge	r3, #0
 8007f9a:	232d      	movlt	r3, #45	; 0x2d
 8007f9c:	b088      	sub	sp, #32
 8007f9e:	4614      	mov	r4, r2
 8007fa0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fa2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007fa4:	7013      	strb	r3, [r2, #0]
 8007fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fa8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007fac:	f023 0820 	bic.w	r8, r3, #32
 8007fb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fb4:	d005      	beq.n	8007fc2 <__cvt+0x3a>
 8007fb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fba:	d100      	bne.n	8007fbe <__cvt+0x36>
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e000      	b.n	8007fc4 <__cvt+0x3c>
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	aa07      	add	r2, sp, #28
 8007fc6:	9204      	str	r2, [sp, #16]
 8007fc8:	aa06      	add	r2, sp, #24
 8007fca:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fce:	e9cd 3500 	strd	r3, r5, [sp]
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	463b      	mov	r3, r7
 8007fd6:	f000 ff73 	bl	8008ec0 <_dtoa_r>
 8007fda:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fde:	4606      	mov	r6, r0
 8007fe0:	d102      	bne.n	8007fe8 <__cvt+0x60>
 8007fe2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fe4:	07db      	lsls	r3, r3, #31
 8007fe6:	d522      	bpl.n	800802e <__cvt+0xa6>
 8007fe8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fec:	eb06 0905 	add.w	r9, r6, r5
 8007ff0:	d110      	bne.n	8008014 <__cvt+0x8c>
 8007ff2:	7833      	ldrb	r3, [r6, #0]
 8007ff4:	2b30      	cmp	r3, #48	; 0x30
 8007ff6:	d10a      	bne.n	800800e <__cvt+0x86>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4639      	mov	r1, r7
 8008000:	f7f8 fcdc 	bl	80009bc <__aeabi_dcmpeq>
 8008004:	b918      	cbnz	r0, 800800e <__cvt+0x86>
 8008006:	f1c5 0501 	rsb	r5, r5, #1
 800800a:	f8ca 5000 	str.w	r5, [sl]
 800800e:	f8da 3000 	ldr.w	r3, [sl]
 8008012:	4499      	add	r9, r3
 8008014:	2200      	movs	r2, #0
 8008016:	2300      	movs	r3, #0
 8008018:	4620      	mov	r0, r4
 800801a:	4639      	mov	r1, r7
 800801c:	f7f8 fcce 	bl	80009bc <__aeabi_dcmpeq>
 8008020:	b108      	cbz	r0, 8008026 <__cvt+0x9e>
 8008022:	f8cd 901c 	str.w	r9, [sp, #28]
 8008026:	2230      	movs	r2, #48	; 0x30
 8008028:	9b07      	ldr	r3, [sp, #28]
 800802a:	454b      	cmp	r3, r9
 800802c:	d307      	bcc.n	800803e <__cvt+0xb6>
 800802e:	4630      	mov	r0, r6
 8008030:	9b07      	ldr	r3, [sp, #28]
 8008032:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	b008      	add	sp, #32
 800803a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803e:	1c59      	adds	r1, r3, #1
 8008040:	9107      	str	r1, [sp, #28]
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	e7f0      	b.n	8008028 <__cvt+0xa0>

08008046 <__exponent>:
 8008046:	4603      	mov	r3, r0
 8008048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800804a:	2900      	cmp	r1, #0
 800804c:	f803 2b02 	strb.w	r2, [r3], #2
 8008050:	bfb6      	itet	lt
 8008052:	222d      	movlt	r2, #45	; 0x2d
 8008054:	222b      	movge	r2, #43	; 0x2b
 8008056:	4249      	neglt	r1, r1
 8008058:	2909      	cmp	r1, #9
 800805a:	7042      	strb	r2, [r0, #1]
 800805c:	dd2a      	ble.n	80080b4 <__exponent+0x6e>
 800805e:	f10d 0207 	add.w	r2, sp, #7
 8008062:	4617      	mov	r7, r2
 8008064:	260a      	movs	r6, #10
 8008066:	fb91 f5f6 	sdiv	r5, r1, r6
 800806a:	4694      	mov	ip, r2
 800806c:	fb06 1415 	mls	r4, r6, r5, r1
 8008070:	3430      	adds	r4, #48	; 0x30
 8008072:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008076:	460c      	mov	r4, r1
 8008078:	2c63      	cmp	r4, #99	; 0x63
 800807a:	4629      	mov	r1, r5
 800807c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008080:	dcf1      	bgt.n	8008066 <__exponent+0x20>
 8008082:	3130      	adds	r1, #48	; 0x30
 8008084:	f1ac 0402 	sub.w	r4, ip, #2
 8008088:	f802 1c01 	strb.w	r1, [r2, #-1]
 800808c:	4622      	mov	r2, r4
 800808e:	1c41      	adds	r1, r0, #1
 8008090:	42ba      	cmp	r2, r7
 8008092:	d30a      	bcc.n	80080aa <__exponent+0x64>
 8008094:	f10d 0209 	add.w	r2, sp, #9
 8008098:	eba2 020c 	sub.w	r2, r2, ip
 800809c:	42bc      	cmp	r4, r7
 800809e:	bf88      	it	hi
 80080a0:	2200      	movhi	r2, #0
 80080a2:	4413      	add	r3, r2
 80080a4:	1a18      	subs	r0, r3, r0
 80080a6:	b003      	add	sp, #12
 80080a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80080b2:	e7ed      	b.n	8008090 <__exponent+0x4a>
 80080b4:	2330      	movs	r3, #48	; 0x30
 80080b6:	3130      	adds	r1, #48	; 0x30
 80080b8:	7083      	strb	r3, [r0, #2]
 80080ba:	70c1      	strb	r1, [r0, #3]
 80080bc:	1d03      	adds	r3, r0, #4
 80080be:	e7f1      	b.n	80080a4 <__exponent+0x5e>

080080c0 <_printf_float>:
 80080c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c4:	b091      	sub	sp, #68	; 0x44
 80080c6:	460c      	mov	r4, r1
 80080c8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080cc:	4616      	mov	r6, r2
 80080ce:	461f      	mov	r7, r3
 80080d0:	4605      	mov	r5, r0
 80080d2:	f000 fdd7 	bl	8008c84 <_localeconv_r>
 80080d6:	6803      	ldr	r3, [r0, #0]
 80080d8:	4618      	mov	r0, r3
 80080da:	9309      	str	r3, [sp, #36]	; 0x24
 80080dc:	f7f8 f842 	bl	8000164 <strlen>
 80080e0:	2300      	movs	r3, #0
 80080e2:	930e      	str	r3, [sp, #56]	; 0x38
 80080e4:	f8d8 3000 	ldr.w	r3, [r8]
 80080e8:	900a      	str	r0, [sp, #40]	; 0x28
 80080ea:	3307      	adds	r3, #7
 80080ec:	f023 0307 	bic.w	r3, r3, #7
 80080f0:	f103 0208 	add.w	r2, r3, #8
 80080f4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80080f8:	f8d4 b000 	ldr.w	fp, [r4]
 80080fc:	f8c8 2000 	str.w	r2, [r8]
 8008100:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008104:	4652      	mov	r2, sl
 8008106:	4643      	mov	r3, r8
 8008108:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800810c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008110:	930b      	str	r3, [sp, #44]	; 0x2c
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	4650      	mov	r0, sl
 8008118:	4b9c      	ldr	r3, [pc, #624]	; (800838c <_printf_float+0x2cc>)
 800811a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800811c:	f7f8 fc80 	bl	8000a20 <__aeabi_dcmpun>
 8008120:	bb70      	cbnz	r0, 8008180 <_printf_float+0xc0>
 8008122:	f04f 32ff 	mov.w	r2, #4294967295
 8008126:	4650      	mov	r0, sl
 8008128:	4b98      	ldr	r3, [pc, #608]	; (800838c <_printf_float+0x2cc>)
 800812a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800812c:	f7f8 fc5a 	bl	80009e4 <__aeabi_dcmple>
 8008130:	bb30      	cbnz	r0, 8008180 <_printf_float+0xc0>
 8008132:	2200      	movs	r2, #0
 8008134:	2300      	movs	r3, #0
 8008136:	4650      	mov	r0, sl
 8008138:	4641      	mov	r1, r8
 800813a:	f7f8 fc49 	bl	80009d0 <__aeabi_dcmplt>
 800813e:	b110      	cbz	r0, 8008146 <_printf_float+0x86>
 8008140:	232d      	movs	r3, #45	; 0x2d
 8008142:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008146:	4a92      	ldr	r2, [pc, #584]	; (8008390 <_printf_float+0x2d0>)
 8008148:	4b92      	ldr	r3, [pc, #584]	; (8008394 <_printf_float+0x2d4>)
 800814a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800814e:	bf94      	ite	ls
 8008150:	4690      	movls	r8, r2
 8008152:	4698      	movhi	r8, r3
 8008154:	2303      	movs	r3, #3
 8008156:	f04f 0a00 	mov.w	sl, #0
 800815a:	6123      	str	r3, [r4, #16]
 800815c:	f02b 0304 	bic.w	r3, fp, #4
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	4633      	mov	r3, r6
 8008164:	4621      	mov	r1, r4
 8008166:	4628      	mov	r0, r5
 8008168:	9700      	str	r7, [sp, #0]
 800816a:	aa0f      	add	r2, sp, #60	; 0x3c
 800816c:	f000 f9d6 	bl	800851c <_printf_common>
 8008170:	3001      	adds	r0, #1
 8008172:	f040 8090 	bne.w	8008296 <_printf_float+0x1d6>
 8008176:	f04f 30ff 	mov.w	r0, #4294967295
 800817a:	b011      	add	sp, #68	; 0x44
 800817c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008180:	4652      	mov	r2, sl
 8008182:	4643      	mov	r3, r8
 8008184:	4650      	mov	r0, sl
 8008186:	4641      	mov	r1, r8
 8008188:	f7f8 fc4a 	bl	8000a20 <__aeabi_dcmpun>
 800818c:	b148      	cbz	r0, 80081a2 <_printf_float+0xe2>
 800818e:	f1b8 0f00 	cmp.w	r8, #0
 8008192:	bfb8      	it	lt
 8008194:	232d      	movlt	r3, #45	; 0x2d
 8008196:	4a80      	ldr	r2, [pc, #512]	; (8008398 <_printf_float+0x2d8>)
 8008198:	bfb8      	it	lt
 800819a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800819e:	4b7f      	ldr	r3, [pc, #508]	; (800839c <_printf_float+0x2dc>)
 80081a0:	e7d3      	b.n	800814a <_printf_float+0x8a>
 80081a2:	6863      	ldr	r3, [r4, #4]
 80081a4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80081a8:	1c5a      	adds	r2, r3, #1
 80081aa:	d142      	bne.n	8008232 <_printf_float+0x172>
 80081ac:	2306      	movs	r3, #6
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	9206      	str	r2, [sp, #24]
 80081b4:	aa0e      	add	r2, sp, #56	; 0x38
 80081b6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80081ba:	aa0d      	add	r2, sp, #52	; 0x34
 80081bc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081c0:	9203      	str	r2, [sp, #12]
 80081c2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081c6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081ca:	6023      	str	r3, [r4, #0]
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	4652      	mov	r2, sl
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	4628      	mov	r0, r5
 80081d4:	4643      	mov	r3, r8
 80081d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80081d8:	f7ff fed6 	bl	8007f88 <__cvt>
 80081dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081de:	4680      	mov	r8, r0
 80081e0:	2947      	cmp	r1, #71	; 0x47
 80081e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081e4:	d108      	bne.n	80081f8 <_printf_float+0x138>
 80081e6:	1cc8      	adds	r0, r1, #3
 80081e8:	db02      	blt.n	80081f0 <_printf_float+0x130>
 80081ea:	6863      	ldr	r3, [r4, #4]
 80081ec:	4299      	cmp	r1, r3
 80081ee:	dd40      	ble.n	8008272 <_printf_float+0x1b2>
 80081f0:	f1a9 0902 	sub.w	r9, r9, #2
 80081f4:	fa5f f989 	uxtb.w	r9, r9
 80081f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081fc:	d81f      	bhi.n	800823e <_printf_float+0x17e>
 80081fe:	464a      	mov	r2, r9
 8008200:	3901      	subs	r1, #1
 8008202:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008206:	910d      	str	r1, [sp, #52]	; 0x34
 8008208:	f7ff ff1d 	bl	8008046 <__exponent>
 800820c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800820e:	4682      	mov	sl, r0
 8008210:	1813      	adds	r3, r2, r0
 8008212:	2a01      	cmp	r2, #1
 8008214:	6123      	str	r3, [r4, #16]
 8008216:	dc02      	bgt.n	800821e <_printf_float+0x15e>
 8008218:	6822      	ldr	r2, [r4, #0]
 800821a:	07d2      	lsls	r2, r2, #31
 800821c:	d501      	bpl.n	8008222 <_printf_float+0x162>
 800821e:	3301      	adds	r3, #1
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008226:	2b00      	cmp	r3, #0
 8008228:	d09b      	beq.n	8008162 <_printf_float+0xa2>
 800822a:	232d      	movs	r3, #45	; 0x2d
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	e797      	b.n	8008162 <_printf_float+0xa2>
 8008232:	2947      	cmp	r1, #71	; 0x47
 8008234:	d1bc      	bne.n	80081b0 <_printf_float+0xf0>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1ba      	bne.n	80081b0 <_printf_float+0xf0>
 800823a:	2301      	movs	r3, #1
 800823c:	e7b7      	b.n	80081ae <_printf_float+0xee>
 800823e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008242:	d118      	bne.n	8008276 <_printf_float+0x1b6>
 8008244:	2900      	cmp	r1, #0
 8008246:	6863      	ldr	r3, [r4, #4]
 8008248:	dd0b      	ble.n	8008262 <_printf_float+0x1a2>
 800824a:	6121      	str	r1, [r4, #16]
 800824c:	b913      	cbnz	r3, 8008254 <_printf_float+0x194>
 800824e:	6822      	ldr	r2, [r4, #0]
 8008250:	07d0      	lsls	r0, r2, #31
 8008252:	d502      	bpl.n	800825a <_printf_float+0x19a>
 8008254:	3301      	adds	r3, #1
 8008256:	440b      	add	r3, r1
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	f04f 0a00 	mov.w	sl, #0
 800825e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008260:	e7df      	b.n	8008222 <_printf_float+0x162>
 8008262:	b913      	cbnz	r3, 800826a <_printf_float+0x1aa>
 8008264:	6822      	ldr	r2, [r4, #0]
 8008266:	07d2      	lsls	r2, r2, #31
 8008268:	d501      	bpl.n	800826e <_printf_float+0x1ae>
 800826a:	3302      	adds	r3, #2
 800826c:	e7f4      	b.n	8008258 <_printf_float+0x198>
 800826e:	2301      	movs	r3, #1
 8008270:	e7f2      	b.n	8008258 <_printf_float+0x198>
 8008272:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008278:	4299      	cmp	r1, r3
 800827a:	db05      	blt.n	8008288 <_printf_float+0x1c8>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	6121      	str	r1, [r4, #16]
 8008280:	07d8      	lsls	r0, r3, #31
 8008282:	d5ea      	bpl.n	800825a <_printf_float+0x19a>
 8008284:	1c4b      	adds	r3, r1, #1
 8008286:	e7e7      	b.n	8008258 <_printf_float+0x198>
 8008288:	2900      	cmp	r1, #0
 800828a:	bfcc      	ite	gt
 800828c:	2201      	movgt	r2, #1
 800828e:	f1c1 0202 	rsble	r2, r1, #2
 8008292:	4413      	add	r3, r2
 8008294:	e7e0      	b.n	8008258 <_printf_float+0x198>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	055a      	lsls	r2, r3, #21
 800829a:	d407      	bmi.n	80082ac <_printf_float+0x1ec>
 800829c:	6923      	ldr	r3, [r4, #16]
 800829e:	4642      	mov	r2, r8
 80082a0:	4631      	mov	r1, r6
 80082a2:	4628      	mov	r0, r5
 80082a4:	47b8      	blx	r7
 80082a6:	3001      	adds	r0, #1
 80082a8:	d12b      	bne.n	8008302 <_printf_float+0x242>
 80082aa:	e764      	b.n	8008176 <_printf_float+0xb6>
 80082ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80082b0:	f240 80dd 	bls.w	800846e <_printf_float+0x3ae>
 80082b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082b8:	2200      	movs	r2, #0
 80082ba:	2300      	movs	r3, #0
 80082bc:	f7f8 fb7e 	bl	80009bc <__aeabi_dcmpeq>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d033      	beq.n	800832c <_printf_float+0x26c>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4631      	mov	r1, r6
 80082c8:	4628      	mov	r0, r5
 80082ca:	4a35      	ldr	r2, [pc, #212]	; (80083a0 <_printf_float+0x2e0>)
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	f43f af51 	beq.w	8008176 <_printf_float+0xb6>
 80082d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082d8:	429a      	cmp	r2, r3
 80082da:	db02      	blt.n	80082e2 <_printf_float+0x222>
 80082dc:	6823      	ldr	r3, [r4, #0]
 80082de:	07d8      	lsls	r0, r3, #31
 80082e0:	d50f      	bpl.n	8008302 <_printf_float+0x242>
 80082e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f af42 	beq.w	8008176 <_printf_float+0xb6>
 80082f2:	f04f 0800 	mov.w	r8, #0
 80082f6:	f104 091a 	add.w	r9, r4, #26
 80082fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082fc:	3b01      	subs	r3, #1
 80082fe:	4543      	cmp	r3, r8
 8008300:	dc09      	bgt.n	8008316 <_printf_float+0x256>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	079b      	lsls	r3, r3, #30
 8008306:	f100 8104 	bmi.w	8008512 <_printf_float+0x452>
 800830a:	68e0      	ldr	r0, [r4, #12]
 800830c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800830e:	4298      	cmp	r0, r3
 8008310:	bfb8      	it	lt
 8008312:	4618      	movlt	r0, r3
 8008314:	e731      	b.n	800817a <_printf_float+0xba>
 8008316:	2301      	movs	r3, #1
 8008318:	464a      	mov	r2, r9
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	f43f af28 	beq.w	8008176 <_printf_float+0xb6>
 8008326:	f108 0801 	add.w	r8, r8, #1
 800832a:	e7e6      	b.n	80082fa <_printf_float+0x23a>
 800832c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800832e:	2b00      	cmp	r3, #0
 8008330:	dc38      	bgt.n	80083a4 <_printf_float+0x2e4>
 8008332:	2301      	movs	r3, #1
 8008334:	4631      	mov	r1, r6
 8008336:	4628      	mov	r0, r5
 8008338:	4a19      	ldr	r2, [pc, #100]	; (80083a0 <_printf_float+0x2e0>)
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f af1a 	beq.w	8008176 <_printf_float+0xb6>
 8008342:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008346:	4313      	orrs	r3, r2
 8008348:	d102      	bne.n	8008350 <_printf_float+0x290>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	07d9      	lsls	r1, r3, #31
 800834e:	d5d8      	bpl.n	8008302 <_printf_float+0x242>
 8008350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008354:	4631      	mov	r1, r6
 8008356:	4628      	mov	r0, r5
 8008358:	47b8      	blx	r7
 800835a:	3001      	adds	r0, #1
 800835c:	f43f af0b 	beq.w	8008176 <_printf_float+0xb6>
 8008360:	f04f 0900 	mov.w	r9, #0
 8008364:	f104 0a1a 	add.w	sl, r4, #26
 8008368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836a:	425b      	negs	r3, r3
 800836c:	454b      	cmp	r3, r9
 800836e:	dc01      	bgt.n	8008374 <_printf_float+0x2b4>
 8008370:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008372:	e794      	b.n	800829e <_printf_float+0x1de>
 8008374:	2301      	movs	r3, #1
 8008376:	4652      	mov	r2, sl
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f aef9 	beq.w	8008176 <_printf_float+0xb6>
 8008384:	f109 0901 	add.w	r9, r9, #1
 8008388:	e7ee      	b.n	8008368 <_printf_float+0x2a8>
 800838a:	bf00      	nop
 800838c:	7fefffff 	.word	0x7fefffff
 8008390:	0800b423 	.word	0x0800b423
 8008394:	0800b427 	.word	0x0800b427
 8008398:	0800b42b 	.word	0x0800b42b
 800839c:	0800b42f 	.word	0x0800b42f
 80083a0:	0800b433 	.word	0x0800b433
 80083a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083a8:	429a      	cmp	r2, r3
 80083aa:	bfa8      	it	ge
 80083ac:	461a      	movge	r2, r3
 80083ae:	2a00      	cmp	r2, #0
 80083b0:	4691      	mov	r9, r2
 80083b2:	dc37      	bgt.n	8008424 <_printf_float+0x364>
 80083b4:	f04f 0b00 	mov.w	fp, #0
 80083b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083bc:	f104 021a 	add.w	r2, r4, #26
 80083c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083c4:	ebaa 0309 	sub.w	r3, sl, r9
 80083c8:	455b      	cmp	r3, fp
 80083ca:	dc33      	bgt.n	8008434 <_printf_float+0x374>
 80083cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083d0:	429a      	cmp	r2, r3
 80083d2:	db3b      	blt.n	800844c <_printf_float+0x38c>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	07da      	lsls	r2, r3, #31
 80083d8:	d438      	bmi.n	800844c <_printf_float+0x38c>
 80083da:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80083de:	eba2 0903 	sub.w	r9, r2, r3
 80083e2:	eba2 020a 	sub.w	r2, r2, sl
 80083e6:	4591      	cmp	r9, r2
 80083e8:	bfa8      	it	ge
 80083ea:	4691      	movge	r9, r2
 80083ec:	f1b9 0f00 	cmp.w	r9, #0
 80083f0:	dc34      	bgt.n	800845c <_printf_float+0x39c>
 80083f2:	f04f 0800 	mov.w	r8, #0
 80083f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083fa:	f104 0a1a 	add.w	sl, r4, #26
 80083fe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008402:	1a9b      	subs	r3, r3, r2
 8008404:	eba3 0309 	sub.w	r3, r3, r9
 8008408:	4543      	cmp	r3, r8
 800840a:	f77f af7a 	ble.w	8008302 <_printf_float+0x242>
 800840e:	2301      	movs	r3, #1
 8008410:	4652      	mov	r2, sl
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	f43f aeac 	beq.w	8008176 <_printf_float+0xb6>
 800841e:	f108 0801 	add.w	r8, r8, #1
 8008422:	e7ec      	b.n	80083fe <_printf_float+0x33e>
 8008424:	4613      	mov	r3, r2
 8008426:	4631      	mov	r1, r6
 8008428:	4642      	mov	r2, r8
 800842a:	4628      	mov	r0, r5
 800842c:	47b8      	blx	r7
 800842e:	3001      	adds	r0, #1
 8008430:	d1c0      	bne.n	80083b4 <_printf_float+0x2f4>
 8008432:	e6a0      	b.n	8008176 <_printf_float+0xb6>
 8008434:	2301      	movs	r3, #1
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	920b      	str	r2, [sp, #44]	; 0x2c
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	f43f ae99 	beq.w	8008176 <_printf_float+0xb6>
 8008444:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008446:	f10b 0b01 	add.w	fp, fp, #1
 800844a:	e7b9      	b.n	80083c0 <_printf_float+0x300>
 800844c:	4631      	mov	r1, r6
 800844e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008452:	4628      	mov	r0, r5
 8008454:	47b8      	blx	r7
 8008456:	3001      	adds	r0, #1
 8008458:	d1bf      	bne.n	80083da <_printf_float+0x31a>
 800845a:	e68c      	b.n	8008176 <_printf_float+0xb6>
 800845c:	464b      	mov	r3, r9
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	eb08 020a 	add.w	r2, r8, sl
 8008466:	47b8      	blx	r7
 8008468:	3001      	adds	r0, #1
 800846a:	d1c2      	bne.n	80083f2 <_printf_float+0x332>
 800846c:	e683      	b.n	8008176 <_printf_float+0xb6>
 800846e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008470:	2a01      	cmp	r2, #1
 8008472:	dc01      	bgt.n	8008478 <_printf_float+0x3b8>
 8008474:	07db      	lsls	r3, r3, #31
 8008476:	d539      	bpl.n	80084ec <_printf_float+0x42c>
 8008478:	2301      	movs	r3, #1
 800847a:	4642      	mov	r2, r8
 800847c:	4631      	mov	r1, r6
 800847e:	4628      	mov	r0, r5
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	f43f ae77 	beq.w	8008176 <_printf_float+0xb6>
 8008488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	f43f ae6f 	beq.w	8008176 <_printf_float+0xb6>
 8008498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800849c:	2200      	movs	r2, #0
 800849e:	2300      	movs	r3, #0
 80084a0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80084a4:	f7f8 fa8a 	bl	80009bc <__aeabi_dcmpeq>
 80084a8:	b9d8      	cbnz	r0, 80084e2 <_printf_float+0x422>
 80084aa:	f109 33ff 	add.w	r3, r9, #4294967295
 80084ae:	f108 0201 	add.w	r2, r8, #1
 80084b2:	4631      	mov	r1, r6
 80084b4:	4628      	mov	r0, r5
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	d10e      	bne.n	80084da <_printf_float+0x41a>
 80084bc:	e65b      	b.n	8008176 <_printf_float+0xb6>
 80084be:	2301      	movs	r3, #1
 80084c0:	464a      	mov	r2, r9
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47b8      	blx	r7
 80084c8:	3001      	adds	r0, #1
 80084ca:	f43f ae54 	beq.w	8008176 <_printf_float+0xb6>
 80084ce:	f108 0801 	add.w	r8, r8, #1
 80084d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084d4:	3b01      	subs	r3, #1
 80084d6:	4543      	cmp	r3, r8
 80084d8:	dcf1      	bgt.n	80084be <_printf_float+0x3fe>
 80084da:	4653      	mov	r3, sl
 80084dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084e0:	e6de      	b.n	80082a0 <_printf_float+0x1e0>
 80084e2:	f04f 0800 	mov.w	r8, #0
 80084e6:	f104 091a 	add.w	r9, r4, #26
 80084ea:	e7f2      	b.n	80084d2 <_printf_float+0x412>
 80084ec:	2301      	movs	r3, #1
 80084ee:	4642      	mov	r2, r8
 80084f0:	e7df      	b.n	80084b2 <_printf_float+0x3f2>
 80084f2:	2301      	movs	r3, #1
 80084f4:	464a      	mov	r2, r9
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	f43f ae3a 	beq.w	8008176 <_printf_float+0xb6>
 8008502:	f108 0801 	add.w	r8, r8, #1
 8008506:	68e3      	ldr	r3, [r4, #12]
 8008508:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800850a:	1a5b      	subs	r3, r3, r1
 800850c:	4543      	cmp	r3, r8
 800850e:	dcf0      	bgt.n	80084f2 <_printf_float+0x432>
 8008510:	e6fb      	b.n	800830a <_printf_float+0x24a>
 8008512:	f04f 0800 	mov.w	r8, #0
 8008516:	f104 0919 	add.w	r9, r4, #25
 800851a:	e7f4      	b.n	8008506 <_printf_float+0x446>

0800851c <_printf_common>:
 800851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	4616      	mov	r6, r2
 8008522:	4699      	mov	r9, r3
 8008524:	688a      	ldr	r2, [r1, #8]
 8008526:	690b      	ldr	r3, [r1, #16]
 8008528:	4607      	mov	r7, r0
 800852a:	4293      	cmp	r3, r2
 800852c:	bfb8      	it	lt
 800852e:	4613      	movlt	r3, r2
 8008530:	6033      	str	r3, [r6, #0]
 8008532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008536:	460c      	mov	r4, r1
 8008538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800853c:	b10a      	cbz	r2, 8008542 <_printf_common+0x26>
 800853e:	3301      	adds	r3, #1
 8008540:	6033      	str	r3, [r6, #0]
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	0699      	lsls	r1, r3, #26
 8008546:	bf42      	ittt	mi
 8008548:	6833      	ldrmi	r3, [r6, #0]
 800854a:	3302      	addmi	r3, #2
 800854c:	6033      	strmi	r3, [r6, #0]
 800854e:	6825      	ldr	r5, [r4, #0]
 8008550:	f015 0506 	ands.w	r5, r5, #6
 8008554:	d106      	bne.n	8008564 <_printf_common+0x48>
 8008556:	f104 0a19 	add.w	sl, r4, #25
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	6832      	ldr	r2, [r6, #0]
 800855e:	1a9b      	subs	r3, r3, r2
 8008560:	42ab      	cmp	r3, r5
 8008562:	dc2b      	bgt.n	80085bc <_printf_common+0xa0>
 8008564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008568:	1e13      	subs	r3, r2, #0
 800856a:	6822      	ldr	r2, [r4, #0]
 800856c:	bf18      	it	ne
 800856e:	2301      	movne	r3, #1
 8008570:	0692      	lsls	r2, r2, #26
 8008572:	d430      	bmi.n	80085d6 <_printf_common+0xba>
 8008574:	4649      	mov	r1, r9
 8008576:	4638      	mov	r0, r7
 8008578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800857c:	47c0      	blx	r8
 800857e:	3001      	adds	r0, #1
 8008580:	d023      	beq.n	80085ca <_printf_common+0xae>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	6922      	ldr	r2, [r4, #16]
 8008586:	f003 0306 	and.w	r3, r3, #6
 800858a:	2b04      	cmp	r3, #4
 800858c:	bf14      	ite	ne
 800858e:	2500      	movne	r5, #0
 8008590:	6833      	ldreq	r3, [r6, #0]
 8008592:	f04f 0600 	mov.w	r6, #0
 8008596:	bf08      	it	eq
 8008598:	68e5      	ldreq	r5, [r4, #12]
 800859a:	f104 041a 	add.w	r4, r4, #26
 800859e:	bf08      	it	eq
 80085a0:	1aed      	subeq	r5, r5, r3
 80085a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80085a6:	bf08      	it	eq
 80085a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085ac:	4293      	cmp	r3, r2
 80085ae:	bfc4      	itt	gt
 80085b0:	1a9b      	subgt	r3, r3, r2
 80085b2:	18ed      	addgt	r5, r5, r3
 80085b4:	42b5      	cmp	r5, r6
 80085b6:	d11a      	bne.n	80085ee <_printf_common+0xd2>
 80085b8:	2000      	movs	r0, #0
 80085ba:	e008      	b.n	80085ce <_printf_common+0xb2>
 80085bc:	2301      	movs	r3, #1
 80085be:	4652      	mov	r2, sl
 80085c0:	4649      	mov	r1, r9
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c0      	blx	r8
 80085c6:	3001      	adds	r0, #1
 80085c8:	d103      	bne.n	80085d2 <_printf_common+0xb6>
 80085ca:	f04f 30ff 	mov.w	r0, #4294967295
 80085ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d2:	3501      	adds	r5, #1
 80085d4:	e7c1      	b.n	800855a <_printf_common+0x3e>
 80085d6:	2030      	movs	r0, #48	; 0x30
 80085d8:	18e1      	adds	r1, r4, r3
 80085da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085de:	1c5a      	adds	r2, r3, #1
 80085e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e4:	4422      	add	r2, r4
 80085e6:	3302      	adds	r3, #2
 80085e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085ec:	e7c2      	b.n	8008574 <_printf_common+0x58>
 80085ee:	2301      	movs	r3, #1
 80085f0:	4622      	mov	r2, r4
 80085f2:	4649      	mov	r1, r9
 80085f4:	4638      	mov	r0, r7
 80085f6:	47c0      	blx	r8
 80085f8:	3001      	adds	r0, #1
 80085fa:	d0e6      	beq.n	80085ca <_printf_common+0xae>
 80085fc:	3601      	adds	r6, #1
 80085fe:	e7d9      	b.n	80085b4 <_printf_common+0x98>

08008600 <_printf_i>:
 8008600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	7e0f      	ldrb	r7, [r1, #24]
 8008606:	4691      	mov	r9, r2
 8008608:	2f78      	cmp	r7, #120	; 0x78
 800860a:	4680      	mov	r8, r0
 800860c:	460c      	mov	r4, r1
 800860e:	469a      	mov	sl, r3
 8008610:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008612:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008616:	d807      	bhi.n	8008628 <_printf_i+0x28>
 8008618:	2f62      	cmp	r7, #98	; 0x62
 800861a:	d80a      	bhi.n	8008632 <_printf_i+0x32>
 800861c:	2f00      	cmp	r7, #0
 800861e:	f000 80d5 	beq.w	80087cc <_printf_i+0x1cc>
 8008622:	2f58      	cmp	r7, #88	; 0x58
 8008624:	f000 80c1 	beq.w	80087aa <_printf_i+0x1aa>
 8008628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800862c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008630:	e03a      	b.n	80086a8 <_printf_i+0xa8>
 8008632:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008636:	2b15      	cmp	r3, #21
 8008638:	d8f6      	bhi.n	8008628 <_printf_i+0x28>
 800863a:	a101      	add	r1, pc, #4	; (adr r1, 8008640 <_printf_i+0x40>)
 800863c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008640:	08008699 	.word	0x08008699
 8008644:	080086ad 	.word	0x080086ad
 8008648:	08008629 	.word	0x08008629
 800864c:	08008629 	.word	0x08008629
 8008650:	08008629 	.word	0x08008629
 8008654:	08008629 	.word	0x08008629
 8008658:	080086ad 	.word	0x080086ad
 800865c:	08008629 	.word	0x08008629
 8008660:	08008629 	.word	0x08008629
 8008664:	08008629 	.word	0x08008629
 8008668:	08008629 	.word	0x08008629
 800866c:	080087b3 	.word	0x080087b3
 8008670:	080086d9 	.word	0x080086d9
 8008674:	0800876d 	.word	0x0800876d
 8008678:	08008629 	.word	0x08008629
 800867c:	08008629 	.word	0x08008629
 8008680:	080087d5 	.word	0x080087d5
 8008684:	08008629 	.word	0x08008629
 8008688:	080086d9 	.word	0x080086d9
 800868c:	08008629 	.word	0x08008629
 8008690:	08008629 	.word	0x08008629
 8008694:	08008775 	.word	0x08008775
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	1d1a      	adds	r2, r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	602a      	str	r2, [r5, #0]
 80086a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a8:	2301      	movs	r3, #1
 80086aa:	e0a0      	b.n	80087ee <_printf_i+0x1ee>
 80086ac:	6820      	ldr	r0, [r4, #0]
 80086ae:	682b      	ldr	r3, [r5, #0]
 80086b0:	0607      	lsls	r7, r0, #24
 80086b2:	f103 0104 	add.w	r1, r3, #4
 80086b6:	6029      	str	r1, [r5, #0]
 80086b8:	d501      	bpl.n	80086be <_printf_i+0xbe>
 80086ba:	681e      	ldr	r6, [r3, #0]
 80086bc:	e003      	b.n	80086c6 <_printf_i+0xc6>
 80086be:	0646      	lsls	r6, r0, #25
 80086c0:	d5fb      	bpl.n	80086ba <_printf_i+0xba>
 80086c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086c6:	2e00      	cmp	r6, #0
 80086c8:	da03      	bge.n	80086d2 <_printf_i+0xd2>
 80086ca:	232d      	movs	r3, #45	; 0x2d
 80086cc:	4276      	negs	r6, r6
 80086ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d2:	230a      	movs	r3, #10
 80086d4:	4859      	ldr	r0, [pc, #356]	; (800883c <_printf_i+0x23c>)
 80086d6:	e012      	b.n	80086fe <_printf_i+0xfe>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	6820      	ldr	r0, [r4, #0]
 80086dc:	1d19      	adds	r1, r3, #4
 80086de:	6029      	str	r1, [r5, #0]
 80086e0:	0605      	lsls	r5, r0, #24
 80086e2:	d501      	bpl.n	80086e8 <_printf_i+0xe8>
 80086e4:	681e      	ldr	r6, [r3, #0]
 80086e6:	e002      	b.n	80086ee <_printf_i+0xee>
 80086e8:	0641      	lsls	r1, r0, #25
 80086ea:	d5fb      	bpl.n	80086e4 <_printf_i+0xe4>
 80086ec:	881e      	ldrh	r6, [r3, #0]
 80086ee:	2f6f      	cmp	r7, #111	; 0x6f
 80086f0:	bf0c      	ite	eq
 80086f2:	2308      	moveq	r3, #8
 80086f4:	230a      	movne	r3, #10
 80086f6:	4851      	ldr	r0, [pc, #324]	; (800883c <_printf_i+0x23c>)
 80086f8:	2100      	movs	r1, #0
 80086fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086fe:	6865      	ldr	r5, [r4, #4]
 8008700:	2d00      	cmp	r5, #0
 8008702:	bfa8      	it	ge
 8008704:	6821      	ldrge	r1, [r4, #0]
 8008706:	60a5      	str	r5, [r4, #8]
 8008708:	bfa4      	itt	ge
 800870a:	f021 0104 	bicge.w	r1, r1, #4
 800870e:	6021      	strge	r1, [r4, #0]
 8008710:	b90e      	cbnz	r6, 8008716 <_printf_i+0x116>
 8008712:	2d00      	cmp	r5, #0
 8008714:	d04b      	beq.n	80087ae <_printf_i+0x1ae>
 8008716:	4615      	mov	r5, r2
 8008718:	fbb6 f1f3 	udiv	r1, r6, r3
 800871c:	fb03 6711 	mls	r7, r3, r1, r6
 8008720:	5dc7      	ldrb	r7, [r0, r7]
 8008722:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008726:	4637      	mov	r7, r6
 8008728:	42bb      	cmp	r3, r7
 800872a:	460e      	mov	r6, r1
 800872c:	d9f4      	bls.n	8008718 <_printf_i+0x118>
 800872e:	2b08      	cmp	r3, #8
 8008730:	d10b      	bne.n	800874a <_printf_i+0x14a>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	07de      	lsls	r6, r3, #31
 8008736:	d508      	bpl.n	800874a <_printf_i+0x14a>
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	6861      	ldr	r1, [r4, #4]
 800873c:	4299      	cmp	r1, r3
 800873e:	bfde      	ittt	le
 8008740:	2330      	movle	r3, #48	; 0x30
 8008742:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008746:	f105 35ff 	addle.w	r5, r5, #4294967295
 800874a:	1b52      	subs	r2, r2, r5
 800874c:	6122      	str	r2, [r4, #16]
 800874e:	464b      	mov	r3, r9
 8008750:	4621      	mov	r1, r4
 8008752:	4640      	mov	r0, r8
 8008754:	f8cd a000 	str.w	sl, [sp]
 8008758:	aa03      	add	r2, sp, #12
 800875a:	f7ff fedf 	bl	800851c <_printf_common>
 800875e:	3001      	adds	r0, #1
 8008760:	d14a      	bne.n	80087f8 <_printf_i+0x1f8>
 8008762:	f04f 30ff 	mov.w	r0, #4294967295
 8008766:	b004      	add	sp, #16
 8008768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	f043 0320 	orr.w	r3, r3, #32
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	2778      	movs	r7, #120	; 0x78
 8008776:	4832      	ldr	r0, [pc, #200]	; (8008840 <_printf_i+0x240>)
 8008778:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	6829      	ldr	r1, [r5, #0]
 8008780:	061f      	lsls	r7, r3, #24
 8008782:	f851 6b04 	ldr.w	r6, [r1], #4
 8008786:	d402      	bmi.n	800878e <_printf_i+0x18e>
 8008788:	065f      	lsls	r7, r3, #25
 800878a:	bf48      	it	mi
 800878c:	b2b6      	uxthmi	r6, r6
 800878e:	07df      	lsls	r7, r3, #31
 8008790:	bf48      	it	mi
 8008792:	f043 0320 	orrmi.w	r3, r3, #32
 8008796:	6029      	str	r1, [r5, #0]
 8008798:	bf48      	it	mi
 800879a:	6023      	strmi	r3, [r4, #0]
 800879c:	b91e      	cbnz	r6, 80087a6 <_printf_i+0x1a6>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	f023 0320 	bic.w	r3, r3, #32
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	2310      	movs	r3, #16
 80087a8:	e7a6      	b.n	80086f8 <_printf_i+0xf8>
 80087aa:	4824      	ldr	r0, [pc, #144]	; (800883c <_printf_i+0x23c>)
 80087ac:	e7e4      	b.n	8008778 <_printf_i+0x178>
 80087ae:	4615      	mov	r5, r2
 80087b0:	e7bd      	b.n	800872e <_printf_i+0x12e>
 80087b2:	682b      	ldr	r3, [r5, #0]
 80087b4:	6826      	ldr	r6, [r4, #0]
 80087b6:	1d18      	adds	r0, r3, #4
 80087b8:	6961      	ldr	r1, [r4, #20]
 80087ba:	6028      	str	r0, [r5, #0]
 80087bc:	0635      	lsls	r5, r6, #24
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	d501      	bpl.n	80087c6 <_printf_i+0x1c6>
 80087c2:	6019      	str	r1, [r3, #0]
 80087c4:	e002      	b.n	80087cc <_printf_i+0x1cc>
 80087c6:	0670      	lsls	r0, r6, #25
 80087c8:	d5fb      	bpl.n	80087c2 <_printf_i+0x1c2>
 80087ca:	8019      	strh	r1, [r3, #0]
 80087cc:	2300      	movs	r3, #0
 80087ce:	4615      	mov	r5, r2
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	e7bc      	b.n	800874e <_printf_i+0x14e>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	2100      	movs	r1, #0
 80087d8:	1d1a      	adds	r2, r3, #4
 80087da:	602a      	str	r2, [r5, #0]
 80087dc:	681d      	ldr	r5, [r3, #0]
 80087de:	6862      	ldr	r2, [r4, #4]
 80087e0:	4628      	mov	r0, r5
 80087e2:	f000 fac5 	bl	8008d70 <memchr>
 80087e6:	b108      	cbz	r0, 80087ec <_printf_i+0x1ec>
 80087e8:	1b40      	subs	r0, r0, r5
 80087ea:	6060      	str	r0, [r4, #4]
 80087ec:	6863      	ldr	r3, [r4, #4]
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	2300      	movs	r3, #0
 80087f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087f6:	e7aa      	b.n	800874e <_printf_i+0x14e>
 80087f8:	462a      	mov	r2, r5
 80087fa:	4649      	mov	r1, r9
 80087fc:	4640      	mov	r0, r8
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	47d0      	blx	sl
 8008802:	3001      	adds	r0, #1
 8008804:	d0ad      	beq.n	8008762 <_printf_i+0x162>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	079b      	lsls	r3, r3, #30
 800880a:	d413      	bmi.n	8008834 <_printf_i+0x234>
 800880c:	68e0      	ldr	r0, [r4, #12]
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	4298      	cmp	r0, r3
 8008812:	bfb8      	it	lt
 8008814:	4618      	movlt	r0, r3
 8008816:	e7a6      	b.n	8008766 <_printf_i+0x166>
 8008818:	2301      	movs	r3, #1
 800881a:	4632      	mov	r2, r6
 800881c:	4649      	mov	r1, r9
 800881e:	4640      	mov	r0, r8
 8008820:	47d0      	blx	sl
 8008822:	3001      	adds	r0, #1
 8008824:	d09d      	beq.n	8008762 <_printf_i+0x162>
 8008826:	3501      	adds	r5, #1
 8008828:	68e3      	ldr	r3, [r4, #12]
 800882a:	9903      	ldr	r1, [sp, #12]
 800882c:	1a5b      	subs	r3, r3, r1
 800882e:	42ab      	cmp	r3, r5
 8008830:	dcf2      	bgt.n	8008818 <_printf_i+0x218>
 8008832:	e7eb      	b.n	800880c <_printf_i+0x20c>
 8008834:	2500      	movs	r5, #0
 8008836:	f104 0619 	add.w	r6, r4, #25
 800883a:	e7f5      	b.n	8008828 <_printf_i+0x228>
 800883c:	0800b435 	.word	0x0800b435
 8008840:	0800b446 	.word	0x0800b446

08008844 <std>:
 8008844:	2300      	movs	r3, #0
 8008846:	b510      	push	{r4, lr}
 8008848:	4604      	mov	r4, r0
 800884a:	e9c0 3300 	strd	r3, r3, [r0]
 800884e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008852:	6083      	str	r3, [r0, #8]
 8008854:	8181      	strh	r1, [r0, #12]
 8008856:	6643      	str	r3, [r0, #100]	; 0x64
 8008858:	81c2      	strh	r2, [r0, #14]
 800885a:	6183      	str	r3, [r0, #24]
 800885c:	4619      	mov	r1, r3
 800885e:	2208      	movs	r2, #8
 8008860:	305c      	adds	r0, #92	; 0x5c
 8008862:	f000 fa07 	bl	8008c74 <memset>
 8008866:	4b05      	ldr	r3, [pc, #20]	; (800887c <std+0x38>)
 8008868:	6224      	str	r4, [r4, #32]
 800886a:	6263      	str	r3, [r4, #36]	; 0x24
 800886c:	4b04      	ldr	r3, [pc, #16]	; (8008880 <std+0x3c>)
 800886e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008870:	4b04      	ldr	r3, [pc, #16]	; (8008884 <std+0x40>)
 8008872:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008874:	4b04      	ldr	r3, [pc, #16]	; (8008888 <std+0x44>)
 8008876:	6323      	str	r3, [r4, #48]	; 0x30
 8008878:	bd10      	pop	{r4, pc}
 800887a:	bf00      	nop
 800887c:	08008ac5 	.word	0x08008ac5
 8008880:	08008ae7 	.word	0x08008ae7
 8008884:	08008b1f 	.word	0x08008b1f
 8008888:	08008b43 	.word	0x08008b43

0800888c <stdio_exit_handler>:
 800888c:	4a02      	ldr	r2, [pc, #8]	; (8008898 <stdio_exit_handler+0xc>)
 800888e:	4903      	ldr	r1, [pc, #12]	; (800889c <stdio_exit_handler+0x10>)
 8008890:	4803      	ldr	r0, [pc, #12]	; (80088a0 <stdio_exit_handler+0x14>)
 8008892:	f000 b869 	b.w	8008968 <_fwalk_sglue>
 8008896:	bf00      	nop
 8008898:	2000000c 	.word	0x2000000c
 800889c:	0800a725 	.word	0x0800a725
 80088a0:	20000018 	.word	0x20000018

080088a4 <cleanup_stdio>:
 80088a4:	6841      	ldr	r1, [r0, #4]
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <cleanup_stdio+0x34>)
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4299      	cmp	r1, r3
 80088ac:	4604      	mov	r4, r0
 80088ae:	d001      	beq.n	80088b4 <cleanup_stdio+0x10>
 80088b0:	f001 ff38 	bl	800a724 <_fflush_r>
 80088b4:	68a1      	ldr	r1, [r4, #8]
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <cleanup_stdio+0x38>)
 80088b8:	4299      	cmp	r1, r3
 80088ba:	d002      	beq.n	80088c2 <cleanup_stdio+0x1e>
 80088bc:	4620      	mov	r0, r4
 80088be:	f001 ff31 	bl	800a724 <_fflush_r>
 80088c2:	68e1      	ldr	r1, [r4, #12]
 80088c4:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <cleanup_stdio+0x3c>)
 80088c6:	4299      	cmp	r1, r3
 80088c8:	d004      	beq.n	80088d4 <cleanup_stdio+0x30>
 80088ca:	4620      	mov	r0, r4
 80088cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d0:	f001 bf28 	b.w	800a724 <_fflush_r>
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	bf00      	nop
 80088d8:	200006f4 	.word	0x200006f4
 80088dc:	2000075c 	.word	0x2000075c
 80088e0:	200007c4 	.word	0x200007c4

080088e4 <global_stdio_init.part.0>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	4b0b      	ldr	r3, [pc, #44]	; (8008914 <global_stdio_init.part.0+0x30>)
 80088e8:	4c0b      	ldr	r4, [pc, #44]	; (8008918 <global_stdio_init.part.0+0x34>)
 80088ea:	4a0c      	ldr	r2, [pc, #48]	; (800891c <global_stdio_init.part.0+0x38>)
 80088ec:	4620      	mov	r0, r4
 80088ee:	601a      	str	r2, [r3, #0]
 80088f0:	2104      	movs	r1, #4
 80088f2:	2200      	movs	r2, #0
 80088f4:	f7ff ffa6 	bl	8008844 <std>
 80088f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088fc:	2201      	movs	r2, #1
 80088fe:	2109      	movs	r1, #9
 8008900:	f7ff ffa0 	bl	8008844 <std>
 8008904:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008908:	2202      	movs	r2, #2
 800890a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800890e:	2112      	movs	r1, #18
 8008910:	f7ff bf98 	b.w	8008844 <std>
 8008914:	2000082c 	.word	0x2000082c
 8008918:	200006f4 	.word	0x200006f4
 800891c:	0800888d 	.word	0x0800888d

08008920 <__sfp_lock_acquire>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__sfp_lock_acquire+0x8>)
 8008922:	f000 ba23 	b.w	8008d6c <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	20000835 	.word	0x20000835

0800892c <__sfp_lock_release>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__sfp_lock_release+0x8>)
 800892e:	f000 ba1e 	b.w	8008d6e <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	20000835 	.word	0x20000835

08008938 <__sinit>:
 8008938:	b510      	push	{r4, lr}
 800893a:	4604      	mov	r4, r0
 800893c:	f7ff fff0 	bl	8008920 <__sfp_lock_acquire>
 8008940:	6a23      	ldr	r3, [r4, #32]
 8008942:	b11b      	cbz	r3, 800894c <__sinit+0x14>
 8008944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008948:	f7ff bff0 	b.w	800892c <__sfp_lock_release>
 800894c:	4b04      	ldr	r3, [pc, #16]	; (8008960 <__sinit+0x28>)
 800894e:	6223      	str	r3, [r4, #32]
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <__sinit+0x2c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1f5      	bne.n	8008944 <__sinit+0xc>
 8008958:	f7ff ffc4 	bl	80088e4 <global_stdio_init.part.0>
 800895c:	e7f2      	b.n	8008944 <__sinit+0xc>
 800895e:	bf00      	nop
 8008960:	080088a5 	.word	0x080088a5
 8008964:	2000082c 	.word	0x2000082c

08008968 <_fwalk_sglue>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	4607      	mov	r7, r0
 800896e:	4688      	mov	r8, r1
 8008970:	4614      	mov	r4, r2
 8008972:	2600      	movs	r6, #0
 8008974:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008978:	f1b9 0901 	subs.w	r9, r9, #1
 800897c:	d505      	bpl.n	800898a <_fwalk_sglue+0x22>
 800897e:	6824      	ldr	r4, [r4, #0]
 8008980:	2c00      	cmp	r4, #0
 8008982:	d1f7      	bne.n	8008974 <_fwalk_sglue+0xc>
 8008984:	4630      	mov	r0, r6
 8008986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898a:	89ab      	ldrh	r3, [r5, #12]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d907      	bls.n	80089a0 <_fwalk_sglue+0x38>
 8008990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008994:	3301      	adds	r3, #1
 8008996:	d003      	beq.n	80089a0 <_fwalk_sglue+0x38>
 8008998:	4629      	mov	r1, r5
 800899a:	4638      	mov	r0, r7
 800899c:	47c0      	blx	r8
 800899e:	4306      	orrs	r6, r0
 80089a0:	3568      	adds	r5, #104	; 0x68
 80089a2:	e7e9      	b.n	8008978 <_fwalk_sglue+0x10>

080089a4 <_puts_r>:
 80089a4:	6a03      	ldr	r3, [r0, #32]
 80089a6:	b570      	push	{r4, r5, r6, lr}
 80089a8:	4605      	mov	r5, r0
 80089aa:	460e      	mov	r6, r1
 80089ac:	6884      	ldr	r4, [r0, #8]
 80089ae:	b90b      	cbnz	r3, 80089b4 <_puts_r+0x10>
 80089b0:	f7ff ffc2 	bl	8008938 <__sinit>
 80089b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b6:	07db      	lsls	r3, r3, #31
 80089b8:	d405      	bmi.n	80089c6 <_puts_r+0x22>
 80089ba:	89a3      	ldrh	r3, [r4, #12]
 80089bc:	0598      	lsls	r0, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_puts_r+0x22>
 80089c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c2:	f000 f9d3 	bl	8008d6c <__retarget_lock_acquire_recursive>
 80089c6:	89a3      	ldrh	r3, [r4, #12]
 80089c8:	0719      	lsls	r1, r3, #28
 80089ca:	d513      	bpl.n	80089f4 <_puts_r+0x50>
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	b18b      	cbz	r3, 80089f4 <_puts_r+0x50>
 80089d0:	3e01      	subs	r6, #1
 80089d2:	68a3      	ldr	r3, [r4, #8]
 80089d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089d8:	3b01      	subs	r3, #1
 80089da:	60a3      	str	r3, [r4, #8]
 80089dc:	b9e9      	cbnz	r1, 8008a1a <_puts_r+0x76>
 80089de:	2b00      	cmp	r3, #0
 80089e0:	da2e      	bge.n	8008a40 <_puts_r+0x9c>
 80089e2:	4622      	mov	r2, r4
 80089e4:	210a      	movs	r1, #10
 80089e6:	4628      	mov	r0, r5
 80089e8:	f000 f8af 	bl	8008b4a <__swbuf_r>
 80089ec:	3001      	adds	r0, #1
 80089ee:	d007      	beq.n	8008a00 <_puts_r+0x5c>
 80089f0:	250a      	movs	r5, #10
 80089f2:	e007      	b.n	8008a04 <_puts_r+0x60>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 f8e4 	bl	8008bc4 <__swsetup_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d0e7      	beq.n	80089d0 <_puts_r+0x2c>
 8008a00:	f04f 35ff 	mov.w	r5, #4294967295
 8008a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a06:	07da      	lsls	r2, r3, #31
 8008a08:	d405      	bmi.n	8008a16 <_puts_r+0x72>
 8008a0a:	89a3      	ldrh	r3, [r4, #12]
 8008a0c:	059b      	lsls	r3, r3, #22
 8008a0e:	d402      	bmi.n	8008a16 <_puts_r+0x72>
 8008a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a12:	f000 f9ac 	bl	8008d6e <__retarget_lock_release_recursive>
 8008a16:	4628      	mov	r0, r5
 8008a18:	bd70      	pop	{r4, r5, r6, pc}
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	da04      	bge.n	8008a28 <_puts_r+0x84>
 8008a1e:	69a2      	ldr	r2, [r4, #24]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	dc06      	bgt.n	8008a32 <_puts_r+0x8e>
 8008a24:	290a      	cmp	r1, #10
 8008a26:	d004      	beq.n	8008a32 <_puts_r+0x8e>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	1c5a      	adds	r2, r3, #1
 8008a2c:	6022      	str	r2, [r4, #0]
 8008a2e:	7019      	strb	r1, [r3, #0]
 8008a30:	e7cf      	b.n	80089d2 <_puts_r+0x2e>
 8008a32:	4622      	mov	r2, r4
 8008a34:	4628      	mov	r0, r5
 8008a36:	f000 f888 	bl	8008b4a <__swbuf_r>
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d1c9      	bne.n	80089d2 <_puts_r+0x2e>
 8008a3e:	e7df      	b.n	8008a00 <_puts_r+0x5c>
 8008a40:	250a      	movs	r5, #10
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	701d      	strb	r5, [r3, #0]
 8008a4a:	e7db      	b.n	8008a04 <_puts_r+0x60>

08008a4c <puts>:
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <puts+0xc>)
 8008a4e:	4601      	mov	r1, r0
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	f7ff bfa7 	b.w	80089a4 <_puts_r>
 8008a56:	bf00      	nop
 8008a58:	20000064 	.word	0x20000064

08008a5c <sniprintf>:
 8008a5c:	b40c      	push	{r2, r3}
 8008a5e:	b530      	push	{r4, r5, lr}
 8008a60:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <sniprintf+0x64>)
 8008a62:	1e0c      	subs	r4, r1, #0
 8008a64:	681d      	ldr	r5, [r3, #0]
 8008a66:	b09d      	sub	sp, #116	; 0x74
 8008a68:	da08      	bge.n	8008a7c <sniprintf+0x20>
 8008a6a:	238b      	movs	r3, #139	; 0x8b
 8008a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a70:	602b      	str	r3, [r5, #0]
 8008a72:	b01d      	add	sp, #116	; 0x74
 8008a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a78:	b002      	add	sp, #8
 8008a7a:	4770      	bx	lr
 8008a7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008a80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a84:	bf0c      	ite	eq
 8008a86:	4623      	moveq	r3, r4
 8008a88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a8c:	9304      	str	r3, [sp, #16]
 8008a8e:	9307      	str	r3, [sp, #28]
 8008a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a94:	9002      	str	r0, [sp, #8]
 8008a96:	9006      	str	r0, [sp, #24]
 8008a98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	ab21      	add	r3, sp, #132	; 0x84
 8008aa0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008aa2:	a902      	add	r1, sp, #8
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	f001 fcbd 	bl	800a424 <_svfiprintf_r>
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	bfbc      	itt	lt
 8008aae:	238b      	movlt	r3, #139	; 0x8b
 8008ab0:	602b      	strlt	r3, [r5, #0]
 8008ab2:	2c00      	cmp	r4, #0
 8008ab4:	d0dd      	beq.n	8008a72 <sniprintf+0x16>
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	9b02      	ldr	r3, [sp, #8]
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e7d9      	b.n	8008a72 <sniprintf+0x16>
 8008abe:	bf00      	nop
 8008ac0:	20000064 	.word	0x20000064

08008ac4 <__sread>:
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	f000 f900 	bl	8008cd0 <_read_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	bfab      	itete	ge
 8008ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ad8:	181b      	addge	r3, r3, r0
 8008ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ade:	bfac      	ite	ge
 8008ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ae2:	81a3      	strhlt	r3, [r4, #12]
 8008ae4:	bd10      	pop	{r4, pc}

08008ae6 <__swrite>:
 8008ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	461f      	mov	r7, r3
 8008aec:	898b      	ldrh	r3, [r1, #12]
 8008aee:	4605      	mov	r5, r0
 8008af0:	05db      	lsls	r3, r3, #23
 8008af2:	460c      	mov	r4, r1
 8008af4:	4616      	mov	r6, r2
 8008af6:	d505      	bpl.n	8008b04 <__swrite+0x1e>
 8008af8:	2302      	movs	r3, #2
 8008afa:	2200      	movs	r2, #0
 8008afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b00:	f000 f8d4 	bl	8008cac <_lseek_r>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	4632      	mov	r2, r6
 8008b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	4628      	mov	r0, r5
 8008b10:	463b      	mov	r3, r7
 8008b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	f000 b8eb 	b.w	8008cf4 <_write_r>

08008b1e <__sseek>:
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	460c      	mov	r4, r1
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 f8c1 	bl	8008cac <_lseek_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	bf15      	itete	ne
 8008b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strheq	r3, [r4, #12]
 8008b3c:	bf18      	it	ne
 8008b3e:	81a3      	strhne	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__sclose>:
 8008b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b46:	f000 b8a1 	b.w	8008c8c <_close_r>

08008b4a <__swbuf_r>:
 8008b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4c:	460e      	mov	r6, r1
 8008b4e:	4614      	mov	r4, r2
 8008b50:	4605      	mov	r5, r0
 8008b52:	b118      	cbz	r0, 8008b5c <__swbuf_r+0x12>
 8008b54:	6a03      	ldr	r3, [r0, #32]
 8008b56:	b90b      	cbnz	r3, 8008b5c <__swbuf_r+0x12>
 8008b58:	f7ff feee 	bl	8008938 <__sinit>
 8008b5c:	69a3      	ldr	r3, [r4, #24]
 8008b5e:	60a3      	str	r3, [r4, #8]
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	071a      	lsls	r2, r3, #28
 8008b64:	d525      	bpl.n	8008bb2 <__swbuf_r+0x68>
 8008b66:	6923      	ldr	r3, [r4, #16]
 8008b68:	b31b      	cbz	r3, 8008bb2 <__swbuf_r+0x68>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	6922      	ldr	r2, [r4, #16]
 8008b6e:	b2f6      	uxtb	r6, r6
 8008b70:	1a98      	subs	r0, r3, r2
 8008b72:	6963      	ldr	r3, [r4, #20]
 8008b74:	4637      	mov	r7, r6
 8008b76:	4283      	cmp	r3, r0
 8008b78:	dc04      	bgt.n	8008b84 <__swbuf_r+0x3a>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f001 fdd1 	bl	800a724 <_fflush_r>
 8008b82:	b9e0      	cbnz	r0, 8008bbe <__swbuf_r+0x74>
 8008b84:	68a3      	ldr	r3, [r4, #8]
 8008b86:	3b01      	subs	r3, #1
 8008b88:	60a3      	str	r3, [r4, #8]
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	1c5a      	adds	r2, r3, #1
 8008b8e:	6022      	str	r2, [r4, #0]
 8008b90:	701e      	strb	r6, [r3, #0]
 8008b92:	6962      	ldr	r2, [r4, #20]
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d004      	beq.n	8008ba4 <__swbuf_r+0x5a>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	07db      	lsls	r3, r3, #31
 8008b9e:	d506      	bpl.n	8008bae <__swbuf_r+0x64>
 8008ba0:	2e0a      	cmp	r6, #10
 8008ba2:	d104      	bne.n	8008bae <__swbuf_r+0x64>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f001 fdbc 	bl	800a724 <_fflush_r>
 8008bac:	b938      	cbnz	r0, 8008bbe <__swbuf_r+0x74>
 8008bae:	4638      	mov	r0, r7
 8008bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bb2:	4621      	mov	r1, r4
 8008bb4:	4628      	mov	r0, r5
 8008bb6:	f000 f805 	bl	8008bc4 <__swsetup_r>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d0d5      	beq.n	8008b6a <__swbuf_r+0x20>
 8008bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8008bc2:	e7f4      	b.n	8008bae <__swbuf_r+0x64>

08008bc4 <__swsetup_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4b2a      	ldr	r3, [pc, #168]	; (8008c70 <__swsetup_r+0xac>)
 8008bc8:	4605      	mov	r5, r0
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	460c      	mov	r4, r1
 8008bce:	b118      	cbz	r0, 8008bd8 <__swsetup_r+0x14>
 8008bd0:	6a03      	ldr	r3, [r0, #32]
 8008bd2:	b90b      	cbnz	r3, 8008bd8 <__swsetup_r+0x14>
 8008bd4:	f7ff feb0 	bl	8008938 <__sinit>
 8008bd8:	89a3      	ldrh	r3, [r4, #12]
 8008bda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008bde:	0718      	lsls	r0, r3, #28
 8008be0:	d422      	bmi.n	8008c28 <__swsetup_r+0x64>
 8008be2:	06d9      	lsls	r1, r3, #27
 8008be4:	d407      	bmi.n	8008bf6 <__swsetup_r+0x32>
 8008be6:	2309      	movs	r3, #9
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bee:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	e034      	b.n	8008c60 <__swsetup_r+0x9c>
 8008bf6:	0758      	lsls	r0, r3, #29
 8008bf8:	d512      	bpl.n	8008c20 <__swsetup_r+0x5c>
 8008bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfc:	b141      	cbz	r1, 8008c10 <__swsetup_r+0x4c>
 8008bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c02:	4299      	cmp	r1, r3
 8008c04:	d002      	beq.n	8008c0c <__swsetup_r+0x48>
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 ff3e 	bl	8009a88 <_free_r>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	6363      	str	r3, [r4, #52]	; 0x34
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c16:	81a3      	strh	r3, [r4, #12]
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6063      	str	r3, [r4, #4]
 8008c1c:	6923      	ldr	r3, [r4, #16]
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	f043 0308 	orr.w	r3, r3, #8
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b94b      	cbnz	r3, 8008c40 <__swsetup_r+0x7c>
 8008c2c:	89a3      	ldrh	r3, [r4, #12]
 8008c2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c36:	d003      	beq.n	8008c40 <__swsetup_r+0x7c>
 8008c38:	4621      	mov	r1, r4
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f001 fdbf 	bl	800a7be <__smakebuf_r>
 8008c40:	89a0      	ldrh	r0, [r4, #12]
 8008c42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c46:	f010 0301 	ands.w	r3, r0, #1
 8008c4a:	d00a      	beq.n	8008c62 <__swsetup_r+0x9e>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60a3      	str	r3, [r4, #8]
 8008c50:	6963      	ldr	r3, [r4, #20]
 8008c52:	425b      	negs	r3, r3
 8008c54:	61a3      	str	r3, [r4, #24]
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	b943      	cbnz	r3, 8008c6c <__swsetup_r+0xa8>
 8008c5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c5e:	d1c4      	bne.n	8008bea <__swsetup_r+0x26>
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
 8008c62:	0781      	lsls	r1, r0, #30
 8008c64:	bf58      	it	pl
 8008c66:	6963      	ldrpl	r3, [r4, #20]
 8008c68:	60a3      	str	r3, [r4, #8]
 8008c6a:	e7f4      	b.n	8008c56 <__swsetup_r+0x92>
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e7f7      	b.n	8008c60 <__swsetup_r+0x9c>
 8008c70:	20000064 	.word	0x20000064

08008c74 <memset>:
 8008c74:	4603      	mov	r3, r0
 8008c76:	4402      	add	r2, r0
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d100      	bne.n	8008c7e <memset+0xa>
 8008c7c:	4770      	bx	lr
 8008c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c82:	e7f9      	b.n	8008c78 <memset+0x4>

08008c84 <_localeconv_r>:
 8008c84:	4800      	ldr	r0, [pc, #0]	; (8008c88 <_localeconv_r+0x4>)
 8008c86:	4770      	bx	lr
 8008c88:	20000158 	.word	0x20000158

08008c8c <_close_r>:
 8008c8c:	b538      	push	{r3, r4, r5, lr}
 8008c8e:	2300      	movs	r3, #0
 8008c90:	4d05      	ldr	r5, [pc, #20]	; (8008ca8 <_close_r+0x1c>)
 8008c92:	4604      	mov	r4, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	602b      	str	r3, [r5, #0]
 8008c98:	f7fa f8ac 	bl	8002df4 <_close>
 8008c9c:	1c43      	adds	r3, r0, #1
 8008c9e:	d102      	bne.n	8008ca6 <_close_r+0x1a>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b103      	cbz	r3, 8008ca6 <_close_r+0x1a>
 8008ca4:	6023      	str	r3, [r4, #0]
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	20000830 	.word	0x20000830

08008cac <_lseek_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4d05      	ldr	r5, [pc, #20]	; (8008ccc <_lseek_r+0x20>)
 8008cb8:	602a      	str	r2, [r5, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	f7fa f8be 	bl	8002e3c <_lseek>
 8008cc0:	1c43      	adds	r3, r0, #1
 8008cc2:	d102      	bne.n	8008cca <_lseek_r+0x1e>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	b103      	cbz	r3, 8008cca <_lseek_r+0x1e>
 8008cc8:	6023      	str	r3, [r4, #0]
 8008cca:	bd38      	pop	{r3, r4, r5, pc}
 8008ccc:	20000830 	.word	0x20000830

08008cd0 <_read_r>:
 8008cd0:	b538      	push	{r3, r4, r5, lr}
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4d05      	ldr	r5, [pc, #20]	; (8008cf0 <_read_r+0x20>)
 8008cdc:	602a      	str	r2, [r5, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f7fa f84f 	bl	8002d82 <_read>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_read_r+0x1e>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_read_r+0x1e>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	20000830 	.word	0x20000830

08008cf4 <_write_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	4608      	mov	r0, r1
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4d05      	ldr	r5, [pc, #20]	; (8008d14 <_write_r+0x20>)
 8008d00:	602a      	str	r2, [r5, #0]
 8008d02:	461a      	mov	r2, r3
 8008d04:	f7fa f85a 	bl	8002dbc <_write>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_write_r+0x1e>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_write_r+0x1e>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	20000830 	.word	0x20000830

08008d18 <__errno>:
 8008d18:	4b01      	ldr	r3, [pc, #4]	; (8008d20 <__errno+0x8>)
 8008d1a:	6818      	ldr	r0, [r3, #0]
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	20000064 	.word	0x20000064

08008d24 <__libc_init_array>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	2600      	movs	r6, #0
 8008d28:	4d0c      	ldr	r5, [pc, #48]	; (8008d5c <__libc_init_array+0x38>)
 8008d2a:	4c0d      	ldr	r4, [pc, #52]	; (8008d60 <__libc_init_array+0x3c>)
 8008d2c:	1b64      	subs	r4, r4, r5
 8008d2e:	10a4      	asrs	r4, r4, #2
 8008d30:	42a6      	cmp	r6, r4
 8008d32:	d109      	bne.n	8008d48 <__libc_init_array+0x24>
 8008d34:	f002 fa52 	bl	800b1dc <_init>
 8008d38:	2600      	movs	r6, #0
 8008d3a:	4d0a      	ldr	r5, [pc, #40]	; (8008d64 <__libc_init_array+0x40>)
 8008d3c:	4c0a      	ldr	r4, [pc, #40]	; (8008d68 <__libc_init_array+0x44>)
 8008d3e:	1b64      	subs	r4, r4, r5
 8008d40:	10a4      	asrs	r4, r4, #2
 8008d42:	42a6      	cmp	r6, r4
 8008d44:	d105      	bne.n	8008d52 <__libc_init_array+0x2e>
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d4c:	4798      	blx	r3
 8008d4e:	3601      	adds	r6, #1
 8008d50:	e7ee      	b.n	8008d30 <__libc_init_array+0xc>
 8008d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d56:	4798      	blx	r3
 8008d58:	3601      	adds	r6, #1
 8008d5a:	e7f2      	b.n	8008d42 <__libc_init_array+0x1e>
 8008d5c:	0800b708 	.word	0x0800b708
 8008d60:	0800b708 	.word	0x0800b708
 8008d64:	0800b708 	.word	0x0800b708
 8008d68:	0800b70c 	.word	0x0800b70c

08008d6c <__retarget_lock_acquire_recursive>:
 8008d6c:	4770      	bx	lr

08008d6e <__retarget_lock_release_recursive>:
 8008d6e:	4770      	bx	lr

08008d70 <memchr>:
 8008d70:	4603      	mov	r3, r0
 8008d72:	b510      	push	{r4, lr}
 8008d74:	b2c9      	uxtb	r1, r1
 8008d76:	4402      	add	r2, r0
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	d101      	bne.n	8008d82 <memchr+0x12>
 8008d7e:	2000      	movs	r0, #0
 8008d80:	e003      	b.n	8008d8a <memchr+0x1a>
 8008d82:	7804      	ldrb	r4, [r0, #0]
 8008d84:	3301      	adds	r3, #1
 8008d86:	428c      	cmp	r4, r1
 8008d88:	d1f6      	bne.n	8008d78 <memchr+0x8>
 8008d8a:	bd10      	pop	{r4, pc}

08008d8c <memcpy>:
 8008d8c:	440a      	add	r2, r1
 8008d8e:	4291      	cmp	r1, r2
 8008d90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d94:	d100      	bne.n	8008d98 <memcpy+0xc>
 8008d96:	4770      	bx	lr
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9e:	4291      	cmp	r1, r2
 8008da0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008da4:	d1f9      	bne.n	8008d9a <memcpy+0xe>
 8008da6:	bd10      	pop	{r4, pc}

08008da8 <quorem>:
 8008da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	6903      	ldr	r3, [r0, #16]
 8008dae:	690c      	ldr	r4, [r1, #16]
 8008db0:	4607      	mov	r7, r0
 8008db2:	42a3      	cmp	r3, r4
 8008db4:	db7f      	blt.n	8008eb6 <quorem+0x10e>
 8008db6:	3c01      	subs	r4, #1
 8008db8:	f100 0514 	add.w	r5, r0, #20
 8008dbc:	f101 0814 	add.w	r8, r1, #20
 8008dc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008dd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008dda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008dde:	d331      	bcc.n	8008e44 <quorem+0x9c>
 8008de0:	f04f 0e00 	mov.w	lr, #0
 8008de4:	4640      	mov	r0, r8
 8008de6:	46ac      	mov	ip, r5
 8008de8:	46f2      	mov	sl, lr
 8008dea:	f850 2b04 	ldr.w	r2, [r0], #4
 8008dee:	b293      	uxth	r3, r2
 8008df0:	fb06 e303 	mla	r3, r6, r3, lr
 8008df4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008df8:	0c1a      	lsrs	r2, r3, #16
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	fb06 220e 	mla	r2, r6, lr, r2
 8008e00:	ebaa 0303 	sub.w	r3, sl, r3
 8008e04:	f8dc a000 	ldr.w	sl, [ip]
 8008e08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e0c:	fa1f fa8a 	uxth.w	sl, sl
 8008e10:	4453      	add	r3, sl
 8008e12:	f8dc a000 	ldr.w	sl, [ip]
 8008e16:	b292      	uxth	r2, r2
 8008e18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e26:	4581      	cmp	r9, r0
 8008e28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008e2c:	f84c 3b04 	str.w	r3, [ip], #4
 8008e30:	d2db      	bcs.n	8008dea <quorem+0x42>
 8008e32:	f855 300b 	ldr.w	r3, [r5, fp]
 8008e36:	b92b      	cbnz	r3, 8008e44 <quorem+0x9c>
 8008e38:	9b01      	ldr	r3, [sp, #4]
 8008e3a:	3b04      	subs	r3, #4
 8008e3c:	429d      	cmp	r5, r3
 8008e3e:	461a      	mov	r2, r3
 8008e40:	d32d      	bcc.n	8008e9e <quorem+0xf6>
 8008e42:	613c      	str	r4, [r7, #16]
 8008e44:	4638      	mov	r0, r7
 8008e46:	f001 f995 	bl	800a174 <__mcmp>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	db23      	blt.n	8008e96 <quorem+0xee>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	2000      	movs	r0, #0
 8008e52:	3601      	adds	r6, #1
 8008e54:	f858 2b04 	ldr.w	r2, [r8], #4
 8008e58:	f8d1 c000 	ldr.w	ip, [r1]
 8008e5c:	b293      	uxth	r3, r2
 8008e5e:	1ac3      	subs	r3, r0, r3
 8008e60:	0c12      	lsrs	r2, r2, #16
 8008e62:	fa1f f08c 	uxth.w	r0, ip
 8008e66:	4403      	add	r3, r0
 8008e68:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e76:	45c1      	cmp	r9, r8
 8008e78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008e7c:	f841 3b04 	str.w	r3, [r1], #4
 8008e80:	d2e8      	bcs.n	8008e54 <quorem+0xac>
 8008e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e8a:	b922      	cbnz	r2, 8008e96 <quorem+0xee>
 8008e8c:	3b04      	subs	r3, #4
 8008e8e:	429d      	cmp	r5, r3
 8008e90:	461a      	mov	r2, r3
 8008e92:	d30a      	bcc.n	8008eaa <quorem+0x102>
 8008e94:	613c      	str	r4, [r7, #16]
 8008e96:	4630      	mov	r0, r6
 8008e98:	b003      	add	sp, #12
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	6812      	ldr	r2, [r2, #0]
 8008ea0:	3b04      	subs	r3, #4
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	d1cd      	bne.n	8008e42 <quorem+0x9a>
 8008ea6:	3c01      	subs	r4, #1
 8008ea8:	e7c8      	b.n	8008e3c <quorem+0x94>
 8008eaa:	6812      	ldr	r2, [r2, #0]
 8008eac:	3b04      	subs	r3, #4
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	d1f0      	bne.n	8008e94 <quorem+0xec>
 8008eb2:	3c01      	subs	r4, #1
 8008eb4:	e7eb      	b.n	8008e8e <quorem+0xe6>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e7ee      	b.n	8008e98 <quorem+0xf0>
 8008eba:	0000      	movs	r0, r0
 8008ebc:	0000      	movs	r0, r0
	...

08008ec0 <_dtoa_r>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	4616      	mov	r6, r2
 8008ec6:	461f      	mov	r7, r3
 8008ec8:	69c4      	ldr	r4, [r0, #28]
 8008eca:	b099      	sub	sp, #100	; 0x64
 8008ecc:	4605      	mov	r5, r0
 8008ece:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ed2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008ed6:	b974      	cbnz	r4, 8008ef6 <_dtoa_r+0x36>
 8008ed8:	2010      	movs	r0, #16
 8008eda:	f000 fe1d 	bl	8009b18 <malloc>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	61e8      	str	r0, [r5, #28]
 8008ee2:	b920      	cbnz	r0, 8008eee <_dtoa_r+0x2e>
 8008ee4:	21ef      	movs	r1, #239	; 0xef
 8008ee6:	4bac      	ldr	r3, [pc, #688]	; (8009198 <_dtoa_r+0x2d8>)
 8008ee8:	48ac      	ldr	r0, [pc, #688]	; (800919c <_dtoa_r+0x2dc>)
 8008eea:	f001 fcf1 	bl	800a8d0 <__assert_func>
 8008eee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ef2:	6004      	str	r4, [r0, #0]
 8008ef4:	60c4      	str	r4, [r0, #12]
 8008ef6:	69eb      	ldr	r3, [r5, #28]
 8008ef8:	6819      	ldr	r1, [r3, #0]
 8008efa:	b151      	cbz	r1, 8008f12 <_dtoa_r+0x52>
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	2301      	movs	r3, #1
 8008f00:	4093      	lsls	r3, r2
 8008f02:	604a      	str	r2, [r1, #4]
 8008f04:	608b      	str	r3, [r1, #8]
 8008f06:	4628      	mov	r0, r5
 8008f08:	f000 fefa 	bl	8009d00 <_Bfree>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	69eb      	ldr	r3, [r5, #28]
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	1e3b      	subs	r3, r7, #0
 8008f14:	bfaf      	iteee	ge
 8008f16:	2300      	movge	r3, #0
 8008f18:	2201      	movlt	r2, #1
 8008f1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f1e:	9305      	strlt	r3, [sp, #20]
 8008f20:	bfa8      	it	ge
 8008f22:	f8c8 3000 	strge.w	r3, [r8]
 8008f26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008f2a:	4b9d      	ldr	r3, [pc, #628]	; (80091a0 <_dtoa_r+0x2e0>)
 8008f2c:	bfb8      	it	lt
 8008f2e:	f8c8 2000 	strlt.w	r2, [r8]
 8008f32:	ea33 0309 	bics.w	r3, r3, r9
 8008f36:	d119      	bne.n	8008f6c <_dtoa_r+0xac>
 8008f38:	f242 730f 	movw	r3, #9999	; 0x270f
 8008f3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f44:	4333      	orrs	r3, r6
 8008f46:	f000 8589 	beq.w	8009a5c <_dtoa_r+0xb9c>
 8008f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f4c:	b953      	cbnz	r3, 8008f64 <_dtoa_r+0xa4>
 8008f4e:	4b95      	ldr	r3, [pc, #596]	; (80091a4 <_dtoa_r+0x2e4>)
 8008f50:	e023      	b.n	8008f9a <_dtoa_r+0xda>
 8008f52:	4b95      	ldr	r3, [pc, #596]	; (80091a8 <_dtoa_r+0x2e8>)
 8008f54:	9303      	str	r3, [sp, #12]
 8008f56:	3308      	adds	r3, #8
 8008f58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f5a:	6013      	str	r3, [r2, #0]
 8008f5c:	9803      	ldr	r0, [sp, #12]
 8008f5e:	b019      	add	sp, #100	; 0x64
 8008f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f64:	4b8f      	ldr	r3, [pc, #572]	; (80091a4 <_dtoa_r+0x2e4>)
 8008f66:	9303      	str	r3, [sp, #12]
 8008f68:	3303      	adds	r3, #3
 8008f6a:	e7f5      	b.n	8008f58 <_dtoa_r+0x98>
 8008f6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008f70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f7f7 fd1e 	bl	80009bc <__aeabi_dcmpeq>
 8008f80:	4680      	mov	r8, r0
 8008f82:	b160      	cbz	r0, 8008f9e <_dtoa_r+0xde>
 8008f84:	2301      	movs	r3, #1
 8008f86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008f88:	6013      	str	r3, [r2, #0]
 8008f8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8562 	beq.w	8009a56 <_dtoa_r+0xb96>
 8008f92:	4b86      	ldr	r3, [pc, #536]	; (80091ac <_dtoa_r+0x2ec>)
 8008f94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	9303      	str	r3, [sp, #12]
 8008f9c:	e7de      	b.n	8008f5c <_dtoa_r+0x9c>
 8008f9e:	ab16      	add	r3, sp, #88	; 0x58
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	ab17      	add	r3, sp, #92	; 0x5c
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008fac:	f001 f98a 	bl	800a2c4 <__d2b>
 8008fb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008fb4:	4682      	mov	sl, r0
 8008fb6:	2c00      	cmp	r4, #0
 8008fb8:	d07e      	beq.n	80090b8 <_dtoa_r+0x1f8>
 8008fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fc0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fc8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008fcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008fd0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	4b75      	ldr	r3, [pc, #468]	; (80091b0 <_dtoa_r+0x2f0>)
 8008fda:	f7f7 f8cf 	bl	800017c <__aeabi_dsub>
 8008fde:	a368      	add	r3, pc, #416	; (adr r3, 8009180 <_dtoa_r+0x2c0>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f7f7 fa82 	bl	80004ec <__aeabi_dmul>
 8008fe8:	a367      	add	r3, pc, #412	; (adr r3, 8009188 <_dtoa_r+0x2c8>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 f8c7 	bl	8000180 <__adddf3>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	460f      	mov	r7, r1
 8008ff8:	f7f7 fa0e 	bl	8000418 <__aeabi_i2d>
 8008ffc:	a364      	add	r3, pc, #400	; (adr r3, 8009190 <_dtoa_r+0x2d0>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 fa73 	bl	80004ec <__aeabi_dmul>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4630      	mov	r0, r6
 800900c:	4639      	mov	r1, r7
 800900e:	f7f7 f8b7 	bl	8000180 <__adddf3>
 8009012:	4606      	mov	r6, r0
 8009014:	460f      	mov	r7, r1
 8009016:	f7f7 fd19 	bl	8000a4c <__aeabi_d2iz>
 800901a:	2200      	movs	r2, #0
 800901c:	4683      	mov	fp, r0
 800901e:	2300      	movs	r3, #0
 8009020:	4630      	mov	r0, r6
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 fcd4 	bl	80009d0 <__aeabi_dcmplt>
 8009028:	b148      	cbz	r0, 800903e <_dtoa_r+0x17e>
 800902a:	4658      	mov	r0, fp
 800902c:	f7f7 f9f4 	bl	8000418 <__aeabi_i2d>
 8009030:	4632      	mov	r2, r6
 8009032:	463b      	mov	r3, r7
 8009034:	f7f7 fcc2 	bl	80009bc <__aeabi_dcmpeq>
 8009038:	b908      	cbnz	r0, 800903e <_dtoa_r+0x17e>
 800903a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800903e:	f1bb 0f16 	cmp.w	fp, #22
 8009042:	d857      	bhi.n	80090f4 <_dtoa_r+0x234>
 8009044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009048:	4b5a      	ldr	r3, [pc, #360]	; (80091b4 <_dtoa_r+0x2f4>)
 800904a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 fcbd 	bl	80009d0 <__aeabi_dcmplt>
 8009056:	2800      	cmp	r0, #0
 8009058:	d04e      	beq.n	80090f8 <_dtoa_r+0x238>
 800905a:	2300      	movs	r3, #0
 800905c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009060:	930f      	str	r3, [sp, #60]	; 0x3c
 8009062:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009064:	1b1b      	subs	r3, r3, r4
 8009066:	1e5a      	subs	r2, r3, #1
 8009068:	bf46      	itte	mi
 800906a:	f1c3 0901 	rsbmi	r9, r3, #1
 800906e:	2300      	movmi	r3, #0
 8009070:	f04f 0900 	movpl.w	r9, #0
 8009074:	9209      	str	r2, [sp, #36]	; 0x24
 8009076:	bf48      	it	mi
 8009078:	9309      	strmi	r3, [sp, #36]	; 0x24
 800907a:	f1bb 0f00 	cmp.w	fp, #0
 800907e:	db3d      	blt.n	80090fc <_dtoa_r+0x23c>
 8009080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009082:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009086:	445b      	add	r3, fp
 8009088:	9309      	str	r3, [sp, #36]	; 0x24
 800908a:	2300      	movs	r3, #0
 800908c:	930a      	str	r3, [sp, #40]	; 0x28
 800908e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009090:	2b09      	cmp	r3, #9
 8009092:	d867      	bhi.n	8009164 <_dtoa_r+0x2a4>
 8009094:	2b05      	cmp	r3, #5
 8009096:	bfc4      	itt	gt
 8009098:	3b04      	subgt	r3, #4
 800909a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800909c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800909e:	bfc8      	it	gt
 80090a0:	2400      	movgt	r4, #0
 80090a2:	f1a3 0302 	sub.w	r3, r3, #2
 80090a6:	bfd8      	it	le
 80090a8:	2401      	movle	r4, #1
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	f200 8086 	bhi.w	80091bc <_dtoa_r+0x2fc>
 80090b0:	e8df f003 	tbb	[pc, r3]
 80090b4:	5637392c 	.word	0x5637392c
 80090b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80090bc:	441c      	add	r4, r3
 80090be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	bfc1      	itttt	gt
 80090c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80090ca:	fa09 f903 	lslgt.w	r9, r9, r3
 80090ce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80090d2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80090d6:	bfd6      	itet	le
 80090d8:	f1c3 0320 	rsble	r3, r3, #32
 80090dc:	ea49 0003 	orrgt.w	r0, r9, r3
 80090e0:	fa06 f003 	lslle.w	r0, r6, r3
 80090e4:	f7f7 f988 	bl	80003f8 <__aeabi_ui2d>
 80090e8:	2201      	movs	r2, #1
 80090ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80090ee:	3c01      	subs	r4, #1
 80090f0:	9213      	str	r2, [sp, #76]	; 0x4c
 80090f2:	e76f      	b.n	8008fd4 <_dtoa_r+0x114>
 80090f4:	2301      	movs	r3, #1
 80090f6:	e7b3      	b.n	8009060 <_dtoa_r+0x1a0>
 80090f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80090fa:	e7b2      	b.n	8009062 <_dtoa_r+0x1a2>
 80090fc:	f1cb 0300 	rsb	r3, fp, #0
 8009100:	930a      	str	r3, [sp, #40]	; 0x28
 8009102:	2300      	movs	r3, #0
 8009104:	eba9 090b 	sub.w	r9, r9, fp
 8009108:	930e      	str	r3, [sp, #56]	; 0x38
 800910a:	e7c0      	b.n	800908e <_dtoa_r+0x1ce>
 800910c:	2300      	movs	r3, #0
 800910e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009110:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009112:	2b00      	cmp	r3, #0
 8009114:	dc55      	bgt.n	80091c2 <_dtoa_r+0x302>
 8009116:	2301      	movs	r3, #1
 8009118:	461a      	mov	r2, r3
 800911a:	9306      	str	r3, [sp, #24]
 800911c:	9308      	str	r3, [sp, #32]
 800911e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009120:	e00b      	b.n	800913a <_dtoa_r+0x27a>
 8009122:	2301      	movs	r3, #1
 8009124:	e7f3      	b.n	800910e <_dtoa_r+0x24e>
 8009126:	2300      	movs	r3, #0
 8009128:	930b      	str	r3, [sp, #44]	; 0x2c
 800912a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800912c:	445b      	add	r3, fp
 800912e:	9306      	str	r3, [sp, #24]
 8009130:	3301      	adds	r3, #1
 8009132:	2b01      	cmp	r3, #1
 8009134:	9308      	str	r3, [sp, #32]
 8009136:	bfb8      	it	lt
 8009138:	2301      	movlt	r3, #1
 800913a:	2100      	movs	r1, #0
 800913c:	2204      	movs	r2, #4
 800913e:	69e8      	ldr	r0, [r5, #28]
 8009140:	f102 0614 	add.w	r6, r2, #20
 8009144:	429e      	cmp	r6, r3
 8009146:	d940      	bls.n	80091ca <_dtoa_r+0x30a>
 8009148:	6041      	str	r1, [r0, #4]
 800914a:	4628      	mov	r0, r5
 800914c:	f000 fd98 	bl	8009c80 <_Balloc>
 8009150:	9003      	str	r0, [sp, #12]
 8009152:	2800      	cmp	r0, #0
 8009154:	d13c      	bne.n	80091d0 <_dtoa_r+0x310>
 8009156:	4602      	mov	r2, r0
 8009158:	f240 11af 	movw	r1, #431	; 0x1af
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <_dtoa_r+0x2f8>)
 800915e:	e6c3      	b.n	8008ee8 <_dtoa_r+0x28>
 8009160:	2301      	movs	r3, #1
 8009162:	e7e1      	b.n	8009128 <_dtoa_r+0x268>
 8009164:	2401      	movs	r4, #1
 8009166:	2300      	movs	r3, #0
 8009168:	940b      	str	r4, [sp, #44]	; 0x2c
 800916a:	9322      	str	r3, [sp, #136]	; 0x88
 800916c:	f04f 33ff 	mov.w	r3, #4294967295
 8009170:	2200      	movs	r2, #0
 8009172:	9306      	str	r3, [sp, #24]
 8009174:	9308      	str	r3, [sp, #32]
 8009176:	2312      	movs	r3, #18
 8009178:	e7d1      	b.n	800911e <_dtoa_r+0x25e>
 800917a:	bf00      	nop
 800917c:	f3af 8000 	nop.w
 8009180:	636f4361 	.word	0x636f4361
 8009184:	3fd287a7 	.word	0x3fd287a7
 8009188:	8b60c8b3 	.word	0x8b60c8b3
 800918c:	3fc68a28 	.word	0x3fc68a28
 8009190:	509f79fb 	.word	0x509f79fb
 8009194:	3fd34413 	.word	0x3fd34413
 8009198:	0800b464 	.word	0x0800b464
 800919c:	0800b47b 	.word	0x0800b47b
 80091a0:	7ff00000 	.word	0x7ff00000
 80091a4:	0800b460 	.word	0x0800b460
 80091a8:	0800b457 	.word	0x0800b457
 80091ac:	0800b434 	.word	0x0800b434
 80091b0:	3ff80000 	.word	0x3ff80000
 80091b4:	0800b568 	.word	0x0800b568
 80091b8:	0800b4d3 	.word	0x0800b4d3
 80091bc:	2301      	movs	r3, #1
 80091be:	930b      	str	r3, [sp, #44]	; 0x2c
 80091c0:	e7d4      	b.n	800916c <_dtoa_r+0x2ac>
 80091c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091c4:	9306      	str	r3, [sp, #24]
 80091c6:	9308      	str	r3, [sp, #32]
 80091c8:	e7b7      	b.n	800913a <_dtoa_r+0x27a>
 80091ca:	3101      	adds	r1, #1
 80091cc:	0052      	lsls	r2, r2, #1
 80091ce:	e7b7      	b.n	8009140 <_dtoa_r+0x280>
 80091d0:	69eb      	ldr	r3, [r5, #28]
 80091d2:	9a03      	ldr	r2, [sp, #12]
 80091d4:	601a      	str	r2, [r3, #0]
 80091d6:	9b08      	ldr	r3, [sp, #32]
 80091d8:	2b0e      	cmp	r3, #14
 80091da:	f200 80a8 	bhi.w	800932e <_dtoa_r+0x46e>
 80091de:	2c00      	cmp	r4, #0
 80091e0:	f000 80a5 	beq.w	800932e <_dtoa_r+0x46e>
 80091e4:	f1bb 0f00 	cmp.w	fp, #0
 80091e8:	dd34      	ble.n	8009254 <_dtoa_r+0x394>
 80091ea:	4b9a      	ldr	r3, [pc, #616]	; (8009454 <_dtoa_r+0x594>)
 80091ec:	f00b 020f 	and.w	r2, fp, #15
 80091f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80091f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009200:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009204:	d016      	beq.n	8009234 <_dtoa_r+0x374>
 8009206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800920a:	4b93      	ldr	r3, [pc, #588]	; (8009458 <_dtoa_r+0x598>)
 800920c:	2703      	movs	r7, #3
 800920e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009212:	f7f7 fa95 	bl	8000740 <__aeabi_ddiv>
 8009216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800921a:	f004 040f 	and.w	r4, r4, #15
 800921e:	4e8e      	ldr	r6, [pc, #568]	; (8009458 <_dtoa_r+0x598>)
 8009220:	b954      	cbnz	r4, 8009238 <_dtoa_r+0x378>
 8009222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800922a:	f7f7 fa89 	bl	8000740 <__aeabi_ddiv>
 800922e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009232:	e029      	b.n	8009288 <_dtoa_r+0x3c8>
 8009234:	2702      	movs	r7, #2
 8009236:	e7f2      	b.n	800921e <_dtoa_r+0x35e>
 8009238:	07e1      	lsls	r1, r4, #31
 800923a:	d508      	bpl.n	800924e <_dtoa_r+0x38e>
 800923c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009240:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009244:	f7f7 f952 	bl	80004ec <__aeabi_dmul>
 8009248:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800924c:	3701      	adds	r7, #1
 800924e:	1064      	asrs	r4, r4, #1
 8009250:	3608      	adds	r6, #8
 8009252:	e7e5      	b.n	8009220 <_dtoa_r+0x360>
 8009254:	f000 80a5 	beq.w	80093a2 <_dtoa_r+0x4e2>
 8009258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800925c:	f1cb 0400 	rsb	r4, fp, #0
 8009260:	4b7c      	ldr	r3, [pc, #496]	; (8009454 <_dtoa_r+0x594>)
 8009262:	f004 020f 	and.w	r2, r4, #15
 8009266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	f7f7 f93d 	bl	80004ec <__aeabi_dmul>
 8009272:	2702      	movs	r7, #2
 8009274:	2300      	movs	r3, #0
 8009276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800927a:	4e77      	ldr	r6, [pc, #476]	; (8009458 <_dtoa_r+0x598>)
 800927c:	1124      	asrs	r4, r4, #4
 800927e:	2c00      	cmp	r4, #0
 8009280:	f040 8084 	bne.w	800938c <_dtoa_r+0x4cc>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1d2      	bne.n	800922e <_dtoa_r+0x36e>
 8009288:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800928c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 8087 	beq.w	80093a6 <_dtoa_r+0x4e6>
 8009298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800929c:	2200      	movs	r2, #0
 800929e:	4b6f      	ldr	r3, [pc, #444]	; (800945c <_dtoa_r+0x59c>)
 80092a0:	f7f7 fb96 	bl	80009d0 <__aeabi_dcmplt>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d07e      	beq.n	80093a6 <_dtoa_r+0x4e6>
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d07b      	beq.n	80093a6 <_dtoa_r+0x4e6>
 80092ae:	9b06      	ldr	r3, [sp, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dd38      	ble.n	8009326 <_dtoa_r+0x466>
 80092b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092b8:	2200      	movs	r2, #0
 80092ba:	4b69      	ldr	r3, [pc, #420]	; (8009460 <_dtoa_r+0x5a0>)
 80092bc:	f7f7 f916 	bl	80004ec <__aeabi_dmul>
 80092c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092c4:	9c06      	ldr	r4, [sp, #24]
 80092c6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80092ca:	3701      	adds	r7, #1
 80092cc:	4638      	mov	r0, r7
 80092ce:	f7f7 f8a3 	bl	8000418 <__aeabi_i2d>
 80092d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092d6:	f7f7 f909 	bl	80004ec <__aeabi_dmul>
 80092da:	2200      	movs	r2, #0
 80092dc:	4b61      	ldr	r3, [pc, #388]	; (8009464 <_dtoa_r+0x5a4>)
 80092de:	f7f6 ff4f 	bl	8000180 <__adddf3>
 80092e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80092e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092ea:	9611      	str	r6, [sp, #68]	; 0x44
 80092ec:	2c00      	cmp	r4, #0
 80092ee:	d15d      	bne.n	80093ac <_dtoa_r+0x4ec>
 80092f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f4:	2200      	movs	r2, #0
 80092f6:	4b5c      	ldr	r3, [pc, #368]	; (8009468 <_dtoa_r+0x5a8>)
 80092f8:	f7f6 ff40 	bl	800017c <__aeabi_dsub>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009304:	4633      	mov	r3, r6
 8009306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009308:	f7f7 fb80 	bl	8000a0c <__aeabi_dcmpgt>
 800930c:	2800      	cmp	r0, #0
 800930e:	f040 8295 	bne.w	800983c <_dtoa_r+0x97c>
 8009312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009318:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800931c:	f7f7 fb58 	bl	80009d0 <__aeabi_dcmplt>
 8009320:	2800      	cmp	r0, #0
 8009322:	f040 8289 	bne.w	8009838 <_dtoa_r+0x978>
 8009326:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800932a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800932e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009330:	2b00      	cmp	r3, #0
 8009332:	f2c0 8151 	blt.w	80095d8 <_dtoa_r+0x718>
 8009336:	f1bb 0f0e 	cmp.w	fp, #14
 800933a:	f300 814d 	bgt.w	80095d8 <_dtoa_r+0x718>
 800933e:	4b45      	ldr	r3, [pc, #276]	; (8009454 <_dtoa_r+0x594>)
 8009340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009344:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009348:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800934c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800934e:	2b00      	cmp	r3, #0
 8009350:	f280 80da 	bge.w	8009508 <_dtoa_r+0x648>
 8009354:	9b08      	ldr	r3, [sp, #32]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f300 80d6 	bgt.w	8009508 <_dtoa_r+0x648>
 800935c:	f040 826b 	bne.w	8009836 <_dtoa_r+0x976>
 8009360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009364:	2200      	movs	r2, #0
 8009366:	4b40      	ldr	r3, [pc, #256]	; (8009468 <_dtoa_r+0x5a8>)
 8009368:	f7f7 f8c0 	bl	80004ec <__aeabi_dmul>
 800936c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009370:	f7f7 fb42 	bl	80009f8 <__aeabi_dcmpge>
 8009374:	9c08      	ldr	r4, [sp, #32]
 8009376:	4626      	mov	r6, r4
 8009378:	2800      	cmp	r0, #0
 800937a:	f040 8241 	bne.w	8009800 <_dtoa_r+0x940>
 800937e:	2331      	movs	r3, #49	; 0x31
 8009380:	9f03      	ldr	r7, [sp, #12]
 8009382:	f10b 0b01 	add.w	fp, fp, #1
 8009386:	f807 3b01 	strb.w	r3, [r7], #1
 800938a:	e23d      	b.n	8009808 <_dtoa_r+0x948>
 800938c:	07e2      	lsls	r2, r4, #31
 800938e:	d505      	bpl.n	800939c <_dtoa_r+0x4dc>
 8009390:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009394:	f7f7 f8aa 	bl	80004ec <__aeabi_dmul>
 8009398:	2301      	movs	r3, #1
 800939a:	3701      	adds	r7, #1
 800939c:	1064      	asrs	r4, r4, #1
 800939e:	3608      	adds	r6, #8
 80093a0:	e76d      	b.n	800927e <_dtoa_r+0x3be>
 80093a2:	2702      	movs	r7, #2
 80093a4:	e770      	b.n	8009288 <_dtoa_r+0x3c8>
 80093a6:	46d8      	mov	r8, fp
 80093a8:	9c08      	ldr	r4, [sp, #32]
 80093aa:	e78f      	b.n	80092cc <_dtoa_r+0x40c>
 80093ac:	9903      	ldr	r1, [sp, #12]
 80093ae:	4b29      	ldr	r3, [pc, #164]	; (8009454 <_dtoa_r+0x594>)
 80093b0:	4421      	add	r1, r4
 80093b2:	9112      	str	r1, [sp, #72]	; 0x48
 80093b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80093be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80093c2:	2900      	cmp	r1, #0
 80093c4:	d054      	beq.n	8009470 <_dtoa_r+0x5b0>
 80093c6:	2000      	movs	r0, #0
 80093c8:	4928      	ldr	r1, [pc, #160]	; (800946c <_dtoa_r+0x5ac>)
 80093ca:	f7f7 f9b9 	bl	8000740 <__aeabi_ddiv>
 80093ce:	463b      	mov	r3, r7
 80093d0:	4632      	mov	r2, r6
 80093d2:	f7f6 fed3 	bl	800017c <__aeabi_dsub>
 80093d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80093da:	9f03      	ldr	r7, [sp, #12]
 80093dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093e0:	f7f7 fb34 	bl	8000a4c <__aeabi_d2iz>
 80093e4:	4604      	mov	r4, r0
 80093e6:	f7f7 f817 	bl	8000418 <__aeabi_i2d>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093f2:	f7f6 fec3 	bl	800017c <__aeabi_dsub>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	3430      	adds	r4, #48	; 0x30
 80093fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009400:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009404:	f807 4b01 	strb.w	r4, [r7], #1
 8009408:	f7f7 fae2 	bl	80009d0 <__aeabi_dcmplt>
 800940c:	2800      	cmp	r0, #0
 800940e:	d173      	bne.n	80094f8 <_dtoa_r+0x638>
 8009410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009414:	2000      	movs	r0, #0
 8009416:	4911      	ldr	r1, [pc, #68]	; (800945c <_dtoa_r+0x59c>)
 8009418:	f7f6 feb0 	bl	800017c <__aeabi_dsub>
 800941c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009420:	f7f7 fad6 	bl	80009d0 <__aeabi_dcmplt>
 8009424:	2800      	cmp	r0, #0
 8009426:	f040 80b6 	bne.w	8009596 <_dtoa_r+0x6d6>
 800942a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800942c:	429f      	cmp	r7, r3
 800942e:	f43f af7a 	beq.w	8009326 <_dtoa_r+0x466>
 8009432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009436:	2200      	movs	r2, #0
 8009438:	4b09      	ldr	r3, [pc, #36]	; (8009460 <_dtoa_r+0x5a0>)
 800943a:	f7f7 f857 	bl	80004ec <__aeabi_dmul>
 800943e:	2200      	movs	r2, #0
 8009440:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <_dtoa_r+0x5a0>)
 800944a:	f7f7 f84f 	bl	80004ec <__aeabi_dmul>
 800944e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009452:	e7c3      	b.n	80093dc <_dtoa_r+0x51c>
 8009454:	0800b568 	.word	0x0800b568
 8009458:	0800b540 	.word	0x0800b540
 800945c:	3ff00000 	.word	0x3ff00000
 8009460:	40240000 	.word	0x40240000
 8009464:	401c0000 	.word	0x401c0000
 8009468:	40140000 	.word	0x40140000
 800946c:	3fe00000 	.word	0x3fe00000
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f7 f83a 	bl	80004ec <__aeabi_dmul>
 8009478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800947a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800947e:	9c03      	ldr	r4, [sp, #12]
 8009480:	9314      	str	r3, [sp, #80]	; 0x50
 8009482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009486:	f7f7 fae1 	bl	8000a4c <__aeabi_d2iz>
 800948a:	9015      	str	r0, [sp, #84]	; 0x54
 800948c:	f7f6 ffc4 	bl	8000418 <__aeabi_i2d>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009498:	f7f6 fe70 	bl	800017c <__aeabi_dsub>
 800949c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800949e:	4606      	mov	r6, r0
 80094a0:	3330      	adds	r3, #48	; 0x30
 80094a2:	f804 3b01 	strb.w	r3, [r4], #1
 80094a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094a8:	460f      	mov	r7, r1
 80094aa:	429c      	cmp	r4, r3
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	d124      	bne.n	80094fc <_dtoa_r+0x63c>
 80094b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094b6:	4baf      	ldr	r3, [pc, #700]	; (8009774 <_dtoa_r+0x8b4>)
 80094b8:	f7f6 fe62 	bl	8000180 <__adddf3>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4630      	mov	r0, r6
 80094c2:	4639      	mov	r1, r7
 80094c4:	f7f7 faa2 	bl	8000a0c <__aeabi_dcmpgt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d163      	bne.n	8009594 <_dtoa_r+0x6d4>
 80094cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80094d0:	2000      	movs	r0, #0
 80094d2:	49a8      	ldr	r1, [pc, #672]	; (8009774 <_dtoa_r+0x8b4>)
 80094d4:	f7f6 fe52 	bl	800017c <__aeabi_dsub>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f7 fa76 	bl	80009d0 <__aeabi_dcmplt>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	f43f af1e 	beq.w	8009326 <_dtoa_r+0x466>
 80094ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80094ec:	1e7b      	subs	r3, r7, #1
 80094ee:	9314      	str	r3, [sp, #80]	; 0x50
 80094f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80094f4:	2b30      	cmp	r3, #48	; 0x30
 80094f6:	d0f8      	beq.n	80094ea <_dtoa_r+0x62a>
 80094f8:	46c3      	mov	fp, r8
 80094fa:	e03b      	b.n	8009574 <_dtoa_r+0x6b4>
 80094fc:	4b9e      	ldr	r3, [pc, #632]	; (8009778 <_dtoa_r+0x8b8>)
 80094fe:	f7f6 fff5 	bl	80004ec <__aeabi_dmul>
 8009502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009506:	e7bc      	b.n	8009482 <_dtoa_r+0x5c2>
 8009508:	9f03      	ldr	r7, [sp, #12]
 800950a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800950e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009512:	4640      	mov	r0, r8
 8009514:	4649      	mov	r1, r9
 8009516:	f7f7 f913 	bl	8000740 <__aeabi_ddiv>
 800951a:	f7f7 fa97 	bl	8000a4c <__aeabi_d2iz>
 800951e:	4604      	mov	r4, r0
 8009520:	f7f6 ff7a 	bl	8000418 <__aeabi_i2d>
 8009524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009528:	f7f6 ffe0 	bl	80004ec <__aeabi_dmul>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f6 fe22 	bl	800017c <__aeabi_dsub>
 8009538:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800953c:	f807 6b01 	strb.w	r6, [r7], #1
 8009540:	9e03      	ldr	r6, [sp, #12]
 8009542:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009546:	1bbe      	subs	r6, r7, r6
 8009548:	45b4      	cmp	ip, r6
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	d136      	bne.n	80095be <_dtoa_r+0x6fe>
 8009550:	f7f6 fe16 	bl	8000180 <__adddf3>
 8009554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009558:	4680      	mov	r8, r0
 800955a:	4689      	mov	r9, r1
 800955c:	f7f7 fa56 	bl	8000a0c <__aeabi_dcmpgt>
 8009560:	bb58      	cbnz	r0, 80095ba <_dtoa_r+0x6fa>
 8009562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009566:	4640      	mov	r0, r8
 8009568:	4649      	mov	r1, r9
 800956a:	f7f7 fa27 	bl	80009bc <__aeabi_dcmpeq>
 800956e:	b108      	cbz	r0, 8009574 <_dtoa_r+0x6b4>
 8009570:	07e3      	lsls	r3, r4, #31
 8009572:	d422      	bmi.n	80095ba <_dtoa_r+0x6fa>
 8009574:	4651      	mov	r1, sl
 8009576:	4628      	mov	r0, r5
 8009578:	f000 fbc2 	bl	8009d00 <_Bfree>
 800957c:	2300      	movs	r3, #0
 800957e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009580:	703b      	strb	r3, [r7, #0]
 8009582:	f10b 0301 	add.w	r3, fp, #1
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800958a:	2b00      	cmp	r3, #0
 800958c:	f43f ace6 	beq.w	8008f5c <_dtoa_r+0x9c>
 8009590:	601f      	str	r7, [r3, #0]
 8009592:	e4e3      	b.n	8008f5c <_dtoa_r+0x9c>
 8009594:	4627      	mov	r7, r4
 8009596:	463b      	mov	r3, r7
 8009598:	461f      	mov	r7, r3
 800959a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800959e:	2a39      	cmp	r2, #57	; 0x39
 80095a0:	d107      	bne.n	80095b2 <_dtoa_r+0x6f2>
 80095a2:	9a03      	ldr	r2, [sp, #12]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d1f7      	bne.n	8009598 <_dtoa_r+0x6d8>
 80095a8:	2230      	movs	r2, #48	; 0x30
 80095aa:	9903      	ldr	r1, [sp, #12]
 80095ac:	f108 0801 	add.w	r8, r8, #1
 80095b0:	700a      	strb	r2, [r1, #0]
 80095b2:	781a      	ldrb	r2, [r3, #0]
 80095b4:	3201      	adds	r2, #1
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	e79e      	b.n	80094f8 <_dtoa_r+0x638>
 80095ba:	46d8      	mov	r8, fp
 80095bc:	e7eb      	b.n	8009596 <_dtoa_r+0x6d6>
 80095be:	2200      	movs	r2, #0
 80095c0:	4b6d      	ldr	r3, [pc, #436]	; (8009778 <_dtoa_r+0x8b8>)
 80095c2:	f7f6 ff93 	bl	80004ec <__aeabi_dmul>
 80095c6:	2200      	movs	r2, #0
 80095c8:	2300      	movs	r3, #0
 80095ca:	4680      	mov	r8, r0
 80095cc:	4689      	mov	r9, r1
 80095ce:	f7f7 f9f5 	bl	80009bc <__aeabi_dcmpeq>
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d09b      	beq.n	800950e <_dtoa_r+0x64e>
 80095d6:	e7cd      	b.n	8009574 <_dtoa_r+0x6b4>
 80095d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80095da:	2a00      	cmp	r2, #0
 80095dc:	f000 80c4 	beq.w	8009768 <_dtoa_r+0x8a8>
 80095e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80095e2:	2a01      	cmp	r2, #1
 80095e4:	f300 80a8 	bgt.w	8009738 <_dtoa_r+0x878>
 80095e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095ea:	2a00      	cmp	r2, #0
 80095ec:	f000 80a0 	beq.w	8009730 <_dtoa_r+0x870>
 80095f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80095f4:	464f      	mov	r7, r9
 80095f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fa:	2101      	movs	r1, #1
 80095fc:	441a      	add	r2, r3
 80095fe:	4628      	mov	r0, r5
 8009600:	4499      	add	r9, r3
 8009602:	9209      	str	r2, [sp, #36]	; 0x24
 8009604:	f000 fc32 	bl	8009e6c <__i2b>
 8009608:	4606      	mov	r6, r0
 800960a:	b15f      	cbz	r7, 8009624 <_dtoa_r+0x764>
 800960c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800960e:	2b00      	cmp	r3, #0
 8009610:	dd08      	ble.n	8009624 <_dtoa_r+0x764>
 8009612:	42bb      	cmp	r3, r7
 8009614:	bfa8      	it	ge
 8009616:	463b      	movge	r3, r7
 8009618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800961a:	eba9 0903 	sub.w	r9, r9, r3
 800961e:	1aff      	subs	r7, r7, r3
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	9309      	str	r3, [sp, #36]	; 0x24
 8009624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009626:	b1f3      	cbz	r3, 8009666 <_dtoa_r+0x7a6>
 8009628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 80a0 	beq.w	8009770 <_dtoa_r+0x8b0>
 8009630:	2c00      	cmp	r4, #0
 8009632:	dd10      	ble.n	8009656 <_dtoa_r+0x796>
 8009634:	4631      	mov	r1, r6
 8009636:	4622      	mov	r2, r4
 8009638:	4628      	mov	r0, r5
 800963a:	f000 fcd5 	bl	8009fe8 <__pow5mult>
 800963e:	4652      	mov	r2, sl
 8009640:	4601      	mov	r1, r0
 8009642:	4606      	mov	r6, r0
 8009644:	4628      	mov	r0, r5
 8009646:	f000 fc27 	bl	8009e98 <__multiply>
 800964a:	4680      	mov	r8, r0
 800964c:	4651      	mov	r1, sl
 800964e:	4628      	mov	r0, r5
 8009650:	f000 fb56 	bl	8009d00 <_Bfree>
 8009654:	46c2      	mov	sl, r8
 8009656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009658:	1b1a      	subs	r2, r3, r4
 800965a:	d004      	beq.n	8009666 <_dtoa_r+0x7a6>
 800965c:	4651      	mov	r1, sl
 800965e:	4628      	mov	r0, r5
 8009660:	f000 fcc2 	bl	8009fe8 <__pow5mult>
 8009664:	4682      	mov	sl, r0
 8009666:	2101      	movs	r1, #1
 8009668:	4628      	mov	r0, r5
 800966a:	f000 fbff 	bl	8009e6c <__i2b>
 800966e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009670:	4604      	mov	r4, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	f340 8082 	ble.w	800977c <_dtoa_r+0x8bc>
 8009678:	461a      	mov	r2, r3
 800967a:	4601      	mov	r1, r0
 800967c:	4628      	mov	r0, r5
 800967e:	f000 fcb3 	bl	8009fe8 <__pow5mult>
 8009682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009684:	4604      	mov	r4, r0
 8009686:	2b01      	cmp	r3, #1
 8009688:	dd7b      	ble.n	8009782 <_dtoa_r+0x8c2>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009694:	6918      	ldr	r0, [r3, #16]
 8009696:	f000 fb9b 	bl	8009dd0 <__hi0bits>
 800969a:	f1c0 0020 	rsb	r0, r0, #32
 800969e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a0:	4418      	add	r0, r3
 80096a2:	f010 001f 	ands.w	r0, r0, #31
 80096a6:	f000 8092 	beq.w	80097ce <_dtoa_r+0x90e>
 80096aa:	f1c0 0320 	rsb	r3, r0, #32
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	f340 8085 	ble.w	80097be <_dtoa_r+0x8fe>
 80096b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b6:	f1c0 001c 	rsb	r0, r0, #28
 80096ba:	4403      	add	r3, r0
 80096bc:	4481      	add	r9, r0
 80096be:	4407      	add	r7, r0
 80096c0:	9309      	str	r3, [sp, #36]	; 0x24
 80096c2:	f1b9 0f00 	cmp.w	r9, #0
 80096c6:	dd05      	ble.n	80096d4 <_dtoa_r+0x814>
 80096c8:	4651      	mov	r1, sl
 80096ca:	464a      	mov	r2, r9
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 fce5 	bl	800a09c <__lshift>
 80096d2:	4682      	mov	sl, r0
 80096d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dd05      	ble.n	80096e6 <_dtoa_r+0x826>
 80096da:	4621      	mov	r1, r4
 80096dc:	461a      	mov	r2, r3
 80096de:	4628      	mov	r0, r5
 80096e0:	f000 fcdc 	bl	800a09c <__lshift>
 80096e4:	4604      	mov	r4, r0
 80096e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d072      	beq.n	80097d2 <_dtoa_r+0x912>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4650      	mov	r0, sl
 80096f0:	f000 fd40 	bl	800a174 <__mcmp>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	da6c      	bge.n	80097d2 <_dtoa_r+0x912>
 80096f8:	2300      	movs	r3, #0
 80096fa:	4651      	mov	r1, sl
 80096fc:	220a      	movs	r2, #10
 80096fe:	4628      	mov	r0, r5
 8009700:	f000 fb20 	bl	8009d44 <__multadd>
 8009704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009706:	4682      	mov	sl, r0
 8009708:	f10b 3bff 	add.w	fp, fp, #4294967295
 800970c:	2b00      	cmp	r3, #0
 800970e:	f000 81ac 	beq.w	8009a6a <_dtoa_r+0xbaa>
 8009712:	2300      	movs	r3, #0
 8009714:	4631      	mov	r1, r6
 8009716:	220a      	movs	r2, #10
 8009718:	4628      	mov	r0, r5
 800971a:	f000 fb13 	bl	8009d44 <__multadd>
 800971e:	9b06      	ldr	r3, [sp, #24]
 8009720:	4606      	mov	r6, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	f300 8093 	bgt.w	800984e <_dtoa_r+0x98e>
 8009728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800972a:	2b02      	cmp	r3, #2
 800972c:	dc59      	bgt.n	80097e2 <_dtoa_r+0x922>
 800972e:	e08e      	b.n	800984e <_dtoa_r+0x98e>
 8009730:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009732:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009736:	e75d      	b.n	80095f4 <_dtoa_r+0x734>
 8009738:	9b08      	ldr	r3, [sp, #32]
 800973a:	1e5c      	subs	r4, r3, #1
 800973c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973e:	42a3      	cmp	r3, r4
 8009740:	bfbf      	itttt	lt
 8009742:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009744:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009746:	1ae3      	sublt	r3, r4, r3
 8009748:	18d2      	addlt	r2, r2, r3
 800974a:	bfa8      	it	ge
 800974c:	1b1c      	subge	r4, r3, r4
 800974e:	9b08      	ldr	r3, [sp, #32]
 8009750:	bfbe      	ittt	lt
 8009752:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009754:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009756:	2400      	movlt	r4, #0
 8009758:	2b00      	cmp	r3, #0
 800975a:	bfb5      	itete	lt
 800975c:	eba9 0703 	sublt.w	r7, r9, r3
 8009760:	464f      	movge	r7, r9
 8009762:	2300      	movlt	r3, #0
 8009764:	9b08      	ldrge	r3, [sp, #32]
 8009766:	e747      	b.n	80095f8 <_dtoa_r+0x738>
 8009768:	464f      	mov	r7, r9
 800976a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800976c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800976e:	e74c      	b.n	800960a <_dtoa_r+0x74a>
 8009770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009772:	e773      	b.n	800965c <_dtoa_r+0x79c>
 8009774:	3fe00000 	.word	0x3fe00000
 8009778:	40240000 	.word	0x40240000
 800977c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800977e:	2b01      	cmp	r3, #1
 8009780:	dc18      	bgt.n	80097b4 <_dtoa_r+0x8f4>
 8009782:	9b04      	ldr	r3, [sp, #16]
 8009784:	b9b3      	cbnz	r3, 80097b4 <_dtoa_r+0x8f4>
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800978c:	b993      	cbnz	r3, 80097b4 <_dtoa_r+0x8f4>
 800978e:	9b05      	ldr	r3, [sp, #20]
 8009790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009794:	0d1b      	lsrs	r3, r3, #20
 8009796:	051b      	lsls	r3, r3, #20
 8009798:	b17b      	cbz	r3, 80097ba <_dtoa_r+0x8fa>
 800979a:	f04f 0801 	mov.w	r8, #1
 800979e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a0:	f109 0901 	add.w	r9, r9, #1
 80097a4:	3301      	adds	r3, #1
 80097a6:	9309      	str	r3, [sp, #36]	; 0x24
 80097a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f47f af6f 	bne.w	800968e <_dtoa_r+0x7ce>
 80097b0:	2001      	movs	r0, #1
 80097b2:	e774      	b.n	800969e <_dtoa_r+0x7de>
 80097b4:	f04f 0800 	mov.w	r8, #0
 80097b8:	e7f6      	b.n	80097a8 <_dtoa_r+0x8e8>
 80097ba:	4698      	mov	r8, r3
 80097bc:	e7f4      	b.n	80097a8 <_dtoa_r+0x8e8>
 80097be:	d080      	beq.n	80096c2 <_dtoa_r+0x802>
 80097c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097c2:	331c      	adds	r3, #28
 80097c4:	441a      	add	r2, r3
 80097c6:	4499      	add	r9, r3
 80097c8:	441f      	add	r7, r3
 80097ca:	9209      	str	r2, [sp, #36]	; 0x24
 80097cc:	e779      	b.n	80096c2 <_dtoa_r+0x802>
 80097ce:	4603      	mov	r3, r0
 80097d0:	e7f6      	b.n	80097c0 <_dtoa_r+0x900>
 80097d2:	9b08      	ldr	r3, [sp, #32]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dc34      	bgt.n	8009842 <_dtoa_r+0x982>
 80097d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097da:	2b02      	cmp	r3, #2
 80097dc:	dd31      	ble.n	8009842 <_dtoa_r+0x982>
 80097de:	9b08      	ldr	r3, [sp, #32]
 80097e0:	9306      	str	r3, [sp, #24]
 80097e2:	9b06      	ldr	r3, [sp, #24]
 80097e4:	b963      	cbnz	r3, 8009800 <_dtoa_r+0x940>
 80097e6:	4621      	mov	r1, r4
 80097e8:	2205      	movs	r2, #5
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 faaa 	bl	8009d44 <__multadd>
 80097f0:	4601      	mov	r1, r0
 80097f2:	4604      	mov	r4, r0
 80097f4:	4650      	mov	r0, sl
 80097f6:	f000 fcbd 	bl	800a174 <__mcmp>
 80097fa:	2800      	cmp	r0, #0
 80097fc:	f73f adbf 	bgt.w	800937e <_dtoa_r+0x4be>
 8009800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009802:	9f03      	ldr	r7, [sp, #12]
 8009804:	ea6f 0b03 	mvn.w	fp, r3
 8009808:	f04f 0800 	mov.w	r8, #0
 800980c:	4621      	mov	r1, r4
 800980e:	4628      	mov	r0, r5
 8009810:	f000 fa76 	bl	8009d00 <_Bfree>
 8009814:	2e00      	cmp	r6, #0
 8009816:	f43f aead 	beq.w	8009574 <_dtoa_r+0x6b4>
 800981a:	f1b8 0f00 	cmp.w	r8, #0
 800981e:	d005      	beq.n	800982c <_dtoa_r+0x96c>
 8009820:	45b0      	cmp	r8, r6
 8009822:	d003      	beq.n	800982c <_dtoa_r+0x96c>
 8009824:	4641      	mov	r1, r8
 8009826:	4628      	mov	r0, r5
 8009828:	f000 fa6a 	bl	8009d00 <_Bfree>
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	f000 fa66 	bl	8009d00 <_Bfree>
 8009834:	e69e      	b.n	8009574 <_dtoa_r+0x6b4>
 8009836:	2400      	movs	r4, #0
 8009838:	4626      	mov	r6, r4
 800983a:	e7e1      	b.n	8009800 <_dtoa_r+0x940>
 800983c:	46c3      	mov	fp, r8
 800983e:	4626      	mov	r6, r4
 8009840:	e59d      	b.n	800937e <_dtoa_r+0x4be>
 8009842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009844:	2b00      	cmp	r3, #0
 8009846:	f000 80c8 	beq.w	80099da <_dtoa_r+0xb1a>
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	9306      	str	r3, [sp, #24]
 800984e:	2f00      	cmp	r7, #0
 8009850:	dd05      	ble.n	800985e <_dtoa_r+0x99e>
 8009852:	4631      	mov	r1, r6
 8009854:	463a      	mov	r2, r7
 8009856:	4628      	mov	r0, r5
 8009858:	f000 fc20 	bl	800a09c <__lshift>
 800985c:	4606      	mov	r6, r0
 800985e:	f1b8 0f00 	cmp.w	r8, #0
 8009862:	d05b      	beq.n	800991c <_dtoa_r+0xa5c>
 8009864:	4628      	mov	r0, r5
 8009866:	6871      	ldr	r1, [r6, #4]
 8009868:	f000 fa0a 	bl	8009c80 <_Balloc>
 800986c:	4607      	mov	r7, r0
 800986e:	b928      	cbnz	r0, 800987c <_dtoa_r+0x9bc>
 8009870:	4602      	mov	r2, r0
 8009872:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009876:	4b81      	ldr	r3, [pc, #516]	; (8009a7c <_dtoa_r+0xbbc>)
 8009878:	f7ff bb36 	b.w	8008ee8 <_dtoa_r+0x28>
 800987c:	6932      	ldr	r2, [r6, #16]
 800987e:	f106 010c 	add.w	r1, r6, #12
 8009882:	3202      	adds	r2, #2
 8009884:	0092      	lsls	r2, r2, #2
 8009886:	300c      	adds	r0, #12
 8009888:	f7ff fa80 	bl	8008d8c <memcpy>
 800988c:	2201      	movs	r2, #1
 800988e:	4639      	mov	r1, r7
 8009890:	4628      	mov	r0, r5
 8009892:	f000 fc03 	bl	800a09c <__lshift>
 8009896:	46b0      	mov	r8, r6
 8009898:	4606      	mov	r6, r0
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	9a03      	ldr	r2, [sp, #12]
 800989e:	3301      	adds	r3, #1
 80098a0:	9308      	str	r3, [sp, #32]
 80098a2:	9b06      	ldr	r3, [sp, #24]
 80098a4:	4413      	add	r3, r2
 80098a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80098a8:	9b04      	ldr	r3, [sp, #16]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	930a      	str	r3, [sp, #40]	; 0x28
 80098b0:	9b08      	ldr	r3, [sp, #32]
 80098b2:	4621      	mov	r1, r4
 80098b4:	3b01      	subs	r3, #1
 80098b6:	4650      	mov	r0, sl
 80098b8:	9304      	str	r3, [sp, #16]
 80098ba:	f7ff fa75 	bl	8008da8 <quorem>
 80098be:	4641      	mov	r1, r8
 80098c0:	9006      	str	r0, [sp, #24]
 80098c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80098c6:	4650      	mov	r0, sl
 80098c8:	f000 fc54 	bl	800a174 <__mcmp>
 80098cc:	4632      	mov	r2, r6
 80098ce:	9009      	str	r0, [sp, #36]	; 0x24
 80098d0:	4621      	mov	r1, r4
 80098d2:	4628      	mov	r0, r5
 80098d4:	f000 fc6a 	bl	800a1ac <__mdiff>
 80098d8:	68c2      	ldr	r2, [r0, #12]
 80098da:	4607      	mov	r7, r0
 80098dc:	bb02      	cbnz	r2, 8009920 <_dtoa_r+0xa60>
 80098de:	4601      	mov	r1, r0
 80098e0:	4650      	mov	r0, sl
 80098e2:	f000 fc47 	bl	800a174 <__mcmp>
 80098e6:	4602      	mov	r2, r0
 80098e8:	4639      	mov	r1, r7
 80098ea:	4628      	mov	r0, r5
 80098ec:	920c      	str	r2, [sp, #48]	; 0x30
 80098ee:	f000 fa07 	bl	8009d00 <_Bfree>
 80098f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098f6:	9f08      	ldr	r7, [sp, #32]
 80098f8:	ea43 0102 	orr.w	r1, r3, r2
 80098fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098fe:	4319      	orrs	r1, r3
 8009900:	d110      	bne.n	8009924 <_dtoa_r+0xa64>
 8009902:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009906:	d029      	beq.n	800995c <_dtoa_r+0xa9c>
 8009908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd02      	ble.n	8009914 <_dtoa_r+0xa54>
 800990e:	9b06      	ldr	r3, [sp, #24]
 8009910:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009914:	9b04      	ldr	r3, [sp, #16]
 8009916:	f883 9000 	strb.w	r9, [r3]
 800991a:	e777      	b.n	800980c <_dtoa_r+0x94c>
 800991c:	4630      	mov	r0, r6
 800991e:	e7ba      	b.n	8009896 <_dtoa_r+0x9d6>
 8009920:	2201      	movs	r2, #1
 8009922:	e7e1      	b.n	80098e8 <_dtoa_r+0xa28>
 8009924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009926:	2b00      	cmp	r3, #0
 8009928:	db04      	blt.n	8009934 <_dtoa_r+0xa74>
 800992a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800992c:	430b      	orrs	r3, r1
 800992e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009930:	430b      	orrs	r3, r1
 8009932:	d120      	bne.n	8009976 <_dtoa_r+0xab6>
 8009934:	2a00      	cmp	r2, #0
 8009936:	dded      	ble.n	8009914 <_dtoa_r+0xa54>
 8009938:	4651      	mov	r1, sl
 800993a:	2201      	movs	r2, #1
 800993c:	4628      	mov	r0, r5
 800993e:	f000 fbad 	bl	800a09c <__lshift>
 8009942:	4621      	mov	r1, r4
 8009944:	4682      	mov	sl, r0
 8009946:	f000 fc15 	bl	800a174 <__mcmp>
 800994a:	2800      	cmp	r0, #0
 800994c:	dc03      	bgt.n	8009956 <_dtoa_r+0xa96>
 800994e:	d1e1      	bne.n	8009914 <_dtoa_r+0xa54>
 8009950:	f019 0f01 	tst.w	r9, #1
 8009954:	d0de      	beq.n	8009914 <_dtoa_r+0xa54>
 8009956:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800995a:	d1d8      	bne.n	800990e <_dtoa_r+0xa4e>
 800995c:	2339      	movs	r3, #57	; 0x39
 800995e:	9a04      	ldr	r2, [sp, #16]
 8009960:	7013      	strb	r3, [r2, #0]
 8009962:	463b      	mov	r3, r7
 8009964:	461f      	mov	r7, r3
 8009966:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800996a:	3b01      	subs	r3, #1
 800996c:	2a39      	cmp	r2, #57	; 0x39
 800996e:	d06b      	beq.n	8009a48 <_dtoa_r+0xb88>
 8009970:	3201      	adds	r2, #1
 8009972:	701a      	strb	r2, [r3, #0]
 8009974:	e74a      	b.n	800980c <_dtoa_r+0x94c>
 8009976:	2a00      	cmp	r2, #0
 8009978:	dd07      	ble.n	800998a <_dtoa_r+0xaca>
 800997a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800997e:	d0ed      	beq.n	800995c <_dtoa_r+0xa9c>
 8009980:	9a04      	ldr	r2, [sp, #16]
 8009982:	f109 0301 	add.w	r3, r9, #1
 8009986:	7013      	strb	r3, [r2, #0]
 8009988:	e740      	b.n	800980c <_dtoa_r+0x94c>
 800998a:	9b08      	ldr	r3, [sp, #32]
 800998c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800998e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009992:	4293      	cmp	r3, r2
 8009994:	d042      	beq.n	8009a1c <_dtoa_r+0xb5c>
 8009996:	4651      	mov	r1, sl
 8009998:	2300      	movs	r3, #0
 800999a:	220a      	movs	r2, #10
 800999c:	4628      	mov	r0, r5
 800999e:	f000 f9d1 	bl	8009d44 <__multadd>
 80099a2:	45b0      	cmp	r8, r6
 80099a4:	4682      	mov	sl, r0
 80099a6:	f04f 0300 	mov.w	r3, #0
 80099aa:	f04f 020a 	mov.w	r2, #10
 80099ae:	4641      	mov	r1, r8
 80099b0:	4628      	mov	r0, r5
 80099b2:	d107      	bne.n	80099c4 <_dtoa_r+0xb04>
 80099b4:	f000 f9c6 	bl	8009d44 <__multadd>
 80099b8:	4680      	mov	r8, r0
 80099ba:	4606      	mov	r6, r0
 80099bc:	9b08      	ldr	r3, [sp, #32]
 80099be:	3301      	adds	r3, #1
 80099c0:	9308      	str	r3, [sp, #32]
 80099c2:	e775      	b.n	80098b0 <_dtoa_r+0x9f0>
 80099c4:	f000 f9be 	bl	8009d44 <__multadd>
 80099c8:	4631      	mov	r1, r6
 80099ca:	4680      	mov	r8, r0
 80099cc:	2300      	movs	r3, #0
 80099ce:	220a      	movs	r2, #10
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f9b7 	bl	8009d44 <__multadd>
 80099d6:	4606      	mov	r6, r0
 80099d8:	e7f0      	b.n	80099bc <_dtoa_r+0xafc>
 80099da:	9b08      	ldr	r3, [sp, #32]
 80099dc:	9306      	str	r3, [sp, #24]
 80099de:	9f03      	ldr	r7, [sp, #12]
 80099e0:	4621      	mov	r1, r4
 80099e2:	4650      	mov	r0, sl
 80099e4:	f7ff f9e0 	bl	8008da8 <quorem>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80099ee:	f807 9b01 	strb.w	r9, [r7], #1
 80099f2:	1afa      	subs	r2, r7, r3
 80099f4:	9b06      	ldr	r3, [sp, #24]
 80099f6:	4293      	cmp	r3, r2
 80099f8:	dd07      	ble.n	8009a0a <_dtoa_r+0xb4a>
 80099fa:	4651      	mov	r1, sl
 80099fc:	2300      	movs	r3, #0
 80099fe:	220a      	movs	r2, #10
 8009a00:	4628      	mov	r0, r5
 8009a02:	f000 f99f 	bl	8009d44 <__multadd>
 8009a06:	4682      	mov	sl, r0
 8009a08:	e7ea      	b.n	80099e0 <_dtoa_r+0xb20>
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	f04f 0800 	mov.w	r8, #0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	bfcc      	ite	gt
 8009a14:	461f      	movgt	r7, r3
 8009a16:	2701      	movle	r7, #1
 8009a18:	9b03      	ldr	r3, [sp, #12]
 8009a1a:	441f      	add	r7, r3
 8009a1c:	4651      	mov	r1, sl
 8009a1e:	2201      	movs	r2, #1
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 fb3b 	bl	800a09c <__lshift>
 8009a26:	4621      	mov	r1, r4
 8009a28:	4682      	mov	sl, r0
 8009a2a:	f000 fba3 	bl	800a174 <__mcmp>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	dc97      	bgt.n	8009962 <_dtoa_r+0xaa2>
 8009a32:	d102      	bne.n	8009a3a <_dtoa_r+0xb7a>
 8009a34:	f019 0f01 	tst.w	r9, #1
 8009a38:	d193      	bne.n	8009962 <_dtoa_r+0xaa2>
 8009a3a:	463b      	mov	r3, r7
 8009a3c:	461f      	mov	r7, r3
 8009a3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a42:	2a30      	cmp	r2, #48	; 0x30
 8009a44:	d0fa      	beq.n	8009a3c <_dtoa_r+0xb7c>
 8009a46:	e6e1      	b.n	800980c <_dtoa_r+0x94c>
 8009a48:	9a03      	ldr	r2, [sp, #12]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d18a      	bne.n	8009964 <_dtoa_r+0xaa4>
 8009a4e:	2331      	movs	r3, #49	; 0x31
 8009a50:	f10b 0b01 	add.w	fp, fp, #1
 8009a54:	e797      	b.n	8009986 <_dtoa_r+0xac6>
 8009a56:	4b0a      	ldr	r3, [pc, #40]	; (8009a80 <_dtoa_r+0xbc0>)
 8009a58:	f7ff ba9f 	b.w	8008f9a <_dtoa_r+0xda>
 8009a5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f47f aa77 	bne.w	8008f52 <_dtoa_r+0x92>
 8009a64:	4b07      	ldr	r3, [pc, #28]	; (8009a84 <_dtoa_r+0xbc4>)
 8009a66:	f7ff ba98 	b.w	8008f9a <_dtoa_r+0xda>
 8009a6a:	9b06      	ldr	r3, [sp, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dcb6      	bgt.n	80099de <_dtoa_r+0xb1e>
 8009a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	f73f aeb5 	bgt.w	80097e2 <_dtoa_r+0x922>
 8009a78:	e7b1      	b.n	80099de <_dtoa_r+0xb1e>
 8009a7a:	bf00      	nop
 8009a7c:	0800b4d3 	.word	0x0800b4d3
 8009a80:	0800b433 	.word	0x0800b433
 8009a84:	0800b457 	.word	0x0800b457

08009a88 <_free_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d040      	beq.n	8009b12 <_free_r+0x8a>
 8009a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a94:	1f0c      	subs	r4, r1, #4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bfb8      	it	lt
 8009a9a:	18e4      	addlt	r4, r4, r3
 8009a9c:	f000 f8e4 	bl	8009c68 <__malloc_lock>
 8009aa0:	4a1c      	ldr	r2, [pc, #112]	; (8009b14 <_free_r+0x8c>)
 8009aa2:	6813      	ldr	r3, [r2, #0]
 8009aa4:	b933      	cbnz	r3, 8009ab4 <_free_r+0x2c>
 8009aa6:	6063      	str	r3, [r4, #4]
 8009aa8:	6014      	str	r4, [r2, #0]
 8009aaa:	4628      	mov	r0, r5
 8009aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ab0:	f000 b8e0 	b.w	8009c74 <__malloc_unlock>
 8009ab4:	42a3      	cmp	r3, r4
 8009ab6:	d908      	bls.n	8009aca <_free_r+0x42>
 8009ab8:	6820      	ldr	r0, [r4, #0]
 8009aba:	1821      	adds	r1, r4, r0
 8009abc:	428b      	cmp	r3, r1
 8009abe:	bf01      	itttt	eq
 8009ac0:	6819      	ldreq	r1, [r3, #0]
 8009ac2:	685b      	ldreq	r3, [r3, #4]
 8009ac4:	1809      	addeq	r1, r1, r0
 8009ac6:	6021      	streq	r1, [r4, #0]
 8009ac8:	e7ed      	b.n	8009aa6 <_free_r+0x1e>
 8009aca:	461a      	mov	r2, r3
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	b10b      	cbz	r3, 8009ad4 <_free_r+0x4c>
 8009ad0:	42a3      	cmp	r3, r4
 8009ad2:	d9fa      	bls.n	8009aca <_free_r+0x42>
 8009ad4:	6811      	ldr	r1, [r2, #0]
 8009ad6:	1850      	adds	r0, r2, r1
 8009ad8:	42a0      	cmp	r0, r4
 8009ada:	d10b      	bne.n	8009af4 <_free_r+0x6c>
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	4401      	add	r1, r0
 8009ae0:	1850      	adds	r0, r2, r1
 8009ae2:	4283      	cmp	r3, r0
 8009ae4:	6011      	str	r1, [r2, #0]
 8009ae6:	d1e0      	bne.n	8009aaa <_free_r+0x22>
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	4408      	add	r0, r1
 8009aee:	6010      	str	r0, [r2, #0]
 8009af0:	6053      	str	r3, [r2, #4]
 8009af2:	e7da      	b.n	8009aaa <_free_r+0x22>
 8009af4:	d902      	bls.n	8009afc <_free_r+0x74>
 8009af6:	230c      	movs	r3, #12
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	e7d6      	b.n	8009aaa <_free_r+0x22>
 8009afc:	6820      	ldr	r0, [r4, #0]
 8009afe:	1821      	adds	r1, r4, r0
 8009b00:	428b      	cmp	r3, r1
 8009b02:	bf01      	itttt	eq
 8009b04:	6819      	ldreq	r1, [r3, #0]
 8009b06:	685b      	ldreq	r3, [r3, #4]
 8009b08:	1809      	addeq	r1, r1, r0
 8009b0a:	6021      	streq	r1, [r4, #0]
 8009b0c:	6063      	str	r3, [r4, #4]
 8009b0e:	6054      	str	r4, [r2, #4]
 8009b10:	e7cb      	b.n	8009aaa <_free_r+0x22>
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	20000838 	.word	0x20000838

08009b18 <malloc>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <malloc+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f000 b823 	b.w	8009b68 <_malloc_r>
 8009b22:	bf00      	nop
 8009b24:	20000064 	.word	0x20000064

08009b28 <sbrk_aligned>:
 8009b28:	b570      	push	{r4, r5, r6, lr}
 8009b2a:	4e0e      	ldr	r6, [pc, #56]	; (8009b64 <sbrk_aligned+0x3c>)
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	6831      	ldr	r1, [r6, #0]
 8009b30:	4605      	mov	r5, r0
 8009b32:	b911      	cbnz	r1, 8009b3a <sbrk_aligned+0x12>
 8009b34:	f000 febc 	bl	800a8b0 <_sbrk_r>
 8009b38:	6030      	str	r0, [r6, #0]
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f000 feb7 	bl	800a8b0 <_sbrk_r>
 8009b42:	1c43      	adds	r3, r0, #1
 8009b44:	d00a      	beq.n	8009b5c <sbrk_aligned+0x34>
 8009b46:	1cc4      	adds	r4, r0, #3
 8009b48:	f024 0403 	bic.w	r4, r4, #3
 8009b4c:	42a0      	cmp	r0, r4
 8009b4e:	d007      	beq.n	8009b60 <sbrk_aligned+0x38>
 8009b50:	1a21      	subs	r1, r4, r0
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 feac 	bl	800a8b0 <_sbrk_r>
 8009b58:	3001      	adds	r0, #1
 8009b5a:	d101      	bne.n	8009b60 <sbrk_aligned+0x38>
 8009b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b60:	4620      	mov	r0, r4
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	2000083c 	.word	0x2000083c

08009b68 <_malloc_r>:
 8009b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b6c:	1ccd      	adds	r5, r1, #3
 8009b6e:	f025 0503 	bic.w	r5, r5, #3
 8009b72:	3508      	adds	r5, #8
 8009b74:	2d0c      	cmp	r5, #12
 8009b76:	bf38      	it	cc
 8009b78:	250c      	movcc	r5, #12
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	db01      	blt.n	8009b84 <_malloc_r+0x1c>
 8009b80:	42a9      	cmp	r1, r5
 8009b82:	d905      	bls.n	8009b90 <_malloc_r+0x28>
 8009b84:	230c      	movs	r3, #12
 8009b86:	2600      	movs	r6, #0
 8009b88:	603b      	str	r3, [r7, #0]
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009c64 <_malloc_r+0xfc>
 8009b94:	f000 f868 	bl	8009c68 <__malloc_lock>
 8009b98:	f8d8 3000 	ldr.w	r3, [r8]
 8009b9c:	461c      	mov	r4, r3
 8009b9e:	bb5c      	cbnz	r4, 8009bf8 <_malloc_r+0x90>
 8009ba0:	4629      	mov	r1, r5
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	f7ff ffc0 	bl	8009b28 <sbrk_aligned>
 8009ba8:	1c43      	adds	r3, r0, #1
 8009baa:	4604      	mov	r4, r0
 8009bac:	d155      	bne.n	8009c5a <_malloc_r+0xf2>
 8009bae:	f8d8 4000 	ldr.w	r4, [r8]
 8009bb2:	4626      	mov	r6, r4
 8009bb4:	2e00      	cmp	r6, #0
 8009bb6:	d145      	bne.n	8009c44 <_malloc_r+0xdc>
 8009bb8:	2c00      	cmp	r4, #0
 8009bba:	d048      	beq.n	8009c4e <_malloc_r+0xe6>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	eb04 0903 	add.w	r9, r4, r3
 8009bc6:	f000 fe73 	bl	800a8b0 <_sbrk_r>
 8009bca:	4581      	cmp	r9, r0
 8009bcc:	d13f      	bne.n	8009c4e <_malloc_r+0xe6>
 8009bce:	6821      	ldr	r1, [r4, #0]
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	1a6d      	subs	r5, r5, r1
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	f7ff ffa7 	bl	8009b28 <sbrk_aligned>
 8009bda:	3001      	adds	r0, #1
 8009bdc:	d037      	beq.n	8009c4e <_malloc_r+0xe6>
 8009bde:	6823      	ldr	r3, [r4, #0]
 8009be0:	442b      	add	r3, r5
 8009be2:	6023      	str	r3, [r4, #0]
 8009be4:	f8d8 3000 	ldr.w	r3, [r8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d038      	beq.n	8009c5e <_malloc_r+0xf6>
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	42a2      	cmp	r2, r4
 8009bf0:	d12b      	bne.n	8009c4a <_malloc_r+0xe2>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	605a      	str	r2, [r3, #4]
 8009bf6:	e00f      	b.n	8009c18 <_malloc_r+0xb0>
 8009bf8:	6822      	ldr	r2, [r4, #0]
 8009bfa:	1b52      	subs	r2, r2, r5
 8009bfc:	d41f      	bmi.n	8009c3e <_malloc_r+0xd6>
 8009bfe:	2a0b      	cmp	r2, #11
 8009c00:	d917      	bls.n	8009c32 <_malloc_r+0xca>
 8009c02:	1961      	adds	r1, r4, r5
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	6025      	str	r5, [r4, #0]
 8009c08:	bf18      	it	ne
 8009c0a:	6059      	strne	r1, [r3, #4]
 8009c0c:	6863      	ldr	r3, [r4, #4]
 8009c0e:	bf08      	it	eq
 8009c10:	f8c8 1000 	streq.w	r1, [r8]
 8009c14:	5162      	str	r2, [r4, r5]
 8009c16:	604b      	str	r3, [r1, #4]
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f104 060b 	add.w	r6, r4, #11
 8009c1e:	f000 f829 	bl	8009c74 <__malloc_unlock>
 8009c22:	f026 0607 	bic.w	r6, r6, #7
 8009c26:	1d23      	adds	r3, r4, #4
 8009c28:	1af2      	subs	r2, r6, r3
 8009c2a:	d0ae      	beq.n	8009b8a <_malloc_r+0x22>
 8009c2c:	1b9b      	subs	r3, r3, r6
 8009c2e:	50a3      	str	r3, [r4, r2]
 8009c30:	e7ab      	b.n	8009b8a <_malloc_r+0x22>
 8009c32:	42a3      	cmp	r3, r4
 8009c34:	6862      	ldr	r2, [r4, #4]
 8009c36:	d1dd      	bne.n	8009bf4 <_malloc_r+0x8c>
 8009c38:	f8c8 2000 	str.w	r2, [r8]
 8009c3c:	e7ec      	b.n	8009c18 <_malloc_r+0xb0>
 8009c3e:	4623      	mov	r3, r4
 8009c40:	6864      	ldr	r4, [r4, #4]
 8009c42:	e7ac      	b.n	8009b9e <_malloc_r+0x36>
 8009c44:	4634      	mov	r4, r6
 8009c46:	6876      	ldr	r6, [r6, #4]
 8009c48:	e7b4      	b.n	8009bb4 <_malloc_r+0x4c>
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	e7cc      	b.n	8009be8 <_malloc_r+0x80>
 8009c4e:	230c      	movs	r3, #12
 8009c50:	4638      	mov	r0, r7
 8009c52:	603b      	str	r3, [r7, #0]
 8009c54:	f000 f80e 	bl	8009c74 <__malloc_unlock>
 8009c58:	e797      	b.n	8009b8a <_malloc_r+0x22>
 8009c5a:	6025      	str	r5, [r4, #0]
 8009c5c:	e7dc      	b.n	8009c18 <_malloc_r+0xb0>
 8009c5e:	605b      	str	r3, [r3, #4]
 8009c60:	deff      	udf	#255	; 0xff
 8009c62:	bf00      	nop
 8009c64:	20000838 	.word	0x20000838

08009c68 <__malloc_lock>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__malloc_lock+0x8>)
 8009c6a:	f7ff b87f 	b.w	8008d6c <__retarget_lock_acquire_recursive>
 8009c6e:	bf00      	nop
 8009c70:	20000834 	.word	0x20000834

08009c74 <__malloc_unlock>:
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__malloc_unlock+0x8>)
 8009c76:	f7ff b87a 	b.w	8008d6e <__retarget_lock_release_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	20000834 	.word	0x20000834

08009c80 <_Balloc>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	69c6      	ldr	r6, [r0, #28]
 8009c84:	4604      	mov	r4, r0
 8009c86:	460d      	mov	r5, r1
 8009c88:	b976      	cbnz	r6, 8009ca8 <_Balloc+0x28>
 8009c8a:	2010      	movs	r0, #16
 8009c8c:	f7ff ff44 	bl	8009b18 <malloc>
 8009c90:	4602      	mov	r2, r0
 8009c92:	61e0      	str	r0, [r4, #28]
 8009c94:	b920      	cbnz	r0, 8009ca0 <_Balloc+0x20>
 8009c96:	216b      	movs	r1, #107	; 0x6b
 8009c98:	4b17      	ldr	r3, [pc, #92]	; (8009cf8 <_Balloc+0x78>)
 8009c9a:	4818      	ldr	r0, [pc, #96]	; (8009cfc <_Balloc+0x7c>)
 8009c9c:	f000 fe18 	bl	800a8d0 <__assert_func>
 8009ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ca4:	6006      	str	r6, [r0, #0]
 8009ca6:	60c6      	str	r6, [r0, #12]
 8009ca8:	69e6      	ldr	r6, [r4, #28]
 8009caa:	68f3      	ldr	r3, [r6, #12]
 8009cac:	b183      	cbz	r3, 8009cd0 <_Balloc+0x50>
 8009cae:	69e3      	ldr	r3, [r4, #28]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009cb6:	b9b8      	cbnz	r0, 8009ce8 <_Balloc+0x68>
 8009cb8:	2101      	movs	r1, #1
 8009cba:	fa01 f605 	lsl.w	r6, r1, r5
 8009cbe:	1d72      	adds	r2, r6, #5
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	0092      	lsls	r2, r2, #2
 8009cc4:	f000 fe22 	bl	800a90c <_calloc_r>
 8009cc8:	b160      	cbz	r0, 8009ce4 <_Balloc+0x64>
 8009cca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009cce:	e00e      	b.n	8009cee <_Balloc+0x6e>
 8009cd0:	2221      	movs	r2, #33	; 0x21
 8009cd2:	2104      	movs	r1, #4
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 fe19 	bl	800a90c <_calloc_r>
 8009cda:	69e3      	ldr	r3, [r4, #28]
 8009cdc:	60f0      	str	r0, [r6, #12]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d1e4      	bne.n	8009cae <_Balloc+0x2e>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	bd70      	pop	{r4, r5, r6, pc}
 8009ce8:	6802      	ldr	r2, [r0, #0]
 8009cea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009cf4:	e7f7      	b.n	8009ce6 <_Balloc+0x66>
 8009cf6:	bf00      	nop
 8009cf8:	0800b464 	.word	0x0800b464
 8009cfc:	0800b4e4 	.word	0x0800b4e4

08009d00 <_Bfree>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	69c6      	ldr	r6, [r0, #28]
 8009d04:	4605      	mov	r5, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	b976      	cbnz	r6, 8009d28 <_Bfree+0x28>
 8009d0a:	2010      	movs	r0, #16
 8009d0c:	f7ff ff04 	bl	8009b18 <malloc>
 8009d10:	4602      	mov	r2, r0
 8009d12:	61e8      	str	r0, [r5, #28]
 8009d14:	b920      	cbnz	r0, 8009d20 <_Bfree+0x20>
 8009d16:	218f      	movs	r1, #143	; 0x8f
 8009d18:	4b08      	ldr	r3, [pc, #32]	; (8009d3c <_Bfree+0x3c>)
 8009d1a:	4809      	ldr	r0, [pc, #36]	; (8009d40 <_Bfree+0x40>)
 8009d1c:	f000 fdd8 	bl	800a8d0 <__assert_func>
 8009d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d24:	6006      	str	r6, [r0, #0]
 8009d26:	60c6      	str	r6, [r0, #12]
 8009d28:	b13c      	cbz	r4, 8009d3a <_Bfree+0x3a>
 8009d2a:	69eb      	ldr	r3, [r5, #28]
 8009d2c:	6862      	ldr	r2, [r4, #4]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d34:	6021      	str	r1, [r4, #0]
 8009d36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009d3a:	bd70      	pop	{r4, r5, r6, pc}
 8009d3c:	0800b464 	.word	0x0800b464
 8009d40:	0800b4e4 	.word	0x0800b4e4

08009d44 <__multadd>:
 8009d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d48:	4607      	mov	r7, r0
 8009d4a:	460c      	mov	r4, r1
 8009d4c:	461e      	mov	r6, r3
 8009d4e:	2000      	movs	r0, #0
 8009d50:	690d      	ldr	r5, [r1, #16]
 8009d52:	f101 0c14 	add.w	ip, r1, #20
 8009d56:	f8dc 3000 	ldr.w	r3, [ip]
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	b299      	uxth	r1, r3
 8009d5e:	fb02 6101 	mla	r1, r2, r1, r6
 8009d62:	0c1e      	lsrs	r6, r3, #16
 8009d64:	0c0b      	lsrs	r3, r1, #16
 8009d66:	fb02 3306 	mla	r3, r2, r6, r3
 8009d6a:	b289      	uxth	r1, r1
 8009d6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009d70:	4285      	cmp	r5, r0
 8009d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009d76:	f84c 1b04 	str.w	r1, [ip], #4
 8009d7a:	dcec      	bgt.n	8009d56 <__multadd+0x12>
 8009d7c:	b30e      	cbz	r6, 8009dc2 <__multadd+0x7e>
 8009d7e:	68a3      	ldr	r3, [r4, #8]
 8009d80:	42ab      	cmp	r3, r5
 8009d82:	dc19      	bgt.n	8009db8 <__multadd+0x74>
 8009d84:	6861      	ldr	r1, [r4, #4]
 8009d86:	4638      	mov	r0, r7
 8009d88:	3101      	adds	r1, #1
 8009d8a:	f7ff ff79 	bl	8009c80 <_Balloc>
 8009d8e:	4680      	mov	r8, r0
 8009d90:	b928      	cbnz	r0, 8009d9e <__multadd+0x5a>
 8009d92:	4602      	mov	r2, r0
 8009d94:	21ba      	movs	r1, #186	; 0xba
 8009d96:	4b0c      	ldr	r3, [pc, #48]	; (8009dc8 <__multadd+0x84>)
 8009d98:	480c      	ldr	r0, [pc, #48]	; (8009dcc <__multadd+0x88>)
 8009d9a:	f000 fd99 	bl	800a8d0 <__assert_func>
 8009d9e:	6922      	ldr	r2, [r4, #16]
 8009da0:	f104 010c 	add.w	r1, r4, #12
 8009da4:	3202      	adds	r2, #2
 8009da6:	0092      	lsls	r2, r2, #2
 8009da8:	300c      	adds	r0, #12
 8009daa:	f7fe ffef 	bl	8008d8c <memcpy>
 8009dae:	4621      	mov	r1, r4
 8009db0:	4638      	mov	r0, r7
 8009db2:	f7ff ffa5 	bl	8009d00 <_Bfree>
 8009db6:	4644      	mov	r4, r8
 8009db8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dbc:	3501      	adds	r5, #1
 8009dbe:	615e      	str	r6, [r3, #20]
 8009dc0:	6125      	str	r5, [r4, #16]
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	0800b4d3 	.word	0x0800b4d3
 8009dcc:	0800b4e4 	.word	0x0800b4e4

08009dd0 <__hi0bits>:
 8009dd0:	0c02      	lsrs	r2, r0, #16
 8009dd2:	0412      	lsls	r2, r2, #16
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	b9ca      	cbnz	r2, 8009e0c <__hi0bits+0x3c>
 8009dd8:	0403      	lsls	r3, r0, #16
 8009dda:	2010      	movs	r0, #16
 8009ddc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009de0:	bf04      	itt	eq
 8009de2:	021b      	lsleq	r3, r3, #8
 8009de4:	3008      	addeq	r0, #8
 8009de6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009dea:	bf04      	itt	eq
 8009dec:	011b      	lsleq	r3, r3, #4
 8009dee:	3004      	addeq	r0, #4
 8009df0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009df4:	bf04      	itt	eq
 8009df6:	009b      	lsleq	r3, r3, #2
 8009df8:	3002      	addeq	r0, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	db05      	blt.n	8009e0a <__hi0bits+0x3a>
 8009dfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009e02:	f100 0001 	add.w	r0, r0, #1
 8009e06:	bf08      	it	eq
 8009e08:	2020      	moveq	r0, #32
 8009e0a:	4770      	bx	lr
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e7e5      	b.n	8009ddc <__hi0bits+0xc>

08009e10 <__lo0bits>:
 8009e10:	6803      	ldr	r3, [r0, #0]
 8009e12:	4602      	mov	r2, r0
 8009e14:	f013 0007 	ands.w	r0, r3, #7
 8009e18:	d00b      	beq.n	8009e32 <__lo0bits+0x22>
 8009e1a:	07d9      	lsls	r1, r3, #31
 8009e1c:	d421      	bmi.n	8009e62 <__lo0bits+0x52>
 8009e1e:	0798      	lsls	r0, r3, #30
 8009e20:	bf49      	itett	mi
 8009e22:	085b      	lsrmi	r3, r3, #1
 8009e24:	089b      	lsrpl	r3, r3, #2
 8009e26:	2001      	movmi	r0, #1
 8009e28:	6013      	strmi	r3, [r2, #0]
 8009e2a:	bf5c      	itt	pl
 8009e2c:	2002      	movpl	r0, #2
 8009e2e:	6013      	strpl	r3, [r2, #0]
 8009e30:	4770      	bx	lr
 8009e32:	b299      	uxth	r1, r3
 8009e34:	b909      	cbnz	r1, 8009e3a <__lo0bits+0x2a>
 8009e36:	2010      	movs	r0, #16
 8009e38:	0c1b      	lsrs	r3, r3, #16
 8009e3a:	b2d9      	uxtb	r1, r3
 8009e3c:	b909      	cbnz	r1, 8009e42 <__lo0bits+0x32>
 8009e3e:	3008      	adds	r0, #8
 8009e40:	0a1b      	lsrs	r3, r3, #8
 8009e42:	0719      	lsls	r1, r3, #28
 8009e44:	bf04      	itt	eq
 8009e46:	091b      	lsreq	r3, r3, #4
 8009e48:	3004      	addeq	r0, #4
 8009e4a:	0799      	lsls	r1, r3, #30
 8009e4c:	bf04      	itt	eq
 8009e4e:	089b      	lsreq	r3, r3, #2
 8009e50:	3002      	addeq	r0, #2
 8009e52:	07d9      	lsls	r1, r3, #31
 8009e54:	d403      	bmi.n	8009e5e <__lo0bits+0x4e>
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	f100 0001 	add.w	r0, r0, #1
 8009e5c:	d003      	beq.n	8009e66 <__lo0bits+0x56>
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	4770      	bx	lr
 8009e62:	2000      	movs	r0, #0
 8009e64:	4770      	bx	lr
 8009e66:	2020      	movs	r0, #32
 8009e68:	4770      	bx	lr
	...

08009e6c <__i2b>:
 8009e6c:	b510      	push	{r4, lr}
 8009e6e:	460c      	mov	r4, r1
 8009e70:	2101      	movs	r1, #1
 8009e72:	f7ff ff05 	bl	8009c80 <_Balloc>
 8009e76:	4602      	mov	r2, r0
 8009e78:	b928      	cbnz	r0, 8009e86 <__i2b+0x1a>
 8009e7a:	f240 1145 	movw	r1, #325	; 0x145
 8009e7e:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <__i2b+0x24>)
 8009e80:	4804      	ldr	r0, [pc, #16]	; (8009e94 <__i2b+0x28>)
 8009e82:	f000 fd25 	bl	800a8d0 <__assert_func>
 8009e86:	2301      	movs	r3, #1
 8009e88:	6144      	str	r4, [r0, #20]
 8009e8a:	6103      	str	r3, [r0, #16]
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	bf00      	nop
 8009e90:	0800b4d3 	.word	0x0800b4d3
 8009e94:	0800b4e4 	.word	0x0800b4e4

08009e98 <__multiply>:
 8009e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9c:	4691      	mov	r9, r2
 8009e9e:	690a      	ldr	r2, [r1, #16]
 8009ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	bfbe      	ittt	lt
 8009eaa:	460b      	movlt	r3, r1
 8009eac:	464c      	movlt	r4, r9
 8009eae:	4699      	movlt	r9, r3
 8009eb0:	6927      	ldr	r7, [r4, #16]
 8009eb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009eb6:	68a3      	ldr	r3, [r4, #8]
 8009eb8:	6861      	ldr	r1, [r4, #4]
 8009eba:	eb07 060a 	add.w	r6, r7, sl
 8009ebe:	42b3      	cmp	r3, r6
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	bfb8      	it	lt
 8009ec4:	3101      	addlt	r1, #1
 8009ec6:	f7ff fedb 	bl	8009c80 <_Balloc>
 8009eca:	b930      	cbnz	r0, 8009eda <__multiply+0x42>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009ed2:	4b43      	ldr	r3, [pc, #268]	; (8009fe0 <__multiply+0x148>)
 8009ed4:	4843      	ldr	r0, [pc, #268]	; (8009fe4 <__multiply+0x14c>)
 8009ed6:	f000 fcfb 	bl	800a8d0 <__assert_func>
 8009eda:	f100 0514 	add.w	r5, r0, #20
 8009ede:	462b      	mov	r3, r5
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ee6:	4543      	cmp	r3, r8
 8009ee8:	d321      	bcc.n	8009f2e <__multiply+0x96>
 8009eea:	f104 0314 	add.w	r3, r4, #20
 8009eee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009ef2:	f109 0314 	add.w	r3, r9, #20
 8009ef6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009efa:	9202      	str	r2, [sp, #8]
 8009efc:	1b3a      	subs	r2, r7, r4
 8009efe:	3a15      	subs	r2, #21
 8009f00:	f022 0203 	bic.w	r2, r2, #3
 8009f04:	3204      	adds	r2, #4
 8009f06:	f104 0115 	add.w	r1, r4, #21
 8009f0a:	428f      	cmp	r7, r1
 8009f0c:	bf38      	it	cc
 8009f0e:	2204      	movcc	r2, #4
 8009f10:	9201      	str	r2, [sp, #4]
 8009f12:	9a02      	ldr	r2, [sp, #8]
 8009f14:	9303      	str	r3, [sp, #12]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d80c      	bhi.n	8009f34 <__multiply+0x9c>
 8009f1a:	2e00      	cmp	r6, #0
 8009f1c:	dd03      	ble.n	8009f26 <__multiply+0x8e>
 8009f1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d05a      	beq.n	8009fdc <__multiply+0x144>
 8009f26:	6106      	str	r6, [r0, #16]
 8009f28:	b005      	add	sp, #20
 8009f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f2e:	f843 2b04 	str.w	r2, [r3], #4
 8009f32:	e7d8      	b.n	8009ee6 <__multiply+0x4e>
 8009f34:	f8b3 a000 	ldrh.w	sl, [r3]
 8009f38:	f1ba 0f00 	cmp.w	sl, #0
 8009f3c:	d023      	beq.n	8009f86 <__multiply+0xee>
 8009f3e:	46a9      	mov	r9, r5
 8009f40:	f04f 0c00 	mov.w	ip, #0
 8009f44:	f104 0e14 	add.w	lr, r4, #20
 8009f48:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009f4c:	f8d9 1000 	ldr.w	r1, [r9]
 8009f50:	fa1f fb82 	uxth.w	fp, r2
 8009f54:	b289      	uxth	r1, r1
 8009f56:	fb0a 110b 	mla	r1, sl, fp, r1
 8009f5a:	4461      	add	r1, ip
 8009f5c:	f8d9 c000 	ldr.w	ip, [r9]
 8009f60:	0c12      	lsrs	r2, r2, #16
 8009f62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009f66:	fb0a c202 	mla	r2, sl, r2, ip
 8009f6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009f6e:	b289      	uxth	r1, r1
 8009f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f74:	4577      	cmp	r7, lr
 8009f76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009f7a:	f849 1b04 	str.w	r1, [r9], #4
 8009f7e:	d8e3      	bhi.n	8009f48 <__multiply+0xb0>
 8009f80:	9a01      	ldr	r2, [sp, #4]
 8009f82:	f845 c002 	str.w	ip, [r5, r2]
 8009f86:	9a03      	ldr	r2, [sp, #12]
 8009f88:	3304      	adds	r3, #4
 8009f8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009f8e:	f1b9 0f00 	cmp.w	r9, #0
 8009f92:	d021      	beq.n	8009fd8 <__multiply+0x140>
 8009f94:	46ae      	mov	lr, r5
 8009f96:	f04f 0a00 	mov.w	sl, #0
 8009f9a:	6829      	ldr	r1, [r5, #0]
 8009f9c:	f104 0c14 	add.w	ip, r4, #20
 8009fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8009fa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009fa8:	b289      	uxth	r1, r1
 8009faa:	fb09 220b 	mla	r2, r9, fp, r2
 8009fae:	4452      	add	r2, sl
 8009fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009fb4:	f84e 1b04 	str.w	r1, [lr], #4
 8009fb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009fbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8009fc4:	4567      	cmp	r7, ip
 8009fc6:	fb09 110a 	mla	r1, r9, sl, r1
 8009fca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009fce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009fd2:	d8e5      	bhi.n	8009fa0 <__multiply+0x108>
 8009fd4:	9a01      	ldr	r2, [sp, #4]
 8009fd6:	50a9      	str	r1, [r5, r2]
 8009fd8:	3504      	adds	r5, #4
 8009fda:	e79a      	b.n	8009f12 <__multiply+0x7a>
 8009fdc:	3e01      	subs	r6, #1
 8009fde:	e79c      	b.n	8009f1a <__multiply+0x82>
 8009fe0:	0800b4d3 	.word	0x0800b4d3
 8009fe4:	0800b4e4 	.word	0x0800b4e4

08009fe8 <__pow5mult>:
 8009fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fec:	4615      	mov	r5, r2
 8009fee:	f012 0203 	ands.w	r2, r2, #3
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	460f      	mov	r7, r1
 8009ff6:	d007      	beq.n	800a008 <__pow5mult+0x20>
 8009ff8:	4c25      	ldr	r4, [pc, #148]	; (800a090 <__pow5mult+0xa8>)
 8009ffa:	3a01      	subs	r2, #1
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a002:	f7ff fe9f 	bl	8009d44 <__multadd>
 800a006:	4607      	mov	r7, r0
 800a008:	10ad      	asrs	r5, r5, #2
 800a00a:	d03d      	beq.n	800a088 <__pow5mult+0xa0>
 800a00c:	69f4      	ldr	r4, [r6, #28]
 800a00e:	b97c      	cbnz	r4, 800a030 <__pow5mult+0x48>
 800a010:	2010      	movs	r0, #16
 800a012:	f7ff fd81 	bl	8009b18 <malloc>
 800a016:	4602      	mov	r2, r0
 800a018:	61f0      	str	r0, [r6, #28]
 800a01a:	b928      	cbnz	r0, 800a028 <__pow5mult+0x40>
 800a01c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a020:	4b1c      	ldr	r3, [pc, #112]	; (800a094 <__pow5mult+0xac>)
 800a022:	481d      	ldr	r0, [pc, #116]	; (800a098 <__pow5mult+0xb0>)
 800a024:	f000 fc54 	bl	800a8d0 <__assert_func>
 800a028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a02c:	6004      	str	r4, [r0, #0]
 800a02e:	60c4      	str	r4, [r0, #12]
 800a030:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a038:	b94c      	cbnz	r4, 800a04e <__pow5mult+0x66>
 800a03a:	f240 2171 	movw	r1, #625	; 0x271
 800a03e:	4630      	mov	r0, r6
 800a040:	f7ff ff14 	bl	8009e6c <__i2b>
 800a044:	2300      	movs	r3, #0
 800a046:	4604      	mov	r4, r0
 800a048:	f8c8 0008 	str.w	r0, [r8, #8]
 800a04c:	6003      	str	r3, [r0, #0]
 800a04e:	f04f 0900 	mov.w	r9, #0
 800a052:	07eb      	lsls	r3, r5, #31
 800a054:	d50a      	bpl.n	800a06c <__pow5mult+0x84>
 800a056:	4639      	mov	r1, r7
 800a058:	4622      	mov	r2, r4
 800a05a:	4630      	mov	r0, r6
 800a05c:	f7ff ff1c 	bl	8009e98 <__multiply>
 800a060:	4680      	mov	r8, r0
 800a062:	4639      	mov	r1, r7
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff fe4b 	bl	8009d00 <_Bfree>
 800a06a:	4647      	mov	r7, r8
 800a06c:	106d      	asrs	r5, r5, #1
 800a06e:	d00b      	beq.n	800a088 <__pow5mult+0xa0>
 800a070:	6820      	ldr	r0, [r4, #0]
 800a072:	b938      	cbnz	r0, 800a084 <__pow5mult+0x9c>
 800a074:	4622      	mov	r2, r4
 800a076:	4621      	mov	r1, r4
 800a078:	4630      	mov	r0, r6
 800a07a:	f7ff ff0d 	bl	8009e98 <__multiply>
 800a07e:	6020      	str	r0, [r4, #0]
 800a080:	f8c0 9000 	str.w	r9, [r0]
 800a084:	4604      	mov	r4, r0
 800a086:	e7e4      	b.n	800a052 <__pow5mult+0x6a>
 800a088:	4638      	mov	r0, r7
 800a08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a08e:	bf00      	nop
 800a090:	0800b630 	.word	0x0800b630
 800a094:	0800b464 	.word	0x0800b464
 800a098:	0800b4e4 	.word	0x0800b4e4

0800a09c <__lshift>:
 800a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	4691      	mov	r9, r2
 800a0a6:	6923      	ldr	r3, [r4, #16]
 800a0a8:	6849      	ldr	r1, [r1, #4]
 800a0aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a0ae:	68a3      	ldr	r3, [r4, #8]
 800a0b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a0b4:	f108 0601 	add.w	r6, r8, #1
 800a0b8:	42b3      	cmp	r3, r6
 800a0ba:	db0b      	blt.n	800a0d4 <__lshift+0x38>
 800a0bc:	4638      	mov	r0, r7
 800a0be:	f7ff fddf 	bl	8009c80 <_Balloc>
 800a0c2:	4605      	mov	r5, r0
 800a0c4:	b948      	cbnz	r0, 800a0da <__lshift+0x3e>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a0cc:	4b27      	ldr	r3, [pc, #156]	; (800a16c <__lshift+0xd0>)
 800a0ce:	4828      	ldr	r0, [pc, #160]	; (800a170 <__lshift+0xd4>)
 800a0d0:	f000 fbfe 	bl	800a8d0 <__assert_func>
 800a0d4:	3101      	adds	r1, #1
 800a0d6:	005b      	lsls	r3, r3, #1
 800a0d8:	e7ee      	b.n	800a0b8 <__lshift+0x1c>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f100 0114 	add.w	r1, r0, #20
 800a0e0:	f100 0210 	add.w	r2, r0, #16
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	4553      	cmp	r3, sl
 800a0e8:	db33      	blt.n	800a152 <__lshift+0xb6>
 800a0ea:	6920      	ldr	r0, [r4, #16]
 800a0ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0f0:	f104 0314 	add.w	r3, r4, #20
 800a0f4:	f019 091f 	ands.w	r9, r9, #31
 800a0f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a100:	d02b      	beq.n	800a15a <__lshift+0xbe>
 800a102:	468a      	mov	sl, r1
 800a104:	2200      	movs	r2, #0
 800a106:	f1c9 0e20 	rsb	lr, r9, #32
 800a10a:	6818      	ldr	r0, [r3, #0]
 800a10c:	fa00 f009 	lsl.w	r0, r0, r9
 800a110:	4310      	orrs	r0, r2
 800a112:	f84a 0b04 	str.w	r0, [sl], #4
 800a116:	f853 2b04 	ldr.w	r2, [r3], #4
 800a11a:	459c      	cmp	ip, r3
 800a11c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a120:	d8f3      	bhi.n	800a10a <__lshift+0x6e>
 800a122:	ebac 0304 	sub.w	r3, ip, r4
 800a126:	3b15      	subs	r3, #21
 800a128:	f023 0303 	bic.w	r3, r3, #3
 800a12c:	3304      	adds	r3, #4
 800a12e:	f104 0015 	add.w	r0, r4, #21
 800a132:	4584      	cmp	ip, r0
 800a134:	bf38      	it	cc
 800a136:	2304      	movcc	r3, #4
 800a138:	50ca      	str	r2, [r1, r3]
 800a13a:	b10a      	cbz	r2, 800a140 <__lshift+0xa4>
 800a13c:	f108 0602 	add.w	r6, r8, #2
 800a140:	3e01      	subs	r6, #1
 800a142:	4638      	mov	r0, r7
 800a144:	4621      	mov	r1, r4
 800a146:	612e      	str	r6, [r5, #16]
 800a148:	f7ff fdda 	bl	8009d00 <_Bfree>
 800a14c:	4628      	mov	r0, r5
 800a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a152:	f842 0f04 	str.w	r0, [r2, #4]!
 800a156:	3301      	adds	r3, #1
 800a158:	e7c5      	b.n	800a0e6 <__lshift+0x4a>
 800a15a:	3904      	subs	r1, #4
 800a15c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a160:	459c      	cmp	ip, r3
 800a162:	f841 2f04 	str.w	r2, [r1, #4]!
 800a166:	d8f9      	bhi.n	800a15c <__lshift+0xc0>
 800a168:	e7ea      	b.n	800a140 <__lshift+0xa4>
 800a16a:	bf00      	nop
 800a16c:	0800b4d3 	.word	0x0800b4d3
 800a170:	0800b4e4 	.word	0x0800b4e4

0800a174 <__mcmp>:
 800a174:	4603      	mov	r3, r0
 800a176:	690a      	ldr	r2, [r1, #16]
 800a178:	6900      	ldr	r0, [r0, #16]
 800a17a:	b530      	push	{r4, r5, lr}
 800a17c:	1a80      	subs	r0, r0, r2
 800a17e:	d10d      	bne.n	800a19c <__mcmp+0x28>
 800a180:	3314      	adds	r3, #20
 800a182:	3114      	adds	r1, #20
 800a184:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a188:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a18c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a194:	4295      	cmp	r5, r2
 800a196:	d002      	beq.n	800a19e <__mcmp+0x2a>
 800a198:	d304      	bcc.n	800a1a4 <__mcmp+0x30>
 800a19a:	2001      	movs	r0, #1
 800a19c:	bd30      	pop	{r4, r5, pc}
 800a19e:	42a3      	cmp	r3, r4
 800a1a0:	d3f4      	bcc.n	800a18c <__mcmp+0x18>
 800a1a2:	e7fb      	b.n	800a19c <__mcmp+0x28>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e7f8      	b.n	800a19c <__mcmp+0x28>
	...

0800a1ac <__mdiff>:
 800a1ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	4607      	mov	r7, r0
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	f7ff ffdb 	bl	800a174 <__mcmp>
 800a1be:	1e06      	subs	r6, r0, #0
 800a1c0:	d111      	bne.n	800a1e6 <__mdiff+0x3a>
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	4638      	mov	r0, r7
 800a1c6:	f7ff fd5b 	bl	8009c80 <_Balloc>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	b928      	cbnz	r0, 800a1da <__mdiff+0x2e>
 800a1ce:	f240 2137 	movw	r1, #567	; 0x237
 800a1d2:	4b3a      	ldr	r3, [pc, #232]	; (800a2bc <__mdiff+0x110>)
 800a1d4:	483a      	ldr	r0, [pc, #232]	; (800a2c0 <__mdiff+0x114>)
 800a1d6:	f000 fb7b 	bl	800a8d0 <__assert_func>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e6:	bfa4      	itt	ge
 800a1e8:	4623      	movge	r3, r4
 800a1ea:	462c      	movge	r4, r5
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	6861      	ldr	r1, [r4, #4]
 800a1f0:	bfa6      	itte	ge
 800a1f2:	461d      	movge	r5, r3
 800a1f4:	2600      	movge	r6, #0
 800a1f6:	2601      	movlt	r6, #1
 800a1f8:	f7ff fd42 	bl	8009c80 <_Balloc>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	b918      	cbnz	r0, 800a208 <__mdiff+0x5c>
 800a200:	f240 2145 	movw	r1, #581	; 0x245
 800a204:	4b2d      	ldr	r3, [pc, #180]	; (800a2bc <__mdiff+0x110>)
 800a206:	e7e5      	b.n	800a1d4 <__mdiff+0x28>
 800a208:	f102 0814 	add.w	r8, r2, #20
 800a20c:	46c2      	mov	sl, r8
 800a20e:	f04f 0c00 	mov.w	ip, #0
 800a212:	6927      	ldr	r7, [r4, #16]
 800a214:	60c6      	str	r6, [r0, #12]
 800a216:	692e      	ldr	r6, [r5, #16]
 800a218:	f104 0014 	add.w	r0, r4, #20
 800a21c:	f105 0914 	add.w	r9, r5, #20
 800a220:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a228:	3410      	adds	r4, #16
 800a22a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a22e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a232:	fa1f f18b 	uxth.w	r1, fp
 800a236:	4461      	add	r1, ip
 800a238:	fa1f fc83 	uxth.w	ip, r3
 800a23c:	0c1b      	lsrs	r3, r3, #16
 800a23e:	eba1 010c 	sub.w	r1, r1, ip
 800a242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a246:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a24a:	b289      	uxth	r1, r1
 800a24c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a250:	454e      	cmp	r6, r9
 800a252:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a256:	f84a 1b04 	str.w	r1, [sl], #4
 800a25a:	d8e6      	bhi.n	800a22a <__mdiff+0x7e>
 800a25c:	1b73      	subs	r3, r6, r5
 800a25e:	3b15      	subs	r3, #21
 800a260:	f023 0303 	bic.w	r3, r3, #3
 800a264:	3515      	adds	r5, #21
 800a266:	3304      	adds	r3, #4
 800a268:	42ae      	cmp	r6, r5
 800a26a:	bf38      	it	cc
 800a26c:	2304      	movcc	r3, #4
 800a26e:	4418      	add	r0, r3
 800a270:	4443      	add	r3, r8
 800a272:	461e      	mov	r6, r3
 800a274:	4605      	mov	r5, r0
 800a276:	4575      	cmp	r5, lr
 800a278:	d30e      	bcc.n	800a298 <__mdiff+0xec>
 800a27a:	f10e 0103 	add.w	r1, lr, #3
 800a27e:	1a09      	subs	r1, r1, r0
 800a280:	f021 0103 	bic.w	r1, r1, #3
 800a284:	3803      	subs	r0, #3
 800a286:	4586      	cmp	lr, r0
 800a288:	bf38      	it	cc
 800a28a:	2100      	movcc	r1, #0
 800a28c:	440b      	add	r3, r1
 800a28e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a292:	b189      	cbz	r1, 800a2b8 <__mdiff+0x10c>
 800a294:	6117      	str	r7, [r2, #16]
 800a296:	e7a3      	b.n	800a1e0 <__mdiff+0x34>
 800a298:	f855 8b04 	ldr.w	r8, [r5], #4
 800a29c:	fa1f f188 	uxth.w	r1, r8
 800a2a0:	4461      	add	r1, ip
 800a2a2:	140c      	asrs	r4, r1, #16
 800a2a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a2a8:	b289      	uxth	r1, r1
 800a2aa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2ae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a2b2:	f846 1b04 	str.w	r1, [r6], #4
 800a2b6:	e7de      	b.n	800a276 <__mdiff+0xca>
 800a2b8:	3f01      	subs	r7, #1
 800a2ba:	e7e8      	b.n	800a28e <__mdiff+0xe2>
 800a2bc:	0800b4d3 	.word	0x0800b4d3
 800a2c0:	0800b4e4 	.word	0x0800b4e4

0800a2c4 <__d2b>:
 800a2c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4617      	mov	r7, r2
 800a2ca:	461c      	mov	r4, r3
 800a2cc:	9e08      	ldr	r6, [sp, #32]
 800a2ce:	f7ff fcd7 	bl	8009c80 <_Balloc>
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	b930      	cbnz	r0, 800a2e4 <__d2b+0x20>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	f240 310f 	movw	r1, #783	; 0x30f
 800a2dc:	4b22      	ldr	r3, [pc, #136]	; (800a368 <__d2b+0xa4>)
 800a2de:	4823      	ldr	r0, [pc, #140]	; (800a36c <__d2b+0xa8>)
 800a2e0:	f000 faf6 	bl	800a8d0 <__assert_func>
 800a2e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a2e8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a2ec:	bb24      	cbnz	r4, 800a338 <__d2b+0x74>
 800a2ee:	2f00      	cmp	r7, #0
 800a2f0:	9301      	str	r3, [sp, #4]
 800a2f2:	d026      	beq.n	800a342 <__d2b+0x7e>
 800a2f4:	4668      	mov	r0, sp
 800a2f6:	9700      	str	r7, [sp, #0]
 800a2f8:	f7ff fd8a 	bl	8009e10 <__lo0bits>
 800a2fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a300:	b1e8      	cbz	r0, 800a33e <__d2b+0x7a>
 800a302:	f1c0 0320 	rsb	r3, r0, #32
 800a306:	fa02 f303 	lsl.w	r3, r2, r3
 800a30a:	430b      	orrs	r3, r1
 800a30c:	40c2      	lsrs	r2, r0
 800a30e:	616b      	str	r3, [r5, #20]
 800a310:	9201      	str	r2, [sp, #4]
 800a312:	9b01      	ldr	r3, [sp, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	bf14      	ite	ne
 800a318:	2102      	movne	r1, #2
 800a31a:	2101      	moveq	r1, #1
 800a31c:	61ab      	str	r3, [r5, #24]
 800a31e:	6129      	str	r1, [r5, #16]
 800a320:	b1bc      	cbz	r4, 800a352 <__d2b+0x8e>
 800a322:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a326:	4404      	add	r4, r0
 800a328:	6034      	str	r4, [r6, #0]
 800a32a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a330:	6018      	str	r0, [r3, #0]
 800a332:	4628      	mov	r0, r5
 800a334:	b003      	add	sp, #12
 800a336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a33c:	e7d7      	b.n	800a2ee <__d2b+0x2a>
 800a33e:	6169      	str	r1, [r5, #20]
 800a340:	e7e7      	b.n	800a312 <__d2b+0x4e>
 800a342:	a801      	add	r0, sp, #4
 800a344:	f7ff fd64 	bl	8009e10 <__lo0bits>
 800a348:	9b01      	ldr	r3, [sp, #4]
 800a34a:	2101      	movs	r1, #1
 800a34c:	616b      	str	r3, [r5, #20]
 800a34e:	3020      	adds	r0, #32
 800a350:	e7e5      	b.n	800a31e <__d2b+0x5a>
 800a352:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a356:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a35a:	6030      	str	r0, [r6, #0]
 800a35c:	6918      	ldr	r0, [r3, #16]
 800a35e:	f7ff fd37 	bl	8009dd0 <__hi0bits>
 800a362:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a366:	e7e2      	b.n	800a32e <__d2b+0x6a>
 800a368:	0800b4d3 	.word	0x0800b4d3
 800a36c:	0800b4e4 	.word	0x0800b4e4

0800a370 <__ssputs_r>:
 800a370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a374:	461f      	mov	r7, r3
 800a376:	688e      	ldr	r6, [r1, #8]
 800a378:	4682      	mov	sl, r0
 800a37a:	42be      	cmp	r6, r7
 800a37c:	460c      	mov	r4, r1
 800a37e:	4690      	mov	r8, r2
 800a380:	680b      	ldr	r3, [r1, #0]
 800a382:	d82c      	bhi.n	800a3de <__ssputs_r+0x6e>
 800a384:	898a      	ldrh	r2, [r1, #12]
 800a386:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a38a:	d026      	beq.n	800a3da <__ssputs_r+0x6a>
 800a38c:	6965      	ldr	r5, [r4, #20]
 800a38e:	6909      	ldr	r1, [r1, #16]
 800a390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a394:	eba3 0901 	sub.w	r9, r3, r1
 800a398:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a39c:	1c7b      	adds	r3, r7, #1
 800a39e:	444b      	add	r3, r9
 800a3a0:	106d      	asrs	r5, r5, #1
 800a3a2:	429d      	cmp	r5, r3
 800a3a4:	bf38      	it	cc
 800a3a6:	461d      	movcc	r5, r3
 800a3a8:	0553      	lsls	r3, r2, #21
 800a3aa:	d527      	bpl.n	800a3fc <__ssputs_r+0x8c>
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	f7ff fbdb 	bl	8009b68 <_malloc_r>
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	b360      	cbz	r0, 800a410 <__ssputs_r+0xa0>
 800a3b6:	464a      	mov	r2, r9
 800a3b8:	6921      	ldr	r1, [r4, #16]
 800a3ba:	f7fe fce7 	bl	8008d8c <memcpy>
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c8:	81a3      	strh	r3, [r4, #12]
 800a3ca:	6126      	str	r6, [r4, #16]
 800a3cc:	444e      	add	r6, r9
 800a3ce:	6026      	str	r6, [r4, #0]
 800a3d0:	463e      	mov	r6, r7
 800a3d2:	6165      	str	r5, [r4, #20]
 800a3d4:	eba5 0509 	sub.w	r5, r5, r9
 800a3d8:	60a5      	str	r5, [r4, #8]
 800a3da:	42be      	cmp	r6, r7
 800a3dc:	d900      	bls.n	800a3e0 <__ssputs_r+0x70>
 800a3de:	463e      	mov	r6, r7
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	4641      	mov	r1, r8
 800a3e4:	6820      	ldr	r0, [r4, #0]
 800a3e6:	f000 fa26 	bl	800a836 <memmove>
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	68a3      	ldr	r3, [r4, #8]
 800a3ee:	1b9b      	subs	r3, r3, r6
 800a3f0:	60a3      	str	r3, [r4, #8]
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	4433      	add	r3, r6
 800a3f6:	6023      	str	r3, [r4, #0]
 800a3f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	f000 faab 	bl	800a958 <_realloc_r>
 800a402:	4606      	mov	r6, r0
 800a404:	2800      	cmp	r0, #0
 800a406:	d1e0      	bne.n	800a3ca <__ssputs_r+0x5a>
 800a408:	4650      	mov	r0, sl
 800a40a:	6921      	ldr	r1, [r4, #16]
 800a40c:	f7ff fb3c 	bl	8009a88 <_free_r>
 800a410:	230c      	movs	r3, #12
 800a412:	f8ca 3000 	str.w	r3, [sl]
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a420:	81a3      	strh	r3, [r4, #12]
 800a422:	e7e9      	b.n	800a3f8 <__ssputs_r+0x88>

0800a424 <_svfiprintf_r>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4698      	mov	r8, r3
 800a42a:	898b      	ldrh	r3, [r1, #12]
 800a42c:	4607      	mov	r7, r0
 800a42e:	061b      	lsls	r3, r3, #24
 800a430:	460d      	mov	r5, r1
 800a432:	4614      	mov	r4, r2
 800a434:	b09d      	sub	sp, #116	; 0x74
 800a436:	d50e      	bpl.n	800a456 <_svfiprintf_r+0x32>
 800a438:	690b      	ldr	r3, [r1, #16]
 800a43a:	b963      	cbnz	r3, 800a456 <_svfiprintf_r+0x32>
 800a43c:	2140      	movs	r1, #64	; 0x40
 800a43e:	f7ff fb93 	bl	8009b68 <_malloc_r>
 800a442:	6028      	str	r0, [r5, #0]
 800a444:	6128      	str	r0, [r5, #16]
 800a446:	b920      	cbnz	r0, 800a452 <_svfiprintf_r+0x2e>
 800a448:	230c      	movs	r3, #12
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e0d0      	b.n	800a5f4 <_svfiprintf_r+0x1d0>
 800a452:	2340      	movs	r3, #64	; 0x40
 800a454:	616b      	str	r3, [r5, #20]
 800a456:	2300      	movs	r3, #0
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
 800a45a:	2320      	movs	r3, #32
 800a45c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a460:	2330      	movs	r3, #48	; 0x30
 800a462:	f04f 0901 	mov.w	r9, #1
 800a466:	f8cd 800c 	str.w	r8, [sp, #12]
 800a46a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a60c <_svfiprintf_r+0x1e8>
 800a46e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a472:	4623      	mov	r3, r4
 800a474:	469a      	mov	sl, r3
 800a476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a47a:	b10a      	cbz	r2, 800a480 <_svfiprintf_r+0x5c>
 800a47c:	2a25      	cmp	r2, #37	; 0x25
 800a47e:	d1f9      	bne.n	800a474 <_svfiprintf_r+0x50>
 800a480:	ebba 0b04 	subs.w	fp, sl, r4
 800a484:	d00b      	beq.n	800a49e <_svfiprintf_r+0x7a>
 800a486:	465b      	mov	r3, fp
 800a488:	4622      	mov	r2, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	4638      	mov	r0, r7
 800a48e:	f7ff ff6f 	bl	800a370 <__ssputs_r>
 800a492:	3001      	adds	r0, #1
 800a494:	f000 80a9 	beq.w	800a5ea <_svfiprintf_r+0x1c6>
 800a498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49a:	445a      	add	r2, fp
 800a49c:	9209      	str	r2, [sp, #36]	; 0x24
 800a49e:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 80a1 	beq.w	800a5ea <_svfiprintf_r+0x1c6>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b2:	f10a 0a01 	add.w	sl, sl, #1
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	9307      	str	r3, [sp, #28]
 800a4ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4be:	931a      	str	r3, [sp, #104]	; 0x68
 800a4c0:	4654      	mov	r4, sl
 800a4c2:	2205      	movs	r2, #5
 800a4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c8:	4850      	ldr	r0, [pc, #320]	; (800a60c <_svfiprintf_r+0x1e8>)
 800a4ca:	f7fe fc51 	bl	8008d70 <memchr>
 800a4ce:	9a04      	ldr	r2, [sp, #16]
 800a4d0:	b9d8      	cbnz	r0, 800a50a <_svfiprintf_r+0xe6>
 800a4d2:	06d0      	lsls	r0, r2, #27
 800a4d4:	bf44      	itt	mi
 800a4d6:	2320      	movmi	r3, #32
 800a4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4dc:	0711      	lsls	r1, r2, #28
 800a4de:	bf44      	itt	mi
 800a4e0:	232b      	movmi	r3, #43	; 0x2b
 800a4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ec:	d015      	beq.n	800a51a <_svfiprintf_r+0xf6>
 800a4ee:	4654      	mov	r4, sl
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f04f 0c0a 	mov.w	ip, #10
 800a4f6:	9a07      	ldr	r2, [sp, #28]
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4fe:	3b30      	subs	r3, #48	; 0x30
 800a500:	2b09      	cmp	r3, #9
 800a502:	d94d      	bls.n	800a5a0 <_svfiprintf_r+0x17c>
 800a504:	b1b0      	cbz	r0, 800a534 <_svfiprintf_r+0x110>
 800a506:	9207      	str	r2, [sp, #28]
 800a508:	e014      	b.n	800a534 <_svfiprintf_r+0x110>
 800a50a:	eba0 0308 	sub.w	r3, r0, r8
 800a50e:	fa09 f303 	lsl.w	r3, r9, r3
 800a512:	4313      	orrs	r3, r2
 800a514:	46a2      	mov	sl, r4
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	e7d2      	b.n	800a4c0 <_svfiprintf_r+0x9c>
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	1d19      	adds	r1, r3, #4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	9103      	str	r1, [sp, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfbb      	ittet	lt
 800a526:	425b      	neglt	r3, r3
 800a528:	f042 0202 	orrlt.w	r2, r2, #2
 800a52c:	9307      	strge	r3, [sp, #28]
 800a52e:	9307      	strlt	r3, [sp, #28]
 800a530:	bfb8      	it	lt
 800a532:	9204      	strlt	r2, [sp, #16]
 800a534:	7823      	ldrb	r3, [r4, #0]
 800a536:	2b2e      	cmp	r3, #46	; 0x2e
 800a538:	d10c      	bne.n	800a554 <_svfiprintf_r+0x130>
 800a53a:	7863      	ldrb	r3, [r4, #1]
 800a53c:	2b2a      	cmp	r3, #42	; 0x2a
 800a53e:	d134      	bne.n	800a5aa <_svfiprintf_r+0x186>
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	3402      	adds	r4, #2
 800a544:	1d1a      	adds	r2, r3, #4
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	9203      	str	r2, [sp, #12]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	bfb8      	it	lt
 800a54e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a610 <_svfiprintf_r+0x1ec>
 800a558:	2203      	movs	r2, #3
 800a55a:	4650      	mov	r0, sl
 800a55c:	7821      	ldrb	r1, [r4, #0]
 800a55e:	f7fe fc07 	bl	8008d70 <memchr>
 800a562:	b138      	cbz	r0, 800a574 <_svfiprintf_r+0x150>
 800a564:	2240      	movs	r2, #64	; 0x40
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	eba0 000a 	sub.w	r0, r0, sl
 800a56c:	4082      	lsls	r2, r0
 800a56e:	4313      	orrs	r3, r2
 800a570:	3401      	adds	r4, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a578:	2206      	movs	r2, #6
 800a57a:	4826      	ldr	r0, [pc, #152]	; (800a614 <_svfiprintf_r+0x1f0>)
 800a57c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a580:	f7fe fbf6 	bl	8008d70 <memchr>
 800a584:	2800      	cmp	r0, #0
 800a586:	d038      	beq.n	800a5fa <_svfiprintf_r+0x1d6>
 800a588:	4b23      	ldr	r3, [pc, #140]	; (800a618 <_svfiprintf_r+0x1f4>)
 800a58a:	bb1b      	cbnz	r3, 800a5d4 <_svfiprintf_r+0x1b0>
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	3307      	adds	r3, #7
 800a590:	f023 0307 	bic.w	r3, r3, #7
 800a594:	3308      	adds	r3, #8
 800a596:	9303      	str	r3, [sp, #12]
 800a598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59a:	4433      	add	r3, r6
 800a59c:	9309      	str	r3, [sp, #36]	; 0x24
 800a59e:	e768      	b.n	800a472 <_svfiprintf_r+0x4e>
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a8:	e7a6      	b.n	800a4f8 <_svfiprintf_r+0xd4>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f04f 0c0a 	mov.w	ip, #10
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	3401      	adds	r4, #1
 800a5b4:	9305      	str	r3, [sp, #20]
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5bc:	3a30      	subs	r2, #48	; 0x30
 800a5be:	2a09      	cmp	r2, #9
 800a5c0:	d903      	bls.n	800a5ca <_svfiprintf_r+0x1a6>
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0c6      	beq.n	800a554 <_svfiprintf_r+0x130>
 800a5c6:	9105      	str	r1, [sp, #20]
 800a5c8:	e7c4      	b.n	800a554 <_svfiprintf_r+0x130>
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5d2:	e7f0      	b.n	800a5b6 <_svfiprintf_r+0x192>
 800a5d4:	ab03      	add	r3, sp, #12
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4638      	mov	r0, r7
 800a5dc:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <_svfiprintf_r+0x1f8>)
 800a5de:	a904      	add	r1, sp, #16
 800a5e0:	f7fd fd6e 	bl	80080c0 <_printf_float>
 800a5e4:	1c42      	adds	r2, r0, #1
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	d1d6      	bne.n	800a598 <_svfiprintf_r+0x174>
 800a5ea:	89ab      	ldrh	r3, [r5, #12]
 800a5ec:	065b      	lsls	r3, r3, #25
 800a5ee:	f53f af2d 	bmi.w	800a44c <_svfiprintf_r+0x28>
 800a5f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5f4:	b01d      	add	sp, #116	; 0x74
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	ab03      	add	r3, sp, #12
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	462a      	mov	r2, r5
 800a600:	4638      	mov	r0, r7
 800a602:	4b06      	ldr	r3, [pc, #24]	; (800a61c <_svfiprintf_r+0x1f8>)
 800a604:	a904      	add	r1, sp, #16
 800a606:	f7fd fffb 	bl	8008600 <_printf_i>
 800a60a:	e7eb      	b.n	800a5e4 <_svfiprintf_r+0x1c0>
 800a60c:	0800b63c 	.word	0x0800b63c
 800a610:	0800b642 	.word	0x0800b642
 800a614:	0800b646 	.word	0x0800b646
 800a618:	080080c1 	.word	0x080080c1
 800a61c:	0800a371 	.word	0x0800a371

0800a620 <__sflush_r>:
 800a620:	898a      	ldrh	r2, [r1, #12]
 800a622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a624:	4605      	mov	r5, r0
 800a626:	0710      	lsls	r0, r2, #28
 800a628:	460c      	mov	r4, r1
 800a62a:	d457      	bmi.n	800a6dc <__sflush_r+0xbc>
 800a62c:	684b      	ldr	r3, [r1, #4]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	dc04      	bgt.n	800a63c <__sflush_r+0x1c>
 800a632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a634:	2b00      	cmp	r3, #0
 800a636:	dc01      	bgt.n	800a63c <__sflush_r+0x1c>
 800a638:	2000      	movs	r0, #0
 800a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a63e:	2e00      	cmp	r6, #0
 800a640:	d0fa      	beq.n	800a638 <__sflush_r+0x18>
 800a642:	2300      	movs	r3, #0
 800a644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a648:	682f      	ldr	r7, [r5, #0]
 800a64a:	6a21      	ldr	r1, [r4, #32]
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	d032      	beq.n	800a6b6 <__sflush_r+0x96>
 800a650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a652:	89a3      	ldrh	r3, [r4, #12]
 800a654:	075a      	lsls	r2, r3, #29
 800a656:	d505      	bpl.n	800a664 <__sflush_r+0x44>
 800a658:	6863      	ldr	r3, [r4, #4]
 800a65a:	1ac0      	subs	r0, r0, r3
 800a65c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a65e:	b10b      	cbz	r3, 800a664 <__sflush_r+0x44>
 800a660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a662:	1ac0      	subs	r0, r0, r3
 800a664:	2300      	movs	r3, #0
 800a666:	4602      	mov	r2, r0
 800a668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a66a:	4628      	mov	r0, r5
 800a66c:	6a21      	ldr	r1, [r4, #32]
 800a66e:	47b0      	blx	r6
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	d106      	bne.n	800a684 <__sflush_r+0x64>
 800a676:	6829      	ldr	r1, [r5, #0]
 800a678:	291d      	cmp	r1, #29
 800a67a:	d82b      	bhi.n	800a6d4 <__sflush_r+0xb4>
 800a67c:	4a28      	ldr	r2, [pc, #160]	; (800a720 <__sflush_r+0x100>)
 800a67e:	410a      	asrs	r2, r1
 800a680:	07d6      	lsls	r6, r2, #31
 800a682:	d427      	bmi.n	800a6d4 <__sflush_r+0xb4>
 800a684:	2200      	movs	r2, #0
 800a686:	6062      	str	r2, [r4, #4]
 800a688:	6922      	ldr	r2, [r4, #16]
 800a68a:	04d9      	lsls	r1, r3, #19
 800a68c:	6022      	str	r2, [r4, #0]
 800a68e:	d504      	bpl.n	800a69a <__sflush_r+0x7a>
 800a690:	1c42      	adds	r2, r0, #1
 800a692:	d101      	bne.n	800a698 <__sflush_r+0x78>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b903      	cbnz	r3, 800a69a <__sflush_r+0x7a>
 800a698:	6560      	str	r0, [r4, #84]	; 0x54
 800a69a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a69c:	602f      	str	r7, [r5, #0]
 800a69e:	2900      	cmp	r1, #0
 800a6a0:	d0ca      	beq.n	800a638 <__sflush_r+0x18>
 800a6a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6a6:	4299      	cmp	r1, r3
 800a6a8:	d002      	beq.n	800a6b0 <__sflush_r+0x90>
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f7ff f9ec 	bl	8009a88 <_free_r>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	6360      	str	r0, [r4, #52]	; 0x34
 800a6b4:	e7c1      	b.n	800a63a <__sflush_r+0x1a>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b0      	blx	r6
 800a6bc:	1c41      	adds	r1, r0, #1
 800a6be:	d1c8      	bne.n	800a652 <__sflush_r+0x32>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0c5      	beq.n	800a652 <__sflush_r+0x32>
 800a6c6:	2b1d      	cmp	r3, #29
 800a6c8:	d001      	beq.n	800a6ce <__sflush_r+0xae>
 800a6ca:	2b16      	cmp	r3, #22
 800a6cc:	d101      	bne.n	800a6d2 <__sflush_r+0xb2>
 800a6ce:	602f      	str	r7, [r5, #0]
 800a6d0:	e7b2      	b.n	800a638 <__sflush_r+0x18>
 800a6d2:	89a3      	ldrh	r3, [r4, #12]
 800a6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6d8:	81a3      	strh	r3, [r4, #12]
 800a6da:	e7ae      	b.n	800a63a <__sflush_r+0x1a>
 800a6dc:	690f      	ldr	r7, [r1, #16]
 800a6de:	2f00      	cmp	r7, #0
 800a6e0:	d0aa      	beq.n	800a638 <__sflush_r+0x18>
 800a6e2:	0793      	lsls	r3, r2, #30
 800a6e4:	bf18      	it	ne
 800a6e6:	2300      	movne	r3, #0
 800a6e8:	680e      	ldr	r6, [r1, #0]
 800a6ea:	bf08      	it	eq
 800a6ec:	694b      	ldreq	r3, [r1, #20]
 800a6ee:	1bf6      	subs	r6, r6, r7
 800a6f0:	600f      	str	r7, [r1, #0]
 800a6f2:	608b      	str	r3, [r1, #8]
 800a6f4:	2e00      	cmp	r6, #0
 800a6f6:	dd9f      	ble.n	800a638 <__sflush_r+0x18>
 800a6f8:	4633      	mov	r3, r6
 800a6fa:	463a      	mov	r2, r7
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	6a21      	ldr	r1, [r4, #32]
 800a700:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a704:	47e0      	blx	ip
 800a706:	2800      	cmp	r0, #0
 800a708:	dc06      	bgt.n	800a718 <__sflush_r+0xf8>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	f04f 30ff 	mov.w	r0, #4294967295
 800a710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a714:	81a3      	strh	r3, [r4, #12]
 800a716:	e790      	b.n	800a63a <__sflush_r+0x1a>
 800a718:	4407      	add	r7, r0
 800a71a:	1a36      	subs	r6, r6, r0
 800a71c:	e7ea      	b.n	800a6f4 <__sflush_r+0xd4>
 800a71e:	bf00      	nop
 800a720:	dfbffffe 	.word	0xdfbffffe

0800a724 <_fflush_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	690b      	ldr	r3, [r1, #16]
 800a728:	4605      	mov	r5, r0
 800a72a:	460c      	mov	r4, r1
 800a72c:	b913      	cbnz	r3, 800a734 <_fflush_r+0x10>
 800a72e:	2500      	movs	r5, #0
 800a730:	4628      	mov	r0, r5
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	b118      	cbz	r0, 800a73e <_fflush_r+0x1a>
 800a736:	6a03      	ldr	r3, [r0, #32]
 800a738:	b90b      	cbnz	r3, 800a73e <_fflush_r+0x1a>
 800a73a:	f7fe f8fd 	bl	8008938 <__sinit>
 800a73e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0f3      	beq.n	800a72e <_fflush_r+0xa>
 800a746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a748:	07d0      	lsls	r0, r2, #31
 800a74a:	d404      	bmi.n	800a756 <_fflush_r+0x32>
 800a74c:	0599      	lsls	r1, r3, #22
 800a74e:	d402      	bmi.n	800a756 <_fflush_r+0x32>
 800a750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a752:	f7fe fb0b 	bl	8008d6c <__retarget_lock_acquire_recursive>
 800a756:	4628      	mov	r0, r5
 800a758:	4621      	mov	r1, r4
 800a75a:	f7ff ff61 	bl	800a620 <__sflush_r>
 800a75e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a760:	4605      	mov	r5, r0
 800a762:	07da      	lsls	r2, r3, #31
 800a764:	d4e4      	bmi.n	800a730 <_fflush_r+0xc>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	059b      	lsls	r3, r3, #22
 800a76a:	d4e1      	bmi.n	800a730 <_fflush_r+0xc>
 800a76c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a76e:	f7fe fafe 	bl	8008d6e <__retarget_lock_release_recursive>
 800a772:	e7dd      	b.n	800a730 <_fflush_r+0xc>

0800a774 <__swhatbuf_r>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	460c      	mov	r4, r1
 800a778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77c:	4615      	mov	r5, r2
 800a77e:	2900      	cmp	r1, #0
 800a780:	461e      	mov	r6, r3
 800a782:	b096      	sub	sp, #88	; 0x58
 800a784:	da0c      	bge.n	800a7a0 <__swhatbuf_r+0x2c>
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	2100      	movs	r1, #0
 800a78a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a78e:	bf0c      	ite	eq
 800a790:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a794:	2340      	movne	r3, #64	; 0x40
 800a796:	2000      	movs	r0, #0
 800a798:	6031      	str	r1, [r6, #0]
 800a79a:	602b      	str	r3, [r5, #0]
 800a79c:	b016      	add	sp, #88	; 0x58
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	466a      	mov	r2, sp
 800a7a2:	f000 f863 	bl	800a86c <_fstat_r>
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	dbed      	blt.n	800a786 <__swhatbuf_r+0x12>
 800a7aa:	9901      	ldr	r1, [sp, #4]
 800a7ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a7b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a7b4:	4259      	negs	r1, r3
 800a7b6:	4159      	adcs	r1, r3
 800a7b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7bc:	e7eb      	b.n	800a796 <__swhatbuf_r+0x22>

0800a7be <__smakebuf_r>:
 800a7be:	898b      	ldrh	r3, [r1, #12]
 800a7c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7c2:	079d      	lsls	r5, r3, #30
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	d507      	bpl.n	800a7da <__smakebuf_r+0x1c>
 800a7ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	6163      	str	r3, [r4, #20]
 800a7d6:	b002      	add	sp, #8
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	466a      	mov	r2, sp
 800a7dc:	ab01      	add	r3, sp, #4
 800a7de:	f7ff ffc9 	bl	800a774 <__swhatbuf_r>
 800a7e2:	9900      	ldr	r1, [sp, #0]
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7ff f9be 	bl	8009b68 <_malloc_r>
 800a7ec:	b948      	cbnz	r0, 800a802 <__smakebuf_r+0x44>
 800a7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f2:	059a      	lsls	r2, r3, #22
 800a7f4:	d4ef      	bmi.n	800a7d6 <__smakebuf_r+0x18>
 800a7f6:	f023 0303 	bic.w	r3, r3, #3
 800a7fa:	f043 0302 	orr.w	r3, r3, #2
 800a7fe:	81a3      	strh	r3, [r4, #12]
 800a800:	e7e3      	b.n	800a7ca <__smakebuf_r+0xc>
 800a802:	89a3      	ldrh	r3, [r4, #12]
 800a804:	6020      	str	r0, [r4, #0]
 800a806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	6120      	str	r0, [r4, #16]
 800a810:	6163      	str	r3, [r4, #20]
 800a812:	9b01      	ldr	r3, [sp, #4]
 800a814:	b15b      	cbz	r3, 800a82e <__smakebuf_r+0x70>
 800a816:	4630      	mov	r0, r6
 800a818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a81c:	f000 f838 	bl	800a890 <_isatty_r>
 800a820:	b128      	cbz	r0, 800a82e <__smakebuf_r+0x70>
 800a822:	89a3      	ldrh	r3, [r4, #12]
 800a824:	f023 0303 	bic.w	r3, r3, #3
 800a828:	f043 0301 	orr.w	r3, r3, #1
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	89a3      	ldrh	r3, [r4, #12]
 800a830:	431d      	orrs	r5, r3
 800a832:	81a5      	strh	r5, [r4, #12]
 800a834:	e7cf      	b.n	800a7d6 <__smakebuf_r+0x18>

0800a836 <memmove>:
 800a836:	4288      	cmp	r0, r1
 800a838:	b510      	push	{r4, lr}
 800a83a:	eb01 0402 	add.w	r4, r1, r2
 800a83e:	d902      	bls.n	800a846 <memmove+0x10>
 800a840:	4284      	cmp	r4, r0
 800a842:	4623      	mov	r3, r4
 800a844:	d807      	bhi.n	800a856 <memmove+0x20>
 800a846:	1e43      	subs	r3, r0, #1
 800a848:	42a1      	cmp	r1, r4
 800a84a:	d008      	beq.n	800a85e <memmove+0x28>
 800a84c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a850:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a854:	e7f8      	b.n	800a848 <memmove+0x12>
 800a856:	4601      	mov	r1, r0
 800a858:	4402      	add	r2, r0
 800a85a:	428a      	cmp	r2, r1
 800a85c:	d100      	bne.n	800a860 <memmove+0x2a>
 800a85e:	bd10      	pop	{r4, pc}
 800a860:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a864:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a868:	e7f7      	b.n	800a85a <memmove+0x24>
	...

0800a86c <_fstat_r>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	2300      	movs	r3, #0
 800a870:	4d06      	ldr	r5, [pc, #24]	; (800a88c <_fstat_r+0x20>)
 800a872:	4604      	mov	r4, r0
 800a874:	4608      	mov	r0, r1
 800a876:	4611      	mov	r1, r2
 800a878:	602b      	str	r3, [r5, #0]
 800a87a:	f7f8 fac6 	bl	8002e0a <_fstat>
 800a87e:	1c43      	adds	r3, r0, #1
 800a880:	d102      	bne.n	800a888 <_fstat_r+0x1c>
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	b103      	cbz	r3, 800a888 <_fstat_r+0x1c>
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	bf00      	nop
 800a88c:	20000830 	.word	0x20000830

0800a890 <_isatty_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	2300      	movs	r3, #0
 800a894:	4d05      	ldr	r5, [pc, #20]	; (800a8ac <_isatty_r+0x1c>)
 800a896:	4604      	mov	r4, r0
 800a898:	4608      	mov	r0, r1
 800a89a:	602b      	str	r3, [r5, #0]
 800a89c:	f7f8 fac4 	bl	8002e28 <_isatty>
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	d102      	bne.n	800a8aa <_isatty_r+0x1a>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b103      	cbz	r3, 800a8aa <_isatty_r+0x1a>
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	20000830 	.word	0x20000830

0800a8b0 <_sbrk_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	4d05      	ldr	r5, [pc, #20]	; (800a8cc <_sbrk_r+0x1c>)
 800a8b6:	4604      	mov	r4, r0
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	602b      	str	r3, [r5, #0]
 800a8bc:	f7f8 faca 	bl	8002e54 <_sbrk>
 800a8c0:	1c43      	adds	r3, r0, #1
 800a8c2:	d102      	bne.n	800a8ca <_sbrk_r+0x1a>
 800a8c4:	682b      	ldr	r3, [r5, #0]
 800a8c6:	b103      	cbz	r3, 800a8ca <_sbrk_r+0x1a>
 800a8c8:	6023      	str	r3, [r4, #0]
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	20000830 	.word	0x20000830

0800a8d0 <__assert_func>:
 800a8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8d2:	4614      	mov	r4, r2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <__assert_func+0x2c>)
 800a8d8:	4605      	mov	r5, r0
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68d8      	ldr	r0, [r3, #12]
 800a8de:	b14c      	cbz	r4, 800a8f4 <__assert_func+0x24>
 800a8e0:	4b07      	ldr	r3, [pc, #28]	; (800a900 <__assert_func+0x30>)
 800a8e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8e6:	9100      	str	r1, [sp, #0]
 800a8e8:	462b      	mov	r3, r5
 800a8ea:	4906      	ldr	r1, [pc, #24]	; (800a904 <__assert_func+0x34>)
 800a8ec:	f000 f870 	bl	800a9d0 <fiprintf>
 800a8f0:	f000 f880 	bl	800a9f4 <abort>
 800a8f4:	4b04      	ldr	r3, [pc, #16]	; (800a908 <__assert_func+0x38>)
 800a8f6:	461c      	mov	r4, r3
 800a8f8:	e7f3      	b.n	800a8e2 <__assert_func+0x12>
 800a8fa:	bf00      	nop
 800a8fc:	20000064 	.word	0x20000064
 800a900:	0800b657 	.word	0x0800b657
 800a904:	0800b664 	.word	0x0800b664
 800a908:	0800b692 	.word	0x0800b692

0800a90c <_calloc_r>:
 800a90c:	b570      	push	{r4, r5, r6, lr}
 800a90e:	fba1 5402 	umull	r5, r4, r1, r2
 800a912:	b934      	cbnz	r4, 800a922 <_calloc_r+0x16>
 800a914:	4629      	mov	r1, r5
 800a916:	f7ff f927 	bl	8009b68 <_malloc_r>
 800a91a:	4606      	mov	r6, r0
 800a91c:	b928      	cbnz	r0, 800a92a <_calloc_r+0x1e>
 800a91e:	4630      	mov	r0, r6
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	220c      	movs	r2, #12
 800a924:	2600      	movs	r6, #0
 800a926:	6002      	str	r2, [r0, #0]
 800a928:	e7f9      	b.n	800a91e <_calloc_r+0x12>
 800a92a:	462a      	mov	r2, r5
 800a92c:	4621      	mov	r1, r4
 800a92e:	f7fe f9a1 	bl	8008c74 <memset>
 800a932:	e7f4      	b.n	800a91e <_calloc_r+0x12>

0800a934 <__ascii_mbtowc>:
 800a934:	b082      	sub	sp, #8
 800a936:	b901      	cbnz	r1, 800a93a <__ascii_mbtowc+0x6>
 800a938:	a901      	add	r1, sp, #4
 800a93a:	b142      	cbz	r2, 800a94e <__ascii_mbtowc+0x1a>
 800a93c:	b14b      	cbz	r3, 800a952 <__ascii_mbtowc+0x1e>
 800a93e:	7813      	ldrb	r3, [r2, #0]
 800a940:	600b      	str	r3, [r1, #0]
 800a942:	7812      	ldrb	r2, [r2, #0]
 800a944:	1e10      	subs	r0, r2, #0
 800a946:	bf18      	it	ne
 800a948:	2001      	movne	r0, #1
 800a94a:	b002      	add	sp, #8
 800a94c:	4770      	bx	lr
 800a94e:	4610      	mov	r0, r2
 800a950:	e7fb      	b.n	800a94a <__ascii_mbtowc+0x16>
 800a952:	f06f 0001 	mvn.w	r0, #1
 800a956:	e7f8      	b.n	800a94a <__ascii_mbtowc+0x16>

0800a958 <_realloc_r>:
 800a958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95c:	4680      	mov	r8, r0
 800a95e:	4614      	mov	r4, r2
 800a960:	460e      	mov	r6, r1
 800a962:	b921      	cbnz	r1, 800a96e <_realloc_r+0x16>
 800a964:	4611      	mov	r1, r2
 800a966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a96a:	f7ff b8fd 	b.w	8009b68 <_malloc_r>
 800a96e:	b92a      	cbnz	r2, 800a97c <_realloc_r+0x24>
 800a970:	f7ff f88a 	bl	8009a88 <_free_r>
 800a974:	4625      	mov	r5, r4
 800a976:	4628      	mov	r0, r5
 800a978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a97c:	f000 f841 	bl	800aa02 <_malloc_usable_size_r>
 800a980:	4284      	cmp	r4, r0
 800a982:	4607      	mov	r7, r0
 800a984:	d802      	bhi.n	800a98c <_realloc_r+0x34>
 800a986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a98a:	d812      	bhi.n	800a9b2 <_realloc_r+0x5a>
 800a98c:	4621      	mov	r1, r4
 800a98e:	4640      	mov	r0, r8
 800a990:	f7ff f8ea 	bl	8009b68 <_malloc_r>
 800a994:	4605      	mov	r5, r0
 800a996:	2800      	cmp	r0, #0
 800a998:	d0ed      	beq.n	800a976 <_realloc_r+0x1e>
 800a99a:	42bc      	cmp	r4, r7
 800a99c:	4622      	mov	r2, r4
 800a99e:	4631      	mov	r1, r6
 800a9a0:	bf28      	it	cs
 800a9a2:	463a      	movcs	r2, r7
 800a9a4:	f7fe f9f2 	bl	8008d8c <memcpy>
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4640      	mov	r0, r8
 800a9ac:	f7ff f86c 	bl	8009a88 <_free_r>
 800a9b0:	e7e1      	b.n	800a976 <_realloc_r+0x1e>
 800a9b2:	4635      	mov	r5, r6
 800a9b4:	e7df      	b.n	800a976 <_realloc_r+0x1e>

0800a9b6 <__ascii_wctomb>:
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	b141      	cbz	r1, 800a9ce <__ascii_wctomb+0x18>
 800a9bc:	2aff      	cmp	r2, #255	; 0xff
 800a9be:	d904      	bls.n	800a9ca <__ascii_wctomb+0x14>
 800a9c0:	228a      	movs	r2, #138	; 0x8a
 800a9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	4770      	bx	lr
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	700a      	strb	r2, [r1, #0]
 800a9ce:	4770      	bx	lr

0800a9d0 <fiprintf>:
 800a9d0:	b40e      	push	{r1, r2, r3}
 800a9d2:	b503      	push	{r0, r1, lr}
 800a9d4:	4601      	mov	r1, r0
 800a9d6:	ab03      	add	r3, sp, #12
 800a9d8:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <fiprintf+0x20>)
 800a9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9de:	6800      	ldr	r0, [r0, #0]
 800a9e0:	9301      	str	r3, [sp, #4]
 800a9e2:	f000 f83d 	bl	800aa60 <_vfiprintf_r>
 800a9e6:	b002      	add	sp, #8
 800a9e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9ec:	b003      	add	sp, #12
 800a9ee:	4770      	bx	lr
 800a9f0:	20000064 	.word	0x20000064

0800a9f4 <abort>:
 800a9f4:	2006      	movs	r0, #6
 800a9f6:	b508      	push	{r3, lr}
 800a9f8:	f000 f974 	bl	800ace4 <raise>
 800a9fc:	2001      	movs	r0, #1
 800a9fe:	f7f8 f9b6 	bl	8002d6e <_exit>

0800aa02 <_malloc_usable_size_r>:
 800aa02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa06:	1f18      	subs	r0, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	bfbc      	itt	lt
 800aa0c:	580b      	ldrlt	r3, [r1, r0]
 800aa0e:	18c0      	addlt	r0, r0, r3
 800aa10:	4770      	bx	lr

0800aa12 <__sfputc_r>:
 800aa12:	6893      	ldr	r3, [r2, #8]
 800aa14:	b410      	push	{r4}
 800aa16:	3b01      	subs	r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	6093      	str	r3, [r2, #8]
 800aa1c:	da07      	bge.n	800aa2e <__sfputc_r+0x1c>
 800aa1e:	6994      	ldr	r4, [r2, #24]
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	db01      	blt.n	800aa28 <__sfputc_r+0x16>
 800aa24:	290a      	cmp	r1, #10
 800aa26:	d102      	bne.n	800aa2e <__sfputc_r+0x1c>
 800aa28:	bc10      	pop	{r4}
 800aa2a:	f7fe b88e 	b.w	8008b4a <__swbuf_r>
 800aa2e:	6813      	ldr	r3, [r2, #0]
 800aa30:	1c58      	adds	r0, r3, #1
 800aa32:	6010      	str	r0, [r2, #0]
 800aa34:	7019      	strb	r1, [r3, #0]
 800aa36:	4608      	mov	r0, r1
 800aa38:	bc10      	pop	{r4}
 800aa3a:	4770      	bx	lr

0800aa3c <__sfputs_r>:
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	4606      	mov	r6, r0
 800aa40:	460f      	mov	r7, r1
 800aa42:	4614      	mov	r4, r2
 800aa44:	18d5      	adds	r5, r2, r3
 800aa46:	42ac      	cmp	r4, r5
 800aa48:	d101      	bne.n	800aa4e <__sfputs_r+0x12>
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	e007      	b.n	800aa5e <__sfputs_r+0x22>
 800aa4e:	463a      	mov	r2, r7
 800aa50:	4630      	mov	r0, r6
 800aa52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa56:	f7ff ffdc 	bl	800aa12 <__sfputc_r>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d1f3      	bne.n	800aa46 <__sfputs_r+0xa>
 800aa5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa60 <_vfiprintf_r>:
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	460d      	mov	r5, r1
 800aa66:	4614      	mov	r4, r2
 800aa68:	4698      	mov	r8, r3
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	b09d      	sub	sp, #116	; 0x74
 800aa6e:	b118      	cbz	r0, 800aa78 <_vfiprintf_r+0x18>
 800aa70:	6a03      	ldr	r3, [r0, #32]
 800aa72:	b90b      	cbnz	r3, 800aa78 <_vfiprintf_r+0x18>
 800aa74:	f7fd ff60 	bl	8008938 <__sinit>
 800aa78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa7a:	07d9      	lsls	r1, r3, #31
 800aa7c:	d405      	bmi.n	800aa8a <_vfiprintf_r+0x2a>
 800aa7e:	89ab      	ldrh	r3, [r5, #12]
 800aa80:	059a      	lsls	r2, r3, #22
 800aa82:	d402      	bmi.n	800aa8a <_vfiprintf_r+0x2a>
 800aa84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa86:	f7fe f971 	bl	8008d6c <__retarget_lock_acquire_recursive>
 800aa8a:	89ab      	ldrh	r3, [r5, #12]
 800aa8c:	071b      	lsls	r3, r3, #28
 800aa8e:	d501      	bpl.n	800aa94 <_vfiprintf_r+0x34>
 800aa90:	692b      	ldr	r3, [r5, #16]
 800aa92:	b99b      	cbnz	r3, 800aabc <_vfiprintf_r+0x5c>
 800aa94:	4629      	mov	r1, r5
 800aa96:	4630      	mov	r0, r6
 800aa98:	f7fe f894 	bl	8008bc4 <__swsetup_r>
 800aa9c:	b170      	cbz	r0, 800aabc <_vfiprintf_r+0x5c>
 800aa9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aaa0:	07dc      	lsls	r4, r3, #31
 800aaa2:	d504      	bpl.n	800aaae <_vfiprintf_r+0x4e>
 800aaa4:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa8:	b01d      	add	sp, #116	; 0x74
 800aaaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaae:	89ab      	ldrh	r3, [r5, #12]
 800aab0:	0598      	lsls	r0, r3, #22
 800aab2:	d4f7      	bmi.n	800aaa4 <_vfiprintf_r+0x44>
 800aab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aab6:	f7fe f95a 	bl	8008d6e <__retarget_lock_release_recursive>
 800aaba:	e7f3      	b.n	800aaa4 <_vfiprintf_r+0x44>
 800aabc:	2300      	movs	r3, #0
 800aabe:	9309      	str	r3, [sp, #36]	; 0x24
 800aac0:	2320      	movs	r3, #32
 800aac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aac6:	2330      	movs	r3, #48	; 0x30
 800aac8:	f04f 0901 	mov.w	r9, #1
 800aacc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aad0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800ac80 <_vfiprintf_r+0x220>
 800aad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aad8:	4623      	mov	r3, r4
 800aada:	469a      	mov	sl, r3
 800aadc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae0:	b10a      	cbz	r2, 800aae6 <_vfiprintf_r+0x86>
 800aae2:	2a25      	cmp	r2, #37	; 0x25
 800aae4:	d1f9      	bne.n	800aada <_vfiprintf_r+0x7a>
 800aae6:	ebba 0b04 	subs.w	fp, sl, r4
 800aaea:	d00b      	beq.n	800ab04 <_vfiprintf_r+0xa4>
 800aaec:	465b      	mov	r3, fp
 800aaee:	4622      	mov	r2, r4
 800aaf0:	4629      	mov	r1, r5
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7ff ffa2 	bl	800aa3c <__sfputs_r>
 800aaf8:	3001      	adds	r0, #1
 800aafa:	f000 80a9 	beq.w	800ac50 <_vfiprintf_r+0x1f0>
 800aafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab00:	445a      	add	r2, fp
 800ab02:	9209      	str	r2, [sp, #36]	; 0x24
 800ab04:	f89a 3000 	ldrb.w	r3, [sl]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 80a1 	beq.w	800ac50 <_vfiprintf_r+0x1f0>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f04f 32ff 	mov.w	r2, #4294967295
 800ab14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab18:	f10a 0a01 	add.w	sl, sl, #1
 800ab1c:	9304      	str	r3, [sp, #16]
 800ab1e:	9307      	str	r3, [sp, #28]
 800ab20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab24:	931a      	str	r3, [sp, #104]	; 0x68
 800ab26:	4654      	mov	r4, sl
 800ab28:	2205      	movs	r2, #5
 800ab2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab2e:	4854      	ldr	r0, [pc, #336]	; (800ac80 <_vfiprintf_r+0x220>)
 800ab30:	f7fe f91e 	bl	8008d70 <memchr>
 800ab34:	9a04      	ldr	r2, [sp, #16]
 800ab36:	b9d8      	cbnz	r0, 800ab70 <_vfiprintf_r+0x110>
 800ab38:	06d1      	lsls	r1, r2, #27
 800ab3a:	bf44      	itt	mi
 800ab3c:	2320      	movmi	r3, #32
 800ab3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab42:	0713      	lsls	r3, r2, #28
 800ab44:	bf44      	itt	mi
 800ab46:	232b      	movmi	r3, #43	; 0x2b
 800ab48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab50:	2b2a      	cmp	r3, #42	; 0x2a
 800ab52:	d015      	beq.n	800ab80 <_vfiprintf_r+0x120>
 800ab54:	4654      	mov	r4, sl
 800ab56:	2000      	movs	r0, #0
 800ab58:	f04f 0c0a 	mov.w	ip, #10
 800ab5c:	9a07      	ldr	r2, [sp, #28]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab64:	3b30      	subs	r3, #48	; 0x30
 800ab66:	2b09      	cmp	r3, #9
 800ab68:	d94d      	bls.n	800ac06 <_vfiprintf_r+0x1a6>
 800ab6a:	b1b0      	cbz	r0, 800ab9a <_vfiprintf_r+0x13a>
 800ab6c:	9207      	str	r2, [sp, #28]
 800ab6e:	e014      	b.n	800ab9a <_vfiprintf_r+0x13a>
 800ab70:	eba0 0308 	sub.w	r3, r0, r8
 800ab74:	fa09 f303 	lsl.w	r3, r9, r3
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	46a2      	mov	sl, r4
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	e7d2      	b.n	800ab26 <_vfiprintf_r+0xc6>
 800ab80:	9b03      	ldr	r3, [sp, #12]
 800ab82:	1d19      	adds	r1, r3, #4
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	9103      	str	r1, [sp, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	bfbb      	ittet	lt
 800ab8c:	425b      	neglt	r3, r3
 800ab8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ab92:	9307      	strge	r3, [sp, #28]
 800ab94:	9307      	strlt	r3, [sp, #28]
 800ab96:	bfb8      	it	lt
 800ab98:	9204      	strlt	r2, [sp, #16]
 800ab9a:	7823      	ldrb	r3, [r4, #0]
 800ab9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ab9e:	d10c      	bne.n	800abba <_vfiprintf_r+0x15a>
 800aba0:	7863      	ldrb	r3, [r4, #1]
 800aba2:	2b2a      	cmp	r3, #42	; 0x2a
 800aba4:	d134      	bne.n	800ac10 <_vfiprintf_r+0x1b0>
 800aba6:	9b03      	ldr	r3, [sp, #12]
 800aba8:	3402      	adds	r4, #2
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	9203      	str	r2, [sp, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	bfb8      	it	lt
 800abb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800abb8:	9305      	str	r3, [sp, #20]
 800abba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac84 <_vfiprintf_r+0x224>
 800abbe:	2203      	movs	r2, #3
 800abc0:	4650      	mov	r0, sl
 800abc2:	7821      	ldrb	r1, [r4, #0]
 800abc4:	f7fe f8d4 	bl	8008d70 <memchr>
 800abc8:	b138      	cbz	r0, 800abda <_vfiprintf_r+0x17a>
 800abca:	2240      	movs	r2, #64	; 0x40
 800abcc:	9b04      	ldr	r3, [sp, #16]
 800abce:	eba0 000a 	sub.w	r0, r0, sl
 800abd2:	4082      	lsls	r2, r0
 800abd4:	4313      	orrs	r3, r2
 800abd6:	3401      	adds	r4, #1
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abde:	2206      	movs	r2, #6
 800abe0:	4829      	ldr	r0, [pc, #164]	; (800ac88 <_vfiprintf_r+0x228>)
 800abe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abe6:	f7fe f8c3 	bl	8008d70 <memchr>
 800abea:	2800      	cmp	r0, #0
 800abec:	d03f      	beq.n	800ac6e <_vfiprintf_r+0x20e>
 800abee:	4b27      	ldr	r3, [pc, #156]	; (800ac8c <_vfiprintf_r+0x22c>)
 800abf0:	bb1b      	cbnz	r3, 800ac3a <_vfiprintf_r+0x1da>
 800abf2:	9b03      	ldr	r3, [sp, #12]
 800abf4:	3307      	adds	r3, #7
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	3308      	adds	r3, #8
 800abfc:	9303      	str	r3, [sp, #12]
 800abfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac00:	443b      	add	r3, r7
 800ac02:	9309      	str	r3, [sp, #36]	; 0x24
 800ac04:	e768      	b.n	800aad8 <_vfiprintf_r+0x78>
 800ac06:	460c      	mov	r4, r1
 800ac08:	2001      	movs	r0, #1
 800ac0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac0e:	e7a6      	b.n	800ab5e <_vfiprintf_r+0xfe>
 800ac10:	2300      	movs	r3, #0
 800ac12:	f04f 0c0a 	mov.w	ip, #10
 800ac16:	4619      	mov	r1, r3
 800ac18:	3401      	adds	r4, #1
 800ac1a:	9305      	str	r3, [sp, #20]
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac22:	3a30      	subs	r2, #48	; 0x30
 800ac24:	2a09      	cmp	r2, #9
 800ac26:	d903      	bls.n	800ac30 <_vfiprintf_r+0x1d0>
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d0c6      	beq.n	800abba <_vfiprintf_r+0x15a>
 800ac2c:	9105      	str	r1, [sp, #20]
 800ac2e:	e7c4      	b.n	800abba <_vfiprintf_r+0x15a>
 800ac30:	4604      	mov	r4, r0
 800ac32:	2301      	movs	r3, #1
 800ac34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac38:	e7f0      	b.n	800ac1c <_vfiprintf_r+0x1bc>
 800ac3a:	ab03      	add	r3, sp, #12
 800ac3c:	9300      	str	r3, [sp, #0]
 800ac3e:	462a      	mov	r2, r5
 800ac40:	4630      	mov	r0, r6
 800ac42:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <_vfiprintf_r+0x230>)
 800ac44:	a904      	add	r1, sp, #16
 800ac46:	f7fd fa3b 	bl	80080c0 <_printf_float>
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	1c78      	adds	r0, r7, #1
 800ac4e:	d1d6      	bne.n	800abfe <_vfiprintf_r+0x19e>
 800ac50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac52:	07d9      	lsls	r1, r3, #31
 800ac54:	d405      	bmi.n	800ac62 <_vfiprintf_r+0x202>
 800ac56:	89ab      	ldrh	r3, [r5, #12]
 800ac58:	059a      	lsls	r2, r3, #22
 800ac5a:	d402      	bmi.n	800ac62 <_vfiprintf_r+0x202>
 800ac5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac5e:	f7fe f886 	bl	8008d6e <__retarget_lock_release_recursive>
 800ac62:	89ab      	ldrh	r3, [r5, #12]
 800ac64:	065b      	lsls	r3, r3, #25
 800ac66:	f53f af1d 	bmi.w	800aaa4 <_vfiprintf_r+0x44>
 800ac6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac6c:	e71c      	b.n	800aaa8 <_vfiprintf_r+0x48>
 800ac6e:	ab03      	add	r3, sp, #12
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	462a      	mov	r2, r5
 800ac74:	4630      	mov	r0, r6
 800ac76:	4b06      	ldr	r3, [pc, #24]	; (800ac90 <_vfiprintf_r+0x230>)
 800ac78:	a904      	add	r1, sp, #16
 800ac7a:	f7fd fcc1 	bl	8008600 <_printf_i>
 800ac7e:	e7e4      	b.n	800ac4a <_vfiprintf_r+0x1ea>
 800ac80:	0800b63c 	.word	0x0800b63c
 800ac84:	0800b642 	.word	0x0800b642
 800ac88:	0800b646 	.word	0x0800b646
 800ac8c:	080080c1 	.word	0x080080c1
 800ac90:	0800aa3d 	.word	0x0800aa3d

0800ac94 <_raise_r>:
 800ac94:	291f      	cmp	r1, #31
 800ac96:	b538      	push	{r3, r4, r5, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	460d      	mov	r5, r1
 800ac9c:	d904      	bls.n	800aca8 <_raise_r+0x14>
 800ac9e:	2316      	movs	r3, #22
 800aca0:	6003      	str	r3, [r0, #0]
 800aca2:	f04f 30ff 	mov.w	r0, #4294967295
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800acaa:	b112      	cbz	r2, 800acb2 <_raise_r+0x1e>
 800acac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acb0:	b94b      	cbnz	r3, 800acc6 <_raise_r+0x32>
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 f830 	bl	800ad18 <_getpid_r>
 800acb8:	462a      	mov	r2, r5
 800acba:	4601      	mov	r1, r0
 800acbc:	4620      	mov	r0, r4
 800acbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acc2:	f000 b817 	b.w	800acf4 <_kill_r>
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d00a      	beq.n	800ace0 <_raise_r+0x4c>
 800acca:	1c59      	adds	r1, r3, #1
 800accc:	d103      	bne.n	800acd6 <_raise_r+0x42>
 800acce:	2316      	movs	r3, #22
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	2001      	movs	r0, #1
 800acd4:	e7e7      	b.n	800aca6 <_raise_r+0x12>
 800acd6:	2400      	movs	r4, #0
 800acd8:	4628      	mov	r0, r5
 800acda:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800acde:	4798      	blx	r3
 800ace0:	2000      	movs	r0, #0
 800ace2:	e7e0      	b.n	800aca6 <_raise_r+0x12>

0800ace4 <raise>:
 800ace4:	4b02      	ldr	r3, [pc, #8]	; (800acf0 <raise+0xc>)
 800ace6:	4601      	mov	r1, r0
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	f7ff bfd3 	b.w	800ac94 <_raise_r>
 800acee:	bf00      	nop
 800acf0:	20000064 	.word	0x20000064

0800acf4 <_kill_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	2300      	movs	r3, #0
 800acf8:	4d06      	ldr	r5, [pc, #24]	; (800ad14 <_kill_r+0x20>)
 800acfa:	4604      	mov	r4, r0
 800acfc:	4608      	mov	r0, r1
 800acfe:	4611      	mov	r1, r2
 800ad00:	602b      	str	r3, [r5, #0]
 800ad02:	f7f8 f824 	bl	8002d4e <_kill>
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	d102      	bne.n	800ad10 <_kill_r+0x1c>
 800ad0a:	682b      	ldr	r3, [r5, #0]
 800ad0c:	b103      	cbz	r3, 800ad10 <_kill_r+0x1c>
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	bd38      	pop	{r3, r4, r5, pc}
 800ad12:	bf00      	nop
 800ad14:	20000830 	.word	0x20000830

0800ad18 <_getpid_r>:
 800ad18:	f7f8 b812 	b.w	8002d40 <_getpid>

0800ad1c <atan2>:
 800ad1c:	f000 b800 	b.w	800ad20 <__ieee754_atan2>

0800ad20 <__ieee754_atan2>:
 800ad20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad24:	4617      	mov	r7, r2
 800ad26:	4692      	mov	sl, r2
 800ad28:	4699      	mov	r9, r3
 800ad2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ad2e:	427b      	negs	r3, r7
 800ad30:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800aeb0 <__ieee754_atan2+0x190>
 800ad34:	433b      	orrs	r3, r7
 800ad36:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ad3a:	4543      	cmp	r3, r8
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	460d      	mov	r5, r1
 800ad40:	d809      	bhi.n	800ad56 <__ieee754_atan2+0x36>
 800ad42:	4246      	negs	r6, r0
 800ad44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad48:	4306      	orrs	r6, r0
 800ad4a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800ad4e:	4546      	cmp	r6, r8
 800ad50:	468e      	mov	lr, r1
 800ad52:	4683      	mov	fp, r0
 800ad54:	d908      	bls.n	800ad68 <__ieee754_atan2+0x48>
 800ad56:	4652      	mov	r2, sl
 800ad58:	464b      	mov	r3, r9
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7f5 fa0f 	bl	8000180 <__adddf3>
 800ad62:	4604      	mov	r4, r0
 800ad64:	460d      	mov	r5, r1
 800ad66:	e019      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800ad68:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800ad6c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800ad70:	433e      	orrs	r6, r7
 800ad72:	d103      	bne.n	800ad7c <__ieee754_atan2+0x5c>
 800ad74:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad78:	f000 b8a2 	b.w	800aec0 <atan>
 800ad7c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800ad80:	f006 0602 	and.w	r6, r6, #2
 800ad84:	ea53 0b0b 	orrs.w	fp, r3, fp
 800ad88:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800ad8c:	d10a      	bne.n	800ada4 <__ieee754_atan2+0x84>
 800ad8e:	2e02      	cmp	r6, #2
 800ad90:	d067      	beq.n	800ae62 <__ieee754_atan2+0x142>
 800ad92:	2e03      	cmp	r6, #3
 800ad94:	d102      	bne.n	800ad9c <__ieee754_atan2+0x7c>
 800ad96:	a53a      	add	r5, pc, #232	; (adr r5, 800ae80 <__ieee754_atan2+0x160>)
 800ad98:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	4629      	mov	r1, r5
 800ada0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ada4:	4317      	orrs	r7, r2
 800ada6:	d106      	bne.n	800adb6 <__ieee754_atan2+0x96>
 800ada8:	f1be 0f00 	cmp.w	lr, #0
 800adac:	da64      	bge.n	800ae78 <__ieee754_atan2+0x158>
 800adae:	a536      	add	r5, pc, #216	; (adr r5, 800ae88 <__ieee754_atan2+0x168>)
 800adb0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800adb4:	e7f2      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800adb6:	4542      	cmp	r2, r8
 800adb8:	d10f      	bne.n	800adda <__ieee754_atan2+0xba>
 800adba:	4293      	cmp	r3, r2
 800adbc:	f106 36ff 	add.w	r6, r6, #4294967295
 800adc0:	d107      	bne.n	800add2 <__ieee754_atan2+0xb2>
 800adc2:	2e02      	cmp	r6, #2
 800adc4:	d851      	bhi.n	800ae6a <__ieee754_atan2+0x14a>
 800adc6:	4b3b      	ldr	r3, [pc, #236]	; (800aeb4 <__ieee754_atan2+0x194>)
 800adc8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800adcc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800add0:	e7e4      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800add2:	2e02      	cmp	r6, #2
 800add4:	d84d      	bhi.n	800ae72 <__ieee754_atan2+0x152>
 800add6:	4b38      	ldr	r3, [pc, #224]	; (800aeb8 <__ieee754_atan2+0x198>)
 800add8:	e7f6      	b.n	800adc8 <__ieee754_atan2+0xa8>
 800adda:	4543      	cmp	r3, r8
 800addc:	d0e4      	beq.n	800ada8 <__ieee754_atan2+0x88>
 800adde:	1a9b      	subs	r3, r3, r2
 800ade0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ade4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ade8:	da21      	bge.n	800ae2e <__ieee754_atan2+0x10e>
 800adea:	f1b9 0f00 	cmp.w	r9, #0
 800adee:	da01      	bge.n	800adf4 <__ieee754_atan2+0xd4>
 800adf0:	323c      	adds	r2, #60	; 0x3c
 800adf2:	db20      	blt.n	800ae36 <__ieee754_atan2+0x116>
 800adf4:	4652      	mov	r2, sl
 800adf6:	464b      	mov	r3, r9
 800adf8:	4620      	mov	r0, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	f7f5 fca0 	bl	8000740 <__aeabi_ddiv>
 800ae00:	f000 f9e8 	bl	800b1d4 <fabs>
 800ae04:	f000 f85c 	bl	800aec0 <atan>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	460d      	mov	r5, r1
 800ae0c:	2e01      	cmp	r6, #1
 800ae0e:	d015      	beq.n	800ae3c <__ieee754_atan2+0x11c>
 800ae10:	2e02      	cmp	r6, #2
 800ae12:	d017      	beq.n	800ae44 <__ieee754_atan2+0x124>
 800ae14:	2e00      	cmp	r6, #0
 800ae16:	d0c1      	beq.n	800ad9c <__ieee754_atan2+0x7c>
 800ae18:	a31d      	add	r3, pc, #116	; (adr r3, 800ae90 <__ieee754_atan2+0x170>)
 800ae1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1e:	4620      	mov	r0, r4
 800ae20:	4629      	mov	r1, r5
 800ae22:	f7f5 f9ab 	bl	800017c <__aeabi_dsub>
 800ae26:	a31c      	add	r3, pc, #112	; (adr r3, 800ae98 <__ieee754_atan2+0x178>)
 800ae28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2c:	e016      	b.n	800ae5c <__ieee754_atan2+0x13c>
 800ae2e:	a51c      	add	r5, pc, #112	; (adr r5, 800aea0 <__ieee754_atan2+0x180>)
 800ae30:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae34:	e7ea      	b.n	800ae0c <__ieee754_atan2+0xec>
 800ae36:	2400      	movs	r4, #0
 800ae38:	2500      	movs	r5, #0
 800ae3a:	e7e7      	b.n	800ae0c <__ieee754_atan2+0xec>
 800ae3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ae40:	461d      	mov	r5, r3
 800ae42:	e7ab      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800ae44:	a312      	add	r3, pc, #72	; (adr r3, 800ae90 <__ieee754_atan2+0x170>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7f5 f995 	bl	800017c <__aeabi_dsub>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	a110      	add	r1, pc, #64	; (adr r1, 800ae98 <__ieee754_atan2+0x178>)
 800ae58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae5c:	f7f5 f98e 	bl	800017c <__aeabi_dsub>
 800ae60:	e77f      	b.n	800ad62 <__ieee754_atan2+0x42>
 800ae62:	a50d      	add	r5, pc, #52	; (adr r5, 800ae98 <__ieee754_atan2+0x178>)
 800ae64:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae68:	e798      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800ae6a:	a50f      	add	r5, pc, #60	; (adr r5, 800aea8 <__ieee754_atan2+0x188>)
 800ae6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae70:	e794      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800ae72:	2400      	movs	r4, #0
 800ae74:	2500      	movs	r5, #0
 800ae76:	e791      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800ae78:	a509      	add	r5, pc, #36	; (adr r5, 800aea0 <__ieee754_atan2+0x180>)
 800ae7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ae7e:	e78d      	b.n	800ad9c <__ieee754_atan2+0x7c>
 800ae80:	54442d18 	.word	0x54442d18
 800ae84:	c00921fb 	.word	0xc00921fb
 800ae88:	54442d18 	.word	0x54442d18
 800ae8c:	bff921fb 	.word	0xbff921fb
 800ae90:	33145c07 	.word	0x33145c07
 800ae94:	3ca1a626 	.word	0x3ca1a626
 800ae98:	54442d18 	.word	0x54442d18
 800ae9c:	400921fb 	.word	0x400921fb
 800aea0:	54442d18 	.word	0x54442d18
 800aea4:	3ff921fb 	.word	0x3ff921fb
 800aea8:	54442d18 	.word	0x54442d18
 800aeac:	3fe921fb 	.word	0x3fe921fb
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	0800b698 	.word	0x0800b698
 800aeb8:	0800b6b0 	.word	0x0800b6b0
 800aebc:	00000000 	.word	0x00000000

0800aec0 <atan>:
 800aec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec4:	4bb6      	ldr	r3, [pc, #728]	; (800b1a0 <atan+0x2e0>)
 800aec6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800aeca:	429e      	cmp	r6, r3
 800aecc:	4604      	mov	r4, r0
 800aece:	460d      	mov	r5, r1
 800aed0:	468b      	mov	fp, r1
 800aed2:	dd17      	ble.n	800af04 <atan+0x44>
 800aed4:	4bb3      	ldr	r3, [pc, #716]	; (800b1a4 <atan+0x2e4>)
 800aed6:	429e      	cmp	r6, r3
 800aed8:	dc01      	bgt.n	800aede <atan+0x1e>
 800aeda:	d109      	bne.n	800aef0 <atan+0x30>
 800aedc:	b140      	cbz	r0, 800aef0 <atan+0x30>
 800aede:	4622      	mov	r2, r4
 800aee0:	462b      	mov	r3, r5
 800aee2:	4620      	mov	r0, r4
 800aee4:	4629      	mov	r1, r5
 800aee6:	f7f5 f94b 	bl	8000180 <__adddf3>
 800aeea:	4604      	mov	r4, r0
 800aeec:	460d      	mov	r5, r1
 800aeee:	e005      	b.n	800aefc <atan+0x3c>
 800aef0:	f1bb 0f00 	cmp.w	fp, #0
 800aef4:	4cac      	ldr	r4, [pc, #688]	; (800b1a8 <atan+0x2e8>)
 800aef6:	f300 8121 	bgt.w	800b13c <atan+0x27c>
 800aefa:	4dac      	ldr	r5, [pc, #688]	; (800b1ac <atan+0x2ec>)
 800aefc:	4620      	mov	r0, r4
 800aefe:	4629      	mov	r1, r5
 800af00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af04:	4baa      	ldr	r3, [pc, #680]	; (800b1b0 <atan+0x2f0>)
 800af06:	429e      	cmp	r6, r3
 800af08:	dc11      	bgt.n	800af2e <atan+0x6e>
 800af0a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800af0e:	429e      	cmp	r6, r3
 800af10:	dc0a      	bgt.n	800af28 <atan+0x68>
 800af12:	a38b      	add	r3, pc, #556	; (adr r3, 800b140 <atan+0x280>)
 800af14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af18:	f7f5 f932 	bl	8000180 <__adddf3>
 800af1c:	2200      	movs	r2, #0
 800af1e:	4ba5      	ldr	r3, [pc, #660]	; (800b1b4 <atan+0x2f4>)
 800af20:	f7f5 fd74 	bl	8000a0c <__aeabi_dcmpgt>
 800af24:	2800      	cmp	r0, #0
 800af26:	d1e9      	bne.n	800aefc <atan+0x3c>
 800af28:	f04f 3aff 	mov.w	sl, #4294967295
 800af2c:	e027      	b.n	800af7e <atan+0xbe>
 800af2e:	f000 f951 	bl	800b1d4 <fabs>
 800af32:	4ba1      	ldr	r3, [pc, #644]	; (800b1b8 <atan+0x2f8>)
 800af34:	4604      	mov	r4, r0
 800af36:	429e      	cmp	r6, r3
 800af38:	460d      	mov	r5, r1
 800af3a:	f300 80b8 	bgt.w	800b0ae <atan+0x1ee>
 800af3e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800af42:	429e      	cmp	r6, r3
 800af44:	f300 809c 	bgt.w	800b080 <atan+0x1c0>
 800af48:	4602      	mov	r2, r0
 800af4a:	460b      	mov	r3, r1
 800af4c:	f7f5 f918 	bl	8000180 <__adddf3>
 800af50:	2200      	movs	r2, #0
 800af52:	4b98      	ldr	r3, [pc, #608]	; (800b1b4 <atan+0x2f4>)
 800af54:	f7f5 f912 	bl	800017c <__aeabi_dsub>
 800af58:	2200      	movs	r2, #0
 800af5a:	4606      	mov	r6, r0
 800af5c:	460f      	mov	r7, r1
 800af5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 f90b 	bl	8000180 <__adddf3>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	f7f5 fbe5 	bl	8000740 <__aeabi_ddiv>
 800af76:	f04f 0a00 	mov.w	sl, #0
 800af7a:	4604      	mov	r4, r0
 800af7c:	460d      	mov	r5, r1
 800af7e:	4622      	mov	r2, r4
 800af80:	462b      	mov	r3, r5
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 fab1 	bl	80004ec <__aeabi_dmul>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4680      	mov	r8, r0
 800af90:	4689      	mov	r9, r1
 800af92:	f7f5 faab 	bl	80004ec <__aeabi_dmul>
 800af96:	a36c      	add	r3, pc, #432	; (adr r3, 800b148 <atan+0x288>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	4606      	mov	r6, r0
 800af9e:	460f      	mov	r7, r1
 800afa0:	f7f5 faa4 	bl	80004ec <__aeabi_dmul>
 800afa4:	a36a      	add	r3, pc, #424	; (adr r3, 800b150 <atan+0x290>)
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	f7f5 f8e9 	bl	8000180 <__adddf3>
 800afae:	4632      	mov	r2, r6
 800afb0:	463b      	mov	r3, r7
 800afb2:	f7f5 fa9b 	bl	80004ec <__aeabi_dmul>
 800afb6:	a368      	add	r3, pc, #416	; (adr r3, 800b158 <atan+0x298>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f7f5 f8e0 	bl	8000180 <__adddf3>
 800afc0:	4632      	mov	r2, r6
 800afc2:	463b      	mov	r3, r7
 800afc4:	f7f5 fa92 	bl	80004ec <__aeabi_dmul>
 800afc8:	a365      	add	r3, pc, #404	; (adr r3, 800b160 <atan+0x2a0>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 f8d7 	bl	8000180 <__adddf3>
 800afd2:	4632      	mov	r2, r6
 800afd4:	463b      	mov	r3, r7
 800afd6:	f7f5 fa89 	bl	80004ec <__aeabi_dmul>
 800afda:	a363      	add	r3, pc, #396	; (adr r3, 800b168 <atan+0x2a8>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f7f5 f8ce 	bl	8000180 <__adddf3>
 800afe4:	4632      	mov	r2, r6
 800afe6:	463b      	mov	r3, r7
 800afe8:	f7f5 fa80 	bl	80004ec <__aeabi_dmul>
 800afec:	a360      	add	r3, pc, #384	; (adr r3, 800b170 <atan+0x2b0>)
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	f7f5 f8c5 	bl	8000180 <__adddf3>
 800aff6:	4642      	mov	r2, r8
 800aff8:	464b      	mov	r3, r9
 800affa:	f7f5 fa77 	bl	80004ec <__aeabi_dmul>
 800affe:	a35e      	add	r3, pc, #376	; (adr r3, 800b178 <atan+0x2b8>)
 800b000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b004:	4680      	mov	r8, r0
 800b006:	4689      	mov	r9, r1
 800b008:	4630      	mov	r0, r6
 800b00a:	4639      	mov	r1, r7
 800b00c:	f7f5 fa6e 	bl	80004ec <__aeabi_dmul>
 800b010:	a35b      	add	r3, pc, #364	; (adr r3, 800b180 <atan+0x2c0>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	f7f5 f8b1 	bl	800017c <__aeabi_dsub>
 800b01a:	4632      	mov	r2, r6
 800b01c:	463b      	mov	r3, r7
 800b01e:	f7f5 fa65 	bl	80004ec <__aeabi_dmul>
 800b022:	a359      	add	r3, pc, #356	; (adr r3, 800b188 <atan+0x2c8>)
 800b024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b028:	f7f5 f8a8 	bl	800017c <__aeabi_dsub>
 800b02c:	4632      	mov	r2, r6
 800b02e:	463b      	mov	r3, r7
 800b030:	f7f5 fa5c 	bl	80004ec <__aeabi_dmul>
 800b034:	a356      	add	r3, pc, #344	; (adr r3, 800b190 <atan+0x2d0>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 f89f 	bl	800017c <__aeabi_dsub>
 800b03e:	4632      	mov	r2, r6
 800b040:	463b      	mov	r3, r7
 800b042:	f7f5 fa53 	bl	80004ec <__aeabi_dmul>
 800b046:	a354      	add	r3, pc, #336	; (adr r3, 800b198 <atan+0x2d8>)
 800b048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04c:	f7f5 f896 	bl	800017c <__aeabi_dsub>
 800b050:	4632      	mov	r2, r6
 800b052:	463b      	mov	r3, r7
 800b054:	f7f5 fa4a 	bl	80004ec <__aeabi_dmul>
 800b058:	4602      	mov	r2, r0
 800b05a:	460b      	mov	r3, r1
 800b05c:	4640      	mov	r0, r8
 800b05e:	4649      	mov	r1, r9
 800b060:	f7f5 f88e 	bl	8000180 <__adddf3>
 800b064:	4622      	mov	r2, r4
 800b066:	462b      	mov	r3, r5
 800b068:	f7f5 fa40 	bl	80004ec <__aeabi_dmul>
 800b06c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	d144      	bne.n	800b100 <atan+0x240>
 800b076:	4620      	mov	r0, r4
 800b078:	4629      	mov	r1, r5
 800b07a:	f7f5 f87f 	bl	800017c <__aeabi_dsub>
 800b07e:	e734      	b.n	800aeea <atan+0x2a>
 800b080:	2200      	movs	r2, #0
 800b082:	4b4c      	ldr	r3, [pc, #304]	; (800b1b4 <atan+0x2f4>)
 800b084:	f7f5 f87a 	bl	800017c <__aeabi_dsub>
 800b088:	2200      	movs	r2, #0
 800b08a:	4606      	mov	r6, r0
 800b08c:	460f      	mov	r7, r1
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	4b48      	ldr	r3, [pc, #288]	; (800b1b4 <atan+0x2f4>)
 800b094:	f7f5 f874 	bl	8000180 <__adddf3>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4630      	mov	r0, r6
 800b09e:	4639      	mov	r1, r7
 800b0a0:	f7f5 fb4e 	bl	8000740 <__aeabi_ddiv>
 800b0a4:	f04f 0a01 	mov.w	sl, #1
 800b0a8:	4604      	mov	r4, r0
 800b0aa:	460d      	mov	r5, r1
 800b0ac:	e767      	b.n	800af7e <atan+0xbe>
 800b0ae:	4b43      	ldr	r3, [pc, #268]	; (800b1bc <atan+0x2fc>)
 800b0b0:	429e      	cmp	r6, r3
 800b0b2:	da1a      	bge.n	800b0ea <atan+0x22a>
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	4b42      	ldr	r3, [pc, #264]	; (800b1c0 <atan+0x300>)
 800b0b8:	f7f5 f860 	bl	800017c <__aeabi_dsub>
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4606      	mov	r6, r0
 800b0c0:	460f      	mov	r7, r1
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	4b3e      	ldr	r3, [pc, #248]	; (800b1c0 <atan+0x300>)
 800b0c8:	f7f5 fa10 	bl	80004ec <__aeabi_dmul>
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	4b39      	ldr	r3, [pc, #228]	; (800b1b4 <atan+0x2f4>)
 800b0d0:	f7f5 f856 	bl	8000180 <__adddf3>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 fb30 	bl	8000740 <__aeabi_ddiv>
 800b0e0:	f04f 0a02 	mov.w	sl, #2
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	e749      	b.n	800af7e <atan+0xbe>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	4934      	ldr	r1, [pc, #208]	; (800b1c4 <atan+0x304>)
 800b0f2:	f7f5 fb25 	bl	8000740 <__aeabi_ddiv>
 800b0f6:	f04f 0a03 	mov.w	sl, #3
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	460d      	mov	r5, r1
 800b0fe:	e73e      	b.n	800af7e <atan+0xbe>
 800b100:	4b31      	ldr	r3, [pc, #196]	; (800b1c8 <atan+0x308>)
 800b102:	4e32      	ldr	r6, [pc, #200]	; (800b1cc <atan+0x30c>)
 800b104:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	f7f5 f836 	bl	800017c <__aeabi_dsub>
 800b110:	4622      	mov	r2, r4
 800b112:	462b      	mov	r3, r5
 800b114:	f7f5 f832 	bl	800017c <__aeabi_dsub>
 800b118:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b11c:	4602      	mov	r2, r0
 800b11e:	460b      	mov	r3, r1
 800b120:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b124:	f7f5 f82a 	bl	800017c <__aeabi_dsub>
 800b128:	f1bb 0f00 	cmp.w	fp, #0
 800b12c:	4604      	mov	r4, r0
 800b12e:	460d      	mov	r5, r1
 800b130:	f6bf aee4 	bge.w	800aefc <atan+0x3c>
 800b134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b138:	461d      	mov	r5, r3
 800b13a:	e6df      	b.n	800aefc <atan+0x3c>
 800b13c:	4d24      	ldr	r5, [pc, #144]	; (800b1d0 <atan+0x310>)
 800b13e:	e6dd      	b.n	800aefc <atan+0x3c>
 800b140:	8800759c 	.word	0x8800759c
 800b144:	7e37e43c 	.word	0x7e37e43c
 800b148:	e322da11 	.word	0xe322da11
 800b14c:	3f90ad3a 	.word	0x3f90ad3a
 800b150:	24760deb 	.word	0x24760deb
 800b154:	3fa97b4b 	.word	0x3fa97b4b
 800b158:	a0d03d51 	.word	0xa0d03d51
 800b15c:	3fb10d66 	.word	0x3fb10d66
 800b160:	c54c206e 	.word	0xc54c206e
 800b164:	3fb745cd 	.word	0x3fb745cd
 800b168:	920083ff 	.word	0x920083ff
 800b16c:	3fc24924 	.word	0x3fc24924
 800b170:	5555550d 	.word	0x5555550d
 800b174:	3fd55555 	.word	0x3fd55555
 800b178:	2c6a6c2f 	.word	0x2c6a6c2f
 800b17c:	bfa2b444 	.word	0xbfa2b444
 800b180:	52defd9a 	.word	0x52defd9a
 800b184:	3fadde2d 	.word	0x3fadde2d
 800b188:	af749a6d 	.word	0xaf749a6d
 800b18c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b190:	fe231671 	.word	0xfe231671
 800b194:	3fbc71c6 	.word	0x3fbc71c6
 800b198:	9998ebc4 	.word	0x9998ebc4
 800b19c:	3fc99999 	.word	0x3fc99999
 800b1a0:	440fffff 	.word	0x440fffff
 800b1a4:	7ff00000 	.word	0x7ff00000
 800b1a8:	54442d18 	.word	0x54442d18
 800b1ac:	bff921fb 	.word	0xbff921fb
 800b1b0:	3fdbffff 	.word	0x3fdbffff
 800b1b4:	3ff00000 	.word	0x3ff00000
 800b1b8:	3ff2ffff 	.word	0x3ff2ffff
 800b1bc:	40038000 	.word	0x40038000
 800b1c0:	3ff80000 	.word	0x3ff80000
 800b1c4:	bff00000 	.word	0xbff00000
 800b1c8:	0800b6e8 	.word	0x0800b6e8
 800b1cc:	0800b6c8 	.word	0x0800b6c8
 800b1d0:	3ff921fb 	.word	0x3ff921fb

0800b1d4 <fabs>:
 800b1d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b1d8:	4619      	mov	r1, r3
 800b1da:	4770      	bx	lr

0800b1dc <_init>:
 800b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1de:	bf00      	nop
 800b1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e2:	bc08      	pop	{r3}
 800b1e4:	469e      	mov	lr, r3
 800b1e6:	4770      	bx	lr

0800b1e8 <_fini>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	bf00      	nop
 800b1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ee:	bc08      	pop	{r3}
 800b1f0:	469e      	mov	lr, r3
 800b1f2:	4770      	bx	lr
