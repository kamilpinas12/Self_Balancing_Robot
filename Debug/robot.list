
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08008d08  08008d08  00018d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009160  08009160  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009160  08009160  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009160  08009160  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009164  08009164  00019164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  200001d4  0800933c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800933c  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010bf2  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028dc  00000000  00000000  00030e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00033710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc0  00000000  00000000  00034740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b40  00000000  00000000  00035400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001450a  00000000  00000000  0004ef40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f49f  00000000  00000000  0006344a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005668  00000000  00000000  000f28ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000f7f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008cec 	.word	0x08008cec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008cec 	.word	0x08008cec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001170:	4b3a      	ldr	r3, [pc, #232]	; (800125c <MX_GPIO_Init+0x100>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a39      	ldr	r2, [pc, #228]	; (800125c <MX_GPIO_Init+0x100>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b37      	ldr	r3, [pc, #220]	; (800125c <MX_GPIO_Init+0x100>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <MX_GPIO_Init+0x100>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a33      	ldr	r2, [pc, #204]	; (800125c <MX_GPIO_Init+0x100>)
 800118e:	f043 0320 	orr.w	r3, r3, #32
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <MX_GPIO_Init+0x100>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b2e      	ldr	r3, [pc, #184]	; (800125c <MX_GPIO_Init+0x100>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a2d      	ldr	r2, [pc, #180]	; (800125c <MX_GPIO_Init+0x100>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b2b      	ldr	r3, [pc, #172]	; (800125c <MX_GPIO_Init+0x100>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_GPIO_Init+0x100>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <MX_GPIO_Init+0x100>)
 80011be:	f043 0308 	orr.w	r3, r3, #8
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <MX_GPIO_Init+0x100>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <MX_GPIO_Init+0x104>)
 80011d8:	f002 f81a 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	2108      	movs	r1, #8
 80011e0:	4820      	ldr	r0, [pc, #128]	; (8001264 <MX_GPIO_Init+0x108>)
 80011e2:	f002 f815 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	481e      	ldr	r0, [pc, #120]	; (8001264 <MX_GPIO_Init+0x108>)
 80011ec:	f002 f810 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f6:	481c      	ldr	r0, [pc, #112]	; (8001268 <MX_GPIO_Init+0x10c>)
 80011f8:	f002 f80a 	bl	8003210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2302      	movs	r3, #2
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0310 	add.w	r3, r7, #16
 8001212:	4619      	mov	r1, r3
 8001214:	4812      	ldr	r0, [pc, #72]	; (8001260 <MX_GPIO_Init+0x104>)
 8001216:	f001 fe77 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 800121a:	2388      	movs	r3, #136	; 0x88
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <MX_GPIO_Init+0x108>)
 8001232:	f001 fe69 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 8001236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4806      	ldr	r0, [pc, #24]	; (8001268 <MX_GPIO_Init+0x10c>)
 8001250:	f001 fe5a 	bl	8002f08 <HAL_GPIO_Init>

}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	40011000 	.word	0x40011000
 8001264:	40010800 	.word	0x40010800
 8001268:	40010c00 	.word	0x40010c00

0800126c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_I2C1_Init+0x50>)
 8001272:	4a13      	ldr	r2, [pc, #76]	; (80012c0 <MX_I2C1_Init+0x54>)
 8001274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_I2C1_Init+0x50>)
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <MX_I2C1_Init+0x58>)
 800127a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001282:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <MX_I2C1_Init+0x50>)
 800128a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800128e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <MX_I2C1_Init+0x50>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_I2C1_Init+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <MX_I2C1_Init+0x50>)
 80012aa:	f001 ffc9 	bl	8003240 <HAL_I2C_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b4:	f000 fb8b 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001f0 	.word	0x200001f0
 80012c0:	40005400 	.word	0x40005400
 80012c4:	000186a0 	.word	0x000186a0

080012c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <HAL_I2C_MspInit+0x70>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d123      	bne.n	8001330 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_I2C_MspInit+0x74>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a13      	ldr	r2, [pc, #76]	; (800133c <HAL_I2C_MspInit+0x74>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_I2C_MspInit+0x74>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001300:	23c0      	movs	r3, #192	; 0xc0
 8001302:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001304:	2312      	movs	r3, #18
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <HAL_I2C_MspInit+0x78>)
 8001314:	f001 fdf8 	bl	8002f08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_I2C_MspInit+0x74>)
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_I2C_MspInit+0x74>)
 800131e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001322:	61d3      	str	r3, [r2, #28]
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_I2C_MspInit+0x74>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40005400 	.word	0x40005400
 800133c:	40021000 	.word	0x40021000
 8001340:	40010c00 	.word	0x40010c00

08001344 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d109      	bne.n	8001366 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 8001352:	230d      	movs	r3, #13
 8001354:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 8001356:	f107 010f 	add.w	r1, r7, #15
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	2201      	movs	r2, #1
 8001360:	4807      	ldr	r0, [pc, #28]	; (8001380 <__io_putchar+0x3c>)
 8001362:	f004 fb8d 	bl	8005a80 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001366:	1d39      	adds	r1, r7, #4
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	2201      	movs	r2, #1
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <__io_putchar+0x3c>)
 8001370:	f004 fb86 	bl	8005a80 <HAL_UART_Transmit>
    return 1;
 8001374:	2301      	movs	r3, #1
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000338 	.word	0x20000338

08001384 <HAL_TIM_PeriodElapsedCallback>:
volatile stepper_typedef stepper1;
volatile stepper_typedef stepper2;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	if(htim == stepper1.htim){
 800138c:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	d103      	bne.n	800139e <HAL_TIM_PeriodElapsedCallback+0x1a>
		stepper_update(&stepper1);
 8001396:	4808      	ldr	r0, [pc, #32]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001398:	f001 f890 	bl	80024bc <stepper_update>
	}
	else if(htim == stepper2.htim){
		stepper_update(&stepper2);
	}
}
 800139c:	e007      	b.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == stepper2.htim){
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d102      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x2a>
		stepper_update(&stepper2);
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013aa:	f001 f887 	bl	80024bc <stepper_update>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000244 	.word	0x20000244
 80013bc:	20000274 	.word	0x20000274

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c4:	b0b2      	sub	sp, #200	; 0xc8
 80013c6:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80013c8:	f001 fc0a 	bl	8002be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013cc:	f000 faba 	bl	8001944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d0:	f7ff fec4 	bl	800115c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013d4:	f7ff ff4a 	bl	800126c <MX_I2C1_Init>
  MX_TIM2_Init();
 80013d8:	f001 f9ea 	bl	80027b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80013dc:	f001 fa5e 	bl	800289c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80013e0:	f001 fb62 	bl	8002aa8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // init stepper
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	9304      	str	r3, [sp, #16]
 80013ea:	f241 7370 	movw	r3, #6000	; 0x1770
 80013ee:	9303      	str	r3, [sp, #12]
 80013f0:	2308      	movs	r3, #8
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	4b8c      	ldr	r3, [pc, #560]	; (8001628 <main+0x268>)
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <main+0x268>)
 80013fe:	2200      	movs	r2, #0
 8001400:	498a      	ldr	r1, [pc, #552]	; (800162c <main+0x26c>)
 8001402:	488b      	ldr	r0, [pc, #556]	; (8001630 <main+0x270>)
 8001404:	f000 fef3 	bl	80021ee <stepper_init>
		  DIR1_GPIO_Port, DIR1_Pin, 6000, -1);
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001408:	2301      	movs	r3, #1
 800140a:	9304      	str	r3, [sp, #16]
 800140c:	f241 7370 	movw	r3, #6000	; 0x1770
 8001410:	9303      	str	r3, [sp, #12]
 8001412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	4b86      	ldr	r3, [pc, #536]	; (8001634 <main+0x274>)
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	4b81      	ldr	r3, [pc, #516]	; (8001628 <main+0x268>)
 8001422:	2200      	movs	r2, #0
 8001424:	4984      	ldr	r1, [pc, #528]	; (8001638 <main+0x278>)
 8001426:	4885      	ldr	r0, [pc, #532]	; (800163c <main+0x27c>)
 8001428:	f000 fee1 	bl	80021ee <stepper_init>
		  DIR2_GPIO_Port, DIR2_Pin, 6000, 1);


  // init mpu6050
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	22d0      	movs	r2, #208	; 0xd0
 8001432:	4983      	ldr	r1, [pc, #524]	; (8001640 <main+0x280>)
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fc25 	bl	8001c84 <mpu_init>

  if(mpu_who_am_i(&mpu) != HAL_OK)
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4618      	mov	r0, r3
 8001440:	f000 fc0c 	bl	8001c5c <mpu_who_am_i>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <main+0x9a>
  {
	  while(1)
	  {
		  printf("Error while connecting to mpu 6050\n");
 800144a:	487e      	ldr	r0, [pc, #504]	; (8001644 <main+0x284>)
 800144c:	f005 fa60 	bl	8006910 <puts>
		  HAL_Delay(1000);
 8001450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001454:	f001 fc26 	bl	8002ca4 <HAL_Delay>
		  printf("Error while connecting to mpu 6050\n");
 8001458:	e7f7      	b.n	800144a <main+0x8a>
	  }
  }

  set_gyro_scale(&mpu, range_250);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fb3b 	bl	8001adc <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fb83 	bl	8001b78 <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc44Hz_Gyro42Hz);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2103      	movs	r1, #3
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fbcb 	bl	8001c14 <mpu_low_pass_filter>

  HAL_Delay(1000);
 800147e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001482:	f001 fc0f 	bl	8002ca4 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // balancing parameters
  int delay = 3;
 8001486:	2303      	movs	r3, #3
 8001488:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  float kp = 500;
 800148c:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <main+0x288>)
 800148e:	67fb      	str	r3, [r7, #124]	; 0x7c
  float ki = 8;
 8001490:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001494:	67bb      	str	r3, [r7, #120]	; 0x78
  float kd = 1000;
 8001496:	4b6d      	ldr	r3, [pc, #436]	; (800164c <main+0x28c>)
 8001498:	677b      	str	r3, [r7, #116]	; 0x74

  float i = 0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


  float lst_error = 0;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


  double target_angle = 0;
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

  float k_target_angle = 0.01;
 80014b6:	4b66      	ldr	r3, [pc, #408]	; (8001650 <main+0x290>)
 80014b8:	673b      	str	r3, [r7, #112]	; 0x70

  float pos_hold_angle = 0;
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  float k_pos_hold = 0.00002;
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <main+0x294>)
 80014c4:	66fb      	str	r3, [r7, #108]	; 0x6c


  unsigned long lst_time = HAL_GetTick();
 80014c6:	f001 fbe3 	bl	8002c90 <HAL_GetTick>
 80014ca:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88


  mpu_gyro_calibration(&mpu);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fcca 	bl	8001e6c <mpu_gyro_calibration>


  while (1)
  {
	  HAL_Delay(delay);
 80014d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 fbe1 	bl	8002ca4 <HAL_Delay>
	  stepper_enable(&stepper1, 0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	4852      	ldr	r0, [pc, #328]	; (8001630 <main+0x270>)
 80014e6:	f000 febf 	bl	8002268 <stepper_enable>
	  stepper_enable(&stepper2, 0);
 80014ea:	2100      	movs	r1, #0
 80014ec:	4853      	ldr	r0, [pc, #332]	; (800163c <main+0x27c>)
 80014ee:	f000 febb 	bl	8002268 <stepper_enable>
	  stepper_set_speed(&stepper1, 0);
 80014f2:	f04f 0100 	mov.w	r1, #0
 80014f6:	484e      	ldr	r0, [pc, #312]	; (8001630 <main+0x270>)
 80014f8:	f000 fee2 	bl	80022c0 <stepper_set_speed>
	  stepper_set_speed(&stepper2, 0);
 80014fc:	f04f 0100 	mov.w	r1, #0
 8001500:	484e      	ldr	r0, [pc, #312]	; (800163c <main+0x27c>)
 8001502:	f000 fedd 	bl	80022c0 <stepper_set_speed>


	  mpu_calc_x_angle(&mpu);
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fda0 	bl	8002050 <mpu_calc_x_angle>



	  if(fabsf(mpu.x_angle) < 0.05){
 8001510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff86 	bl	8000428 <__aeabi_f2d>
 800151c:	a33c      	add	r3, pc, #240	; (adr r3, 8001610 <main+0x250>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff fa4b 	bl	80009bc <__aeabi_dcmplt>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 81f4 	beq.w	8001916 <main+0x556>

		  lst_time = HAL_GetTick();
 800152e:	f001 fbaf 	bl	8002c90 <HAL_GetTick>
 8001532:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		  lst_error = 0;
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		  i = 0;
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  target_angle = 0;
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

		  stepper_enable(&stepper1, 1);
 8001552:	2101      	movs	r1, #1
 8001554:	4836      	ldr	r0, [pc, #216]	; (8001630 <main+0x270>)
 8001556:	f000 fe87 	bl	8002268 <stepper_enable>
		  stepper_enable(&stepper2, 1);
 800155a:	2101      	movs	r1, #1
 800155c:	4837      	ldr	r0, [pc, #220]	; (800163c <main+0x27c>)
 800155e:	f000 fe83 	bl	8002268 <stepper_enable>
		  stepper1.step_counter = 0;
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <main+0x270>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
		  stepper2.step_counter = 0;
 8001568:	4b34      	ldr	r3, [pc, #208]	; (800163c <main+0x27c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]

		  // main loop
		  while(fabsf(mpu.x_angle) < 0.7){
 800156e:	e1b7      	b.n	80018e0 <main+0x520>
			  if((HAL_GetTick() - mpu.lst_time_x_angle) >= delay){
 8001570:	f001 fb8e 	bl	8002c90 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001578:	1ad2      	subs	r2, r2, r3
 800157a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800157e:	429a      	cmp	r2, r3
 8001580:	f0c0 81ae 	bcc.w	80018e0 <main+0x520>
				  mpu_calc_x_angle(&mpu);
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4618      	mov	r0, r3
 800158a:	f000 fd61 	bl	8002050 <mpu_calc_x_angle>
				  float time_delta = (mpu.lst_time_x_angle - lst_time);
 800158e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fb9c 	bl	8000cd4 <__aeabi_ui2f>
 800159c:	4603      	mov	r3, r0
 800159e:	66bb      	str	r3, [r7, #104]	; 0x68

				  if(abs(stepper1.step_counter) > 350){
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <main+0x270>)
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bfb8      	it	lt
 80015a8:	425b      	neglt	r3, r3
 80015aa:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80015ae:	dd57      	ble.n	8001660 <main+0x2a0>
					  pos_hold_angle = -stepper1.step_counter * k_pos_hold;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <main+0x270>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	425b      	negs	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb90 	bl	8000cdc <__aeabi_i2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80015c2:	f7ff fbdf 	bl	8000d84 <__aeabi_fmul>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

					  //pos_hold_angle saturation
					  if(pos_hold_angle > 0.09) pos_hold_angle = 0.09;
 80015cc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80015d0:	f7fe ff2a 	bl	8000428 <__aeabi_f2d>
 80015d4:	a310      	add	r3, pc, #64	; (adr r3, 8001618 <main+0x258>)
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	f7ff fa0d 	bl	80009f8 <__aeabi_dcmpgt>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d003      	beq.n	80015ec <main+0x22c>
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <main+0x298>)
 80015e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80015ea:	e03d      	b.n	8001668 <main+0x2a8>
					  else if(pos_hold_angle < -0.09) pos_hold_angle = -0.09;
 80015ec:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80015f0:	f7fe ff1a 	bl	8000428 <__aeabi_f2d>
 80015f4:	a30a      	add	r3, pc, #40	; (adr r3, 8001620 <main+0x260>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7ff f9df 	bl	80009bc <__aeabi_dcmplt>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d031      	beq.n	8001668 <main+0x2a8>
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <main+0x29c>)
 8001606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800160a:	e02d      	b.n	8001668 <main+0x2a8>
 800160c:	f3af 8000 	nop.w
 8001610:	9999999a 	.word	0x9999999a
 8001614:	3fa99999 	.word	0x3fa99999
 8001618:	70a3d70a 	.word	0x70a3d70a
 800161c:	3fb70a3d 	.word	0x3fb70a3d
 8001620:	70a3d70a 	.word	0x70a3d70a
 8001624:	bfb70a3d 	.word	0xbfb70a3d
 8001628:	40010800 	.word	0x40010800
 800162c:	200002a8 	.word	0x200002a8
 8001630:	20000244 	.word	0x20000244
 8001634:	40010c00 	.word	0x40010c00
 8001638:	200002f0 	.word	0x200002f0
 800163c:	20000274 	.word	0x20000274
 8001640:	200001f0 	.word	0x200001f0
 8001644:	08008d08 	.word	0x08008d08
 8001648:	43fa0000 	.word	0x43fa0000
 800164c:	447a0000 	.word	0x447a0000
 8001650:	3c23d70a 	.word	0x3c23d70a
 8001654:	37a7c5ac 	.word	0x37a7c5ac
 8001658:	3db851ec 	.word	0x3db851ec
 800165c:	bdb851ec 	.word	0xbdb851ec
				  }
				  else{
					  pos_hold_angle = 0;
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				  }


				  // calculate motor speed
				  double error = pos_hold_angle + target_angle - mpu.x_angle;
 8001668:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800166c:	f7fe fedc 	bl	8000428 <__aeabi_f2d>
 8001670:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001674:	f7fe fd7a 	bl	800016c <__adddf3>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4614      	mov	r4, r2
 800167e:	461d      	mov	r5, r3
 8001680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fed0 	bl	8000428 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fd6a 	bl	8000168 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
				  lst_time = mpu.lst_time_x_angle;
 800169c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800169e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88


				  float p = error * kp;
 80016a2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80016a4:	f7fe fec0 	bl	8000428 <__aeabi_f2d>
 80016a8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016ac:	f7fe ff14 	bl	80004d8 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f7ff fa06 	bl	8000ac8 <__aeabi_d2f>
 80016bc:	4603      	mov	r3, r0
 80016be:	65fb      	str	r3, [r7, #92]	; 0x5c
				  i += ((error + lst_error) * time_delta * ki) / 2;
 80016c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80016c4:	f7fe feb0 	bl	8000428 <__aeabi_f2d>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80016d0:	f7fe feaa 	bl	8000428 <__aeabi_f2d>
 80016d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80016d8:	f7fe fd48 	bl	800016c <__adddf3>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4690      	mov	r8, r2
 80016e2:	4699      	mov	r9, r3
 80016e4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80016e6:	f7fe fe9f 	bl	8000428 <__aeabi_f2d>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4640      	mov	r0, r8
 80016f0:	4649      	mov	r1, r9
 80016f2:	f7fe fef1 	bl	80004d8 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4690      	mov	r8, r2
 80016fc:	4699      	mov	r9, r3
 80016fe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001700:	f7fe fe92 	bl	8000428 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4640      	mov	r0, r8
 800170a:	4649      	mov	r1, r9
 800170c:	f7fe fee4 	bl	80004d8 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	f7ff f804 	bl	800072c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fd1e 	bl	800016c <__adddf3>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff f9c6 	bl	8000ac8 <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0
 800173e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

				  // integral saturation
				  if(i > 60) i = 60;
 8001742:	4979      	ldr	r1, [pc, #484]	; (8001928 <main+0x568>)
 8001744:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001748:	f7ff fcd8 	bl	80010fc <__aeabi_fcmpgt>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <main+0x398>
 8001752:	4b75      	ldr	r3, [pc, #468]	; (8001928 <main+0x568>)
 8001754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
				  if(i < -60) i = -60;
 8001758:	4974      	ldr	r1, [pc, #464]	; (800192c <main+0x56c>)
 800175a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800175e:	f7ff fcaf 	bl	80010c0 <__aeabi_fcmplt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <main+0x3ae>
 8001768:	4b70      	ldr	r3, [pc, #448]	; (800192c <main+0x56c>)
 800176a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

				  float d = kd * (error - lst_error)/time_delta;
 800176e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001770:	f7fe fe5a 	bl	8000428 <__aeabi_f2d>
 8001774:	4604      	mov	r4, r0
 8001776:	460d      	mov	r5, r1
 8001778:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800177c:	f7fe fe54 	bl	8000428 <__aeabi_f2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001788:	f7fe fcee 	bl	8000168 <__aeabi_dsub>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4620      	mov	r0, r4
 8001792:	4629      	mov	r1, r5
 8001794:	f7fe fea0 	bl	80004d8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4614      	mov	r4, r2
 800179e:	461d      	mov	r5, r3
 80017a0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80017a2:	f7fe fe41 	bl	8000428 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7fe ffbd 	bl	800072c <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f985 	bl	8000ac8 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	65bb      	str	r3, [r7, #88]	; 0x58

				  float pid = p + i + d;
 80017c2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80017c6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80017c8:	f7ff f9d4 	bl	8000b74 <__addsf3>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4619      	mov	r1, r3
 80017d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80017d2:	f7ff f9cf 	bl	8000b74 <__addsf3>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

				  //saturation
				  if(pid > 100) pid = 100;
 80017dc:	4954      	ldr	r1, [pc, #336]	; (8001930 <main+0x570>)
 80017de:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80017e2:	f7ff fc8b 	bl	80010fc <__aeabi_fcmpgt>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <main+0x432>
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <main+0x570>)
 80017ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				  if(pid < -100) pid = -100;
 80017f2:	4950      	ldr	r1, [pc, #320]	; (8001934 <main+0x574>)
 80017f4:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80017f8:	f7ff fc62 	bl	80010c0 <__aeabi_fcmplt>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <main+0x448>
 8001802:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <main+0x574>)
 8001804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				  stepper_set_speed(&stepper1, pid);
 8001808:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800180c:	484a      	ldr	r0, [pc, #296]	; (8001938 <main+0x578>)
 800180e:	f000 fd57 	bl	80022c0 <stepper_set_speed>
				  stepper_set_speed(&stepper2, pid);
 8001812:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001816:	4849      	ldr	r0, [pc, #292]	; (800193c <main+0x57c>)
 8001818:	f000 fd52 	bl	80022c0 <stepper_set_speed>

				  lst_error = error;
 800181c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001820:	f7ff f952 	bl	8000ac8 <__aeabi_d2f>
 8001824:	4603      	mov	r3, r0
 8001826:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				  if(fabsf(error) > 0.003){
 800182a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800182e:	f7ff f94b 	bl	8000ac8 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fdf5 	bl	8000428 <__aeabi_f2d>
 800183e:	a336      	add	r3, pc, #216	; (adr r3, 8001918 <main+0x558>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7ff f8d8 	bl	80009f8 <__aeabi_dcmpgt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d01b      	beq.n	8001886 <main+0x4c6>
					  double delta_target_angle = time_delta * k_target_angle * error;
 800184e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001850:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001852:	f7ff fa97 	bl	8000d84 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fde5 	bl	8000428 <__aeabi_f2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001866:	f7fe fe37 	bl	80004d8 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
					  target_angle += delta_target_angle;
 8001872:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001876:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800187a:	f7fe fc77 	bl	800016c <__adddf3>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
				  }


				  //printf("%d, %d\n", stepper1.step_counter, stepper2.step_counter);
				  printf("%.3f; %.3f; %.3f; %.3f, %.3f, %.4f\n", error, p, i, d, pid, pos_hold_angle);
 8001886:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001888:	f7fe fdce 	bl	8000428 <__aeabi_f2d>
 800188c:	4604      	mov	r4, r0
 800188e:	460d      	mov	r5, r1
 8001890:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001894:	f7fe fdc8 	bl	8000428 <__aeabi_f2d>
 8001898:	4680      	mov	r8, r0
 800189a:	4689      	mov	r9, r1
 800189c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800189e:	f7fe fdc3 	bl	8000428 <__aeabi_f2d>
 80018a2:	4682      	mov	sl, r0
 80018a4:	468b      	mov	fp, r1
 80018a6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80018aa:	f7fe fdbd 	bl	8000428 <__aeabi_f2d>
 80018ae:	e9c7 0100 	strd	r0, r1, [r7]
 80018b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80018b6:	f7fe fdb7 	bl	8000428 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018ca:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80018ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80018d2:	e9cd 4500 	strd	r4, r5, [sp]
 80018d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018da:	4819      	ldr	r0, [pc, #100]	; (8001940 <main+0x580>)
 80018dc:	f004 ffb2 	bl	8006844 <iprintf>
		  while(fabsf(mpu.x_angle) < 0.7){
 80018e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fd9e 	bl	8000428 <__aeabi_f2d>
 80018ec:	a30c      	add	r3, pc, #48	; (adr r3, 8001920 <main+0x560>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7ff f863 	bl	80009bc <__aeabi_dcmplt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f47f ae39 	bne.w	8001570 <main+0x1b0>
			  }


		  }
		  // for debuding
		  stepper_enable(&stepper1, 0);
 80018fe:	2100      	movs	r1, #0
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <main+0x578>)
 8001902:	f000 fcb1 	bl	8002268 <stepper_enable>
		  stepper_enable(&stepper2, 0);
 8001906:	2100      	movs	r1, #0
 8001908:	480c      	ldr	r0, [pc, #48]	; (800193c <main+0x57c>)
 800190a:	f000 fcad 	bl	8002268 <stepper_enable>
		  i = 0;
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  HAL_Delay(delay);
 8001916:	e5df      	b.n	80014d8 <main+0x118>
 8001918:	bc6a7efa 	.word	0xbc6a7efa
 800191c:	3f689374 	.word	0x3f689374
 8001920:	66666666 	.word	0x66666666
 8001924:	3fe66666 	.word	0x3fe66666
 8001928:	42700000 	.word	0x42700000
 800192c:	c2700000 	.word	0xc2700000
 8001930:	42c80000 	.word	0x42c80000
 8001934:	c2c80000 	.word	0xc2c80000
 8001938:	20000244 	.word	0x20000244
 800193c:	20000274 	.word	0x20000274
 8001940:	08008d2c 	.word	0x08008d2c

08001944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b090      	sub	sp, #64	; 0x40
 8001948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	2228      	movs	r2, #40	; 0x28
 8001950:	2100      	movs	r1, #0
 8001952:	4618      	mov	r0, r3
 8001954:	f005 f8bc 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800196a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800196e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001974:	2301      	movs	r3, #1
 8001976:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001978:	2302      	movs	r3, #2
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800197c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001980:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001982:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001988:	f107 0318 	add.w	r3, r7, #24
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fcbd 	bl	800430c <HAL_RCC_OscConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001998:	f000 f819 	bl	80019ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	230f      	movs	r3, #15
 800199e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a0:	2302      	movs	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2102      	movs	r1, #2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 ff2a 	bl	8004810 <HAL_RCC_ClockConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80019c2:	f000 f804 	bl	80019ce <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3740      	adds	r7, #64	; 0x40
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <Error_Handler+0x8>

080019d8 <mpu_write_reg>:




static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af04      	add	r7, sp, #16
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
 80019e4:	4613      	mov	r3, r2
 80019e6:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	791b      	ldrb	r3, [r3, #4]
 80019f0:	b299      	uxth	r1, r3
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	2301      	movs	r3, #1
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	1cbb      	adds	r3, r7, #2
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2301      	movs	r3, #1
 8001a06:	f001 fd5f 	bl	80034c8 <HAL_I2C_Mem_Write>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af04      	add	r7, sp, #16
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	b299      	uxth	r1, r3
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	9302      	str	r3, [sp, #8]
 8001a32:	2301      	movs	r3, #1
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	f107 030f 	add.w	r3, r7, #15
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f001 fe3d 	bl	80036bc <HAL_I2C_Mem_Read>
	return tmp;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001a58:	216b      	movs	r1, #107	; 0x6b
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff ffd9 	bl	8001a12 <mpu_read_reg>
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a6a:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	01db      	lsls	r3, r3, #7
 8001a70:	b25a      	sxtb	r2, r3
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	216b      	movs	r1, #107	; 0x6b
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff ffa8 	bl	80019d8 <mpu_write_reg>
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001a9c:	216b      	movs	r1, #107	; 0x6b
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffb7 	bl	8001a12 <mpu_read_reg>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aae:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 8001ab0:	78fb      	ldrb	r3, [r7, #3]
 8001ab2:	019b      	lsls	r3, r3, #6
 8001ab4:	b25b      	sxtb	r3, r3
 8001ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aba:	b25a      	sxtb	r2, r3
 8001abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	216b      	movs	r1, #107	; 0x6b
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff83 	bl	80019d8 <mpu_write_reg>
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 8001ae8:	211b      	movs	r1, #27
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff91 	bl	8001a12 <mpu_read_reg>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	f023 0318 	bic.w	r3, r3, #24
 8001afa:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	f003 0318 	and.w	r3, r3, #24
 8001b06:	b25a      	sxtb	r2, r3
 8001b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b25b      	sxtb	r3, r3
 8001b10:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	461a      	mov	r2, r3
 8001b16:	211b      	movs	r1, #27
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff5d 	bl	80019d8 <mpu_write_reg>

	switch (range){
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d81b      	bhi.n	8001b5c <set_gyro_scale+0x80>
 8001b24:	a201      	add	r2, pc, #4	; (adr r2, 8001b2c <set_gyro_scale+0x50>)
 8001b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2a:	bf00      	nop
 8001b2c:	08001b3d 	.word	0x08001b3d
 8001b30:	08001b45 	.word	0x08001b45
 8001b34:	08001b4d 	.word	0x08001b4d
 8001b38:	08001b55 	.word	0x08001b55
	case range_250:
		mpu->gyro_scale = 0.007633;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <set_gyro_scale+0x8c>)
 8001b40:	609a      	str	r2, [r3, #8]
		break;
 8001b42:	e00c      	b.n	8001b5e <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <set_gyro_scale+0x90>)
 8001b48:	609a      	str	r2, [r3, #8]
		break;
 8001b4a:	e008      	b.n	8001b5e <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <set_gyro_scale+0x94>)
 8001b50:	609a      	str	r2, [r3, #8]
		break;
 8001b52:	e004      	b.n	8001b5e <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <set_gyro_scale+0x98>)
 8001b58:	609a      	str	r2, [r3, #8]
		break;
 8001b5a:	e000      	b.n	8001b5e <set_gyro_scale+0x82>
	default:
		break;
 8001b5c:	bf00      	nop
	}
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	3bfa1e3f 	.word	0x3bfa1e3f
 8001b6c:	3c7a2270 	.word	0x3c7a2270
 8001b70:	3cf9bfdf 	.word	0x3cf9bfdf
 8001b74:	3d79c0ec 	.word	0x3d79c0ec

08001b78 <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8001b84:	211c      	movs	r1, #28
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ff43 	bl	8001a12 <mpu_read_reg>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	f023 0318 	bic.w	r3, r3, #24
 8001b96:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	f003 0318 	and.w	r3, r3, #24
 8001ba2:	b25a      	sxtb	r2, r3
 8001ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	211c      	movs	r1, #28
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff0f 	bl	80019d8 <mpu_write_reg>

	switch (range)
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d81b      	bhi.n	8001bf8 <set_accelerometer_scale+0x80>
 8001bc0:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <set_accelerometer_scale+0x50>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001be1 	.word	0x08001be1
 8001bd0:	08001be9 	.word	0x08001be9
 8001bd4:	08001bf1 	.word	0x08001bf1
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <set_accelerometer_scale+0x8c>)
 8001bdc:	60da      	str	r2, [r3, #12]
		break;
 8001bde:	e00c      	b.n	8001bfa <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <set_accelerometer_scale+0x90>)
 8001be4:	60da      	str	r2, [r3, #12]
		break;
 8001be6:	e008      	b.n	8001bfa <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a08      	ldr	r2, [pc, #32]	; (8001c0c <set_accelerometer_scale+0x94>)
 8001bec:	60da      	str	r2, [r3, #12]
		break;
 8001bee:	e004      	b.n	8001bfa <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <set_accelerometer_scale+0x98>)
 8001bf4:	60da      	str	r2, [r3, #12]
		break;
 8001bf6:	e000      	b.n	8001bfa <set_accelerometer_scale+0x82>
	default:
		break;
 8001bf8:	bf00      	nop
	}
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	387fda40 	.word	0x387fda40
 8001c08:	38ffda40 	.word	0x38ffda40
 8001c0c:	397fda40 	.word	0x397fda40
 8001c10:	39fff518 	.word	0x39fff518

08001c14 <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 8001c20:	211a      	movs	r1, #26
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fef5 	bl	8001a12 <mpu_read_reg>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	f023 0307 	bic.w	r3, r3, #7
 8001c32:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 8001c34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	211a      	movs	r1, #26
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff fec2 	bl	80019d8 <mpu_write_reg>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8001c64:	2175      	movs	r1, #117	; 0x75
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fed3 	bl	8001a12 <mpu_read_reg>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b68      	cmp	r3, #104	; 0x68
 8001c74:	d101      	bne.n	8001c7a <mpu_who_am_i+0x1e>
		return HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e000      	b.n	8001c7c <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
	}
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b096      	sub	sp, #88	; 0x58
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	71fb      	strb	r3, [r7, #7]
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	617b      	str	r3, [r7, #20]
	mpu.i2c_address = i2c_address;
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	763b      	strb	r3, [r7, #24]


	mpu_reset(&mpu, 1);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fed3 	bl	8001a4c <mpu_reset>

	HAL_Delay(1000);
 8001ca6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001caa:	f000 fffb 	bl	8002ca4 <HAL_Delay>

	mpu_sleep_mode(&mpu, 0);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff feeb 	bl	8001a90 <mpu_sleep_mode>

	set_gyro_scale(&mpu, range_250);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff0b 	bl	8001adc <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff53 	bl	8001b78 <set_accelerometer_scale>

	mpu.gx_bias = 0;
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
	mpu.gy_bias = 0;
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
	mpu.gz_bias = 0;
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	mpu.lst_time_x_angle = HAL_GetTick();
 8001ce4:	f000 ffd4 	bl	8002c90 <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	653b      	str	r3, [r7, #80]	; 0x50
	mpu.lst_time_y_angle = HAL_GetTick();
 8001cec:	f000 ffd0 	bl	8002c90 <HAL_GetTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	657b      	str	r3, [r7, #84]	; 0x54


	return mpu;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2244      	movs	r2, #68	; 0x44
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f004 ff72 	bl	8006be8 <memcpy>
}
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	3758      	adds	r7, #88	; 0x58
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <mpu_get_data>:



void mpu_get_data(mpu6050_typedef *mpu)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af04      	add	r7, sp, #16
 8001d12:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6818      	ldr	r0, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	791b      	ldrb	r3, [r3, #4]
 8001d1c:	b299      	uxth	r1, r3
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	230e      	movs	r3, #14
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	f107 0308 	add.w	r3, r7, #8
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	223b      	movs	r2, #59	; 0x3b
 8001d32:	f001 fcc3 	bl	80036bc <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 8001d36:	7a3b      	ldrb	r3, [r7, #8]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	7a7b      	ldrb	r3, [r7, #9]
 8001d3e:	b21b      	sxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ffc9 	bl	8000cdc <__aeabi_i2f>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f7ff f816 	bl	8000d84 <__aeabi_fmul>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 8001d60:	7abb      	ldrb	r3, [r7, #10]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	7afb      	ldrb	r3, [r7, #11]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ffb4 	bl	8000cdc <__aeabi_i2f>
 8001d74:	4602      	mov	r2, r0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4610      	mov	r0, r2
 8001d7e:	f7ff f801 	bl	8000d84 <__aeabi_fmul>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 8001d8a:	7b3b      	ldrb	r3, [r7, #12]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe ff9f 	bl	8000cdc <__aeabi_i2f>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f7fe ffec 	bl	8000d84 <__aeabi_fmul>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 8001db4:	7c3b      	ldrb	r3, [r7, #16]
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	7c7b      	ldrb	r3, [r7, #17]
 8001dbc:	b21b      	sxth	r3, r3
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	b21b      	sxth	r3, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff8a 	bl	8000cdc <__aeabi_i2f>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f7fe ffd7 	bl	8000d84 <__aeabi_fmul>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4610      	mov	r0, r2
 8001de2:	f7fe fec5 	bl	8000b70 <__aeabi_fsub>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	629a      	str	r2, [r3, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 8001dee:	7cbb      	ldrb	r3, [r7, #18]
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	b21a      	sxth	r2, r3
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe ff6d 	bl	8000cdc <__aeabi_i2f>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f7fe ffba 	bl	8000d84 <__aeabi_fmul>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f7fe fea8 	bl	8000b70 <__aeabi_fsub>
 8001e20:	4603      	mov	r3, r0
 8001e22:	461a      	mov	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 8001e28:	7d3b      	ldrb	r3, [r7, #20]
 8001e2a:	021b      	lsls	r3, r3, #8
 8001e2c:	b21a      	sxth	r2, r3
 8001e2e:	7d7b      	ldrb	r3, [r7, #21]
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff50 	bl	8000cdc <__aeabi_i2f>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f7fe ff9d 	bl	8000d84 <__aeabi_fmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	4619      	mov	r1, r3
 8001e54:	4610      	mov	r0, r2
 8001e56:	f7fe fe8b 	bl	8000b70 <__aeabi_fsub>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <mpu_gyro_calibration>:


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7a:	485e      	ldr	r0, [pc, #376]	; (8001ff4 <mpu_gyro_calibration+0x188>)
 8001e7c:	f001 f9c8 	bl	8003210 <HAL_GPIO_WritePin>
	uint8_t counter = 100;
 8001e80:	2364      	movs	r3, #100	; 0x64
 8001e82:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e060      	b.n	8001f5e <mpu_gyro_calibration+0xf2>
	{
		mpu_get_data(mpu);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff35 	bl	8001d0c <mpu_get_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eaa:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f924 	bl	80010fc <__aeabi_fcmpgt>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d117      	bne.n	8001eea <mpu_gyro_calibration+0x7e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ec2:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f918 	bl	80010fc <__aeabi_fcmpgt>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <mpu_gyro_calibration+0x7e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eda:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff f90c 	bl	80010fc <__aeabi_fcmpgt>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01b      	beq.n	8001f22 <mpu_gyro_calibration+0xb6>
			i = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	613b      	str	r3, [r7, #16]
			gx_sum = 0;
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]
			gy_sum = 0;
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
			gz_sum = 0;
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f06:	483b      	ldr	r0, [pc, #236]	; (8001ff4 <mpu_gyro_calibration+0x188>)
 8001f08:	f001 f982 	bl	8003210 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f10:	f000 fec8 	bl	8002ca4 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1a:	4836      	ldr	r0, [pc, #216]	; (8001ff4 <mpu_gyro_calibration+0x188>)
 8001f1c:	f001 f978 	bl	8003210 <HAL_GPIO_WritePin>
			continue;
 8001f20:	e01a      	b.n	8001f58 <mpu_gyro_calibration+0xec>
		}

		gx_sum += mpu->gx;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	4619      	mov	r1, r3
 8001f28:	69f8      	ldr	r0, [r7, #28]
 8001f2a:	f7fe fe23 	bl	8000b74 <__addsf3>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	4619      	mov	r1, r3
 8001f38:	69b8      	ldr	r0, [r7, #24]
 8001f3a:	f7fe fe1b 	bl	8000b74 <__addsf3>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4619      	mov	r1, r3
 8001f48:	6978      	ldr	r0, [r7, #20]
 8001f4a:	f7fe fe13 	bl	8000b74 <__addsf3>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	617b      	str	r3, [r7, #20]

		HAL_Delay(4);
 8001f52:	2004      	movs	r0, #4
 8001f54:	f000 fea6 	bl	8002ca4 <HAL_Delay>
	for(int i = 0; i < counter; i++)
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	db9a      	blt.n	8001e9c <mpu_gyro_calibration+0x30>
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691c      	ldr	r4, [r3, #16]
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe feb5 	bl	8000cdc <__aeabi_i2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4619      	mov	r1, r3
 8001f76:	69f8      	ldr	r0, [r7, #28]
 8001f78:	f7fe ffb8 	bl	8000eec <__aeabi_fdiv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4620      	mov	r0, r4
 8001f82:	f7fe fdf7 	bl	8000b74 <__addsf3>
 8001f86:	4603      	mov	r3, r0
 8001f88:	461a      	mov	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695c      	ldr	r4, [r3, #20]
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fea1 	bl	8000cdc <__aeabi_i2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	69b8      	ldr	r0, [r7, #24]
 8001fa0:	f7fe ffa4 	bl	8000eec <__aeabi_fdiv>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f7fe fde3 	bl	8000b74 <__addsf3>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	699c      	ldr	r4, [r3, #24]
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fe8d 	bl	8000cdc <__aeabi_i2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	6978      	ldr	r0, [r7, #20]
 8001fc8:	f7fe ff90 	bl	8000eec <__aeabi_fdiv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7fe fdcf 	bl	8000b74 <__addsf3>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fe4:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <mpu_gyro_calibration+0x188>)
 8001fe6:	f001 f913 	bl	8003210 <HAL_GPIO_WritePin>
}
 8001fea:	bf00      	nop
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd90      	pop	{r4, r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40011000 	.word	0x40011000

08001ff8 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ax, mpu->az) + M_PI/2;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa0f 	bl	8000428 <__aeabi_f2d>
 800200a:	4604      	mov	r4, r0
 800200c:	460d      	mov	r5, r1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa08 	bl	8000428 <__aeabi_f2d>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f006 fc02 	bl	8008828 <atan2>
 8002024:	a308      	add	r3, pc, #32	; (adr r3, 8002048 <mpu_get_acc_x_angle+0x50>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f7fe f89f 	bl	800016c <__adddf3>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fd47 	bl	8000ac8 <__aeabi_d2f>
 800203a:	4603      	mov	r3, r0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bdb0      	pop	{r4, r5, r7, pc}
 8002044:	f3af 8000 	nop.w
 8002048:	54442d18 	.word	0x54442d18
 800204c:	3ff921fb 	.word	0x3ff921fb

08002050 <mpu_calc_x_angle>:

}


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8002050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
	mpu_get_data(mpu);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fe56 	bl	8001d0c <mpu_get_data>
	float delta = (HAL_GetTick() - mpu->lst_time_x_angle) / 1000.0;
 8002060:	f000 fe16 	bl	8002c90 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe f9b9 	bl	80003e4 <__aeabi_ui2d>
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <mpu_calc_x_angle+0x140>)
 8002078:	f7fe fb58 	bl	800072c <__aeabi_ddiv>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fd20 	bl	8000ac8 <__aeabi_d2f>
 8002088:	4603      	mov	r3, r0
 800208a:	617b      	str	r3, [r7, #20]
	mpu->lst_time_x_angle = HAL_GetTick();
 800208c:	f000 fe00 	bl	8002c90 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	63da      	str	r2, [r3, #60]	; 0x3c
	if(delta > 0.01)
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f7fe f9c6 	bl	8000428 <__aeabi_f2d>
 800209c:	a338      	add	r3, pc, #224	; (adr r3, 8002180 <mpu_calc_x_angle+0x130>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	f7fe fca9 	bl	80009f8 <__aeabi_dcmpgt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <mpu_calc_x_angle+0x74>
	{
		mpu->x_angle = mpu_get_acc_x_angle(mpu);
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f7ff ffa3 	bl	8001ff8 <mpu_get_acc_x_angle>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
		mpu->lst_time_x_angle = HAL_GetTick();
 80020b8:	f000 fdea 	bl	8002c90 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		//complementary filter
		float alpha = 0.005;
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
	}
}
 80020c2:	e055      	b.n	8002170 <mpu_calc_x_angle+0x120>
		float alpha = 0.005;
 80020c4:	4b33      	ldr	r3, [pc, #204]	; (8002194 <mpu_calc_x_angle+0x144>)
 80020c6:	613b      	str	r3, [r7, #16]
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff ff95 	bl	8001ff8 <mpu_get_acc_x_angle>
 80020ce:	4603      	mov	r3, r0
 80020d0:	6939      	ldr	r1, [r7, #16]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fe56 	bl	8000d84 <__aeabi_fmul>
 80020d8:	4603      	mov	r3, r0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe f9a4 	bl	8000428 <__aeabi_f2d>
 80020e0:	4604      	mov	r4, r0
 80020e2:	460d      	mov	r5, r1
 80020e4:	6939      	ldr	r1, [r7, #16]
 80020e6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80020ea:	f7fe fd41 	bl	8000b70 <__aeabi_fsub>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f999 	bl	8000428 <__aeabi_f2d>
 80020f6:	4680      	mov	r8, r0
 80020f8:	4689      	mov	r9, r1
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe f992 	bl	8000428 <__aeabi_f2d>
 8002104:	4682      	mov	sl, r0
 8002106:	468b      	mov	fp, r1
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f989 	bl	8000428 <__aeabi_f2d>
 8002116:	a31c      	add	r3, pc, #112	; (adr r3, 8002188 <mpu_calc_x_angle+0x138>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe f9dc 	bl	80004d8 <__aeabi_dmul>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	e9c7 2300 	strd	r2, r3, [r7]
 8002128:	6978      	ldr	r0, [r7, #20]
 800212a:	f7fe f97d 	bl	8000428 <__aeabi_f2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002136:	f7fe f9cf 	bl	80004d8 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4650      	mov	r0, sl
 8002140:	4659      	mov	r1, fp
 8002142:	f7fe f813 	bl	800016c <__adddf3>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4640      	mov	r0, r8
 800214c:	4649      	mov	r1, r9
 800214e:	f7fe f9c3 	bl	80004d8 <__aeabi_dmul>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4620      	mov	r0, r4
 8002158:	4629      	mov	r1, r5
 800215a:	f7fe f807 	bl	800016c <__adddf3>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4610      	mov	r0, r2
 8002164:	4619      	mov	r1, r3
 8002166:	f7fe fcaf 	bl	8000ac8 <__aeabi_d2f>
 800216a:	4602      	mov	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
 8002180:	47ae147b 	.word	0x47ae147b
 8002184:	3f847ae1 	.word	0x3f847ae1
 8002188:	22d4405f 	.word	0x22d4405f
 800218c:	3f91df47 	.word	0x3f91df47
 8002190:	408f4000 	.word	0x408f4000
 8002194:	3ba3d70a 	.word	0x3ba3d70a

08002198 <set_dir>:
#define MAX_DELAY_uS




static void set_dir(stepper_typedef *stepper, int dir){
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
	if((dir * stepper->dir_polarity) == 1){
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10d      	bne.n	80021cc <set_dir+0x34>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6918      	ldr	r0, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8a9b      	ldrh	r3, [r3, #20]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2201      	movs	r2, #1
 80021bc:	4619      	mov	r1, r3
 80021be:	f001 f827 	bl	8003210 <HAL_GPIO_WritePin>
		stepper->dir = 1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -1;
	}
}
 80021ca:	e00c      	b.n	80021e6 <set_dir+0x4e>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6918      	ldr	r0, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8a9b      	ldrh	r3, [r3, #20]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2200      	movs	r2, #0
 80021d8:	4619      	mov	r1, r3
 80021da:	f001 f819 	bl	8003210 <HAL_GPIO_WritePin>
		stepper->dir = -1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	22ff      	movs	r2, #255	; 0xff
 80021e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <stepper_init>:


//dir pin polarity : 1 or -1
void stepper_init(stepper_typedef *stepper, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *EN_Port, uint16_t EN_Pin,
		GPIO_TypeDef *DIR_Port, uint16_t DIR_Pin, unsigned int max_speed, int dir_polarity)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
 80021fa:	603b      	str	r3, [r7, #0]
	stepper->htim = htim;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	601a      	str	r2, [r3, #0]
	stepper->Channel = Channel;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	605a      	str	r2, [r3, #4]

	stepper->EN_Port = EN_Port;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	609a      	str	r2, [r3, #8]
	stepper->EN_Pin = EN_Pin;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8b3a      	ldrh	r2, [r7, #24]
 8002212:	819a      	strh	r2, [r3, #12]
	stepper->DIR_Port = DIR_Port;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	611a      	str	r2, [r3, #16]
	stepper->DIR_Pin = DIR_Pin;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8c3a      	ldrh	r2, [r7, #32]
 800221e:	829a      	strh	r2, [r3, #20]

	stepper->step_counter = 0;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	61da      	str	r2, [r3, #28]
	stepper->on_off = 0;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2020 	strb.w	r2, [r3, #32]
	stepper-> new_counter = 65000;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

	stepper->dir_polarity = dir_polarity;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800223a:	62da      	str	r2, [r3, #44]	; 0x2c
	stepper->max_speed = max_speed;
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	619a      	str	r2, [r3, #24]

	set_dir(stepper, 1);
 8002242:	2101      	movs	r1, #1
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff ffa7 	bl	8002198 <set_dir>
	stepper_enable(stepper, 0);
 800224a:	2100      	movs	r1, #0
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f80b 	bl	8002268 <stepper_enable>


	// start timer
	HAL_TIM_Base_Start_IT(htim);
 8002252:	68b8      	ldr	r0, [r7, #8]
 8002254:	f002 fcba 	bl	8004bcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	68b8      	ldr	r0, [r7, #8]
 800225c:	f002 fd60 	bl	8004d20 <HAL_TIM_PWM_Start>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <stepper_enable>:



void stepper_enable(stepper_typedef *stepper, bool en)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	70fb      	strb	r3, [r7, #3]
	if(en){
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <stepper_enable+0x2e>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6898      	ldr	r0, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	899b      	ldrh	r3, [r3, #12]
 8002282:	b29b      	uxth	r3, r3
 8002284:	2200      	movs	r2, #0
 8002286:	4619      	mov	r1, r3
 8002288:	f000 ffc2 	bl	8003210 <HAL_GPIO_WritePin>
		stepper->enable = 1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	else{
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
		stepper->enable = 0;
		stepper->on_off = 0;
	}
}
 8002294:	e010      	b.n	80022b8 <stepper_enable+0x50>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6898      	ldr	r0, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	899b      	ldrh	r3, [r3, #12]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	2201      	movs	r2, #1
 80022a2:	4619      	mov	r1, r3
 80022a4:	f000 ffb4 	bl	8003210 <HAL_GPIO_WritePin>
		stepper->enable = 0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		stepper->on_off = 0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <stepper_set_speed>:



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]

	if(stepper->enable == 1){
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 80e1 	beq.w	800249a <stepper_set_speed+0x1da>
		if(speed == 0){
 80022d8:	f04f 0100 	mov.w	r1, #0
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f7fe fee5 	bl	80010ac <__aeabi_fcmpeq>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d032      	beq.n	800234e <stepper_set_speed+0x8e>
			stepper->on_off = 0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2020 	strb.w	r2, [r3, #32]
			__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <stepper_set_speed+0x44>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2200      	movs	r2, #0
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
 8002302:	e018      	b.n	8002336 <stepper_set_speed+0x76>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d105      	bne.n	8002318 <stepper_set_speed+0x58>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2300      	movs	r3, #0
 8002314:	6393      	str	r3, [r2, #56]	; 0x38
 8002316:	e00e      	b.n	8002336 <stepper_set_speed+0x76>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b08      	cmp	r3, #8
 800231e:	d105      	bne.n	800232c <stepper_set_speed+0x6c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	63d3      	str	r3, [r2, #60]	; 0x3c
 800232a:	e004      	b.n	8002336 <stepper_set_speed+0x76>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
			__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800234a:	60da      	str	r2, [r3, #12]
			if(speed > 0) set_dir(stepper, 1);
			else set_dir(stepper, -1);

		}
	}
}
 800234c:	e0a5      	b.n	800249a <stepper_set_speed+0x1da>
			stepper->on_off = 1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2020 	strb.w	r2, [r3, #32]
			speed = stepper->max_speed * (speed / 100.0);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f852 	bl	8000404 <__aeabi_i2d>
 8002360:	4604      	mov	r4, r0
 8002362:	460d      	mov	r5, r1
 8002364:	6838      	ldr	r0, [r7, #0]
 8002366:	f7fe f85f 	bl	8000428 <__aeabi_f2d>
 800236a:	f04f 0200 	mov.w	r2, #0
 800236e:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <stepper_set_speed+0x1f0>)
 8002370:	f7fe f9dc 	bl	800072c <__aeabi_ddiv>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4620      	mov	r0, r4
 800237a:	4629      	mov	r1, r5
 800237c:	f7fe f8ac 	bl	80004d8 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f7fe fb9e 	bl	8000ac8 <__aeabi_d2f>
 800238c:	4603      	mov	r3, r0
 800238e:	603b      	str	r3, [r7, #0]
			if(speed > stepper->max_speed) speed = stepper->max_speed;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe fca1 	bl	8000cdc <__aeabi_i2f>
 800239a:	4603      	mov	r3, r0
 800239c:	4619      	mov	r1, r3
 800239e:	6838      	ldr	r0, [r7, #0]
 80023a0:	f7fe feac 	bl	80010fc <__aeabi_fcmpgt>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d006      	beq.n	80023b8 <stepper_set_speed+0xf8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fc94 	bl	8000cdc <__aeabi_i2f>
 80023b4:	4603      	mov	r3, r0
 80023b6:	603b      	str	r3, [r7, #0]
			if(speed < -stepper->max_speed) speed = -stepper->max_speed;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	425b      	negs	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fc8c 	bl	8000cdc <__aeabi_i2f>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	f7fe fe79 	bl	80010c0 <__aeabi_fcmplt>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <stepper_set_speed+0x124>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	425b      	negs	r3, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fe fc7e 	bl	8000cdc <__aeabi_i2f>
 80023e0:	4603      	mov	r3, r0
 80023e2:	603b      	str	r3, [r7, #0]
			if(speed > 0 && speed < 16) speed = 16;
 80023e4:	f04f 0100 	mov.w	r1, #0
 80023e8:	6838      	ldr	r0, [r7, #0]
 80023ea:	f7fe fe87 	bl	80010fc <__aeabi_fcmpgt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <stepper_set_speed+0x14a>
 80023f4:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f7fe fe61 	bl	80010c0 <__aeabi_fcmplt>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <stepper_set_speed+0x14a>
 8002404:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002408:	603b      	str	r3, [r7, #0]
			if(speed < 0 && speed >-16) speed = -16;
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	f7fe fe56 	bl	80010c0 <__aeabi_fcmplt>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <stepper_set_speed+0x16c>
 800241a:	4926      	ldr	r1, [pc, #152]	; (80024b4 <stepper_set_speed+0x1f4>)
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	f7fe fe6d 	bl	80010fc <__aeabi_fcmpgt>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <stepper_set_speed+0x16c>
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <stepper_set_speed+0x1f4>)
 800242a:	603b      	str	r3, [r7, #0]
			uint16_t counter = (1.0/abs(speed)) * SEC2uSEC;
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f7fe fe6f 	bl	8001110 <__aeabi_f2iz>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	bfb8      	it	lt
 8002438:	425b      	neglt	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	f7fd ffe2 	bl	8000404 <__aeabi_i2d>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	f04f 0000 	mov.w	r0, #0
 8002448:	491b      	ldr	r1, [pc, #108]	; (80024b8 <stepper_set_speed+0x1f8>)
 800244a:	f7fe f96f 	bl	800072c <__aeabi_ddiv>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	a314      	add	r3, pc, #80	; (adr r3, 80024a8 <stepper_set_speed+0x1e8>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f83c 	bl	80004d8 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fb0e 	bl	8000a88 <__aeabi_d2uiz>
 800246c:	4603      	mov	r3, r0
 800246e:	81fb      	strh	r3, [r7, #14]
			stepper->new_counter = counter;
 8002470:	89fa      	ldrh	r2, [r7, #14]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
			if(speed > 0) set_dir(stepper, 1);
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	6838      	ldr	r0, [r7, #0]
 800247c:	f7fe fe3e 	bl	80010fc <__aeabi_fcmpgt>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <stepper_set_speed+0x1d0>
 8002486:	2101      	movs	r1, #1
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fe85 	bl	8002198 <set_dir>
}
 800248e:	e004      	b.n	800249a <stepper_set_speed+0x1da>
			else set_dir(stepper, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff fe7f 	bl	8002198 <set_dir>
}
 800249a:	bf00      	nop
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bdb0      	pop	{r4, r5, r7, pc}
 80024a2:	bf00      	nop
 80024a4:	f3af 8000 	nop.w
 80024a8:	00000000 	.word	0x00000000
 80024ac:	412e8480 	.word	0x412e8480
 80024b0:	40590000 	.word	0x40590000
 80024b4:	c1800000 	.word	0xc1800000
 80024b8:	3ff00000 	.word	0x3ff00000

080024bc <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
	if(stepper->on_off){
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d036      	beq.n	800253e <stepper_update+0x82>
		stepper->step_counter += stepper->dir;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80024d6:	b25a      	sxtb	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	441a      	add	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	61da      	str	r2, [r3, #28]
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <stepper_update+0x50>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2264      	movs	r2, #100	; 0x64
 8002508:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 800250a:	e018      	b.n	800253e <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d105      	bne.n	8002520 <stepper_update+0x64>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	2364      	movs	r3, #100	; 0x64
 800251c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800251e:	e00e      	b.n	800253e <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d105      	bne.n	8002534 <stepper_update+0x78>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2364      	movs	r3, #100	; 0x64
 8002530:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002532:	e004      	b.n	800253e <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	2364      	movs	r3, #100	; 0x64
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_MspInit+0x5c>)
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4a14      	ldr	r2, [pc, #80]	; (80025a4 <HAL_MspInit+0x5c>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_MspInit+0x5c>)
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_MspInit+0x5c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a0e      	ldr	r2, [pc, #56]	; (80025a4 <HAL_MspInit+0x5c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <HAL_MspInit+0x5c>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	607b      	str	r3, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800257e:	4b0a      	ldr	r3, [pc, #40]	; (80025a8 <HAL_MspInit+0x60>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <HAL_MspInit+0x60>)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000

080025ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <NMI_Handler+0x4>

080025b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <HardFault_Handler+0x4>

080025b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <MemManage_Handler+0x4>

080025be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c2:	e7fe      	b.n	80025c2 <BusFault_Handler+0x4>

080025c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c8:	e7fe      	b.n	80025c8 <UsageFault_Handler+0x4>

080025ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ca:	b480      	push	{r7}
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr

080025ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f2:	f000 fb3b 	bl	8002c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
	...

080025fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <TIM2_IRQHandler+0x10>)
 8002602:	f002 fc2f 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200002a8 	.word	0x200002a8

08002610 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <TIM3_IRQHandler+0x10>)
 8002616:	f002 fc25 	bl	8004e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200002f0 	.word	0x200002f0

08002624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return 1;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <_kill>:

int _kill(int pid, int sig)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800263c:	f004 fa9a 	bl	8006b74 <__errno>
 8002640:	4603      	mov	r3, r0
 8002642:	2216      	movs	r2, #22
 8002644:	601a      	str	r2, [r3, #0]
  return -1;
 8002646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_exit>:

void _exit (int status)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b082      	sub	sp, #8
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800265a:	f04f 31ff 	mov.w	r1, #4294967295
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffe7 	bl	8002632 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002664:	e7fe      	b.n	8002664 <_exit+0x12>

08002666 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b086      	sub	sp, #24
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e00a      	b.n	800268e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002678:	f3af 8000 	nop.w
 800267c:	4601      	mov	r1, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	60ba      	str	r2, [r7, #8]
 8002684:	b2ca      	uxtb	r2, r1
 8002686:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	dbf0      	blt.n	8002678 <_read+0x12>
  }

  return len;
 8002696:	687b      	ldr	r3, [r7, #4]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e009      	b.n	80026c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	60ba      	str	r2, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fe42 	bl	8001344 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbf1      	blt.n	80026b2 <_write+0x12>
  }
  return len;
 80026ce:	687b      	ldr	r3, [r7, #4]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_close>:

int _close(int file)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <_isatty>:

int _isatty(int file)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002714:	2301      	movs	r3, #1
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002740:	4a14      	ldr	r2, [pc, #80]	; (8002794 <_sbrk+0x5c>)
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <_sbrk+0x60>)
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <_sbrk+0x64>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <_sbrk+0x68>)
 8002758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <_sbrk+0x64>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	429a      	cmp	r2, r3
 8002766:	d207      	bcs.n	8002778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002768:	f004 fa04 	bl	8006b74 <__errno>
 800276c:	4603      	mov	r3, r0
 800276e:	220c      	movs	r2, #12
 8002770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002772:	f04f 33ff 	mov.w	r3, #4294967295
 8002776:	e009      	b.n	800278c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <_sbrk+0x64>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <_sbrk+0x64>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <_sbrk+0x64>)
 8002788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20005000 	.word	0x20005000
 8002798:	00000400 	.word	0x00000400
 800279c:	200002a4 	.word	0x200002a4
 80027a0:	200004d0 	.word	0x200004d0

080027a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027c4:	f107 0320 	add.w	r3, r7, #32
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027e0:	4b2d      	ldr	r3, [pc, #180]	; (8002898 <MX_TIM2_Init+0xe8>)
 80027e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80027e8:	4b2b      	ldr	r3, [pc, #172]	; (8002898 <MX_TIM2_Init+0xe8>)
 80027ea:	2247      	movs	r2, #71	; 0x47
 80027ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ee:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <MX_TIM2_Init+0xe8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80027f4:	4b28      	ldr	r3, [pc, #160]	; (8002898 <MX_TIM2_Init+0xe8>)
 80027f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <MX_TIM2_Init+0xe8>)
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <MX_TIM2_Init+0xe8>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002808:	4823      	ldr	r0, [pc, #140]	; (8002898 <MX_TIM2_Init+0xe8>)
 800280a:	f002 f98f 	bl	8004b2c <HAL_TIM_Base_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002814:	f7ff f8db 	bl	80019ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800281c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800281e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002822:	4619      	mov	r1, r3
 8002824:	481c      	ldr	r0, [pc, #112]	; (8002898 <MX_TIM2_Init+0xe8>)
 8002826:	f002 fccf 	bl	80051c8 <HAL_TIM_ConfigClockSource>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002830:	f7ff f8cd 	bl	80019ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002834:	4818      	ldr	r0, [pc, #96]	; (8002898 <MX_TIM2_Init+0xe8>)
 8002836:	f002 fa1b 	bl	8004c70 <HAL_TIM_PWM_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002840:	f7ff f8c5 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002844:	2300      	movs	r3, #0
 8002846:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800284c:	f107 0320 	add.w	r3, r7, #32
 8002850:	4619      	mov	r1, r3
 8002852:	4811      	ldr	r0, [pc, #68]	; (8002898 <MX_TIM2_Init+0xe8>)
 8002854:	f003 f854 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800285e:	f7ff f8b6 	bl	80019ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002862:	2360      	movs	r3, #96	; 0x60
 8002864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002872:	1d3b      	adds	r3, r7, #4
 8002874:	2200      	movs	r2, #0
 8002876:	4619      	mov	r1, r3
 8002878:	4807      	ldr	r0, [pc, #28]	; (8002898 <MX_TIM2_Init+0xe8>)
 800287a:	f002 fbe3 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002884:	f7ff f8a3 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <MX_TIM2_Init+0xe8>)
 800288a:	f000 f8bd 	bl	8002a08 <HAL_TIM_MspPostInit>

}
 800288e:	bf00      	nop
 8002890:	3738      	adds	r7, #56	; 0x38
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200002a8 	.word	0x200002a8

0800289c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08e      	sub	sp, #56	; 0x38
 80028a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	609a      	str	r2, [r3, #8]
 80028ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b0:	f107 0320 	add.w	r3, r7, #32
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
 80028c8:	615a      	str	r2, [r3, #20]
 80028ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <MX_TIM3_Init+0xe4>)
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <MX_TIM3_Init+0xe8>)
 80028d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <MX_TIM3_Init+0xe4>)
 80028d4:	2247      	movs	r2, #71	; 0x47
 80028d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b29      	ldr	r3, [pc, #164]	; (8002980 <MX_TIM3_Init+0xe4>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028de:	4b28      	ldr	r3, [pc, #160]	; (8002980 <MX_TIM3_Init+0xe4>)
 80028e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e6:	4b26      	ldr	r3, [pc, #152]	; (8002980 <MX_TIM3_Init+0xe4>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b24      	ldr	r3, [pc, #144]	; (8002980 <MX_TIM3_Init+0xe4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80028f2:	4823      	ldr	r0, [pc, #140]	; (8002980 <MX_TIM3_Init+0xe4>)
 80028f4:	f002 f91a 	bl	8004b2c <HAL_TIM_Base_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80028fe:	f7ff f866 	bl	80019ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290c:	4619      	mov	r1, r3
 800290e:	481c      	ldr	r0, [pc, #112]	; (8002980 <MX_TIM3_Init+0xe4>)
 8002910:	f002 fc5a 	bl	80051c8 <HAL_TIM_ConfigClockSource>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800291a:	f7ff f858 	bl	80019ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800291e:	4818      	ldr	r0, [pc, #96]	; (8002980 <MX_TIM3_Init+0xe4>)
 8002920:	f002 f9a6 	bl	8004c70 <HAL_TIM_PWM_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800292a:	f7ff f850 	bl	80019ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002936:	f107 0320 	add.w	r3, r7, #32
 800293a:	4619      	mov	r1, r3
 800293c:	4810      	ldr	r0, [pc, #64]	; (8002980 <MX_TIM3_Init+0xe4>)
 800293e:	f002 ffdf 	bl	8005900 <HAL_TIMEx_MasterConfigSynchronization>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002948:	f7ff f841 	bl	80019ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294c:	2360      	movs	r3, #96	; 0x60
 800294e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2200      	movs	r2, #0
 8002960:	4619      	mov	r1, r3
 8002962:	4807      	ldr	r0, [pc, #28]	; (8002980 <MX_TIM3_Init+0xe4>)
 8002964:	f002 fb6e 	bl	8005044 <HAL_TIM_PWM_ConfigChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800296e:	f7ff f82e 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002972:	4803      	ldr	r0, [pc, #12]	; (8002980 <MX_TIM3_Init+0xe4>)
 8002974:	f000 f848 	bl	8002a08 <HAL_TIM_MspPostInit>

}
 8002978:	bf00      	nop
 800297a:	3738      	adds	r7, #56	; 0x38
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200002f0 	.word	0x200002f0
 8002984:	40000400 	.word	0x40000400

08002988 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d114      	bne.n	80029c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800299a:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_TIM_Base_MspInit+0x78>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <HAL_TIM_Base_MspInit+0x78>)
 80029a0:	f043 0301 	orr.w	r3, r3, #1
 80029a4:	61d3      	str	r3, [r2, #28]
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <HAL_TIM_Base_MspInit+0x78>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2100      	movs	r1, #0
 80029b6:	201c      	movs	r0, #28
 80029b8:	f000 fa6f 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029bc:	201c      	movs	r0, #28
 80029be:	f000 fa88 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80029c2:	e018      	b.n	80029f6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_TIM_Base_MspInit+0x7c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d113      	bne.n	80029f6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_TIM_Base_MspInit+0x78>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_TIM_Base_MspInit+0x78>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_TIM_Base_MspInit+0x78>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	201d      	movs	r0, #29
 80029ec:	f000 fa55 	bl	8002e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029f0:	201d      	movs	r0, #29
 80029f2:	f000 fa6e 	bl	8002ed2 <HAL_NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40000400 	.word	0x40000400

08002a08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d118      	bne.n	8002a5a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <HAL_TIM_MspPostInit+0x94>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <HAL_TIM_MspPostInit+0x94>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_TIM_MspPostInit+0x94>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 8002a40:	2301      	movs	r3, #1
 8002a42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8002a4c:	f107 0310 	add.w	r3, r7, #16
 8002a50:	4619      	mov	r1, r3
 8002a52:	4813      	ldr	r0, [pc, #76]	; (8002aa0 <HAL_TIM_MspPostInit+0x98>)
 8002a54:	f000 fa58 	bl	8002f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a58:	e01c      	b.n	8002a94 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_TIM_MspPostInit+0x9c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d117      	bne.n	8002a94 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a64:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <HAL_TIM_MspPostInit+0x94>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_TIM_MspPostInit+0x94>)
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6193      	str	r3, [r2, #24]
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_TIM_MspPostInit+0x94>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8002a7c:	2340      	movs	r3, #64	; 0x40
 8002a7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a84:	2302      	movs	r3, #2
 8002a86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 0310 	add.w	r3, r7, #16
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <HAL_TIM_MspPostInit+0x98>)
 8002a90:	f000 fa3a 	bl	8002f08 <HAL_GPIO_Init>
}
 8002a94:	bf00      	nop
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40010800 	.word	0x40010800
 8002aa4:	40000400 	.word	0x40000400

08002aa8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <MX_USART1_UART_Init+0x50>)
 8002ab0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ab8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <MX_USART1_UART_Init+0x4c>)
 8002ae0:	f002 ff7e 	bl	80059e0 <HAL_UART_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002aea:	f7fe ff70 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000338 	.word	0x20000338
 8002af8:	40013800 	.word	0x40013800

08002afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <HAL_UART_MspInit+0x8c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d131      	bne.n	8002b80 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_UART_MspInit+0x90>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <HAL_UART_MspInit+0x90>)
 8002b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_UART_MspInit+0x90>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_UART_MspInit+0x90>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <HAL_UART_MspInit+0x90>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_UART_MspInit+0x90>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480b      	ldr	r0, [pc, #44]	; (8002b90 <HAL_UART_MspInit+0x94>)
 8002b62:	f000 f9d1 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4805      	ldr	r0, [pc, #20]	; (8002b90 <HAL_UART_MspInit+0x94>)
 8002b7c:	f000 f9c4 	bl	8002f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b80:	bf00      	nop
 8002b82:	3720      	adds	r7, #32
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40013800 	.word	0x40013800
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40010800 	.word	0x40010800

08002b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b94:	f7ff fe06 	bl	80027a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b98:	480b      	ldr	r0, [pc, #44]	; (8002bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b9a:	490c      	ldr	r1, [pc, #48]	; (8002bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b9c:	4a0c      	ldr	r2, [pc, #48]	; (8002bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ba0:	e002      	b.n	8002ba8 <LoopCopyDataInit>

08002ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba6:	3304      	adds	r3, #4

08002ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bac:	d3f9      	bcc.n	8002ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bb0:	4c09      	ldr	r4, [pc, #36]	; (8002bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb4:	e001      	b.n	8002bba <LoopFillZerobss>

08002bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb8:	3204      	adds	r2, #4

08002bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bbc:	d3fb      	bcc.n	8002bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bbe:	f003 ffdf 	bl	8006b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bc2:	f7fe fbfd 	bl	80013c0 <main>
  bx lr
 8002bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8002bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bcc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002bd0:	08009168 	.word	0x08009168
  ldr r2, =_sbss
 8002bd4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002bd8:	200004d0 	.word	0x200004d0

08002bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bdc:	e7fe      	b.n	8002bdc <ADC1_2_IRQHandler>
	...

08002be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <HAL_Init+0x28>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a07      	ldr	r2, [pc, #28]	; (8002c08 <HAL_Init+0x28>)
 8002bea:	f043 0310 	orr.w	r3, r3, #16
 8002bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bf0:	2003      	movs	r0, #3
 8002bf2:	f000 f947 	bl	8002e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf6:	200f      	movs	r0, #15
 8002bf8:	f000 f808 	bl	8002c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bfc:	f7ff fca4 	bl	8002548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40022000 	.word	0x40022000

08002c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_InitTick+0x54>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <HAL_InitTick+0x58>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f95f 	bl	8002eee <HAL_SYSTICK_Config>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00e      	b.n	8002c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b0f      	cmp	r3, #15
 8002c3e:	d80a      	bhi.n	8002c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c40:	2200      	movs	r2, #0
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	f000 f927 	bl	8002e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c4c:	4a06      	ldr	r2, [pc, #24]	; (8002c68 <HAL_InitTick+0x5c>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e000      	b.n	8002c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000000 	.word	0x20000000
 8002c64:	20000008 	.word	0x20000008
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x1c>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_IncTick+0x20>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a03      	ldr	r2, [pc, #12]	; (8002c8c <HAL_IncTick+0x20>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	20000008 	.word	0x20000008
 8002c8c:	20000380 	.word	0x20000380

08002c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return uwTick;
 8002c94:	4b02      	ldr	r3, [pc, #8]	; (8002ca0 <HAL_GetTick+0x10>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	20000380 	.word	0x20000380

08002ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cac:	f7ff fff0 	bl	8002c90 <HAL_GetTick>
 8002cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d005      	beq.n	8002cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_Delay+0x44>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cca:	bf00      	nop
 8002ccc:	f7ff ffe0 	bl	8002c90 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d8f7      	bhi.n	8002ccc <HAL_Delay+0x28>
  {
  }
}
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000008 	.word	0x20000008

08002cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d1e:	4a04      	ldr	r2, [pc, #16]	; (8002d30 <__NVIC_SetPriorityGrouping+0x44>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	60d3      	str	r3, [r2, #12]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <__NVIC_GetPriorityGrouping+0x18>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	f003 0307 	and.w	r3, r3, #7
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	db0b      	blt.n	8002d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	f003 021f 	and.w	r2, r3, #31
 8002d68:	4906      	ldr	r1, [pc, #24]	; (8002d84 <__NVIC_EnableIRQ+0x34>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	2001      	movs	r0, #1
 8002d72:	fa00 f202 	lsl.w	r2, r0, r2
 8002d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	e000e100 	.word	0xe000e100

08002d88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	6039      	str	r1, [r7, #0]
 8002d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	db0a      	blt.n	8002db2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	490c      	ldr	r1, [pc, #48]	; (8002dd4 <__NVIC_SetPriority+0x4c>)
 8002da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da6:	0112      	lsls	r2, r2, #4
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	440b      	add	r3, r1
 8002dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002db0:	e00a      	b.n	8002dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4908      	ldr	r1, [pc, #32]	; (8002dd8 <__NVIC_SetPriority+0x50>)
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	3b04      	subs	r3, #4
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	761a      	strb	r2, [r3, #24]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000e100 	.word	0xe000e100
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b089      	sub	sp, #36	; 0x24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f1c3 0307 	rsb	r3, r3, #7
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	bf28      	it	cs
 8002dfa:	2304      	movcs	r3, #4
 8002dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3304      	adds	r3, #4
 8002e02:	2b06      	cmp	r3, #6
 8002e04:	d902      	bls.n	8002e0c <NVIC_EncodePriority+0x30>
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	3b03      	subs	r3, #3
 8002e0a:	e000      	b.n	8002e0e <NVIC_EncodePriority+0x32>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	401a      	ands	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e24:	f04f 31ff 	mov.w	r1, #4294967295
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2e:	43d9      	mvns	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e34:	4313      	orrs	r3, r2
         );
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3724      	adds	r7, #36	; 0x24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e50:	d301      	bcc.n	8002e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e52:	2301      	movs	r3, #1
 8002e54:	e00f      	b.n	8002e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <SysTick_Config+0x40>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5e:	210f      	movs	r1, #15
 8002e60:	f04f 30ff 	mov.w	r0, #4294967295
 8002e64:	f7ff ff90 	bl	8002d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <SysTick_Config+0x40>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6e:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <SysTick_Config+0x40>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	e000e010 	.word	0xe000e010

08002e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff2d 	bl	8002cec <__NVIC_SetPriorityGrouping>
}
 8002e92:	bf00      	nop
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eac:	f7ff ff42 	bl	8002d34 <__NVIC_GetPriorityGrouping>
 8002eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	6978      	ldr	r0, [r7, #20]
 8002eb8:	f7ff ff90 	bl	8002ddc <NVIC_EncodePriority>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff5f 	bl	8002d88 <__NVIC_SetPriority>
}
 8002eca:	bf00      	nop
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff35 	bl	8002d50 <__NVIC_EnableIRQ>
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ffa2 	bl	8002e40 <SysTick_Config>
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1a:	e169      	b.n	80031f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8158 	bne.w	80031ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a9a      	ldr	r2, [pc, #616]	; (80031a8 <HAL_GPIO_Init+0x2a0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d05e      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f44:	4a98      	ldr	r2, [pc, #608]	; (80031a8 <HAL_GPIO_Init+0x2a0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d875      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f4a:	4a98      	ldr	r2, [pc, #608]	; (80031ac <HAL_GPIO_Init+0x2a4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d058      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f50:	4a96      	ldr	r2, [pc, #600]	; (80031ac <HAL_GPIO_Init+0x2a4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d86f      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f56:	4a96      	ldr	r2, [pc, #600]	; (80031b0 <HAL_GPIO_Init+0x2a8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d052      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f5c:	4a94      	ldr	r2, [pc, #592]	; (80031b0 <HAL_GPIO_Init+0x2a8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d869      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f62:	4a94      	ldr	r2, [pc, #592]	; (80031b4 <HAL_GPIO_Init+0x2ac>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d04c      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f68:	4a92      	ldr	r2, [pc, #584]	; (80031b4 <HAL_GPIO_Init+0x2ac>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d863      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f6e:	4a92      	ldr	r2, [pc, #584]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d046      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f74:	4a90      	ldr	r2, [pc, #576]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d85d      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d82a      	bhi.n	8002fd4 <HAL_GPIO_Init+0xcc>
 8002f7e:	2b12      	cmp	r3, #18
 8002f80:	d859      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <HAL_GPIO_Init+0x80>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08003003 	.word	0x08003003
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002fef 	.word	0x08002fef
 8002f94:	08003031 	.word	0x08003031
 8002f98:	08003037 	.word	0x08003037
 8002f9c:	08003037 	.word	0x08003037
 8002fa0:	08003037 	.word	0x08003037
 8002fa4:	08003037 	.word	0x08003037
 8002fa8:	08003037 	.word	0x08003037
 8002fac:	08003037 	.word	0x08003037
 8002fb0:	08003037 	.word	0x08003037
 8002fb4:	08003037 	.word	0x08003037
 8002fb8:	08003037 	.word	0x08003037
 8002fbc:	08003037 	.word	0x08003037
 8002fc0:	08003037 	.word	0x08003037
 8002fc4:	08003037 	.word	0x08003037
 8002fc8:	08003037 	.word	0x08003037
 8002fcc:	08002fe5 	.word	0x08002fe5
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	4a79      	ldr	r2, [pc, #484]	; (80031bc <HAL_GPIO_Init+0x2b4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fda:	e02c      	b.n	8003036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	623b      	str	r3, [r7, #32]
          break;
 8002fe2:	e029      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	e024      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	623b      	str	r3, [r7, #32]
          break;
 8002ff6:	e01f      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	623b      	str	r3, [r7, #32]
          break;
 8003000:	e01a      	b.n	8003038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800300a:	2304      	movs	r3, #4
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e013      	b.n	8003038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003018:	2308      	movs	r3, #8
 800301a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	611a      	str	r2, [r3, #16]
          break;
 8003022:	e009      	b.n	8003038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003024:	2308      	movs	r3, #8
 8003026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	615a      	str	r2, [r3, #20]
          break;
 800302e:	e003      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003030:	2300      	movs	r3, #0
 8003032:	623b      	str	r3, [r7, #32]
          break;
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x130>
          break;
 8003036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2bff      	cmp	r3, #255	; 0xff
 800303c:	d801      	bhi.n	8003042 <HAL_GPIO_Init+0x13a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	e001      	b.n	8003046 <HAL_GPIO_Init+0x13e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2bff      	cmp	r3, #255	; 0xff
 800304c:	d802      	bhi.n	8003054 <HAL_GPIO_Init+0x14c>
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	e002      	b.n	800305a <HAL_GPIO_Init+0x152>
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	3b08      	subs	r3, #8
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	210f      	movs	r1, #15
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	6a39      	ldr	r1, [r7, #32]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	431a      	orrs	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80b1 	beq.w	80031ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003088:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <HAL_GPIO_Init+0x2b8>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a4c      	ldr	r2, [pc, #304]	; (80031c0 <HAL_GPIO_Init+0x2b8>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <HAL_GPIO_Init+0x2b8>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030a0:	4a48      	ldr	r2, [pc, #288]	; (80031c4 <HAL_GPIO_Init+0x2bc>)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <HAL_GPIO_Init+0x2c0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_GPIO_Init+0x1ec>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <HAL_GPIO_Init+0x2c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00d      	beq.n	80030f0 <HAL_GPIO_Init+0x1e8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a3e      	ldr	r2, [pc, #248]	; (80031d0 <HAL_GPIO_Init+0x2c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <HAL_GPIO_Init+0x1e4>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3d      	ldr	r2, [pc, #244]	; (80031d4 <HAL_GPIO_Init+0x2cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_GPIO_Init+0x1e0>
 80030e4:	2303      	movs	r3, #3
 80030e6:	e006      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e004      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f4:	2300      	movs	r3, #0
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	f002 0203 	and.w	r2, r2, #3
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	4093      	lsls	r3, r2
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003106:	492f      	ldr	r1, [pc, #188]	; (80031c4 <HAL_GPIO_Init+0x2bc>)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	492c      	ldr	r1, [pc, #176]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	43db      	mvns	r3, r3
 8003136:	4928      	ldr	r1, [pc, #160]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003138:	4013      	ands	r3, r2
 800313a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	4922      	ldr	r1, [pc, #136]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	60cb      	str	r3, [r1, #12]
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	43db      	mvns	r3, r3
 800315e:	491e      	ldr	r1, [pc, #120]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003160:	4013      	ands	r3, r2
 8003162:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	4918      	ldr	r1, [pc, #96]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	43db      	mvns	r3, r3
 8003186:	4914      	ldr	r1, [pc, #80]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003188:	4013      	ands	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d021      	beq.n	80031dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	490e      	ldr	r1, [pc, #56]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	600b      	str	r3, [r1, #0]
 80031a4:	e021      	b.n	80031ea <HAL_GPIO_Init+0x2e2>
 80031a6:	bf00      	nop
 80031a8:	10320000 	.word	0x10320000
 80031ac:	10310000 	.word	0x10310000
 80031b0:	10220000 	.word	0x10220000
 80031b4:	10210000 	.word	0x10210000
 80031b8:	10120000 	.word	0x10120000
 80031bc:	10110000 	.word	0x10110000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40010800 	.word	0x40010800
 80031cc:	40010c00 	.word	0x40010c00
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40011400 	.word	0x40011400
 80031d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_GPIO_Init+0x304>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4909      	ldr	r1, [pc, #36]	; (800320c <HAL_GPIO_Init+0x304>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	3301      	adds	r3, #1
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f47f ae8e 	bne.w	8002f1c <HAL_GPIO_Init+0x14>
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	372c      	adds	r7, #44	; 0x2c
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40010400 	.word	0x40010400

08003210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
 800321c:	4613      	mov	r3, r2
 800321e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003220:	787b      	ldrb	r3, [r7, #1]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003226:	887a      	ldrh	r2, [r7, #2]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800322c:	e003      	b.n	8003236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	611a      	str	r2, [r3, #16]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e12b      	b.n	80034aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe f82e 	bl	80012c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	; 0x24
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0201 	bic.w	r2, r2, #1
 8003282:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003292:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032a4:	f001 fbfc 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	4a81      	ldr	r2, [pc, #516]	; (80034b4 <HAL_I2C_Init+0x274>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d807      	bhi.n	80032c4 <HAL_I2C_Init+0x84>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a80      	ldr	r2, [pc, #512]	; (80034b8 <HAL_I2C_Init+0x278>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e006      	b.n	80032d2 <HAL_I2C_Init+0x92>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4a7d      	ldr	r2, [pc, #500]	; (80034bc <HAL_I2C_Init+0x27c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bf94      	ite	ls
 80032cc:	2301      	movls	r3, #1
 80032ce:	2300      	movhi	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e0e7      	b.n	80034aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <HAL_I2C_Init+0x280>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	0c9b      	lsrs	r3, r3, #18
 80032e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a6a      	ldr	r2, [pc, #424]	; (80034b4 <HAL_I2C_Init+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d802      	bhi.n	8003314 <HAL_I2C_Init+0xd4>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	3301      	adds	r3, #1
 8003312:	e009      	b.n	8003328 <HAL_I2C_Init+0xe8>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	4a69      	ldr	r2, [pc, #420]	; (80034c4 <HAL_I2C_Init+0x284>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	3301      	adds	r3, #1
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800333a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	495c      	ldr	r1, [pc, #368]	; (80034b4 <HAL_I2C_Init+0x274>)
 8003344:	428b      	cmp	r3, r1
 8003346:	d819      	bhi.n	800337c <HAL_I2C_Init+0x13c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e59      	subs	r1, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fbb1 f3f3 	udiv	r3, r1, r3
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	f640 73fc 	movw	r3, #4092	; 0xffc
 800335c:	400b      	ands	r3, r1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00a      	beq.n	8003378 <HAL_I2C_Init+0x138>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e59      	subs	r1, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003370:	3301      	adds	r3, #1
 8003372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003376:	e051      	b.n	800341c <HAL_I2C_Init+0x1dc>
 8003378:	2304      	movs	r3, #4
 800337a:	e04f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d111      	bne.n	80033a8 <HAL_I2C_Init+0x168>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	1e58      	subs	r0, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6859      	ldr	r1, [r3, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	2b00      	cmp	r3, #0
 800339e:	bf0c      	ite	eq
 80033a0:	2301      	moveq	r3, #1
 80033a2:	2300      	movne	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e012      	b.n	80033ce <HAL_I2C_Init+0x18e>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1e58      	subs	r0, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6859      	ldr	r1, [r3, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	0099      	lsls	r1, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Init+0x196>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e022      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10e      	bne.n	80033fc <HAL_I2C_Init+0x1bc>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e58      	subs	r0, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6859      	ldr	r1, [r3, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	440b      	add	r3, r1
 80033ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fa:	e00f      	b.n	800341c <HAL_I2C_Init+0x1dc>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	0099      	lsls	r1, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003412:	3301      	adds	r3, #1
 8003414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	6809      	ldr	r1, [r1, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800344a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6911      	ldr	r1, [r2, #16]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68d2      	ldr	r2, [r2, #12]
 8003456:	4311      	orrs	r1, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	000186a0 	.word	0x000186a0
 80034b8:	001e847f 	.word	0x001e847f
 80034bc:	003d08ff 	.word	0x003d08ff
 80034c0:	431bde83 	.word	0x431bde83
 80034c4:	10624dd3 	.word	0x10624dd3

080034c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	4608      	mov	r0, r1
 80034d2:	4611      	mov	r1, r2
 80034d4:	461a      	mov	r2, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	460b      	mov	r3, r1
 80034dc:	813b      	strh	r3, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034e2:	f7ff fbd5 	bl	8002c90 <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	f040 80d9 	bne.w	80036a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2319      	movs	r3, #25
 80034fc:	2201      	movs	r2, #1
 80034fe:	496d      	ldr	r1, [pc, #436]	; (80036b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fccd 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
 800350e:	e0cc      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003516:	2b01      	cmp	r3, #1
 8003518:	d101      	bne.n	800351e <HAL_I2C_Mem_Write+0x56>
 800351a:	2302      	movs	r3, #2
 800351c:	e0c5      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d007      	beq.n	8003544 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0201 	orr.w	r2, r2, #1
 8003542:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003552:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2221      	movs	r2, #33	; 0x21
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a3a      	ldr	r2, [r7, #32]
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003574:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003586:	88f8      	ldrh	r0, [r7, #6]
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	8979      	ldrh	r1, [r7, #10]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	9301      	str	r3, [sp, #4]
 8003590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	4603      	mov	r3, r0
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fb04 	bl	8003ba4 <I2C_RequestMemoryWrite>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d052      	beq.n	8003648 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e081      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fd92 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d107      	bne.n	80035ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e06b      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b04      	cmp	r3, #4
 800360e:	d11b      	bne.n	8003648 <HAL_I2C_Mem_Write+0x180>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d017      	beq.n	8003648 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1aa      	bne.n	80035a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fd85 	bl	8004164 <I2C_WaitOnBTFFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2b04      	cmp	r3, #4
 8003666:	d107      	bne.n	8003678 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003676:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e016      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	00100002 	.word	0x00100002
 80036b8:	ffff0000 	.word	0xffff0000

080036bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036da:	f7ff fad9 	bl	8002c90 <HAL_GetTick>
 80036de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	f040 8250 	bne.w	8003b8e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	2319      	movs	r3, #25
 80036f4:	2201      	movs	r2, #1
 80036f6:	4982      	ldr	r1, [pc, #520]	; (8003900 <HAL_I2C_Mem_Read+0x244>)
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fbd1 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
 8003706:	e243      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_I2C_Mem_Read+0x5a>
 8003712:	2302      	movs	r3, #2
 8003714:	e23c      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d007      	beq.n	800373c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2222      	movs	r2, #34	; 0x22
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800376c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4a62      	ldr	r2, [pc, #392]	; (8003904 <HAL_I2C_Mem_Read+0x248>)
 800377c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800377e:	88f8      	ldrh	r0, [r7, #6]
 8003780:	893a      	ldrh	r2, [r7, #8]
 8003782:	8979      	ldrh	r1, [r7, #10]
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	9301      	str	r3, [sp, #4]
 8003788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4603      	mov	r3, r0
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fa9e 	bl	8003cd0 <I2C_RequestMemoryRead>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1f8      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e1cc      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d11e      	bne.n	8003814 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037e6:	b672      	cpsid	i
}
 80037e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003810:	b662      	cpsie	i
}
 8003812:	e035      	b.n	8003880 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	2b02      	cmp	r3, #2
 800381a:	d11e      	bne.n	800385a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800382c:	b672      	cpsid	i
}
 800382e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003854:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003856:	b662      	cpsie	i
}
 8003858:	e012      	b.n	8003880 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003868:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003880:	e172      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	2b03      	cmp	r3, #3
 8003888:	f200 811f 	bhi.w	8003aca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	2b01      	cmp	r3, #1
 8003892:	d123      	bne.n	80038dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fcab 	bl	80041f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e173      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038da:	e145      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d152      	bne.n	800398a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	2200      	movs	r2, #0
 80038ec:	4906      	ldr	r1, [pc, #24]	; (8003908 <HAL_I2C_Mem_Read+0x24c>)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fad6 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e148      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
 80038fe:	bf00      	nop
 8003900:	00100002 	.word	0x00100002
 8003904:	ffff0000 	.word	0xffff0000
 8003908:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800390c:	b672      	cpsid	i
}
 800390e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800391e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003932:	1c5a      	adds	r2, r3, #1
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003952:	b662      	cpsie	i
}
 8003954:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003988:	e0ee      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003990:	2200      	movs	r2, #0
 8003992:	4981      	ldr	r1, [pc, #516]	; (8003b98 <HAL_I2C_Mem_Read+0x4dc>)
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 fa83 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0f5      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039b4:	b672      	cpsid	i
}
 80039b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039ea:	4b6c      	ldr	r3, [pc, #432]	; (8003b9c <HAL_I2C_Mem_Read+0x4e0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	08db      	lsrs	r3, r3, #3
 80039f0:	4a6b      	ldr	r2, [pc, #428]	; (8003ba0 <HAL_I2C_Mem_Read+0x4e4>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0a1a      	lsrs	r2, r3, #8
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	00da      	lsls	r2, r3, #3
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d118      	bne.n	8003a42 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a32:	b662      	cpsie	i
}
 8003a34:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0a6      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d1d9      	bne.n	8003a04 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a92:	b662      	cpsie	i
}
 8003a94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ac8:	e04e      	b.n	8003b68 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003acc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fb90 	bl	80041f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e058      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	b2d2      	uxtb	r2, r2
 8003aea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d124      	bne.n	8003b68 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	2b03      	cmp	r3, #3
 8003b24:	d107      	bne.n	8003b36 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f ae88 	bne.w	8003882 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	; 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	00010004 	.word	0x00010004
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	14f8b589 	.word	0x14f8b589

08003ba4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	4608      	mov	r0, r1
 8003bae:	4611      	mov	r1, r2
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	817b      	strh	r3, [r7, #10]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	813b      	strh	r3, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f960 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00d      	beq.n	8003c02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf4:	d103      	bne.n	8003bfe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e05f      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	461a      	mov	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	6a3a      	ldr	r2, [r7, #32]
 8003c16:	492d      	ldr	r1, [pc, #180]	; (8003ccc <I2C_RequestMemoryWrite+0x128>)
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f9bb 	bl	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e04c      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c40:	6a39      	ldr	r1, [r7, #32]
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 fa46 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d107      	bne.n	8003c66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e02b      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d105      	bne.n	8003c7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	611a      	str	r2, [r3, #16]
 8003c7a:	e021      	b.n	8003cc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	0a1b      	lsrs	r3, r3, #8
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	6a39      	ldr	r1, [r7, #32]
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa20 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d107      	bne.n	8003cb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e005      	b.n	8003cc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb6:	893b      	ldrh	r3, [r7, #8]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	00010002 	.word	0x00010002

08003cd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af02      	add	r7, sp, #8
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	4608      	mov	r0, r1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4603      	mov	r3, r0
 8003ce0:	817b      	strh	r3, [r7, #10]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	813b      	strh	r3, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f8c2 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d30:	d103      	bne.n	8003d3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0aa      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	4952      	ldr	r1, [pc, #328]	; (8003e9c <I2C_RequestMemoryRead+0x1cc>)
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f91d 	bl	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e097      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f9a8 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d107      	bne.n	8003da2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e076      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	e021      	b.n	8003dfc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f982 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e050      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	6a39      	ldr	r1, [r7, #32]
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 f967 	bl	80040d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00d      	beq.n	8003e28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d107      	bne.n	8003e24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e035      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f82b 	bl	8003ea0 <I2C_WaitOnFlagUntilTimeout>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00d      	beq.n	8003e6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e5e:	d103      	bne.n	8003e68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e013      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e6c:	897b      	ldrh	r3, [r7, #10]
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	4906      	ldr	r1, [pc, #24]	; (8003e9c <I2C_RequestMemoryRead+0x1cc>)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 f886 	bl	8003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	00010002 	.word	0x00010002

08003ea0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	4613      	mov	r3, r2
 8003eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb0:	e048      	b.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb8:	d044      	beq.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fe fee9 	bl	8002c90 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d139      	bne.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	0c1b      	lsrs	r3, r3, #16
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10d      	bne.n	8003ef6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	43da      	mvns	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	bf0c      	ite	eq
 8003eec:	2301      	moveq	r3, #1
 8003eee:	2300      	movne	r3, #0
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	e00c      	b.n	8003f10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	461a      	mov	r2, r3
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d116      	bne.n	8003f44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e023      	b.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	0c1b      	lsrs	r3, r3, #16
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d10d      	bne.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	43da      	mvns	r2, r3
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	e00c      	b.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	43da      	mvns	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4013      	ands	r3, r2
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bf0c      	ite	eq
 8003f7c:	2301      	moveq	r3, #1
 8003f7e:	2300      	movne	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	79fb      	ldrb	r3, [r7, #7]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d093      	beq.n	8003eb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003fa2:	e071      	b.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d123      	bne.n	8003ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fcc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	f043 0204 	orr.w	r2, r3, #4
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e067      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d041      	beq.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fe fe44 	bl	8002c90 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d136      	bne.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b01      	cmp	r3, #1
 8004022:	d10c      	bne.n	800403e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	43da      	mvns	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	bf14      	ite	ne
 8004036:	2301      	movne	r3, #1
 8004038:	2300      	moveq	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	e00b      	b.n	8004056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	43da      	mvns	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf14      	ite	ne
 8004050:	2301      	movne	r3, #1
 8004052:	2300      	moveq	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004074:	f043 0220 	orr.w	r2, r3, #32
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e021      	b.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	0c1b      	lsrs	r3, r3, #16
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10c      	bne.n	80040ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	43da      	mvns	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	4013      	ands	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf14      	ite	ne
 80040a4:	2301      	movne	r3, #1
 80040a6:	2300      	moveq	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e00b      	b.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4013      	ands	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f af6d 	bne.w	8003fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040e0:	e034      	b.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 f8e3 	bl	80042ae <I2C_IsAcknowledgeFailed>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e034      	b.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d028      	beq.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fdc9 	bl	8002c90 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11d      	bne.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b80      	cmp	r3, #128	; 0x80
 800411c:	d016      	beq.n	800414c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e007      	b.n	800415c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d1c3      	bne.n	80040e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004170:	e034      	b.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f89b 	bl	80042ae <I2C_IsAcknowledgeFailed>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e034      	b.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d028      	beq.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800418a:	f7fe fd81 	bl	8002c90 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	429a      	cmp	r2, r3
 8004198:	d302      	bcc.n	80041a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d11d      	bne.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f003 0304 	and.w	r3, r3, #4
 80041aa:	2b04      	cmp	r3, #4
 80041ac:	d016      	beq.n	80041dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	f043 0220 	orr.w	r2, r3, #32
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e007      	b.n	80041ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d1c3      	bne.n	8004172 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004200:	e049      	b.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b10      	cmp	r3, #16
 800420e:	d119      	bne.n	8004244 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0210 	mvn.w	r2, #16
 8004218:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e030      	b.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fe fd24 	bl	8002c90 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d11d      	bne.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004264:	2b40      	cmp	r3, #64	; 0x40
 8004266:	d016      	beq.n	8004296 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2220      	movs	r2, #32
 8004272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f043 0220 	orr.w	r2, r3, #32
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e007      	b.n	80042a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d1ae      	bne.n	8004202 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c4:	d11b      	bne.n	80042fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0204 	orr.w	r2, r3, #4
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	bc80      	pop	{r7}
 8004308:	4770      	bx	lr
	...

0800430c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e272      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8087 	beq.w	800443a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800432c:	4b92      	ldr	r3, [pc, #584]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b04      	cmp	r3, #4
 8004336:	d00c      	beq.n	8004352 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004338:	4b8f      	ldr	r3, [pc, #572]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d112      	bne.n	800436a <HAL_RCC_OscConfig+0x5e>
 8004344:	4b8c      	ldr	r3, [pc, #560]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d10b      	bne.n	800436a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004352:	4b89      	ldr	r3, [pc, #548]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d06c      	beq.n	8004438 <HAL_RCC_OscConfig+0x12c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d168      	bne.n	8004438 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e24c      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x76>
 8004374:	4b80      	ldr	r3, [pc, #512]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a7f      	ldr	r2, [pc, #508]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 800437a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	e02e      	b.n	80043e0 <HAL_RCC_OscConfig+0xd4>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x98>
 800438a:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a7a      	ldr	r2, [pc, #488]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	4b78      	ldr	r3, [pc, #480]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a77      	ldr	r2, [pc, #476]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 800439c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	e01d      	b.n	80043e0 <HAL_RCC_OscConfig+0xd4>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ac:	d10c      	bne.n	80043c8 <HAL_RCC_OscConfig+0xbc>
 80043ae:	4b72      	ldr	r3, [pc, #456]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a71      	ldr	r2, [pc, #452]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	4b6f      	ldr	r3, [pc, #444]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	e00b      	b.n	80043e0 <HAL_RCC_OscConfig+0xd4>
 80043c8:	4b6b      	ldr	r3, [pc, #428]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6a      	ldr	r2, [pc, #424]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b68      	ldr	r3, [pc, #416]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a67      	ldr	r2, [pc, #412]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d013      	beq.n	8004410 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fe fc52 	bl	8002c90 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fe fc4e 	bl	8002c90 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e200      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004402:	4b5d      	ldr	r3, [pc, #372]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0xe4>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fe fc3e 	bl	8002c90 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fe fc3a 	bl	8002c90 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	; 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e1ec      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442a:	4b53      	ldr	r3, [pc, #332]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x10c>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d063      	beq.n	800450e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004446:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004452:	4b49      	ldr	r3, [pc, #292]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f003 030c 	and.w	r3, r3, #12
 800445a:	2b08      	cmp	r3, #8
 800445c:	d11c      	bne.n	8004498 <HAL_RCC_OscConfig+0x18c>
 800445e:	4b46      	ldr	r3, [pc, #280]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	4b43      	ldr	r3, [pc, #268]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x176>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1c0      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4939      	ldr	r1, [pc, #228]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	e03a      	b.n	800450e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a0:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_RCC_OscConfig+0x270>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fbf3 	bl	8002c90 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fe fbef 	bl	8002c90 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1a1      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044cc:	4b2a      	ldr	r3, [pc, #168]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4927      	ldr	r1, [pc, #156]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
 80044e0:	e015      	b.n	800450e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e2:	4b26      	ldr	r3, [pc, #152]	; (800457c <HAL_RCC_OscConfig+0x270>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fe fbd2 	bl	8002c90 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044f0:	f7fe fbce 	bl	8002c90 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e180      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d03a      	beq.n	8004590 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d019      	beq.n	8004556 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004528:	f7fe fbb2 	bl	8002c90 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004530:	f7fe fbae 	bl	8002c90 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e160      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCC_OscConfig+0x26c>)
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800454e:	2001      	movs	r0, #1
 8004550:	f000 face 	bl	8004af0 <RCC_Delay>
 8004554:	e01c      	b.n	8004590 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004558:	2200      	movs	r2, #0
 800455a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455c:	f7fe fb98 	bl	8002c90 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004562:	e00f      	b.n	8004584 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004564:	f7fe fb94 	bl	8002c90 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d908      	bls.n	8004584 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e146      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	42420000 	.word	0x42420000
 8004580:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	4b92      	ldr	r3, [pc, #584]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e9      	bne.n	8004564 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80a6 	beq.w	80046ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045a2:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10d      	bne.n	80045ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	4a87      	ldr	r2, [pc, #540]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b8:	61d3      	str	r3, [r2, #28]
 80045ba:	4b85      	ldr	r3, [pc, #532]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b82      	ldr	r3, [pc, #520]	; (80047d4 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d118      	bne.n	8004608 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d6:	4b7f      	ldr	r3, [pc, #508]	; (80047d4 <HAL_RCC_OscConfig+0x4c8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a7e      	ldr	r2, [pc, #504]	; (80047d4 <HAL_RCC_OscConfig+0x4c8>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e2:	f7fe fb55 	bl	8002c90 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fe fb51 	bl	8002c90 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b64      	cmp	r3, #100	; 0x64
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e103      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	4b75      	ldr	r3, [pc, #468]	; (80047d4 <HAL_RCC_OscConfig+0x4c8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d106      	bne.n	800461e <HAL_RCC_OscConfig+0x312>
 8004610:	4b6f      	ldr	r3, [pc, #444]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	4a6e      	ldr	r2, [pc, #440]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6213      	str	r3, [r2, #32]
 800461c:	e02d      	b.n	800467a <HAL_RCC_OscConfig+0x36e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x334>
 8004626:	4b6a      	ldr	r3, [pc, #424]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4a69      	ldr	r2, [pc, #420]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6213      	str	r3, [r2, #32]
 8004632:	4b67      	ldr	r3, [pc, #412]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4a66      	ldr	r2, [pc, #408]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	f023 0304 	bic.w	r3, r3, #4
 800463c:	6213      	str	r3, [r2, #32]
 800463e:	e01c      	b.n	800467a <HAL_RCC_OscConfig+0x36e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b05      	cmp	r3, #5
 8004646:	d10c      	bne.n	8004662 <HAL_RCC_OscConfig+0x356>
 8004648:	4b61      	ldr	r3, [pc, #388]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	4a60      	ldr	r2, [pc, #384]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	f043 0304 	orr.w	r3, r3, #4
 8004652:	6213      	str	r3, [r2, #32]
 8004654:	4b5e      	ldr	r3, [pc, #376]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	4a5d      	ldr	r2, [pc, #372]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6213      	str	r3, [r2, #32]
 8004660:	e00b      	b.n	800467a <HAL_RCC_OscConfig+0x36e>
 8004662:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4a5a      	ldr	r2, [pc, #360]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	f023 0301 	bic.w	r3, r3, #1
 800466c:	6213      	str	r3, [r2, #32]
 800466e:	4b58      	ldr	r3, [pc, #352]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	4a57      	ldr	r2, [pc, #348]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004674:	f023 0304 	bic.w	r3, r3, #4
 8004678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d015      	beq.n	80046ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004682:	f7fe fb05 	bl	8002c90 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004688:	e00a      	b.n	80046a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468a:	f7fe fb01 	bl	8002c90 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	f241 3288 	movw	r2, #5000	; 0x1388
 8004698:	4293      	cmp	r3, r2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e0b1      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a0:	4b4b      	ldr	r3, [pc, #300]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0ee      	beq.n	800468a <HAL_RCC_OscConfig+0x37e>
 80046ac:	e014      	b.n	80046d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ae:	f7fe faef 	bl	8002c90 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b4:	e00a      	b.n	80046cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b6:	f7fe faeb 	bl	8002c90 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e09b      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046cc:	4b40      	ldr	r3, [pc, #256]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ee      	bne.n	80046b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046d8:	7dfb      	ldrb	r3, [r7, #23]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046de:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4a3b      	ldr	r2, [pc, #236]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8087 	beq.w	8004802 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d061      	beq.n	80047c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d146      	bne.n	8004796 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004708:	4b33      	ldr	r3, [pc, #204]	; (80047d8 <HAL_RCC_OscConfig+0x4cc>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800470e:	f7fe fabf 	bl	8002c90 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004716:	f7fe fabb 	bl	8002c90 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e06d      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473c:	d108      	bne.n	8004750 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	4921      	ldr	r1, [pc, #132]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004750:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a19      	ldr	r1, [r3, #32]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	430b      	orrs	r3, r1
 8004762:	491b      	ldr	r1, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	4313      	orrs	r3, r2
 8004766:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004768:	4b1b      	ldr	r3, [pc, #108]	; (80047d8 <HAL_RCC_OscConfig+0x4cc>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fe fa8f 	bl	8002c90 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004776:	f7fe fa8b 	bl	8002c90 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e03d      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x46a>
 8004794:	e035      	b.n	8004802 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004796:	4b10      	ldr	r3, [pc, #64]	; (80047d8 <HAL_RCC_OscConfig+0x4cc>)
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800479c:	f7fe fa78 	bl	8002c90 <HAL_GetTick>
 80047a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a4:	f7fe fa74 	bl	8002c90 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e026      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047b6:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1f0      	bne.n	80047a4 <HAL_RCC_OscConfig+0x498>
 80047c2:	e01e      	b.n	8004802 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d107      	bne.n	80047dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e019      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
 80047d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCC_OscConfig+0x500>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d001      	beq.n	8004802 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000

08004810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e0d0      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004824:	4b6a      	ldr	r3, [pc, #424]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d910      	bls.n	8004854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b67      	ldr	r3, [pc, #412]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 0207 	bic.w	r2, r3, #7
 800483a:	4965      	ldr	r1, [pc, #404]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0b8      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d020      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800486c:	4b59      	ldr	r3, [pc, #356]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4a58      	ldr	r2, [pc, #352]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d005      	beq.n	8004890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004884:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a52      	ldr	r2, [pc, #328]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800488e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004890:	4b50      	ldr	r3, [pc, #320]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	494d      	ldr	r1, [pc, #308]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d040      	beq.n	8004930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b47      	ldr	r3, [pc, #284]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d115      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e07f      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d107      	bne.n	80048de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ce:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d109      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e073      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048de:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0302 	and.w	r3, r3, #2
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e06b      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ee:	4b39      	ldr	r3, [pc, #228]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f023 0203 	bic.w	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	4936      	ldr	r1, [pc, #216]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004900:	f7fe f9c6 	bl	8002c90 <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	e00a      	b.n	800491e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004908:	f7fe f9c2 	bl	8002c90 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	; 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d901      	bls.n	800491e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e053      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491e:	4b2d      	ldr	r3, [pc, #180]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f003 020c 	and.w	r2, r3, #12
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	429a      	cmp	r2, r3
 800492e:	d1eb      	bne.n	8004908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004930:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d210      	bcs.n	8004960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 0207 	bic.w	r2, r3, #7
 8004946:	4922      	ldr	r1, [pc, #136]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e032      	b.n	80049c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800496c:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4916      	ldr	r1, [pc, #88]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 800497a:	4313      	orrs	r3, r2
 800497c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d009      	beq.n	800499e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	490e      	ldr	r1, [pc, #56]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800499e:	f000 f821 	bl	80049e4 <HAL_RCC_GetSysClockFreq>
 80049a2:	4602      	mov	r2, r0
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_ClockConfig+0x1c4>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	091b      	lsrs	r3, r3, #4
 80049aa:	f003 030f 	and.w	r3, r3, #15
 80049ae:	490a      	ldr	r1, [pc, #40]	; (80049d8 <HAL_RCC_ClockConfig+0x1c8>)
 80049b0:	5ccb      	ldrb	r3, [r1, r3]
 80049b2:	fa22 f303 	lsr.w	r3, r2, r3
 80049b6:	4a09      	ldr	r2, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x1cc>)
 80049b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ba:	4b09      	ldr	r3, [pc, #36]	; (80049e0 <HAL_RCC_ClockConfig+0x1d0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe f924 	bl	8002c0c <HAL_InitTick>

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	40022000 	.word	0x40022000
 80049d4:	40021000 	.word	0x40021000
 80049d8:	08008d50 	.word	0x08008d50
 80049dc:	20000000 	.word	0x20000000
 80049e0:	20000004 	.word	0x20000004

080049e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	2300      	movs	r3, #0
 80049f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049fe:	4b1e      	ldr	r3, [pc, #120]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d002      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x30>
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0x36>
 8004a12:	e027      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a14:	4b19      	ldr	r3, [pc, #100]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a16:	613b      	str	r3, [r7, #16]
      break;
 8004a18:	e027      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	0c9b      	lsrs	r3, r3, #18
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a24:	5cd3      	ldrb	r3, [r2, r3]
 8004a26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d010      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x94>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	0c5b      	lsrs	r3, r3, #17
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a0d      	ldr	r2, [pc, #52]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a46:	fb03 f202 	mul.w	r2, r3, r2
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	e004      	b.n	8004a5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0c      	ldr	r2, [pc, #48]	; (8004a88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	613b      	str	r3, [r7, #16]
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x98>)
 8004a66:	613b      	str	r3, [r7, #16]
      break;
 8004a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6a:	693b      	ldr	r3, [r7, #16]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bc80      	pop	{r7}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	007a1200 	.word	0x007a1200
 8004a80:	08008d68 	.word	0x08008d68
 8004a84:	08008d78 	.word	0x08008d78
 8004a88:	003d0900 	.word	0x003d0900

08004a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a90:	4b02      	ldr	r3, [pc, #8]	; (8004a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a92:	681b      	ldr	r3, [r3, #0]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	20000000 	.word	0x20000000

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aa4:	f7ff fff2 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	08008d60 	.word	0x08008d60

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff ffde 	bl	8004a8c <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	0adb      	lsrs	r3, r3, #11
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	08008d60 	.word	0x08008d60

08004af0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004af8:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <RCC_Delay+0x34>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a0a      	ldr	r2, [pc, #40]	; (8004b28 <RCC_Delay+0x38>)
 8004afe:	fba2 2303 	umull	r2, r3, r2, r3
 8004b02:	0a5b      	lsrs	r3, r3, #9
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b0c:	bf00      	nop
  }
  while (Delay --);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1e5a      	subs	r2, r3, #1
 8004b12:	60fa      	str	r2, [r7, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f9      	bne.n	8004b0c <RCC_Delay+0x1c>
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	20000000 	.word	0x20000000
 8004b28:	10624dd3 	.word	0x10624dd3

08004b2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd ff18 	bl	8002988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fc18 	bl	80053a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d001      	beq.n	8004be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e03a      	b.n	8004c5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f042 0201 	orr.w	r2, r2, #1
 8004bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <HAL_TIM_Base_Start_IT+0x98>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00e      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x58>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0e:	d009      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x58>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_TIM_Base_Start_IT+0x58>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a13      	ldr	r2, [pc, #76]	; (8004c6c <HAL_TIM_Base_Start_IT+0xa0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d111      	bne.n	8004c48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b06      	cmp	r3, #6
 8004c34:	d010      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	e007      	b.n	8004c58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800

08004c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e041      	b.n	8004d06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f839 	bl	8004d0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f000 fb76 	bl	80053a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_TIM_PWM_Start+0x24>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e022      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d109      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x3e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e015      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d109      	bne.n	8004d78 <HAL_TIM_PWM_Start+0x58>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e008      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e05e      	b.n	8004e50 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0x82>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004da0:	e013      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x92>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db0:	e00b      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc0:	e003      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fd70 	bl	80058b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_TIM_PWM_Start+0x138>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d107      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a18      	ldr	r2, [pc, #96]	; (8004e58 <HAL_TIM_PWM_Start+0x138>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00e      	beq.n	8004e1a <HAL_TIM_PWM_Start+0xfa>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e04:	d009      	beq.n	8004e1a <HAL_TIM_PWM_Start+0xfa>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_TIM_PWM_Start+0x13c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d004      	beq.n	8004e1a <HAL_TIM_PWM_Start+0xfa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <HAL_TIM_PWM_Start+0x140>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d111      	bne.n	8004e3e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b06      	cmp	r3, #6
 8004e2a:	d010      	beq.n	8004e4e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	e007      	b.n	8004e4e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40000400 	.word	0x40000400
 8004e60:	40000800 	.word	0x40000800

08004e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d020      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01b      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0202 	mvn.w	r2, #2
 8004e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fa5a 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fa4d 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 fa5c 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01b      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0204 	mvn.w	r2, #4
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa34 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fa27 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fa36 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0208 	mvn.w	r2, #8
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2204      	movs	r2, #4
 8004f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa0e 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 fa01 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 fa10 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d020      	beq.n	8004fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d01b      	beq.n	8004fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0210 	mvn.w	r2, #16
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2208      	movs	r2, #8
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9e8 	bl	8005368 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9db 	bl	8005356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f9ea 	bl	800537a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f06f 0201 	mvn.w	r2, #1
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc f9da 	bl	8001384 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fced 	bl	80059ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00c      	beq.n	8005018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9ba 	bl	800538c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00c      	beq.n	800503c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d007      	beq.n	800503c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0220 	mvn.w	r2, #32
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fcc0 	bl	80059bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800505e:	2302      	movs	r3, #2
 8005060:	e0ae      	b.n	80051c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b0c      	cmp	r3, #12
 800506e:	f200 809f 	bhi.w	80051b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080051b1 	.word	0x080051b1
 8005080:	080051b1 	.word	0x080051b1
 8005084:	080051b1 	.word	0x080051b1
 8005088:	080050ed 	.word	0x080050ed
 800508c:	080051b1 	.word	0x080051b1
 8005090:	080051b1 	.word	0x080051b1
 8005094:	080051b1 	.word	0x080051b1
 8005098:	0800512f 	.word	0x0800512f
 800509c:	080051b1 	.word	0x080051b1
 80050a0:	080051b1 	.word	0x080051b1
 80050a4:	080051b1 	.word	0x080051b1
 80050a8:	0800516f 	.word	0x0800516f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68b9      	ldr	r1, [r7, #8]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f9e2 	bl	800547c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699a      	ldr	r2, [r3, #24]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0208 	orr.w	r2, r2, #8
 80050c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0204 	bic.w	r2, r2, #4
 80050d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6999      	ldr	r1, [r3, #24]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	619a      	str	r2, [r3, #24]
      break;
 80050ea:	e064      	b.n	80051b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fa28 	bl	8005548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6999      	ldr	r1, [r3, #24]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	021a      	lsls	r2, r3, #8
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	619a      	str	r2, [r3, #24]
      break;
 800512c:	e043      	b.n	80051b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68b9      	ldr	r1, [r7, #8]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fa71 	bl	800561c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f042 0208 	orr.w	r2, r2, #8
 8005148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0204 	bic.w	r2, r2, #4
 8005158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	69d9      	ldr	r1, [r3, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	61da      	str	r2, [r3, #28]
      break;
 800516c:	e023      	b.n	80051b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fabb 	bl	80056f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69d9      	ldr	r1, [r3, #28]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	021a      	lsls	r2, r3, #8
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	61da      	str	r2, [r3, #28]
      break;
 80051ae:	e002      	b.n	80051b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	75fb      	strb	r3, [r7, #23]
      break;
 80051b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051be:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_TIM_ConfigClockSource+0x1c>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e0b4      	b.n	800534e <HAL_TIM_ConfigClockSource+0x186>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800520a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d03e      	beq.n	800529c <HAL_TIM_ConfigClockSource+0xd4>
 800521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005222:	f200 8087 	bhi.w	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	f000 8086 	beq.w	800533a <HAL_TIM_ConfigClockSource+0x172>
 800522e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005232:	d87f      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b70      	cmp	r3, #112	; 0x70
 8005236:	d01a      	beq.n	800526e <HAL_TIM_ConfigClockSource+0xa6>
 8005238:	2b70      	cmp	r3, #112	; 0x70
 800523a:	d87b      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 800523c:	2b60      	cmp	r3, #96	; 0x60
 800523e:	d050      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0x11a>
 8005240:	2b60      	cmp	r3, #96	; 0x60
 8005242:	d877      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b50      	cmp	r3, #80	; 0x50
 8005246:	d03c      	beq.n	80052c2 <HAL_TIM_ConfigClockSource+0xfa>
 8005248:	2b50      	cmp	r3, #80	; 0x50
 800524a:	d873      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b40      	cmp	r3, #64	; 0x40
 800524e:	d058      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x13a>
 8005250:	2b40      	cmp	r3, #64	; 0x40
 8005252:	d86f      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b30      	cmp	r3, #48	; 0x30
 8005256:	d064      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 8005258:	2b30      	cmp	r3, #48	; 0x30
 800525a:	d86b      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b20      	cmp	r3, #32
 800525e:	d060      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 8005260:	2b20      	cmp	r3, #32
 8005262:	d867      	bhi.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05c      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 8005268:	2b10      	cmp	r3, #16
 800526a:	d05a      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x15a>
 800526c:	e062      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800527e:	f000 fafc 	bl	800587a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	609a      	str	r2, [r3, #8]
      break;
 800529a:	e04f      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052ac:	f000 fae5 	bl	800587a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052be:	609a      	str	r2, [r3, #8]
      break;
 80052c0:	e03c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ce:	461a      	mov	r2, r3
 80052d0:	f000 fa5c 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2150      	movs	r1, #80	; 0x50
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fab3 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 80052e0:	e02c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fa7a 	bl	80057e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2160      	movs	r1, #96	; 0x60
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 faa3 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 8005300:	e01c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fa3c 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fa93 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 8005320:	e00c      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4619      	mov	r1, r3
 800532c:	4610      	mov	r0, r2
 800532e:	f000 fa8a 	bl	8005846 <TIM_ITRx_SetConfig>
      break;
 8005332:	e003      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	73fb      	strb	r3, [r7, #15]
      break;
 8005338:	e000      	b.n	800533c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800533a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
	...

080053a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <TIM_Base_SetConfig+0xd0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053be:	d007      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <TIM_Base_SetConfig+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_Base_SetConfig+0x30>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <TIM_Base_SetConfig+0xd8>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d108      	bne.n	80053e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a22      	ldr	r2, [pc, #136]	; (8005470 <TIM_Base_SetConfig+0xd0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00b      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d007      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <TIM_Base_SetConfig+0xd4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <TIM_Base_SetConfig+0x62>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1e      	ldr	r2, [pc, #120]	; (8005478 <TIM_Base_SetConfig+0xd8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d108      	bne.n	8005414 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0d      	ldr	r2, [pc, #52]	; (8005470 <TIM_Base_SetConfig+0xd0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	611a      	str	r2, [r3, #16]
  }
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	40012c00 	.word	0x40012c00
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800

0800547c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	f023 0201 	bic.w	r2, r3, #1
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 0302 	bic.w	r3, r3, #2
 80054c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <TIM_OC1_SetConfig+0xc8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10c      	bne.n	80054f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0308 	bic.w	r3, r3, #8
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 0304 	bic.w	r3, r3, #4
 80054f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a13      	ldr	r2, [pc, #76]	; (8005544 <TIM_OC1_SetConfig+0xc8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d111      	bne.n	800551e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00

08005548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f023 0210 	bic.w	r2, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0320 	bic.w	r3, r3, #32
 8005592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <TIM_OC2_SetConfig+0xd0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d10d      	bne.n	80055c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a14      	ldr	r2, [pc, #80]	; (8005618 <TIM_OC2_SetConfig+0xd0>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d113      	bne.n	80055f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	40012c00 	.word	0x40012c00

0800561c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a1b      	ldr	r3, [r3, #32]
 8005630:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	021b      	lsls	r3, r3, #8
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <TIM_OC3_SetConfig+0xd0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10d      	bne.n	8005696 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	021b      	lsls	r3, r3, #8
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	4313      	orrs	r3, r2
 800568c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005694:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a14      	ldr	r2, [pc, #80]	; (80056ec <TIM_OC3_SetConfig+0xd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d113      	bne.n	80056c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	621a      	str	r2, [r3, #32]
}
 80056e0:	bf00      	nop
 80056e2:	371c      	adds	r7, #28
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	40012c00 	.word	0x40012c00

080056f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800571e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800573a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	031b      	lsls	r3, r3, #12
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a0f      	ldr	r2, [pc, #60]	; (8005788 <TIM_OC4_SetConfig+0x98>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d109      	bne.n	8005764 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005756:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	019b      	lsls	r3, r3, #6
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00

0800578c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 030a 	bic.w	r3, r3, #10
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 0210 	bic.w	r2, r3, #16
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	031b      	lsls	r3, r3, #12
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	4313      	orrs	r3, r2
 800581c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005824:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	621a      	str	r2, [r3, #32]
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	f043 0307 	orr.w	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr

0800587a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800587a:	b480      	push	{r7}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005894:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	431a      	orrs	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	609a      	str	r2, [r3, #8]
}
 80058ae:	bf00      	nop
 80058b0:	371c      	adds	r7, #28
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	2201      	movs	r2, #1
 80058cc:	fa02 f303 	lsl.w	r3, r2, r3
 80058d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	43db      	mvns	r3, r3
 80058da:	401a      	ands	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a1a      	ldr	r2, [r3, #32]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f003 031f 	and.w	r3, r3, #31
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	431a      	orrs	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005910:	2b01      	cmp	r3, #1
 8005912:	d101      	bne.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005914:	2302      	movs	r3, #2
 8005916:	e046      	b.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00e      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005964:	d009      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a12      	ldr	r2, [pc, #72]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d004      	beq.n	800597a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a10      	ldr	r2, [pc, #64]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d10c      	bne.n	8005994 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005980:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	4313      	orrs	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800

080059bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bc80      	pop	{r7}
 80059cc:	4770      	bx	lr

080059ce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e042      	b.n	8005a78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd f878 	bl	8002afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	; 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f971 	bl	8005d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08a      	sub	sp, #40	; 0x28
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	d175      	bne.n	8005b8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_UART_Transmit+0x2c>
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e06e      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2221      	movs	r2, #33	; 0x21
 8005aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005abe:	f7fd f8e7 	bl	8002c90 <HAL_GetTick>
 8005ac2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	88fa      	ldrh	r2, [r7, #6]
 8005ace:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad8:	d108      	bne.n	8005aec <HAL_UART_Transmit+0x6c>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	e003      	b.n	8005af4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005af4:	e02e      	b.n	8005b54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	2180      	movs	r1, #128	; 0x80
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f848 	bl	8005b96 <UART_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e03a      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	3302      	adds	r3, #2
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	e007      	b.n	8005b46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3301      	adds	r3, #1
 8005b44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1cb      	bne.n	8005af6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	2140      	movs	r1, #64	; 0x40
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f814 	bl	8005b96 <UART_WaitOnFlagUntilTimeout>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d005      	beq.n	8005b80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e006      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e000      	b.n	8005b8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b8c:	2302      	movs	r3, #2
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	603b      	str	r3, [r7, #0]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba6:	e03b      	b.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d037      	beq.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb0:	f7fd f86e 	bl	8002c90 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d302      	bcc.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e03a      	b.n	8005c40 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d023      	beq.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2b80      	cmp	r3, #128	; 0x80
 8005bdc:	d020      	beq.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b40      	cmp	r3, #64	; 0x40
 8005be2:	d01d      	beq.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d116      	bne.n	8005c20 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f81d 	bl	8005c48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2208      	movs	r2, #8
 8005c12:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e00f      	b.n	8005c40 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	bf0c      	ite	eq
 8005c30:	2301      	moveq	r3, #1
 8005c32:	2300      	movne	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d0b4      	beq.n	8005ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b095      	sub	sp, #84	; 0x54
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c70:	643a      	str	r2, [r7, #64]	; 0x40
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c78:	e841 2300 	strex	r3, r2, [r1]
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1e5      	bne.n	8005c50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3314      	adds	r3, #20
 8005c8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f023 0301 	bic.w	r3, r3, #1
 8005c9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e5      	bne.n	8005c84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d119      	bne.n	8005cf4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f023 0310 	bic.w	r3, r3, #16
 8005cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce0:	61ba      	str	r2, [r7, #24]
 8005ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6979      	ldr	r1, [r7, #20]
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	613b      	str	r3, [r7, #16]
   return(result);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d02:	bf00      	nop
 8005d04:	3754      	adds	r7, #84	; 0x54
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d46:	f023 030c 	bic.w	r3, r3, #12
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	6812      	ldr	r2, [r2, #0]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	430b      	orrs	r3, r1
 8005d52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <UART_SetConfig+0x114>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d103      	bne.n	8005d7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d74:	f7fe fea8 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	e002      	b.n	8005d82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d7c:	f7fe fe90 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8005d80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009a      	lsls	r2, r3, #2
 8005d8c:	441a      	add	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	4a22      	ldr	r2, [pc, #136]	; (8005e24 <UART_SetConfig+0x118>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	0119      	lsls	r1, r3, #4
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009a      	lsls	r2, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005db8:	4b1a      	ldr	r3, [pc, #104]	; (8005e24 <UART_SetConfig+0x118>)
 8005dba:	fba3 0302 	umull	r0, r3, r3, r2
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2064      	movs	r0, #100	; 0x64
 8005dc2:	fb00 f303 	mul.w	r3, r0, r3
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	3332      	adds	r3, #50	; 0x32
 8005dcc:	4a15      	ldr	r2, [pc, #84]	; (8005e24 <UART_SetConfig+0x118>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd8:	4419      	add	r1, r3
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009a      	lsls	r2, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	fbb2 f2f3 	udiv	r2, r2, r3
 8005df0:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <UART_SetConfig+0x118>)
 8005df2:	fba3 0302 	umull	r0, r3, r3, r2
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	2064      	movs	r0, #100	; 0x64
 8005dfa:	fb00 f303 	mul.w	r3, r0, r3
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	3332      	adds	r3, #50	; 0x32
 8005e04:	4a07      	ldr	r2, [pc, #28]	; (8005e24 <UART_SetConfig+0x118>)
 8005e06:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0a:	095b      	lsrs	r3, r3, #5
 8005e0c:	f003 020f 	and.w	r2, r3, #15
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	440a      	add	r2, r1
 8005e16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e18:	bf00      	nop
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40013800 	.word	0x40013800
 8005e24:	51eb851f 	.word	0x51eb851f

08005e28 <__cvt>:
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2e:	461f      	mov	r7, r3
 8005e30:	bfbb      	ittet	lt
 8005e32:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	461f      	movlt	r7, r3
 8005e38:	2300      	movge	r3, #0
 8005e3a:	232d      	movlt	r3, #45	; 0x2d
 8005e3c:	b088      	sub	sp, #32
 8005e3e:	4614      	mov	r4, r2
 8005e40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e44:	7013      	strb	r3, [r2, #0]
 8005e46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e48:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e4c:	f023 0820 	bic.w	r8, r3, #32
 8005e50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e54:	d005      	beq.n	8005e62 <__cvt+0x3a>
 8005e56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e5a:	d100      	bne.n	8005e5e <__cvt+0x36>
 8005e5c:	3501      	adds	r5, #1
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e000      	b.n	8005e64 <__cvt+0x3c>
 8005e62:	2303      	movs	r3, #3
 8005e64:	aa07      	add	r2, sp, #28
 8005e66:	9204      	str	r2, [sp, #16]
 8005e68:	aa06      	add	r2, sp, #24
 8005e6a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e6e:	e9cd 3500 	strd	r3, r5, [sp]
 8005e72:	4622      	mov	r2, r4
 8005e74:	463b      	mov	r3, r7
 8005e76:	f000 ff4f 	bl	8006d18 <_dtoa_r>
 8005e7a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e7e:	4606      	mov	r6, r0
 8005e80:	d102      	bne.n	8005e88 <__cvt+0x60>
 8005e82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e84:	07db      	lsls	r3, r3, #31
 8005e86:	d522      	bpl.n	8005ece <__cvt+0xa6>
 8005e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e8c:	eb06 0905 	add.w	r9, r6, r5
 8005e90:	d110      	bne.n	8005eb4 <__cvt+0x8c>
 8005e92:	7833      	ldrb	r3, [r6, #0]
 8005e94:	2b30      	cmp	r3, #48	; 0x30
 8005e96:	d10a      	bne.n	8005eae <__cvt+0x86>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4639      	mov	r1, r7
 8005ea0:	f7fa fd82 	bl	80009a8 <__aeabi_dcmpeq>
 8005ea4:	b918      	cbnz	r0, 8005eae <__cvt+0x86>
 8005ea6:	f1c5 0501 	rsb	r5, r5, #1
 8005eaa:	f8ca 5000 	str.w	r5, [sl]
 8005eae:	f8da 3000 	ldr.w	r3, [sl]
 8005eb2:	4499      	add	r9, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	4620      	mov	r0, r4
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f7fa fd74 	bl	80009a8 <__aeabi_dcmpeq>
 8005ec0:	b108      	cbz	r0, 8005ec6 <__cvt+0x9e>
 8005ec2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ec6:	2230      	movs	r2, #48	; 0x30
 8005ec8:	9b07      	ldr	r3, [sp, #28]
 8005eca:	454b      	cmp	r3, r9
 8005ecc:	d307      	bcc.n	8005ede <__cvt+0xb6>
 8005ece:	4630      	mov	r0, r6
 8005ed0:	9b07      	ldr	r3, [sp, #28]
 8005ed2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ed4:	1b9b      	subs	r3, r3, r6
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	b008      	add	sp, #32
 8005eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ede:	1c59      	adds	r1, r3, #1
 8005ee0:	9107      	str	r1, [sp, #28]
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e7f0      	b.n	8005ec8 <__cvt+0xa0>

08005ee6 <__exponent>:
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eea:	2900      	cmp	r1, #0
 8005eec:	f803 2b02 	strb.w	r2, [r3], #2
 8005ef0:	bfb6      	itet	lt
 8005ef2:	222d      	movlt	r2, #45	; 0x2d
 8005ef4:	222b      	movge	r2, #43	; 0x2b
 8005ef6:	4249      	neglt	r1, r1
 8005ef8:	2909      	cmp	r1, #9
 8005efa:	7042      	strb	r2, [r0, #1]
 8005efc:	dd2a      	ble.n	8005f54 <__exponent+0x6e>
 8005efe:	f10d 0207 	add.w	r2, sp, #7
 8005f02:	4617      	mov	r7, r2
 8005f04:	260a      	movs	r6, #10
 8005f06:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f0a:	4694      	mov	ip, r2
 8005f0c:	fb06 1415 	mls	r4, r6, r5, r1
 8005f10:	3430      	adds	r4, #48	; 0x30
 8005f12:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f16:	460c      	mov	r4, r1
 8005f18:	2c63      	cmp	r4, #99	; 0x63
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005f20:	dcf1      	bgt.n	8005f06 <__exponent+0x20>
 8005f22:	3130      	adds	r1, #48	; 0x30
 8005f24:	f1ac 0402 	sub.w	r4, ip, #2
 8005f28:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	1c41      	adds	r1, r0, #1
 8005f30:	42ba      	cmp	r2, r7
 8005f32:	d30a      	bcc.n	8005f4a <__exponent+0x64>
 8005f34:	f10d 0209 	add.w	r2, sp, #9
 8005f38:	eba2 020c 	sub.w	r2, r2, ip
 8005f3c:	42bc      	cmp	r4, r7
 8005f3e:	bf88      	it	hi
 8005f40:	2200      	movhi	r2, #0
 8005f42:	4413      	add	r3, r2
 8005f44:	1a18      	subs	r0, r3, r0
 8005f46:	b003      	add	sp, #12
 8005f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f4a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f4e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f52:	e7ed      	b.n	8005f30 <__exponent+0x4a>
 8005f54:	2330      	movs	r3, #48	; 0x30
 8005f56:	3130      	adds	r1, #48	; 0x30
 8005f58:	7083      	strb	r3, [r0, #2]
 8005f5a:	70c1      	strb	r1, [r0, #3]
 8005f5c:	1d03      	adds	r3, r0, #4
 8005f5e:	e7f1      	b.n	8005f44 <__exponent+0x5e>

08005f60 <_printf_float>:
 8005f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f64:	b091      	sub	sp, #68	; 0x44
 8005f66:	460c      	mov	r4, r1
 8005f68:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f6c:	4616      	mov	r6, r2
 8005f6e:	461f      	mov	r7, r3
 8005f70:	4605      	mov	r5, r0
 8005f72:	f000 fdb5 	bl	8006ae0 <_localeconv_r>
 8005f76:	6803      	ldr	r3, [r0, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7c:	f7fa f8e8 	bl	8000150 <strlen>
 8005f80:	2300      	movs	r3, #0
 8005f82:	930e      	str	r3, [sp, #56]	; 0x38
 8005f84:	f8d8 3000 	ldr.w	r3, [r8]
 8005f88:	900a      	str	r0, [sp, #40]	; 0x28
 8005f8a:	3307      	adds	r3, #7
 8005f8c:	f023 0307 	bic.w	r3, r3, #7
 8005f90:	f103 0208 	add.w	r2, r3, #8
 8005f94:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005f98:	f8d4 b000 	ldr.w	fp, [r4]
 8005f9c:	f8c8 2000 	str.w	r2, [r8]
 8005fa0:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005fa4:	4652      	mov	r2, sl
 8005fa6:	4643      	mov	r3, r8
 8005fa8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fac:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005fb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb6:	4650      	mov	r0, sl
 8005fb8:	4b9c      	ldr	r3, [pc, #624]	; (800622c <_printf_float+0x2cc>)
 8005fba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fbc:	f7fa fd26 	bl	8000a0c <__aeabi_dcmpun>
 8005fc0:	bb70      	cbnz	r0, 8006020 <_printf_float+0xc0>
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	4b98      	ldr	r3, [pc, #608]	; (800622c <_printf_float+0x2cc>)
 8005fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fcc:	f7fa fd00 	bl	80009d0 <__aeabi_dcmple>
 8005fd0:	bb30      	cbnz	r0, 8006020 <_printf_float+0xc0>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	4641      	mov	r1, r8
 8005fda:	f7fa fcef 	bl	80009bc <__aeabi_dcmplt>
 8005fde:	b110      	cbz	r0, 8005fe6 <_printf_float+0x86>
 8005fe0:	232d      	movs	r3, #45	; 0x2d
 8005fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe6:	4a92      	ldr	r2, [pc, #584]	; (8006230 <_printf_float+0x2d0>)
 8005fe8:	4b92      	ldr	r3, [pc, #584]	; (8006234 <_printf_float+0x2d4>)
 8005fea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005fee:	bf94      	ite	ls
 8005ff0:	4690      	movls	r8, r2
 8005ff2:	4698      	movhi	r8, r3
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	f04f 0a00 	mov.w	sl, #0
 8005ffa:	6123      	str	r3, [r4, #16]
 8005ffc:	f02b 0304 	bic.w	r3, fp, #4
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	4633      	mov	r3, r6
 8006004:	4621      	mov	r1, r4
 8006006:	4628      	mov	r0, r5
 8006008:	9700      	str	r7, [sp, #0]
 800600a:	aa0f      	add	r2, sp, #60	; 0x3c
 800600c:	f000 f9d6 	bl	80063bc <_printf_common>
 8006010:	3001      	adds	r0, #1
 8006012:	f040 8090 	bne.w	8006136 <_printf_float+0x1d6>
 8006016:	f04f 30ff 	mov.w	r0, #4294967295
 800601a:	b011      	add	sp, #68	; 0x44
 800601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	4652      	mov	r2, sl
 8006022:	4643      	mov	r3, r8
 8006024:	4650      	mov	r0, sl
 8006026:	4641      	mov	r1, r8
 8006028:	f7fa fcf0 	bl	8000a0c <__aeabi_dcmpun>
 800602c:	b148      	cbz	r0, 8006042 <_printf_float+0xe2>
 800602e:	f1b8 0f00 	cmp.w	r8, #0
 8006032:	bfb8      	it	lt
 8006034:	232d      	movlt	r3, #45	; 0x2d
 8006036:	4a80      	ldr	r2, [pc, #512]	; (8006238 <_printf_float+0x2d8>)
 8006038:	bfb8      	it	lt
 800603a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800603e:	4b7f      	ldr	r3, [pc, #508]	; (800623c <_printf_float+0x2dc>)
 8006040:	e7d3      	b.n	8005fea <_printf_float+0x8a>
 8006042:	6863      	ldr	r3, [r4, #4]
 8006044:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	d142      	bne.n	80060d2 <_printf_float+0x172>
 800604c:	2306      	movs	r3, #6
 800604e:	6063      	str	r3, [r4, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	9206      	str	r2, [sp, #24]
 8006054:	aa0e      	add	r2, sp, #56	; 0x38
 8006056:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800605a:	aa0d      	add	r2, sp, #52	; 0x34
 800605c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006060:	9203      	str	r2, [sp, #12]
 8006062:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006066:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	6863      	ldr	r3, [r4, #4]
 800606e:	4652      	mov	r2, sl
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4628      	mov	r0, r5
 8006074:	4643      	mov	r3, r8
 8006076:	910b      	str	r1, [sp, #44]	; 0x2c
 8006078:	f7ff fed6 	bl	8005e28 <__cvt>
 800607c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800607e:	4680      	mov	r8, r0
 8006080:	2947      	cmp	r1, #71	; 0x47
 8006082:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006084:	d108      	bne.n	8006098 <_printf_float+0x138>
 8006086:	1cc8      	adds	r0, r1, #3
 8006088:	db02      	blt.n	8006090 <_printf_float+0x130>
 800608a:	6863      	ldr	r3, [r4, #4]
 800608c:	4299      	cmp	r1, r3
 800608e:	dd40      	ble.n	8006112 <_printf_float+0x1b2>
 8006090:	f1a9 0902 	sub.w	r9, r9, #2
 8006094:	fa5f f989 	uxtb.w	r9, r9
 8006098:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800609c:	d81f      	bhi.n	80060de <_printf_float+0x17e>
 800609e:	464a      	mov	r2, r9
 80060a0:	3901      	subs	r1, #1
 80060a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060a6:	910d      	str	r1, [sp, #52]	; 0x34
 80060a8:	f7ff ff1d 	bl	8005ee6 <__exponent>
 80060ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060ae:	4682      	mov	sl, r0
 80060b0:	1813      	adds	r3, r2, r0
 80060b2:	2a01      	cmp	r2, #1
 80060b4:	6123      	str	r3, [r4, #16]
 80060b6:	dc02      	bgt.n	80060be <_printf_float+0x15e>
 80060b8:	6822      	ldr	r2, [r4, #0]
 80060ba:	07d2      	lsls	r2, r2, #31
 80060bc:	d501      	bpl.n	80060c2 <_printf_float+0x162>
 80060be:	3301      	adds	r3, #1
 80060c0:	6123      	str	r3, [r4, #16]
 80060c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d09b      	beq.n	8006002 <_printf_float+0xa2>
 80060ca:	232d      	movs	r3, #45	; 0x2d
 80060cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060d0:	e797      	b.n	8006002 <_printf_float+0xa2>
 80060d2:	2947      	cmp	r1, #71	; 0x47
 80060d4:	d1bc      	bne.n	8006050 <_printf_float+0xf0>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1ba      	bne.n	8006050 <_printf_float+0xf0>
 80060da:	2301      	movs	r3, #1
 80060dc:	e7b7      	b.n	800604e <_printf_float+0xee>
 80060de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80060e2:	d118      	bne.n	8006116 <_printf_float+0x1b6>
 80060e4:	2900      	cmp	r1, #0
 80060e6:	6863      	ldr	r3, [r4, #4]
 80060e8:	dd0b      	ble.n	8006102 <_printf_float+0x1a2>
 80060ea:	6121      	str	r1, [r4, #16]
 80060ec:	b913      	cbnz	r3, 80060f4 <_printf_float+0x194>
 80060ee:	6822      	ldr	r2, [r4, #0]
 80060f0:	07d0      	lsls	r0, r2, #31
 80060f2:	d502      	bpl.n	80060fa <_printf_float+0x19a>
 80060f4:	3301      	adds	r3, #1
 80060f6:	440b      	add	r3, r1
 80060f8:	6123      	str	r3, [r4, #16]
 80060fa:	f04f 0a00 	mov.w	sl, #0
 80060fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8006100:	e7df      	b.n	80060c2 <_printf_float+0x162>
 8006102:	b913      	cbnz	r3, 800610a <_printf_float+0x1aa>
 8006104:	6822      	ldr	r2, [r4, #0]
 8006106:	07d2      	lsls	r2, r2, #31
 8006108:	d501      	bpl.n	800610e <_printf_float+0x1ae>
 800610a:	3302      	adds	r3, #2
 800610c:	e7f4      	b.n	80060f8 <_printf_float+0x198>
 800610e:	2301      	movs	r3, #1
 8006110:	e7f2      	b.n	80060f8 <_printf_float+0x198>
 8006112:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006118:	4299      	cmp	r1, r3
 800611a:	db05      	blt.n	8006128 <_printf_float+0x1c8>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	6121      	str	r1, [r4, #16]
 8006120:	07d8      	lsls	r0, r3, #31
 8006122:	d5ea      	bpl.n	80060fa <_printf_float+0x19a>
 8006124:	1c4b      	adds	r3, r1, #1
 8006126:	e7e7      	b.n	80060f8 <_printf_float+0x198>
 8006128:	2900      	cmp	r1, #0
 800612a:	bfcc      	ite	gt
 800612c:	2201      	movgt	r2, #1
 800612e:	f1c1 0202 	rsble	r2, r1, #2
 8006132:	4413      	add	r3, r2
 8006134:	e7e0      	b.n	80060f8 <_printf_float+0x198>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	055a      	lsls	r2, r3, #21
 800613a:	d407      	bmi.n	800614c <_printf_float+0x1ec>
 800613c:	6923      	ldr	r3, [r4, #16]
 800613e:	4642      	mov	r2, r8
 8006140:	4631      	mov	r1, r6
 8006142:	4628      	mov	r0, r5
 8006144:	47b8      	blx	r7
 8006146:	3001      	adds	r0, #1
 8006148:	d12b      	bne.n	80061a2 <_printf_float+0x242>
 800614a:	e764      	b.n	8006016 <_printf_float+0xb6>
 800614c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006150:	f240 80dd 	bls.w	800630e <_printf_float+0x3ae>
 8006154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006158:	2200      	movs	r2, #0
 800615a:	2300      	movs	r3, #0
 800615c:	f7fa fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8006160:	2800      	cmp	r0, #0
 8006162:	d033      	beq.n	80061cc <_printf_float+0x26c>
 8006164:	2301      	movs	r3, #1
 8006166:	4631      	mov	r1, r6
 8006168:	4628      	mov	r0, r5
 800616a:	4a35      	ldr	r2, [pc, #212]	; (8006240 <_printf_float+0x2e0>)
 800616c:	47b8      	blx	r7
 800616e:	3001      	adds	r0, #1
 8006170:	f43f af51 	beq.w	8006016 <_printf_float+0xb6>
 8006174:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006178:	429a      	cmp	r2, r3
 800617a:	db02      	blt.n	8006182 <_printf_float+0x222>
 800617c:	6823      	ldr	r3, [r4, #0]
 800617e:	07d8      	lsls	r0, r3, #31
 8006180:	d50f      	bpl.n	80061a2 <_printf_float+0x242>
 8006182:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006186:	4631      	mov	r1, r6
 8006188:	4628      	mov	r0, r5
 800618a:	47b8      	blx	r7
 800618c:	3001      	adds	r0, #1
 800618e:	f43f af42 	beq.w	8006016 <_printf_float+0xb6>
 8006192:	f04f 0800 	mov.w	r8, #0
 8006196:	f104 091a 	add.w	r9, r4, #26
 800619a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800619c:	3b01      	subs	r3, #1
 800619e:	4543      	cmp	r3, r8
 80061a0:	dc09      	bgt.n	80061b6 <_printf_float+0x256>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	079b      	lsls	r3, r3, #30
 80061a6:	f100 8104 	bmi.w	80063b2 <_printf_float+0x452>
 80061aa:	68e0      	ldr	r0, [r4, #12]
 80061ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061ae:	4298      	cmp	r0, r3
 80061b0:	bfb8      	it	lt
 80061b2:	4618      	movlt	r0, r3
 80061b4:	e731      	b.n	800601a <_printf_float+0xba>
 80061b6:	2301      	movs	r3, #1
 80061b8:	464a      	mov	r2, r9
 80061ba:	4631      	mov	r1, r6
 80061bc:	4628      	mov	r0, r5
 80061be:	47b8      	blx	r7
 80061c0:	3001      	adds	r0, #1
 80061c2:	f43f af28 	beq.w	8006016 <_printf_float+0xb6>
 80061c6:	f108 0801 	add.w	r8, r8, #1
 80061ca:	e7e6      	b.n	800619a <_printf_float+0x23a>
 80061cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dc38      	bgt.n	8006244 <_printf_float+0x2e4>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	4a19      	ldr	r2, [pc, #100]	; (8006240 <_printf_float+0x2e0>)
 80061da:	47b8      	blx	r7
 80061dc:	3001      	adds	r0, #1
 80061de:	f43f af1a 	beq.w	8006016 <_printf_float+0xb6>
 80061e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80061e6:	4313      	orrs	r3, r2
 80061e8:	d102      	bne.n	80061f0 <_printf_float+0x290>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	07d9      	lsls	r1, r3, #31
 80061ee:	d5d8      	bpl.n	80061a2 <_printf_float+0x242>
 80061f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061f4:	4631      	mov	r1, r6
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	f43f af0b 	beq.w	8006016 <_printf_float+0xb6>
 8006200:	f04f 0900 	mov.w	r9, #0
 8006204:	f104 0a1a 	add.w	sl, r4, #26
 8006208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800620a:	425b      	negs	r3, r3
 800620c:	454b      	cmp	r3, r9
 800620e:	dc01      	bgt.n	8006214 <_printf_float+0x2b4>
 8006210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006212:	e794      	b.n	800613e <_printf_float+0x1de>
 8006214:	2301      	movs	r3, #1
 8006216:	4652      	mov	r2, sl
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	f43f aef9 	beq.w	8006016 <_printf_float+0xb6>
 8006224:	f109 0901 	add.w	r9, r9, #1
 8006228:	e7ee      	b.n	8006208 <_printf_float+0x2a8>
 800622a:	bf00      	nop
 800622c:	7fefffff 	.word	0x7fefffff
 8006230:	08008d7a 	.word	0x08008d7a
 8006234:	08008d7e 	.word	0x08008d7e
 8006238:	08008d82 	.word	0x08008d82
 800623c:	08008d86 	.word	0x08008d86
 8006240:	08008d8a 	.word	0x08008d8a
 8006244:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006246:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006248:	429a      	cmp	r2, r3
 800624a:	bfa8      	it	ge
 800624c:	461a      	movge	r2, r3
 800624e:	2a00      	cmp	r2, #0
 8006250:	4691      	mov	r9, r2
 8006252:	dc37      	bgt.n	80062c4 <_printf_float+0x364>
 8006254:	f04f 0b00 	mov.w	fp, #0
 8006258:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800625c:	f104 021a 	add.w	r2, r4, #26
 8006260:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006264:	ebaa 0309 	sub.w	r3, sl, r9
 8006268:	455b      	cmp	r3, fp
 800626a:	dc33      	bgt.n	80062d4 <_printf_float+0x374>
 800626c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006270:	429a      	cmp	r2, r3
 8006272:	db3b      	blt.n	80062ec <_printf_float+0x38c>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	07da      	lsls	r2, r3, #31
 8006278:	d438      	bmi.n	80062ec <_printf_float+0x38c>
 800627a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800627e:	eba2 0903 	sub.w	r9, r2, r3
 8006282:	eba2 020a 	sub.w	r2, r2, sl
 8006286:	4591      	cmp	r9, r2
 8006288:	bfa8      	it	ge
 800628a:	4691      	movge	r9, r2
 800628c:	f1b9 0f00 	cmp.w	r9, #0
 8006290:	dc34      	bgt.n	80062fc <_printf_float+0x39c>
 8006292:	f04f 0800 	mov.w	r8, #0
 8006296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800629a:	f104 0a1a 	add.w	sl, r4, #26
 800629e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062a2:	1a9b      	subs	r3, r3, r2
 80062a4:	eba3 0309 	sub.w	r3, r3, r9
 80062a8:	4543      	cmp	r3, r8
 80062aa:	f77f af7a 	ble.w	80061a2 <_printf_float+0x242>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4652      	mov	r2, sl
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	f43f aeac 	beq.w	8006016 <_printf_float+0xb6>
 80062be:	f108 0801 	add.w	r8, r8, #1
 80062c2:	e7ec      	b.n	800629e <_printf_float+0x33e>
 80062c4:	4613      	mov	r3, r2
 80062c6:	4631      	mov	r1, r6
 80062c8:	4642      	mov	r2, r8
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	d1c0      	bne.n	8006254 <_printf_float+0x2f4>
 80062d2:	e6a0      	b.n	8006016 <_printf_float+0xb6>
 80062d4:	2301      	movs	r3, #1
 80062d6:	4631      	mov	r1, r6
 80062d8:	4628      	mov	r0, r5
 80062da:	920b      	str	r2, [sp, #44]	; 0x2c
 80062dc:	47b8      	blx	r7
 80062de:	3001      	adds	r0, #1
 80062e0:	f43f ae99 	beq.w	8006016 <_printf_float+0xb6>
 80062e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062e6:	f10b 0b01 	add.w	fp, fp, #1
 80062ea:	e7b9      	b.n	8006260 <_printf_float+0x300>
 80062ec:	4631      	mov	r1, r6
 80062ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	d1bf      	bne.n	800627a <_printf_float+0x31a>
 80062fa:	e68c      	b.n	8006016 <_printf_float+0xb6>
 80062fc:	464b      	mov	r3, r9
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	eb08 020a 	add.w	r2, r8, sl
 8006306:	47b8      	blx	r7
 8006308:	3001      	adds	r0, #1
 800630a:	d1c2      	bne.n	8006292 <_printf_float+0x332>
 800630c:	e683      	b.n	8006016 <_printf_float+0xb6>
 800630e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006310:	2a01      	cmp	r2, #1
 8006312:	dc01      	bgt.n	8006318 <_printf_float+0x3b8>
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	d539      	bpl.n	800638c <_printf_float+0x42c>
 8006318:	2301      	movs	r3, #1
 800631a:	4642      	mov	r2, r8
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	f43f ae77 	beq.w	8006016 <_printf_float+0xb6>
 8006328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f ae6f 	beq.w	8006016 <_printf_float+0xb6>
 8006338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800633c:	2200      	movs	r2, #0
 800633e:	2300      	movs	r3, #0
 8006340:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006344:	f7fa fb30 	bl	80009a8 <__aeabi_dcmpeq>
 8006348:	b9d8      	cbnz	r0, 8006382 <_printf_float+0x422>
 800634a:	f109 33ff 	add.w	r3, r9, #4294967295
 800634e:	f108 0201 	add.w	r2, r8, #1
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	d10e      	bne.n	800637a <_printf_float+0x41a>
 800635c:	e65b      	b.n	8006016 <_printf_float+0xb6>
 800635e:	2301      	movs	r3, #1
 8006360:	464a      	mov	r2, r9
 8006362:	4631      	mov	r1, r6
 8006364:	4628      	mov	r0, r5
 8006366:	47b8      	blx	r7
 8006368:	3001      	adds	r0, #1
 800636a:	f43f ae54 	beq.w	8006016 <_printf_float+0xb6>
 800636e:	f108 0801 	add.w	r8, r8, #1
 8006372:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006374:	3b01      	subs	r3, #1
 8006376:	4543      	cmp	r3, r8
 8006378:	dcf1      	bgt.n	800635e <_printf_float+0x3fe>
 800637a:	4653      	mov	r3, sl
 800637c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006380:	e6de      	b.n	8006140 <_printf_float+0x1e0>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	f104 091a 	add.w	r9, r4, #26
 800638a:	e7f2      	b.n	8006372 <_printf_float+0x412>
 800638c:	2301      	movs	r3, #1
 800638e:	4642      	mov	r2, r8
 8006390:	e7df      	b.n	8006352 <_printf_float+0x3f2>
 8006392:	2301      	movs	r3, #1
 8006394:	464a      	mov	r2, r9
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae3a 	beq.w	8006016 <_printf_float+0xb6>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	4543      	cmp	r3, r8
 80063ae:	dcf0      	bgt.n	8006392 <_printf_float+0x432>
 80063b0:	e6fb      	b.n	80061aa <_printf_float+0x24a>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	f104 0919 	add.w	r9, r4, #25
 80063ba:	e7f4      	b.n	80063a6 <_printf_float+0x446>

080063bc <_printf_common>:
 80063bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c0:	4616      	mov	r6, r2
 80063c2:	4699      	mov	r9, r3
 80063c4:	688a      	ldr	r2, [r1, #8]
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	4607      	mov	r7, r0
 80063ca:	4293      	cmp	r3, r2
 80063cc:	bfb8      	it	lt
 80063ce:	4613      	movlt	r3, r2
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063d6:	460c      	mov	r4, r1
 80063d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063dc:	b10a      	cbz	r2, 80063e2 <_printf_common+0x26>
 80063de:	3301      	adds	r3, #1
 80063e0:	6033      	str	r3, [r6, #0]
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	0699      	lsls	r1, r3, #26
 80063e6:	bf42      	ittt	mi
 80063e8:	6833      	ldrmi	r3, [r6, #0]
 80063ea:	3302      	addmi	r3, #2
 80063ec:	6033      	strmi	r3, [r6, #0]
 80063ee:	6825      	ldr	r5, [r4, #0]
 80063f0:	f015 0506 	ands.w	r5, r5, #6
 80063f4:	d106      	bne.n	8006404 <_printf_common+0x48>
 80063f6:	f104 0a19 	add.w	sl, r4, #25
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	6832      	ldr	r2, [r6, #0]
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	42ab      	cmp	r3, r5
 8006402:	dc2b      	bgt.n	800645c <_printf_common+0xa0>
 8006404:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006408:	1e13      	subs	r3, r2, #0
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	bf18      	it	ne
 800640e:	2301      	movne	r3, #1
 8006410:	0692      	lsls	r2, r2, #26
 8006412:	d430      	bmi.n	8006476 <_printf_common+0xba>
 8006414:	4649      	mov	r1, r9
 8006416:	4638      	mov	r0, r7
 8006418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800641c:	47c0      	blx	r8
 800641e:	3001      	adds	r0, #1
 8006420:	d023      	beq.n	800646a <_printf_common+0xae>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	6922      	ldr	r2, [r4, #16]
 8006426:	f003 0306 	and.w	r3, r3, #6
 800642a:	2b04      	cmp	r3, #4
 800642c:	bf14      	ite	ne
 800642e:	2500      	movne	r5, #0
 8006430:	6833      	ldreq	r3, [r6, #0]
 8006432:	f04f 0600 	mov.w	r6, #0
 8006436:	bf08      	it	eq
 8006438:	68e5      	ldreq	r5, [r4, #12]
 800643a:	f104 041a 	add.w	r4, r4, #26
 800643e:	bf08      	it	eq
 8006440:	1aed      	subeq	r5, r5, r3
 8006442:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006446:	bf08      	it	eq
 8006448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800644c:	4293      	cmp	r3, r2
 800644e:	bfc4      	itt	gt
 8006450:	1a9b      	subgt	r3, r3, r2
 8006452:	18ed      	addgt	r5, r5, r3
 8006454:	42b5      	cmp	r5, r6
 8006456:	d11a      	bne.n	800648e <_printf_common+0xd2>
 8006458:	2000      	movs	r0, #0
 800645a:	e008      	b.n	800646e <_printf_common+0xb2>
 800645c:	2301      	movs	r3, #1
 800645e:	4652      	mov	r2, sl
 8006460:	4649      	mov	r1, r9
 8006462:	4638      	mov	r0, r7
 8006464:	47c0      	blx	r8
 8006466:	3001      	adds	r0, #1
 8006468:	d103      	bne.n	8006472 <_printf_common+0xb6>
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006472:	3501      	adds	r5, #1
 8006474:	e7c1      	b.n	80063fa <_printf_common+0x3e>
 8006476:	2030      	movs	r0, #48	; 0x30
 8006478:	18e1      	adds	r1, r4, r3
 800647a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006484:	4422      	add	r2, r4
 8006486:	3302      	adds	r3, #2
 8006488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800648c:	e7c2      	b.n	8006414 <_printf_common+0x58>
 800648e:	2301      	movs	r3, #1
 8006490:	4622      	mov	r2, r4
 8006492:	4649      	mov	r1, r9
 8006494:	4638      	mov	r0, r7
 8006496:	47c0      	blx	r8
 8006498:	3001      	adds	r0, #1
 800649a:	d0e6      	beq.n	800646a <_printf_common+0xae>
 800649c:	3601      	adds	r6, #1
 800649e:	e7d9      	b.n	8006454 <_printf_common+0x98>

080064a0 <_printf_i>:
 80064a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064a4:	7e0f      	ldrb	r7, [r1, #24]
 80064a6:	4691      	mov	r9, r2
 80064a8:	2f78      	cmp	r7, #120	; 0x78
 80064aa:	4680      	mov	r8, r0
 80064ac:	460c      	mov	r4, r1
 80064ae:	469a      	mov	sl, r3
 80064b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064b6:	d807      	bhi.n	80064c8 <_printf_i+0x28>
 80064b8:	2f62      	cmp	r7, #98	; 0x62
 80064ba:	d80a      	bhi.n	80064d2 <_printf_i+0x32>
 80064bc:	2f00      	cmp	r7, #0
 80064be:	f000 80d5 	beq.w	800666c <_printf_i+0x1cc>
 80064c2:	2f58      	cmp	r7, #88	; 0x58
 80064c4:	f000 80c1 	beq.w	800664a <_printf_i+0x1aa>
 80064c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064d0:	e03a      	b.n	8006548 <_printf_i+0xa8>
 80064d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064d6:	2b15      	cmp	r3, #21
 80064d8:	d8f6      	bhi.n	80064c8 <_printf_i+0x28>
 80064da:	a101      	add	r1, pc, #4	; (adr r1, 80064e0 <_printf_i+0x40>)
 80064dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064e0:	08006539 	.word	0x08006539
 80064e4:	0800654d 	.word	0x0800654d
 80064e8:	080064c9 	.word	0x080064c9
 80064ec:	080064c9 	.word	0x080064c9
 80064f0:	080064c9 	.word	0x080064c9
 80064f4:	080064c9 	.word	0x080064c9
 80064f8:	0800654d 	.word	0x0800654d
 80064fc:	080064c9 	.word	0x080064c9
 8006500:	080064c9 	.word	0x080064c9
 8006504:	080064c9 	.word	0x080064c9
 8006508:	080064c9 	.word	0x080064c9
 800650c:	08006653 	.word	0x08006653
 8006510:	08006579 	.word	0x08006579
 8006514:	0800660d 	.word	0x0800660d
 8006518:	080064c9 	.word	0x080064c9
 800651c:	080064c9 	.word	0x080064c9
 8006520:	08006675 	.word	0x08006675
 8006524:	080064c9 	.word	0x080064c9
 8006528:	08006579 	.word	0x08006579
 800652c:	080064c9 	.word	0x080064c9
 8006530:	080064c9 	.word	0x080064c9
 8006534:	08006615 	.word	0x08006615
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	1d1a      	adds	r2, r3, #4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	602a      	str	r2, [r5, #0]
 8006540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006548:	2301      	movs	r3, #1
 800654a:	e0a0      	b.n	800668e <_printf_i+0x1ee>
 800654c:	6820      	ldr	r0, [r4, #0]
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	0607      	lsls	r7, r0, #24
 8006552:	f103 0104 	add.w	r1, r3, #4
 8006556:	6029      	str	r1, [r5, #0]
 8006558:	d501      	bpl.n	800655e <_printf_i+0xbe>
 800655a:	681e      	ldr	r6, [r3, #0]
 800655c:	e003      	b.n	8006566 <_printf_i+0xc6>
 800655e:	0646      	lsls	r6, r0, #25
 8006560:	d5fb      	bpl.n	800655a <_printf_i+0xba>
 8006562:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006566:	2e00      	cmp	r6, #0
 8006568:	da03      	bge.n	8006572 <_printf_i+0xd2>
 800656a:	232d      	movs	r3, #45	; 0x2d
 800656c:	4276      	negs	r6, r6
 800656e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006572:	230a      	movs	r3, #10
 8006574:	4859      	ldr	r0, [pc, #356]	; (80066dc <_printf_i+0x23c>)
 8006576:	e012      	b.n	800659e <_printf_i+0xfe>
 8006578:	682b      	ldr	r3, [r5, #0]
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	1d19      	adds	r1, r3, #4
 800657e:	6029      	str	r1, [r5, #0]
 8006580:	0605      	lsls	r5, r0, #24
 8006582:	d501      	bpl.n	8006588 <_printf_i+0xe8>
 8006584:	681e      	ldr	r6, [r3, #0]
 8006586:	e002      	b.n	800658e <_printf_i+0xee>
 8006588:	0641      	lsls	r1, r0, #25
 800658a:	d5fb      	bpl.n	8006584 <_printf_i+0xe4>
 800658c:	881e      	ldrh	r6, [r3, #0]
 800658e:	2f6f      	cmp	r7, #111	; 0x6f
 8006590:	bf0c      	ite	eq
 8006592:	2308      	moveq	r3, #8
 8006594:	230a      	movne	r3, #10
 8006596:	4851      	ldr	r0, [pc, #324]	; (80066dc <_printf_i+0x23c>)
 8006598:	2100      	movs	r1, #0
 800659a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800659e:	6865      	ldr	r5, [r4, #4]
 80065a0:	2d00      	cmp	r5, #0
 80065a2:	bfa8      	it	ge
 80065a4:	6821      	ldrge	r1, [r4, #0]
 80065a6:	60a5      	str	r5, [r4, #8]
 80065a8:	bfa4      	itt	ge
 80065aa:	f021 0104 	bicge.w	r1, r1, #4
 80065ae:	6021      	strge	r1, [r4, #0]
 80065b0:	b90e      	cbnz	r6, 80065b6 <_printf_i+0x116>
 80065b2:	2d00      	cmp	r5, #0
 80065b4:	d04b      	beq.n	800664e <_printf_i+0x1ae>
 80065b6:	4615      	mov	r5, r2
 80065b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80065bc:	fb03 6711 	mls	r7, r3, r1, r6
 80065c0:	5dc7      	ldrb	r7, [r0, r7]
 80065c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065c6:	4637      	mov	r7, r6
 80065c8:	42bb      	cmp	r3, r7
 80065ca:	460e      	mov	r6, r1
 80065cc:	d9f4      	bls.n	80065b8 <_printf_i+0x118>
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d10b      	bne.n	80065ea <_printf_i+0x14a>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	07de      	lsls	r6, r3, #31
 80065d6:	d508      	bpl.n	80065ea <_printf_i+0x14a>
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	6861      	ldr	r1, [r4, #4]
 80065dc:	4299      	cmp	r1, r3
 80065de:	bfde      	ittt	le
 80065e0:	2330      	movle	r3, #48	; 0x30
 80065e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065ea:	1b52      	subs	r2, r2, r5
 80065ec:	6122      	str	r2, [r4, #16]
 80065ee:	464b      	mov	r3, r9
 80065f0:	4621      	mov	r1, r4
 80065f2:	4640      	mov	r0, r8
 80065f4:	f8cd a000 	str.w	sl, [sp]
 80065f8:	aa03      	add	r2, sp, #12
 80065fa:	f7ff fedf 	bl	80063bc <_printf_common>
 80065fe:	3001      	adds	r0, #1
 8006600:	d14a      	bne.n	8006698 <_printf_i+0x1f8>
 8006602:	f04f 30ff 	mov.w	r0, #4294967295
 8006606:	b004      	add	sp, #16
 8006608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	f043 0320 	orr.w	r3, r3, #32
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	2778      	movs	r7, #120	; 0x78
 8006616:	4832      	ldr	r0, [pc, #200]	; (80066e0 <_printf_i+0x240>)
 8006618:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	6829      	ldr	r1, [r5, #0]
 8006620:	061f      	lsls	r7, r3, #24
 8006622:	f851 6b04 	ldr.w	r6, [r1], #4
 8006626:	d402      	bmi.n	800662e <_printf_i+0x18e>
 8006628:	065f      	lsls	r7, r3, #25
 800662a:	bf48      	it	mi
 800662c:	b2b6      	uxthmi	r6, r6
 800662e:	07df      	lsls	r7, r3, #31
 8006630:	bf48      	it	mi
 8006632:	f043 0320 	orrmi.w	r3, r3, #32
 8006636:	6029      	str	r1, [r5, #0]
 8006638:	bf48      	it	mi
 800663a:	6023      	strmi	r3, [r4, #0]
 800663c:	b91e      	cbnz	r6, 8006646 <_printf_i+0x1a6>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	f023 0320 	bic.w	r3, r3, #32
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	2310      	movs	r3, #16
 8006648:	e7a6      	b.n	8006598 <_printf_i+0xf8>
 800664a:	4824      	ldr	r0, [pc, #144]	; (80066dc <_printf_i+0x23c>)
 800664c:	e7e4      	b.n	8006618 <_printf_i+0x178>
 800664e:	4615      	mov	r5, r2
 8006650:	e7bd      	b.n	80065ce <_printf_i+0x12e>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	6826      	ldr	r6, [r4, #0]
 8006656:	1d18      	adds	r0, r3, #4
 8006658:	6961      	ldr	r1, [r4, #20]
 800665a:	6028      	str	r0, [r5, #0]
 800665c:	0635      	lsls	r5, r6, #24
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	d501      	bpl.n	8006666 <_printf_i+0x1c6>
 8006662:	6019      	str	r1, [r3, #0]
 8006664:	e002      	b.n	800666c <_printf_i+0x1cc>
 8006666:	0670      	lsls	r0, r6, #25
 8006668:	d5fb      	bpl.n	8006662 <_printf_i+0x1c2>
 800666a:	8019      	strh	r1, [r3, #0]
 800666c:	2300      	movs	r3, #0
 800666e:	4615      	mov	r5, r2
 8006670:	6123      	str	r3, [r4, #16]
 8006672:	e7bc      	b.n	80065ee <_printf_i+0x14e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	2100      	movs	r1, #0
 8006678:	1d1a      	adds	r2, r3, #4
 800667a:	602a      	str	r2, [r5, #0]
 800667c:	681d      	ldr	r5, [r3, #0]
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	4628      	mov	r0, r5
 8006682:	f000 faa3 	bl	8006bcc <memchr>
 8006686:	b108      	cbz	r0, 800668c <_printf_i+0x1ec>
 8006688:	1b40      	subs	r0, r0, r5
 800668a:	6060      	str	r0, [r4, #4]
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	2300      	movs	r3, #0
 8006692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006696:	e7aa      	b.n	80065ee <_printf_i+0x14e>
 8006698:	462a      	mov	r2, r5
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	6923      	ldr	r3, [r4, #16]
 80066a0:	47d0      	blx	sl
 80066a2:	3001      	adds	r0, #1
 80066a4:	d0ad      	beq.n	8006602 <_printf_i+0x162>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	079b      	lsls	r3, r3, #30
 80066aa:	d413      	bmi.n	80066d4 <_printf_i+0x234>
 80066ac:	68e0      	ldr	r0, [r4, #12]
 80066ae:	9b03      	ldr	r3, [sp, #12]
 80066b0:	4298      	cmp	r0, r3
 80066b2:	bfb8      	it	lt
 80066b4:	4618      	movlt	r0, r3
 80066b6:	e7a6      	b.n	8006606 <_printf_i+0x166>
 80066b8:	2301      	movs	r3, #1
 80066ba:	4632      	mov	r2, r6
 80066bc:	4649      	mov	r1, r9
 80066be:	4640      	mov	r0, r8
 80066c0:	47d0      	blx	sl
 80066c2:	3001      	adds	r0, #1
 80066c4:	d09d      	beq.n	8006602 <_printf_i+0x162>
 80066c6:	3501      	adds	r5, #1
 80066c8:	68e3      	ldr	r3, [r4, #12]
 80066ca:	9903      	ldr	r1, [sp, #12]
 80066cc:	1a5b      	subs	r3, r3, r1
 80066ce:	42ab      	cmp	r3, r5
 80066d0:	dcf2      	bgt.n	80066b8 <_printf_i+0x218>
 80066d2:	e7eb      	b.n	80066ac <_printf_i+0x20c>
 80066d4:	2500      	movs	r5, #0
 80066d6:	f104 0619 	add.w	r6, r4, #25
 80066da:	e7f5      	b.n	80066c8 <_printf_i+0x228>
 80066dc:	08008d8c 	.word	0x08008d8c
 80066e0:	08008d9d 	.word	0x08008d9d

080066e4 <std>:
 80066e4:	2300      	movs	r3, #0
 80066e6:	b510      	push	{r4, lr}
 80066e8:	4604      	mov	r4, r0
 80066ea:	e9c0 3300 	strd	r3, r3, [r0]
 80066ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066f2:	6083      	str	r3, [r0, #8]
 80066f4:	8181      	strh	r1, [r0, #12]
 80066f6:	6643      	str	r3, [r0, #100]	; 0x64
 80066f8:	81c2      	strh	r2, [r0, #14]
 80066fa:	6183      	str	r3, [r0, #24]
 80066fc:	4619      	mov	r1, r3
 80066fe:	2208      	movs	r2, #8
 8006700:	305c      	adds	r0, #92	; 0x5c
 8006702:	f000 f9e5 	bl	8006ad0 <memset>
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <std+0x38>)
 8006708:	6224      	str	r4, [r4, #32]
 800670a:	6263      	str	r3, [r4, #36]	; 0x24
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <std+0x3c>)
 800670e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <std+0x40>)
 8006712:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006714:	4b04      	ldr	r3, [pc, #16]	; (8006728 <std+0x44>)
 8006716:	6323      	str	r3, [r4, #48]	; 0x30
 8006718:	bd10      	pop	{r4, pc}
 800671a:	bf00      	nop
 800671c:	08006921 	.word	0x08006921
 8006720:	08006943 	.word	0x08006943
 8006724:	0800697b 	.word	0x0800697b
 8006728:	0800699f 	.word	0x0800699f

0800672c <stdio_exit_handler>:
 800672c:	4a02      	ldr	r2, [pc, #8]	; (8006738 <stdio_exit_handler+0xc>)
 800672e:	4903      	ldr	r1, [pc, #12]	; (800673c <stdio_exit_handler+0x10>)
 8006730:	4803      	ldr	r0, [pc, #12]	; (8006740 <stdio_exit_handler+0x14>)
 8006732:	f000 b869 	b.w	8006808 <_fwalk_sglue>
 8006736:	bf00      	nop
 8006738:	2000000c 	.word	0x2000000c
 800673c:	08008551 	.word	0x08008551
 8006740:	20000018 	.word	0x20000018

08006744 <cleanup_stdio>:
 8006744:	6841      	ldr	r1, [r0, #4]
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <cleanup_stdio+0x34>)
 8006748:	b510      	push	{r4, lr}
 800674a:	4299      	cmp	r1, r3
 800674c:	4604      	mov	r4, r0
 800674e:	d001      	beq.n	8006754 <cleanup_stdio+0x10>
 8006750:	f001 fefe 	bl	8008550 <_fflush_r>
 8006754:	68a1      	ldr	r1, [r4, #8]
 8006756:	4b09      	ldr	r3, [pc, #36]	; (800677c <cleanup_stdio+0x38>)
 8006758:	4299      	cmp	r1, r3
 800675a:	d002      	beq.n	8006762 <cleanup_stdio+0x1e>
 800675c:	4620      	mov	r0, r4
 800675e:	f001 fef7 	bl	8008550 <_fflush_r>
 8006762:	68e1      	ldr	r1, [r4, #12]
 8006764:	4b06      	ldr	r3, [pc, #24]	; (8006780 <cleanup_stdio+0x3c>)
 8006766:	4299      	cmp	r1, r3
 8006768:	d004      	beq.n	8006774 <cleanup_stdio+0x30>
 800676a:	4620      	mov	r0, r4
 800676c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006770:	f001 beee 	b.w	8008550 <_fflush_r>
 8006774:	bd10      	pop	{r4, pc}
 8006776:	bf00      	nop
 8006778:	20000384 	.word	0x20000384
 800677c:	200003ec 	.word	0x200003ec
 8006780:	20000454 	.word	0x20000454

08006784 <global_stdio_init.part.0>:
 8006784:	b510      	push	{r4, lr}
 8006786:	4b0b      	ldr	r3, [pc, #44]	; (80067b4 <global_stdio_init.part.0+0x30>)
 8006788:	4c0b      	ldr	r4, [pc, #44]	; (80067b8 <global_stdio_init.part.0+0x34>)
 800678a:	4a0c      	ldr	r2, [pc, #48]	; (80067bc <global_stdio_init.part.0+0x38>)
 800678c:	4620      	mov	r0, r4
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	2104      	movs	r1, #4
 8006792:	2200      	movs	r2, #0
 8006794:	f7ff ffa6 	bl	80066e4 <std>
 8006798:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800679c:	2201      	movs	r2, #1
 800679e:	2109      	movs	r1, #9
 80067a0:	f7ff ffa0 	bl	80066e4 <std>
 80067a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067a8:	2202      	movs	r2, #2
 80067aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ae:	2112      	movs	r1, #18
 80067b0:	f7ff bf98 	b.w	80066e4 <std>
 80067b4:	200004bc 	.word	0x200004bc
 80067b8:	20000384 	.word	0x20000384
 80067bc:	0800672d 	.word	0x0800672d

080067c0 <__sfp_lock_acquire>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__sfp_lock_acquire+0x8>)
 80067c2:	f000 ba01 	b.w	8006bc8 <__retarget_lock_acquire_recursive>
 80067c6:	bf00      	nop
 80067c8:	200004c5 	.word	0x200004c5

080067cc <__sfp_lock_release>:
 80067cc:	4801      	ldr	r0, [pc, #4]	; (80067d4 <__sfp_lock_release+0x8>)
 80067ce:	f000 b9fc 	b.w	8006bca <__retarget_lock_release_recursive>
 80067d2:	bf00      	nop
 80067d4:	200004c5 	.word	0x200004c5

080067d8 <__sinit>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4604      	mov	r4, r0
 80067dc:	f7ff fff0 	bl	80067c0 <__sfp_lock_acquire>
 80067e0:	6a23      	ldr	r3, [r4, #32]
 80067e2:	b11b      	cbz	r3, 80067ec <__sinit+0x14>
 80067e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e8:	f7ff bff0 	b.w	80067cc <__sfp_lock_release>
 80067ec:	4b04      	ldr	r3, [pc, #16]	; (8006800 <__sinit+0x28>)
 80067ee:	6223      	str	r3, [r4, #32]
 80067f0:	4b04      	ldr	r3, [pc, #16]	; (8006804 <__sinit+0x2c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1f5      	bne.n	80067e4 <__sinit+0xc>
 80067f8:	f7ff ffc4 	bl	8006784 <global_stdio_init.part.0>
 80067fc:	e7f2      	b.n	80067e4 <__sinit+0xc>
 80067fe:	bf00      	nop
 8006800:	08006745 	.word	0x08006745
 8006804:	200004bc 	.word	0x200004bc

08006808 <_fwalk_sglue>:
 8006808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800680c:	4607      	mov	r7, r0
 800680e:	4688      	mov	r8, r1
 8006810:	4614      	mov	r4, r2
 8006812:	2600      	movs	r6, #0
 8006814:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006818:	f1b9 0901 	subs.w	r9, r9, #1
 800681c:	d505      	bpl.n	800682a <_fwalk_sglue+0x22>
 800681e:	6824      	ldr	r4, [r4, #0]
 8006820:	2c00      	cmp	r4, #0
 8006822:	d1f7      	bne.n	8006814 <_fwalk_sglue+0xc>
 8006824:	4630      	mov	r0, r6
 8006826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800682a:	89ab      	ldrh	r3, [r5, #12]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d907      	bls.n	8006840 <_fwalk_sglue+0x38>
 8006830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006834:	3301      	adds	r3, #1
 8006836:	d003      	beq.n	8006840 <_fwalk_sglue+0x38>
 8006838:	4629      	mov	r1, r5
 800683a:	4638      	mov	r0, r7
 800683c:	47c0      	blx	r8
 800683e:	4306      	orrs	r6, r0
 8006840:	3568      	adds	r5, #104	; 0x68
 8006842:	e7e9      	b.n	8006818 <_fwalk_sglue+0x10>

08006844 <iprintf>:
 8006844:	b40f      	push	{r0, r1, r2, r3}
 8006846:	b507      	push	{r0, r1, r2, lr}
 8006848:	4906      	ldr	r1, [pc, #24]	; (8006864 <iprintf+0x20>)
 800684a:	ab04      	add	r3, sp, #16
 800684c:	6808      	ldr	r0, [r1, #0]
 800684e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006852:	6881      	ldr	r1, [r0, #8]
 8006854:	9301      	str	r3, [sp, #4]
 8006856:	f001 fcdf 	bl	8008218 <_vfiprintf_r>
 800685a:	b003      	add	sp, #12
 800685c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006860:	b004      	add	sp, #16
 8006862:	4770      	bx	lr
 8006864:	20000064 	.word	0x20000064

08006868 <_puts_r>:
 8006868:	6a03      	ldr	r3, [r0, #32]
 800686a:	b570      	push	{r4, r5, r6, lr}
 800686c:	4605      	mov	r5, r0
 800686e:	460e      	mov	r6, r1
 8006870:	6884      	ldr	r4, [r0, #8]
 8006872:	b90b      	cbnz	r3, 8006878 <_puts_r+0x10>
 8006874:	f7ff ffb0 	bl	80067d8 <__sinit>
 8006878:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800687a:	07db      	lsls	r3, r3, #31
 800687c:	d405      	bmi.n	800688a <_puts_r+0x22>
 800687e:	89a3      	ldrh	r3, [r4, #12]
 8006880:	0598      	lsls	r0, r3, #22
 8006882:	d402      	bmi.n	800688a <_puts_r+0x22>
 8006884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006886:	f000 f99f 	bl	8006bc8 <__retarget_lock_acquire_recursive>
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	0719      	lsls	r1, r3, #28
 800688e:	d513      	bpl.n	80068b8 <_puts_r+0x50>
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	b18b      	cbz	r3, 80068b8 <_puts_r+0x50>
 8006894:	3e01      	subs	r6, #1
 8006896:	68a3      	ldr	r3, [r4, #8]
 8006898:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800689c:	3b01      	subs	r3, #1
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	b9e9      	cbnz	r1, 80068de <_puts_r+0x76>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	da2e      	bge.n	8006904 <_puts_r+0x9c>
 80068a6:	4622      	mov	r2, r4
 80068a8:	210a      	movs	r1, #10
 80068aa:	4628      	mov	r0, r5
 80068ac:	f000 f87b 	bl	80069a6 <__swbuf_r>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d007      	beq.n	80068c4 <_puts_r+0x5c>
 80068b4:	250a      	movs	r5, #10
 80068b6:	e007      	b.n	80068c8 <_puts_r+0x60>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 f8b0 	bl	8006a20 <__swsetup_r>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	d0e7      	beq.n	8006894 <_puts_r+0x2c>
 80068c4:	f04f 35ff 	mov.w	r5, #4294967295
 80068c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ca:	07da      	lsls	r2, r3, #31
 80068cc:	d405      	bmi.n	80068da <_puts_r+0x72>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	059b      	lsls	r3, r3, #22
 80068d2:	d402      	bmi.n	80068da <_puts_r+0x72>
 80068d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068d6:	f000 f978 	bl	8006bca <__retarget_lock_release_recursive>
 80068da:	4628      	mov	r0, r5
 80068dc:	bd70      	pop	{r4, r5, r6, pc}
 80068de:	2b00      	cmp	r3, #0
 80068e0:	da04      	bge.n	80068ec <_puts_r+0x84>
 80068e2:	69a2      	ldr	r2, [r4, #24]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	dc06      	bgt.n	80068f6 <_puts_r+0x8e>
 80068e8:	290a      	cmp	r1, #10
 80068ea:	d004      	beq.n	80068f6 <_puts_r+0x8e>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	6022      	str	r2, [r4, #0]
 80068f2:	7019      	strb	r1, [r3, #0]
 80068f4:	e7cf      	b.n	8006896 <_puts_r+0x2e>
 80068f6:	4622      	mov	r2, r4
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 f854 	bl	80069a6 <__swbuf_r>
 80068fe:	3001      	adds	r0, #1
 8006900:	d1c9      	bne.n	8006896 <_puts_r+0x2e>
 8006902:	e7df      	b.n	80068c4 <_puts_r+0x5c>
 8006904:	250a      	movs	r5, #10
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	1c5a      	adds	r2, r3, #1
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	701d      	strb	r5, [r3, #0]
 800690e:	e7db      	b.n	80068c8 <_puts_r+0x60>

08006910 <puts>:
 8006910:	4b02      	ldr	r3, [pc, #8]	; (800691c <puts+0xc>)
 8006912:	4601      	mov	r1, r0
 8006914:	6818      	ldr	r0, [r3, #0]
 8006916:	f7ff bfa7 	b.w	8006868 <_puts_r>
 800691a:	bf00      	nop
 800691c:	20000064 	.word	0x20000064

08006920 <__sread>:
 8006920:	b510      	push	{r4, lr}
 8006922:	460c      	mov	r4, r1
 8006924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006928:	f000 f900 	bl	8006b2c <_read_r>
 800692c:	2800      	cmp	r0, #0
 800692e:	bfab      	itete	ge
 8006930:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006932:	89a3      	ldrhlt	r3, [r4, #12]
 8006934:	181b      	addge	r3, r3, r0
 8006936:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800693a:	bfac      	ite	ge
 800693c:	6563      	strge	r3, [r4, #84]	; 0x54
 800693e:	81a3      	strhlt	r3, [r4, #12]
 8006940:	bd10      	pop	{r4, pc}

08006942 <__swrite>:
 8006942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006946:	461f      	mov	r7, r3
 8006948:	898b      	ldrh	r3, [r1, #12]
 800694a:	4605      	mov	r5, r0
 800694c:	05db      	lsls	r3, r3, #23
 800694e:	460c      	mov	r4, r1
 8006950:	4616      	mov	r6, r2
 8006952:	d505      	bpl.n	8006960 <__swrite+0x1e>
 8006954:	2302      	movs	r3, #2
 8006956:	2200      	movs	r2, #0
 8006958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800695c:	f000 f8d4 	bl	8006b08 <_lseek_r>
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	4632      	mov	r2, r6
 8006964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	4628      	mov	r0, r5
 800696c:	463b      	mov	r3, r7
 800696e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	f000 b8eb 	b.w	8006b50 <_write_r>

0800697a <__sseek>:
 800697a:	b510      	push	{r4, lr}
 800697c:	460c      	mov	r4, r1
 800697e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006982:	f000 f8c1 	bl	8006b08 <_lseek_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	bf15      	itete	ne
 800698c:	6560      	strne	r0, [r4, #84]	; 0x54
 800698e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006992:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006996:	81a3      	strheq	r3, [r4, #12]
 8006998:	bf18      	it	ne
 800699a:	81a3      	strhne	r3, [r4, #12]
 800699c:	bd10      	pop	{r4, pc}

0800699e <__sclose>:
 800699e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069a2:	f000 b8a1 	b.w	8006ae8 <_close_r>

080069a6 <__swbuf_r>:
 80069a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a8:	460e      	mov	r6, r1
 80069aa:	4614      	mov	r4, r2
 80069ac:	4605      	mov	r5, r0
 80069ae:	b118      	cbz	r0, 80069b8 <__swbuf_r+0x12>
 80069b0:	6a03      	ldr	r3, [r0, #32]
 80069b2:	b90b      	cbnz	r3, 80069b8 <__swbuf_r+0x12>
 80069b4:	f7ff ff10 	bl	80067d8 <__sinit>
 80069b8:	69a3      	ldr	r3, [r4, #24]
 80069ba:	60a3      	str	r3, [r4, #8]
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	071a      	lsls	r2, r3, #28
 80069c0:	d525      	bpl.n	8006a0e <__swbuf_r+0x68>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	b31b      	cbz	r3, 8006a0e <__swbuf_r+0x68>
 80069c6:	6823      	ldr	r3, [r4, #0]
 80069c8:	6922      	ldr	r2, [r4, #16]
 80069ca:	b2f6      	uxtb	r6, r6
 80069cc:	1a98      	subs	r0, r3, r2
 80069ce:	6963      	ldr	r3, [r4, #20]
 80069d0:	4637      	mov	r7, r6
 80069d2:	4283      	cmp	r3, r0
 80069d4:	dc04      	bgt.n	80069e0 <__swbuf_r+0x3a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f001 fdb9 	bl	8008550 <_fflush_r>
 80069de:	b9e0      	cbnz	r0, 8006a1a <__swbuf_r+0x74>
 80069e0:	68a3      	ldr	r3, [r4, #8]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	60a3      	str	r3, [r4, #8]
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	701e      	strb	r6, [r3, #0]
 80069ee:	6962      	ldr	r2, [r4, #20]
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d004      	beq.n	8006a00 <__swbuf_r+0x5a>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	07db      	lsls	r3, r3, #31
 80069fa:	d506      	bpl.n	8006a0a <__swbuf_r+0x64>
 80069fc:	2e0a      	cmp	r6, #10
 80069fe:	d104      	bne.n	8006a0a <__swbuf_r+0x64>
 8006a00:	4621      	mov	r1, r4
 8006a02:	4628      	mov	r0, r5
 8006a04:	f001 fda4 	bl	8008550 <_fflush_r>
 8006a08:	b938      	cbnz	r0, 8006a1a <__swbuf_r+0x74>
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 f805 	bl	8006a20 <__swsetup_r>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	d0d5      	beq.n	80069c6 <__swbuf_r+0x20>
 8006a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8006a1e:	e7f4      	b.n	8006a0a <__swbuf_r+0x64>

08006a20 <__swsetup_r>:
 8006a20:	b538      	push	{r3, r4, r5, lr}
 8006a22:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <__swsetup_r+0xac>)
 8006a24:	4605      	mov	r5, r0
 8006a26:	6818      	ldr	r0, [r3, #0]
 8006a28:	460c      	mov	r4, r1
 8006a2a:	b118      	cbz	r0, 8006a34 <__swsetup_r+0x14>
 8006a2c:	6a03      	ldr	r3, [r0, #32]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <__swsetup_r+0x14>
 8006a30:	f7ff fed2 	bl	80067d8 <__sinit>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a3a:	0718      	lsls	r0, r3, #28
 8006a3c:	d422      	bmi.n	8006a84 <__swsetup_r+0x64>
 8006a3e:	06d9      	lsls	r1, r3, #27
 8006a40:	d407      	bmi.n	8006a52 <__swsetup_r+0x32>
 8006a42:	2309      	movs	r3, #9
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4e:	81a3      	strh	r3, [r4, #12]
 8006a50:	e034      	b.n	8006abc <__swsetup_r+0x9c>
 8006a52:	0758      	lsls	r0, r3, #29
 8006a54:	d512      	bpl.n	8006a7c <__swsetup_r+0x5c>
 8006a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a58:	b141      	cbz	r1, 8006a6c <__swsetup_r+0x4c>
 8006a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	d002      	beq.n	8006a68 <__swsetup_r+0x48>
 8006a62:	4628      	mov	r0, r5
 8006a64:	f000 ff3c 	bl	80078e0 <_free_r>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6363      	str	r3, [r4, #52]	; 0x34
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	2300      	movs	r3, #0
 8006a76:	6063      	str	r3, [r4, #4]
 8006a78:	6923      	ldr	r3, [r4, #16]
 8006a7a:	6023      	str	r3, [r4, #0]
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	f043 0308 	orr.w	r3, r3, #8
 8006a82:	81a3      	strh	r3, [r4, #12]
 8006a84:	6923      	ldr	r3, [r4, #16]
 8006a86:	b94b      	cbnz	r3, 8006a9c <__swsetup_r+0x7c>
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a92:	d003      	beq.n	8006a9c <__swsetup_r+0x7c>
 8006a94:	4621      	mov	r1, r4
 8006a96:	4628      	mov	r0, r5
 8006a98:	f001 fda7 	bl	80085ea <__smakebuf_r>
 8006a9c:	89a0      	ldrh	r0, [r4, #12]
 8006a9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006aa2:	f010 0301 	ands.w	r3, r0, #1
 8006aa6:	d00a      	beq.n	8006abe <__swsetup_r+0x9e>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60a3      	str	r3, [r4, #8]
 8006aac:	6963      	ldr	r3, [r4, #20]
 8006aae:	425b      	negs	r3, r3
 8006ab0:	61a3      	str	r3, [r4, #24]
 8006ab2:	6923      	ldr	r3, [r4, #16]
 8006ab4:	b943      	cbnz	r3, 8006ac8 <__swsetup_r+0xa8>
 8006ab6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006aba:	d1c4      	bne.n	8006a46 <__swsetup_r+0x26>
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
 8006abe:	0781      	lsls	r1, r0, #30
 8006ac0:	bf58      	it	pl
 8006ac2:	6963      	ldrpl	r3, [r4, #20]
 8006ac4:	60a3      	str	r3, [r4, #8]
 8006ac6:	e7f4      	b.n	8006ab2 <__swsetup_r+0x92>
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e7f7      	b.n	8006abc <__swsetup_r+0x9c>
 8006acc:	20000064 	.word	0x20000064

08006ad0 <memset>:
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4402      	add	r2, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <_localeconv_r>:
 8006ae0:	4800      	ldr	r0, [pc, #0]	; (8006ae4 <_localeconv_r+0x4>)
 8006ae2:	4770      	bx	lr
 8006ae4:	20000158 	.word	0x20000158

08006ae8 <_close_r>:
 8006ae8:	b538      	push	{r3, r4, r5, lr}
 8006aea:	2300      	movs	r3, #0
 8006aec:	4d05      	ldr	r5, [pc, #20]	; (8006b04 <_close_r+0x1c>)
 8006aee:	4604      	mov	r4, r0
 8006af0:	4608      	mov	r0, r1
 8006af2:	602b      	str	r3, [r5, #0]
 8006af4:	f7fb fdf0 	bl	80026d8 <_close>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_close_r+0x1a>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_close_r+0x1a>
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	200004c0 	.word	0x200004c0

08006b08 <_lseek_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	4608      	mov	r0, r1
 8006b0e:	4611      	mov	r1, r2
 8006b10:	2200      	movs	r2, #0
 8006b12:	4d05      	ldr	r5, [pc, #20]	; (8006b28 <_lseek_r+0x20>)
 8006b14:	602a      	str	r2, [r5, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f7fb fe02 	bl	8002720 <_lseek>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_lseek_r+0x1e>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_lseek_r+0x1e>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	200004c0 	.word	0x200004c0

08006b2c <_read_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	4611      	mov	r1, r2
 8006b34:	2200      	movs	r2, #0
 8006b36:	4d05      	ldr	r5, [pc, #20]	; (8006b4c <_read_r+0x20>)
 8006b38:	602a      	str	r2, [r5, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f7fb fd93 	bl	8002666 <_read>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_read_r+0x1e>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_read_r+0x1e>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	200004c0 	.word	0x200004c0

08006b50 <_write_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4604      	mov	r4, r0
 8006b54:	4608      	mov	r0, r1
 8006b56:	4611      	mov	r1, r2
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4d05      	ldr	r5, [pc, #20]	; (8006b70 <_write_r+0x20>)
 8006b5c:	602a      	str	r2, [r5, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f7fb fd9e 	bl	80026a0 <_write>
 8006b64:	1c43      	adds	r3, r0, #1
 8006b66:	d102      	bne.n	8006b6e <_write_r+0x1e>
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	b103      	cbz	r3, 8006b6e <_write_r+0x1e>
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	bd38      	pop	{r3, r4, r5, pc}
 8006b70:	200004c0 	.word	0x200004c0

08006b74 <__errno>:
 8006b74:	4b01      	ldr	r3, [pc, #4]	; (8006b7c <__errno+0x8>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000064 	.word	0x20000064

08006b80 <__libc_init_array>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	2600      	movs	r6, #0
 8006b84:	4d0c      	ldr	r5, [pc, #48]	; (8006bb8 <__libc_init_array+0x38>)
 8006b86:	4c0d      	ldr	r4, [pc, #52]	; (8006bbc <__libc_init_array+0x3c>)
 8006b88:	1b64      	subs	r4, r4, r5
 8006b8a:	10a4      	asrs	r4, r4, #2
 8006b8c:	42a6      	cmp	r6, r4
 8006b8e:	d109      	bne.n	8006ba4 <__libc_init_array+0x24>
 8006b90:	f002 f8ac 	bl	8008cec <_init>
 8006b94:	2600      	movs	r6, #0
 8006b96:	4d0a      	ldr	r5, [pc, #40]	; (8006bc0 <__libc_init_array+0x40>)
 8006b98:	4c0a      	ldr	r4, [pc, #40]	; (8006bc4 <__libc_init_array+0x44>)
 8006b9a:	1b64      	subs	r4, r4, r5
 8006b9c:	10a4      	asrs	r4, r4, #2
 8006b9e:	42a6      	cmp	r6, r4
 8006ba0:	d105      	bne.n	8006bae <__libc_init_array+0x2e>
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba8:	4798      	blx	r3
 8006baa:	3601      	adds	r6, #1
 8006bac:	e7ee      	b.n	8006b8c <__libc_init_array+0xc>
 8006bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb2:	4798      	blx	r3
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	e7f2      	b.n	8006b9e <__libc_init_array+0x1e>
 8006bb8:	08009160 	.word	0x08009160
 8006bbc:	08009160 	.word	0x08009160
 8006bc0:	08009160 	.word	0x08009160
 8006bc4:	08009164 	.word	0x08009164

08006bc8 <__retarget_lock_acquire_recursive>:
 8006bc8:	4770      	bx	lr

08006bca <__retarget_lock_release_recursive>:
 8006bca:	4770      	bx	lr

08006bcc <memchr>:
 8006bcc:	4603      	mov	r3, r0
 8006bce:	b510      	push	{r4, lr}
 8006bd0:	b2c9      	uxtb	r1, r1
 8006bd2:	4402      	add	r2, r0
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	d101      	bne.n	8006bde <memchr+0x12>
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e003      	b.n	8006be6 <memchr+0x1a>
 8006bde:	7804      	ldrb	r4, [r0, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	428c      	cmp	r4, r1
 8006be4:	d1f6      	bne.n	8006bd4 <memchr+0x8>
 8006be6:	bd10      	pop	{r4, pc}

08006be8 <memcpy>:
 8006be8:	440a      	add	r2, r1
 8006bea:	4291      	cmp	r1, r2
 8006bec:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bf0:	d100      	bne.n	8006bf4 <memcpy+0xc>
 8006bf2:	4770      	bx	lr
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfa:	4291      	cmp	r1, r2
 8006bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c00:	d1f9      	bne.n	8006bf6 <memcpy+0xe>
 8006c02:	bd10      	pop	{r4, pc}

08006c04 <quorem>:
 8006c04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	6903      	ldr	r3, [r0, #16]
 8006c0a:	690c      	ldr	r4, [r1, #16]
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	42a3      	cmp	r3, r4
 8006c10:	db7f      	blt.n	8006d12 <quorem+0x10e>
 8006c12:	3c01      	subs	r4, #1
 8006c14:	f100 0514 	add.w	r5, r0, #20
 8006c18:	f101 0814 	add.w	r8, r1, #20
 8006c1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c3a:	d331      	bcc.n	8006ca0 <quorem+0x9c>
 8006c3c:	f04f 0e00 	mov.w	lr, #0
 8006c40:	4640      	mov	r0, r8
 8006c42:	46ac      	mov	ip, r5
 8006c44:	46f2      	mov	sl, lr
 8006c46:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c4a:	b293      	uxth	r3, r2
 8006c4c:	fb06 e303 	mla	r3, r6, r3, lr
 8006c50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c54:	0c1a      	lsrs	r2, r3, #16
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	fb06 220e 	mla	r2, r6, lr, r2
 8006c5c:	ebaa 0303 	sub.w	r3, sl, r3
 8006c60:	f8dc a000 	ldr.w	sl, [ip]
 8006c64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c68:	fa1f fa8a 	uxth.w	sl, sl
 8006c6c:	4453      	add	r3, sl
 8006c6e:	f8dc a000 	ldr.w	sl, [ip]
 8006c72:	b292      	uxth	r2, r2
 8006c74:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c82:	4581      	cmp	r9, r0
 8006c84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c88:	f84c 3b04 	str.w	r3, [ip], #4
 8006c8c:	d2db      	bcs.n	8006c46 <quorem+0x42>
 8006c8e:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c92:	b92b      	cbnz	r3, 8006ca0 <quorem+0x9c>
 8006c94:	9b01      	ldr	r3, [sp, #4]
 8006c96:	3b04      	subs	r3, #4
 8006c98:	429d      	cmp	r5, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	d32d      	bcc.n	8006cfa <quorem+0xf6>
 8006c9e:	613c      	str	r4, [r7, #16]
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f001 f993 	bl	8007fcc <__mcmp>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	db23      	blt.n	8006cf2 <quorem+0xee>
 8006caa:	4629      	mov	r1, r5
 8006cac:	2000      	movs	r0, #0
 8006cae:	3601      	adds	r6, #1
 8006cb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006cb4:	f8d1 c000 	ldr.w	ip, [r1]
 8006cb8:	b293      	uxth	r3, r2
 8006cba:	1ac3      	subs	r3, r0, r3
 8006cbc:	0c12      	lsrs	r2, r2, #16
 8006cbe:	fa1f f08c 	uxth.w	r0, ip
 8006cc2:	4403      	add	r3, r0
 8006cc4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cd2:	45c1      	cmp	r9, r8
 8006cd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cd8:	f841 3b04 	str.w	r3, [r1], #4
 8006cdc:	d2e8      	bcs.n	8006cb0 <quorem+0xac>
 8006cde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ce6:	b922      	cbnz	r2, 8006cf2 <quorem+0xee>
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	429d      	cmp	r5, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	d30a      	bcc.n	8006d06 <quorem+0x102>
 8006cf0:	613c      	str	r4, [r7, #16]
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	b003      	add	sp, #12
 8006cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfa:	6812      	ldr	r2, [r2, #0]
 8006cfc:	3b04      	subs	r3, #4
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	d1cd      	bne.n	8006c9e <quorem+0x9a>
 8006d02:	3c01      	subs	r4, #1
 8006d04:	e7c8      	b.n	8006c98 <quorem+0x94>
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	3b04      	subs	r3, #4
 8006d0a:	2a00      	cmp	r2, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <quorem+0xec>
 8006d0e:	3c01      	subs	r4, #1
 8006d10:	e7eb      	b.n	8006cea <quorem+0xe6>
 8006d12:	2000      	movs	r0, #0
 8006d14:	e7ee      	b.n	8006cf4 <quorem+0xf0>
	...

08006d18 <_dtoa_r>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	461f      	mov	r7, r3
 8006d20:	69c4      	ldr	r4, [r0, #28]
 8006d22:	b099      	sub	sp, #100	; 0x64
 8006d24:	4605      	mov	r5, r0
 8006d26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006d2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006d2e:	b974      	cbnz	r4, 8006d4e <_dtoa_r+0x36>
 8006d30:	2010      	movs	r0, #16
 8006d32:	f000 fe1d 	bl	8007970 <malloc>
 8006d36:	4602      	mov	r2, r0
 8006d38:	61e8      	str	r0, [r5, #28]
 8006d3a:	b920      	cbnz	r0, 8006d46 <_dtoa_r+0x2e>
 8006d3c:	21ef      	movs	r1, #239	; 0xef
 8006d3e:	4bac      	ldr	r3, [pc, #688]	; (8006ff0 <_dtoa_r+0x2d8>)
 8006d40:	48ac      	ldr	r0, [pc, #688]	; (8006ff4 <_dtoa_r+0x2dc>)
 8006d42:	f001 fcc1 	bl	80086c8 <__assert_func>
 8006d46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d4a:	6004      	str	r4, [r0, #0]
 8006d4c:	60c4      	str	r4, [r0, #12]
 8006d4e:	69eb      	ldr	r3, [r5, #28]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	b151      	cbz	r1, 8006d6a <_dtoa_r+0x52>
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	2301      	movs	r3, #1
 8006d58:	4093      	lsls	r3, r2
 8006d5a:	604a      	str	r2, [r1, #4]
 8006d5c:	608b      	str	r3, [r1, #8]
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 fefa 	bl	8007b58 <_Bfree>
 8006d64:	2200      	movs	r2, #0
 8006d66:	69eb      	ldr	r3, [r5, #28]
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	1e3b      	subs	r3, r7, #0
 8006d6c:	bfaf      	iteee	ge
 8006d6e:	2300      	movge	r3, #0
 8006d70:	2201      	movlt	r2, #1
 8006d72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d76:	9305      	strlt	r3, [sp, #20]
 8006d78:	bfa8      	it	ge
 8006d7a:	f8c8 3000 	strge.w	r3, [r8]
 8006d7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006d82:	4b9d      	ldr	r3, [pc, #628]	; (8006ff8 <_dtoa_r+0x2e0>)
 8006d84:	bfb8      	it	lt
 8006d86:	f8c8 2000 	strlt.w	r2, [r8]
 8006d8a:	ea33 0309 	bics.w	r3, r3, r9
 8006d8e:	d119      	bne.n	8006dc4 <_dtoa_r+0xac>
 8006d90:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d9c:	4333      	orrs	r3, r6
 8006d9e:	f000 8589 	beq.w	80078b4 <_dtoa_r+0xb9c>
 8006da2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006da4:	b953      	cbnz	r3, 8006dbc <_dtoa_r+0xa4>
 8006da6:	4b95      	ldr	r3, [pc, #596]	; (8006ffc <_dtoa_r+0x2e4>)
 8006da8:	e023      	b.n	8006df2 <_dtoa_r+0xda>
 8006daa:	4b95      	ldr	r3, [pc, #596]	; (8007000 <_dtoa_r+0x2e8>)
 8006dac:	9303      	str	r3, [sp, #12]
 8006dae:	3308      	adds	r3, #8
 8006db0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	9803      	ldr	r0, [sp, #12]
 8006db6:	b019      	add	sp, #100	; 0x64
 8006db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbc:	4b8f      	ldr	r3, [pc, #572]	; (8006ffc <_dtoa_r+0x2e4>)
 8006dbe:	9303      	str	r3, [sp, #12]
 8006dc0:	3303      	adds	r3, #3
 8006dc2:	e7f5      	b.n	8006db0 <_dtoa_r+0x98>
 8006dc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006dc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006dcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f7f9 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8006dd8:	4680      	mov	r8, r0
 8006dda:	b160      	cbz	r0, 8006df6 <_dtoa_r+0xde>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006de0:	6013      	str	r3, [r2, #0]
 8006de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8562 	beq.w	80078ae <_dtoa_r+0xb96>
 8006dea:	4b86      	ldr	r3, [pc, #536]	; (8007004 <_dtoa_r+0x2ec>)
 8006dec:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006dee:	6013      	str	r3, [r2, #0]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	9303      	str	r3, [sp, #12]
 8006df4:	e7de      	b.n	8006db4 <_dtoa_r+0x9c>
 8006df6:	ab16      	add	r3, sp, #88	; 0x58
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	ab17      	add	r3, sp, #92	; 0x5c
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	4628      	mov	r0, r5
 8006e00:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e04:	f001 f98a 	bl	800811c <__d2b>
 8006e08:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e0c:	4682      	mov	sl, r0
 8006e0e:	2c00      	cmp	r4, #0
 8006e10:	d07e      	beq.n	8006f10 <_dtoa_r+0x1f8>
 8006e12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e18:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e20:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e28:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4b75      	ldr	r3, [pc, #468]	; (8007008 <_dtoa_r+0x2f0>)
 8006e32:	f7f9 f999 	bl	8000168 <__aeabi_dsub>
 8006e36:	a368      	add	r3, pc, #416	; (adr r3, 8006fd8 <_dtoa_r+0x2c0>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	f7f9 fb4c 	bl	80004d8 <__aeabi_dmul>
 8006e40:	a367      	add	r3, pc, #412	; (adr r3, 8006fe0 <_dtoa_r+0x2c8>)
 8006e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e46:	f7f9 f991 	bl	800016c <__adddf3>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	460f      	mov	r7, r1
 8006e50:	f7f9 fad8 	bl	8000404 <__aeabi_i2d>
 8006e54:	a364      	add	r3, pc, #400	; (adr r3, 8006fe8 <_dtoa_r+0x2d0>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f7f9 fb3d 	bl	80004d8 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 f981 	bl	800016c <__adddf3>
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	f7f9 fde3 	bl	8000a38 <__aeabi_d2iz>
 8006e72:	2200      	movs	r2, #0
 8006e74:	4683      	mov	fp, r0
 8006e76:	2300      	movs	r3, #0
 8006e78:	4630      	mov	r0, r6
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	f7f9 fd9e 	bl	80009bc <__aeabi_dcmplt>
 8006e80:	b148      	cbz	r0, 8006e96 <_dtoa_r+0x17e>
 8006e82:	4658      	mov	r0, fp
 8006e84:	f7f9 fabe 	bl	8000404 <__aeabi_i2d>
 8006e88:	4632      	mov	r2, r6
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	f7f9 fd8c 	bl	80009a8 <__aeabi_dcmpeq>
 8006e90:	b908      	cbnz	r0, 8006e96 <_dtoa_r+0x17e>
 8006e92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e96:	f1bb 0f16 	cmp.w	fp, #22
 8006e9a:	d857      	bhi.n	8006f4c <_dtoa_r+0x234>
 8006e9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ea0:	4b5a      	ldr	r3, [pc, #360]	; (800700c <_dtoa_r+0x2f4>)
 8006ea2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 fd87 	bl	80009bc <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d04e      	beq.n	8006f50 <_dtoa_r+0x238>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006eb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8006eba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006ebc:	1b1b      	subs	r3, r3, r4
 8006ebe:	1e5a      	subs	r2, r3, #1
 8006ec0:	bf46      	itte	mi
 8006ec2:	f1c3 0901 	rsbmi	r9, r3, #1
 8006ec6:	2300      	movmi	r3, #0
 8006ec8:	f04f 0900 	movpl.w	r9, #0
 8006ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ece:	bf48      	it	mi
 8006ed0:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006ed2:	f1bb 0f00 	cmp.w	fp, #0
 8006ed6:	db3d      	blt.n	8006f54 <_dtoa_r+0x23c>
 8006ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eda:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006ede:	445b      	add	r3, fp
 8006ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ee6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ee8:	2b09      	cmp	r3, #9
 8006eea:	d867      	bhi.n	8006fbc <_dtoa_r+0x2a4>
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	bfc4      	itt	gt
 8006ef0:	3b04      	subgt	r3, #4
 8006ef2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ef6:	bfc8      	it	gt
 8006ef8:	2400      	movgt	r4, #0
 8006efa:	f1a3 0302 	sub.w	r3, r3, #2
 8006efe:	bfd8      	it	le
 8006f00:	2401      	movle	r4, #1
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f200 8086 	bhi.w	8007014 <_dtoa_r+0x2fc>
 8006f08:	e8df f003 	tbb	[pc, r3]
 8006f0c:	5637392c 	.word	0x5637392c
 8006f10:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006f14:	441c      	add	r4, r3
 8006f16:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	bfc1      	itttt	gt
 8006f1e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f22:	fa09 f903 	lslgt.w	r9, r9, r3
 8006f26:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006f2a:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006f2e:	bfd6      	itet	le
 8006f30:	f1c3 0320 	rsble	r3, r3, #32
 8006f34:	ea49 0003 	orrgt.w	r0, r9, r3
 8006f38:	fa06 f003 	lslle.w	r0, r6, r3
 8006f3c:	f7f9 fa52 	bl	80003e4 <__aeabi_ui2d>
 8006f40:	2201      	movs	r2, #1
 8006f42:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006f46:	3c01      	subs	r4, #1
 8006f48:	9213      	str	r2, [sp, #76]	; 0x4c
 8006f4a:	e76f      	b.n	8006e2c <_dtoa_r+0x114>
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e7b3      	b.n	8006eb8 <_dtoa_r+0x1a0>
 8006f50:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f52:	e7b2      	b.n	8006eba <_dtoa_r+0x1a2>
 8006f54:	f1cb 0300 	rsb	r3, fp, #0
 8006f58:	930a      	str	r3, [sp, #40]	; 0x28
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	eba9 090b 	sub.w	r9, r9, fp
 8006f60:	930e      	str	r3, [sp, #56]	; 0x38
 8006f62:	e7c0      	b.n	8006ee6 <_dtoa_r+0x1ce>
 8006f64:	2300      	movs	r3, #0
 8006f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dc55      	bgt.n	800701a <_dtoa_r+0x302>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	461a      	mov	r2, r3
 8006f72:	9306      	str	r3, [sp, #24]
 8006f74:	9308      	str	r3, [sp, #32]
 8006f76:	9223      	str	r2, [sp, #140]	; 0x8c
 8006f78:	e00b      	b.n	8006f92 <_dtoa_r+0x27a>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e7f3      	b.n	8006f66 <_dtoa_r+0x24e>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f84:	445b      	add	r3, fp
 8006f86:	9306      	str	r3, [sp, #24]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	9308      	str	r3, [sp, #32]
 8006f8e:	bfb8      	it	lt
 8006f90:	2301      	movlt	r3, #1
 8006f92:	2100      	movs	r1, #0
 8006f94:	2204      	movs	r2, #4
 8006f96:	69e8      	ldr	r0, [r5, #28]
 8006f98:	f102 0614 	add.w	r6, r2, #20
 8006f9c:	429e      	cmp	r6, r3
 8006f9e:	d940      	bls.n	8007022 <_dtoa_r+0x30a>
 8006fa0:	6041      	str	r1, [r0, #4]
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f000 fd98 	bl	8007ad8 <_Balloc>
 8006fa8:	9003      	str	r0, [sp, #12]
 8006faa:	2800      	cmp	r0, #0
 8006fac:	d13c      	bne.n	8007028 <_dtoa_r+0x310>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f240 11af 	movw	r1, #431	; 0x1af
 8006fb4:	4b16      	ldr	r3, [pc, #88]	; (8007010 <_dtoa_r+0x2f8>)
 8006fb6:	e6c3      	b.n	8006d40 <_dtoa_r+0x28>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e7e1      	b.n	8006f80 <_dtoa_r+0x268>
 8006fbc:	2401      	movs	r4, #1
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006fc2:	9322      	str	r3, [sp, #136]	; 0x88
 8006fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc8:	2200      	movs	r2, #0
 8006fca:	9306      	str	r3, [sp, #24]
 8006fcc:	9308      	str	r3, [sp, #32]
 8006fce:	2312      	movs	r3, #18
 8006fd0:	e7d1      	b.n	8006f76 <_dtoa_r+0x25e>
 8006fd2:	bf00      	nop
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	636f4361 	.word	0x636f4361
 8006fdc:	3fd287a7 	.word	0x3fd287a7
 8006fe0:	8b60c8b3 	.word	0x8b60c8b3
 8006fe4:	3fc68a28 	.word	0x3fc68a28
 8006fe8:	509f79fb 	.word	0x509f79fb
 8006fec:	3fd34413 	.word	0x3fd34413
 8006ff0:	08008dbb 	.word	0x08008dbb
 8006ff4:	08008dd2 	.word	0x08008dd2
 8006ff8:	7ff00000 	.word	0x7ff00000
 8006ffc:	08008db7 	.word	0x08008db7
 8007000:	08008dae 	.word	0x08008dae
 8007004:	08008d8b 	.word	0x08008d8b
 8007008:	3ff80000 	.word	0x3ff80000
 800700c:	08008ec0 	.word	0x08008ec0
 8007010:	08008e2a 	.word	0x08008e2a
 8007014:	2301      	movs	r3, #1
 8007016:	930b      	str	r3, [sp, #44]	; 0x2c
 8007018:	e7d4      	b.n	8006fc4 <_dtoa_r+0x2ac>
 800701a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800701c:	9306      	str	r3, [sp, #24]
 800701e:	9308      	str	r3, [sp, #32]
 8007020:	e7b7      	b.n	8006f92 <_dtoa_r+0x27a>
 8007022:	3101      	adds	r1, #1
 8007024:	0052      	lsls	r2, r2, #1
 8007026:	e7b7      	b.n	8006f98 <_dtoa_r+0x280>
 8007028:	69eb      	ldr	r3, [r5, #28]
 800702a:	9a03      	ldr	r2, [sp, #12]
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	9b08      	ldr	r3, [sp, #32]
 8007030:	2b0e      	cmp	r3, #14
 8007032:	f200 80a8 	bhi.w	8007186 <_dtoa_r+0x46e>
 8007036:	2c00      	cmp	r4, #0
 8007038:	f000 80a5 	beq.w	8007186 <_dtoa_r+0x46e>
 800703c:	f1bb 0f00 	cmp.w	fp, #0
 8007040:	dd34      	ble.n	80070ac <_dtoa_r+0x394>
 8007042:	4b9a      	ldr	r3, [pc, #616]	; (80072ac <_dtoa_r+0x594>)
 8007044:	f00b 020f 	and.w	r2, fp, #15
 8007048:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800704c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007050:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007054:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007058:	ea4f 142b 	mov.w	r4, fp, asr #4
 800705c:	d016      	beq.n	800708c <_dtoa_r+0x374>
 800705e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007062:	4b93      	ldr	r3, [pc, #588]	; (80072b0 <_dtoa_r+0x598>)
 8007064:	2703      	movs	r7, #3
 8007066:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800706a:	f7f9 fb5f 	bl	800072c <__aeabi_ddiv>
 800706e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007072:	f004 040f 	and.w	r4, r4, #15
 8007076:	4e8e      	ldr	r6, [pc, #568]	; (80072b0 <_dtoa_r+0x598>)
 8007078:	b954      	cbnz	r4, 8007090 <_dtoa_r+0x378>
 800707a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800707e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007082:	f7f9 fb53 	bl	800072c <__aeabi_ddiv>
 8007086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800708a:	e029      	b.n	80070e0 <_dtoa_r+0x3c8>
 800708c:	2702      	movs	r7, #2
 800708e:	e7f2      	b.n	8007076 <_dtoa_r+0x35e>
 8007090:	07e1      	lsls	r1, r4, #31
 8007092:	d508      	bpl.n	80070a6 <_dtoa_r+0x38e>
 8007094:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007098:	e9d6 2300 	ldrd	r2, r3, [r6]
 800709c:	f7f9 fa1c 	bl	80004d8 <__aeabi_dmul>
 80070a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070a4:	3701      	adds	r7, #1
 80070a6:	1064      	asrs	r4, r4, #1
 80070a8:	3608      	adds	r6, #8
 80070aa:	e7e5      	b.n	8007078 <_dtoa_r+0x360>
 80070ac:	f000 80a5 	beq.w	80071fa <_dtoa_r+0x4e2>
 80070b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070b4:	f1cb 0400 	rsb	r4, fp, #0
 80070b8:	4b7c      	ldr	r3, [pc, #496]	; (80072ac <_dtoa_r+0x594>)
 80070ba:	f004 020f 	and.w	r2, r4, #15
 80070be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fa07 	bl	80004d8 <__aeabi_dmul>
 80070ca:	2702      	movs	r7, #2
 80070cc:	2300      	movs	r3, #0
 80070ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070d2:	4e77      	ldr	r6, [pc, #476]	; (80072b0 <_dtoa_r+0x598>)
 80070d4:	1124      	asrs	r4, r4, #4
 80070d6:	2c00      	cmp	r4, #0
 80070d8:	f040 8084 	bne.w	80071e4 <_dtoa_r+0x4cc>
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1d2      	bne.n	8007086 <_dtoa_r+0x36e>
 80070e0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80070e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f000 8087 	beq.w	80071fe <_dtoa_r+0x4e6>
 80070f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80070f4:	2200      	movs	r2, #0
 80070f6:	4b6f      	ldr	r3, [pc, #444]	; (80072b4 <_dtoa_r+0x59c>)
 80070f8:	f7f9 fc60 	bl	80009bc <__aeabi_dcmplt>
 80070fc:	2800      	cmp	r0, #0
 80070fe:	d07e      	beq.n	80071fe <_dtoa_r+0x4e6>
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d07b      	beq.n	80071fe <_dtoa_r+0x4e6>
 8007106:	9b06      	ldr	r3, [sp, #24]
 8007108:	2b00      	cmp	r3, #0
 800710a:	dd38      	ble.n	800717e <_dtoa_r+0x466>
 800710c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007110:	2200      	movs	r2, #0
 8007112:	4b69      	ldr	r3, [pc, #420]	; (80072b8 <_dtoa_r+0x5a0>)
 8007114:	f7f9 f9e0 	bl	80004d8 <__aeabi_dmul>
 8007118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800711c:	9c06      	ldr	r4, [sp, #24]
 800711e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007122:	3701      	adds	r7, #1
 8007124:	4638      	mov	r0, r7
 8007126:	f7f9 f96d 	bl	8000404 <__aeabi_i2d>
 800712a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800712e:	f7f9 f9d3 	bl	80004d8 <__aeabi_dmul>
 8007132:	2200      	movs	r2, #0
 8007134:	4b61      	ldr	r3, [pc, #388]	; (80072bc <_dtoa_r+0x5a4>)
 8007136:	f7f9 f819 	bl	800016c <__adddf3>
 800713a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800713e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007142:	9611      	str	r6, [sp, #68]	; 0x44
 8007144:	2c00      	cmp	r4, #0
 8007146:	d15d      	bne.n	8007204 <_dtoa_r+0x4ec>
 8007148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800714c:	2200      	movs	r2, #0
 800714e:	4b5c      	ldr	r3, [pc, #368]	; (80072c0 <_dtoa_r+0x5a8>)
 8007150:	f7f9 f80a 	bl	8000168 <__aeabi_dsub>
 8007154:	4602      	mov	r2, r0
 8007156:	460b      	mov	r3, r1
 8007158:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800715c:	4633      	mov	r3, r6
 800715e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007160:	f7f9 fc4a 	bl	80009f8 <__aeabi_dcmpgt>
 8007164:	2800      	cmp	r0, #0
 8007166:	f040 8295 	bne.w	8007694 <_dtoa_r+0x97c>
 800716a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800716e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007170:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007174:	f7f9 fc22 	bl	80009bc <__aeabi_dcmplt>
 8007178:	2800      	cmp	r0, #0
 800717a:	f040 8289 	bne.w	8007690 <_dtoa_r+0x978>
 800717e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007182:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007186:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007188:	2b00      	cmp	r3, #0
 800718a:	f2c0 8151 	blt.w	8007430 <_dtoa_r+0x718>
 800718e:	f1bb 0f0e 	cmp.w	fp, #14
 8007192:	f300 814d 	bgt.w	8007430 <_dtoa_r+0x718>
 8007196:	4b45      	ldr	r3, [pc, #276]	; (80072ac <_dtoa_r+0x594>)
 8007198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800719c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80071a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f280 80da 	bge.w	8007360 <_dtoa_r+0x648>
 80071ac:	9b08      	ldr	r3, [sp, #32]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f300 80d6 	bgt.w	8007360 <_dtoa_r+0x648>
 80071b4:	f040 826b 	bne.w	800768e <_dtoa_r+0x976>
 80071b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071bc:	2200      	movs	r2, #0
 80071be:	4b40      	ldr	r3, [pc, #256]	; (80072c0 <_dtoa_r+0x5a8>)
 80071c0:	f7f9 f98a 	bl	80004d8 <__aeabi_dmul>
 80071c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071c8:	f7f9 fc0c 	bl	80009e4 <__aeabi_dcmpge>
 80071cc:	9c08      	ldr	r4, [sp, #32]
 80071ce:	4626      	mov	r6, r4
 80071d0:	2800      	cmp	r0, #0
 80071d2:	f040 8241 	bne.w	8007658 <_dtoa_r+0x940>
 80071d6:	2331      	movs	r3, #49	; 0x31
 80071d8:	9f03      	ldr	r7, [sp, #12]
 80071da:	f10b 0b01 	add.w	fp, fp, #1
 80071de:	f807 3b01 	strb.w	r3, [r7], #1
 80071e2:	e23d      	b.n	8007660 <_dtoa_r+0x948>
 80071e4:	07e2      	lsls	r2, r4, #31
 80071e6:	d505      	bpl.n	80071f4 <_dtoa_r+0x4dc>
 80071e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80071ec:	f7f9 f974 	bl	80004d8 <__aeabi_dmul>
 80071f0:	2301      	movs	r3, #1
 80071f2:	3701      	adds	r7, #1
 80071f4:	1064      	asrs	r4, r4, #1
 80071f6:	3608      	adds	r6, #8
 80071f8:	e76d      	b.n	80070d6 <_dtoa_r+0x3be>
 80071fa:	2702      	movs	r7, #2
 80071fc:	e770      	b.n	80070e0 <_dtoa_r+0x3c8>
 80071fe:	46d8      	mov	r8, fp
 8007200:	9c08      	ldr	r4, [sp, #32]
 8007202:	e78f      	b.n	8007124 <_dtoa_r+0x40c>
 8007204:	9903      	ldr	r1, [sp, #12]
 8007206:	4b29      	ldr	r3, [pc, #164]	; (80072ac <_dtoa_r+0x594>)
 8007208:	4421      	add	r1, r4
 800720a:	9112      	str	r1, [sp, #72]	; 0x48
 800720c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800720e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007212:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800721a:	2900      	cmp	r1, #0
 800721c:	d054      	beq.n	80072c8 <_dtoa_r+0x5b0>
 800721e:	2000      	movs	r0, #0
 8007220:	4928      	ldr	r1, [pc, #160]	; (80072c4 <_dtoa_r+0x5ac>)
 8007222:	f7f9 fa83 	bl	800072c <__aeabi_ddiv>
 8007226:	463b      	mov	r3, r7
 8007228:	4632      	mov	r2, r6
 800722a:	f7f8 ff9d 	bl	8000168 <__aeabi_dsub>
 800722e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007232:	9f03      	ldr	r7, [sp, #12]
 8007234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007238:	f7f9 fbfe 	bl	8000a38 <__aeabi_d2iz>
 800723c:	4604      	mov	r4, r0
 800723e:	f7f9 f8e1 	bl	8000404 <__aeabi_i2d>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800724a:	f7f8 ff8d 	bl	8000168 <__aeabi_dsub>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	3430      	adds	r4, #48	; 0x30
 8007254:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007258:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800725c:	f807 4b01 	strb.w	r4, [r7], #1
 8007260:	f7f9 fbac 	bl	80009bc <__aeabi_dcmplt>
 8007264:	2800      	cmp	r0, #0
 8007266:	d173      	bne.n	8007350 <_dtoa_r+0x638>
 8007268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800726c:	2000      	movs	r0, #0
 800726e:	4911      	ldr	r1, [pc, #68]	; (80072b4 <_dtoa_r+0x59c>)
 8007270:	f7f8 ff7a 	bl	8000168 <__aeabi_dsub>
 8007274:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007278:	f7f9 fba0 	bl	80009bc <__aeabi_dcmplt>
 800727c:	2800      	cmp	r0, #0
 800727e:	f040 80b6 	bne.w	80073ee <_dtoa_r+0x6d6>
 8007282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007284:	429f      	cmp	r7, r3
 8007286:	f43f af7a 	beq.w	800717e <_dtoa_r+0x466>
 800728a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800728e:	2200      	movs	r2, #0
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <_dtoa_r+0x5a0>)
 8007292:	f7f9 f921 	bl	80004d8 <__aeabi_dmul>
 8007296:	2200      	movs	r2, #0
 8007298:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800729c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <_dtoa_r+0x5a0>)
 80072a2:	f7f9 f919 	bl	80004d8 <__aeabi_dmul>
 80072a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072aa:	e7c3      	b.n	8007234 <_dtoa_r+0x51c>
 80072ac:	08008ec0 	.word	0x08008ec0
 80072b0:	08008e98 	.word	0x08008e98
 80072b4:	3ff00000 	.word	0x3ff00000
 80072b8:	40240000 	.word	0x40240000
 80072bc:	401c0000 	.word	0x401c0000
 80072c0:	40140000 	.word	0x40140000
 80072c4:	3fe00000 	.word	0x3fe00000
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f7f9 f904 	bl	80004d8 <__aeabi_dmul>
 80072d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80072d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072d6:	9c03      	ldr	r4, [sp, #12]
 80072d8:	9314      	str	r3, [sp, #80]	; 0x50
 80072da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072de:	f7f9 fbab 	bl	8000a38 <__aeabi_d2iz>
 80072e2:	9015      	str	r0, [sp, #84]	; 0x54
 80072e4:	f7f9 f88e 	bl	8000404 <__aeabi_i2d>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f0:	f7f8 ff3a 	bl	8000168 <__aeabi_dsub>
 80072f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072f6:	4606      	mov	r6, r0
 80072f8:	3330      	adds	r3, #48	; 0x30
 80072fa:	f804 3b01 	strb.w	r3, [r4], #1
 80072fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007300:	460f      	mov	r7, r1
 8007302:	429c      	cmp	r4, r3
 8007304:	f04f 0200 	mov.w	r2, #0
 8007308:	d124      	bne.n	8007354 <_dtoa_r+0x63c>
 800730a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800730e:	4baf      	ldr	r3, [pc, #700]	; (80075cc <_dtoa_r+0x8b4>)
 8007310:	f7f8 ff2c 	bl	800016c <__adddf3>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4630      	mov	r0, r6
 800731a:	4639      	mov	r1, r7
 800731c:	f7f9 fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 8007320:	2800      	cmp	r0, #0
 8007322:	d163      	bne.n	80073ec <_dtoa_r+0x6d4>
 8007324:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007328:	2000      	movs	r0, #0
 800732a:	49a8      	ldr	r1, [pc, #672]	; (80075cc <_dtoa_r+0x8b4>)
 800732c:	f7f8 ff1c 	bl	8000168 <__aeabi_dsub>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	f7f9 fb40 	bl	80009bc <__aeabi_dcmplt>
 800733c:	2800      	cmp	r0, #0
 800733e:	f43f af1e 	beq.w	800717e <_dtoa_r+0x466>
 8007342:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007344:	1e7b      	subs	r3, r7, #1
 8007346:	9314      	str	r3, [sp, #80]	; 0x50
 8007348:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800734c:	2b30      	cmp	r3, #48	; 0x30
 800734e:	d0f8      	beq.n	8007342 <_dtoa_r+0x62a>
 8007350:	46c3      	mov	fp, r8
 8007352:	e03b      	b.n	80073cc <_dtoa_r+0x6b4>
 8007354:	4b9e      	ldr	r3, [pc, #632]	; (80075d0 <_dtoa_r+0x8b8>)
 8007356:	f7f9 f8bf 	bl	80004d8 <__aeabi_dmul>
 800735a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800735e:	e7bc      	b.n	80072da <_dtoa_r+0x5c2>
 8007360:	9f03      	ldr	r7, [sp, #12]
 8007362:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800736a:	4640      	mov	r0, r8
 800736c:	4649      	mov	r1, r9
 800736e:	f7f9 f9dd 	bl	800072c <__aeabi_ddiv>
 8007372:	f7f9 fb61 	bl	8000a38 <__aeabi_d2iz>
 8007376:	4604      	mov	r4, r0
 8007378:	f7f9 f844 	bl	8000404 <__aeabi_i2d>
 800737c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007380:	f7f9 f8aa 	bl	80004d8 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4640      	mov	r0, r8
 800738a:	4649      	mov	r1, r9
 800738c:	f7f8 feec 	bl	8000168 <__aeabi_dsub>
 8007390:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007394:	f807 6b01 	strb.w	r6, [r7], #1
 8007398:	9e03      	ldr	r6, [sp, #12]
 800739a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800739e:	1bbe      	subs	r6, r7, r6
 80073a0:	45b4      	cmp	ip, r6
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	d136      	bne.n	8007416 <_dtoa_r+0x6fe>
 80073a8:	f7f8 fee0 	bl	800016c <__adddf3>
 80073ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073b0:	4680      	mov	r8, r0
 80073b2:	4689      	mov	r9, r1
 80073b4:	f7f9 fb20 	bl	80009f8 <__aeabi_dcmpgt>
 80073b8:	bb58      	cbnz	r0, 8007412 <_dtoa_r+0x6fa>
 80073ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073be:	4640      	mov	r0, r8
 80073c0:	4649      	mov	r1, r9
 80073c2:	f7f9 faf1 	bl	80009a8 <__aeabi_dcmpeq>
 80073c6:	b108      	cbz	r0, 80073cc <_dtoa_r+0x6b4>
 80073c8:	07e3      	lsls	r3, r4, #31
 80073ca:	d422      	bmi.n	8007412 <_dtoa_r+0x6fa>
 80073cc:	4651      	mov	r1, sl
 80073ce:	4628      	mov	r0, r5
 80073d0:	f000 fbc2 	bl	8007b58 <_Bfree>
 80073d4:	2300      	movs	r3, #0
 80073d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073d8:	703b      	strb	r3, [r7, #0]
 80073da:	f10b 0301 	add.w	r3, fp, #1
 80073de:	6013      	str	r3, [r2, #0]
 80073e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f43f ace6 	beq.w	8006db4 <_dtoa_r+0x9c>
 80073e8:	601f      	str	r7, [r3, #0]
 80073ea:	e4e3      	b.n	8006db4 <_dtoa_r+0x9c>
 80073ec:	4627      	mov	r7, r4
 80073ee:	463b      	mov	r3, r7
 80073f0:	461f      	mov	r7, r3
 80073f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073f6:	2a39      	cmp	r2, #57	; 0x39
 80073f8:	d107      	bne.n	800740a <_dtoa_r+0x6f2>
 80073fa:	9a03      	ldr	r2, [sp, #12]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d1f7      	bne.n	80073f0 <_dtoa_r+0x6d8>
 8007400:	2230      	movs	r2, #48	; 0x30
 8007402:	9903      	ldr	r1, [sp, #12]
 8007404:	f108 0801 	add.w	r8, r8, #1
 8007408:	700a      	strb	r2, [r1, #0]
 800740a:	781a      	ldrb	r2, [r3, #0]
 800740c:	3201      	adds	r2, #1
 800740e:	701a      	strb	r2, [r3, #0]
 8007410:	e79e      	b.n	8007350 <_dtoa_r+0x638>
 8007412:	46d8      	mov	r8, fp
 8007414:	e7eb      	b.n	80073ee <_dtoa_r+0x6d6>
 8007416:	2200      	movs	r2, #0
 8007418:	4b6d      	ldr	r3, [pc, #436]	; (80075d0 <_dtoa_r+0x8b8>)
 800741a:	f7f9 f85d 	bl	80004d8 <__aeabi_dmul>
 800741e:	2200      	movs	r2, #0
 8007420:	2300      	movs	r3, #0
 8007422:	4680      	mov	r8, r0
 8007424:	4689      	mov	r9, r1
 8007426:	f7f9 fabf 	bl	80009a8 <__aeabi_dcmpeq>
 800742a:	2800      	cmp	r0, #0
 800742c:	d09b      	beq.n	8007366 <_dtoa_r+0x64e>
 800742e:	e7cd      	b.n	80073cc <_dtoa_r+0x6b4>
 8007430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007432:	2a00      	cmp	r2, #0
 8007434:	f000 80c4 	beq.w	80075c0 <_dtoa_r+0x8a8>
 8007438:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800743a:	2a01      	cmp	r2, #1
 800743c:	f300 80a8 	bgt.w	8007590 <_dtoa_r+0x878>
 8007440:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007442:	2a00      	cmp	r2, #0
 8007444:	f000 80a0 	beq.w	8007588 <_dtoa_r+0x870>
 8007448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800744c:	464f      	mov	r7, r9
 800744e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007452:	2101      	movs	r1, #1
 8007454:	441a      	add	r2, r3
 8007456:	4628      	mov	r0, r5
 8007458:	4499      	add	r9, r3
 800745a:	9209      	str	r2, [sp, #36]	; 0x24
 800745c:	f000 fc32 	bl	8007cc4 <__i2b>
 8007460:	4606      	mov	r6, r0
 8007462:	b15f      	cbz	r7, 800747c <_dtoa_r+0x764>
 8007464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007466:	2b00      	cmp	r3, #0
 8007468:	dd08      	ble.n	800747c <_dtoa_r+0x764>
 800746a:	42bb      	cmp	r3, r7
 800746c:	bfa8      	it	ge
 800746e:	463b      	movge	r3, r7
 8007470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007472:	eba9 0903 	sub.w	r9, r9, r3
 8007476:	1aff      	subs	r7, r7, r3
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	9309      	str	r3, [sp, #36]	; 0x24
 800747c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800747e:	b1f3      	cbz	r3, 80074be <_dtoa_r+0x7a6>
 8007480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 80a0 	beq.w	80075c8 <_dtoa_r+0x8b0>
 8007488:	2c00      	cmp	r4, #0
 800748a:	dd10      	ble.n	80074ae <_dtoa_r+0x796>
 800748c:	4631      	mov	r1, r6
 800748e:	4622      	mov	r2, r4
 8007490:	4628      	mov	r0, r5
 8007492:	f000 fcd5 	bl	8007e40 <__pow5mult>
 8007496:	4652      	mov	r2, sl
 8007498:	4601      	mov	r1, r0
 800749a:	4606      	mov	r6, r0
 800749c:	4628      	mov	r0, r5
 800749e:	f000 fc27 	bl	8007cf0 <__multiply>
 80074a2:	4680      	mov	r8, r0
 80074a4:	4651      	mov	r1, sl
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 fb56 	bl	8007b58 <_Bfree>
 80074ac:	46c2      	mov	sl, r8
 80074ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b0:	1b1a      	subs	r2, r3, r4
 80074b2:	d004      	beq.n	80074be <_dtoa_r+0x7a6>
 80074b4:	4651      	mov	r1, sl
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fcc2 	bl	8007e40 <__pow5mult>
 80074bc:	4682      	mov	sl, r0
 80074be:	2101      	movs	r1, #1
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 fbff 	bl	8007cc4 <__i2b>
 80074c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074c8:	4604      	mov	r4, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f340 8082 	ble.w	80075d4 <_dtoa_r+0x8bc>
 80074d0:	461a      	mov	r2, r3
 80074d2:	4601      	mov	r1, r0
 80074d4:	4628      	mov	r0, r5
 80074d6:	f000 fcb3 	bl	8007e40 <__pow5mult>
 80074da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074dc:	4604      	mov	r4, r0
 80074de:	2b01      	cmp	r3, #1
 80074e0:	dd7b      	ble.n	80075da <_dtoa_r+0x8c2>
 80074e2:	f04f 0800 	mov.w	r8, #0
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074ec:	6918      	ldr	r0, [r3, #16]
 80074ee:	f000 fb9b 	bl	8007c28 <__hi0bits>
 80074f2:	f1c0 0020 	rsb	r0, r0, #32
 80074f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f8:	4418      	add	r0, r3
 80074fa:	f010 001f 	ands.w	r0, r0, #31
 80074fe:	f000 8092 	beq.w	8007626 <_dtoa_r+0x90e>
 8007502:	f1c0 0320 	rsb	r3, r0, #32
 8007506:	2b04      	cmp	r3, #4
 8007508:	f340 8085 	ble.w	8007616 <_dtoa_r+0x8fe>
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	f1c0 001c 	rsb	r0, r0, #28
 8007512:	4403      	add	r3, r0
 8007514:	4481      	add	r9, r0
 8007516:	4407      	add	r7, r0
 8007518:	9309      	str	r3, [sp, #36]	; 0x24
 800751a:	f1b9 0f00 	cmp.w	r9, #0
 800751e:	dd05      	ble.n	800752c <_dtoa_r+0x814>
 8007520:	4651      	mov	r1, sl
 8007522:	464a      	mov	r2, r9
 8007524:	4628      	mov	r0, r5
 8007526:	f000 fce5 	bl	8007ef4 <__lshift>
 800752a:	4682      	mov	sl, r0
 800752c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800752e:	2b00      	cmp	r3, #0
 8007530:	dd05      	ble.n	800753e <_dtoa_r+0x826>
 8007532:	4621      	mov	r1, r4
 8007534:	461a      	mov	r2, r3
 8007536:	4628      	mov	r0, r5
 8007538:	f000 fcdc 	bl	8007ef4 <__lshift>
 800753c:	4604      	mov	r4, r0
 800753e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d072      	beq.n	800762a <_dtoa_r+0x912>
 8007544:	4621      	mov	r1, r4
 8007546:	4650      	mov	r0, sl
 8007548:	f000 fd40 	bl	8007fcc <__mcmp>
 800754c:	2800      	cmp	r0, #0
 800754e:	da6c      	bge.n	800762a <_dtoa_r+0x912>
 8007550:	2300      	movs	r3, #0
 8007552:	4651      	mov	r1, sl
 8007554:	220a      	movs	r2, #10
 8007556:	4628      	mov	r0, r5
 8007558:	f000 fb20 	bl	8007b9c <__multadd>
 800755c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800755e:	4682      	mov	sl, r0
 8007560:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 81ac 	beq.w	80078c2 <_dtoa_r+0xbaa>
 800756a:	2300      	movs	r3, #0
 800756c:	4631      	mov	r1, r6
 800756e:	220a      	movs	r2, #10
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fb13 	bl	8007b9c <__multadd>
 8007576:	9b06      	ldr	r3, [sp, #24]
 8007578:	4606      	mov	r6, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	f300 8093 	bgt.w	80076a6 <_dtoa_r+0x98e>
 8007580:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007582:	2b02      	cmp	r3, #2
 8007584:	dc59      	bgt.n	800763a <_dtoa_r+0x922>
 8007586:	e08e      	b.n	80076a6 <_dtoa_r+0x98e>
 8007588:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800758a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800758e:	e75d      	b.n	800744c <_dtoa_r+0x734>
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	1e5c      	subs	r4, r3, #1
 8007594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007596:	42a3      	cmp	r3, r4
 8007598:	bfbf      	itttt	lt
 800759a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800759c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800759e:	1ae3      	sublt	r3, r4, r3
 80075a0:	18d2      	addlt	r2, r2, r3
 80075a2:	bfa8      	it	ge
 80075a4:	1b1c      	subge	r4, r3, r4
 80075a6:	9b08      	ldr	r3, [sp, #32]
 80075a8:	bfbe      	ittt	lt
 80075aa:	940a      	strlt	r4, [sp, #40]	; 0x28
 80075ac:	920e      	strlt	r2, [sp, #56]	; 0x38
 80075ae:	2400      	movlt	r4, #0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	bfb5      	itete	lt
 80075b4:	eba9 0703 	sublt.w	r7, r9, r3
 80075b8:	464f      	movge	r7, r9
 80075ba:	2300      	movlt	r3, #0
 80075bc:	9b08      	ldrge	r3, [sp, #32]
 80075be:	e747      	b.n	8007450 <_dtoa_r+0x738>
 80075c0:	464f      	mov	r7, r9
 80075c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075c4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80075c6:	e74c      	b.n	8007462 <_dtoa_r+0x74a>
 80075c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ca:	e773      	b.n	80074b4 <_dtoa_r+0x79c>
 80075cc:	3fe00000 	.word	0x3fe00000
 80075d0:	40240000 	.word	0x40240000
 80075d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	dc18      	bgt.n	800760c <_dtoa_r+0x8f4>
 80075da:	9b04      	ldr	r3, [sp, #16]
 80075dc:	b9b3      	cbnz	r3, 800760c <_dtoa_r+0x8f4>
 80075de:	9b05      	ldr	r3, [sp, #20]
 80075e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075e4:	b993      	cbnz	r3, 800760c <_dtoa_r+0x8f4>
 80075e6:	9b05      	ldr	r3, [sp, #20]
 80075e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075ec:	0d1b      	lsrs	r3, r3, #20
 80075ee:	051b      	lsls	r3, r3, #20
 80075f0:	b17b      	cbz	r3, 8007612 <_dtoa_r+0x8fa>
 80075f2:	f04f 0801 	mov.w	r8, #1
 80075f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f8:	f109 0901 	add.w	r9, r9, #1
 80075fc:	3301      	adds	r3, #1
 80075fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f af6f 	bne.w	80074e6 <_dtoa_r+0x7ce>
 8007608:	2001      	movs	r0, #1
 800760a:	e774      	b.n	80074f6 <_dtoa_r+0x7de>
 800760c:	f04f 0800 	mov.w	r8, #0
 8007610:	e7f6      	b.n	8007600 <_dtoa_r+0x8e8>
 8007612:	4698      	mov	r8, r3
 8007614:	e7f4      	b.n	8007600 <_dtoa_r+0x8e8>
 8007616:	d080      	beq.n	800751a <_dtoa_r+0x802>
 8007618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800761a:	331c      	adds	r3, #28
 800761c:	441a      	add	r2, r3
 800761e:	4499      	add	r9, r3
 8007620:	441f      	add	r7, r3
 8007622:	9209      	str	r2, [sp, #36]	; 0x24
 8007624:	e779      	b.n	800751a <_dtoa_r+0x802>
 8007626:	4603      	mov	r3, r0
 8007628:	e7f6      	b.n	8007618 <_dtoa_r+0x900>
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dc34      	bgt.n	800769a <_dtoa_r+0x982>
 8007630:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007632:	2b02      	cmp	r3, #2
 8007634:	dd31      	ble.n	800769a <_dtoa_r+0x982>
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	9306      	str	r3, [sp, #24]
 800763a:	9b06      	ldr	r3, [sp, #24]
 800763c:	b963      	cbnz	r3, 8007658 <_dtoa_r+0x940>
 800763e:	4621      	mov	r1, r4
 8007640:	2205      	movs	r2, #5
 8007642:	4628      	mov	r0, r5
 8007644:	f000 faaa 	bl	8007b9c <__multadd>
 8007648:	4601      	mov	r1, r0
 800764a:	4604      	mov	r4, r0
 800764c:	4650      	mov	r0, sl
 800764e:	f000 fcbd 	bl	8007fcc <__mcmp>
 8007652:	2800      	cmp	r0, #0
 8007654:	f73f adbf 	bgt.w	80071d6 <_dtoa_r+0x4be>
 8007658:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800765a:	9f03      	ldr	r7, [sp, #12]
 800765c:	ea6f 0b03 	mvn.w	fp, r3
 8007660:	f04f 0800 	mov.w	r8, #0
 8007664:	4621      	mov	r1, r4
 8007666:	4628      	mov	r0, r5
 8007668:	f000 fa76 	bl	8007b58 <_Bfree>
 800766c:	2e00      	cmp	r6, #0
 800766e:	f43f aead 	beq.w	80073cc <_dtoa_r+0x6b4>
 8007672:	f1b8 0f00 	cmp.w	r8, #0
 8007676:	d005      	beq.n	8007684 <_dtoa_r+0x96c>
 8007678:	45b0      	cmp	r8, r6
 800767a:	d003      	beq.n	8007684 <_dtoa_r+0x96c>
 800767c:	4641      	mov	r1, r8
 800767e:	4628      	mov	r0, r5
 8007680:	f000 fa6a 	bl	8007b58 <_Bfree>
 8007684:	4631      	mov	r1, r6
 8007686:	4628      	mov	r0, r5
 8007688:	f000 fa66 	bl	8007b58 <_Bfree>
 800768c:	e69e      	b.n	80073cc <_dtoa_r+0x6b4>
 800768e:	2400      	movs	r4, #0
 8007690:	4626      	mov	r6, r4
 8007692:	e7e1      	b.n	8007658 <_dtoa_r+0x940>
 8007694:	46c3      	mov	fp, r8
 8007696:	4626      	mov	r6, r4
 8007698:	e59d      	b.n	80071d6 <_dtoa_r+0x4be>
 800769a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 80c8 	beq.w	8007832 <_dtoa_r+0xb1a>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	9306      	str	r3, [sp, #24]
 80076a6:	2f00      	cmp	r7, #0
 80076a8:	dd05      	ble.n	80076b6 <_dtoa_r+0x99e>
 80076aa:	4631      	mov	r1, r6
 80076ac:	463a      	mov	r2, r7
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fc20 	bl	8007ef4 <__lshift>
 80076b4:	4606      	mov	r6, r0
 80076b6:	f1b8 0f00 	cmp.w	r8, #0
 80076ba:	d05b      	beq.n	8007774 <_dtoa_r+0xa5c>
 80076bc:	4628      	mov	r0, r5
 80076be:	6871      	ldr	r1, [r6, #4]
 80076c0:	f000 fa0a 	bl	8007ad8 <_Balloc>
 80076c4:	4607      	mov	r7, r0
 80076c6:	b928      	cbnz	r0, 80076d4 <_dtoa_r+0x9bc>
 80076c8:	4602      	mov	r2, r0
 80076ca:	f240 21ef 	movw	r1, #751	; 0x2ef
 80076ce:	4b81      	ldr	r3, [pc, #516]	; (80078d4 <_dtoa_r+0xbbc>)
 80076d0:	f7ff bb36 	b.w	8006d40 <_dtoa_r+0x28>
 80076d4:	6932      	ldr	r2, [r6, #16]
 80076d6:	f106 010c 	add.w	r1, r6, #12
 80076da:	3202      	adds	r2, #2
 80076dc:	0092      	lsls	r2, r2, #2
 80076de:	300c      	adds	r0, #12
 80076e0:	f7ff fa82 	bl	8006be8 <memcpy>
 80076e4:	2201      	movs	r2, #1
 80076e6:	4639      	mov	r1, r7
 80076e8:	4628      	mov	r0, r5
 80076ea:	f000 fc03 	bl	8007ef4 <__lshift>
 80076ee:	46b0      	mov	r8, r6
 80076f0:	4606      	mov	r6, r0
 80076f2:	9b03      	ldr	r3, [sp, #12]
 80076f4:	9a03      	ldr	r2, [sp, #12]
 80076f6:	3301      	adds	r3, #1
 80076f8:	9308      	str	r3, [sp, #32]
 80076fa:	9b06      	ldr	r3, [sp, #24]
 80076fc:	4413      	add	r3, r2
 80076fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007700:	9b04      	ldr	r3, [sp, #16]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	930a      	str	r3, [sp, #40]	; 0x28
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	4621      	mov	r1, r4
 800770c:	3b01      	subs	r3, #1
 800770e:	4650      	mov	r0, sl
 8007710:	9304      	str	r3, [sp, #16]
 8007712:	f7ff fa77 	bl	8006c04 <quorem>
 8007716:	4641      	mov	r1, r8
 8007718:	9006      	str	r0, [sp, #24]
 800771a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800771e:	4650      	mov	r0, sl
 8007720:	f000 fc54 	bl	8007fcc <__mcmp>
 8007724:	4632      	mov	r2, r6
 8007726:	9009      	str	r0, [sp, #36]	; 0x24
 8007728:	4621      	mov	r1, r4
 800772a:	4628      	mov	r0, r5
 800772c:	f000 fc6a 	bl	8008004 <__mdiff>
 8007730:	68c2      	ldr	r2, [r0, #12]
 8007732:	4607      	mov	r7, r0
 8007734:	bb02      	cbnz	r2, 8007778 <_dtoa_r+0xa60>
 8007736:	4601      	mov	r1, r0
 8007738:	4650      	mov	r0, sl
 800773a:	f000 fc47 	bl	8007fcc <__mcmp>
 800773e:	4602      	mov	r2, r0
 8007740:	4639      	mov	r1, r7
 8007742:	4628      	mov	r0, r5
 8007744:	920c      	str	r2, [sp, #48]	; 0x30
 8007746:	f000 fa07 	bl	8007b58 <_Bfree>
 800774a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800774c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800774e:	9f08      	ldr	r7, [sp, #32]
 8007750:	ea43 0102 	orr.w	r1, r3, r2
 8007754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007756:	4319      	orrs	r1, r3
 8007758:	d110      	bne.n	800777c <_dtoa_r+0xa64>
 800775a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800775e:	d029      	beq.n	80077b4 <_dtoa_r+0xa9c>
 8007760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007762:	2b00      	cmp	r3, #0
 8007764:	dd02      	ble.n	800776c <_dtoa_r+0xa54>
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800776c:	9b04      	ldr	r3, [sp, #16]
 800776e:	f883 9000 	strb.w	r9, [r3]
 8007772:	e777      	b.n	8007664 <_dtoa_r+0x94c>
 8007774:	4630      	mov	r0, r6
 8007776:	e7ba      	b.n	80076ee <_dtoa_r+0x9d6>
 8007778:	2201      	movs	r2, #1
 800777a:	e7e1      	b.n	8007740 <_dtoa_r+0xa28>
 800777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	db04      	blt.n	800778c <_dtoa_r+0xa74>
 8007782:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007784:	430b      	orrs	r3, r1
 8007786:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007788:	430b      	orrs	r3, r1
 800778a:	d120      	bne.n	80077ce <_dtoa_r+0xab6>
 800778c:	2a00      	cmp	r2, #0
 800778e:	dded      	ble.n	800776c <_dtoa_r+0xa54>
 8007790:	4651      	mov	r1, sl
 8007792:	2201      	movs	r2, #1
 8007794:	4628      	mov	r0, r5
 8007796:	f000 fbad 	bl	8007ef4 <__lshift>
 800779a:	4621      	mov	r1, r4
 800779c:	4682      	mov	sl, r0
 800779e:	f000 fc15 	bl	8007fcc <__mcmp>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	dc03      	bgt.n	80077ae <_dtoa_r+0xa96>
 80077a6:	d1e1      	bne.n	800776c <_dtoa_r+0xa54>
 80077a8:	f019 0f01 	tst.w	r9, #1
 80077ac:	d0de      	beq.n	800776c <_dtoa_r+0xa54>
 80077ae:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077b2:	d1d8      	bne.n	8007766 <_dtoa_r+0xa4e>
 80077b4:	2339      	movs	r3, #57	; 0x39
 80077b6:	9a04      	ldr	r2, [sp, #16]
 80077b8:	7013      	strb	r3, [r2, #0]
 80077ba:	463b      	mov	r3, r7
 80077bc:	461f      	mov	r7, r3
 80077be:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	2a39      	cmp	r2, #57	; 0x39
 80077c6:	d06b      	beq.n	80078a0 <_dtoa_r+0xb88>
 80077c8:	3201      	adds	r2, #1
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e74a      	b.n	8007664 <_dtoa_r+0x94c>
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	dd07      	ble.n	80077e2 <_dtoa_r+0xaca>
 80077d2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077d6:	d0ed      	beq.n	80077b4 <_dtoa_r+0xa9c>
 80077d8:	9a04      	ldr	r2, [sp, #16]
 80077da:	f109 0301 	add.w	r3, r9, #1
 80077de:	7013      	strb	r3, [r2, #0]
 80077e0:	e740      	b.n	8007664 <_dtoa_r+0x94c>
 80077e2:	9b08      	ldr	r3, [sp, #32]
 80077e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077e6:	f803 9c01 	strb.w	r9, [r3, #-1]
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d042      	beq.n	8007874 <_dtoa_r+0xb5c>
 80077ee:	4651      	mov	r1, sl
 80077f0:	2300      	movs	r3, #0
 80077f2:	220a      	movs	r2, #10
 80077f4:	4628      	mov	r0, r5
 80077f6:	f000 f9d1 	bl	8007b9c <__multadd>
 80077fa:	45b0      	cmp	r8, r6
 80077fc:	4682      	mov	sl, r0
 80077fe:	f04f 0300 	mov.w	r3, #0
 8007802:	f04f 020a 	mov.w	r2, #10
 8007806:	4641      	mov	r1, r8
 8007808:	4628      	mov	r0, r5
 800780a:	d107      	bne.n	800781c <_dtoa_r+0xb04>
 800780c:	f000 f9c6 	bl	8007b9c <__multadd>
 8007810:	4680      	mov	r8, r0
 8007812:	4606      	mov	r6, r0
 8007814:	9b08      	ldr	r3, [sp, #32]
 8007816:	3301      	adds	r3, #1
 8007818:	9308      	str	r3, [sp, #32]
 800781a:	e775      	b.n	8007708 <_dtoa_r+0x9f0>
 800781c:	f000 f9be 	bl	8007b9c <__multadd>
 8007820:	4631      	mov	r1, r6
 8007822:	4680      	mov	r8, r0
 8007824:	2300      	movs	r3, #0
 8007826:	220a      	movs	r2, #10
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f9b7 	bl	8007b9c <__multadd>
 800782e:	4606      	mov	r6, r0
 8007830:	e7f0      	b.n	8007814 <_dtoa_r+0xafc>
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	9306      	str	r3, [sp, #24]
 8007836:	9f03      	ldr	r7, [sp, #12]
 8007838:	4621      	mov	r1, r4
 800783a:	4650      	mov	r0, sl
 800783c:	f7ff f9e2 	bl	8006c04 <quorem>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007846:	f807 9b01 	strb.w	r9, [r7], #1
 800784a:	1afa      	subs	r2, r7, r3
 800784c:	9b06      	ldr	r3, [sp, #24]
 800784e:	4293      	cmp	r3, r2
 8007850:	dd07      	ble.n	8007862 <_dtoa_r+0xb4a>
 8007852:	4651      	mov	r1, sl
 8007854:	2300      	movs	r3, #0
 8007856:	220a      	movs	r2, #10
 8007858:	4628      	mov	r0, r5
 800785a:	f000 f99f 	bl	8007b9c <__multadd>
 800785e:	4682      	mov	sl, r0
 8007860:	e7ea      	b.n	8007838 <_dtoa_r+0xb20>
 8007862:	9b06      	ldr	r3, [sp, #24]
 8007864:	f04f 0800 	mov.w	r8, #0
 8007868:	2b00      	cmp	r3, #0
 800786a:	bfcc      	ite	gt
 800786c:	461f      	movgt	r7, r3
 800786e:	2701      	movle	r7, #1
 8007870:	9b03      	ldr	r3, [sp, #12]
 8007872:	441f      	add	r7, r3
 8007874:	4651      	mov	r1, sl
 8007876:	2201      	movs	r2, #1
 8007878:	4628      	mov	r0, r5
 800787a:	f000 fb3b 	bl	8007ef4 <__lshift>
 800787e:	4621      	mov	r1, r4
 8007880:	4682      	mov	sl, r0
 8007882:	f000 fba3 	bl	8007fcc <__mcmp>
 8007886:	2800      	cmp	r0, #0
 8007888:	dc97      	bgt.n	80077ba <_dtoa_r+0xaa2>
 800788a:	d102      	bne.n	8007892 <_dtoa_r+0xb7a>
 800788c:	f019 0f01 	tst.w	r9, #1
 8007890:	d193      	bne.n	80077ba <_dtoa_r+0xaa2>
 8007892:	463b      	mov	r3, r7
 8007894:	461f      	mov	r7, r3
 8007896:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800789a:	2a30      	cmp	r2, #48	; 0x30
 800789c:	d0fa      	beq.n	8007894 <_dtoa_r+0xb7c>
 800789e:	e6e1      	b.n	8007664 <_dtoa_r+0x94c>
 80078a0:	9a03      	ldr	r2, [sp, #12]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d18a      	bne.n	80077bc <_dtoa_r+0xaa4>
 80078a6:	2331      	movs	r3, #49	; 0x31
 80078a8:	f10b 0b01 	add.w	fp, fp, #1
 80078ac:	e797      	b.n	80077de <_dtoa_r+0xac6>
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <_dtoa_r+0xbc0>)
 80078b0:	f7ff ba9f 	b.w	8006df2 <_dtoa_r+0xda>
 80078b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f47f aa77 	bne.w	8006daa <_dtoa_r+0x92>
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <_dtoa_r+0xbc4>)
 80078be:	f7ff ba98 	b.w	8006df2 <_dtoa_r+0xda>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dcb6      	bgt.n	8007836 <_dtoa_r+0xb1e>
 80078c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	f73f aeb5 	bgt.w	800763a <_dtoa_r+0x922>
 80078d0:	e7b1      	b.n	8007836 <_dtoa_r+0xb1e>
 80078d2:	bf00      	nop
 80078d4:	08008e2a 	.word	0x08008e2a
 80078d8:	08008d8a 	.word	0x08008d8a
 80078dc:	08008dae 	.word	0x08008dae

080078e0 <_free_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4605      	mov	r5, r0
 80078e4:	2900      	cmp	r1, #0
 80078e6:	d040      	beq.n	800796a <_free_r+0x8a>
 80078e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ec:	1f0c      	subs	r4, r1, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfb8      	it	lt
 80078f2:	18e4      	addlt	r4, r4, r3
 80078f4:	f000 f8e4 	bl	8007ac0 <__malloc_lock>
 80078f8:	4a1c      	ldr	r2, [pc, #112]	; (800796c <_free_r+0x8c>)
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	b933      	cbnz	r3, 800790c <_free_r+0x2c>
 80078fe:	6063      	str	r3, [r4, #4]
 8007900:	6014      	str	r4, [r2, #0]
 8007902:	4628      	mov	r0, r5
 8007904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007908:	f000 b8e0 	b.w	8007acc <__malloc_unlock>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d908      	bls.n	8007922 <_free_r+0x42>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	1821      	adds	r1, r4, r0
 8007914:	428b      	cmp	r3, r1
 8007916:	bf01      	itttt	eq
 8007918:	6819      	ldreq	r1, [r3, #0]
 800791a:	685b      	ldreq	r3, [r3, #4]
 800791c:	1809      	addeq	r1, r1, r0
 800791e:	6021      	streq	r1, [r4, #0]
 8007920:	e7ed      	b.n	80078fe <_free_r+0x1e>
 8007922:	461a      	mov	r2, r3
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b10b      	cbz	r3, 800792c <_free_r+0x4c>
 8007928:	42a3      	cmp	r3, r4
 800792a:	d9fa      	bls.n	8007922 <_free_r+0x42>
 800792c:	6811      	ldr	r1, [r2, #0]
 800792e:	1850      	adds	r0, r2, r1
 8007930:	42a0      	cmp	r0, r4
 8007932:	d10b      	bne.n	800794c <_free_r+0x6c>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	4401      	add	r1, r0
 8007938:	1850      	adds	r0, r2, r1
 800793a:	4283      	cmp	r3, r0
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	d1e0      	bne.n	8007902 <_free_r+0x22>
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4408      	add	r0, r1
 8007946:	6010      	str	r0, [r2, #0]
 8007948:	6053      	str	r3, [r2, #4]
 800794a:	e7da      	b.n	8007902 <_free_r+0x22>
 800794c:	d902      	bls.n	8007954 <_free_r+0x74>
 800794e:	230c      	movs	r3, #12
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	e7d6      	b.n	8007902 <_free_r+0x22>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	1821      	adds	r1, r4, r0
 8007958:	428b      	cmp	r3, r1
 800795a:	bf01      	itttt	eq
 800795c:	6819      	ldreq	r1, [r3, #0]
 800795e:	685b      	ldreq	r3, [r3, #4]
 8007960:	1809      	addeq	r1, r1, r0
 8007962:	6021      	streq	r1, [r4, #0]
 8007964:	6063      	str	r3, [r4, #4]
 8007966:	6054      	str	r4, [r2, #4]
 8007968:	e7cb      	b.n	8007902 <_free_r+0x22>
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	200004c8 	.word	0x200004c8

08007970 <malloc>:
 8007970:	4b02      	ldr	r3, [pc, #8]	; (800797c <malloc+0xc>)
 8007972:	4601      	mov	r1, r0
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	f000 b823 	b.w	80079c0 <_malloc_r>
 800797a:	bf00      	nop
 800797c:	20000064 	.word	0x20000064

08007980 <sbrk_aligned>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4e0e      	ldr	r6, [pc, #56]	; (80079bc <sbrk_aligned+0x3c>)
 8007984:	460c      	mov	r4, r1
 8007986:	6831      	ldr	r1, [r6, #0]
 8007988:	4605      	mov	r5, r0
 800798a:	b911      	cbnz	r1, 8007992 <sbrk_aligned+0x12>
 800798c:	f000 fe8c 	bl	80086a8 <_sbrk_r>
 8007990:	6030      	str	r0, [r6, #0]
 8007992:	4621      	mov	r1, r4
 8007994:	4628      	mov	r0, r5
 8007996:	f000 fe87 	bl	80086a8 <_sbrk_r>
 800799a:	1c43      	adds	r3, r0, #1
 800799c:	d00a      	beq.n	80079b4 <sbrk_aligned+0x34>
 800799e:	1cc4      	adds	r4, r0, #3
 80079a0:	f024 0403 	bic.w	r4, r4, #3
 80079a4:	42a0      	cmp	r0, r4
 80079a6:	d007      	beq.n	80079b8 <sbrk_aligned+0x38>
 80079a8:	1a21      	subs	r1, r4, r0
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 fe7c 	bl	80086a8 <_sbrk_r>
 80079b0:	3001      	adds	r0, #1
 80079b2:	d101      	bne.n	80079b8 <sbrk_aligned+0x38>
 80079b4:	f04f 34ff 	mov.w	r4, #4294967295
 80079b8:	4620      	mov	r0, r4
 80079ba:	bd70      	pop	{r4, r5, r6, pc}
 80079bc:	200004cc 	.word	0x200004cc

080079c0 <_malloc_r>:
 80079c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079c4:	1ccd      	adds	r5, r1, #3
 80079c6:	f025 0503 	bic.w	r5, r5, #3
 80079ca:	3508      	adds	r5, #8
 80079cc:	2d0c      	cmp	r5, #12
 80079ce:	bf38      	it	cc
 80079d0:	250c      	movcc	r5, #12
 80079d2:	2d00      	cmp	r5, #0
 80079d4:	4607      	mov	r7, r0
 80079d6:	db01      	blt.n	80079dc <_malloc_r+0x1c>
 80079d8:	42a9      	cmp	r1, r5
 80079da:	d905      	bls.n	80079e8 <_malloc_r+0x28>
 80079dc:	230c      	movs	r3, #12
 80079de:	2600      	movs	r6, #0
 80079e0:	603b      	str	r3, [r7, #0]
 80079e2:	4630      	mov	r0, r6
 80079e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007abc <_malloc_r+0xfc>
 80079ec:	f000 f868 	bl	8007ac0 <__malloc_lock>
 80079f0:	f8d8 3000 	ldr.w	r3, [r8]
 80079f4:	461c      	mov	r4, r3
 80079f6:	bb5c      	cbnz	r4, 8007a50 <_malloc_r+0x90>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4638      	mov	r0, r7
 80079fc:	f7ff ffc0 	bl	8007980 <sbrk_aligned>
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	4604      	mov	r4, r0
 8007a04:	d155      	bne.n	8007ab2 <_malloc_r+0xf2>
 8007a06:	f8d8 4000 	ldr.w	r4, [r8]
 8007a0a:	4626      	mov	r6, r4
 8007a0c:	2e00      	cmp	r6, #0
 8007a0e:	d145      	bne.n	8007a9c <_malloc_r+0xdc>
 8007a10:	2c00      	cmp	r4, #0
 8007a12:	d048      	beq.n	8007aa6 <_malloc_r+0xe6>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	4631      	mov	r1, r6
 8007a18:	4638      	mov	r0, r7
 8007a1a:	eb04 0903 	add.w	r9, r4, r3
 8007a1e:	f000 fe43 	bl	80086a8 <_sbrk_r>
 8007a22:	4581      	cmp	r9, r0
 8007a24:	d13f      	bne.n	8007aa6 <_malloc_r+0xe6>
 8007a26:	6821      	ldr	r1, [r4, #0]
 8007a28:	4638      	mov	r0, r7
 8007a2a:	1a6d      	subs	r5, r5, r1
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	f7ff ffa7 	bl	8007980 <sbrk_aligned>
 8007a32:	3001      	adds	r0, #1
 8007a34:	d037      	beq.n	8007aa6 <_malloc_r+0xe6>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	442b      	add	r3, r5
 8007a3a:	6023      	str	r3, [r4, #0]
 8007a3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d038      	beq.n	8007ab6 <_malloc_r+0xf6>
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	42a2      	cmp	r2, r4
 8007a48:	d12b      	bne.n	8007aa2 <_malloc_r+0xe2>
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
 8007a4e:	e00f      	b.n	8007a70 <_malloc_r+0xb0>
 8007a50:	6822      	ldr	r2, [r4, #0]
 8007a52:	1b52      	subs	r2, r2, r5
 8007a54:	d41f      	bmi.n	8007a96 <_malloc_r+0xd6>
 8007a56:	2a0b      	cmp	r2, #11
 8007a58:	d917      	bls.n	8007a8a <_malloc_r+0xca>
 8007a5a:	1961      	adds	r1, r4, r5
 8007a5c:	42a3      	cmp	r3, r4
 8007a5e:	6025      	str	r5, [r4, #0]
 8007a60:	bf18      	it	ne
 8007a62:	6059      	strne	r1, [r3, #4]
 8007a64:	6863      	ldr	r3, [r4, #4]
 8007a66:	bf08      	it	eq
 8007a68:	f8c8 1000 	streq.w	r1, [r8]
 8007a6c:	5162      	str	r2, [r4, r5]
 8007a6e:	604b      	str	r3, [r1, #4]
 8007a70:	4638      	mov	r0, r7
 8007a72:	f104 060b 	add.w	r6, r4, #11
 8007a76:	f000 f829 	bl	8007acc <__malloc_unlock>
 8007a7a:	f026 0607 	bic.w	r6, r6, #7
 8007a7e:	1d23      	adds	r3, r4, #4
 8007a80:	1af2      	subs	r2, r6, r3
 8007a82:	d0ae      	beq.n	80079e2 <_malloc_r+0x22>
 8007a84:	1b9b      	subs	r3, r3, r6
 8007a86:	50a3      	str	r3, [r4, r2]
 8007a88:	e7ab      	b.n	80079e2 <_malloc_r+0x22>
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	6862      	ldr	r2, [r4, #4]
 8007a8e:	d1dd      	bne.n	8007a4c <_malloc_r+0x8c>
 8007a90:	f8c8 2000 	str.w	r2, [r8]
 8007a94:	e7ec      	b.n	8007a70 <_malloc_r+0xb0>
 8007a96:	4623      	mov	r3, r4
 8007a98:	6864      	ldr	r4, [r4, #4]
 8007a9a:	e7ac      	b.n	80079f6 <_malloc_r+0x36>
 8007a9c:	4634      	mov	r4, r6
 8007a9e:	6876      	ldr	r6, [r6, #4]
 8007aa0:	e7b4      	b.n	8007a0c <_malloc_r+0x4c>
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	e7cc      	b.n	8007a40 <_malloc_r+0x80>
 8007aa6:	230c      	movs	r3, #12
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	f000 f80e 	bl	8007acc <__malloc_unlock>
 8007ab0:	e797      	b.n	80079e2 <_malloc_r+0x22>
 8007ab2:	6025      	str	r5, [r4, #0]
 8007ab4:	e7dc      	b.n	8007a70 <_malloc_r+0xb0>
 8007ab6:	605b      	str	r3, [r3, #4]
 8007ab8:	deff      	udf	#255	; 0xff
 8007aba:	bf00      	nop
 8007abc:	200004c8 	.word	0x200004c8

08007ac0 <__malloc_lock>:
 8007ac0:	4801      	ldr	r0, [pc, #4]	; (8007ac8 <__malloc_lock+0x8>)
 8007ac2:	f7ff b881 	b.w	8006bc8 <__retarget_lock_acquire_recursive>
 8007ac6:	bf00      	nop
 8007ac8:	200004c4 	.word	0x200004c4

08007acc <__malloc_unlock>:
 8007acc:	4801      	ldr	r0, [pc, #4]	; (8007ad4 <__malloc_unlock+0x8>)
 8007ace:	f7ff b87c 	b.w	8006bca <__retarget_lock_release_recursive>
 8007ad2:	bf00      	nop
 8007ad4:	200004c4 	.word	0x200004c4

08007ad8 <_Balloc>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	69c6      	ldr	r6, [r0, #28]
 8007adc:	4604      	mov	r4, r0
 8007ade:	460d      	mov	r5, r1
 8007ae0:	b976      	cbnz	r6, 8007b00 <_Balloc+0x28>
 8007ae2:	2010      	movs	r0, #16
 8007ae4:	f7ff ff44 	bl	8007970 <malloc>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	61e0      	str	r0, [r4, #28]
 8007aec:	b920      	cbnz	r0, 8007af8 <_Balloc+0x20>
 8007aee:	216b      	movs	r1, #107	; 0x6b
 8007af0:	4b17      	ldr	r3, [pc, #92]	; (8007b50 <_Balloc+0x78>)
 8007af2:	4818      	ldr	r0, [pc, #96]	; (8007b54 <_Balloc+0x7c>)
 8007af4:	f000 fde8 	bl	80086c8 <__assert_func>
 8007af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007afc:	6006      	str	r6, [r0, #0]
 8007afe:	60c6      	str	r6, [r0, #12]
 8007b00:	69e6      	ldr	r6, [r4, #28]
 8007b02:	68f3      	ldr	r3, [r6, #12]
 8007b04:	b183      	cbz	r3, 8007b28 <_Balloc+0x50>
 8007b06:	69e3      	ldr	r3, [r4, #28]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b0e:	b9b8      	cbnz	r0, 8007b40 <_Balloc+0x68>
 8007b10:	2101      	movs	r1, #1
 8007b12:	fa01 f605 	lsl.w	r6, r1, r5
 8007b16:	1d72      	adds	r2, r6, #5
 8007b18:	4620      	mov	r0, r4
 8007b1a:	0092      	lsls	r2, r2, #2
 8007b1c:	f000 fdf2 	bl	8008704 <_calloc_r>
 8007b20:	b160      	cbz	r0, 8007b3c <_Balloc+0x64>
 8007b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b26:	e00e      	b.n	8007b46 <_Balloc+0x6e>
 8007b28:	2221      	movs	r2, #33	; 0x21
 8007b2a:	2104      	movs	r1, #4
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	f000 fde9 	bl	8008704 <_calloc_r>
 8007b32:	69e3      	ldr	r3, [r4, #28]
 8007b34:	60f0      	str	r0, [r6, #12]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e4      	bne.n	8007b06 <_Balloc+0x2e>
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	bd70      	pop	{r4, r5, r6, pc}
 8007b40:	6802      	ldr	r2, [r0, #0]
 8007b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b46:	2300      	movs	r3, #0
 8007b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b4c:	e7f7      	b.n	8007b3e <_Balloc+0x66>
 8007b4e:	bf00      	nop
 8007b50:	08008dbb 	.word	0x08008dbb
 8007b54:	08008e3b 	.word	0x08008e3b

08007b58 <_Bfree>:
 8007b58:	b570      	push	{r4, r5, r6, lr}
 8007b5a:	69c6      	ldr	r6, [r0, #28]
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	460c      	mov	r4, r1
 8007b60:	b976      	cbnz	r6, 8007b80 <_Bfree+0x28>
 8007b62:	2010      	movs	r0, #16
 8007b64:	f7ff ff04 	bl	8007970 <malloc>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	61e8      	str	r0, [r5, #28]
 8007b6c:	b920      	cbnz	r0, 8007b78 <_Bfree+0x20>
 8007b6e:	218f      	movs	r1, #143	; 0x8f
 8007b70:	4b08      	ldr	r3, [pc, #32]	; (8007b94 <_Bfree+0x3c>)
 8007b72:	4809      	ldr	r0, [pc, #36]	; (8007b98 <_Bfree+0x40>)
 8007b74:	f000 fda8 	bl	80086c8 <__assert_func>
 8007b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b7c:	6006      	str	r6, [r0, #0]
 8007b7e:	60c6      	str	r6, [r0, #12]
 8007b80:	b13c      	cbz	r4, 8007b92 <_Bfree+0x3a>
 8007b82:	69eb      	ldr	r3, [r5, #28]
 8007b84:	6862      	ldr	r2, [r4, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b8c:	6021      	str	r1, [r4, #0]
 8007b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	08008dbb 	.word	0x08008dbb
 8007b98:	08008e3b 	.word	0x08008e3b

08007b9c <__multadd>:
 8007b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	461e      	mov	r6, r3
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	690d      	ldr	r5, [r1, #16]
 8007baa:	f101 0c14 	add.w	ip, r1, #20
 8007bae:	f8dc 3000 	ldr.w	r3, [ip]
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	b299      	uxth	r1, r3
 8007bb6:	fb02 6101 	mla	r1, r2, r1, r6
 8007bba:	0c1e      	lsrs	r6, r3, #16
 8007bbc:	0c0b      	lsrs	r3, r1, #16
 8007bbe:	fb02 3306 	mla	r3, r2, r6, r3
 8007bc2:	b289      	uxth	r1, r1
 8007bc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bc8:	4285      	cmp	r5, r0
 8007bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bce:	f84c 1b04 	str.w	r1, [ip], #4
 8007bd2:	dcec      	bgt.n	8007bae <__multadd+0x12>
 8007bd4:	b30e      	cbz	r6, 8007c1a <__multadd+0x7e>
 8007bd6:	68a3      	ldr	r3, [r4, #8]
 8007bd8:	42ab      	cmp	r3, r5
 8007bda:	dc19      	bgt.n	8007c10 <__multadd+0x74>
 8007bdc:	6861      	ldr	r1, [r4, #4]
 8007bde:	4638      	mov	r0, r7
 8007be0:	3101      	adds	r1, #1
 8007be2:	f7ff ff79 	bl	8007ad8 <_Balloc>
 8007be6:	4680      	mov	r8, r0
 8007be8:	b928      	cbnz	r0, 8007bf6 <__multadd+0x5a>
 8007bea:	4602      	mov	r2, r0
 8007bec:	21ba      	movs	r1, #186	; 0xba
 8007bee:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <__multadd+0x84>)
 8007bf0:	480c      	ldr	r0, [pc, #48]	; (8007c24 <__multadd+0x88>)
 8007bf2:	f000 fd69 	bl	80086c8 <__assert_func>
 8007bf6:	6922      	ldr	r2, [r4, #16]
 8007bf8:	f104 010c 	add.w	r1, r4, #12
 8007bfc:	3202      	adds	r2, #2
 8007bfe:	0092      	lsls	r2, r2, #2
 8007c00:	300c      	adds	r0, #12
 8007c02:	f7fe fff1 	bl	8006be8 <memcpy>
 8007c06:	4621      	mov	r1, r4
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f7ff ffa5 	bl	8007b58 <_Bfree>
 8007c0e:	4644      	mov	r4, r8
 8007c10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c14:	3501      	adds	r5, #1
 8007c16:	615e      	str	r6, [r3, #20]
 8007c18:	6125      	str	r5, [r4, #16]
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	08008e2a 	.word	0x08008e2a
 8007c24:	08008e3b 	.word	0x08008e3b

08007c28 <__hi0bits>:
 8007c28:	0c02      	lsrs	r2, r0, #16
 8007c2a:	0412      	lsls	r2, r2, #16
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	b9ca      	cbnz	r2, 8007c64 <__hi0bits+0x3c>
 8007c30:	0403      	lsls	r3, r0, #16
 8007c32:	2010      	movs	r0, #16
 8007c34:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c38:	bf04      	itt	eq
 8007c3a:	021b      	lsleq	r3, r3, #8
 8007c3c:	3008      	addeq	r0, #8
 8007c3e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c42:	bf04      	itt	eq
 8007c44:	011b      	lsleq	r3, r3, #4
 8007c46:	3004      	addeq	r0, #4
 8007c48:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c4c:	bf04      	itt	eq
 8007c4e:	009b      	lsleq	r3, r3, #2
 8007c50:	3002      	addeq	r0, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	db05      	blt.n	8007c62 <__hi0bits+0x3a>
 8007c56:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007c5a:	f100 0001 	add.w	r0, r0, #1
 8007c5e:	bf08      	it	eq
 8007c60:	2020      	moveq	r0, #32
 8007c62:	4770      	bx	lr
 8007c64:	2000      	movs	r0, #0
 8007c66:	e7e5      	b.n	8007c34 <__hi0bits+0xc>

08007c68 <__lo0bits>:
 8007c68:	6803      	ldr	r3, [r0, #0]
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	f013 0007 	ands.w	r0, r3, #7
 8007c70:	d00b      	beq.n	8007c8a <__lo0bits+0x22>
 8007c72:	07d9      	lsls	r1, r3, #31
 8007c74:	d421      	bmi.n	8007cba <__lo0bits+0x52>
 8007c76:	0798      	lsls	r0, r3, #30
 8007c78:	bf49      	itett	mi
 8007c7a:	085b      	lsrmi	r3, r3, #1
 8007c7c:	089b      	lsrpl	r3, r3, #2
 8007c7e:	2001      	movmi	r0, #1
 8007c80:	6013      	strmi	r3, [r2, #0]
 8007c82:	bf5c      	itt	pl
 8007c84:	2002      	movpl	r0, #2
 8007c86:	6013      	strpl	r3, [r2, #0]
 8007c88:	4770      	bx	lr
 8007c8a:	b299      	uxth	r1, r3
 8007c8c:	b909      	cbnz	r1, 8007c92 <__lo0bits+0x2a>
 8007c8e:	2010      	movs	r0, #16
 8007c90:	0c1b      	lsrs	r3, r3, #16
 8007c92:	b2d9      	uxtb	r1, r3
 8007c94:	b909      	cbnz	r1, 8007c9a <__lo0bits+0x32>
 8007c96:	3008      	adds	r0, #8
 8007c98:	0a1b      	lsrs	r3, r3, #8
 8007c9a:	0719      	lsls	r1, r3, #28
 8007c9c:	bf04      	itt	eq
 8007c9e:	091b      	lsreq	r3, r3, #4
 8007ca0:	3004      	addeq	r0, #4
 8007ca2:	0799      	lsls	r1, r3, #30
 8007ca4:	bf04      	itt	eq
 8007ca6:	089b      	lsreq	r3, r3, #2
 8007ca8:	3002      	addeq	r0, #2
 8007caa:	07d9      	lsls	r1, r3, #31
 8007cac:	d403      	bmi.n	8007cb6 <__lo0bits+0x4e>
 8007cae:	085b      	lsrs	r3, r3, #1
 8007cb0:	f100 0001 	add.w	r0, r0, #1
 8007cb4:	d003      	beq.n	8007cbe <__lo0bits+0x56>
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	4770      	bx	lr
 8007cba:	2000      	movs	r0, #0
 8007cbc:	4770      	bx	lr
 8007cbe:	2020      	movs	r0, #32
 8007cc0:	4770      	bx	lr
	...

08007cc4 <__i2b>:
 8007cc4:	b510      	push	{r4, lr}
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	2101      	movs	r1, #1
 8007cca:	f7ff ff05 	bl	8007ad8 <_Balloc>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	b928      	cbnz	r0, 8007cde <__i2b+0x1a>
 8007cd2:	f240 1145 	movw	r1, #325	; 0x145
 8007cd6:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <__i2b+0x24>)
 8007cd8:	4804      	ldr	r0, [pc, #16]	; (8007cec <__i2b+0x28>)
 8007cda:	f000 fcf5 	bl	80086c8 <__assert_func>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	6144      	str	r4, [r0, #20]
 8007ce2:	6103      	str	r3, [r0, #16]
 8007ce4:	bd10      	pop	{r4, pc}
 8007ce6:	bf00      	nop
 8007ce8:	08008e2a 	.word	0x08008e2a
 8007cec:	08008e3b 	.word	0x08008e3b

08007cf0 <__multiply>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	4691      	mov	r9, r2
 8007cf6:	690a      	ldr	r2, [r1, #16]
 8007cf8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	bfbe      	ittt	lt
 8007d02:	460b      	movlt	r3, r1
 8007d04:	464c      	movlt	r4, r9
 8007d06:	4699      	movlt	r9, r3
 8007d08:	6927      	ldr	r7, [r4, #16]
 8007d0a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6861      	ldr	r1, [r4, #4]
 8007d12:	eb07 060a 	add.w	r6, r7, sl
 8007d16:	42b3      	cmp	r3, r6
 8007d18:	b085      	sub	sp, #20
 8007d1a:	bfb8      	it	lt
 8007d1c:	3101      	addlt	r1, #1
 8007d1e:	f7ff fedb 	bl	8007ad8 <_Balloc>
 8007d22:	b930      	cbnz	r0, 8007d32 <__multiply+0x42>
 8007d24:	4602      	mov	r2, r0
 8007d26:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d2a:	4b43      	ldr	r3, [pc, #268]	; (8007e38 <__multiply+0x148>)
 8007d2c:	4843      	ldr	r0, [pc, #268]	; (8007e3c <__multiply+0x14c>)
 8007d2e:	f000 fccb 	bl	80086c8 <__assert_func>
 8007d32:	f100 0514 	add.w	r5, r0, #20
 8007d36:	462b      	mov	r3, r5
 8007d38:	2200      	movs	r2, #0
 8007d3a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d3e:	4543      	cmp	r3, r8
 8007d40:	d321      	bcc.n	8007d86 <__multiply+0x96>
 8007d42:	f104 0314 	add.w	r3, r4, #20
 8007d46:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d4a:	f109 0314 	add.w	r3, r9, #20
 8007d4e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d52:	9202      	str	r2, [sp, #8]
 8007d54:	1b3a      	subs	r2, r7, r4
 8007d56:	3a15      	subs	r2, #21
 8007d58:	f022 0203 	bic.w	r2, r2, #3
 8007d5c:	3204      	adds	r2, #4
 8007d5e:	f104 0115 	add.w	r1, r4, #21
 8007d62:	428f      	cmp	r7, r1
 8007d64:	bf38      	it	cc
 8007d66:	2204      	movcc	r2, #4
 8007d68:	9201      	str	r2, [sp, #4]
 8007d6a:	9a02      	ldr	r2, [sp, #8]
 8007d6c:	9303      	str	r3, [sp, #12]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d80c      	bhi.n	8007d8c <__multiply+0x9c>
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	dd03      	ble.n	8007d7e <__multiply+0x8e>
 8007d76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d05a      	beq.n	8007e34 <__multiply+0x144>
 8007d7e:	6106      	str	r6, [r0, #16]
 8007d80:	b005      	add	sp, #20
 8007d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d86:	f843 2b04 	str.w	r2, [r3], #4
 8007d8a:	e7d8      	b.n	8007d3e <__multiply+0x4e>
 8007d8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d90:	f1ba 0f00 	cmp.w	sl, #0
 8007d94:	d023      	beq.n	8007dde <__multiply+0xee>
 8007d96:	46a9      	mov	r9, r5
 8007d98:	f04f 0c00 	mov.w	ip, #0
 8007d9c:	f104 0e14 	add.w	lr, r4, #20
 8007da0:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007da4:	f8d9 1000 	ldr.w	r1, [r9]
 8007da8:	fa1f fb82 	uxth.w	fp, r2
 8007dac:	b289      	uxth	r1, r1
 8007dae:	fb0a 110b 	mla	r1, sl, fp, r1
 8007db2:	4461      	add	r1, ip
 8007db4:	f8d9 c000 	ldr.w	ip, [r9]
 8007db8:	0c12      	lsrs	r2, r2, #16
 8007dba:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007dbe:	fb0a c202 	mla	r2, sl, r2, ip
 8007dc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dc6:	b289      	uxth	r1, r1
 8007dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007dcc:	4577      	cmp	r7, lr
 8007dce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dd2:	f849 1b04 	str.w	r1, [r9], #4
 8007dd6:	d8e3      	bhi.n	8007da0 <__multiply+0xb0>
 8007dd8:	9a01      	ldr	r2, [sp, #4]
 8007dda:	f845 c002 	str.w	ip, [r5, r2]
 8007dde:	9a03      	ldr	r2, [sp, #12]
 8007de0:	3304      	adds	r3, #4
 8007de2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007de6:	f1b9 0f00 	cmp.w	r9, #0
 8007dea:	d021      	beq.n	8007e30 <__multiply+0x140>
 8007dec:	46ae      	mov	lr, r5
 8007dee:	f04f 0a00 	mov.w	sl, #0
 8007df2:	6829      	ldr	r1, [r5, #0]
 8007df4:	f104 0c14 	add.w	ip, r4, #20
 8007df8:	f8bc b000 	ldrh.w	fp, [ip]
 8007dfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e00:	b289      	uxth	r1, r1
 8007e02:	fb09 220b 	mla	r2, r9, fp, r2
 8007e06:	4452      	add	r2, sl
 8007e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e0c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e18:	f8be 1000 	ldrh.w	r1, [lr]
 8007e1c:	4567      	cmp	r7, ip
 8007e1e:	fb09 110a 	mla	r1, r9, sl, r1
 8007e22:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007e26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e2a:	d8e5      	bhi.n	8007df8 <__multiply+0x108>
 8007e2c:	9a01      	ldr	r2, [sp, #4]
 8007e2e:	50a9      	str	r1, [r5, r2]
 8007e30:	3504      	adds	r5, #4
 8007e32:	e79a      	b.n	8007d6a <__multiply+0x7a>
 8007e34:	3e01      	subs	r6, #1
 8007e36:	e79c      	b.n	8007d72 <__multiply+0x82>
 8007e38:	08008e2a 	.word	0x08008e2a
 8007e3c:	08008e3b 	.word	0x08008e3b

08007e40 <__pow5mult>:
 8007e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e44:	4615      	mov	r5, r2
 8007e46:	f012 0203 	ands.w	r2, r2, #3
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	d007      	beq.n	8007e60 <__pow5mult+0x20>
 8007e50:	4c25      	ldr	r4, [pc, #148]	; (8007ee8 <__pow5mult+0xa8>)
 8007e52:	3a01      	subs	r2, #1
 8007e54:	2300      	movs	r3, #0
 8007e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e5a:	f7ff fe9f 	bl	8007b9c <__multadd>
 8007e5e:	4607      	mov	r7, r0
 8007e60:	10ad      	asrs	r5, r5, #2
 8007e62:	d03d      	beq.n	8007ee0 <__pow5mult+0xa0>
 8007e64:	69f4      	ldr	r4, [r6, #28]
 8007e66:	b97c      	cbnz	r4, 8007e88 <__pow5mult+0x48>
 8007e68:	2010      	movs	r0, #16
 8007e6a:	f7ff fd81 	bl	8007970 <malloc>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	61f0      	str	r0, [r6, #28]
 8007e72:	b928      	cbnz	r0, 8007e80 <__pow5mult+0x40>
 8007e74:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e78:	4b1c      	ldr	r3, [pc, #112]	; (8007eec <__pow5mult+0xac>)
 8007e7a:	481d      	ldr	r0, [pc, #116]	; (8007ef0 <__pow5mult+0xb0>)
 8007e7c:	f000 fc24 	bl	80086c8 <__assert_func>
 8007e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e84:	6004      	str	r4, [r0, #0]
 8007e86:	60c4      	str	r4, [r0, #12]
 8007e88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e90:	b94c      	cbnz	r4, 8007ea6 <__pow5mult+0x66>
 8007e92:	f240 2171 	movw	r1, #625	; 0x271
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7ff ff14 	bl	8007cc4 <__i2b>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ea4:	6003      	str	r3, [r0, #0]
 8007ea6:	f04f 0900 	mov.w	r9, #0
 8007eaa:	07eb      	lsls	r3, r5, #31
 8007eac:	d50a      	bpl.n	8007ec4 <__pow5mult+0x84>
 8007eae:	4639      	mov	r1, r7
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ff1c 	bl	8007cf0 <__multiply>
 8007eb8:	4680      	mov	r8, r0
 8007eba:	4639      	mov	r1, r7
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff fe4b 	bl	8007b58 <_Bfree>
 8007ec2:	4647      	mov	r7, r8
 8007ec4:	106d      	asrs	r5, r5, #1
 8007ec6:	d00b      	beq.n	8007ee0 <__pow5mult+0xa0>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	b938      	cbnz	r0, 8007edc <__pow5mult+0x9c>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f7ff ff0d 	bl	8007cf0 <__multiply>
 8007ed6:	6020      	str	r0, [r4, #0]
 8007ed8:	f8c0 9000 	str.w	r9, [r0]
 8007edc:	4604      	mov	r4, r0
 8007ede:	e7e4      	b.n	8007eaa <__pow5mult+0x6a>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee6:	bf00      	nop
 8007ee8:	08008f88 	.word	0x08008f88
 8007eec:	08008dbb 	.word	0x08008dbb
 8007ef0:	08008e3b 	.word	0x08008e3b

08007ef4 <__lshift>:
 8007ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef8:	460c      	mov	r4, r1
 8007efa:	4607      	mov	r7, r0
 8007efc:	4691      	mov	r9, r2
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	6849      	ldr	r1, [r1, #4]
 8007f02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f06:	68a3      	ldr	r3, [r4, #8]
 8007f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f0c:	f108 0601 	add.w	r6, r8, #1
 8007f10:	42b3      	cmp	r3, r6
 8007f12:	db0b      	blt.n	8007f2c <__lshift+0x38>
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7ff fddf 	bl	8007ad8 <_Balloc>
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	b948      	cbnz	r0, 8007f32 <__lshift+0x3e>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f24:	4b27      	ldr	r3, [pc, #156]	; (8007fc4 <__lshift+0xd0>)
 8007f26:	4828      	ldr	r0, [pc, #160]	; (8007fc8 <__lshift+0xd4>)
 8007f28:	f000 fbce 	bl	80086c8 <__assert_func>
 8007f2c:	3101      	adds	r1, #1
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	e7ee      	b.n	8007f10 <__lshift+0x1c>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f100 0114 	add.w	r1, r0, #20
 8007f38:	f100 0210 	add.w	r2, r0, #16
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	4553      	cmp	r3, sl
 8007f40:	db33      	blt.n	8007faa <__lshift+0xb6>
 8007f42:	6920      	ldr	r0, [r4, #16]
 8007f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f48:	f104 0314 	add.w	r3, r4, #20
 8007f4c:	f019 091f 	ands.w	r9, r9, #31
 8007f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f58:	d02b      	beq.n	8007fb2 <__lshift+0xbe>
 8007f5a:	468a      	mov	sl, r1
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f1c9 0e20 	rsb	lr, r9, #32
 8007f62:	6818      	ldr	r0, [r3, #0]
 8007f64:	fa00 f009 	lsl.w	r0, r0, r9
 8007f68:	4310      	orrs	r0, r2
 8007f6a:	f84a 0b04 	str.w	r0, [sl], #4
 8007f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f72:	459c      	cmp	ip, r3
 8007f74:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f78:	d8f3      	bhi.n	8007f62 <__lshift+0x6e>
 8007f7a:	ebac 0304 	sub.w	r3, ip, r4
 8007f7e:	3b15      	subs	r3, #21
 8007f80:	f023 0303 	bic.w	r3, r3, #3
 8007f84:	3304      	adds	r3, #4
 8007f86:	f104 0015 	add.w	r0, r4, #21
 8007f8a:	4584      	cmp	ip, r0
 8007f8c:	bf38      	it	cc
 8007f8e:	2304      	movcc	r3, #4
 8007f90:	50ca      	str	r2, [r1, r3]
 8007f92:	b10a      	cbz	r2, 8007f98 <__lshift+0xa4>
 8007f94:	f108 0602 	add.w	r6, r8, #2
 8007f98:	3e01      	subs	r6, #1
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	612e      	str	r6, [r5, #16]
 8007fa0:	f7ff fdda 	bl	8007b58 <_Bfree>
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007faa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fae:	3301      	adds	r3, #1
 8007fb0:	e7c5      	b.n	8007f3e <__lshift+0x4a>
 8007fb2:	3904      	subs	r1, #4
 8007fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb8:	459c      	cmp	ip, r3
 8007fba:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fbe:	d8f9      	bhi.n	8007fb4 <__lshift+0xc0>
 8007fc0:	e7ea      	b.n	8007f98 <__lshift+0xa4>
 8007fc2:	bf00      	nop
 8007fc4:	08008e2a 	.word	0x08008e2a
 8007fc8:	08008e3b 	.word	0x08008e3b

08007fcc <__mcmp>:
 8007fcc:	4603      	mov	r3, r0
 8007fce:	690a      	ldr	r2, [r1, #16]
 8007fd0:	6900      	ldr	r0, [r0, #16]
 8007fd2:	b530      	push	{r4, r5, lr}
 8007fd4:	1a80      	subs	r0, r0, r2
 8007fd6:	d10d      	bne.n	8007ff4 <__mcmp+0x28>
 8007fd8:	3314      	adds	r3, #20
 8007fda:	3114      	adds	r1, #20
 8007fdc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fe0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fe4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fe8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fec:	4295      	cmp	r5, r2
 8007fee:	d002      	beq.n	8007ff6 <__mcmp+0x2a>
 8007ff0:	d304      	bcc.n	8007ffc <__mcmp+0x30>
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	bd30      	pop	{r4, r5, pc}
 8007ff6:	42a3      	cmp	r3, r4
 8007ff8:	d3f4      	bcc.n	8007fe4 <__mcmp+0x18>
 8007ffa:	e7fb      	b.n	8007ff4 <__mcmp+0x28>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	e7f8      	b.n	8007ff4 <__mcmp+0x28>
	...

08008004 <__mdiff>:
 8008004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	460d      	mov	r5, r1
 800800a:	4607      	mov	r7, r0
 800800c:	4611      	mov	r1, r2
 800800e:	4628      	mov	r0, r5
 8008010:	4614      	mov	r4, r2
 8008012:	f7ff ffdb 	bl	8007fcc <__mcmp>
 8008016:	1e06      	subs	r6, r0, #0
 8008018:	d111      	bne.n	800803e <__mdiff+0x3a>
 800801a:	4631      	mov	r1, r6
 800801c:	4638      	mov	r0, r7
 800801e:	f7ff fd5b 	bl	8007ad8 <_Balloc>
 8008022:	4602      	mov	r2, r0
 8008024:	b928      	cbnz	r0, 8008032 <__mdiff+0x2e>
 8008026:	f240 2137 	movw	r1, #567	; 0x237
 800802a:	4b3a      	ldr	r3, [pc, #232]	; (8008114 <__mdiff+0x110>)
 800802c:	483a      	ldr	r0, [pc, #232]	; (8008118 <__mdiff+0x114>)
 800802e:	f000 fb4b 	bl	80086c8 <__assert_func>
 8008032:	2301      	movs	r3, #1
 8008034:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008038:	4610      	mov	r0, r2
 800803a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803e:	bfa4      	itt	ge
 8008040:	4623      	movge	r3, r4
 8008042:	462c      	movge	r4, r5
 8008044:	4638      	mov	r0, r7
 8008046:	6861      	ldr	r1, [r4, #4]
 8008048:	bfa6      	itte	ge
 800804a:	461d      	movge	r5, r3
 800804c:	2600      	movge	r6, #0
 800804e:	2601      	movlt	r6, #1
 8008050:	f7ff fd42 	bl	8007ad8 <_Balloc>
 8008054:	4602      	mov	r2, r0
 8008056:	b918      	cbnz	r0, 8008060 <__mdiff+0x5c>
 8008058:	f240 2145 	movw	r1, #581	; 0x245
 800805c:	4b2d      	ldr	r3, [pc, #180]	; (8008114 <__mdiff+0x110>)
 800805e:	e7e5      	b.n	800802c <__mdiff+0x28>
 8008060:	f102 0814 	add.w	r8, r2, #20
 8008064:	46c2      	mov	sl, r8
 8008066:	f04f 0c00 	mov.w	ip, #0
 800806a:	6927      	ldr	r7, [r4, #16]
 800806c:	60c6      	str	r6, [r0, #12]
 800806e:	692e      	ldr	r6, [r5, #16]
 8008070:	f104 0014 	add.w	r0, r4, #20
 8008074:	f105 0914 	add.w	r9, r5, #20
 8008078:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800807c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008080:	3410      	adds	r4, #16
 8008082:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008086:	f859 3b04 	ldr.w	r3, [r9], #4
 800808a:	fa1f f18b 	uxth.w	r1, fp
 800808e:	4461      	add	r1, ip
 8008090:	fa1f fc83 	uxth.w	ip, r3
 8008094:	0c1b      	lsrs	r3, r3, #16
 8008096:	eba1 010c 	sub.w	r1, r1, ip
 800809a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800809e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80080a2:	b289      	uxth	r1, r1
 80080a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80080a8:	454e      	cmp	r6, r9
 80080aa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80080ae:	f84a 1b04 	str.w	r1, [sl], #4
 80080b2:	d8e6      	bhi.n	8008082 <__mdiff+0x7e>
 80080b4:	1b73      	subs	r3, r6, r5
 80080b6:	3b15      	subs	r3, #21
 80080b8:	f023 0303 	bic.w	r3, r3, #3
 80080bc:	3515      	adds	r5, #21
 80080be:	3304      	adds	r3, #4
 80080c0:	42ae      	cmp	r6, r5
 80080c2:	bf38      	it	cc
 80080c4:	2304      	movcc	r3, #4
 80080c6:	4418      	add	r0, r3
 80080c8:	4443      	add	r3, r8
 80080ca:	461e      	mov	r6, r3
 80080cc:	4605      	mov	r5, r0
 80080ce:	4575      	cmp	r5, lr
 80080d0:	d30e      	bcc.n	80080f0 <__mdiff+0xec>
 80080d2:	f10e 0103 	add.w	r1, lr, #3
 80080d6:	1a09      	subs	r1, r1, r0
 80080d8:	f021 0103 	bic.w	r1, r1, #3
 80080dc:	3803      	subs	r0, #3
 80080de:	4586      	cmp	lr, r0
 80080e0:	bf38      	it	cc
 80080e2:	2100      	movcc	r1, #0
 80080e4:	440b      	add	r3, r1
 80080e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080ea:	b189      	cbz	r1, 8008110 <__mdiff+0x10c>
 80080ec:	6117      	str	r7, [r2, #16]
 80080ee:	e7a3      	b.n	8008038 <__mdiff+0x34>
 80080f0:	f855 8b04 	ldr.w	r8, [r5], #4
 80080f4:	fa1f f188 	uxth.w	r1, r8
 80080f8:	4461      	add	r1, ip
 80080fa:	140c      	asrs	r4, r1, #16
 80080fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008100:	b289      	uxth	r1, r1
 8008102:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008106:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800810a:	f846 1b04 	str.w	r1, [r6], #4
 800810e:	e7de      	b.n	80080ce <__mdiff+0xca>
 8008110:	3f01      	subs	r7, #1
 8008112:	e7e8      	b.n	80080e6 <__mdiff+0xe2>
 8008114:	08008e2a 	.word	0x08008e2a
 8008118:	08008e3b 	.word	0x08008e3b

0800811c <__d2b>:
 800811c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800811e:	2101      	movs	r1, #1
 8008120:	4617      	mov	r7, r2
 8008122:	461c      	mov	r4, r3
 8008124:	9e08      	ldr	r6, [sp, #32]
 8008126:	f7ff fcd7 	bl	8007ad8 <_Balloc>
 800812a:	4605      	mov	r5, r0
 800812c:	b930      	cbnz	r0, 800813c <__d2b+0x20>
 800812e:	4602      	mov	r2, r0
 8008130:	f240 310f 	movw	r1, #783	; 0x30f
 8008134:	4b22      	ldr	r3, [pc, #136]	; (80081c0 <__d2b+0xa4>)
 8008136:	4823      	ldr	r0, [pc, #140]	; (80081c4 <__d2b+0xa8>)
 8008138:	f000 fac6 	bl	80086c8 <__assert_func>
 800813c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008140:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008144:	bb24      	cbnz	r4, 8008190 <__d2b+0x74>
 8008146:	2f00      	cmp	r7, #0
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	d026      	beq.n	800819a <__d2b+0x7e>
 800814c:	4668      	mov	r0, sp
 800814e:	9700      	str	r7, [sp, #0]
 8008150:	f7ff fd8a 	bl	8007c68 <__lo0bits>
 8008154:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008158:	b1e8      	cbz	r0, 8008196 <__d2b+0x7a>
 800815a:	f1c0 0320 	rsb	r3, r0, #32
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	430b      	orrs	r3, r1
 8008164:	40c2      	lsrs	r2, r0
 8008166:	616b      	str	r3, [r5, #20]
 8008168:	9201      	str	r2, [sp, #4]
 800816a:	9b01      	ldr	r3, [sp, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	bf14      	ite	ne
 8008170:	2102      	movne	r1, #2
 8008172:	2101      	moveq	r1, #1
 8008174:	61ab      	str	r3, [r5, #24]
 8008176:	6129      	str	r1, [r5, #16]
 8008178:	b1bc      	cbz	r4, 80081aa <__d2b+0x8e>
 800817a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800817e:	4404      	add	r4, r0
 8008180:	6034      	str	r4, [r6, #0]
 8008182:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008188:	6018      	str	r0, [r3, #0]
 800818a:	4628      	mov	r0, r5
 800818c:	b003      	add	sp, #12
 800818e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008194:	e7d7      	b.n	8008146 <__d2b+0x2a>
 8008196:	6169      	str	r1, [r5, #20]
 8008198:	e7e7      	b.n	800816a <__d2b+0x4e>
 800819a:	a801      	add	r0, sp, #4
 800819c:	f7ff fd64 	bl	8007c68 <__lo0bits>
 80081a0:	9b01      	ldr	r3, [sp, #4]
 80081a2:	2101      	movs	r1, #1
 80081a4:	616b      	str	r3, [r5, #20]
 80081a6:	3020      	adds	r0, #32
 80081a8:	e7e5      	b.n	8008176 <__d2b+0x5a>
 80081aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081ae:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80081b2:	6030      	str	r0, [r6, #0]
 80081b4:	6918      	ldr	r0, [r3, #16]
 80081b6:	f7ff fd37 	bl	8007c28 <__hi0bits>
 80081ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80081be:	e7e2      	b.n	8008186 <__d2b+0x6a>
 80081c0:	08008e2a 	.word	0x08008e2a
 80081c4:	08008e3b 	.word	0x08008e3b

080081c8 <__sfputc_r>:
 80081c8:	6893      	ldr	r3, [r2, #8]
 80081ca:	b410      	push	{r4}
 80081cc:	3b01      	subs	r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	6093      	str	r3, [r2, #8]
 80081d2:	da07      	bge.n	80081e4 <__sfputc_r+0x1c>
 80081d4:	6994      	ldr	r4, [r2, #24]
 80081d6:	42a3      	cmp	r3, r4
 80081d8:	db01      	blt.n	80081de <__sfputc_r+0x16>
 80081da:	290a      	cmp	r1, #10
 80081dc:	d102      	bne.n	80081e4 <__sfputc_r+0x1c>
 80081de:	bc10      	pop	{r4}
 80081e0:	f7fe bbe1 	b.w	80069a6 <__swbuf_r>
 80081e4:	6813      	ldr	r3, [r2, #0]
 80081e6:	1c58      	adds	r0, r3, #1
 80081e8:	6010      	str	r0, [r2, #0]
 80081ea:	7019      	strb	r1, [r3, #0]
 80081ec:	4608      	mov	r0, r1
 80081ee:	bc10      	pop	{r4}
 80081f0:	4770      	bx	lr

080081f2 <__sfputs_r>:
 80081f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f4:	4606      	mov	r6, r0
 80081f6:	460f      	mov	r7, r1
 80081f8:	4614      	mov	r4, r2
 80081fa:	18d5      	adds	r5, r2, r3
 80081fc:	42ac      	cmp	r4, r5
 80081fe:	d101      	bne.n	8008204 <__sfputs_r+0x12>
 8008200:	2000      	movs	r0, #0
 8008202:	e007      	b.n	8008214 <__sfputs_r+0x22>
 8008204:	463a      	mov	r2, r7
 8008206:	4630      	mov	r0, r6
 8008208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820c:	f7ff ffdc 	bl	80081c8 <__sfputc_r>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d1f3      	bne.n	80081fc <__sfputs_r+0xa>
 8008214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008218 <_vfiprintf_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	460d      	mov	r5, r1
 800821e:	4614      	mov	r4, r2
 8008220:	4698      	mov	r8, r3
 8008222:	4606      	mov	r6, r0
 8008224:	b09d      	sub	sp, #116	; 0x74
 8008226:	b118      	cbz	r0, 8008230 <_vfiprintf_r+0x18>
 8008228:	6a03      	ldr	r3, [r0, #32]
 800822a:	b90b      	cbnz	r3, 8008230 <_vfiprintf_r+0x18>
 800822c:	f7fe fad4 	bl	80067d8 <__sinit>
 8008230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008232:	07d9      	lsls	r1, r3, #31
 8008234:	d405      	bmi.n	8008242 <_vfiprintf_r+0x2a>
 8008236:	89ab      	ldrh	r3, [r5, #12]
 8008238:	059a      	lsls	r2, r3, #22
 800823a:	d402      	bmi.n	8008242 <_vfiprintf_r+0x2a>
 800823c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800823e:	f7fe fcc3 	bl	8006bc8 <__retarget_lock_acquire_recursive>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	071b      	lsls	r3, r3, #28
 8008246:	d501      	bpl.n	800824c <_vfiprintf_r+0x34>
 8008248:	692b      	ldr	r3, [r5, #16]
 800824a:	b99b      	cbnz	r3, 8008274 <_vfiprintf_r+0x5c>
 800824c:	4629      	mov	r1, r5
 800824e:	4630      	mov	r0, r6
 8008250:	f7fe fbe6 	bl	8006a20 <__swsetup_r>
 8008254:	b170      	cbz	r0, 8008274 <_vfiprintf_r+0x5c>
 8008256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008258:	07dc      	lsls	r4, r3, #31
 800825a:	d504      	bpl.n	8008266 <_vfiprintf_r+0x4e>
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	b01d      	add	sp, #116	; 0x74
 8008262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	0598      	lsls	r0, r3, #22
 800826a:	d4f7      	bmi.n	800825c <_vfiprintf_r+0x44>
 800826c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800826e:	f7fe fcac 	bl	8006bca <__retarget_lock_release_recursive>
 8008272:	e7f3      	b.n	800825c <_vfiprintf_r+0x44>
 8008274:	2300      	movs	r3, #0
 8008276:	9309      	str	r3, [sp, #36]	; 0x24
 8008278:	2320      	movs	r3, #32
 800827a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800827e:	2330      	movs	r3, #48	; 0x30
 8008280:	f04f 0901 	mov.w	r9, #1
 8008284:	f8cd 800c 	str.w	r8, [sp, #12]
 8008288:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008438 <_vfiprintf_r+0x220>
 800828c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008290:	4623      	mov	r3, r4
 8008292:	469a      	mov	sl, r3
 8008294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008298:	b10a      	cbz	r2, 800829e <_vfiprintf_r+0x86>
 800829a:	2a25      	cmp	r2, #37	; 0x25
 800829c:	d1f9      	bne.n	8008292 <_vfiprintf_r+0x7a>
 800829e:	ebba 0b04 	subs.w	fp, sl, r4
 80082a2:	d00b      	beq.n	80082bc <_vfiprintf_r+0xa4>
 80082a4:	465b      	mov	r3, fp
 80082a6:	4622      	mov	r2, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ffa1 	bl	80081f2 <__sfputs_r>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f000 80a9 	beq.w	8008408 <_vfiprintf_r+0x1f0>
 80082b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082b8:	445a      	add	r2, fp
 80082ba:	9209      	str	r2, [sp, #36]	; 0x24
 80082bc:	f89a 3000 	ldrb.w	r3, [sl]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 80a1 	beq.w	8008408 <_vfiprintf_r+0x1f0>
 80082c6:	2300      	movs	r3, #0
 80082c8:	f04f 32ff 	mov.w	r2, #4294967295
 80082cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d0:	f10a 0a01 	add.w	sl, sl, #1
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082dc:	931a      	str	r3, [sp, #104]	; 0x68
 80082de:	4654      	mov	r4, sl
 80082e0:	2205      	movs	r2, #5
 80082e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e6:	4854      	ldr	r0, [pc, #336]	; (8008438 <_vfiprintf_r+0x220>)
 80082e8:	f7fe fc70 	bl	8006bcc <memchr>
 80082ec:	9a04      	ldr	r2, [sp, #16]
 80082ee:	b9d8      	cbnz	r0, 8008328 <_vfiprintf_r+0x110>
 80082f0:	06d1      	lsls	r1, r2, #27
 80082f2:	bf44      	itt	mi
 80082f4:	2320      	movmi	r3, #32
 80082f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082fa:	0713      	lsls	r3, r2, #28
 80082fc:	bf44      	itt	mi
 80082fe:	232b      	movmi	r3, #43	; 0x2b
 8008300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008304:	f89a 3000 	ldrb.w	r3, [sl]
 8008308:	2b2a      	cmp	r3, #42	; 0x2a
 800830a:	d015      	beq.n	8008338 <_vfiprintf_r+0x120>
 800830c:	4654      	mov	r4, sl
 800830e:	2000      	movs	r0, #0
 8008310:	f04f 0c0a 	mov.w	ip, #10
 8008314:	9a07      	ldr	r2, [sp, #28]
 8008316:	4621      	mov	r1, r4
 8008318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800831c:	3b30      	subs	r3, #48	; 0x30
 800831e:	2b09      	cmp	r3, #9
 8008320:	d94d      	bls.n	80083be <_vfiprintf_r+0x1a6>
 8008322:	b1b0      	cbz	r0, 8008352 <_vfiprintf_r+0x13a>
 8008324:	9207      	str	r2, [sp, #28]
 8008326:	e014      	b.n	8008352 <_vfiprintf_r+0x13a>
 8008328:	eba0 0308 	sub.w	r3, r0, r8
 800832c:	fa09 f303 	lsl.w	r3, r9, r3
 8008330:	4313      	orrs	r3, r2
 8008332:	46a2      	mov	sl, r4
 8008334:	9304      	str	r3, [sp, #16]
 8008336:	e7d2      	b.n	80082de <_vfiprintf_r+0xc6>
 8008338:	9b03      	ldr	r3, [sp, #12]
 800833a:	1d19      	adds	r1, r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	9103      	str	r1, [sp, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	bfbb      	ittet	lt
 8008344:	425b      	neglt	r3, r3
 8008346:	f042 0202 	orrlt.w	r2, r2, #2
 800834a:	9307      	strge	r3, [sp, #28]
 800834c:	9307      	strlt	r3, [sp, #28]
 800834e:	bfb8      	it	lt
 8008350:	9204      	strlt	r2, [sp, #16]
 8008352:	7823      	ldrb	r3, [r4, #0]
 8008354:	2b2e      	cmp	r3, #46	; 0x2e
 8008356:	d10c      	bne.n	8008372 <_vfiprintf_r+0x15a>
 8008358:	7863      	ldrb	r3, [r4, #1]
 800835a:	2b2a      	cmp	r3, #42	; 0x2a
 800835c:	d134      	bne.n	80083c8 <_vfiprintf_r+0x1b0>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	3402      	adds	r4, #2
 8008362:	1d1a      	adds	r2, r3, #4
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	9203      	str	r2, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	bfb8      	it	lt
 800836c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800843c <_vfiprintf_r+0x224>
 8008376:	2203      	movs	r2, #3
 8008378:	4650      	mov	r0, sl
 800837a:	7821      	ldrb	r1, [r4, #0]
 800837c:	f7fe fc26 	bl	8006bcc <memchr>
 8008380:	b138      	cbz	r0, 8008392 <_vfiprintf_r+0x17a>
 8008382:	2240      	movs	r2, #64	; 0x40
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	eba0 000a 	sub.w	r0, r0, sl
 800838a:	4082      	lsls	r2, r0
 800838c:	4313      	orrs	r3, r2
 800838e:	3401      	adds	r4, #1
 8008390:	9304      	str	r3, [sp, #16]
 8008392:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008396:	2206      	movs	r2, #6
 8008398:	4829      	ldr	r0, [pc, #164]	; (8008440 <_vfiprintf_r+0x228>)
 800839a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800839e:	f7fe fc15 	bl	8006bcc <memchr>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d03f      	beq.n	8008426 <_vfiprintf_r+0x20e>
 80083a6:	4b27      	ldr	r3, [pc, #156]	; (8008444 <_vfiprintf_r+0x22c>)
 80083a8:	bb1b      	cbnz	r3, 80083f2 <_vfiprintf_r+0x1da>
 80083aa:	9b03      	ldr	r3, [sp, #12]
 80083ac:	3307      	adds	r3, #7
 80083ae:	f023 0307 	bic.w	r3, r3, #7
 80083b2:	3308      	adds	r3, #8
 80083b4:	9303      	str	r3, [sp, #12]
 80083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b8:	443b      	add	r3, r7
 80083ba:	9309      	str	r3, [sp, #36]	; 0x24
 80083bc:	e768      	b.n	8008290 <_vfiprintf_r+0x78>
 80083be:	460c      	mov	r4, r1
 80083c0:	2001      	movs	r0, #1
 80083c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c6:	e7a6      	b.n	8008316 <_vfiprintf_r+0xfe>
 80083c8:	2300      	movs	r3, #0
 80083ca:	f04f 0c0a 	mov.w	ip, #10
 80083ce:	4619      	mov	r1, r3
 80083d0:	3401      	adds	r4, #1
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	4620      	mov	r0, r4
 80083d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083da:	3a30      	subs	r2, #48	; 0x30
 80083dc:	2a09      	cmp	r2, #9
 80083de:	d903      	bls.n	80083e8 <_vfiprintf_r+0x1d0>
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d0c6      	beq.n	8008372 <_vfiprintf_r+0x15a>
 80083e4:	9105      	str	r1, [sp, #20]
 80083e6:	e7c4      	b.n	8008372 <_vfiprintf_r+0x15a>
 80083e8:	4604      	mov	r4, r0
 80083ea:	2301      	movs	r3, #1
 80083ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f0:	e7f0      	b.n	80083d4 <_vfiprintf_r+0x1bc>
 80083f2:	ab03      	add	r3, sp, #12
 80083f4:	9300      	str	r3, [sp, #0]
 80083f6:	462a      	mov	r2, r5
 80083f8:	4630      	mov	r0, r6
 80083fa:	4b13      	ldr	r3, [pc, #76]	; (8008448 <_vfiprintf_r+0x230>)
 80083fc:	a904      	add	r1, sp, #16
 80083fe:	f7fd fdaf 	bl	8005f60 <_printf_float>
 8008402:	4607      	mov	r7, r0
 8008404:	1c78      	adds	r0, r7, #1
 8008406:	d1d6      	bne.n	80083b6 <_vfiprintf_r+0x19e>
 8008408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800840a:	07d9      	lsls	r1, r3, #31
 800840c:	d405      	bmi.n	800841a <_vfiprintf_r+0x202>
 800840e:	89ab      	ldrh	r3, [r5, #12]
 8008410:	059a      	lsls	r2, r3, #22
 8008412:	d402      	bmi.n	800841a <_vfiprintf_r+0x202>
 8008414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008416:	f7fe fbd8 	bl	8006bca <__retarget_lock_release_recursive>
 800841a:	89ab      	ldrh	r3, [r5, #12]
 800841c:	065b      	lsls	r3, r3, #25
 800841e:	f53f af1d 	bmi.w	800825c <_vfiprintf_r+0x44>
 8008422:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008424:	e71c      	b.n	8008260 <_vfiprintf_r+0x48>
 8008426:	ab03      	add	r3, sp, #12
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	462a      	mov	r2, r5
 800842c:	4630      	mov	r0, r6
 800842e:	4b06      	ldr	r3, [pc, #24]	; (8008448 <_vfiprintf_r+0x230>)
 8008430:	a904      	add	r1, sp, #16
 8008432:	f7fe f835 	bl	80064a0 <_printf_i>
 8008436:	e7e4      	b.n	8008402 <_vfiprintf_r+0x1ea>
 8008438:	08008f94 	.word	0x08008f94
 800843c:	08008f9a 	.word	0x08008f9a
 8008440:	08008f9e 	.word	0x08008f9e
 8008444:	08005f61 	.word	0x08005f61
 8008448:	080081f3 	.word	0x080081f3

0800844c <__sflush_r>:
 800844c:	898a      	ldrh	r2, [r1, #12]
 800844e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008450:	4605      	mov	r5, r0
 8008452:	0710      	lsls	r0, r2, #28
 8008454:	460c      	mov	r4, r1
 8008456:	d457      	bmi.n	8008508 <__sflush_r+0xbc>
 8008458:	684b      	ldr	r3, [r1, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	dc04      	bgt.n	8008468 <__sflush_r+0x1c>
 800845e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	dc01      	bgt.n	8008468 <__sflush_r+0x1c>
 8008464:	2000      	movs	r0, #0
 8008466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800846a:	2e00      	cmp	r6, #0
 800846c:	d0fa      	beq.n	8008464 <__sflush_r+0x18>
 800846e:	2300      	movs	r3, #0
 8008470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008474:	682f      	ldr	r7, [r5, #0]
 8008476:	6a21      	ldr	r1, [r4, #32]
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	d032      	beq.n	80084e2 <__sflush_r+0x96>
 800847c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	075a      	lsls	r2, r3, #29
 8008482:	d505      	bpl.n	8008490 <__sflush_r+0x44>
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	1ac0      	subs	r0, r0, r3
 8008488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800848a:	b10b      	cbz	r3, 8008490 <__sflush_r+0x44>
 800848c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800848e:	1ac0      	subs	r0, r0, r3
 8008490:	2300      	movs	r3, #0
 8008492:	4602      	mov	r2, r0
 8008494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008496:	4628      	mov	r0, r5
 8008498:	6a21      	ldr	r1, [r4, #32]
 800849a:	47b0      	blx	r6
 800849c:	1c43      	adds	r3, r0, #1
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	d106      	bne.n	80084b0 <__sflush_r+0x64>
 80084a2:	6829      	ldr	r1, [r5, #0]
 80084a4:	291d      	cmp	r1, #29
 80084a6:	d82b      	bhi.n	8008500 <__sflush_r+0xb4>
 80084a8:	4a28      	ldr	r2, [pc, #160]	; (800854c <__sflush_r+0x100>)
 80084aa:	410a      	asrs	r2, r1
 80084ac:	07d6      	lsls	r6, r2, #31
 80084ae:	d427      	bmi.n	8008500 <__sflush_r+0xb4>
 80084b0:	2200      	movs	r2, #0
 80084b2:	6062      	str	r2, [r4, #4]
 80084b4:	6922      	ldr	r2, [r4, #16]
 80084b6:	04d9      	lsls	r1, r3, #19
 80084b8:	6022      	str	r2, [r4, #0]
 80084ba:	d504      	bpl.n	80084c6 <__sflush_r+0x7a>
 80084bc:	1c42      	adds	r2, r0, #1
 80084be:	d101      	bne.n	80084c4 <__sflush_r+0x78>
 80084c0:	682b      	ldr	r3, [r5, #0]
 80084c2:	b903      	cbnz	r3, 80084c6 <__sflush_r+0x7a>
 80084c4:	6560      	str	r0, [r4, #84]	; 0x54
 80084c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084c8:	602f      	str	r7, [r5, #0]
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d0ca      	beq.n	8008464 <__sflush_r+0x18>
 80084ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084d2:	4299      	cmp	r1, r3
 80084d4:	d002      	beq.n	80084dc <__sflush_r+0x90>
 80084d6:	4628      	mov	r0, r5
 80084d8:	f7ff fa02 	bl	80078e0 <_free_r>
 80084dc:	2000      	movs	r0, #0
 80084de:	6360      	str	r0, [r4, #52]	; 0x34
 80084e0:	e7c1      	b.n	8008466 <__sflush_r+0x1a>
 80084e2:	2301      	movs	r3, #1
 80084e4:	4628      	mov	r0, r5
 80084e6:	47b0      	blx	r6
 80084e8:	1c41      	adds	r1, r0, #1
 80084ea:	d1c8      	bne.n	800847e <__sflush_r+0x32>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0c5      	beq.n	800847e <__sflush_r+0x32>
 80084f2:	2b1d      	cmp	r3, #29
 80084f4:	d001      	beq.n	80084fa <__sflush_r+0xae>
 80084f6:	2b16      	cmp	r3, #22
 80084f8:	d101      	bne.n	80084fe <__sflush_r+0xb2>
 80084fa:	602f      	str	r7, [r5, #0]
 80084fc:	e7b2      	b.n	8008464 <__sflush_r+0x18>
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008504:	81a3      	strh	r3, [r4, #12]
 8008506:	e7ae      	b.n	8008466 <__sflush_r+0x1a>
 8008508:	690f      	ldr	r7, [r1, #16]
 800850a:	2f00      	cmp	r7, #0
 800850c:	d0aa      	beq.n	8008464 <__sflush_r+0x18>
 800850e:	0793      	lsls	r3, r2, #30
 8008510:	bf18      	it	ne
 8008512:	2300      	movne	r3, #0
 8008514:	680e      	ldr	r6, [r1, #0]
 8008516:	bf08      	it	eq
 8008518:	694b      	ldreq	r3, [r1, #20]
 800851a:	1bf6      	subs	r6, r6, r7
 800851c:	600f      	str	r7, [r1, #0]
 800851e:	608b      	str	r3, [r1, #8]
 8008520:	2e00      	cmp	r6, #0
 8008522:	dd9f      	ble.n	8008464 <__sflush_r+0x18>
 8008524:	4633      	mov	r3, r6
 8008526:	463a      	mov	r2, r7
 8008528:	4628      	mov	r0, r5
 800852a:	6a21      	ldr	r1, [r4, #32]
 800852c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008530:	47e0      	blx	ip
 8008532:	2800      	cmp	r0, #0
 8008534:	dc06      	bgt.n	8008544 <__sflush_r+0xf8>
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	e790      	b.n	8008466 <__sflush_r+0x1a>
 8008544:	4407      	add	r7, r0
 8008546:	1a36      	subs	r6, r6, r0
 8008548:	e7ea      	b.n	8008520 <__sflush_r+0xd4>
 800854a:	bf00      	nop
 800854c:	dfbffffe 	.word	0xdfbffffe

08008550 <_fflush_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	690b      	ldr	r3, [r1, #16]
 8008554:	4605      	mov	r5, r0
 8008556:	460c      	mov	r4, r1
 8008558:	b913      	cbnz	r3, 8008560 <_fflush_r+0x10>
 800855a:	2500      	movs	r5, #0
 800855c:	4628      	mov	r0, r5
 800855e:	bd38      	pop	{r3, r4, r5, pc}
 8008560:	b118      	cbz	r0, 800856a <_fflush_r+0x1a>
 8008562:	6a03      	ldr	r3, [r0, #32]
 8008564:	b90b      	cbnz	r3, 800856a <_fflush_r+0x1a>
 8008566:	f7fe f937 	bl	80067d8 <__sinit>
 800856a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d0f3      	beq.n	800855a <_fflush_r+0xa>
 8008572:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008574:	07d0      	lsls	r0, r2, #31
 8008576:	d404      	bmi.n	8008582 <_fflush_r+0x32>
 8008578:	0599      	lsls	r1, r3, #22
 800857a:	d402      	bmi.n	8008582 <_fflush_r+0x32>
 800857c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800857e:	f7fe fb23 	bl	8006bc8 <__retarget_lock_acquire_recursive>
 8008582:	4628      	mov	r0, r5
 8008584:	4621      	mov	r1, r4
 8008586:	f7ff ff61 	bl	800844c <__sflush_r>
 800858a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800858c:	4605      	mov	r5, r0
 800858e:	07da      	lsls	r2, r3, #31
 8008590:	d4e4      	bmi.n	800855c <_fflush_r+0xc>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	059b      	lsls	r3, r3, #22
 8008596:	d4e1      	bmi.n	800855c <_fflush_r+0xc>
 8008598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800859a:	f7fe fb16 	bl	8006bca <__retarget_lock_release_recursive>
 800859e:	e7dd      	b.n	800855c <_fflush_r+0xc>

080085a0 <__swhatbuf_r>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	460c      	mov	r4, r1
 80085a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a8:	4615      	mov	r5, r2
 80085aa:	2900      	cmp	r1, #0
 80085ac:	461e      	mov	r6, r3
 80085ae:	b096      	sub	sp, #88	; 0x58
 80085b0:	da0c      	bge.n	80085cc <__swhatbuf_r+0x2c>
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	2100      	movs	r1, #0
 80085b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80085ba:	bf0c      	ite	eq
 80085bc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80085c0:	2340      	movne	r3, #64	; 0x40
 80085c2:	2000      	movs	r0, #0
 80085c4:	6031      	str	r1, [r6, #0]
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	b016      	add	sp, #88	; 0x58
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	466a      	mov	r2, sp
 80085ce:	f000 f849 	bl	8008664 <_fstat_r>
 80085d2:	2800      	cmp	r0, #0
 80085d4:	dbed      	blt.n	80085b2 <__swhatbuf_r+0x12>
 80085d6:	9901      	ldr	r1, [sp, #4]
 80085d8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80085dc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80085e0:	4259      	negs	r1, r3
 80085e2:	4159      	adcs	r1, r3
 80085e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e8:	e7eb      	b.n	80085c2 <__swhatbuf_r+0x22>

080085ea <__smakebuf_r>:
 80085ea:	898b      	ldrh	r3, [r1, #12]
 80085ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085ee:	079d      	lsls	r5, r3, #30
 80085f0:	4606      	mov	r6, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	d507      	bpl.n	8008606 <__smakebuf_r+0x1c>
 80085f6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	2301      	movs	r3, #1
 8008600:	6163      	str	r3, [r4, #20]
 8008602:	b002      	add	sp, #8
 8008604:	bd70      	pop	{r4, r5, r6, pc}
 8008606:	466a      	mov	r2, sp
 8008608:	ab01      	add	r3, sp, #4
 800860a:	f7ff ffc9 	bl	80085a0 <__swhatbuf_r>
 800860e:	9900      	ldr	r1, [sp, #0]
 8008610:	4605      	mov	r5, r0
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff f9d4 	bl	80079c0 <_malloc_r>
 8008618:	b948      	cbnz	r0, 800862e <__smakebuf_r+0x44>
 800861a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861e:	059a      	lsls	r2, r3, #22
 8008620:	d4ef      	bmi.n	8008602 <__smakebuf_r+0x18>
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	f043 0302 	orr.w	r3, r3, #2
 800862a:	81a3      	strh	r3, [r4, #12]
 800862c:	e7e3      	b.n	80085f6 <__smakebuf_r+0xc>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	6020      	str	r0, [r4, #0]
 8008632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008636:	81a3      	strh	r3, [r4, #12]
 8008638:	9b00      	ldr	r3, [sp, #0]
 800863a:	6120      	str	r0, [r4, #16]
 800863c:	6163      	str	r3, [r4, #20]
 800863e:	9b01      	ldr	r3, [sp, #4]
 8008640:	b15b      	cbz	r3, 800865a <__smakebuf_r+0x70>
 8008642:	4630      	mov	r0, r6
 8008644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008648:	f000 f81e 	bl	8008688 <_isatty_r>
 800864c:	b128      	cbz	r0, 800865a <__smakebuf_r+0x70>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	f043 0301 	orr.w	r3, r3, #1
 8008658:	81a3      	strh	r3, [r4, #12]
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	431d      	orrs	r5, r3
 800865e:	81a5      	strh	r5, [r4, #12]
 8008660:	e7cf      	b.n	8008602 <__smakebuf_r+0x18>
	...

08008664 <_fstat_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	2300      	movs	r3, #0
 8008668:	4d06      	ldr	r5, [pc, #24]	; (8008684 <_fstat_r+0x20>)
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	f7fa f83c 	bl	80026ee <_fstat>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	d102      	bne.n	8008680 <_fstat_r+0x1c>
 800867a:	682b      	ldr	r3, [r5, #0]
 800867c:	b103      	cbz	r3, 8008680 <_fstat_r+0x1c>
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	bd38      	pop	{r3, r4, r5, pc}
 8008682:	bf00      	nop
 8008684:	200004c0 	.word	0x200004c0

08008688 <_isatty_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	2300      	movs	r3, #0
 800868c:	4d05      	ldr	r5, [pc, #20]	; (80086a4 <_isatty_r+0x1c>)
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f7fa f83a 	bl	800270c <_isatty>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_isatty_r+0x1a>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_isatty_r+0x1a>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	200004c0 	.word	0x200004c0

080086a8 <_sbrk_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	2300      	movs	r3, #0
 80086ac:	4d05      	ldr	r5, [pc, #20]	; (80086c4 <_sbrk_r+0x1c>)
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	f7fa f840 	bl	8002738 <_sbrk>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_sbrk_r+0x1a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_sbrk_r+0x1a>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	200004c0 	.word	0x200004c0

080086c8 <__assert_func>:
 80086c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086ca:	4614      	mov	r4, r2
 80086cc:	461a      	mov	r2, r3
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <__assert_func+0x2c>)
 80086d0:	4605      	mov	r5, r0
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68d8      	ldr	r0, [r3, #12]
 80086d6:	b14c      	cbz	r4, 80086ec <__assert_func+0x24>
 80086d8:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <__assert_func+0x30>)
 80086da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086de:	9100      	str	r1, [sp, #0]
 80086e0:	462b      	mov	r3, r5
 80086e2:	4906      	ldr	r1, [pc, #24]	; (80086fc <__assert_func+0x34>)
 80086e4:	f000 f842 	bl	800876c <fiprintf>
 80086e8:	f000 f852 	bl	8008790 <abort>
 80086ec:	4b04      	ldr	r3, [pc, #16]	; (8008700 <__assert_func+0x38>)
 80086ee:	461c      	mov	r4, r3
 80086f0:	e7f3      	b.n	80086da <__assert_func+0x12>
 80086f2:	bf00      	nop
 80086f4:	20000064 	.word	0x20000064
 80086f8:	08008faf 	.word	0x08008faf
 80086fc:	08008fbc 	.word	0x08008fbc
 8008700:	08008fea 	.word	0x08008fea

08008704 <_calloc_r>:
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	fba1 5402 	umull	r5, r4, r1, r2
 800870a:	b934      	cbnz	r4, 800871a <_calloc_r+0x16>
 800870c:	4629      	mov	r1, r5
 800870e:	f7ff f957 	bl	80079c0 <_malloc_r>
 8008712:	4606      	mov	r6, r0
 8008714:	b928      	cbnz	r0, 8008722 <_calloc_r+0x1e>
 8008716:	4630      	mov	r0, r6
 8008718:	bd70      	pop	{r4, r5, r6, pc}
 800871a:	220c      	movs	r2, #12
 800871c:	2600      	movs	r6, #0
 800871e:	6002      	str	r2, [r0, #0]
 8008720:	e7f9      	b.n	8008716 <_calloc_r+0x12>
 8008722:	462a      	mov	r2, r5
 8008724:	4621      	mov	r1, r4
 8008726:	f7fe f9d3 	bl	8006ad0 <memset>
 800872a:	e7f4      	b.n	8008716 <_calloc_r+0x12>

0800872c <__ascii_mbtowc>:
 800872c:	b082      	sub	sp, #8
 800872e:	b901      	cbnz	r1, 8008732 <__ascii_mbtowc+0x6>
 8008730:	a901      	add	r1, sp, #4
 8008732:	b142      	cbz	r2, 8008746 <__ascii_mbtowc+0x1a>
 8008734:	b14b      	cbz	r3, 800874a <__ascii_mbtowc+0x1e>
 8008736:	7813      	ldrb	r3, [r2, #0]
 8008738:	600b      	str	r3, [r1, #0]
 800873a:	7812      	ldrb	r2, [r2, #0]
 800873c:	1e10      	subs	r0, r2, #0
 800873e:	bf18      	it	ne
 8008740:	2001      	movne	r0, #1
 8008742:	b002      	add	sp, #8
 8008744:	4770      	bx	lr
 8008746:	4610      	mov	r0, r2
 8008748:	e7fb      	b.n	8008742 <__ascii_mbtowc+0x16>
 800874a:	f06f 0001 	mvn.w	r0, #1
 800874e:	e7f8      	b.n	8008742 <__ascii_mbtowc+0x16>

08008750 <__ascii_wctomb>:
 8008750:	4603      	mov	r3, r0
 8008752:	4608      	mov	r0, r1
 8008754:	b141      	cbz	r1, 8008768 <__ascii_wctomb+0x18>
 8008756:	2aff      	cmp	r2, #255	; 0xff
 8008758:	d904      	bls.n	8008764 <__ascii_wctomb+0x14>
 800875a:	228a      	movs	r2, #138	; 0x8a
 800875c:	f04f 30ff 	mov.w	r0, #4294967295
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	4770      	bx	lr
 8008764:	2001      	movs	r0, #1
 8008766:	700a      	strb	r2, [r1, #0]
 8008768:	4770      	bx	lr
	...

0800876c <fiprintf>:
 800876c:	b40e      	push	{r1, r2, r3}
 800876e:	b503      	push	{r0, r1, lr}
 8008770:	4601      	mov	r1, r0
 8008772:	ab03      	add	r3, sp, #12
 8008774:	4805      	ldr	r0, [pc, #20]	; (800878c <fiprintf+0x20>)
 8008776:	f853 2b04 	ldr.w	r2, [r3], #4
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	f7ff fd4b 	bl	8008218 <_vfiprintf_r>
 8008782:	b002      	add	sp, #8
 8008784:	f85d eb04 	ldr.w	lr, [sp], #4
 8008788:	b003      	add	sp, #12
 800878a:	4770      	bx	lr
 800878c:	20000064 	.word	0x20000064

08008790 <abort>:
 8008790:	2006      	movs	r0, #6
 8008792:	b508      	push	{r3, lr}
 8008794:	f000 f82c 	bl	80087f0 <raise>
 8008798:	2001      	movs	r0, #1
 800879a:	f7f9 ff5a 	bl	8002652 <_exit>

0800879e <_raise_r>:
 800879e:	291f      	cmp	r1, #31
 80087a0:	b538      	push	{r3, r4, r5, lr}
 80087a2:	4604      	mov	r4, r0
 80087a4:	460d      	mov	r5, r1
 80087a6:	d904      	bls.n	80087b2 <_raise_r+0x14>
 80087a8:	2316      	movs	r3, #22
 80087aa:	6003      	str	r3, [r0, #0]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	bd38      	pop	{r3, r4, r5, pc}
 80087b2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80087b4:	b112      	cbz	r2, 80087bc <_raise_r+0x1e>
 80087b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80087ba:	b94b      	cbnz	r3, 80087d0 <_raise_r+0x32>
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 f831 	bl	8008824 <_getpid_r>
 80087c2:	462a      	mov	r2, r5
 80087c4:	4601      	mov	r1, r0
 80087c6:	4620      	mov	r0, r4
 80087c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087cc:	f000 b818 	b.w	8008800 <_kill_r>
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d00a      	beq.n	80087ea <_raise_r+0x4c>
 80087d4:	1c59      	adds	r1, r3, #1
 80087d6:	d103      	bne.n	80087e0 <_raise_r+0x42>
 80087d8:	2316      	movs	r3, #22
 80087da:	6003      	str	r3, [r0, #0]
 80087dc:	2001      	movs	r0, #1
 80087de:	e7e7      	b.n	80087b0 <_raise_r+0x12>
 80087e0:	2400      	movs	r4, #0
 80087e2:	4628      	mov	r0, r5
 80087e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087e8:	4798      	blx	r3
 80087ea:	2000      	movs	r0, #0
 80087ec:	e7e0      	b.n	80087b0 <_raise_r+0x12>
	...

080087f0 <raise>:
 80087f0:	4b02      	ldr	r3, [pc, #8]	; (80087fc <raise+0xc>)
 80087f2:	4601      	mov	r1, r0
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	f7ff bfd2 	b.w	800879e <_raise_r>
 80087fa:	bf00      	nop
 80087fc:	20000064 	.word	0x20000064

08008800 <_kill_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	2300      	movs	r3, #0
 8008804:	4d06      	ldr	r5, [pc, #24]	; (8008820 <_kill_r+0x20>)
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	4611      	mov	r1, r2
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	f7f9 ff10 	bl	8002632 <_kill>
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	d102      	bne.n	800881c <_kill_r+0x1c>
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	b103      	cbz	r3, 800881c <_kill_r+0x1c>
 800881a:	6023      	str	r3, [r4, #0]
 800881c:	bd38      	pop	{r3, r4, r5, pc}
 800881e:	bf00      	nop
 8008820:	200004c0 	.word	0x200004c0

08008824 <_getpid_r>:
 8008824:	f7f9 befe 	b.w	8002624 <_getpid>

08008828 <atan2>:
 8008828:	f000 b802 	b.w	8008830 <__ieee754_atan2>
 800882c:	0000      	movs	r0, r0
	...

08008830 <__ieee754_atan2>:
 8008830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	4617      	mov	r7, r2
 8008836:	4692      	mov	sl, r2
 8008838:	4699      	mov	r9, r3
 800883a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800883e:	427b      	negs	r3, r7
 8008840:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80089c0 <__ieee754_atan2+0x190>
 8008844:	433b      	orrs	r3, r7
 8008846:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800884a:	4543      	cmp	r3, r8
 800884c:	4604      	mov	r4, r0
 800884e:	460d      	mov	r5, r1
 8008850:	d809      	bhi.n	8008866 <__ieee754_atan2+0x36>
 8008852:	4246      	negs	r6, r0
 8008854:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008858:	4306      	orrs	r6, r0
 800885a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800885e:	4546      	cmp	r6, r8
 8008860:	468e      	mov	lr, r1
 8008862:	4683      	mov	fp, r0
 8008864:	d908      	bls.n	8008878 <__ieee754_atan2+0x48>
 8008866:	4652      	mov	r2, sl
 8008868:	464b      	mov	r3, r9
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	f7f7 fc7d 	bl	800016c <__adddf3>
 8008872:	4604      	mov	r4, r0
 8008874:	460d      	mov	r5, r1
 8008876:	e019      	b.n	80088ac <__ieee754_atan2+0x7c>
 8008878:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800887c:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8008880:	433e      	orrs	r6, r7
 8008882:	d103      	bne.n	800888c <__ieee754_atan2+0x5c>
 8008884:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	f000 b8a2 	b.w	80089d0 <atan>
 800888c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8008890:	f006 0602 	and.w	r6, r6, #2
 8008894:	ea53 0b0b 	orrs.w	fp, r3, fp
 8008898:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800889c:	d10a      	bne.n	80088b4 <__ieee754_atan2+0x84>
 800889e:	2e02      	cmp	r6, #2
 80088a0:	d067      	beq.n	8008972 <__ieee754_atan2+0x142>
 80088a2:	2e03      	cmp	r6, #3
 80088a4:	d102      	bne.n	80088ac <__ieee754_atan2+0x7c>
 80088a6:	a53a      	add	r5, pc, #232	; (adr r5, 8008990 <__ieee754_atan2+0x160>)
 80088a8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088ac:	4620      	mov	r0, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b4:	4317      	orrs	r7, r2
 80088b6:	d106      	bne.n	80088c6 <__ieee754_atan2+0x96>
 80088b8:	f1be 0f00 	cmp.w	lr, #0
 80088bc:	da64      	bge.n	8008988 <__ieee754_atan2+0x158>
 80088be:	a536      	add	r5, pc, #216	; (adr r5, 8008998 <__ieee754_atan2+0x168>)
 80088c0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80088c4:	e7f2      	b.n	80088ac <__ieee754_atan2+0x7c>
 80088c6:	4542      	cmp	r2, r8
 80088c8:	d10f      	bne.n	80088ea <__ieee754_atan2+0xba>
 80088ca:	4293      	cmp	r3, r2
 80088cc:	f106 36ff 	add.w	r6, r6, #4294967295
 80088d0:	d107      	bne.n	80088e2 <__ieee754_atan2+0xb2>
 80088d2:	2e02      	cmp	r6, #2
 80088d4:	d851      	bhi.n	800897a <__ieee754_atan2+0x14a>
 80088d6:	4b3b      	ldr	r3, [pc, #236]	; (80089c4 <__ieee754_atan2+0x194>)
 80088d8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80088dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80088e0:	e7e4      	b.n	80088ac <__ieee754_atan2+0x7c>
 80088e2:	2e02      	cmp	r6, #2
 80088e4:	d84d      	bhi.n	8008982 <__ieee754_atan2+0x152>
 80088e6:	4b38      	ldr	r3, [pc, #224]	; (80089c8 <__ieee754_atan2+0x198>)
 80088e8:	e7f6      	b.n	80088d8 <__ieee754_atan2+0xa8>
 80088ea:	4543      	cmp	r3, r8
 80088ec:	d0e4      	beq.n	80088b8 <__ieee754_atan2+0x88>
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80088f4:	ea4f 5223 	mov.w	r2, r3, asr #20
 80088f8:	da21      	bge.n	800893e <__ieee754_atan2+0x10e>
 80088fa:	f1b9 0f00 	cmp.w	r9, #0
 80088fe:	da01      	bge.n	8008904 <__ieee754_atan2+0xd4>
 8008900:	323c      	adds	r2, #60	; 0x3c
 8008902:	db20      	blt.n	8008946 <__ieee754_atan2+0x116>
 8008904:	4652      	mov	r2, sl
 8008906:	464b      	mov	r3, r9
 8008908:	4620      	mov	r0, r4
 800890a:	4629      	mov	r1, r5
 800890c:	f7f7 ff0e 	bl	800072c <__aeabi_ddiv>
 8008910:	f000 f9e8 	bl	8008ce4 <fabs>
 8008914:	f000 f85c 	bl	80089d0 <atan>
 8008918:	4604      	mov	r4, r0
 800891a:	460d      	mov	r5, r1
 800891c:	2e01      	cmp	r6, #1
 800891e:	d015      	beq.n	800894c <__ieee754_atan2+0x11c>
 8008920:	2e02      	cmp	r6, #2
 8008922:	d017      	beq.n	8008954 <__ieee754_atan2+0x124>
 8008924:	2e00      	cmp	r6, #0
 8008926:	d0c1      	beq.n	80088ac <__ieee754_atan2+0x7c>
 8008928:	a31d      	add	r3, pc, #116	; (adr r3, 80089a0 <__ieee754_atan2+0x170>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	4620      	mov	r0, r4
 8008930:	4629      	mov	r1, r5
 8008932:	f7f7 fc19 	bl	8000168 <__aeabi_dsub>
 8008936:	a31c      	add	r3, pc, #112	; (adr r3, 80089a8 <__ieee754_atan2+0x178>)
 8008938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893c:	e016      	b.n	800896c <__ieee754_atan2+0x13c>
 800893e:	a51c      	add	r5, pc, #112	; (adr r5, 80089b0 <__ieee754_atan2+0x180>)
 8008940:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008944:	e7ea      	b.n	800891c <__ieee754_atan2+0xec>
 8008946:	2400      	movs	r4, #0
 8008948:	2500      	movs	r5, #0
 800894a:	e7e7      	b.n	800891c <__ieee754_atan2+0xec>
 800894c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008950:	461d      	mov	r5, r3
 8008952:	e7ab      	b.n	80088ac <__ieee754_atan2+0x7c>
 8008954:	a312      	add	r3, pc, #72	; (adr r3, 80089a0 <__ieee754_atan2+0x170>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	4620      	mov	r0, r4
 800895c:	4629      	mov	r1, r5
 800895e:	f7f7 fc03 	bl	8000168 <__aeabi_dsub>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	a110      	add	r1, pc, #64	; (adr r1, 80089a8 <__ieee754_atan2+0x178>)
 8008968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800896c:	f7f7 fbfc 	bl	8000168 <__aeabi_dsub>
 8008970:	e77f      	b.n	8008872 <__ieee754_atan2+0x42>
 8008972:	a50d      	add	r5, pc, #52	; (adr r5, 80089a8 <__ieee754_atan2+0x178>)
 8008974:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008978:	e798      	b.n	80088ac <__ieee754_atan2+0x7c>
 800897a:	a50f      	add	r5, pc, #60	; (adr r5, 80089b8 <__ieee754_atan2+0x188>)
 800897c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008980:	e794      	b.n	80088ac <__ieee754_atan2+0x7c>
 8008982:	2400      	movs	r4, #0
 8008984:	2500      	movs	r5, #0
 8008986:	e791      	b.n	80088ac <__ieee754_atan2+0x7c>
 8008988:	a509      	add	r5, pc, #36	; (adr r5, 80089b0 <__ieee754_atan2+0x180>)
 800898a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800898e:	e78d      	b.n	80088ac <__ieee754_atan2+0x7c>
 8008990:	54442d18 	.word	0x54442d18
 8008994:	c00921fb 	.word	0xc00921fb
 8008998:	54442d18 	.word	0x54442d18
 800899c:	bff921fb 	.word	0xbff921fb
 80089a0:	33145c07 	.word	0x33145c07
 80089a4:	3ca1a626 	.word	0x3ca1a626
 80089a8:	54442d18 	.word	0x54442d18
 80089ac:	400921fb 	.word	0x400921fb
 80089b0:	54442d18 	.word	0x54442d18
 80089b4:	3ff921fb 	.word	0x3ff921fb
 80089b8:	54442d18 	.word	0x54442d18
 80089bc:	3fe921fb 	.word	0x3fe921fb
 80089c0:	7ff00000 	.word	0x7ff00000
 80089c4:	080090f0 	.word	0x080090f0
 80089c8:	08009108 	.word	0x08009108
 80089cc:	00000000 	.word	0x00000000

080089d0 <atan>:
 80089d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	4bb6      	ldr	r3, [pc, #728]	; (8008cb0 <atan+0x2e0>)
 80089d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80089da:	429e      	cmp	r6, r3
 80089dc:	4604      	mov	r4, r0
 80089de:	460d      	mov	r5, r1
 80089e0:	468b      	mov	fp, r1
 80089e2:	dd17      	ble.n	8008a14 <atan+0x44>
 80089e4:	4bb3      	ldr	r3, [pc, #716]	; (8008cb4 <atan+0x2e4>)
 80089e6:	429e      	cmp	r6, r3
 80089e8:	dc01      	bgt.n	80089ee <atan+0x1e>
 80089ea:	d109      	bne.n	8008a00 <atan+0x30>
 80089ec:	b140      	cbz	r0, 8008a00 <atan+0x30>
 80089ee:	4622      	mov	r2, r4
 80089f0:	462b      	mov	r3, r5
 80089f2:	4620      	mov	r0, r4
 80089f4:	4629      	mov	r1, r5
 80089f6:	f7f7 fbb9 	bl	800016c <__adddf3>
 80089fa:	4604      	mov	r4, r0
 80089fc:	460d      	mov	r5, r1
 80089fe:	e005      	b.n	8008a0c <atan+0x3c>
 8008a00:	f1bb 0f00 	cmp.w	fp, #0
 8008a04:	4cac      	ldr	r4, [pc, #688]	; (8008cb8 <atan+0x2e8>)
 8008a06:	f300 8121 	bgt.w	8008c4c <atan+0x27c>
 8008a0a:	4dac      	ldr	r5, [pc, #688]	; (8008cbc <atan+0x2ec>)
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	4baa      	ldr	r3, [pc, #680]	; (8008cc0 <atan+0x2f0>)
 8008a16:	429e      	cmp	r6, r3
 8008a18:	dc11      	bgt.n	8008a3e <atan+0x6e>
 8008a1a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008a1e:	429e      	cmp	r6, r3
 8008a20:	dc0a      	bgt.n	8008a38 <atan+0x68>
 8008a22:	a38b      	add	r3, pc, #556	; (adr r3, 8008c50 <atan+0x280>)
 8008a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a28:	f7f7 fba0 	bl	800016c <__adddf3>
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4ba5      	ldr	r3, [pc, #660]	; (8008cc4 <atan+0x2f4>)
 8008a30:	f7f7 ffe2 	bl	80009f8 <__aeabi_dcmpgt>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d1e9      	bne.n	8008a0c <atan+0x3c>
 8008a38:	f04f 3aff 	mov.w	sl, #4294967295
 8008a3c:	e027      	b.n	8008a8e <atan+0xbe>
 8008a3e:	f000 f951 	bl	8008ce4 <fabs>
 8008a42:	4ba1      	ldr	r3, [pc, #644]	; (8008cc8 <atan+0x2f8>)
 8008a44:	4604      	mov	r4, r0
 8008a46:	429e      	cmp	r6, r3
 8008a48:	460d      	mov	r5, r1
 8008a4a:	f300 80b8 	bgt.w	8008bbe <atan+0x1ee>
 8008a4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008a52:	429e      	cmp	r6, r3
 8008a54:	f300 809c 	bgt.w	8008b90 <atan+0x1c0>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	f7f7 fb86 	bl	800016c <__adddf3>
 8008a60:	2200      	movs	r2, #0
 8008a62:	4b98      	ldr	r3, [pc, #608]	; (8008cc4 <atan+0x2f4>)
 8008a64:	f7f7 fb80 	bl	8000168 <__aeabi_dsub>
 8008a68:	2200      	movs	r2, #0
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460f      	mov	r7, r1
 8008a6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a72:	4620      	mov	r0, r4
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f7 fb79 	bl	800016c <__adddf3>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4630      	mov	r0, r6
 8008a80:	4639      	mov	r1, r7
 8008a82:	f7f7 fe53 	bl	800072c <__aeabi_ddiv>
 8008a86:	f04f 0a00 	mov.w	sl, #0
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	4622      	mov	r2, r4
 8008a90:	462b      	mov	r3, r5
 8008a92:	4620      	mov	r0, r4
 8008a94:	4629      	mov	r1, r5
 8008a96:	f7f7 fd1f 	bl	80004d8 <__aeabi_dmul>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	f7f7 fd19 	bl	80004d8 <__aeabi_dmul>
 8008aa6:	a36c      	add	r3, pc, #432	; (adr r3, 8008c58 <atan+0x288>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	4606      	mov	r6, r0
 8008aae:	460f      	mov	r7, r1
 8008ab0:	f7f7 fd12 	bl	80004d8 <__aeabi_dmul>
 8008ab4:	a36a      	add	r3, pc, #424	; (adr r3, 8008c60 <atan+0x290>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f7 fb57 	bl	800016c <__adddf3>
 8008abe:	4632      	mov	r2, r6
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	f7f7 fd09 	bl	80004d8 <__aeabi_dmul>
 8008ac6:	a368      	add	r3, pc, #416	; (adr r3, 8008c68 <atan+0x298>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fb4e 	bl	800016c <__adddf3>
 8008ad0:	4632      	mov	r2, r6
 8008ad2:	463b      	mov	r3, r7
 8008ad4:	f7f7 fd00 	bl	80004d8 <__aeabi_dmul>
 8008ad8:	a365      	add	r3, pc, #404	; (adr r3, 8008c70 <atan+0x2a0>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f7f7 fb45 	bl	800016c <__adddf3>
 8008ae2:	4632      	mov	r2, r6
 8008ae4:	463b      	mov	r3, r7
 8008ae6:	f7f7 fcf7 	bl	80004d8 <__aeabi_dmul>
 8008aea:	a363      	add	r3, pc, #396	; (adr r3, 8008c78 <atan+0x2a8>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fb3c 	bl	800016c <__adddf3>
 8008af4:	4632      	mov	r2, r6
 8008af6:	463b      	mov	r3, r7
 8008af8:	f7f7 fcee 	bl	80004d8 <__aeabi_dmul>
 8008afc:	a360      	add	r3, pc, #384	; (adr r3, 8008c80 <atan+0x2b0>)
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f7f7 fb33 	bl	800016c <__adddf3>
 8008b06:	4642      	mov	r2, r8
 8008b08:	464b      	mov	r3, r9
 8008b0a:	f7f7 fce5 	bl	80004d8 <__aeabi_dmul>
 8008b0e:	a35e      	add	r3, pc, #376	; (adr r3, 8008c88 <atan+0x2b8>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	4680      	mov	r8, r0
 8008b16:	4689      	mov	r9, r1
 8008b18:	4630      	mov	r0, r6
 8008b1a:	4639      	mov	r1, r7
 8008b1c:	f7f7 fcdc 	bl	80004d8 <__aeabi_dmul>
 8008b20:	a35b      	add	r3, pc, #364	; (adr r3, 8008c90 <atan+0x2c0>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 fb1f 	bl	8000168 <__aeabi_dsub>
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	f7f7 fcd3 	bl	80004d8 <__aeabi_dmul>
 8008b32:	a359      	add	r3, pc, #356	; (adr r3, 8008c98 <atan+0x2c8>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	f7f7 fb16 	bl	8000168 <__aeabi_dsub>
 8008b3c:	4632      	mov	r2, r6
 8008b3e:	463b      	mov	r3, r7
 8008b40:	f7f7 fcca 	bl	80004d8 <__aeabi_dmul>
 8008b44:	a356      	add	r3, pc, #344	; (adr r3, 8008ca0 <atan+0x2d0>)
 8008b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4a:	f7f7 fb0d 	bl	8000168 <__aeabi_dsub>
 8008b4e:	4632      	mov	r2, r6
 8008b50:	463b      	mov	r3, r7
 8008b52:	f7f7 fcc1 	bl	80004d8 <__aeabi_dmul>
 8008b56:	a354      	add	r3, pc, #336	; (adr r3, 8008ca8 <atan+0x2d8>)
 8008b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5c:	f7f7 fb04 	bl	8000168 <__aeabi_dsub>
 8008b60:	4632      	mov	r2, r6
 8008b62:	463b      	mov	r3, r7
 8008b64:	f7f7 fcb8 	bl	80004d8 <__aeabi_dmul>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	4649      	mov	r1, r9
 8008b70:	f7f7 fafc 	bl	800016c <__adddf3>
 8008b74:	4622      	mov	r2, r4
 8008b76:	462b      	mov	r3, r5
 8008b78:	f7f7 fcae 	bl	80004d8 <__aeabi_dmul>
 8008b7c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	d144      	bne.n	8008c10 <atan+0x240>
 8008b86:	4620      	mov	r0, r4
 8008b88:	4629      	mov	r1, r5
 8008b8a:	f7f7 faed 	bl	8000168 <__aeabi_dsub>
 8008b8e:	e734      	b.n	80089fa <atan+0x2a>
 8008b90:	2200      	movs	r2, #0
 8008b92:	4b4c      	ldr	r3, [pc, #304]	; (8008cc4 <atan+0x2f4>)
 8008b94:	f7f7 fae8 	bl	8000168 <__aeabi_dsub>
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	460f      	mov	r7, r1
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4b48      	ldr	r3, [pc, #288]	; (8008cc4 <atan+0x2f4>)
 8008ba4:	f7f7 fae2 	bl	800016c <__adddf3>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f7f7 fdbc 	bl	800072c <__aeabi_ddiv>
 8008bb4:	f04f 0a01 	mov.w	sl, #1
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	e767      	b.n	8008a8e <atan+0xbe>
 8008bbe:	4b43      	ldr	r3, [pc, #268]	; (8008ccc <atan+0x2fc>)
 8008bc0:	429e      	cmp	r6, r3
 8008bc2:	da1a      	bge.n	8008bfa <atan+0x22a>
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4b42      	ldr	r3, [pc, #264]	; (8008cd0 <atan+0x300>)
 8008bc8:	f7f7 face 	bl	8000168 <__aeabi_dsub>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4606      	mov	r6, r0
 8008bd0:	460f      	mov	r7, r1
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	4629      	mov	r1, r5
 8008bd6:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <atan+0x300>)
 8008bd8:	f7f7 fc7e 	bl	80004d8 <__aeabi_dmul>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4b39      	ldr	r3, [pc, #228]	; (8008cc4 <atan+0x2f4>)
 8008be0:	f7f7 fac4 	bl	800016c <__adddf3>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 fd9e 	bl	800072c <__aeabi_ddiv>
 8008bf0:	f04f 0a02 	mov.w	sl, #2
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	460d      	mov	r5, r1
 8008bf8:	e749      	b.n	8008a8e <atan+0xbe>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	2000      	movs	r0, #0
 8008c00:	4934      	ldr	r1, [pc, #208]	; (8008cd4 <atan+0x304>)
 8008c02:	f7f7 fd93 	bl	800072c <__aeabi_ddiv>
 8008c06:	f04f 0a03 	mov.w	sl, #3
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	460d      	mov	r5, r1
 8008c0e:	e73e      	b.n	8008a8e <atan+0xbe>
 8008c10:	4b31      	ldr	r3, [pc, #196]	; (8008cd8 <atan+0x308>)
 8008c12:	4e32      	ldr	r6, [pc, #200]	; (8008cdc <atan+0x30c>)
 8008c14:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 faa4 	bl	8000168 <__aeabi_dsub>
 8008c20:	4622      	mov	r2, r4
 8008c22:	462b      	mov	r3, r5
 8008c24:	f7f7 faa0 	bl	8000168 <__aeabi_dsub>
 8008c28:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008c34:	f7f7 fa98 	bl	8000168 <__aeabi_dsub>
 8008c38:	f1bb 0f00 	cmp.w	fp, #0
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	f6bf aee4 	bge.w	8008a0c <atan+0x3c>
 8008c44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c48:	461d      	mov	r5, r3
 8008c4a:	e6df      	b.n	8008a0c <atan+0x3c>
 8008c4c:	4d24      	ldr	r5, [pc, #144]	; (8008ce0 <atan+0x310>)
 8008c4e:	e6dd      	b.n	8008a0c <atan+0x3c>
 8008c50:	8800759c 	.word	0x8800759c
 8008c54:	7e37e43c 	.word	0x7e37e43c
 8008c58:	e322da11 	.word	0xe322da11
 8008c5c:	3f90ad3a 	.word	0x3f90ad3a
 8008c60:	24760deb 	.word	0x24760deb
 8008c64:	3fa97b4b 	.word	0x3fa97b4b
 8008c68:	a0d03d51 	.word	0xa0d03d51
 8008c6c:	3fb10d66 	.word	0x3fb10d66
 8008c70:	c54c206e 	.word	0xc54c206e
 8008c74:	3fb745cd 	.word	0x3fb745cd
 8008c78:	920083ff 	.word	0x920083ff
 8008c7c:	3fc24924 	.word	0x3fc24924
 8008c80:	5555550d 	.word	0x5555550d
 8008c84:	3fd55555 	.word	0x3fd55555
 8008c88:	2c6a6c2f 	.word	0x2c6a6c2f
 8008c8c:	bfa2b444 	.word	0xbfa2b444
 8008c90:	52defd9a 	.word	0x52defd9a
 8008c94:	3fadde2d 	.word	0x3fadde2d
 8008c98:	af749a6d 	.word	0xaf749a6d
 8008c9c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008ca0:	fe231671 	.word	0xfe231671
 8008ca4:	3fbc71c6 	.word	0x3fbc71c6
 8008ca8:	9998ebc4 	.word	0x9998ebc4
 8008cac:	3fc99999 	.word	0x3fc99999
 8008cb0:	440fffff 	.word	0x440fffff
 8008cb4:	7ff00000 	.word	0x7ff00000
 8008cb8:	54442d18 	.word	0x54442d18
 8008cbc:	bff921fb 	.word	0xbff921fb
 8008cc0:	3fdbffff 	.word	0x3fdbffff
 8008cc4:	3ff00000 	.word	0x3ff00000
 8008cc8:	3ff2ffff 	.word	0x3ff2ffff
 8008ccc:	40038000 	.word	0x40038000
 8008cd0:	3ff80000 	.word	0x3ff80000
 8008cd4:	bff00000 	.word	0xbff00000
 8008cd8:	08009140 	.word	0x08009140
 8008cdc:	08009120 	.word	0x08009120
 8008ce0:	3ff921fb 	.word	0x3ff921fb

08008ce4 <fabs>:
 8008ce4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ce8:	4619      	mov	r1, r3
 8008cea:	4770      	bx	lr

08008cec <_init>:
 8008cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cee:	bf00      	nop
 8008cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf2:	bc08      	pop	{r3}
 8008cf4:	469e      	mov	lr, r3
 8008cf6:	4770      	bx	lr

08008cf8 <_fini>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	bf00      	nop
 8008cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfe:	bc08      	pop	{r3}
 8008d00:	469e      	mov	lr, r3
 8008d02:	4770      	bx	lr
