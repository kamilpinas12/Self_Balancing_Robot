
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  0800bb58  0800bb58  0001bb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a4  0800c0a4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c0a4  0800c0a4  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c0a4  0800c0a4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0a4  0800c0a4  0001c0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0a8  0800c0a8  0001c0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  200001d4  0800c280  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  0800c280  000208e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   000149c5  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ad  00000000  00000000  00034c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  00037fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e06  00000000  00000000  000391b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abb0  00000000  00000000  00039fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018102  00000000  00000000  00054b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fbe3  00000000  00000000  0006cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f08  00000000  00000000  000fc84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00102754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb3c 	.word	0x0800bb3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800bb3c 	.word	0x0800bb3c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_DMA_Init+0x58>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_DMA_Init+0x58>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_DMA_Init+0x58>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	200e      	movs	r0, #14
 8001204:	f002 f9d5 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001208:	200e      	movs	r0, #14
 800120a:	f002 f9ee 	bl	80035ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	200f      	movs	r0, #15
 8001214:	f002 f9cd 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001218:	200f      	movs	r0, #15
 800121a:	f002 f9e6 	bl	80035ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2011      	movs	r0, #17
 8001224:	f002 f9c5 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001228:	2011      	movs	r0, #17
 800122a:	f002 f9de 	bl	80035ea <HAL_NVIC_EnableIRQ>

}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000

0800123c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001250:	4b40      	ldr	r3, [pc, #256]	; (8001354 <MX_GPIO_Init+0x118>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a3f      	ldr	r2, [pc, #252]	; (8001354 <MX_GPIO_Init+0x118>)
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b3d      	ldr	r3, [pc, #244]	; (8001354 <MX_GPIO_Init+0x118>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001268:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <MX_GPIO_Init+0x118>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	4a39      	ldr	r2, [pc, #228]	; (8001354 <MX_GPIO_Init+0x118>)
 800126e:	f043 0320 	orr.w	r3, r3, #32
 8001272:	6193      	str	r3, [r2, #24]
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <MX_GPIO_Init+0x118>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	f003 0320 	and.w	r3, r3, #32
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <MX_GPIO_Init+0x118>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a33      	ldr	r2, [pc, #204]	; (8001354 <MX_GPIO_Init+0x118>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]
 800128c:	4b31      	ldr	r3, [pc, #196]	; (8001354 <MX_GPIO_Init+0x118>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <MX_GPIO_Init+0x118>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a2d      	ldr	r2, [pc, #180]	; (8001354 <MX_GPIO_Init+0x118>)
 800129e:	f043 0308 	orr.w	r3, r3, #8
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_GPIO_Init+0x118>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012b6:	4828      	ldr	r0, [pc, #160]	; (8001358 <MX_GPIO_Init+0x11c>)
 80012b8:	f002 fdd8 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2108      	movs	r1, #8
 80012c0:	4826      	ldr	r0, [pc, #152]	; (800135c <MX_GPIO_Init+0x120>)
 80012c2:	f002 fdd3 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <MX_GPIO_Init+0x120>)
 80012cc:	f002 fdce 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2102      	movs	r1, #2
 80012d4:	4822      	ldr	r0, [pc, #136]	; (8001360 <MX_GPIO_Init+0x124>)
 80012d6:	f002 fdc9 	bl	8003e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2302      	movs	r3, #2
 80012ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 0310 	add.w	r3, r7, #16
 80012f0:	4619      	mov	r1, r3
 80012f2:	4819      	ldr	r0, [pc, #100]	; (8001358 <MX_GPIO_Init+0x11c>)
 80012f4:	f002 fc36 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 80012f8:	2388      	movs	r3, #136	; 0x88
 80012fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2302      	movs	r3, #2
 8001306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_GPIO_Init+0x120>)
 8001310:	f002 fc28 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2302      	movs	r3, #2
 8001322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_GPIO_Init+0x124>)
 800132c:	f002 fc1a 	bl	8003b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_STATE_Pin;
 8001330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_GPIO_Init+0x120>)
 8001346:	f002 fc0d 	bl	8003b64 <HAL_GPIO_Init>

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000
 8001358:	40011000 	.word	0x40011000
 800135c:	40010800 	.word	0x40010800
 8001360:	40010c00 	.word	0x40010c00

08001364 <saturation>:
#include "helpers.h"




void saturation(float min, float max, float* val){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	if(*val > max) *val = max;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	68b8      	ldr	r0, [r7, #8]
 8001378:	f7ff feac 	bl	80010d4 <__aeabi_fcmplt>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <saturation+0x24>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	601a      	str	r2, [r3, #0]
	if(*val < min) *val = min;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4619      	mov	r1, r3
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f7ff febe 	bl	8001110 <__aeabi_fcmpgt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d100      	bne.n	800139c <saturation+0x38>
}
 800139a:	e002      	b.n	80013a2 <saturation+0x3e>
	if(*val < min) *val = min;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	601a      	str	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_I2C1_Init+0x50>)
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <MX_I2C1_Init+0x54>)
 80013b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_I2C1_Init+0x50>)
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <MX_I2C1_Init+0x58>)
 80013ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_I2C1_Init+0x50>)
 80013ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013d0:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <MX_I2C1_Init+0x50>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_I2C1_Init+0x50>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013dc:	4b07      	ldr	r3, [pc, #28]	; (80013fc <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e8:	4804      	ldr	r0, [pc, #16]	; (80013fc <MX_I2C1_Init+0x50>)
 80013ea:	f002 fd57 	bl	8003e9c <HAL_I2C_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013f4:	f000 fa38 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001f0 	.word	0x200001f0
 8001400:	40005400 	.word	0x40005400
 8001404:	000186a0 	.word	0x000186a0

08001408 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_I2C2_Init+0x50>)
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <MX_I2C2_Init+0x54>)
 8001410:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_I2C2_Init+0x50>)
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_I2C2_Init+0x58>)
 8001416:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_I2C2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_I2C2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_I2C2_Init+0x50>)
 8001426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <MX_I2C2_Init+0x50>)
 800142e:	2200      	movs	r2, #0
 8001430:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_I2C2_Init+0x50>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <MX_I2C2_Init+0x50>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_I2C2_Init+0x50>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <MX_I2C2_Init+0x50>)
 8001446:	f002 fd29 	bl	8003e9c <HAL_I2C_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001450:	f000 fa0a 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000244 	.word	0x20000244
 800145c:	40005800 	.word	0x40005800
 8001460:	000186a0 	.word	0x000186a0

08001464 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0318 	add.w	r3, r7, #24
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a3e      	ldr	r2, [pc, #248]	; (8001578 <HAL_I2C_MspInit+0x114>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d14a      	bne.n	800151a <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001484:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_I2C_MspInit+0x118>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_I2C_MspInit+0x118>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_I2C_MspInit+0x118>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149c:	23c0      	movs	r3, #192	; 0xc0
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a0:	2312      	movs	r3, #18
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0318 	add.w	r3, r7, #24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4834      	ldr	r0, [pc, #208]	; (8001580 <HAL_I2C_MspInit+0x11c>)
 80014b0:	f002 fb58 	bl	8003b64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b4:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_I2C_MspInit+0x118>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_I2C_MspInit+0x118>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	61d3      	str	r3, [r2, #28]
 80014c0:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_I2C_MspInit+0x118>)
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014ce:	4a2e      	ldr	r2, [pc, #184]	; (8001588 <HAL_I2C_MspInit+0x124>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d8:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014de:	4b29      	ldr	r3, [pc, #164]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014e0:	2280      	movs	r2, #128	; 0x80
 80014e2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e4:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ea:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80014fc:	4821      	ldr	r0, [pc, #132]	; (8001584 <HAL_I2C_MspInit+0x120>)
 80014fe:	f002 f88f 	bl	8003620 <HAL_DMA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8001508:	f000 f9ae 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_I2C_MspInit+0x120>)
 8001510:	639a      	str	r2, [r3, #56]	; 0x38
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_I2C_MspInit+0x120>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001518:	e029      	b.n	800156e <HAL_I2C_MspInit+0x10a>
  else if(i2cHandle->Instance==I2C2)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_I2C_MspInit+0x128>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d124      	bne.n	800156e <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_I2C_MspInit+0x118>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_I2C_MspInit+0x118>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_I2C_MspInit+0x118>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800153c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001542:	2312      	movs	r3, #18
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <HAL_I2C_MspInit+0x11c>)
 8001552:	f002 fb07 	bl	8003b64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_I2C_MspInit+0x118>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_I2C_MspInit+0x118>)
 800155c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001560:	61d3      	str	r3, [r2, #28]
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_I2C_MspInit+0x118>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40005400 	.word	0x40005400
 800157c:	40021000 	.word	0x40021000
 8001580:	40010c00 	.word	0x40010c00
 8001584:	20000298 	.word	0x20000298
 8001588:	40020080 	.word	0x40020080
 800158c:	40005800 	.word	0x40005800

08001590 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b0a      	cmp	r3, #10
 800159c:	d109      	bne.n	80015b2 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800159e:	230d      	movs	r3, #13
 80015a0:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 80015a2:	f107 010f 	add.w	r1, r7, #15
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	2201      	movs	r2, #1
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <__io_putchar+0x3c>)
 80015ae:	f005 f895 	bl	80066dc <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80015b2:	1d39      	adds	r1, r7, #4
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	2201      	movs	r2, #1
 80015ba:	4804      	ldr	r0, [pc, #16]	; (80015cc <__io_putchar+0x3c>)
 80015bc:	f005 f88e 	bl	80066dc <HAL_UART_Transmit>
    return 1;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200006c8 	.word	0x200006c8

080015d0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	if(htim == stepper1.htim){
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d103      	bne.n	80015ea <HAL_TIM_PeriodElapsedCallback+0x1a>
		stepper_update(&stepper1);
 80015e2:	4808      	ldr	r0, [pc, #32]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015e4:	f000 fe5a 	bl	800229c <stepper_update>
	}
	else if(htim == stepper2.htim){
		stepper_update(&stepper2);
	}

}
 80015e8:	e007      	b.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == stepper2.htim){
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d102      	bne.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x2a>
		stepper_update(&stepper2);
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015f6:	f000 fe51 	bl	800229c <stepper_update>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	2000056c 	.word	0x2000056c
 8001608:	20000598 	.word	0x20000598

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b0d8      	sub	sp, #352	; 0x160
 8001610:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f001 fe71 	bl	80032f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001616:	f000 f8e1 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161a:	f7ff fe0f 	bl	800123c <MX_GPIO_Init>
  MX_DMA_Init();
 800161e:	f7ff fddf 	bl	80011e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001622:	f7ff fec3 	bl	80013ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8001626:	f000 ffe5 	bl	80025f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800162a:	f001 f859 	bl	80026e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800162e:	f001 fc5f 	bl	8002ef0 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001632:	f7ff fee9 	bl	8001408 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001636:	f001 f8c9 	bl	80027cc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // stepper motor setup
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	9304      	str	r3, [sp, #16]
 8001640:	f241 7370 	movw	r3, #6000	; 0x1770
 8001644:	9303      	str	r3, [sp, #12]
 8001646:	2308      	movs	r3, #8
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	4b51      	ldr	r3, [pc, #324]	; (8001790 <main+0x184>)
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <main+0x184>)
 8001654:	2200      	movs	r2, #0
 8001656:	494f      	ldr	r1, [pc, #316]	; (8001794 <main+0x188>)
 8001658:	484f      	ldr	r0, [pc, #316]	; (8001798 <main+0x18c>)
 800165a:	f000 fc92 	bl	8001f82 <stepper_init>
		  DIR1_GPIO_Port, DIR1_Pin, 6000, -1);
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 800165e:	2301      	movs	r3, #1
 8001660:	9304      	str	r3, [sp, #16]
 8001662:	f241 7370 	movw	r3, #6000	; 0x1770
 8001666:	9303      	str	r3, [sp, #12]
 8001668:	2302      	movs	r3, #2
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	4b4b      	ldr	r3, [pc, #300]	; (800179c <main+0x190>)
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	4b46      	ldr	r3, [pc, #280]	; (8001790 <main+0x184>)
 8001676:	2200      	movs	r2, #0
 8001678:	4949      	ldr	r1, [pc, #292]	; (80017a0 <main+0x194>)
 800167a:	484a      	ldr	r0, [pc, #296]	; (80017a4 <main+0x198>)
 800167c:	f000 fc81 	bl	8001f82 <stepper_init>
		  DIR2_GPIO_Port, DIR2_Pin, 6000, 1);


  // MPU setup
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 8001680:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001684:	22d0      	movs	r2, #208	; 0xd0
 8001686:	4948      	ldr	r1, [pc, #288]	; (80017a8 <main+0x19c>)
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fa5f 	bl	8001b4c <mpu_init>

  if(mpu_who_am_i(&mpu) != HAL_OK){
 800168e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fa46 	bl	8001b24 <mpu_who_am_i>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d018      	beq.n	80016d0 <main+0xc4>
	  while(1){
		  printf("Error while connecting to mpu 6050\n");
 800169e:	4843      	ldr	r0, [pc, #268]	; (80017ac <main+0x1a0>)
 80016a0:	f007 fc4c 	bl	8008f3c <puts>
		  mpu = mpu_init(&hi2c1, 0xD0);
 80016a4:	463b      	mov	r3, r7
 80016a6:	22d0      	movs	r2, #208	; 0xd0
 80016a8:	493f      	ldr	r1, [pc, #252]	; (80017a8 <main+0x19c>)
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fa4e 	bl	8001b4c <mpu_init>
 80016b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80016b4:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80016b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016bc:	4611      	mov	r1, r2
 80016be:	2250      	movs	r2, #80	; 0x50
 80016c0:	4618      	mov	r0, r3
 80016c2:	f007 fded 	bl	80092a0 <memcpy>
		  HAL_Delay(1000);
 80016c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ca:	f001 fe77 	bl	80033bc <HAL_Delay>
		  printf("Error while connecting to mpu 6050\n");
 80016ce:	e7e6      	b.n	800169e <main+0x92>
	  }
  }
  set_gyro_scale(&mpu, range_250);
 80016d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f964 	bl	80019a4 <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 80016dc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016e0:	2100      	movs	r1, #0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9ac 	bl	8001a40 <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc21Hz_Gyro20Hz);
 80016e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016ec:	2104      	movs	r1, #4
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f9f4 	bl	8001adc <mpu_low_pass_filter>
  HAL_Delay(300);
 80016f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016f8:	f001 fe60 	bl	80033bc <HAL_Delay>

  mpu_gyro_calibration(&mpu);
 80016fc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001700:	4618      	mov	r0, r3
 8001702:	f000 fb13 	bl	8001d2c <mpu_gyro_calibration>



  // UART interface init
  user_function_typedef user_function_array[] = {
 8001706:	4a2a      	ldr	r2, [pc, #168]	; (80017b0 <main+0x1a4>)
 8001708:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800170c:	4611      	mov	r1, r2
 800170e:	2260      	movs	r2, #96	; 0x60
 8001710:	4618      	mov	r0, r3
 8001712:	f007 fdc5 	bl	80092a0 <memcpy>

//  		{&set_position, "set_pos", 1},
//		{&set_angle_fun, "set_angle", 2},
//		{&rotate_deg, "rotate", 1}
  };
  uart_interface_init(&uart_interface, &huart1, &hdma_usart1_rx, user_function_array, sizeof(user_function_array) / sizeof(user_function_typedef));
 8001716:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800171a:	2204      	movs	r2, #4
 800171c:	9200      	str	r2, [sp, #0]
 800171e:	4a25      	ldr	r2, [pc, #148]	; (80017b4 <main+0x1a8>)
 8001720:	4925      	ldr	r1, [pc, #148]	; (80017b8 <main+0x1ac>)
 8001722:	4826      	ldr	r0, [pc, #152]	; (80017bc <main+0x1b0>)
 8001724:	f001 f94c 	bl	80029c0 <uart_interface_init>


  pid_typedef angle_pid = pid_init(480, 6, 1200);
 8001728:	f107 0074 	add.w	r0, r7, #116	; 0x74
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <main+0x1b4>)
 800172e:	4a25      	ldr	r2, [pc, #148]	; (80017c4 <main+0x1b8>)
 8001730:	4925      	ldr	r1, [pc, #148]	; (80017c8 <main+0x1bc>)
 8001732:	f000 fbc1 	bl	8001eb8 <pid_init>
  pid_typedef pos_pid = pid_init(0.0032, 0.0000015, 0.007);
 8001736:	f107 0054 	add.w	r0, r7, #84	; 0x54
 800173a:	4b24      	ldr	r3, [pc, #144]	; (80017cc <main+0x1c0>)
 800173c:	4a24      	ldr	r2, [pc, #144]	; (80017d0 <main+0x1c4>)
 800173e:	4925      	ldr	r1, [pc, #148]	; (80017d4 <main+0x1c8>)
 8001740:	f000 fbba 	bl	8001eb8 <pid_init>


  // robot init
  robot.stepper1 = &stepper1;
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <main+0x1cc>)
 8001746:	4a14      	ldr	r2, [pc, #80]	; (8001798 <main+0x18c>)
 8001748:	605a      	str	r2, [r3, #4]
  robot.stepper2 = &stepper2;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <main+0x1cc>)
 800174c:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <main+0x198>)
 800174e:	609a      	str	r2, [r3, #8]
  robot.mpu = &mpu;
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <main+0x1cc>)
 8001752:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001756:	6013      	str	r3, [r2, #0]
  robot.angle_pid = &angle_pid;
 8001758:	4a1f      	ldr	r2, [pc, #124]	; (80017d8 <main+0x1cc>)
 800175a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800175e:	6213      	str	r3, [r2, #32]
  robot.pos_pid = &pos_pid;
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <main+0x1cc>)
 8001762:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001766:	6253      	str	r3, [r2, #36]	; 0x24


  start_uart_interface(&uart_interface);
 8001768:	4814      	ldr	r0, [pc, #80]	; (80017bc <main+0x1b0>)
 800176a:	f001 f958 	bl	8002a1e <start_uart_interface>


  while (1){
//	  mpu_calc_x_angle(&mpu);
//
	  if(uart_interface.command_received_flag){
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <main+0x1b0>)
 8001770:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f9      	beq.n	800176e <main+0x162>
		  int8_t result = execute_received_command(&uart_interface);
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <main+0x1b0>)
 800177c:	f001 fa02 	bl	8002b84 <execute_received_command>
 8001780:	4603      	mov	r3, r0
 8001782:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

		  start_uart_interface(&uart_interface);
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <main+0x1b0>)
 8001788:	f001 f949 	bl	8002a1e <start_uart_interface>
	  if(uart_interface.command_received_flag){
 800178c:	e7ef      	b.n	800176e <main+0x162>
 800178e:	bf00      	nop
 8001790:	40010800 	.word	0x40010800
 8001794:	200005f0 	.word	0x200005f0
 8001798:	2000056c 	.word	0x2000056c
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	20000638 	.word	0x20000638
 80017a4:	20000598 	.word	0x20000598
 80017a8:	200001f0 	.word	0x200001f0
 80017ac:	0800bb58 	.word	0x0800bb58
 80017b0:	0800bb7c 	.word	0x0800bb7c
 80017b4:	20000710 	.word	0x20000710
 80017b8:	200006c8 	.word	0x200006c8
 80017bc:	200002dc 	.word	0x200002dc
 80017c0:	44960000 	.word	0x44960000
 80017c4:	40c00000 	.word	0x40c00000
 80017c8:	43f00000 	.word	0x43f00000
 80017cc:	3be56042 	.word	0x3be56042
 80017d0:	35c9539c 	.word	0x35c9539c
 80017d4:	3b51b717 	.word	0x3b51b717
 80017d8:	200005c4 	.word	0x200005c4

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0318 	add.w	r3, r7, #24
 80017e6:	2228      	movs	r2, #40	; 0x28
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f007 fcba 	bl	8009164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017fe:	2301      	movs	r3, #1
 8001800:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001806:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800181a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 0318 	add.w	r3, r7, #24
 8001824:	4618      	mov	r0, r3
 8001826:	f003 fb9f 	bl	8004f68 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001830:	f000 f81a 	bl	8001868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	230f      	movs	r3, #15
 8001836:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001838:	2302      	movs	r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2102      	movs	r1, #2
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fe0c 	bl	800546c <HAL_RCC_ClockConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800185a:	f000 f805 	bl	8001868 <Error_Handler>
  }
}
 800185e:	bf00      	nop
 8001860:	3740      	adds	r7, #64	; 0x40
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  stepper_set_speed(&stepper1, 0);
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <Error_Handler+0x30>)
 8001872:	f000 fc05 	bl	8002080 <stepper_set_speed>
  stepper_set_speed(&stepper2, 0);
 8001876:	f04f 0100 	mov.w	r1, #0
 800187a:	4808      	ldr	r0, [pc, #32]	; (800189c <Error_Handler+0x34>)
 800187c:	f000 fc00 	bl	8002080 <stepper_set_speed>
  stepper_enable(&stepper1, 0);
 8001880:	2100      	movs	r1, #0
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <Error_Handler+0x30>)
 8001884:	f000 fbc5 	bl	8002012 <stepper_enable>
  stepper_enable(&stepper2, 0);
 8001888:	2100      	movs	r1, #0
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <Error_Handler+0x34>)
 800188c:	f000 fbc1 	bl	8002012 <stepper_enable>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001890:	b672      	cpsid	i
}
 8001892:	bf00      	nop

  __disable_irq();
  while (1)
 8001894:	e7fe      	b.n	8001894 <Error_Handler+0x2c>
 8001896:	bf00      	nop
 8001898:	2000056c 	.word	0x2000056c
 800189c:	20000598 	.word	0x20000598

080018a0 <mpu_write_reg>:




static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
 80018ac:	4613      	mov	r3, r2
 80018ae:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	791b      	ldrb	r3, [r3, #4]
 80018b8:	b299      	uxth	r1, r3
 80018ba:	78fb      	ldrb	r3, [r7, #3]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	f04f 33ff 	mov.w	r3, #4294967295
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2301      	movs	r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2301      	movs	r3, #1
 80018ce:	f002 fc29 	bl	8004124 <HAL_I2C_Mem_Write>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b088      	sub	sp, #32
 80018de:	af04      	add	r7, sp, #16
 80018e0:	6078      	str	r0, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	791b      	ldrb	r3, [r3, #4]
 80018ee:	b299      	uxth	r1, r3
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
 80018f8:	9302      	str	r3, [sp, #8]
 80018fa:	2301      	movs	r3, #1
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	f107 030f 	add.w	r3, r7, #15
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2301      	movs	r3, #1
 8001906:	f002 fd07 	bl	8004318 <HAL_I2C_Mem_Read>
	return tmp;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001920:	216b      	movs	r1, #107	; 0x6b
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffd9 	bl	80018da <mpu_read_reg>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001932:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	01db      	lsls	r3, r3, #7
 8001938:	b25a      	sxtb	r2, r3
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4313      	orrs	r3, r2
 8001940:	b25b      	sxtb	r3, r3
 8001942:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001944:	7bfb      	ldrb	r3, [r7, #15]
 8001946:	461a      	mov	r2, r3
 8001948:	216b      	movs	r1, #107	; 0x6b
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ffa8 	bl	80018a0 <mpu_write_reg>
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001964:	216b      	movs	r1, #107	; 0x6b
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ffb7 	bl	80018da <mpu_read_reg>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001976:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	b25b      	sxtb	r3, r3
 800197e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001982:	b25a      	sxtb	r2, r3
 8001984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001988:	4313      	orrs	r3, r2
 800198a:	b25b      	sxtb	r3, r3
 800198c:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	461a      	mov	r2, r3
 8001992:	216b      	movs	r1, #107	; 0x6b
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff83 	bl	80018a0 <mpu_write_reg>
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 80019b0:	211b      	movs	r1, #27
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ff91 	bl	80018da <mpu_read_reg>
 80019b8:	4603      	mov	r3, r0
 80019ba:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
 80019be:	f023 0318 	bic.w	r3, r3, #24
 80019c2:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	f003 0318 	and.w	r3, r3, #24
 80019ce:	b25a      	sxtb	r2, r3
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b25b      	sxtb	r3, r3
 80019d8:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	461a      	mov	r2, r3
 80019de:	211b      	movs	r1, #27
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff5d 	bl	80018a0 <mpu_write_reg>

	switch (range){
 80019e6:	78fb      	ldrb	r3, [r7, #3]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d81b      	bhi.n	8001a24 <set_gyro_scale+0x80>
 80019ec:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <set_gyro_scale+0x50>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a05 	.word	0x08001a05
 80019f8:	08001a0d 	.word	0x08001a0d
 80019fc:	08001a15 	.word	0x08001a15
 8001a00:	08001a1d 	.word	0x08001a1d
	case range_250:
		mpu->gyro_scale = 0.007633;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <set_gyro_scale+0x8c>)
 8001a08:	609a      	str	r2, [r3, #8]
		break;
 8001a0a:	e00c      	b.n	8001a26 <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <set_gyro_scale+0x90>)
 8001a10:	609a      	str	r2, [r3, #8]
		break;
 8001a12:	e008      	b.n	8001a26 <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a08      	ldr	r2, [pc, #32]	; (8001a38 <set_gyro_scale+0x94>)
 8001a18:	609a      	str	r2, [r3, #8]
		break;
 8001a1a:	e004      	b.n	8001a26 <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <set_gyro_scale+0x98>)
 8001a20:	609a      	str	r2, [r3, #8]
		break;
 8001a22:	e000      	b.n	8001a26 <set_gyro_scale+0x82>
	default:
		break;
 8001a24:	bf00      	nop
	}
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	3bfa1e3f 	.word	0x3bfa1e3f
 8001a34:	3c7a2270 	.word	0x3c7a2270
 8001a38:	3cf9bfdf 	.word	0x3cf9bfdf
 8001a3c:	3d79c0ec 	.word	0x3d79c0ec

08001a40 <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8001a4c:	211c      	movs	r1, #28
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff43 	bl	80018da <mpu_read_reg>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	f023 0318 	bic.w	r3, r3, #24
 8001a5e:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	b25b      	sxtb	r3, r3
 8001a66:	f003 0318 	and.w	r3, r3, #24
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b25b      	sxtb	r3, r3
 8001a74:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	211c      	movs	r1, #28
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff0f 	bl	80018a0 <mpu_write_reg>

	switch (range)
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d81b      	bhi.n	8001ac0 <set_accelerometer_scale+0x80>
 8001a88:	a201      	add	r2, pc, #4	; (adr r2, 8001a90 <set_accelerometer_scale+0x50>)
 8001a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8e:	bf00      	nop
 8001a90:	08001aa1 	.word	0x08001aa1
 8001a94:	08001aa9 	.word	0x08001aa9
 8001a98:	08001ab1 	.word	0x08001ab1
 8001a9c:	08001ab9 	.word	0x08001ab9
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <set_accelerometer_scale+0x8c>)
 8001aa4:	60da      	str	r2, [r3, #12]
		break;
 8001aa6:	e00c      	b.n	8001ac2 <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a09      	ldr	r2, [pc, #36]	; (8001ad0 <set_accelerometer_scale+0x90>)
 8001aac:	60da      	str	r2, [r3, #12]
		break;
 8001aae:	e008      	b.n	8001ac2 <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <set_accelerometer_scale+0x94>)
 8001ab4:	60da      	str	r2, [r3, #12]
		break;
 8001ab6:	e004      	b.n	8001ac2 <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <set_accelerometer_scale+0x98>)
 8001abc:	60da      	str	r2, [r3, #12]
		break;
 8001abe:	e000      	b.n	8001ac2 <set_accelerometer_scale+0x82>
	default:
		break;
 8001ac0:	bf00      	nop
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	387fda40 	.word	0x387fda40
 8001ad0:	38ffda40 	.word	0x38ffda40
 8001ad4:	397fda40 	.word	0x397fda40
 8001ad8:	39fff518 	.word	0x39fff518

08001adc <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 8001ae8:	211a      	movs	r1, #26
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fef5 	bl	80018da <mpu_read_reg>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	f023 0307 	bic.w	r3, r3, #7
 8001afa:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 8001afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	b25a      	sxtb	r2, r3
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	b25b      	sxtb	r3, r3
 8001b0e:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	461a      	mov	r2, r3
 8001b14:	211a      	movs	r1, #26
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fec2 	bl	80018a0 <mpu_write_reg>
}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8001b2c:	2175      	movs	r1, #117	; 0x75
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fed3 	bl	80018da <mpu_read_reg>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	2b68      	cmp	r3, #104	; 0x68
 8001b3c:	d101      	bne.n	8001b42 <mpu_who_am_i+0x1e>
		return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e000      	b.n	8001b44 <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
	}
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b098      	sub	sp, #96	; 0x60
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
	mpu.i2c_address = i2c_address;
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	753b      	strb	r3, [r7, #20]


	mpu_reset(&mpu, 1);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	2101      	movs	r1, #1
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fed3 	bl	8001914 <mpu_reset>

	HAL_Delay(1000);
 8001b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b72:	f001 fc23 	bl	80033bc <HAL_Delay>

	mpu_sleep_mode(&mpu, 0);
 8001b76:	f107 0310 	add.w	r3, r7, #16
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff feeb 	bl	8001958 <mpu_sleep_mode>

	set_gyro_scale(&mpu, range_250);
 8001b82:	f107 0310 	add.w	r3, r7, #16
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff0b 	bl	80019a4 <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff53 	bl	8001a40 <set_accelerometer_scale>

	mpu.gx_bias = 0;
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
	mpu.gy_bias = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
	mpu.gz_bias = 0;
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	; 0x28
	mpu.lst_update_x_angle = HAL_GetTick();
 8001bac:	f001 fbfc 	bl	80033a8 <HAL_GetTick>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	64fb      	str	r3, [r7, #76]	; 0x4c



	return mpu;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	2250      	movs	r2, #80	; 0x50
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f007 fb6e 	bl	80092a0 <memcpy>
}
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	3760      	adds	r7, #96	; 0x60
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <mpu_get_all_data>:



void mpu_get_all_data(mpu6050_typedef *mpu)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af04      	add	r7, sp, #16
 8001bd2:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY); // get all the data
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	791b      	ldrb	r3, [r3, #4]
 8001bdc:	b299      	uxth	r1, r3
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	230e      	movs	r3, #14
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	223b      	movs	r2, #59	; 0x3b
 8001bf2:	f002 fb91 	bl	8004318 <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 8001bf6:	7a3b      	ldrb	r3, [r7, #8]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	b21a      	sxth	r2, r3
 8001bfc:	7a7b      	ldrb	r3, [r7, #9]
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f873 	bl	8000cf0 <__aeabi_i2f>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f7ff f8c0 	bl	8000d98 <__aeabi_fmul>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 8001c20:	7abb      	ldrb	r3, [r7, #10]
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	b21a      	sxth	r2, r3
 8001c26:	7afb      	ldrb	r3, [r7, #11]
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	b21b      	sxth	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f85e 	bl	8000cf0 <__aeabi_i2f>
 8001c34:	4602      	mov	r2, r0
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f7ff f8ab 	bl	8000d98 <__aeabi_fmul>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 8001c4a:	7b3b      	ldrb	r3, [r7, #12]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	7b7b      	ldrb	r3, [r7, #13]
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f849 	bl	8000cf0 <__aeabi_i2f>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f7ff f896 	bl	8000d98 <__aeabi_fmul>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 8001c74:	7c3b      	ldrb	r3, [r7, #16]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21a      	sxth	r2, r3
 8001c7a:	7c7b      	ldrb	r3, [r7, #17]
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f834 	bl	8000cf0 <__aeabi_i2f>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4610      	mov	r0, r2
 8001c92:	f7ff f881 	bl	8000d98 <__aeabi_fmul>
 8001c96:	4603      	mov	r3, r0
 8001c98:	461a      	mov	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f7fe ff6f 	bl	8000b84 <__aeabi_fsub>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 8001cae:	7cbb      	ldrb	r3, [r7, #18]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	7cfb      	ldrb	r3, [r7, #19]
 8001cb6:	b21b      	sxth	r3, r3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f817 	bl	8000cf0 <__aeabi_i2f>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4610      	mov	r0, r2
 8001ccc:	f7ff f864 	bl	8000d98 <__aeabi_fmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4610      	mov	r0, r2
 8001cdc:	f7fe ff52 	bl	8000b84 <__aeabi_fsub>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 8001ce8:	7d3b      	ldrb	r3, [r7, #20]
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	7d7b      	ldrb	r3, [r7, #21]
 8001cf0:	b21b      	sxth	r3, r3
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fffa 	bl	8000cf0 <__aeabi_i2f>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7ff f847 	bl	8000d98 <__aeabi_fmul>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f7fe ff35 	bl	8000b84 <__aeabi_fsub>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <mpu_gyro_calibration>:

}


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3a:	485e      	ldr	r0, [pc, #376]	; (8001eb4 <mpu_gyro_calibration+0x188>)
 8001d3c:	f002 f896 	bl	8003e6c <HAL_GPIO_WritePin>
	uint8_t counter = 100;
 8001d40:	2364      	movs	r3, #100	; 0x64
 8001d42:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	e060      	b.n	8001e1e <mpu_gyro_calibration+0xf2>
	{
		mpu_get_all_data(mpu);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ff35 	bl	8001bcc <mpu_get_all_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d6a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f9ce 	bl	8001110 <__aeabi_fcmpgt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d117      	bne.n	8001daa <mpu_gyro_calibration+0x7e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d82:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f9c2 	bl	8001110 <__aeabi_fcmpgt>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10b      	bne.n	8001daa <mpu_gyro_calibration+0x7e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d9a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f9b6 	bl	8001110 <__aeabi_fcmpgt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01b      	beq.n	8001de2 <mpu_gyro_calibration+0xb6>
			i = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
			gx_sum = 0;
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
			gy_sum = 0;
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
			gz_sum = 0;
 8001dba:	f04f 0300 	mov.w	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc6:	483b      	ldr	r0, [pc, #236]	; (8001eb4 <mpu_gyro_calibration+0x188>)
 8001dc8:	f002 f850 	bl	8003e6c <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd0:	f001 faf4 	bl	80033bc <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dda:	4836      	ldr	r0, [pc, #216]	; (8001eb4 <mpu_gyro_calibration+0x188>)
 8001ddc:	f002 f846 	bl	8003e6c <HAL_GPIO_WritePin>
			continue;
 8001de0:	e01a      	b.n	8001e18 <mpu_gyro_calibration+0xec>
		}

		gx_sum += mpu->gx;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	4619      	mov	r1, r3
 8001de8:	69f8      	ldr	r0, [r7, #28]
 8001dea:	f7fe fecd 	bl	8000b88 <__addsf3>
 8001dee:	4603      	mov	r3, r0
 8001df0:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	69b8      	ldr	r0, [r7, #24]
 8001dfa:	f7fe fec5 	bl	8000b88 <__addsf3>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4619      	mov	r1, r3
 8001e08:	6978      	ldr	r0, [r7, #20]
 8001e0a:	f7fe febd 	bl	8000b88 <__addsf3>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	617b      	str	r3, [r7, #20]

		HAL_Delay(4);
 8001e12:	2004      	movs	r0, #4
 8001e14:	f001 fad2 	bl	80033bc <HAL_Delay>
	for(int i = 0; i < counter; i++)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	db9a      	blt.n	8001d5c <mpu_gyro_calibration+0x30>
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691c      	ldr	r4, [r3, #16]
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe ff5f 	bl	8000cf0 <__aeabi_i2f>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4619      	mov	r1, r3
 8001e36:	69f8      	ldr	r0, [r7, #28]
 8001e38:	f7ff f862 	bl	8000f00 <__aeabi_fdiv>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4620      	mov	r0, r4
 8001e42:	f7fe fea1 	bl	8000b88 <__addsf3>
 8001e46:	4603      	mov	r3, r0
 8001e48:	461a      	mov	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695c      	ldr	r4, [r3, #20]
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe ff4b 	bl	8000cf0 <__aeabi_i2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	69b8      	ldr	r0, [r7, #24]
 8001e60:	f7ff f84e 	bl	8000f00 <__aeabi_fdiv>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4619      	mov	r1, r3
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7fe fe8d 	bl	8000b88 <__addsf3>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699c      	ldr	r4, [r3, #24]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ff37 	bl	8000cf0 <__aeabi_i2f>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4619      	mov	r1, r3
 8001e86:	6978      	ldr	r0, [r7, #20]
 8001e88:	f7ff f83a 	bl	8000f00 <__aeabi_fdiv>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4620      	mov	r0, r4
 8001e92:	f7fe fe79 	bl	8000b88 <__addsf3>
 8001e96:	4603      	mov	r3, r0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <mpu_gyro_calibration+0x188>)
 8001ea6:	f001 ffe1 	bl	8003e6c <HAL_GPIO_WritePin>
}
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40011000 	.word	0x40011000

08001eb8 <pid_init>:
#include "pid_lib.h"




pid_typedef pid_init(float kp, float ki, float kd){
 8001eb8:	b4b0      	push	{r4, r5, r7}
 8001eba:	b08d      	sub	sp, #52	; 0x34
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
	pid_typedef pid = {kp, ki, kd, 0, 0, 0, 0, 1};
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	return pid;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	f107 0410 	add.w	r4, r7, #16
 8001ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001efc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	3734      	adds	r7, #52	; 0x34
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bcb0      	pop	{r4, r5, r7}
 8001f0c:	4770      	bx	lr

08001f0e <set_dir>:


extern volatile uint8_t spin_duration_ms;


static void set_dir(stepper_typedef *stepper, int8_t dir){
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	460b      	mov	r3, r1
 8001f18:	70fb      	strb	r3, [r7, #3]
	if(stepper->dir_polarity * dir == 1){
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d110      	bne.n	8001f52 <set_dir+0x44>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6918      	ldr	r0, [r3, #16]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8a9b      	ldrh	r3, [r3, #20]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f001 ff95 	bl	8003e6c <HAL_GPIO_WritePin>
		stepper->dir = stepper->dir_polarity;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f48:	b25a      	sxtb	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -stepper->dir_polarity;
	}
}
 8001f50:	e013      	b.n	8001f7a <set_dir+0x6c>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6918      	ldr	r0, [r3, #16]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8a9b      	ldrh	r3, [r3, #20]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	f001 ff84 	bl	8003e6c <HAL_GPIO_WritePin>
		stepper->dir = -stepper->dir_polarity;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001f6a:	b25b      	sxtb	r3, r3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	425b      	negs	r3, r3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	b25a      	sxtb	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <stepper_init>:


//dir pin polarity : 1 or -1
void stepper_init(stepper_typedef *stepper, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *EN_Port, uint16_t EN_Pin,
		GPIO_TypeDef *DIR_Port, uint16_t DIR_Pin, unsigned int max_speed, int8_t dir_polarity)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b084      	sub	sp, #16
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	60f8      	str	r0, [r7, #12]
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
	stepper->htim = htim;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	601a      	str	r2, [r3, #0]
	stepper->Channel = Channel;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	605a      	str	r2, [r3, #4]

	stepper->EN_Port = EN_Port;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	609a      	str	r2, [r3, #8]
	stepper->EN_Pin = EN_Pin;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8b3a      	ldrh	r2, [r7, #24]
 8001fa6:	819a      	strh	r2, [r3, #12]
	stepper->DIR_Port = DIR_Port;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	611a      	str	r2, [r3, #16]
	stepper->DIR_Pin = DIR_Pin;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8c3a      	ldrh	r2, [r7, #32]
 8001fb2:	829a      	strh	r2, [r3, #20]

	stepper->step_counter = 0;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
	stepper->on_off = 0;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
	stepper-> new_counter = 65000;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8001fc6:	621a      	str	r2, [r3, #32]

	stepper->dir_polarity = dir_polarity;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001fce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	stepper->max_speed = max_speed;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	82da      	strh	r2, [r3, #22]

	set_dir(stepper, 1);
 8001fda:	2101      	movs	r1, #1
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7ff ff96 	bl	8001f0e <set_dir>
	stepper_enable(stepper, 0);
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f814 	bl	8002012 <stepper_enable>
	stepper_set_speed(stepper, 0);
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f846 	bl	8002080 <stepper_set_speed>
	stepper->speed = 0;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24


	// start timer
	HAL_TIM_Base_Start_IT(htim);
 8001ffc:	68b8      	ldr	r0, [r7, #8]
 8001ffe:	f003 fc13 	bl	8005828 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	68b8      	ldr	r0, [r7, #8]
 8002006:	f003 fcb9 	bl	800597c <HAL_TIM_PWM_Start>
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <stepper_enable>:



void stepper_enable(stepper_typedef *stepper, bool en)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	70fb      	strb	r3, [r7, #3]
	if(en){
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <stepper_enable+0x2e>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6898      	ldr	r0, [r3, #8]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	899b      	ldrh	r3, [r3, #12]
 800202c:	b29b      	uxth	r3, r3
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	f001 ff1b 	bl	8003e6c <HAL_GPIO_WritePin>
		stepper->enable = 1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		stepper_set_speed(stepper, 0);
		stepper->enable = 0;
		stepper->on_off = 0;
		stepper->speed = 0;
	}
}
 800203e:	e018      	b.n	8002072 <stepper_enable+0x60>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6898      	ldr	r0, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	899b      	ldrh	r3, [r3, #12]
 8002048:	b29b      	uxth	r3, r3
 800204a:	2201      	movs	r2, #1
 800204c:	4619      	mov	r1, r3
 800204e:	f001 ff0d 	bl	8003e6c <HAL_GPIO_WritePin>
		stepper_set_speed(stepper, 0);
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f812 	bl	8002080 <stepper_set_speed>
		stepper->enable = 0;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		stepper->on_off = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	771a      	strb	r2, [r3, #28]
		stepper->speed = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	0000      	movs	r0, r0
 800207c:	0000      	movs	r0, r0
	...

08002080 <stepper_set_speed>:



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
	saturation(-100, 100, &speed);
 800208a:	463b      	mov	r3, r7
 800208c:	461a      	mov	r2, r3
 800208e:	497e      	ldr	r1, [pc, #504]	; (8002288 <stepper_set_speed+0x208>)
 8002090:	487e      	ldr	r0, [pc, #504]	; (800228c <stepper_set_speed+0x20c>)
 8002092:	f7ff f967 	bl	8001364 <saturation>

	stepper->speed = speed;
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

	if(speed == 0){
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff f80c 	bl	80010c0 <__aeabi_fcmpeq>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d031      	beq.n	8002112 <stepper_set_speed+0x92>
		stepper->on_off = 0;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <stepper_set_speed+0x48>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	635a      	str	r2, [r3, #52]	; 0x34
 80020c6:	e018      	b.n	80020fa <stepper_set_speed+0x7a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d105      	bne.n	80020dc <stepper_set_speed+0x5c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	6393      	str	r3, [r2, #56]	; 0x38
 80020da:	e00e      	b.n	80020fa <stepper_set_speed+0x7a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d105      	bne.n	80020f0 <stepper_set_speed+0x70>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2300      	movs	r3, #0
 80020ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 80020ee:	e004      	b.n	80020fa <stepper_set_speed+0x7a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2300      	movs	r3, #0
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800210e:	60da      	str	r2, [r3, #12]
		if(speed > 0) set_dir(stepper, 1);
		else set_dir(stepper, -1);

	}

}
 8002110:	e0b2      	b.n	8002278 <stepper_set_speed+0x1f8>
		stepper->on_off = 1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	771a      	strb	r2, [r3, #28]
		speed = stepper->max_speed * (speed / 100.0);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	8adb      	ldrh	r3, [r3, #22]
 800211c:	b29b      	uxth	r3, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f97a 	bl	8000418 <__aeabi_i2d>
 8002124:	4604      	mov	r4, r0
 8002126:	460d      	mov	r5, r1
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe f986 	bl	800043c <__aeabi_f2d>
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	4b56      	ldr	r3, [pc, #344]	; (8002290 <stepper_set_speed+0x210>)
 8002136:	f7fe fb03 	bl	8000740 <__aeabi_ddiv>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe f9d3 	bl	80004ec <__aeabi_dmul>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fcc5 	bl	8000adc <__aeabi_d2f>
 8002152:	4603      	mov	r3, r0
 8002154:	603b      	str	r3, [r7, #0]
		if(speed > stepper->max_speed) speed = stepper->max_speed;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8adb      	ldrh	r3, [r3, #22]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fdc7 	bl	8000cf0 <__aeabi_i2f>
 8002162:	4602      	mov	r2, r0
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	4619      	mov	r1, r3
 8002168:	4610      	mov	r0, r2
 800216a:	f7fe ffb3 	bl	80010d4 <__aeabi_fcmplt>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <stepper_set_speed+0x104>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8adb      	ldrh	r3, [r3, #22]
 8002178:	b29b      	uxth	r3, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fdb4 	bl	8000ce8 <__aeabi_ui2f>
 8002180:	4603      	mov	r3, r0
 8002182:	603b      	str	r3, [r7, #0]
		if(speed < -stepper->max_speed) speed = -stepper->max_speed;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8adb      	ldrh	r3, [r3, #22]
 8002188:	b29b      	uxth	r3, r3
 800218a:	425b      	negs	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fdaf 	bl	8000cf0 <__aeabi_i2f>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4619      	mov	r1, r3
 8002198:	4610      	mov	r0, r2
 800219a:	f7fe ffb9 	bl	8001110 <__aeabi_fcmpgt>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <stepper_set_speed+0x136>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8adb      	ldrh	r3, [r3, #22]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	425b      	negs	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fd9f 	bl	8000cf0 <__aeabi_i2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	603b      	str	r3, [r7, #0]
		if(speed > 0 && speed < 16) speed = 16;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	f04f 0100 	mov.w	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe ffa7 	bl	8001110 <__aeabi_fcmpgt>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00b      	beq.n	80021e0 <stepper_set_speed+0x160>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe ff80 	bl	80010d4 <__aeabi_fcmplt>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <stepper_set_speed+0x160>
 80021da:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 80021de:	603b      	str	r3, [r7, #0]
		if(speed < 0 && speed >-16) speed = -16;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe ff74 	bl	80010d4 <__aeabi_fcmplt>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <stepper_set_speed+0x186>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	4927      	ldr	r1, [pc, #156]	; (8002294 <stepper_set_speed+0x214>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe ff8a 	bl	8001110 <__aeabi_fcmpgt>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <stepper_set_speed+0x186>
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <stepper_set_speed+0x214>)
 8002204:	603b      	str	r3, [r7, #0]
		uint16_t counter = (1.0/abs(speed)) * SEC2uSEC;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe ff8b 	bl	8001124 <__aeabi_f2iz>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	bfb8      	it	lt
 8002214:	425b      	neglt	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f8fe 	bl	8000418 <__aeabi_i2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	f04f 0000 	mov.w	r0, #0
 8002224:	491c      	ldr	r1, [pc, #112]	; (8002298 <stepper_set_speed+0x218>)
 8002226:	f7fe fa8b 	bl	8000740 <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	a313      	add	r3, pc, #76	; (adr r3, 8002280 <stepper_set_speed+0x200>)
 8002234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002238:	f7fe f958 	bl	80004ec <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f7fe fc2a 	bl	8000a9c <__aeabi_d2uiz>
 8002248:	4603      	mov	r3, r0
 800224a:	81fb      	strh	r3, [r7, #14]
		stepper->new_counter = counter;
 800224c:	89fa      	ldrh	r2, [r7, #14]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	621a      	str	r2, [r3, #32]
		if(speed > 0) set_dir(stepper, 1);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe ff59 	bl	8001110 <__aeabi_fcmpgt>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <stepper_set_speed+0x1ee>
 8002264:	2101      	movs	r1, #1
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fe51 	bl	8001f0e <set_dir>
}
 800226c:	e004      	b.n	8002278 <stepper_set_speed+0x1f8>
		else set_dir(stepper, -1);
 800226e:	f04f 31ff 	mov.w	r1, #4294967295
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fe4b 	bl	8001f0e <set_dir>
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bdb0      	pop	{r4, r5, r7, pc}
 8002280:	00000000 	.word	0x00000000
 8002284:	412e8480 	.word	0x412e8480
 8002288:	42c80000 	.word	0x42c80000
 800228c:	c2c80000 	.word	0xc2c80000
 8002290:	40590000 	.word	0x40590000
 8002294:	c1800000 	.word	0xc1800000
 8002298:	3ff00000 	.word	0x3ff00000

0800229c <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	if(stepper->on_off){
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7f1b      	ldrb	r3, [r3, #28]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <stepper_update+0x80>
		stepper->step_counter += stepper->dir;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80022b4:	b25a      	sxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	441a      	add	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	619a      	str	r2, [r3, #24]

		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <stepper_update+0x4e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2264      	movs	r2, #100	; 0x64
 80022e6:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80022e8:	e018      	b.n	800231c <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d105      	bne.n	80022fe <stepper_update+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	2364      	movs	r3, #100	; 0x64
 80022fa:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022fc:	e00e      	b.n	800231c <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b08      	cmp	r3, #8
 8002304:	d105      	bne.n	8002312 <stepper_update+0x76>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2364      	movs	r3, #100	; 0x64
 800230e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002310:	e004      	b.n	800231c <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr
	...

08002328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <HAL_MspInit+0x5c>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <HAL_MspInit+0x5c>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6193      	str	r3, [r2, #24]
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_MspInit+0x5c>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_MspInit+0x5c>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a0e      	ldr	r2, [pc, #56]	; (8002384 <HAL_MspInit+0x5c>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_MspInit+0x5c>)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	607b      	str	r3, [r7, #4]
 800235c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_MspInit+0x60>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_MspInit+0x60>)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	bf00      	nop
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	46bd      	mov	sp, r7
 80023be:	bc80      	pop	{r7}
 80023c0:	4770      	bx	lr

080023c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d2:	f000 ffd7 	bl	8003384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA1_Channel4_IRQHandler+0x10>)
 80023e2:	f001 fa8b 	bl	80038fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000754 	.word	0x20000754

080023f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <DMA1_Channel5_IRQHandler+0x10>)
 80023f6:	f001 fa81 	bl	80038fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000710 	.word	0x20000710

08002404 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <DMA1_Channel7_IRQHandler+0x10>)
 800240a:	f001 fa77 	bl	80038fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000298 	.word	0x20000298

08002418 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <TIM2_IRQHandler+0x10>)
 800241e:	f003 fb4f 	bl	8005ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200005f0 	.word	0x200005f0

0800242c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM3_IRQHandler+0x10>)
 8002432:	f003 fb45 	bl	8005ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000638 	.word	0x20000638

08002440 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <TIM4_IRQHandler+0x10>)
 8002446:	f003 fb3b 	bl	8005ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000680 	.word	0x20000680

08002454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <USART1_IRQHandler+0x10>)
 800245a:	f004 fa95 	bl	8006988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200006c8 	.word	0x200006c8

08002468 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return 1;
 800246c:	2301      	movs	r3, #1
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <_kill>:

int _kill(int pid, int sig)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002480:	f006 fed4 	bl	800922c <__errno>
 8002484:	4603      	mov	r3, r0
 8002486:	2216      	movs	r2, #22
 8002488:	601a      	str	r2, [r3, #0]
  return -1;
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_exit>:

void _exit (int status)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b082      	sub	sp, #8
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800249e:	f04f 31ff 	mov.w	r1, #4294967295
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffe7 	bl	8002476 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024a8:	e7fe      	b.n	80024a8 <_exit+0x12>

080024aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e00a      	b.n	80024d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024bc:	f3af 8000 	nop.w
 80024c0:	4601      	mov	r1, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	60ba      	str	r2, [r7, #8]
 80024c8:	b2ca      	uxtb	r2, r1
 80024ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	3301      	adds	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dbf0      	blt.n	80024bc <_read+0x12>
  }

  return len;
 80024da:	687b      	ldr	r3, [r7, #4]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e009      	b.n	800250a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	60ba      	str	r2, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f846 	bl	8001590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3301      	adds	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	429a      	cmp	r2, r3
 8002510:	dbf1      	blt.n	80024f6 <_write+0x12>
  }
  return len;
 8002512:	687b      	ldr	r3, [r7, #4]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_close>:

int _close(int file)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002528:	4618      	mov	r0, r3
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002542:	605a      	str	r2, [r3, #4]
  return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	bc80      	pop	{r7}
 800254e:	4770      	bx	lr

08002550 <_isatty>:

int _isatty(int file)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002558:	2301      	movs	r3, #1
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr

0800257c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002584:	4a14      	ldr	r2, [pc, #80]	; (80025d8 <_sbrk+0x5c>)
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <_sbrk+0x60>)
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <_sbrk+0x64>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <_sbrk+0x64>)
 800259a:	4a12      	ldr	r2, [pc, #72]	; (80025e4 <_sbrk+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d207      	bcs.n	80025bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025ac:	f006 fe3e 	bl	800922c <__errno>
 80025b0:	4603      	mov	r3, r0
 80025b2:	220c      	movs	r2, #12
 80025b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	e009      	b.n	80025d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <_sbrk+0x64>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <_sbrk+0x64>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4413      	add	r3, r2
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <_sbrk+0x64>)
 80025cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ce:	68fb      	ldr	r3, [r7, #12]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20005000 	.word	0x20005000
 80025dc:	00000400 	.word	0x00000400
 80025e0:	200005ec 	.word	0x200005ec
 80025e4:	200008e8 	.word	0x200008e8

080025e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	; 0x38
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
 8002620:	615a      	str	r2, [r3, #20]
 8002622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <MX_TIM2_Init+0xe8>)
 8002626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800262a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <MX_TIM2_Init+0xe8>)
 800262e:	2247      	movs	r2, #71	; 0x47
 8002630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <MX_TIM2_Init+0xe8>)
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <MX_TIM2_Init+0xe8>)
 800263a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800263e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002640:	4b26      	ldr	r3, [pc, #152]	; (80026dc <MX_TIM2_Init+0xe8>)
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002646:	4b25      	ldr	r3, [pc, #148]	; (80026dc <MX_TIM2_Init+0xe8>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800264c:	4823      	ldr	r0, [pc, #140]	; (80026dc <MX_TIM2_Init+0xe8>)
 800264e:	f003 f89b 	bl	8005788 <HAL_TIM_Base_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002658:	f7ff f906 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002666:	4619      	mov	r1, r3
 8002668:	481c      	ldr	r0, [pc, #112]	; (80026dc <MX_TIM2_Init+0xe8>)
 800266a:	f003 fbdb 	bl	8005e24 <HAL_TIM_ConfigClockSource>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002674:	f7ff f8f8 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002678:	4818      	ldr	r0, [pc, #96]	; (80026dc <MX_TIM2_Init+0xe8>)
 800267a:	f003 f927 	bl	80058cc <HAL_TIM_PWM_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002684:	f7ff f8f0 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002690:	f107 0320 	add.w	r3, r7, #32
 8002694:	4619      	mov	r1, r3
 8002696:	4811      	ldr	r0, [pc, #68]	; (80026dc <MX_TIM2_Init+0xe8>)
 8002698:	f003 ff60 	bl	800655c <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80026a2:	f7ff f8e1 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026a6:	2360      	movs	r3, #96	; 0x60
 80026a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	2200      	movs	r2, #0
 80026ba:	4619      	mov	r1, r3
 80026bc:	4807      	ldr	r0, [pc, #28]	; (80026dc <MX_TIM2_Init+0xe8>)
 80026be:	f003 faef 	bl	8005ca0 <HAL_TIM_PWM_ConfigChannel>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80026c8:	f7ff f8ce 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026cc:	4803      	ldr	r0, [pc, #12]	; (80026dc <MX_TIM2_Init+0xe8>)
 80026ce:	f000 f927 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80026d2:	bf00      	nop
 80026d4:	3738      	adds	r7, #56	; 0x38
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200005f0 	.word	0x200005f0

080026e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08e      	sub	sp, #56	; 0x38
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	f107 0320 	add.w	r3, r7, #32
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
 800270c:	615a      	str	r2, [r3, #20]
 800270e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002712:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <MX_TIM3_Init+0xe8>)
 8002714:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002716:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002718:	2247      	movs	r2, #71	; 0x47
 800271a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <MX_TIM3_Init+0xe4>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002722:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002724:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002728:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <MX_TIM3_Init+0xe4>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002736:	4823      	ldr	r0, [pc, #140]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002738:	f003 f826 	bl	8005788 <HAL_TIM_Base_Init>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002742:	f7ff f891 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800274c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002750:	4619      	mov	r1, r3
 8002752:	481c      	ldr	r0, [pc, #112]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002754:	f003 fb66 	bl	8005e24 <HAL_TIM_ConfigClockSource>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800275e:	f7ff f883 	bl	8001868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002762:	4818      	ldr	r0, [pc, #96]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002764:	f003 f8b2 	bl	80058cc <HAL_TIM_PWM_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800276e:	f7ff f87b 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277a:	f107 0320 	add.w	r3, r7, #32
 800277e:	4619      	mov	r1, r3
 8002780:	4810      	ldr	r0, [pc, #64]	; (80027c4 <MX_TIM3_Init+0xe4>)
 8002782:	f003 feeb 	bl	800655c <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800278c:	f7ff f86c 	bl	8001868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002790:	2360      	movs	r3, #96	; 0x60
 8002792:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002798:	2300      	movs	r3, #0
 800279a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2200      	movs	r2, #0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4807      	ldr	r0, [pc, #28]	; (80027c4 <MX_TIM3_Init+0xe4>)
 80027a8:	f003 fa7a 	bl	8005ca0 <HAL_TIM_PWM_ConfigChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80027b2:	f7ff f859 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <MX_TIM3_Init+0xe4>)
 80027b8:	f000 f8b2 	bl	8002920 <HAL_TIM_MspPostInit>

}
 80027bc:	bf00      	nop
 80027be:	3738      	adds	r7, #56	; 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000638 	.word	0x20000638
 80027c8:	40000400 	.word	0x40000400

080027cc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027d2:	f107 0308 	add.w	r3, r7, #8
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	605a      	str	r2, [r3, #4]
 80027dc:	609a      	str	r2, [r3, #8]
 80027de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e0:	463b      	mov	r3, r7
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <MX_TIM4_Init+0x94>)
 80027ea:	4a1e      	ldr	r2, [pc, #120]	; (8002864 <MX_TIM4_Init+0x98>)
 80027ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM4_Init+0x94>)
 80027f0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80027f4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f6:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM4_Init+0x94>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 39;
 80027fc:	4b18      	ldr	r3, [pc, #96]	; (8002860 <MX_TIM4_Init+0x94>)
 80027fe:	2227      	movs	r2, #39	; 0x27
 8002800:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b17      	ldr	r3, [pc, #92]	; (8002860 <MX_TIM4_Init+0x94>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	4b15      	ldr	r3, [pc, #84]	; (8002860 <MX_TIM4_Init+0x94>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800280e:	4814      	ldr	r0, [pc, #80]	; (8002860 <MX_TIM4_Init+0x94>)
 8002810:	f002 ffba 	bl	8005788 <HAL_TIM_Base_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800281a:	f7ff f825 	bl	8001868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	4619      	mov	r1, r3
 800282a:	480d      	ldr	r0, [pc, #52]	; (8002860 <MX_TIM4_Init+0x94>)
 800282c:	f003 fafa 	bl	8005e24 <HAL_TIM_ConfigClockSource>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002836:	f7ff f817 	bl	8001868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002842:	463b      	mov	r3, r7
 8002844:	4619      	mov	r1, r3
 8002846:	4806      	ldr	r0, [pc, #24]	; (8002860 <MX_TIM4_Init+0x94>)
 8002848:	f003 fe88 	bl	800655c <HAL_TIMEx_MasterConfigSynchronization>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002852:	f7ff f809 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000680 	.word	0x20000680
 8002864:	40000800 	.word	0x40000800

08002868 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d114      	bne.n	80028a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287a:	4b26      	ldr	r3, [pc, #152]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	61d3      	str	r3, [r2, #28]
 8002886:	4b23      	ldr	r3, [pc, #140]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	201c      	movs	r0, #28
 8002898:	f000 fe8b 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800289c:	201c      	movs	r0, #28
 800289e:	f000 fea4 	bl	80035ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028a2:	e032      	b.n	800290a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <HAL_TIM_Base_MspInit+0xb0>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d114      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a18      	ldr	r2, [pc, #96]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	61d3      	str	r3, [r2, #28]
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	201d      	movs	r0, #29
 80028cc:	f000 fe71 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028d0:	201d      	movs	r0, #29
 80028d2:	f000 fe8a 	bl	80035ea <HAL_NVIC_EnableIRQ>
}
 80028d6:	e018      	b.n	800290a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_TIM_Base_MspInit+0xb4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d113      	bne.n	800290a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	61d3      	str	r3, [r2, #28]
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_TIM_Base_MspInit+0xac>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	201e      	movs	r0, #30
 8002900:	f000 fe57 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002904:	201e      	movs	r0, #30
 8002906:	f000 fe70 	bl	80035ea <HAL_NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40000400 	.word	0x40000400
 800291c:	40000800 	.word	0x40000800

08002920 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293e:	d118      	bne.n	8002972 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_TIM_MspPostInit+0x94>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_TIM_MspPostInit+0x94>)
 8002946:	f043 0304 	orr.w	r3, r3, #4
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_TIM_MspPostInit+0x94>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 8002958:	2301      	movs	r3, #1
 800295a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2302      	movs	r3, #2
 8002962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8002964:	f107 0310 	add.w	r3, r7, #16
 8002968:	4619      	mov	r1, r3
 800296a:	4813      	ldr	r0, [pc, #76]	; (80029b8 <HAL_TIM_MspPostInit+0x98>)
 800296c:	f001 f8fa 	bl	8003b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002970:	e01c      	b.n	80029ac <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a11      	ldr	r2, [pc, #68]	; (80029bc <HAL_TIM_MspPostInit+0x9c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d117      	bne.n	80029ac <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_TIM_MspPostInit+0x94>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	4a0c      	ldr	r2, [pc, #48]	; (80029b4 <HAL_TIM_MspPostInit+0x94>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6193      	str	r3, [r2, #24]
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_TIM_MspPostInit+0x94>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8002994:	2340      	movs	r3, #64	; 0x40
 8002996:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299c:	2302      	movs	r3, #2
 800299e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	4619      	mov	r1, r3
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <HAL_TIM_MspPostInit+0x98>)
 80029a8:	f001 f8dc 	bl	8003b64 <HAL_GPIO_Init>
}
 80029ac:	bf00      	nop
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010800 	.word	0x40010800
 80029bc:	40000400 	.word	0x40000400

080029c0 <uart_interface_init>:
extern uart_interface_typedef uart_interface;



void uart_interface_init(uart_interface_typedef* uart_int, UART_HandleTypeDef *huart, DMA_HandleTypeDef* hdma_usart_rx,
		user_function_typedef* functions_array, uint8_t num_functions){
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	603b      	str	r3, [r7, #0]

	__HAL_DMA_DISABLE_IT(hdma_usart_rx, DMA_IT_HT); //disable half transfer DMA interrupt
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0204 	bic.w	r2, r2, #4
 80029dc:	601a      	str	r2, [r3, #0]

	uart_int->huart = huart;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	601a      	str	r2, [r3, #0]
	uart_int->received_command_size = 0;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
	uart_int->command_received_flag = 0;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
	uart_int->functions_array = functions_array;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	uart_int->num_functions = num_functions;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	7e3a      	ldrb	r2, [r7, #24]
 8002a00:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
	uart_int->uart_tx_ready = 1;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
	uart_int->queue_empty = 1;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e


}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <start_uart_interface>:


void start_uart_interface(uart_interface_typedef* uart_int){
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_int->huart, uart_int->receive_buffer, BUFFER_SIZE_RX);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	4619      	mov	r1, r3
 8002a32:	f003 ff4f 	bl	80068d4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <uart_send>:


void uart_send(uart_interface_typedef* uart_int, uint8_t* buffer, uint16_t size, bool add_to_queue){
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	4611      	mov	r1, r2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	80fb      	strh	r3, [r7, #6]
 8002a50:	4613      	mov	r3, r2
 8002a52:	717b      	strb	r3, [r7, #5]
	if(size < BUFFER_SIZE_TX){
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d833      	bhi.n	8002ac2 <uart_send+0x84>
		if(uart_int->uart_tx_ready){
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3187 	ldrb.w	r3, [r3, #391]	; 0x187
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d013      	beq.n	8002a8e <uart_send+0x50>
			uart_int->uart_tx_ready = 0;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
			memcpy(uart_int->transmit_buffer, buffer, size);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3384      	adds	r3, #132	; 0x84
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f006 fc12 	bl	80092a0 <memcpy>
			HAL_UART_Transmit_DMA(uart_int->huart, uart_int->transmit_buffer, size);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3384      	adds	r3, #132	; 0x84
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	4619      	mov	r1, r3
 8002a88:	f003 feb4 	bl	80067f4 <HAL_UART_Transmit_DMA>
			memcpy(uart_int->queue, buffer, size);
			uart_int->queue_data_size = size;
			uart_int->queue_empty = 0;
		}
	}
}
 8002a8c:	e019      	b.n	8002ac2 <uart_send+0x84>
		else if(add_to_queue && uart_int->queue_empty){
 8002a8e:	797b      	ldrb	r3, [r7, #5]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d016      	beq.n	8002ac2 <uart_send+0x84>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d010      	beq.n	8002ac2 <uart_send+0x84>
			memcpy(uart_int->queue, buffer, size);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f203 138d 	addw	r3, r3, #397	; 0x18d
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f006 fbf8 	bl	80092a0 <memcpy>
			uart_int->queue_data_size = size;
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	b2da      	uxtb	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			uart_int->queue_empty = 0;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_UARTEx_RxEventCallback>:

/*
 * command received interrupt
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == uart_interface.huart->Instance)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x34>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d107      	bne.n	8002af6 <HAL_UARTEx_RxEventCallback+0x2a>
    {
    	uart_interface.command_received_flag = 1;
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x34>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
    	uart_interface.received_command_size = Size;
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_UARTEx_RxEventCallback+0x34>)
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	f8a2 3184 	strh.w	r3, [r2, #388]	; 0x184

    }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	200002dc 	.word	0x200002dc

08002b04 <HAL_UART_TxCpltCallback>:

/*
 * transnmit completed, if there is element in queue buffer send it, otherwise set uart transmit to ready
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_interface.huart->Instance){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d129      	bne.n	8002b6e <HAL_UART_TxCpltCallback+0x6a>
		if(uart_interface.queue_empty == 0){
 8002b1a:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b1c:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01c      	beq.n	8002b66 <HAL_UART_TxCpltCallback+0x62>
			memcpy(uart_interface.transmit_buffer, uart_interface.queue, uart_interface.queue_data_size);
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b2e:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	4911      	ldr	r1, [pc, #68]	; (8002b7c <HAL_UART_TxCpltCallback+0x78>)
 8002b38:	4811      	ldr	r0, [pc, #68]	; (8002b80 <HAL_UART_TxCpltCallback+0x7c>)
 8002b3a:	f006 fbb1 	bl	80092a0 <memcpy>
			HAL_UART_Transmit_DMA(uart_interface.huart, uart_interface.transmit_buffer, uart_interface.queue_data_size);
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a0d      	ldr	r2, [pc, #52]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b44:	f892 228d 	ldrb.w	r2, [r2, #653]	; 0x28d
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	b292      	uxth	r2, r2
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <HAL_UART_TxCpltCallback+0x7c>)
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 fe50 	bl	80067f4 <HAL_UART_Transmit_DMA>
			uart_interface.queue_empty = 1;
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
			uart_interface.uart_tx_ready = 0;
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
		}
		else{
			uart_interface.uart_tx_ready = 1;
		}
	}
}
 8002b64:	e003      	b.n	8002b6e <HAL_UART_TxCpltCallback+0x6a>
			uart_interface.uart_tx_ready = 1;
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <HAL_UART_TxCpltCallback+0x74>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200002dc 	.word	0x200002dc
 8002b7c:	20000469 	.word	0x20000469
 8002b80:	20000360 	.word	0x20000360

08002b84 <execute_received_command>:


int8_t execute_received_command(uart_interface_typedef* uart_int){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b0a4      	sub	sp, #144	; 0x90
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
	if(!uart_int->command_received_flag) return 0;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3186 	ldrb.w	r3, [r3, #390]	; 0x186
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f083 0301 	eor.w	r3, r3, #1
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <execute_received_command+0x1e>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e12c      	b.n	8002dfc <execute_received_command+0x278>

	uart_int->command_received_flag = 0;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
	char function_code[FUNCTION_CODE_MAX_LENGTH];
	char args[MAX_NUM_ARGS][ARG_MAX_LENGTH];


	// parse function code
	uint8_t idx = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bb6:	e031      	b.n	8002c1c <execute_received_command+0x98>
		idx ++;
 8002bb8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		char elem = uart_int->receive_buffer[i];
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		if(elem == '\0' || elem == '\r' || elem == '\n' || elem == '('){
 8002bd2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <execute_received_command+0x6e>
 8002bda:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002bde:	2b0d      	cmp	r3, #13
 8002be0:	d007      	beq.n	8002bf2 <execute_received_command+0x6e>
 8002be2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002be6:	2b0a      	cmp	r3, #10
 8002be8:	d003      	beq.n	8002bf2 <execute_received_command+0x6e>
 8002bea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002bee:	2b28      	cmp	r3, #40	; 0x28
 8002bf0:	d107      	bne.n	8002c02 <execute_received_command+0x7e>
			function_code[i] = '\0';
 8002bf2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bfa:	4413      	add	r3, r2
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
			break;
 8002c00:	e018      	b.n	8002c34 <execute_received_command+0xb0>
		}
		else function_code[i] = elem;
 8002c02:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002c10:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8002c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c16:	3301      	adds	r3, #1
 8002c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 8002c22:	461a      	mov	r2, r3
 8002c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	dbc5      	blt.n	8002bb8 <execute_received_command+0x34>
 8002c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	ddc1      	ble.n	8002bb8 <execute_received_command+0x34>
	}


	//parse arguments
	bool no_args = 1;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t arg_len = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	uint8_t arg_counter = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	for(int i = idx; i < uart_int->received_command_size; i++)
 8002c46:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c4e:	e071      	b.n	8002d34 <execute_received_command+0x1b0>
	{
		if(arg_counter >= MAX_NUM_ARGS || arg_len >= ARG_MAX_LENGTH) return -1; //error, to many argumenst/to long argument
 8002c50:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8002c54:	2b07      	cmp	r3, #7
 8002c56:	d803      	bhi.n	8002c60 <execute_received_command+0xdc>
 8002c58:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002c5c:	2b0b      	cmp	r3, #11
 8002c5e:	d902      	bls.n	8002c66 <execute_received_command+0xe2>
 8002c60:	f04f 33ff 	mov.w	r3, #4294967295
 8002c64:	e0ca      	b.n	8002dfc <execute_received_command+0x278>

		char elem = uart_int->receive_buffer[i];
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		if(elem == '\0' || elem == '\r' || elem == '\n') return -1; //error, commands ends with ')'
 8002c76:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <execute_received_command+0x10a>
 8002c7e:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002c82:	2b0d      	cmp	r3, #13
 8002c84:	d003      	beq.n	8002c8e <execute_received_command+0x10a>
 8002c86:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002c8a:	2b0a      	cmp	r3, #10
 8002c8c:	d102      	bne.n	8002c94 <execute_received_command+0x110>
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	e0b3      	b.n	8002dfc <execute_received_command+0x278>

		else if(elem == ')'){
 8002c94:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002c98:	2b29      	cmp	r3, #41	; 0x29
 8002c9a:	d10e      	bne.n	8002cba <execute_received_command+0x136>
			args[arg_counter][arg_len] = '\0';
 8002c9c:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8002ca0:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	3390      	adds	r3, #144	; 0x90
 8002cae:	443b      	add	r3, r7
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3b88      	subs	r3, #136	; 0x88
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
			break;
 8002cb8:	e044      	b.n	8002d44 <execute_received_command+0x1c0>
		}
		else if(elem == ','){
 8002cba:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002cbe:	2b2c      	cmp	r3, #44	; 0x2c
 8002cc0:	d116      	bne.n	8002cf0 <execute_received_command+0x16c>
			args[arg_counter][arg_len] = '\0';
 8002cc2:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8002cc6:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	3390      	adds	r3, #144	; 0x90
 8002cd4:	443b      	add	r3, r7
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3b88      	subs	r3, #136	; 0x88
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
			arg_counter++;
 8002cde:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			arg_len = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8002cee:	e01c      	b.n	8002d2a <execute_received_command+0x1a6>
		}
		else if(elem == ' '){
 8002cf0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d017      	beq.n	8002d28 <execute_received_command+0x1a4>
			continue;
		}
		else{
			no_args = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			args[arg_counter][arg_len] = elem;
 8002cfe:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8002d02:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	3390      	adds	r3, #144	; 0x90
 8002d10:	443b      	add	r3, r7
 8002d12:	440b      	add	r3, r1
 8002d14:	3b88      	subs	r3, #136	; 0x88
 8002d16:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 8002d1a:	701a      	strb	r2, [r3, #0]
			arg_len ++;
 8002d1c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8002d20:	3301      	adds	r3, #1
 8002d22:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8002d26:	e000      	b.n	8002d2a <execute_received_command+0x1a6>
			continue;
 8002d28:	bf00      	nop
	for(int i = idx; i < uart_int->received_command_size; i++)
 8002d2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d40:	4293      	cmp	r3, r2
 8002d42:	db85      	blt.n	8002c50 <execute_received_command+0xcc>
		}
	}
	if(!no_args) arg_counter++;
 8002d44:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002d48:	f083 0301 	eor.w	r3, r3, #1
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <execute_received_command+0x1d8>
 8002d52:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8002d56:	3301      	adds	r3, #1
 8002d58:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

	if(strcmp(function_code, "help") == 0){
 8002d5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d60:	4928      	ldr	r1, [pc, #160]	; (8002e04 <execute_received_command+0x280>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd f9f4 	bl	8000150 <strcmp>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <execute_received_command+0x1f4>
		help(uart_int);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f84a 	bl	8002e08 <help>
		return 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e041      	b.n	8002dfc <execute_received_command+0x278>
	}



	//run received function
	for(int i = 0; i < uart_int->num_functions; i++){
 8002d78:	2300      	movs	r3, #0
 8002d7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d7c:	e033      	b.n	8002de6 <execute_received_command+0x262>
		if(strcmp(function_code, uart_int->functions_array[i].function_code) == 0){
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8002d84:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	1d1a      	adds	r2, r3, #4
 8002d92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd f9d9 	bl	8000150 <strcmp>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11d      	bne.n	8002de0 <execute_received_command+0x25c>
			if(uart_int->functions_array[i].num_args == arg_counter){
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8002daa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002dac:	4613      	mov	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	440b      	add	r3, r1
 8002db6:	7d1b      	ldrb	r3, [r3, #20]
 8002db8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d11a      	bne.n	8002df6 <execute_received_command+0x272>
				(*uart_int->functions_array[i].function_pointer)(args);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8002dc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	440b      	add	r3, r1
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f107 0208 	add.w	r2, r7, #8
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4798      	blx	r3
				return 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e00d      	b.n	8002dfc <execute_received_command+0x278>
	for(int i = 0; i < uart_int->num_functions; i++){
 8002de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002de2:	3301      	adds	r3, #1
 8002de4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8002dec:	461a      	mov	r2, r3
 8002dee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002df0:	4293      	cmp	r3, r2
 8002df2:	dbc4      	blt.n	8002d7e <execute_received_command+0x1fa>
 8002df4:	e000      	b.n	8002df8 <execute_received_command+0x274>
			}
			break;
 8002df6:	bf00      	nop
		}
	}
	return -1;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3790      	adds	r7, #144	; 0x90
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	0800bbdc 	.word	0x0800bbdc

08002e08 <help>:

/*
 * send "help()" command to stm, stm will transmit avaible commands and number of arguments for each command
 */

void help(uart_interface_typedef* uart_int){
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b0c8      	sub	sp, #288	; 0x120
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e16:	6018      	str	r0, [r3, #0]
	uint8_t offset = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t buffer[BUFFER_SIZE_TX];
	for (int i = 0; i < uart_int->num_functions; i++) {
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002e24:	e041      	b.n	8002eaa <help+0xa2>
		int16_t written = snprintf((char*)(buffer + offset), BUFFER_SIZE_TX - offset,
 8002e26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e2a:	f107 020c 	add.w	r2, r7, #12
 8002e2e:	18d0      	adds	r0, r2, r3
 8002e30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e34:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002e38:	461d      	mov	r5, r3
							   "%s : %d args\n",
							   uart_int->functions_array[i].function_code,
 8002e3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8002e48:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	1d1c      	adds	r4, r3, #4
							   uart_int->functions_array[i].num_args);
 8002e58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002e5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8002e66:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	4413      	add	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	440b      	add	r3, r1
 8002e74:	7d1b      	ldrb	r3, [r3, #20]
		int16_t written = snprintf((char*)(buffer + offset), BUFFER_SIZE_TX - offset,
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	4623      	mov	r3, r4
 8002e7a:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <help+0xe4>)
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	f006 f865 	bl	8008f4c <sniprintf>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		if (written < 0 || offset >= BUFFER_SIZE_TX){
 8002e88:	f9b7 310e 	ldrsh.w	r3, [r7, #270]	; 0x10e
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db19      	blt.n	8002ec4 <help+0xbc>
			break;
		}

		offset += written;
 8002e90:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	for (int i = 0; i < uart_int->num_functions; i++) {
 8002ea0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002eaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002eae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	dbb1      	blt.n	8002e26 <help+0x1e>
 8002ec2:	e000      	b.n	8002ec6 <help+0xbe>
			break;
 8002ec4:	bf00      	nop
	}
	uart_send(uart_int, buffer, offset, 1);
 8002ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	f107 010c 	add.w	r1, r7, #12
 8002ed0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002ed4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8002ed8:	2301      	movs	r3, #1
 8002eda:	6800      	ldr	r0, [r0, #0]
 8002edc:	f7ff fdaf 	bl	8002a3e <uart_send>
}
 8002ee0:	bf00      	nop
 8002ee2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eea:	bf00      	nop
 8002eec:	0800bbe4 	.word	0x0800bbe4

08002ef0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ef4:	4b11      	ldr	r3, [pc, #68]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002ef6:	4a12      	ldr	r2, [pc, #72]	; (8002f40 <MX_USART1_UART_Init+0x50>)
 8002ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f16:	220c      	movs	r2, #12
 8002f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f26:	4805      	ldr	r0, [pc, #20]	; (8002f3c <MX_USART1_UART_Init+0x4c>)
 8002f28:	f003 fb88 	bl	800663c <HAL_UART_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f32:	f7fe fc99 	bl	8001868 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200006c8 	.word	0x200006c8
 8002f40:	40013800 	.word	0x40013800

08002f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b088      	sub	sp, #32
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_UART_MspInit+0x138>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	f040 8086 	bne.w	8003072 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f66:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_UART_MspInit+0x13c>)
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	4a45      	ldr	r2, [pc, #276]	; (8003080 <HAL_UART_MspInit+0x13c>)
 8002f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f70:	6193      	str	r3, [r2, #24]
 8002f72:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_UART_MspInit+0x13c>)
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7e:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_UART_MspInit+0x13c>)
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4a3f      	ldr	r2, [pc, #252]	; (8003080 <HAL_UART_MspInit+0x13c>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6193      	str	r3, [r2, #24]
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_UART_MspInit+0x13c>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa4:	f107 0310 	add.w	r3, r7, #16
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4836      	ldr	r0, [pc, #216]	; (8003084 <HAL_UART_MspInit+0x140>)
 8002fac:	f000 fdda 	bl	8003b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fb4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fbe:	f107 0310 	add.w	r3, r7, #16
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	482f      	ldr	r0, [pc, #188]	; (8003084 <HAL_UART_MspInit+0x140>)
 8002fc6:	f000 fdcd 	bl	8003b64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002fca:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002fcc:	4a2f      	ldr	r2, [pc, #188]	; (800308c <HAL_UART_MspInit+0x148>)
 8002fce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fdc:	4b2a      	ldr	r3, [pc, #168]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002fde:	2280      	movs	r2, #128	; 0x80
 8002fe0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe2:	4b29      	ldr	r3, [pc, #164]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002fee:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002ffa:	4823      	ldr	r0, [pc, #140]	; (8003088 <HAL_UART_MspInit+0x144>)
 8002ffc:	f000 fb10 	bl	8003620 <HAL_DMA_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003006:	f7fe fc2f 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_UART_MspInit+0x144>)
 800300e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <HAL_UART_MspInit+0x144>)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <HAL_UART_MspInit+0x14c>)
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <HAL_UART_MspInit+0x150>)
 800301a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_UART_MspInit+0x14c>)
 800301e:	2210      	movs	r2, #16
 8003020:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_UART_MspInit+0x14c>)
 8003024:	2200      	movs	r2, #0
 8003026:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_UART_MspInit+0x14c>)
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_UART_MspInit+0x14c>)
 8003030:	2200      	movs	r2, #0
 8003032:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003034:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_UART_MspInit+0x14c>)
 8003036:	2200      	movs	r2, #0
 8003038:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_UART_MspInit+0x14c>)
 800303c:	2200      	movs	r2, #0
 800303e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_UART_MspInit+0x14c>)
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003046:	4812      	ldr	r0, [pc, #72]	; (8003090 <HAL_UART_MspInit+0x14c>)
 8003048:	f000 faea 	bl	8003620 <HAL_DMA_Init>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8003052:	f7fe fc09 	bl	8001868 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a0d      	ldr	r2, [pc, #52]	; (8003090 <HAL_UART_MspInit+0x14c>)
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
 800305c:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <HAL_UART_MspInit+0x14c>)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	2025      	movs	r0, #37	; 0x25
 8003068:	f000 faa3 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800306c:	2025      	movs	r0, #37	; 0x25
 800306e:	f000 fabc 	bl	80035ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003072:	bf00      	nop
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40013800 	.word	0x40013800
 8003080:	40021000 	.word	0x40021000
 8003084:	40010800 	.word	0x40010800
 8003088:	20000710 	.word	0x20000710
 800308c:	40020058 	.word	0x40020058
 8003090:	20000754 	.word	0x20000754
 8003094:	40020044 	.word	0x40020044

08003098 <led>:
extern robot_typedef robot;




void led(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	if(strcmp(args[0], "1") == 0){
 80030a0:	490e      	ldr	r1, [pc, #56]	; (80030dc <led+0x44>)
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd f854 	bl	8000150 <strcmp>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <led+0x22>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030b4:	480a      	ldr	r0, [pc, #40]	; (80030e0 <led+0x48>)
 80030b6:	f000 fed9 	bl	8003e6c <HAL_GPIO_WritePin>
	}
	if(strcmp(args[0], "0") == 0){
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <led+0x4c>)
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7fd f847 	bl	8000150 <strcmp>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d105      	bne.n	80030d4 <led+0x3c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80030c8:	2201      	movs	r2, #1
 80030ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ce:	4804      	ldr	r0, [pc, #16]	; (80030e0 <led+0x48>)
 80030d0:	f000 fecc 	bl	8003e6c <HAL_GPIO_WritePin>
	}
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	0800bbf4 	.word	0x0800bbf4
 80030e0:	40011000 	.word	0x40011000
 80030e4:	0800bbf8 	.word	0x0800bbf8

080030e8 <comunication_test>:

void comunication_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0c4      	sub	sp, #272	; 0x110
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030f6:	6018      	str	r0, [r3, #0]
	uint8_t buffer[BUFFER_SIZE_TX];
	uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "Command received!!!\n");
 80030f8:	f107 030c 	add.w	r3, r7, #12
 80030fc:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <comunication_test+0x40>)
 80030fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003102:	4618      	mov	r0, r3
 8003104:	f005 ff22 	bl	8008f4c <sniprintf>
 8003108:	4603      	mov	r3, r0
 800310a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uart_send(&uart_interface, buffer, size, 1);
 800310e:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8003112:	f107 010c 	add.w	r1, r7, #12
 8003116:	2301      	movs	r3, #1
 8003118:	4804      	ldr	r0, [pc, #16]	; (800312c <comunication_test+0x44>)
 800311a:	f7ff fc90 	bl	8002a3e <uart_send>

}
 800311e:	bf00      	nop
 8003120:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	0800bbfc 	.word	0x0800bbfc
 800312c:	200002dc 	.word	0x200002dc

08003130 <motor_test>:


void motor_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003130:	b580      	push	{r7, lr}
 8003132:	b0c4      	sub	sp, #272	; 0x110
 8003134:	af00      	add	r7, sp, #0
 8003136:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800313a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800313e:	6018      	str	r0, [r3, #0]
	float speed = atof(args[1]);
 8003140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003144:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	330c      	adds	r3, #12
 800314c:	4618      	mov	r0, r3
 800314e:	f004 fb6d 	bl	800782c <atof>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fcbf 	bl	8000adc <__aeabi_d2f>
 800315e:	4603      	mov	r3, r0
 8003160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	if(strcmp(args[0], "1") == 0){
 8003164:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003168:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800316c:	491c      	ldr	r1, [pc, #112]	; (80031e0 <motor_test+0xb0>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	f7fc ffee 	bl	8000150 <strcmp>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d107      	bne.n	800318a <motor_test+0x5a>
		stepper_set_speed(robot.stepper1, speed);
 800317a:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <motor_test+0xb4>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe ff7c 	bl	8002080 <stepper_set_speed>
	else{
		uint8_t buffer[BUFFER_SIZE_TX];
		uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "Select motor '1' or '2'\n");
		uart_send(&uart_interface, buffer, size, 1);
	}
}
 8003188:	e025      	b.n	80031d6 <motor_test+0xa6>
	else if(strcmp(args[0], "2") == 0){
 800318a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800318e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003192:	4915      	ldr	r1, [pc, #84]	; (80031e8 <motor_test+0xb8>)
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	f7fc ffdb 	bl	8000150 <strcmp>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <motor_test+0x80>
		stepper_set_speed(robot.stepper2, speed);
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <motor_test+0xb4>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe ff69 	bl	8002080 <stepper_set_speed>
}
 80031ae:	e012      	b.n	80031d6 <motor_test+0xa6>
		uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "Select motor '1' or '2'\n");
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <motor_test+0xbc>)
 80031b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ba:	4618      	mov	r0, r3
 80031bc:	f005 fec6 	bl	8008f4c <sniprintf>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
		uart_send(&uart_interface, buffer, size, 1);
 80031c6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80031ca:	f107 0108 	add.w	r1, r7, #8
 80031ce:	2301      	movs	r3, #1
 80031d0:	4807      	ldr	r0, [pc, #28]	; (80031f0 <motor_test+0xc0>)
 80031d2:	f7ff fc34 	bl	8002a3e <uart_send>
}
 80031d6:	bf00      	nop
 80031d8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	0800bbf4 	.word	0x0800bbf4
 80031e4:	200005c4 	.word	0x200005c4
 80031e8:	0800bc14 	.word	0x0800bc14
 80031ec:	0800bc18 	.word	0x0800bc18
 80031f0:	200002dc 	.word	0x200002dc

080031f4 <motor_enable>:


void motor_enable(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b0c4      	sub	sp, #272	; 0x110
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003202:	6018      	str	r0, [r3, #0]
	bool enable = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	if(strcmp(args[0], "1") == 0) enable = 1;
 800320a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800320e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003212:	4921      	ldr	r1, [pc, #132]	; (8003298 <motor_enable+0xa4>)
 8003214:	6818      	ldr	r0, [r3, #0]
 8003216:	f7fc ff9b 	bl	8000150 <strcmp>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <motor_enable+0x34>
 8003220:	2301      	movs	r3, #1
 8003222:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003226:	e021      	b.n	800326c <motor_enable+0x78>
	else if (strcmp(args[0], "0") == 0) enable = 0;
 8003228:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800322c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003230:	491a      	ldr	r1, [pc, #104]	; (800329c <motor_enable+0xa8>)
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	f7fc ff8c 	bl	8000150 <strcmp>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d103      	bne.n	8003246 <motor_enable+0x52>
 800323e:	2300      	movs	r3, #0
 8003240:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8003244:	e012      	b.n	800326c <motor_enable+0x78>
	else{
		uint8_t buffer[BUFFER_SIZE_TX];
		uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "enable must be '0' or '1'\n");
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <motor_enable+0xac>)
 800324c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003250:	4618      	mov	r0, r3
 8003252:	f005 fe7b 	bl	8008f4c <sniprintf>
 8003256:	4603      	mov	r3, r0
 8003258:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
		uart_send(&uart_interface, buffer, size, 1);
 800325c:	f8b7 210c 	ldrh.w	r2, [r7, #268]	; 0x10c
 8003260:	f107 010c 	add.w	r1, r7, #12
 8003264:	2301      	movs	r3, #1
 8003266:	480f      	ldr	r0, [pc, #60]	; (80032a4 <motor_enable+0xb0>)
 8003268:	f7ff fbe9 	bl	8002a3e <uart_send>
	}
	stepper_enable(robot.stepper1, enable);
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <motor_enable+0xb4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f7fe fecb 	bl	8002012 <stepper_enable>
	stepper_enable(robot.stepper2, enable);
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <motor_enable+0xb4>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 8003284:	4611      	mov	r1, r2
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe fec3 	bl	8002012 <stepper_enable>

}
 800328c:	bf00      	nop
 800328e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	0800bbf4 	.word	0x0800bbf4
 800329c:	0800bbf8 	.word	0x0800bbf8
 80032a0:	0800bc34 	.word	0x0800bc34
 80032a4:	200002dc 	.word	0x200002dc
 80032a8:	200005c4 	.word	0x200005c4

080032ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032ac:	f7ff f99c 	bl	80025e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032b0:	480b      	ldr	r0, [pc, #44]	; (80032e0 <LoopFillZerobss+0xe>)
   ldr r1, =_edata
 80032b2:	490c      	ldr	r1, [pc, #48]	; (80032e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032b4:	4a0c      	ldr	r2, [pc, #48]	; (80032e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b8:	e002      	b.n	80032c0 <LoopCopyDataInit>

080032ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032be:	3304      	adds	r3, #4

080032c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c4:	d3f9      	bcc.n	80032ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c6:	4a09      	ldr	r2, [pc, #36]	; (80032ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80032c8:	4c09      	ldr	r4, [pc, #36]	; (80032f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032cc:	e001      	b.n	80032d2 <LoopFillZerobss>

080032ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d0:	3204      	adds	r2, #4

080032d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d4:	d3fb      	bcc.n	80032ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032d6:	f005 ffaf 	bl	8009238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032da:	f7fe f997 	bl	800160c <main>
  bx lr
 80032de:	4770      	bx	lr
  ldr r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
   ldr r1, =_edata
 80032e4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80032e8:	0800c0ac 	.word	0x0800c0ac
  ldr r2, =_sbss
 80032ec:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80032f0:	200008e8 	.word	0x200008e8

080032f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <ADC1_2_IRQHandler>
	...

080032f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_Init+0x28>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <HAL_Init+0x28>)
 8003302:	f043 0310 	orr.w	r3, r3, #16
 8003306:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003308:	2003      	movs	r0, #3
 800330a:	f000 f947 	bl	800359c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800330e:	200f      	movs	r0, #15
 8003310:	f000 f808 	bl	8003324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003314:	f7ff f808 	bl	8002328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40022000 	.word	0x40022000

08003324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_InitTick+0x54>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_InitTick+0x58>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333a:	fbb3 f3f1 	udiv	r3, r3, r1
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f95f 	bl	8003606 <HAL_SYSTICK_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00e      	b.n	8003370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d80a      	bhi.n	800336e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003358:	2200      	movs	r2, #0
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	f000 f927 	bl	80035b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <HAL_InitTick+0x5c>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000000 	.word	0x20000000
 800337c:	20000008 	.word	0x20000008
 8003380:	20000004 	.word	0x20000004

08003384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_IncTick+0x1c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <HAL_IncTick+0x20>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4413      	add	r3, r2
 8003394:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <HAL_IncTick+0x20>)
 8003396:	6013      	str	r3, [r2, #0]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	20000008 	.word	0x20000008
 80033a4:	20000798 	.word	0x20000798

080033a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return uwTick;
 80033ac:	4b02      	ldr	r3, [pc, #8]	; (80033b8 <HAL_GetTick+0x10>)
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr
 80033b8:	20000798 	.word	0x20000798

080033bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7ff fff0 	bl	80033a8 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d4:	d005      	beq.n	80033e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_Delay+0x44>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033e2:	bf00      	nop
 80033e4:	f7ff ffe0 	bl	80033a8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d8f7      	bhi.n	80033e4 <HAL_Delay+0x28>
  {
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000008 	.word	0x20000008

08003404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800342c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000ed00 	.word	0xe000ed00

0800344c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <__NVIC_GetPriorityGrouping+0x18>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0307 	and.w	r3, r3, #7
}
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db0b      	blt.n	8003492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4906      	ldr	r1, [pc, #24]	; (800349c <__NVIC_EnableIRQ+0x34>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	e000e100 	.word	0xe000e100

080034a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	db0a      	blt.n	80034ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	490c      	ldr	r1, [pc, #48]	; (80034ec <__NVIC_SetPriority+0x4c>)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	440b      	add	r3, r1
 80034c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c8:	e00a      	b.n	80034e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4908      	ldr	r1, [pc, #32]	; (80034f0 <__NVIC_SetPriority+0x50>)
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	3b04      	subs	r3, #4
 80034d8:	0112      	lsls	r2, r2, #4
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	440b      	add	r3, r1
 80034de:	761a      	strb	r2, [r3, #24]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f1c3 0307 	rsb	r3, r3, #7
 800350e:	2b04      	cmp	r3, #4
 8003510:	bf28      	it	cs
 8003512:	2304      	movcs	r3, #4
 8003514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3304      	adds	r3, #4
 800351a:	2b06      	cmp	r3, #6
 800351c:	d902      	bls.n	8003524 <NVIC_EncodePriority+0x30>
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3b03      	subs	r3, #3
 8003522:	e000      	b.n	8003526 <NVIC_EncodePriority+0x32>
 8003524:	2300      	movs	r3, #0
 8003526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	f04f 32ff 	mov.w	r2, #4294967295
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43da      	mvns	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	401a      	ands	r2, r3
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800353c:	f04f 31ff 	mov.w	r1, #4294967295
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	fa01 f303 	lsl.w	r3, r1, r3
 8003546:	43d9      	mvns	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800354c:	4313      	orrs	r3, r2
         );
}
 800354e:	4618      	mov	r0, r3
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003568:	d301      	bcc.n	800356e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356a:	2301      	movs	r3, #1
 800356c:	e00f      	b.n	800358e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <SysTick_Config+0x40>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3b01      	subs	r3, #1
 8003574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003576:	210f      	movs	r1, #15
 8003578:	f04f 30ff 	mov.w	r0, #4294967295
 800357c:	f7ff ff90 	bl	80034a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <SysTick_Config+0x40>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <SysTick_Config+0x40>)
 8003588:	2207      	movs	r2, #7
 800358a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	e000e010 	.word	0xe000e010

0800359c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff2d 	bl	8003404 <__NVIC_SetPriorityGrouping>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c4:	f7ff ff42 	bl	800344c <__NVIC_GetPriorityGrouping>
 80035c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	68b9      	ldr	r1, [r7, #8]
 80035ce:	6978      	ldr	r0, [r7, #20]
 80035d0:	f7ff ff90 	bl	80034f4 <NVIC_EncodePriority>
 80035d4:	4602      	mov	r2, r0
 80035d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff ff5f 	bl	80034a0 <__NVIC_SetPriority>
}
 80035e2:	bf00      	nop
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff35 	bl	8003468 <__NVIC_EnableIRQ>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ffa2 	bl	8003558 <SysTick_Config>
 8003614:	4603      	mov	r3, r0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e043      	b.n	80036be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_DMA_Init+0xa8>)
 800363e:	4413      	add	r3, r2
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_DMA_Init+0xac>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	009a      	lsls	r2, r3, #2
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <HAL_DMA_Init+0xb0>)
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800366a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800366e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003678:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003684:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003690:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	bffdfff8 	.word	0xbffdfff8
 80036cc:	cccccccd 	.word	0xcccccccd
 80036d0:	40020000 	.word	0x40020000

080036d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_DMA_Start_IT+0x20>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e04b      	b.n	800378c <HAL_DMA_Start_IT+0xb8>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d13a      	bne.n	800377e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f9eb 	bl	8003b08 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 020e 	orr.w	r2, r2, #14
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e00f      	b.n	800376c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0204 	bic.w	r2, r2, #4
 800375a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 020a 	orr.w	r2, r2, #10
 800376a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e005      	b.n	800378a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003786:	2302      	movs	r3, #2
 8003788:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800378a:	7dfb      	ldrb	r3, [r7, #23]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d008      	beq.n	80037be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2204      	movs	r2, #4
 80037b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e020      	b.n	8003800 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 020e 	bic.w	r2, r2, #14
 80037cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	2101      	movs	r1, #1
 80037e8:	fa01 f202 	lsl.w	r2, r1, r2
 80037ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr
	...

0800380c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003814:	2300      	movs	r3, #0
 8003816:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d005      	beq.n	8003830 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2204      	movs	r2, #4
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	73fb      	strb	r3, [r7, #15]
 800382e:	e051      	b.n	80038d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 020e 	bic.w	r2, r2, #14
 800383e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a22      	ldr	r2, [pc, #136]	; (80038e0 <HAL_DMA_Abort_IT+0xd4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d029      	beq.n	80038ae <HAL_DMA_Abort_IT+0xa2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a21      	ldr	r2, [pc, #132]	; (80038e4 <HAL_DMA_Abort_IT+0xd8>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_DMA_Abort_IT+0x9e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1f      	ldr	r2, [pc, #124]	; (80038e8 <HAL_DMA_Abort_IT+0xdc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01a      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x98>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1e      	ldr	r2, [pc, #120]	; (80038ec <HAL_DMA_Abort_IT+0xe0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d012      	beq.n	800389e <HAL_DMA_Abort_IT+0x92>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <HAL_DMA_Abort_IT+0xe4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00a      	beq.n	8003898 <HAL_DMA_Abort_IT+0x8c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_DMA_Abort_IT+0xe8>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d102      	bne.n	8003892 <HAL_DMA_Abort_IT+0x86>
 800388c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003890:	e00e      	b.n	80038b0 <HAL_DMA_Abort_IT+0xa4>
 8003892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003896:	e00b      	b.n	80038b0 <HAL_DMA_Abort_IT+0xa4>
 8003898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800389c:	e008      	b.n	80038b0 <HAL_DMA_Abort_IT+0xa4>
 800389e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a2:	e005      	b.n	80038b0 <HAL_DMA_Abort_IT+0xa4>
 80038a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a8:	e002      	b.n	80038b0 <HAL_DMA_Abort_IT+0xa4>
 80038aa:	2310      	movs	r3, #16
 80038ac:	e000      	b.n	80038b0 <HAL_DMA_Abort_IT+0xa4>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4a11      	ldr	r2, [pc, #68]	; (80038f8 <HAL_DMA_Abort_IT+0xec>)
 80038b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
    } 
  }
  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40020008 	.word	0x40020008
 80038e4:	4002001c 	.word	0x4002001c
 80038e8:	40020030 	.word	0x40020030
 80038ec:	40020044 	.word	0x40020044
 80038f0:	40020058 	.word	0x40020058
 80038f4:	4002006c 	.word	0x4002006c
 80038f8:	40020000 	.word	0x40020000

080038fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	2204      	movs	r2, #4
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d04f      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc8>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	d04a      	beq.n	80039c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0320 	and.w	r3, r3, #32
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0204 	bic.w	r2, r2, #4
 800394a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a66      	ldr	r2, [pc, #408]	; (8003aec <HAL_DMA_IRQHandler+0x1f0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d029      	beq.n	80039aa <HAL_DMA_IRQHandler+0xae>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a65      	ldr	r2, [pc, #404]	; (8003af0 <HAL_DMA_IRQHandler+0x1f4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <HAL_DMA_IRQHandler+0xaa>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a63      	ldr	r2, [pc, #396]	; (8003af4 <HAL_DMA_IRQHandler+0x1f8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01a      	beq.n	80039a0 <HAL_DMA_IRQHandler+0xa4>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a62      	ldr	r2, [pc, #392]	; (8003af8 <HAL_DMA_IRQHandler+0x1fc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d012      	beq.n	800399a <HAL_DMA_IRQHandler+0x9e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a60      	ldr	r2, [pc, #384]	; (8003afc <HAL_DMA_IRQHandler+0x200>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00a      	beq.n	8003994 <HAL_DMA_IRQHandler+0x98>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a5f      	ldr	r2, [pc, #380]	; (8003b00 <HAL_DMA_IRQHandler+0x204>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d102      	bne.n	800398e <HAL_DMA_IRQHandler+0x92>
 8003988:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800398c:	e00e      	b.n	80039ac <HAL_DMA_IRQHandler+0xb0>
 800398e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003992:	e00b      	b.n	80039ac <HAL_DMA_IRQHandler+0xb0>
 8003994:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003998:	e008      	b.n	80039ac <HAL_DMA_IRQHandler+0xb0>
 800399a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800399e:	e005      	b.n	80039ac <HAL_DMA_IRQHandler+0xb0>
 80039a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a4:	e002      	b.n	80039ac <HAL_DMA_IRQHandler+0xb0>
 80039a6:	2340      	movs	r3, #64	; 0x40
 80039a8:	e000      	b.n	80039ac <HAL_DMA_IRQHandler+0xb0>
 80039aa:	2304      	movs	r3, #4
 80039ac:	4a55      	ldr	r2, [pc, #340]	; (8003b04 <HAL_DMA_IRQHandler+0x208>)
 80039ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8094 	beq.w	8003ae2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80039c2:	e08e      	b.n	8003ae2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	2202      	movs	r2, #2
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d056      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x186>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d051      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 020a 	bic.w	r2, r2, #10
 80039fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a38      	ldr	r2, [pc, #224]	; (8003aec <HAL_DMA_IRQHandler+0x1f0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d029      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x166>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a37      	ldr	r2, [pc, #220]	; (8003af0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d022      	beq.n	8003a5e <HAL_DMA_IRQHandler+0x162>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a35      	ldr	r2, [pc, #212]	; (8003af4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d01a      	beq.n	8003a58 <HAL_DMA_IRQHandler+0x15c>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a34      	ldr	r2, [pc, #208]	; (8003af8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d012      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x156>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a32      	ldr	r2, [pc, #200]	; (8003afc <HAL_DMA_IRQHandler+0x200>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d00a      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x150>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <HAL_DMA_IRQHandler+0x204>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d102      	bne.n	8003a46 <HAL_DMA_IRQHandler+0x14a>
 8003a40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a44:	e00e      	b.n	8003a64 <HAL_DMA_IRQHandler+0x168>
 8003a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a4a:	e00b      	b.n	8003a64 <HAL_DMA_IRQHandler+0x168>
 8003a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a50:	e008      	b.n	8003a64 <HAL_DMA_IRQHandler+0x168>
 8003a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a56:	e005      	b.n	8003a64 <HAL_DMA_IRQHandler+0x168>
 8003a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a5c:	e002      	b.n	8003a64 <HAL_DMA_IRQHandler+0x168>
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0x168>
 8003a62:	2302      	movs	r3, #2
 8003a64:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <HAL_DMA_IRQHandler+0x208>)
 8003a66:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d034      	beq.n	8003ae2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a80:	e02f      	b.n	8003ae2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	2208      	movs	r2, #8
 8003a88:	409a      	lsls	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d028      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x1e8>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d023      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020e 	bic.w	r2, r2, #14
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d004      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
    }
  }
  return;
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
}
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40020008 	.word	0x40020008
 8003af0:	4002001c 	.word	0x4002001c
 8003af4:	40020030 	.word	0x40020030
 8003af8:	40020044 	.word	0x40020044
 8003afc:	40020058 	.word	0x40020058
 8003b00:	4002006c 	.word	0x4002006c
 8003b04:	40020000 	.word	0x40020000

08003b08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d108      	bne.n	8003b48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b46:	e007      	b.n	8003b58 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	60da      	str	r2, [r3, #12]
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b08b      	sub	sp, #44	; 0x2c
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b76:	e169      	b.n	8003e4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b78:	2201      	movs	r2, #1
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f040 8158 	bne.w	8003e46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	4a9a      	ldr	r2, [pc, #616]	; (8003e04 <HAL_GPIO_Init+0x2a0>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d05e      	beq.n	8003c5e <HAL_GPIO_Init+0xfa>
 8003ba0:	4a98      	ldr	r2, [pc, #608]	; (8003e04 <HAL_GPIO_Init+0x2a0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d875      	bhi.n	8003c92 <HAL_GPIO_Init+0x12e>
 8003ba6:	4a98      	ldr	r2, [pc, #608]	; (8003e08 <HAL_GPIO_Init+0x2a4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d058      	beq.n	8003c5e <HAL_GPIO_Init+0xfa>
 8003bac:	4a96      	ldr	r2, [pc, #600]	; (8003e08 <HAL_GPIO_Init+0x2a4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d86f      	bhi.n	8003c92 <HAL_GPIO_Init+0x12e>
 8003bb2:	4a96      	ldr	r2, [pc, #600]	; (8003e0c <HAL_GPIO_Init+0x2a8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d052      	beq.n	8003c5e <HAL_GPIO_Init+0xfa>
 8003bb8:	4a94      	ldr	r2, [pc, #592]	; (8003e0c <HAL_GPIO_Init+0x2a8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d869      	bhi.n	8003c92 <HAL_GPIO_Init+0x12e>
 8003bbe:	4a94      	ldr	r2, [pc, #592]	; (8003e10 <HAL_GPIO_Init+0x2ac>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d04c      	beq.n	8003c5e <HAL_GPIO_Init+0xfa>
 8003bc4:	4a92      	ldr	r2, [pc, #584]	; (8003e10 <HAL_GPIO_Init+0x2ac>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d863      	bhi.n	8003c92 <HAL_GPIO_Init+0x12e>
 8003bca:	4a92      	ldr	r2, [pc, #584]	; (8003e14 <HAL_GPIO_Init+0x2b0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d046      	beq.n	8003c5e <HAL_GPIO_Init+0xfa>
 8003bd0:	4a90      	ldr	r2, [pc, #576]	; (8003e14 <HAL_GPIO_Init+0x2b0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d85d      	bhi.n	8003c92 <HAL_GPIO_Init+0x12e>
 8003bd6:	2b12      	cmp	r3, #18
 8003bd8:	d82a      	bhi.n	8003c30 <HAL_GPIO_Init+0xcc>
 8003bda:	2b12      	cmp	r3, #18
 8003bdc:	d859      	bhi.n	8003c92 <HAL_GPIO_Init+0x12e>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_GPIO_Init+0x80>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c5f 	.word	0x08003c5f
 8003be8:	08003c39 	.word	0x08003c39
 8003bec:	08003c4b 	.word	0x08003c4b
 8003bf0:	08003c8d 	.word	0x08003c8d
 8003bf4:	08003c93 	.word	0x08003c93
 8003bf8:	08003c93 	.word	0x08003c93
 8003bfc:	08003c93 	.word	0x08003c93
 8003c00:	08003c93 	.word	0x08003c93
 8003c04:	08003c93 	.word	0x08003c93
 8003c08:	08003c93 	.word	0x08003c93
 8003c0c:	08003c93 	.word	0x08003c93
 8003c10:	08003c93 	.word	0x08003c93
 8003c14:	08003c93 	.word	0x08003c93
 8003c18:	08003c93 	.word	0x08003c93
 8003c1c:	08003c93 	.word	0x08003c93
 8003c20:	08003c93 	.word	0x08003c93
 8003c24:	08003c93 	.word	0x08003c93
 8003c28:	08003c41 	.word	0x08003c41
 8003c2c:	08003c55 	.word	0x08003c55
 8003c30:	4a79      	ldr	r2, [pc, #484]	; (8003e18 <HAL_GPIO_Init+0x2b4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d013      	beq.n	8003c5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c36:	e02c      	b.n	8003c92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	623b      	str	r3, [r7, #32]
          break;
 8003c3e:	e029      	b.n	8003c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	3304      	adds	r3, #4
 8003c46:	623b      	str	r3, [r7, #32]
          break;
 8003c48:	e024      	b.n	8003c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	623b      	str	r3, [r7, #32]
          break;
 8003c52:	e01f      	b.n	8003c94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	623b      	str	r3, [r7, #32]
          break;
 8003c5c:	e01a      	b.n	8003c94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c66:	2304      	movs	r3, #4
 8003c68:	623b      	str	r3, [r7, #32]
          break;
 8003c6a:	e013      	b.n	8003c94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c74:	2308      	movs	r3, #8
 8003c76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	611a      	str	r2, [r3, #16]
          break;
 8003c7e:	e009      	b.n	8003c94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c80:	2308      	movs	r3, #8
 8003c82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	615a      	str	r2, [r3, #20]
          break;
 8003c8a:	e003      	b.n	8003c94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
          break;
 8003c90:	e000      	b.n	8003c94 <HAL_GPIO_Init+0x130>
          break;
 8003c92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2bff      	cmp	r3, #255	; 0xff
 8003c98:	d801      	bhi.n	8003c9e <HAL_GPIO_Init+0x13a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	e001      	b.n	8003ca2 <HAL_GPIO_Init+0x13e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2bff      	cmp	r3, #255	; 0xff
 8003ca8:	d802      	bhi.n	8003cb0 <HAL_GPIO_Init+0x14c>
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	e002      	b.n	8003cb6 <HAL_GPIO_Init+0x152>
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	3b08      	subs	r3, #8
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	210f      	movs	r1, #15
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	6a39      	ldr	r1, [r7, #32]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 80b1 	beq.w	8003e46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003ce4:	4b4d      	ldr	r3, [pc, #308]	; (8003e1c <HAL_GPIO_Init+0x2b8>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4a4c      	ldr	r2, [pc, #304]	; (8003e1c <HAL_GPIO_Init+0x2b8>)
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	6193      	str	r3, [r2, #24]
 8003cf0:	4b4a      	ldr	r3, [pc, #296]	; (8003e1c <HAL_GPIO_Init+0x2b8>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cfc:	4a48      	ldr	r2, [pc, #288]	; (8003e20 <HAL_GPIO_Init+0x2bc>)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	220f      	movs	r2, #15
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a40      	ldr	r2, [pc, #256]	; (8003e24 <HAL_GPIO_Init+0x2c0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d013      	beq.n	8003d50 <HAL_GPIO_Init+0x1ec>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a3f      	ldr	r2, [pc, #252]	; (8003e28 <HAL_GPIO_Init+0x2c4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00d      	beq.n	8003d4c <HAL_GPIO_Init+0x1e8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a3e      	ldr	r2, [pc, #248]	; (8003e2c <HAL_GPIO_Init+0x2c8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <HAL_GPIO_Init+0x1e4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a3d      	ldr	r2, [pc, #244]	; (8003e30 <HAL_GPIO_Init+0x2cc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_GPIO_Init+0x1e0>
 8003d40:	2303      	movs	r3, #3
 8003d42:	e006      	b.n	8003d52 <HAL_GPIO_Init+0x1ee>
 8003d44:	2304      	movs	r3, #4
 8003d46:	e004      	b.n	8003d52 <HAL_GPIO_Init+0x1ee>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e002      	b.n	8003d52 <HAL_GPIO_Init+0x1ee>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <HAL_GPIO_Init+0x1ee>
 8003d50:	2300      	movs	r3, #0
 8003d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d54:	f002 0203 	and.w	r2, r2, #3
 8003d58:	0092      	lsls	r2, r2, #2
 8003d5a:	4093      	lsls	r3, r2
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d62:	492f      	ldr	r1, [pc, #188]	; (8003e20 <HAL_GPIO_Init+0x2bc>)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	089b      	lsrs	r3, r3, #2
 8003d68:	3302      	adds	r3, #2
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d006      	beq.n	8003d8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d7c:	4b2d      	ldr	r3, [pc, #180]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	492c      	ldr	r1, [pc, #176]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d8a:	4b2a      	ldr	r3, [pc, #168]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	4928      	ldr	r1, [pc, #160]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d006      	beq.n	8003db2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003da4:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	4922      	ldr	r1, [pc, #136]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60cb      	str	r3, [r1, #12]
 8003db0:	e006      	b.n	8003dc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003db2:	4b20      	ldr	r3, [pc, #128]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	43db      	mvns	r3, r3
 8003dba:	491e      	ldr	r1, [pc, #120]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d006      	beq.n	8003dda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	4918      	ldr	r1, [pc, #96]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
 8003dd8:	e006      	b.n	8003de8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	4914      	ldr	r1, [pc, #80]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d021      	beq.n	8003e38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <HAL_GPIO_Init+0x2d0>)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
 8003e00:	e021      	b.n	8003e46 <HAL_GPIO_Init+0x2e2>
 8003e02:	bf00      	nop
 8003e04:	10320000 	.word	0x10320000
 8003e08:	10310000 	.word	0x10310000
 8003e0c:	10220000 	.word	0x10220000
 8003e10:	10210000 	.word	0x10210000
 8003e14:	10120000 	.word	0x10120000
 8003e18:	10110000 	.word	0x10110000
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40010800 	.word	0x40010800
 8003e28:	40010c00 	.word	0x40010c00
 8003e2c:	40011000 	.word	0x40011000
 8003e30:	40011400 	.word	0x40011400
 8003e34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	4909      	ldr	r1, [pc, #36]	; (8003e68 <HAL_GPIO_Init+0x304>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	3301      	adds	r3, #1
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f47f ae8e 	bne.w	8003b78 <HAL_GPIO_Init+0x14>
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	372c      	adds	r7, #44	; 0x2c
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	40010400 	.word	0x40010400

08003e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	807b      	strh	r3, [r7, #2]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e7c:	787b      	ldrb	r3, [r7, #1]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d003      	beq.n	8003e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e88:	e003      	b.n	8003e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	041a      	lsls	r2, r3, #16
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	611a      	str	r2, [r3, #16]
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e12b      	b.n	8004106 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fd face 	bl	8001464 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f00:	f001 fbfc 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
 8003f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4a81      	ldr	r2, [pc, #516]	; (8004110 <HAL_I2C_Init+0x274>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d807      	bhi.n	8003f20 <HAL_I2C_Init+0x84>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a80      	ldr	r2, [pc, #512]	; (8004114 <HAL_I2C_Init+0x278>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	bf94      	ite	ls
 8003f18:	2301      	movls	r3, #1
 8003f1a:	2300      	movhi	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e006      	b.n	8003f2e <HAL_I2C_Init+0x92>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4a7d      	ldr	r2, [pc, #500]	; (8004118 <HAL_I2C_Init+0x27c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	bf94      	ite	ls
 8003f28:	2301      	movls	r3, #1
 8003f2a:	2300      	movhi	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e0e7      	b.n	8004106 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4a78      	ldr	r2, [pc, #480]	; (800411c <HAL_I2C_Init+0x280>)
 8003f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3e:	0c9b      	lsrs	r3, r3, #18
 8003f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	4a6a      	ldr	r2, [pc, #424]	; (8004110 <HAL_I2C_Init+0x274>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d802      	bhi.n	8003f70 <HAL_I2C_Init+0xd4>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	e009      	b.n	8003f84 <HAL_I2C_Init+0xe8>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	4a69      	ldr	r2, [pc, #420]	; (8004120 <HAL_I2C_Init+0x284>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	099b      	lsrs	r3, r3, #6
 8003f82:	3301      	adds	r3, #1
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	495c      	ldr	r1, [pc, #368]	; (8004110 <HAL_I2C_Init+0x274>)
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	d819      	bhi.n	8003fd8 <HAL_I2C_Init+0x13c>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1e59      	subs	r1, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fb2:	1c59      	adds	r1, r3, #1
 8003fb4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fb8:	400b      	ands	r3, r1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_I2C_Init+0x138>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e59      	subs	r1, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd2:	e051      	b.n	8004078 <HAL_I2C_Init+0x1dc>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	e04f      	b.n	8004078 <HAL_I2C_Init+0x1dc>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d111      	bne.n	8004004 <HAL_I2C_Init+0x168>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e58      	subs	r0, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	440b      	add	r3, r1
 8003fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e012      	b.n	800402a <HAL_I2C_Init+0x18e>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	0099      	lsls	r1, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	fbb0 f3f3 	udiv	r3, r0, r3
 800401a:	3301      	adds	r3, #1
 800401c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_I2C_Init+0x196>
 800402e:	2301      	movs	r3, #1
 8004030:	e022      	b.n	8004078 <HAL_I2C_Init+0x1dc>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10e      	bne.n	8004058 <HAL_I2C_Init+0x1bc>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	1e58      	subs	r0, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	440b      	add	r3, r1
 8004048:	fbb0 f3f3 	udiv	r3, r0, r3
 800404c:	3301      	adds	r3, #1
 800404e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004056:	e00f      	b.n	8004078 <HAL_I2C_Init+0x1dc>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	1e58      	subs	r0, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	0099      	lsls	r1, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	fbb0 f3f3 	udiv	r3, r0, r3
 800406e:	3301      	adds	r3, #1
 8004070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	6809      	ldr	r1, [r1, #0]
 800407c:	4313      	orrs	r3, r2
 800407e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69da      	ldr	r2, [r3, #28]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6911      	ldr	r1, [r2, #16]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68d2      	ldr	r2, [r2, #12]
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6812      	ldr	r2, [r2, #0]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	000186a0 	.word	0x000186a0
 8004114:	001e847f 	.word	0x001e847f
 8004118:	003d08ff 	.word	0x003d08ff
 800411c:	431bde83 	.word	0x431bde83
 8004120:	10624dd3 	.word	0x10624dd3

08004124 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af02      	add	r7, sp, #8
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	4608      	mov	r0, r1
 800412e:	4611      	mov	r1, r2
 8004130:	461a      	mov	r2, r3
 8004132:	4603      	mov	r3, r0
 8004134:	817b      	strh	r3, [r7, #10]
 8004136:	460b      	mov	r3, r1
 8004138:	813b      	strh	r3, [r7, #8]
 800413a:	4613      	mov	r3, r2
 800413c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800413e:	f7ff f933 	bl	80033a8 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b20      	cmp	r3, #32
 800414e:	f040 80d9 	bne.w	8004304 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2319      	movs	r3, #25
 8004158:	2201      	movs	r2, #1
 800415a:	496d      	ldr	r1, [pc, #436]	; (8004310 <HAL_I2C_Mem_Write+0x1ec>)
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 fccd 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004168:	2302      	movs	r3, #2
 800416a:	e0cc      	b.n	8004306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_I2C_Mem_Write+0x56>
 8004176:	2302      	movs	r3, #2
 8004178:	e0c5      	b.n	8004306 <HAL_I2C_Mem_Write+0x1e2>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b01      	cmp	r3, #1
 800418e:	d007      	beq.n	80041a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2221      	movs	r2, #33	; 0x21
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a4d      	ldr	r2, [pc, #308]	; (8004314 <HAL_I2C_Mem_Write+0x1f0>)
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041e2:	88f8      	ldrh	r0, [r7, #6]
 80041e4:	893a      	ldrh	r2, [r7, #8]
 80041e6:	8979      	ldrh	r1, [r7, #10]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	4603      	mov	r3, r0
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fb04 	bl	8004800 <I2C_RequestMemoryWrite>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d052      	beq.n	80042a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e081      	b.n	8004306 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fd92 	bl	8004d30 <I2C_WaitOnTXEFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00d      	beq.n	800422e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	2b04      	cmp	r3, #4
 8004218:	d107      	bne.n	800422a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004228:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e06b      	b.n	8004306 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	781a      	ldrb	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b04      	cmp	r3, #4
 800426a:	d11b      	bne.n	80042a4 <HAL_I2C_Mem_Write+0x180>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d017      	beq.n	80042a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1aa      	bne.n	8004202 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 fd85 	bl	8004dc0 <I2C_WaitOnBTFFlagUntilTimeout>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00d      	beq.n	80042d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d107      	bne.n	80042d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e016      	b.n	8004306 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004300:	2300      	movs	r3, #0
 8004302:	e000      	b.n	8004306 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004304:	2302      	movs	r3, #2
  }
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	00100002 	.word	0x00100002
 8004314:	ffff0000 	.word	0xffff0000

08004318 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	; 0x30
 800431c:	af02      	add	r7, sp, #8
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	4608      	mov	r0, r1
 8004322:	4611      	mov	r1, r2
 8004324:	461a      	mov	r2, r3
 8004326:	4603      	mov	r3, r0
 8004328:	817b      	strh	r3, [r7, #10]
 800432a:	460b      	mov	r3, r1
 800432c:	813b      	strh	r3, [r7, #8]
 800432e:	4613      	mov	r3, r2
 8004330:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004336:	f7ff f837 	bl	80033a8 <HAL_GetTick>
 800433a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b20      	cmp	r3, #32
 8004346:	f040 8250 	bne.w	80047ea <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	2319      	movs	r3, #25
 8004350:	2201      	movs	r2, #1
 8004352:	4982      	ldr	r1, [pc, #520]	; (800455c <HAL_I2C_Mem_Read+0x244>)
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 fbd1 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
 8004362:	e243      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_I2C_Mem_Read+0x5a>
 800436e:	2302      	movs	r3, #2
 8004370:	e23c      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d007      	beq.n	8004398 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2222      	movs	r2, #34	; 0x22
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2240      	movs	r2, #64	; 0x40
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29a      	uxth	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a62      	ldr	r2, [pc, #392]	; (8004560 <HAL_I2C_Mem_Read+0x248>)
 80043d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043da:	88f8      	ldrh	r0, [r7, #6]
 80043dc:	893a      	ldrh	r2, [r7, #8]
 80043de:	8979      	ldrh	r1, [r7, #10]
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	4603      	mov	r3, r0
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa9e 	bl	800492c <I2C_RequestMemoryRead>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1f8      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d113      	bne.n	800442a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e1cc      	b.n	80047c4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	2b01      	cmp	r3, #1
 8004430:	d11e      	bne.n	8004470 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004440:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004442:	b672      	cpsid	i
}
 8004444:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800446c:	b662      	cpsie	i
}
 800446e:	e035      	b.n	80044dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004474:	2b02      	cmp	r3, #2
 8004476:	d11e      	bne.n	80044b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004486:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004488:	b672      	cpsid	i
}
 800448a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80044b2:	b662      	cpsie	i
}
 80044b4:	e012      	b.n	80044dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80044dc:	e172      	b.n	80047c4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	f200 811f 	bhi.w	8004726 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d123      	bne.n	8004538 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fcab 	bl	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e173      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691a      	ldr	r2, [r3, #16]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452c:	b29b      	uxth	r3, r3
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004536:	e145      	b.n	80047c4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	2b02      	cmp	r3, #2
 800453e:	d152      	bne.n	80045e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	2200      	movs	r2, #0
 8004548:	4906      	ldr	r1, [pc, #24]	; (8004564 <HAL_I2C_Mem_Read+0x24c>)
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fad6 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d008      	beq.n	8004568 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e148      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
 800455a:	bf00      	nop
 800455c:	00100002 	.word	0x00100002
 8004560:	ffff0000 	.word	0xffff0000
 8004564:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004568:	b672      	cpsid	i
}
 800456a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80045ae:	b662      	cpsie	i
}
 80045b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e4:	e0ee      	b.n	80047c4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	2200      	movs	r2, #0
 80045ee:	4981      	ldr	r1, [pc, #516]	; (80047f4 <HAL_I2C_Mem_Read+0x4dc>)
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 fa83 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0f5      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004610:	b672      	cpsid	i
}
 8004612:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004646:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <HAL_I2C_Mem_Read+0x4e0>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	08db      	lsrs	r3, r3, #3
 800464c:	4a6b      	ldr	r2, [pc, #428]	; (80047fc <HAL_I2C_Mem_Read+0x4e4>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	0a1a      	lsrs	r2, r3, #8
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00da      	lsls	r2, r3, #3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	3b01      	subs	r3, #1
 8004664:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d118      	bne.n	800469e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f043 0220 	orr.w	r2, r3, #32
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800468e:	b662      	cpsie	i
}
 8004690:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0a6      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d1d9      	bne.n	8004660 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046ee:	b662      	cpsie	i
}
 80046f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004724:	e04e      	b.n	80047c4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fb90 	bl	8004e50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e058      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0304 	and.w	r3, r3, #4
 8004776:	2b04      	cmp	r3, #4
 8004778:	d124      	bne.n	80047c4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477e:	2b03      	cmp	r3, #3
 8004780:	d107      	bne.n	8004792 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f ae88 	bne.w	80044de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	00010004 	.word	0x00010004
 80047f8:	20000000 	.word	0x20000000
 80047fc:	14f8b589 	.word	0x14f8b589

08004800 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	4608      	mov	r0, r1
 800480a:	4611      	mov	r1, r2
 800480c:	461a      	mov	r2, r3
 800480e:	4603      	mov	r3, r0
 8004810:	817b      	strh	r3, [r7, #10]
 8004812:	460b      	mov	r3, r1
 8004814:	813b      	strh	r3, [r7, #8]
 8004816:	4613      	mov	r3, r2
 8004818:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2200      	movs	r2, #0
 8004832:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 f960 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00d      	beq.n	800485e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004850:	d103      	bne.n	800485a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e05f      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800486c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800486e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004870:	6a3a      	ldr	r2, [r7, #32]
 8004872:	492d      	ldr	r1, [pc, #180]	; (8004928 <I2C_RequestMemoryWrite+0x128>)
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f9bb 	bl	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e04c      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800489c:	6a39      	ldr	r1, [r7, #32]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fa46 	bl	8004d30 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00d      	beq.n	80048c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d107      	bne.n	80048c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e02b      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048c6:	88fb      	ldrh	r3, [r7, #6]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d105      	bne.n	80048d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048cc:	893b      	ldrh	r3, [r7, #8]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	e021      	b.n	800491c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	b29b      	uxth	r3, r3
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e8:	6a39      	ldr	r1, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fa20 	bl	8004d30 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00d      	beq.n	8004912 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d107      	bne.n	800490e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800490c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e005      	b.n	800491e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004912:	893b      	ldrh	r3, [r7, #8]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	00010002 	.word	0x00010002

0800492c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	4608      	mov	r0, r1
 8004936:	4611      	mov	r1, r2
 8004938:	461a      	mov	r2, r3
 800493a:	4603      	mov	r3, r0
 800493c:	817b      	strh	r3, [r7, #10]
 800493e:	460b      	mov	r3, r1
 8004940:	813b      	strh	r3, [r7, #8]
 8004942:	4613      	mov	r3, r2
 8004944:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004954:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004964:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	2200      	movs	r2, #0
 800496e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f8c2 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00d      	beq.n	800499a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498c:	d103      	bne.n	8004996 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e0aa      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800499a:	897b      	ldrh	r3, [r7, #10]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	6a3a      	ldr	r2, [r7, #32]
 80049ae:	4952      	ldr	r1, [pc, #328]	; (8004af8 <I2C_RequestMemoryRead+0x1cc>)
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f91d 	bl	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e097      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	6a39      	ldr	r1, [r7, #32]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f9a8 	bl	8004d30 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d107      	bne.n	80049fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e076      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d105      	bne.n	8004a14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a08:	893b      	ldrh	r3, [r7, #8]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]
 8004a12:	e021      	b.n	8004a58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a14:	893b      	ldrh	r3, [r7, #8]
 8004a16:	0a1b      	lsrs	r3, r3, #8
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a24:	6a39      	ldr	r1, [r7, #32]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f982 	bl	8004d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d107      	bne.n	8004a4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e050      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4e:	893b      	ldrh	r3, [r7, #8]
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5a:	6a39      	ldr	r1, [r7, #32]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f967 	bl	8004d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d107      	bne.n	8004a80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e035      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f82b 	bl	8004afc <I2C_WaitOnFlagUntilTimeout>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aba:	d103      	bne.n	8004ac4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e013      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ac8:	897b      	ldrh	r3, [r7, #10]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	4906      	ldr	r1, [pc, #24]	; (8004af8 <I2C_RequestMemoryRead+0x1cc>)
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 f886 	bl	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	00010002 	.word	0x00010002

08004afc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b0c:	e048      	b.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b14:	d044      	beq.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b16:	f7fe fc47 	bl	80033a8 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d302      	bcc.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d139      	bne.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10d      	bne.n	8004b52 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4013      	ands	r3, r2
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bf0c      	ite	eq
 8004b48:	2301      	moveq	r3, #1
 8004b4a:	2300      	movne	r3, #0
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	e00c      	b.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	43da      	mvns	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	79fb      	ldrb	r3, [r7, #7]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d116      	bne.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f043 0220 	orr.w	r2, r3, #32
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e023      	b.n	8004be8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10d      	bne.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	43da      	mvns	r2, r3
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf0c      	ite	eq
 8004bbc:	2301      	moveq	r3, #1
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	e00c      	b.n	8004be0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	43da      	mvns	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d093      	beq.n	8004b0e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bfe:	e071      	b.n	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d123      	bne.n	8004c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f043 0204 	orr.w	r2, r3, #4
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e067      	b.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d041      	beq.n	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c60:	f7fe fba2 	bl	80033a8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d302      	bcc.n	8004c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d136      	bne.n	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	0c1b      	lsrs	r3, r3, #16
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d10c      	bne.n	8004c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	43da      	mvns	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf14      	ite	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	2300      	moveq	r3, #0
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	e00b      	b.n	8004cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e021      	b.n	8004d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10c      	bne.n	8004d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	43da      	mvns	r2, r3
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e00b      	b.n	8004d20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	43da      	mvns	r2, r3
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4013      	ands	r3, r2
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	bf14      	ite	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	2300      	moveq	r3, #0
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f47f af6d 	bne.w	8004c00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d3c:	e034      	b.n	8004da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f8e3 	bl	8004f0a <I2C_IsAcknowledgeFailed>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e034      	b.n	8004db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d028      	beq.n	8004da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fe fb27 	bl	80033a8 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d11d      	bne.n	8004da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d76:	2b80      	cmp	r3, #128	; 0x80
 8004d78:	d016      	beq.n	8004da8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e007      	b.n	8004db8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b80      	cmp	r3, #128	; 0x80
 8004db4:	d1c3      	bne.n	8004d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dcc:	e034      	b.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f89b 	bl	8004f0a <I2C_IsAcknowledgeFailed>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e034      	b.n	8004e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d028      	beq.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fe fadf 	bl	80033a8 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11d      	bne.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0304 	and.w	r3, r3, #4
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d016      	beq.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e007      	b.n	8004e48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f003 0304 	and.w	r3, r3, #4
 8004e42:	2b04      	cmp	r3, #4
 8004e44:	d1c3      	bne.n	8004dce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e5c:	e049      	b.n	8004ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d119      	bne.n	8004ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0210 	mvn.w	r2, #16
 8004e74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e030      	b.n	8004f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea0:	f7fe fa82 	bl	80033a8 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d302      	bcc.n	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11d      	bne.n	8004ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b40      	cmp	r3, #64	; 0x40
 8004ec2:	d016      	beq.n	8004ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	f043 0220 	orr.w	r2, r3, #32
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e007      	b.n	8004f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efc:	2b40      	cmp	r3, #64	; 0x40
 8004efe:	d1ae      	bne.n	8004e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f20:	d11b      	bne.n	8004f5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f043 0204 	orr.w	r2, r3, #4
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr
	...

08004f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e272      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 8087 	beq.w	8005096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f88:	4b92      	ldr	r3, [pc, #584]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 030c 	and.w	r3, r3, #12
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d00c      	beq.n	8004fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004f94:	4b8f      	ldr	r3, [pc, #572]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f003 030c 	and.w	r3, r3, #12
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d112      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x5e>
 8004fa0:	4b8c      	ldr	r3, [pc, #560]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fac:	d10b      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fae:	4b89      	ldr	r3, [pc, #548]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d06c      	beq.n	8005094 <HAL_RCC_OscConfig+0x12c>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d168      	bne.n	8005094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e24c      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fce:	d106      	bne.n	8004fde <HAL_RCC_OscConfig+0x76>
 8004fd0:	4b80      	ldr	r3, [pc, #512]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a7f      	ldr	r2, [pc, #508]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	e02e      	b.n	800503c <HAL_RCC_OscConfig+0xd4>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x98>
 8004fe6:	4b7b      	ldr	r3, [pc, #492]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7a      	ldr	r2, [pc, #488]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4b78      	ldr	r3, [pc, #480]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a77      	ldr	r2, [pc, #476]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8004ff8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xd4>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0xbc>
 800500a:	4b72      	ldr	r3, [pc, #456]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a71      	ldr	r2, [pc, #452]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b6f      	ldr	r3, [pc, #444]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6e      	ldr	r2, [pc, #440]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xd4>
 8005024:	4b6b      	ldr	r3, [pc, #428]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6a      	ldr	r2, [pc, #424]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b68      	ldr	r3, [pc, #416]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a67      	ldr	r2, [pc, #412]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fe f9b0 	bl	80033a8 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fe f9ac 	bl	80033a8 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e200      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b5d      	ldr	r3, [pc, #372]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xe4>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fe f99c 	bl	80033a8 <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7fe f998 	bl	80033a8 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1ec      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005086:	4b53      	ldr	r3, [pc, #332]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0x10c>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050a2:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80050ae:	4b49      	ldr	r3, [pc, #292]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x18c>
 80050ba:	4b46      	ldr	r3, [pc, #280]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	4b43      	ldr	r3, [pc, #268]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x176>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e1c0      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b3d      	ldr	r3, [pc, #244]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4939      	ldr	r1, [pc, #228]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	e03a      	b.n	800516a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fc:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <HAL_RCC_OscConfig+0x270>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7fe f951 	bl	80033a8 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510a:	f7fe f94d 	bl	80033a8 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1a1      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511c:	4b2d      	ldr	r3, [pc, #180]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4927      	ldr	r1, [pc, #156]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	e015      	b.n	800516a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513e:	4b26      	ldr	r3, [pc, #152]	; (80051d8 <HAL_RCC_OscConfig+0x270>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fe f930 	bl	80033a8 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fe f92c 	bl	80033a8 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e180      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	4b1d      	ldr	r3, [pc, #116]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d03a      	beq.n	80051ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d019      	beq.n	80051b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <HAL_RCC_OscConfig+0x274>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005184:	f7fe f910 	bl	80033a8 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518c:	f7fe f90c 	bl	80033a8 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e160      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <HAL_RCC_OscConfig+0x26c>)
 80051a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80051aa:	2001      	movs	r0, #1
 80051ac:	f000 face 	bl	800574c <RCC_Delay>
 80051b0:	e01c      	b.n	80051ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b2:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <HAL_RCC_OscConfig+0x274>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b8:	f7fe f8f6 	bl	80033a8 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051be:	e00f      	b.n	80051e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051c0:	f7fe f8f2 	bl	80033a8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d908      	bls.n	80051e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e146      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
 80051d2:	bf00      	nop
 80051d4:	40021000 	.word	0x40021000
 80051d8:	42420000 	.word	0x42420000
 80051dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e0:	4b92      	ldr	r3, [pc, #584]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e9      	bne.n	80051c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 80a6 	beq.w	8005346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fe:	4b8b      	ldr	r3, [pc, #556]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10d      	bne.n	8005226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	4b88      	ldr	r3, [pc, #544]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	4a87      	ldr	r2, [pc, #540]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005214:	61d3      	str	r3, [r2, #28]
 8005216:	4b85      	ldr	r3, [pc, #532]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005222:	2301      	movs	r3, #1
 8005224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	4b82      	ldr	r3, [pc, #520]	; (8005430 <HAL_RCC_OscConfig+0x4c8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d118      	bne.n	8005264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005232:	4b7f      	ldr	r3, [pc, #508]	; (8005430 <HAL_RCC_OscConfig+0x4c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a7e      	ldr	r2, [pc, #504]	; (8005430 <HAL_RCC_OscConfig+0x4c8>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523e:	f7fe f8b3 	bl	80033a8 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005246:	f7fe f8af 	bl	80033a8 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b64      	cmp	r3, #100	; 0x64
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e103      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005258:	4b75      	ldr	r3, [pc, #468]	; (8005430 <HAL_RCC_OscConfig+0x4c8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0f0      	beq.n	8005246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d106      	bne.n	800527a <HAL_RCC_OscConfig+0x312>
 800526c:	4b6f      	ldr	r3, [pc, #444]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	4a6e      	ldr	r2, [pc, #440]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005272:	f043 0301 	orr.w	r3, r3, #1
 8005276:	6213      	str	r3, [r2, #32]
 8005278:	e02d      	b.n	80052d6 <HAL_RCC_OscConfig+0x36e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10c      	bne.n	800529c <HAL_RCC_OscConfig+0x334>
 8005282:	4b6a      	ldr	r3, [pc, #424]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	4a69      	ldr	r2, [pc, #420]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005288:	f023 0301 	bic.w	r3, r3, #1
 800528c:	6213      	str	r3, [r2, #32]
 800528e:	4b67      	ldr	r3, [pc, #412]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	4a66      	ldr	r2, [pc, #408]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005294:	f023 0304 	bic.w	r3, r3, #4
 8005298:	6213      	str	r3, [r2, #32]
 800529a:	e01c      	b.n	80052d6 <HAL_RCC_OscConfig+0x36e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d10c      	bne.n	80052be <HAL_RCC_OscConfig+0x356>
 80052a4:	4b61      	ldr	r3, [pc, #388]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	4a60      	ldr	r2, [pc, #384]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6213      	str	r3, [r2, #32]
 80052b0:	4b5e      	ldr	r3, [pc, #376]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	4a5d      	ldr	r2, [pc, #372]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6213      	str	r3, [r2, #32]
 80052bc:	e00b      	b.n	80052d6 <HAL_RCC_OscConfig+0x36e>
 80052be:	4b5b      	ldr	r3, [pc, #364]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	4a5a      	ldr	r2, [pc, #360]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6213      	str	r3, [r2, #32]
 80052ca:	4b58      	ldr	r3, [pc, #352]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	4a57      	ldr	r2, [pc, #348]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d015      	beq.n	800530a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052de:	f7fe f863 	bl	80033a8 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fe f85f 	bl	80033a8 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0b1      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fc:	4b4b      	ldr	r3, [pc, #300]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ee      	beq.n	80052e6 <HAL_RCC_OscConfig+0x37e>
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7fe f84d 	bl	80033a8 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fe f849 	bl	80033a8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e09b      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005328:	4b40      	ldr	r3, [pc, #256]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4b3c      	ldr	r3, [pc, #240]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	4a3b      	ldr	r2, [pc, #236]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 8087 	beq.w	800545e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005350:	4b36      	ldr	r3, [pc, #216]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d061      	beq.n	8005420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d146      	bne.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCC_OscConfig+0x4cc>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fe f81d 	bl	80033a8 <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005372:	f7fe f819 	bl	80033a8 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e06d      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005384:	4b29      	ldr	r3, [pc, #164]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005398:	d108      	bne.n	80053ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800539a:	4b24      	ldr	r3, [pc, #144]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	4921      	ldr	r1, [pc, #132]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ac:	4b1f      	ldr	r3, [pc, #124]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a19      	ldr	r1, [r3, #32]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	430b      	orrs	r3, r1
 80053be:	491b      	ldr	r1, [pc, #108]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c4:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <HAL_RCC_OscConfig+0x4cc>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ca:	f7fd ffed 	bl	80033a8 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fd ffe9 	bl	80033a8 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e03d      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80053e4:	4b11      	ldr	r3, [pc, #68]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0f0      	beq.n	80053d2 <HAL_RCC_OscConfig+0x46a>
 80053f0:	e035      	b.n	800545e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f2:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCC_OscConfig+0x4cc>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fd ffd6 	bl	80033a8 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005400:	f7fd ffd2 	bl	80033a8 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e026      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005412:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCC_OscConfig+0x4c4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1f0      	bne.n	8005400 <HAL_RCC_OscConfig+0x498>
 800541e:	e01e      	b.n	800545e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d107      	bne.n	8005438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e019      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
 800542c:	40021000 	.word	0x40021000
 8005430:	40007000 	.word	0x40007000
 8005434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005438:	4b0b      	ldr	r3, [pc, #44]	; (8005468 <HAL_RCC_OscConfig+0x500>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	429a      	cmp	r2, r3
 800544a:	d106      	bne.n	800545a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	429a      	cmp	r2, r3
 8005458:	d001      	beq.n	800545e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40021000 	.word	0x40021000

0800546c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0d0      	b.n	8005622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005480:	4b6a      	ldr	r3, [pc, #424]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d910      	bls.n	80054b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b67      	ldr	r3, [pc, #412]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 0207 	bic.w	r2, r3, #7
 8005496:	4965      	ldr	r1, [pc, #404]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4313      	orrs	r3, r2
 800549c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800549e:	4b63      	ldr	r3, [pc, #396]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d001      	beq.n	80054b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0b8      	b.n	8005622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d020      	beq.n	80054fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d005      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c8:	4b59      	ldr	r3, [pc, #356]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4a58      	ldr	r2, [pc, #352]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80054ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80054d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d005      	beq.n	80054ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e0:	4b53      	ldr	r3, [pc, #332]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4a52      	ldr	r2, [pc, #328]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80054e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80054ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054ec:	4b50      	ldr	r3, [pc, #320]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	494d      	ldr	r1, [pc, #308]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b00      	cmp	r3, #0
 8005508:	d040      	beq.n	800558c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d107      	bne.n	8005522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005512:	4b47      	ldr	r3, [pc, #284]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d115      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e07f      	b.n	8005622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	2b02      	cmp	r3, #2
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552a:	4b41      	ldr	r3, [pc, #260]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e073      	b.n	8005622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553a:	4b3d      	ldr	r3, [pc, #244]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e06b      	b.n	8005622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554a:	4b39      	ldr	r3, [pc, #228]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f023 0203 	bic.w	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4936      	ldr	r1, [pc, #216]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800555c:	f7fd ff24 	bl	80033a8 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	e00a      	b.n	800557a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005564:	f7fd ff20 	bl	80033a8 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e053      	b.n	8005622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f003 020c 	and.w	r2, r3, #12
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	429a      	cmp	r2, r3
 800558a:	d1eb      	bne.n	8005564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800558c:	4b27      	ldr	r3, [pc, #156]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d210      	bcs.n	80055bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 0207 	bic.w	r2, r3, #7
 80055a2:	4922      	ldr	r1, [pc, #136]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b20      	ldr	r3, [pc, #128]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e032      	b.n	8005622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d008      	beq.n	80055da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	4916      	ldr	r1, [pc, #88]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0308 	and.w	r3, r3, #8
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d009      	beq.n	80055fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80055e6:	4b12      	ldr	r3, [pc, #72]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	490e      	ldr	r1, [pc, #56]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80055fa:	f000 f821 	bl	8005640 <HAL_RCC_GetSysClockFreq>
 80055fe:	4602      	mov	r2, r0
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	091b      	lsrs	r3, r3, #4
 8005606:	f003 030f 	and.w	r3, r3, #15
 800560a:	490a      	ldr	r1, [pc, #40]	; (8005634 <HAL_RCC_ClockConfig+0x1c8>)
 800560c:	5ccb      	ldrb	r3, [r1, r3]
 800560e:	fa22 f303 	lsr.w	r3, r2, r3
 8005612:	4a09      	ldr	r2, [pc, #36]	; (8005638 <HAL_RCC_ClockConfig+0x1cc>)
 8005614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005616:	4b09      	ldr	r3, [pc, #36]	; (800563c <HAL_RCC_ClockConfig+0x1d0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7fd fe82 	bl	8003324 <HAL_InitTick>

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40022000 	.word	0x40022000
 8005630:	40021000 	.word	0x40021000
 8005634:	0800bc50 	.word	0x0800bc50
 8005638:	20000000 	.word	0x20000000
 800563c:	20000004 	.word	0x20000004

08005640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	2300      	movs	r3, #0
 8005654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800565a:	4b1e      	ldr	r3, [pc, #120]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b04      	cmp	r3, #4
 8005668:	d002      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0x30>
 800566a:	2b08      	cmp	r3, #8
 800566c:	d003      	beq.n	8005676 <HAL_RCC_GetSysClockFreq+0x36>
 800566e:	e027      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005670:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005672:	613b      	str	r3, [r7, #16]
      break;
 8005674:	e027      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	0c9b      	lsrs	r3, r3, #18
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	4a17      	ldr	r2, [pc, #92]	; (80056dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8005680:	5cd3      	ldrb	r3, [r2, r3]
 8005682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d010      	beq.n	80056b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800568e:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	0c5b      	lsrs	r3, r3, #17
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800569a:	5cd3      	ldrb	r3, [r2, r3]
 800569c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a0d      	ldr	r2, [pc, #52]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80056a2:	fb03 f202 	mul.w	r2, r3, r2
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e004      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056b4:	fb02 f303 	mul.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	613b      	str	r3, [r7, #16]
      break;
 80056be:	e002      	b.n	80056c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80056c2:	613b      	str	r3, [r7, #16]
      break;
 80056c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056c6:	693b      	ldr	r3, [r7, #16]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40021000 	.word	0x40021000
 80056d8:	007a1200 	.word	0x007a1200
 80056dc:	0800bc68 	.word	0x0800bc68
 80056e0:	0800bc78 	.word	0x0800bc78
 80056e4:	003d0900 	.word	0x003d0900

080056e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056ec:	4b02      	ldr	r3, [pc, #8]	; (80056f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80056ee:	681b      	ldr	r3, [r3, #0]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bc80      	pop	{r7}
 80056f6:	4770      	bx	lr
 80056f8:	20000000 	.word	0x20000000

080056fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005700:	f7ff fff2 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 8005704:	4602      	mov	r2, r0
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	4903      	ldr	r1, [pc, #12]	; (8005720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005712:	5ccb      	ldrb	r3, [r1, r3]
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005718:	4618      	mov	r0, r3
 800571a:	bd80      	pop	{r7, pc}
 800571c:	40021000 	.word	0x40021000
 8005720:	0800bc60 	.word	0x0800bc60

08005724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005728:	f7ff ffde 	bl	80056e8 <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b05      	ldr	r3, [pc, #20]	; (8005744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	0adb      	lsrs	r3, r3, #11
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4903      	ldr	r1, [pc, #12]	; (8005748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000
 8005748:	0800bc60 	.word	0x0800bc60

0800574c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <RCC_Delay+0x34>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a0a      	ldr	r2, [pc, #40]	; (8005784 <RCC_Delay+0x38>)
 800575a:	fba2 2303 	umull	r2, r3, r2, r3
 800575e:	0a5b      	lsrs	r3, r3, #9
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005768:	bf00      	nop
  }
  while (Delay --);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	1e5a      	subs	r2, r3, #1
 800576e:	60fa      	str	r2, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f9      	bne.n	8005768 <RCC_Delay+0x1c>
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr
 8005780:	20000000 	.word	0x20000000
 8005784:	10624dd3 	.word	0x10624dd3

08005788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e041      	b.n	800581e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fd f85a 	bl	8002868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f000 fc18 	bl	8005ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d001      	beq.n	8005840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e03a      	b.n	80058b6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a18      	ldr	r2, [pc, #96]	; (80058c0 <HAL_TIM_Base_Start_IT+0x98>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x58>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d009      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x58>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a14      	ldr	r2, [pc, #80]	; (80058c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_Base_Start_IT+0x58>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d111      	bne.n	80058a4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b06      	cmp	r3, #6
 8005890:	d010      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0201 	orr.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	e007      	b.n	80058b4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 0201 	orr.w	r2, r2, #1
 80058b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr
 80058c0:	40012c00 	.word	0x40012c00
 80058c4:	40000400 	.word	0x40000400
 80058c8:	40000800 	.word	0x40000800

080058cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e041      	b.n	8005962 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d106      	bne.n	80058f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f839 	bl	800596a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f000 fb76 	bl	8005ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	bc80      	pop	{r7}
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <HAL_TIM_PWM_Start+0x24>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	bf14      	ite	ne
 8005998:	2301      	movne	r3, #1
 800599a:	2300      	moveq	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	e022      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d109      	bne.n	80059ba <HAL_TIM_PWM_Start+0x3e>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	bf14      	ite	ne
 80059b2:	2301      	movne	r3, #1
 80059b4:	2300      	moveq	r3, #0
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	e015      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d109      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x58>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e008      	b.n	80059e6 <HAL_TIM_PWM_Start+0x6a>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b01      	cmp	r3, #1
 80059de:	bf14      	ite	ne
 80059e0:	2301      	movne	r3, #1
 80059e2:	2300      	moveq	r3, #0
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e05e      	b.n	8005aac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0x82>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fc:	e013      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d104      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x92>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a0c:	e00b      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d104      	bne.n	8005a1e <HAL_TIM_PWM_Start+0xa2>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a1c:	e003      	b.n	8005a26 <HAL_TIM_PWM_Start+0xaa>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fd70 	bl	8006514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a1e      	ldr	r2, [pc, #120]	; (8005ab4 <HAL_TIM_PWM_Start+0x138>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d107      	bne.n	8005a4e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <HAL_TIM_PWM_Start+0x138>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_TIM_PWM_Start+0xfa>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a60:	d009      	beq.n	8005a76 <HAL_TIM_PWM_Start+0xfa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <HAL_TIM_PWM_Start+0x13c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_TIM_PWM_Start+0xfa>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a12      	ldr	r2, [pc, #72]	; (8005abc <HAL_TIM_PWM_Start+0x140>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d111      	bne.n	8005a9a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b06      	cmp	r3, #6
 8005a86:	d010      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a98:	e007      	b.n	8005aaa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800

08005ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d020      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01b      	beq.n	8005b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0202 	mvn.w	r2, #2
 8005af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa5a 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fa4d 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa5c 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d020      	beq.n	8005b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01b      	beq.n	8005b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0204 	mvn.w	r2, #4
 8005b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa34 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 8005b5c:	e005      	b.n	8005b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa27 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fa36 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d020      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0208 	mvn.w	r2, #8
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2204      	movs	r2, #4
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa0e 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa01 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa10 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d020      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01b      	beq.n	8005c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0210 	mvn.w	r2, #16
 8005bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2208      	movs	r2, #8
 8005bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f9e8 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
 8005bf4:	e005      	b.n	8005c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9db 	bl	8005fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f9ea 	bl	8005fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00c      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0201 	mvn.w	r2, #1
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7fb fcd2 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00c      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d007      	beq.n	8005c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fced 	bl	800662a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00c      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d007      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9ba 	bl	8005fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00c      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f06f 0220 	mvn.w	r2, #32
 8005c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fcc0 	bl	8006618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e0ae      	b.n	8005e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	f200 809f 	bhi.w	8005e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cce:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd4:	08005d09 	.word	0x08005d09
 8005cd8:	08005e0d 	.word	0x08005e0d
 8005cdc:	08005e0d 	.word	0x08005e0d
 8005ce0:	08005e0d 	.word	0x08005e0d
 8005ce4:	08005d49 	.word	0x08005d49
 8005ce8:	08005e0d 	.word	0x08005e0d
 8005cec:	08005e0d 	.word	0x08005e0d
 8005cf0:	08005e0d 	.word	0x08005e0d
 8005cf4:	08005d8b 	.word	0x08005d8b
 8005cf8:	08005e0d 	.word	0x08005e0d
 8005cfc:	08005e0d 	.word	0x08005e0d
 8005d00:	08005e0d 	.word	0x08005e0d
 8005d04:	08005dcb 	.word	0x08005dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f9e2 	bl	80060d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0208 	orr.w	r2, r2, #8
 8005d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0204 	bic.w	r2, r2, #4
 8005d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	430a      	orrs	r2, r1
 8005d44:	619a      	str	r2, [r3, #24]
      break;
 8005d46:	e064      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fa28 	bl	80061a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	699a      	ldr	r2, [r3, #24]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6999      	ldr	r1, [r3, #24]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	021a      	lsls	r2, r3, #8
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	619a      	str	r2, [r3, #24]
      break;
 8005d88:	e043      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fa71 	bl	8006278 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0208 	orr.w	r2, r2, #8
 8005da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0204 	bic.w	r2, r2, #4
 8005db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69d9      	ldr	r1, [r3, #28]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691a      	ldr	r2, [r3, #16]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	61da      	str	r2, [r3, #28]
      break;
 8005dc8:	e023      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68b9      	ldr	r1, [r7, #8]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fabb 	bl	800634c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	69da      	ldr	r2, [r3, #28]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	69da      	ldr	r2, [r3, #28]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	69d9      	ldr	r1, [r3, #28]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	021a      	lsls	r2, r3, #8
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	61da      	str	r2, [r3, #28]
      break;
 8005e0a:	e002      	b.n	8005e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e0b4      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x186>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e78:	d03e      	beq.n	8005ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7e:	f200 8087 	bhi.w	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e86:	f000 8086 	beq.w	8005f96 <HAL_TIM_ConfigClockSource+0x172>
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8e:	d87f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005e90:	2b70      	cmp	r3, #112	; 0x70
 8005e92:	d01a      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0xa6>
 8005e94:	2b70      	cmp	r3, #112	; 0x70
 8005e96:	d87b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d050      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x11a>
 8005e9c:	2b60      	cmp	r3, #96	; 0x60
 8005e9e:	d877      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b50      	cmp	r3, #80	; 0x50
 8005ea2:	d03c      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0xfa>
 8005ea4:	2b50      	cmp	r3, #80	; 0x50
 8005ea6:	d873      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d058      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0x13a>
 8005eac:	2b40      	cmp	r3, #64	; 0x40
 8005eae:	d86f      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b30      	cmp	r3, #48	; 0x30
 8005eb2:	d064      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d86b      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b20      	cmp	r3, #32
 8005eba:	d060      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d867      	bhi.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d05c      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d05a      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x15a>
 8005ec8:	e062      	b.n	8005f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eda:	f000 fafc 	bl	80064d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	609a      	str	r2, [r3, #8]
      break;
 8005ef6:	e04f      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f08:	f000 fae5 	bl	80064d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1a:	609a      	str	r2, [r3, #8]
      break;
 8005f1c:	e03c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 fa5c 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2150      	movs	r1, #80	; 0x50
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fab3 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e02c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	f000 fa7a 	bl	8006444 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2160      	movs	r1, #96	; 0x60
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 faa3 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005f5c:	e01c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f000 fa3c 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2140      	movs	r1, #64	; 0x40
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 fa93 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e00c      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4619      	mov	r1, r3
 8005f88:	4610      	mov	r0, r2
 8005f8a:	f000 fa8a 	bl	80064a2 <TIM_ITRx_SetConfig>
      break;
 8005f8e:	e003      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	73fb      	strb	r3, [r7, #15]
      break;
 8005f94:	e000      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bc80      	pop	{r7}
 8005ff8:	4770      	bx	lr
	...

08005ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a2f      	ldr	r2, [pc, #188]	; (80060cc <TIM_Base_SetConfig+0xd0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_Base_SetConfig+0x30>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d007      	beq.n	800602c <TIM_Base_SetConfig+0x30>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2c      	ldr	r2, [pc, #176]	; (80060d0 <TIM_Base_SetConfig+0xd4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0x30>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2b      	ldr	r2, [pc, #172]	; (80060d4 <TIM_Base_SetConfig+0xd8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a22      	ldr	r2, [pc, #136]	; (80060cc <TIM_Base_SetConfig+0xd0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_Base_SetConfig+0x62>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604c:	d007      	beq.n	800605e <TIM_Base_SetConfig+0x62>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <TIM_Base_SetConfig+0xd4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_Base_SetConfig+0x62>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1e      	ldr	r2, [pc, #120]	; (80060d4 <TIM_Base_SetConfig+0xd8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d108      	bne.n	8006070 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689a      	ldr	r2, [r3, #8]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <TIM_Base_SetConfig+0xd0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d103      	bne.n	80060a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d005      	beq.n	80060c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	611a      	str	r2, [r3, #16]
  }
}
 80060c2:	bf00      	nop
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40000400 	.word	0x40000400
 80060d4:	40000800 	.word	0x40000800

080060d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f023 0201 	bic.w	r2, r3, #1
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 0302 	bic.w	r3, r3, #2
 8006120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a1c      	ldr	r2, [pc, #112]	; (80061a0 <TIM_OC1_SetConfig+0xc8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d10c      	bne.n	800614e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f023 0308 	bic.w	r3, r3, #8
 800613a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 0304 	bic.w	r3, r3, #4
 800614c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <TIM_OC1_SetConfig+0xc8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d111      	bne.n	800617a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800615c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4313      	orrs	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	621a      	str	r2, [r3, #32]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	40012c00 	.word	0x40012c00

080061a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f023 0210 	bic.w	r2, r3, #16
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f023 0320 	bic.w	r3, r3, #32
 80061ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <TIM_OC2_SetConfig+0xd0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d10d      	bne.n	8006220 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a14      	ldr	r2, [pc, #80]	; (8006274 <TIM_OC2_SetConfig+0xd0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d113      	bne.n	8006250 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800622e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	699b      	ldr	r3, [r3, #24]
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr
 8006274:	40012c00 	.word	0x40012c00

08006278 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006278:	b480      	push	{r7}
 800627a:	b087      	sub	sp, #28
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	021b      	lsls	r3, r3, #8
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a1d      	ldr	r2, [pc, #116]	; (8006348 <TIM_OC3_SetConfig+0xd0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d10d      	bne.n	80062f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a14      	ldr	r2, [pc, #80]	; (8006348 <TIM_OC3_SetConfig+0xd0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d113      	bne.n	8006322 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	011b      	lsls	r3, r3, #4
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	693a      	ldr	r2, [r7, #16]
 8006326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685a      	ldr	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	697a      	ldr	r2, [r7, #20]
 800633a:	621a      	str	r2, [r3, #32]
}
 800633c:	bf00      	nop
 800633e:	371c      	adds	r7, #28
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00

0800634c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	021b      	lsls	r3, r3, #8
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	031b      	lsls	r3, r3, #12
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a0f      	ldr	r2, [pc, #60]	; (80063e4 <TIM_OC4_SetConfig+0x98>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d109      	bne.n	80063c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr
 80063e4:	40012c00 	.word	0x40012c00

080063e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0201 	bic.w	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 030a 	bic.w	r3, r3, #10
 8006424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	bc80      	pop	{r7}
 8006442:	4770      	bx	lr

08006444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006444:	b480      	push	{r7}
 8006446:	b087      	sub	sp, #28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f023 0210 	bic.w	r2, r3, #16
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800646e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	031b      	lsls	r3, r3, #12
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006480:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	621a      	str	r2, [r3, #32]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	f043 0307 	orr.w	r3, r3, #7
 80064c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	609a      	str	r2, [r3, #8]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr

080064d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b087      	sub	sp, #28
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	021a      	lsls	r2, r3, #8
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	431a      	orrs	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	609a      	str	r2, [r3, #8]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	bc80      	pop	{r7}
 8006512:	4770      	bx	lr

08006514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	43db      	mvns	r3, r3
 8006536:	401a      	ands	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	431a      	orrs	r2, r3
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr

0800655c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006570:	2302      	movs	r3, #2
 8006572:	e046      	b.n	8006602 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2202      	movs	r2, #2
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a16      	ldr	r2, [pc, #88]	; (800660c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c0:	d009      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a12      	ldr	r2, [pc, #72]	; (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a10      	ldr	r2, [pc, #64]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10c      	bne.n	80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40000400 	.word	0x40000400
 8006614:	40000800 	.word	0x40000800

08006618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	bc80      	pop	{r7}
 8006628:	4770      	bx	lr

0800662a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e042      	b.n	80066d4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d106      	bne.n	8006668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f7fc fc6e 	bl	8002f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2224      	movs	r2, #36	; 0x24
 800666c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800667e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f845 	bl	8007710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	691a      	ldr	r2, [r3, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695a      	ldr	r2, [r3, #20]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2220      	movs	r2, #32
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	4613      	mov	r3, r2
 80066ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d175      	bne.n	80067e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d002      	beq.n	8006708 <HAL_UART_Transmit+0x2c>
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e06e      	b.n	80067ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2221      	movs	r2, #33	; 0x21
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800671a:	f7fc fe45 	bl	80033a8 <HAL_GetTick>
 800671e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	88fa      	ldrh	r2, [r7, #6]
 800672a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	d108      	bne.n	8006748 <HAL_UART_Transmit+0x6c>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d104      	bne.n	8006748 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	61bb      	str	r3, [r7, #24]
 8006746:	e003      	b.n	8006750 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006750:	e02e      	b.n	80067b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	2180      	movs	r1, #128	; 0x80
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fd22 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e03a      	b.n	80067ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10b      	bne.n	8006792 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	461a      	mov	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006788:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	3302      	adds	r3, #2
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	e007      	b.n	80067a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	781a      	ldrb	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	3301      	adds	r3, #1
 80067a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1cb      	bne.n	8006752 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2200      	movs	r2, #0
 80067c2:	2140      	movs	r1, #64	; 0x40
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fcee 	bl	80071a6 <UART_WaitOnFlagUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e006      	b.n	80067ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	e000      	b.n	80067ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80067e8:	2302      	movs	r3, #2
  }
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3720      	adds	r7, #32
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b08c      	sub	sp, #48	; 0x30
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b20      	cmp	r3, #32
 800680c:	d156      	bne.n	80068bc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_UART_Transmit_DMA+0x26>
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e04f      	b.n	80068be <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	88fa      	ldrh	r2, [r7, #6]
 8006828:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	88fa      	ldrh	r2, [r7, #6]
 800682e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2221      	movs	r2, #33	; 0x21
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006842:	4a21      	ldr	r2, [pc, #132]	; (80068c8 <HAL_UART_Transmit_DMA+0xd4>)
 8006844:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	4a20      	ldr	r2, [pc, #128]	; (80068cc <HAL_UART_Transmit_DMA+0xd8>)
 800684c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	4a1f      	ldr	r2, [pc, #124]	; (80068d0 <HAL_UART_Transmit_DMA+0xdc>)
 8006854:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	2200      	movs	r2, #0
 800685c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800685e:	f107 0308 	add.w	r3, r7, #8
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686a:	6819      	ldr	r1, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3304      	adds	r3, #4
 8006872:	461a      	mov	r2, r3
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	f7fc ff2d 	bl	80036d4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006882:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3314      	adds	r3, #20
 800688a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	617b      	str	r3, [r7, #20]
   return(result);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3314      	adds	r3, #20
 80068a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a4:	627a      	str	r2, [r7, #36]	; 0x24
 80068a6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	6a39      	ldr	r1, [r7, #32]
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e5      	bne.n	8006884 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	e000      	b.n	80068be <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
  }
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3730      	adds	r7, #48	; 0x30
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	08006ef5 	.word	0x08006ef5
 80068cc:	08006f8f 	.word	0x08006f8f
 80068d0:	08007113 	.word	0x08007113

080068d4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b20      	cmp	r3, #32
 80068ec:	d146      	bne.n	800697c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80068f4:	88fb      	ldrh	r3, [r7, #6]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e03f      	b.n	800697e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800690a:	88fb      	ldrh	r3, [r7, #6]
 800690c:	461a      	mov	r2, r3
 800690e:	68b9      	ldr	r1, [r7, #8]
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fca1 	bl	8007258 <UART_Start_Receive_DMA>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	2b01      	cmp	r3, #1
 8006922:	d125      	bne.n	8006970 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006924:	2300      	movs	r3, #0
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	617b      	str	r3, [r7, #20]
   return(result);
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f043 0310 	orr.w	r3, r3, #16
 8006950:	62bb      	str	r3, [r7, #40]	; 0x28
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695a:	627a      	str	r2, [r7, #36]	; 0x24
 800695c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6a39      	ldr	r1, [r7, #32]
 8006960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	61fb      	str	r3, [r7, #28]
   return(result);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e5      	bne.n	800693a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800696e:	e002      	b.n	8006976 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8006976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800697a:	e000      	b.n	800697e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800697c:	2302      	movs	r3, #2
  }
}
 800697e:	4618      	mov	r0, r3
 8006980:	3730      	adds	r7, #48	; 0x30
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b0ba      	sub	sp, #232	; 0xe8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069be:	f003 030f 	and.w	r3, r3, #15
 80069c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80069c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10f      	bne.n	80069ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d009      	beq.n	80069ee <HAL_UART_IRQHandler+0x66>
 80069da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fdd4 	bl	8007594 <UART_Receive_IT>
      return;
 80069ec:	e25b      	b.n	8006ea6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 80de 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x22c>
 80069f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80d1 	beq.w	8006bb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <HAL_UART_IRQHandler+0xae>
 8006a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f003 0304 	and.w	r3, r3, #4
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <HAL_UART_IRQHandler+0xd2>
 8006a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	f043 0202 	orr.w	r2, r3, #2
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <HAL_UART_IRQHandler+0xf6>
 8006a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	f043 0204 	orr.w	r2, r3, #4
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d011      	beq.n	8006aae <HAL_UART_IRQHandler+0x126>
 8006a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d105      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa6:	f043 0208 	orr.w	r2, r3, #8
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 81f2 	beq.w	8006e9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d008      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x14e>
 8006ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fd5f 	bl	8007594 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bf14      	ite	ne
 8006ae4:	2301      	movne	r3, #1
 8006ae6:	2300      	moveq	r3, #0
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <HAL_UART_IRQHandler+0x17a>
 8006afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d04f      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fc69 	bl	80073da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d041      	beq.n	8006b9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3314      	adds	r3, #20
 8006b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3314      	adds	r3, #20
 8006b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b52:	e841 2300 	strex	r3, r2, [r1]
 8006b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1d9      	bne.n	8006b16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d013      	beq.n	8006b92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	4a7e      	ldr	r2, [pc, #504]	; (8006d68 <HAL_UART_IRQHandler+0x3e0>)
 8006b70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fc fe48 	bl	800380c <HAL_DMA_Abort_IT>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d016      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	e00e      	b.n	8006bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9a5 	bl	8006ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b98:	e00a      	b.n	8006bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9a1 	bl	8006ee2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba0:	e006      	b.n	8006bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 f99d 	bl	8006ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006bae:	e175      	b.n	8006e9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb0:	bf00      	nop
    return;
 8006bb2:	e173      	b.n	8006e9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	f040 814f 	bne.w	8006e5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc2:	f003 0310 	and.w	r3, r3, #16
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 8148 	beq.w	8006e5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bd0:	f003 0310 	and.w	r3, r3, #16
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8141 	beq.w	8006e5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80b6 	beq.w	8006d6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8145 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	f080 813e 	bcs.w	8006ea0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	f000 8088 	beq.w	8006d48 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006c64:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c70:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1d9      	bne.n	8006c38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3314      	adds	r3, #20
 8006c8a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c8e:	e853 3f00 	ldrex	r3, [r3]
 8006c92:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3314      	adds	r3, #20
 8006ca4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ca8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e1      	bne.n	8006c84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3314      	adds	r3, #20
 8006cc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3314      	adds	r3, #20
 8006ce0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ce4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ce6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cec:	e841 2300 	strex	r3, r2, [r1]
 8006cf0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1e3      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2220      	movs	r2, #32
 8006cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	330c      	adds	r3, #12
 8006d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d18:	f023 0310 	bic.w	r3, r3, #16
 8006d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006d2a:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d2c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e3      	bne.n	8006d06 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fc fd26 	bl	8003794 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7fb feb4 	bl	8002acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d64:	e09c      	b.n	8006ea0 <HAL_UART_IRQHandler+0x518>
 8006d66:	bf00      	nop
 8006d68:	0800749f 	.word	0x0800749f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 808e 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8089 	beq.w	8006ea4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	330c      	adds	r3, #12
 8006d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9c:	e853 3f00 	ldrex	r3, [r3]
 8006da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	330c      	adds	r3, #12
 8006db2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006db6:	647a      	str	r2, [r7, #68]	; 0x44
 8006db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1e3      	bne.n	8006d92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	3314      	adds	r3, #20
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	e853 3f00 	ldrex	r3, [r3]
 8006dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	3314      	adds	r3, #20
 8006dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dee:	633a      	str	r2, [r7, #48]	; 0x30
 8006df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1e3      	bne.n	8006dca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	330c      	adds	r3, #12
 8006e30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006e34:	61fa      	str	r2, [r7, #28]
 8006e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e38:	69b9      	ldr	r1, [r7, #24]
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	e841 2300 	strex	r3, r2, [r1]
 8006e40:	617b      	str	r3, [r7, #20]
   return(result);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e3      	bne.n	8006e10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fb fe39 	bl	8002acc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e5a:	e023      	b.n	8006ea4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d009      	beq.n	8006e7c <HAL_UART_IRQHandler+0x4f4>
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fb26 	bl	80074c6 <UART_Transmit_IT>
    return;
 8006e7a:	e014      	b.n	8006ea6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00e      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x51e>
 8006e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d008      	beq.n	8006ea6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb65 	bl	8007564 <UART_EndTransmit_IT>
    return;
 8006e9a:	e004      	b.n	8006ea6 <HAL_UART_IRQHandler+0x51e>
    return;
 8006e9c:	bf00      	nop
 8006e9e:	e002      	b.n	8006ea6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ea0:	bf00      	nop
 8006ea2:	e000      	b.n	8006ea6 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ea4:	bf00      	nop
  }
}
 8006ea6:	37e8      	adds	r7, #232	; 0xe8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr

08006ebe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bc80      	pop	{r7}
 8006ef2:	4770      	bx	lr

08006ef4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b090      	sub	sp, #64	; 0x40
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0320 	and.w	r3, r3, #32
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d137      	bne.n	8006f80 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f12:	2200      	movs	r2, #0
 8006f14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3314      	adds	r3, #20
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	e853 3f00 	ldrex	r3, [r3]
 8006f24:	623b      	str	r3, [r7, #32]
   return(result);
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f36:	633a      	str	r2, [r7, #48]	; 0x30
 8006f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	e841 2300 	strex	r3, r2, [r1]
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e5      	bne.n	8006f16 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	330c      	adds	r3, #12
 8006f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f60:	637b      	str	r3, [r7, #52]	; 0x34
 8006f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f6a:	61fa      	str	r2, [r7, #28]
 8006f6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	69b9      	ldr	r1, [r7, #24]
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	617b      	str	r3, [r7, #20]
   return(result);
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e5      	bne.n	8006f4a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f7e:	e002      	b.n	8006f86 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006f82:	f7fb fdbf 	bl	8002b04 <HAL_UART_TxCpltCallback>
}
 8006f86:	bf00      	nop
 8006f88:	3740      	adds	r7, #64	; 0x40
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f7ff ff85 	bl	8006eac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fa2:	bf00      	nop
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b09c      	sub	sp, #112	; 0x70
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d172      	bne.n	80070ac <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc8:	2200      	movs	r2, #0
 8006fca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	330c      	adds	r3, #12
 8006fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd6:	e853 3f00 	ldrex	r3, [r3]
 8006fda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006fec:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e5      	bne.n	8006fcc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3314      	adds	r3, #20
 8007006:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	667b      	str	r3, [r7, #100]	; 0x64
 8007018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3314      	adds	r3, #20
 800701e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007020:	647a      	str	r2, [r7, #68]	; 0x44
 8007022:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800702e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e5      	bne.n	8007000 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	623b      	str	r3, [r7, #32]
   return(result);
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800704a:	663b      	str	r3, [r7, #96]	; 0x60
 800704c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3314      	adds	r3, #20
 8007052:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007054:	633a      	str	r2, [r7, #48]	; 0x30
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800705a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007074:	2b01      	cmp	r3, #1
 8007076:	d119      	bne.n	80070ac <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	330c      	adds	r3, #12
 800707e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	e853 3f00 	ldrex	r3, [r3]
 8007086:	60fb      	str	r3, [r7, #12]
   return(result);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0310 	bic.w	r3, r3, #16
 800708e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	330c      	adds	r3, #12
 8007096:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007098:	61fa      	str	r2, [r7, #28]
 800709a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	69b9      	ldr	r1, [r7, #24]
 800709e:	69fa      	ldr	r2, [r7, #28]
 80070a0:	e841 2300 	strex	r3, r2, [r1]
 80070a4:	617b      	str	r3, [r7, #20]
   return(result);
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e5      	bne.n	8007078 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ae:	2200      	movs	r2, #0
 80070b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d106      	bne.n	80070c8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070be:	4619      	mov	r1, r3
 80070c0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070c2:	f7fb fd03 	bl	8002acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070c6:	e002      	b.n	80070ce <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80070c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80070ca:	f7ff fef8 	bl	8006ebe <HAL_UART_RxCpltCallback>
}
 80070ce:	bf00      	nop
 80070d0:	3770      	adds	r7, #112	; 0x70
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d108      	bne.n	8007104 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070f6:	085b      	lsrs	r3, r3, #1
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	4619      	mov	r1, r3
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f7fb fce5 	bl	8002acc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007102:	e002      	b.n	800710a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f7ff fee3 	bl	8006ed0 <HAL_UART_RxHalfCpltCallback>
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712e:	2b00      	cmp	r3, #0
 8007130:	bf14      	ite	ne
 8007132:	2301      	movne	r3, #1
 8007134:	2300      	moveq	r3, #0
 8007136:	b2db      	uxtb	r3, r3
 8007138:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b21      	cmp	r3, #33	; 0x21
 8007144:	d108      	bne.n	8007158 <UART_DMAError+0x46>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d005      	beq.n	8007158 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2200      	movs	r2, #0
 8007150:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007152:	68b8      	ldr	r0, [r7, #8]
 8007154:	f000 f91a 	bl	800738c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	bf14      	ite	ne
 8007166:	2301      	movne	r3, #1
 8007168:	2300      	moveq	r3, #0
 800716a:	b2db      	uxtb	r3, r3
 800716c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b22      	cmp	r3, #34	; 0x22
 8007178:	d108      	bne.n	800718c <UART_DMAError+0x7a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2200      	movs	r2, #0
 8007184:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007186:	68b8      	ldr	r0, [r7, #8]
 8007188:	f000 f927 	bl	80073da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	f043 0210 	orr.w	r2, r3, #16
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007198:	68b8      	ldr	r0, [r7, #8]
 800719a:	f7ff fea2 	bl	8006ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b086      	sub	sp, #24
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	603b      	str	r3, [r7, #0]
 80071b2:	4613      	mov	r3, r2
 80071b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	e03b      	b.n	8007230 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d037      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c0:	f7fc f8f2 	bl	80033a8 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	6a3a      	ldr	r2, [r7, #32]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d302      	bcc.n	80071d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e03a      	b.n	8007250 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d023      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b80      	cmp	r3, #128	; 0x80
 80071ec:	d020      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d01d      	beq.n	8007230 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b08      	cmp	r3, #8
 8007200:	d116      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	617b      	str	r3, [r7, #20]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f8de 	bl	80073da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2208      	movs	r2, #8
 8007222:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e00f      	b.n	8007250 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	bf0c      	ite	eq
 8007240:	2301      	moveq	r3, #1
 8007242:	2300      	movne	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	429a      	cmp	r2, r3
 800724c:	d0b4      	beq.n	80071b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3718      	adds	r7, #24
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b098      	sub	sp, #96	; 0x60
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2222      	movs	r2, #34	; 0x22
 800727c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007284:	4a3e      	ldr	r2, [pc, #248]	; (8007380 <UART_Start_Receive_DMA+0x128>)
 8007286:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728c:	4a3d      	ldr	r2, [pc, #244]	; (8007384 <UART_Start_Receive_DMA+0x12c>)
 800728e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007294:	4a3c      	ldr	r2, [pc, #240]	; (8007388 <UART_Start_Receive_DMA+0x130>)
 8007296:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729c:	2200      	movs	r2, #0
 800729e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80072a0:	f107 0308 	add.w	r3, r7, #8
 80072a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4619      	mov	r1, r3
 80072b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	f7fc fa0c 	bl	80036d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d019      	beq.n	800730e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	330c      	adds	r3, #12
 80072e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072e4:	e853 3f00 	ldrex	r3, [r3]
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	330c      	adds	r3, #12
 80072f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80072fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007300:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e5      	bne.n	80072da <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3314      	adds	r3, #20
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	f043 0301 	orr.w	r3, r3, #1
 8007324:	657b      	str	r3, [r7, #84]	; 0x54
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3314      	adds	r3, #20
 800732c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800732e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007334:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	617b      	str	r3, [r7, #20]
   return(result);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007358:	653b      	str	r3, [r7, #80]	; 0x50
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3314      	adds	r3, #20
 8007360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007362:	627a      	str	r2, [r7, #36]	; 0x24
 8007364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007366:	6a39      	ldr	r1, [r7, #32]
 8007368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736a:	e841 2300 	strex	r3, r2, [r1]
 800736e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1e5      	bne.n	8007342 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3760      	adds	r7, #96	; 0x60
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	08006fab 	.word	0x08006fab
 8007384:	080070d7 	.word	0x080070d7
 8007388:	08007113 	.word	0x08007113

0800738c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b089      	sub	sp, #36	; 0x24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	330c      	adds	r3, #12
 800739a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	e853 3f00 	ldrex	r3, [r3]
 80073a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073aa:	61fb      	str	r3, [r7, #28]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	330c      	adds	r3, #12
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	61ba      	str	r2, [r7, #24]
 80073b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	e841 2300 	strex	r3, r2, [r1]
 80073c0:	613b      	str	r3, [r7, #16]
   return(result);
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1e5      	bne.n	8007394 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80073d0:	bf00      	nop
 80073d2:	3724      	adds	r7, #36	; 0x24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bc80      	pop	{r7}
 80073d8:	4770      	bx	lr

080073da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073da:	b480      	push	{r7}
 80073dc:	b095      	sub	sp, #84	; 0x54
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	330c      	adds	r3, #12
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007402:	643a      	str	r2, [r7, #64]	; 0x40
 8007404:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007408:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e5      	bne.n	80073e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	e853 3f00 	ldrex	r3, [r3]
 8007424:	61fb      	str	r3, [r7, #28]
   return(result);
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	f023 0301 	bic.w	r3, r3, #1
 800742c:	64bb      	str	r3, [r7, #72]	; 0x48
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3314      	adds	r3, #20
 8007434:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007436:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007438:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800743c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800743e:	e841 2300 	strex	r3, r2, [r1]
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1e5      	bne.n	8007416 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	2b01      	cmp	r3, #1
 8007450:	d119      	bne.n	8007486 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	330c      	adds	r3, #12
 8007458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	60bb      	str	r3, [r7, #8]
   return(result);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f023 0310 	bic.w	r3, r3, #16
 8007468:	647b      	str	r3, [r7, #68]	; 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007472:	61ba      	str	r2, [r7, #24]
 8007474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6979      	ldr	r1, [r7, #20]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	613b      	str	r3, [r7, #16]
   return(result);
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e5      	bne.n	8007452 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007494:	bf00      	nop
 8007496:	3754      	adds	r7, #84	; 0x54
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	4770      	bx	lr

0800749e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b084      	sub	sp, #16
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff fd12 	bl	8006ee2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b21      	cmp	r3, #33	; 0x21
 80074d8:	d13e      	bne.n	8007558 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e2:	d114      	bne.n	800750e <UART_Transmit_IT+0x48>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d110      	bne.n	800750e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	881b      	ldrh	r3, [r3, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007500:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	1c9a      	adds	r2, r3, #2
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	621a      	str	r2, [r3, #32]
 800750c:	e008      	b.n	8007520 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	1c59      	adds	r1, r3, #1
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6211      	str	r1, [r2, #32]
 8007518:	781a      	ldrb	r2, [r3, #0]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29b      	uxth	r3, r3
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	4619      	mov	r1, r3
 800752e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10f      	bne.n	8007554 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007542:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68da      	ldr	r2, [r3, #12]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007552:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	e000      	b.n	800755a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007558:	2302      	movs	r3, #2
  }
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	bc80      	pop	{r7}
 8007562:	4770      	bx	lr

08007564 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800757a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2220      	movs	r2, #32
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7fb fabd 	bl	8002b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08c      	sub	sp, #48	; 0x30
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b22      	cmp	r3, #34	; 0x22
 80075a6:	f040 80ae 	bne.w	8007706 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b2:	d117      	bne.n	80075e4 <UART_Receive_IT+0x50>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d113      	bne.n	80075e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80075bc:	2300      	movs	r3, #0
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	1c9a      	adds	r2, r3, #2
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	629a      	str	r2, [r3, #40]	; 0x28
 80075e2:	e026      	b.n	8007632 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075f6:	d007      	beq.n	8007608 <UART_Receive_IT+0x74>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <UART_Receive_IT+0x82>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d106      	bne.n	8007616 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	b2da      	uxtb	r2, r3
 8007610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007612:	701a      	strb	r2, [r3, #0]
 8007614:	e008      	b.n	8007628 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007622:	b2da      	uxtb	r2, r3
 8007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007626:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007636:	b29b      	uxth	r3, r3
 8007638:	3b01      	subs	r3, #1
 800763a:	b29b      	uxth	r3, r3
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	4619      	mov	r1, r3
 8007640:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007642:	2b00      	cmp	r3, #0
 8007644:	d15d      	bne.n	8007702 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0220 	bic.w	r2, r2, #32
 8007654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f022 0201 	bic.w	r2, r2, #1
 8007674:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	2b01      	cmp	r3, #1
 800768a:	d135      	bne.n	80076f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	e853 3f00 	ldrex	r3, [r3]
 80076a0:	613b      	str	r3, [r7, #16]
   return(result);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f023 0310 	bic.w	r3, r3, #16
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b2:	623a      	str	r2, [r7, #32]
 80076b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	69f9      	ldr	r1, [r7, #28]
 80076b8:	6a3a      	ldr	r2, [r7, #32]
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	61bb      	str	r3, [r7, #24]
   return(result);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e5      	bne.n	8007692 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0310 	and.w	r3, r3, #16
 80076d0:	2b10      	cmp	r3, #16
 80076d2:	d10a      	bne.n	80076ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fb f9eb 	bl	8002acc <HAL_UARTEx_RxEventCallback>
 80076f6:	e002      	b.n	80076fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff fbe0 	bl	8006ebe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	e002      	b.n	8007708 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e000      	b.n	8007708 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007706:	2302      	movs	r3, #2
  }
}
 8007708:	4618      	mov	r0, r3
 800770a:	3730      	adds	r7, #48	; 0x30
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	431a      	orrs	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	4313      	orrs	r3, r2
 800773e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800774a:	f023 030c 	bic.w	r3, r3, #12
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	430b      	orrs	r3, r1
 8007756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a2c      	ldr	r2, [pc, #176]	; (8007824 <UART_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d103      	bne.n	8007780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007778:	f7fd ffd4 	bl	8005724 <HAL_RCC_GetPCLK2Freq>
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	e002      	b.n	8007786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007780:	f7fd ffbc 	bl	80056fc <HAL_RCC_GetPCLK1Freq>
 8007784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009a      	lsls	r2, r3, #2
 8007790:	441a      	add	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	fbb2 f3f3 	udiv	r3, r2, r3
 800779c:	4a22      	ldr	r2, [pc, #136]	; (8007828 <UART_SetConfig+0x118>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	0119      	lsls	r1, r3, #4
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009a      	lsls	r2, r3, #2
 80077b0:	441a      	add	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80077bc:	4b1a      	ldr	r3, [pc, #104]	; (8007828 <UART_SetConfig+0x118>)
 80077be:	fba3 0302 	umull	r0, r3, r3, r2
 80077c2:	095b      	lsrs	r3, r3, #5
 80077c4:	2064      	movs	r0, #100	; 0x64
 80077c6:	fb00 f303 	mul.w	r3, r0, r3
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	3332      	adds	r3, #50	; 0x32
 80077d0:	4a15      	ldr	r2, [pc, #84]	; (8007828 <UART_SetConfig+0x118>)
 80077d2:	fba2 2303 	umull	r2, r3, r2, r3
 80077d6:	095b      	lsrs	r3, r3, #5
 80077d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077dc:	4419      	add	r1, r3
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009a      	lsls	r2, r3, #2
 80077e8:	441a      	add	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80077f4:	4b0c      	ldr	r3, [pc, #48]	; (8007828 <UART_SetConfig+0x118>)
 80077f6:	fba3 0302 	umull	r0, r3, r3, r2
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	2064      	movs	r0, #100	; 0x64
 80077fe:	fb00 f303 	mul.w	r3, r0, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	3332      	adds	r3, #50	; 0x32
 8007808:	4a07      	ldr	r2, [pc, #28]	; (8007828 <UART_SetConfig+0x118>)
 800780a:	fba2 2303 	umull	r2, r3, r2, r3
 800780e:	095b      	lsrs	r3, r3, #5
 8007810:	f003 020f 	and.w	r2, r3, #15
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	440a      	add	r2, r1
 800781a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800781c:	bf00      	nop
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40013800 	.word	0x40013800
 8007828:	51eb851f 	.word	0x51eb851f

0800782c <atof>:
 800782c:	2100      	movs	r1, #0
 800782e:	f000 be17 	b.w	8008460 <strtod>

08007832 <sulp>:
 8007832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007836:	460f      	mov	r7, r1
 8007838:	4690      	mov	r8, r2
 800783a:	f003 fb89 	bl	800af50 <__ulp>
 800783e:	4604      	mov	r4, r0
 8007840:	460d      	mov	r5, r1
 8007842:	f1b8 0f00 	cmp.w	r8, #0
 8007846:	d011      	beq.n	800786c <sulp+0x3a>
 8007848:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800784c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007850:	2b00      	cmp	r3, #0
 8007852:	dd0b      	ble.n	800786c <sulp+0x3a>
 8007854:	2400      	movs	r4, #0
 8007856:	051b      	lsls	r3, r3, #20
 8007858:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800785c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007860:	4622      	mov	r2, r4
 8007862:	462b      	mov	r3, r5
 8007864:	f7f8 fe42 	bl	80004ec <__aeabi_dmul>
 8007868:	4604      	mov	r4, r0
 800786a:	460d      	mov	r5, r1
 800786c:	4620      	mov	r0, r4
 800786e:	4629      	mov	r1, r5
 8007870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007874:	0000      	movs	r0, r0
	...

08007878 <_strtod_l>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	b09f      	sub	sp, #124	; 0x7c
 800787e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007880:	2200      	movs	r2, #0
 8007882:	4604      	mov	r4, r0
 8007884:	921a      	str	r2, [sp, #104]	; 0x68
 8007886:	460d      	mov	r5, r1
 8007888:	f04f 0800 	mov.w	r8, #0
 800788c:	f04f 0900 	mov.w	r9, #0
 8007890:	460a      	mov	r2, r1
 8007892:	9219      	str	r2, [sp, #100]	; 0x64
 8007894:	7811      	ldrb	r1, [r2, #0]
 8007896:	292b      	cmp	r1, #43	; 0x2b
 8007898:	d04a      	beq.n	8007930 <_strtod_l+0xb8>
 800789a:	d838      	bhi.n	800790e <_strtod_l+0x96>
 800789c:	290d      	cmp	r1, #13
 800789e:	d832      	bhi.n	8007906 <_strtod_l+0x8e>
 80078a0:	2908      	cmp	r1, #8
 80078a2:	d832      	bhi.n	800790a <_strtod_l+0x92>
 80078a4:	2900      	cmp	r1, #0
 80078a6:	d03b      	beq.n	8007920 <_strtod_l+0xa8>
 80078a8:	2200      	movs	r2, #0
 80078aa:	920e      	str	r2, [sp, #56]	; 0x38
 80078ac:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80078ae:	7832      	ldrb	r2, [r6, #0]
 80078b0:	2a30      	cmp	r2, #48	; 0x30
 80078b2:	f040 80b2 	bne.w	8007a1a <_strtod_l+0x1a2>
 80078b6:	7872      	ldrb	r2, [r6, #1]
 80078b8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80078bc:	2a58      	cmp	r2, #88	; 0x58
 80078be:	d16e      	bne.n	800799e <_strtod_l+0x126>
 80078c0:	9302      	str	r3, [sp, #8]
 80078c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c4:	4620      	mov	r0, r4
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	ab1a      	add	r3, sp, #104	; 0x68
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	4a8c      	ldr	r2, [pc, #560]	; (8007b00 <_strtod_l+0x288>)
 80078ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80078d0:	a919      	add	r1, sp, #100	; 0x64
 80078d2:	f002 fc19 	bl	800a108 <__gethex>
 80078d6:	f010 070f 	ands.w	r7, r0, #15
 80078da:	4605      	mov	r5, r0
 80078dc:	d005      	beq.n	80078ea <_strtod_l+0x72>
 80078de:	2f06      	cmp	r7, #6
 80078e0:	d128      	bne.n	8007934 <_strtod_l+0xbc>
 80078e2:	2300      	movs	r3, #0
 80078e4:	3601      	adds	r6, #1
 80078e6:	9619      	str	r6, [sp, #100]	; 0x64
 80078e8:	930e      	str	r3, [sp, #56]	; 0x38
 80078ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 85a0 	bne.w	8008432 <_strtod_l+0xbba>
 80078f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f4:	b1cb      	cbz	r3, 800792a <_strtod_l+0xb2>
 80078f6:	4642      	mov	r2, r8
 80078f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078fc:	4610      	mov	r0, r2
 80078fe:	4619      	mov	r1, r3
 8007900:	b01f      	add	sp, #124	; 0x7c
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	2920      	cmp	r1, #32
 8007908:	d1ce      	bne.n	80078a8 <_strtod_l+0x30>
 800790a:	3201      	adds	r2, #1
 800790c:	e7c1      	b.n	8007892 <_strtod_l+0x1a>
 800790e:	292d      	cmp	r1, #45	; 0x2d
 8007910:	d1ca      	bne.n	80078a8 <_strtod_l+0x30>
 8007912:	2101      	movs	r1, #1
 8007914:	910e      	str	r1, [sp, #56]	; 0x38
 8007916:	1c51      	adds	r1, r2, #1
 8007918:	9119      	str	r1, [sp, #100]	; 0x64
 800791a:	7852      	ldrb	r2, [r2, #1]
 800791c:	2a00      	cmp	r2, #0
 800791e:	d1c5      	bne.n	80078ac <_strtod_l+0x34>
 8007920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007922:	9519      	str	r5, [sp, #100]	; 0x64
 8007924:	2b00      	cmp	r3, #0
 8007926:	f040 8582 	bne.w	800842e <_strtod_l+0xbb6>
 800792a:	4642      	mov	r2, r8
 800792c:	464b      	mov	r3, r9
 800792e:	e7e5      	b.n	80078fc <_strtod_l+0x84>
 8007930:	2100      	movs	r1, #0
 8007932:	e7ef      	b.n	8007914 <_strtod_l+0x9c>
 8007934:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007936:	b13a      	cbz	r2, 8007948 <_strtod_l+0xd0>
 8007938:	2135      	movs	r1, #53	; 0x35
 800793a:	a81c      	add	r0, sp, #112	; 0x70
 800793c:	f003 fbf4 	bl	800b128 <__copybits>
 8007940:	4620      	mov	r0, r4
 8007942:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007944:	f002 ffd8 	bl	800a8f8 <_Bfree>
 8007948:	3f01      	subs	r7, #1
 800794a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800794c:	2f04      	cmp	r7, #4
 800794e:	d806      	bhi.n	800795e <_strtod_l+0xe6>
 8007950:	e8df f007 	tbb	[pc, r7]
 8007954:	201d0314 	.word	0x201d0314
 8007958:	14          	.byte	0x14
 8007959:	00          	.byte	0x00
 800795a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800795e:	05e9      	lsls	r1, r5, #23
 8007960:	bf48      	it	mi
 8007962:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007966:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800796a:	0d1b      	lsrs	r3, r3, #20
 800796c:	051b      	lsls	r3, r3, #20
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1bb      	bne.n	80078ea <_strtod_l+0x72>
 8007972:	f001 fc5b 	bl	800922c <__errno>
 8007976:	2322      	movs	r3, #34	; 0x22
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	e7b6      	b.n	80078ea <_strtod_l+0x72>
 800797c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007980:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007984:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007988:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800798c:	e7e7      	b.n	800795e <_strtod_l+0xe6>
 800798e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007b04 <_strtod_l+0x28c>
 8007992:	e7e4      	b.n	800795e <_strtod_l+0xe6>
 8007994:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007998:	f04f 38ff 	mov.w	r8, #4294967295
 800799c:	e7df      	b.n	800795e <_strtod_l+0xe6>
 800799e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	9219      	str	r2, [sp, #100]	; 0x64
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b30      	cmp	r3, #48	; 0x30
 80079a8:	d0f9      	beq.n	800799e <_strtod_l+0x126>
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d09d      	beq.n	80078ea <_strtod_l+0x72>
 80079ae:	2301      	movs	r3, #1
 80079b0:	f04f 0a00 	mov.w	sl, #0
 80079b4:	220a      	movs	r2, #10
 80079b6:	46d3      	mov	fp, sl
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079bc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80079c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80079c2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80079c4:	7806      	ldrb	r6, [r0, #0]
 80079c6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079ca:	b2d9      	uxtb	r1, r3
 80079cc:	2909      	cmp	r1, #9
 80079ce:	d926      	bls.n	8007a1e <_strtod_l+0x1a6>
 80079d0:	2201      	movs	r2, #1
 80079d2:	494d      	ldr	r1, [pc, #308]	; (8007b08 <_strtod_l+0x290>)
 80079d4:	f001 fbce 	bl	8009174 <strncmp>
 80079d8:	2800      	cmp	r0, #0
 80079da:	d030      	beq.n	8007a3e <_strtod_l+0x1c6>
 80079dc:	2000      	movs	r0, #0
 80079de:	4632      	mov	r2, r6
 80079e0:	4603      	mov	r3, r0
 80079e2:	465e      	mov	r6, fp
 80079e4:	9008      	str	r0, [sp, #32]
 80079e6:	2a65      	cmp	r2, #101	; 0x65
 80079e8:	d001      	beq.n	80079ee <_strtod_l+0x176>
 80079ea:	2a45      	cmp	r2, #69	; 0x45
 80079ec:	d113      	bne.n	8007a16 <_strtod_l+0x19e>
 80079ee:	b91e      	cbnz	r6, 80079f8 <_strtod_l+0x180>
 80079f0:	9a05      	ldr	r2, [sp, #20]
 80079f2:	4302      	orrs	r2, r0
 80079f4:	d094      	beq.n	8007920 <_strtod_l+0xa8>
 80079f6:	2600      	movs	r6, #0
 80079f8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80079fa:	1c6a      	adds	r2, r5, #1
 80079fc:	9219      	str	r2, [sp, #100]	; 0x64
 80079fe:	786a      	ldrb	r2, [r5, #1]
 8007a00:	2a2b      	cmp	r2, #43	; 0x2b
 8007a02:	d074      	beq.n	8007aee <_strtod_l+0x276>
 8007a04:	2a2d      	cmp	r2, #45	; 0x2d
 8007a06:	d078      	beq.n	8007afa <_strtod_l+0x282>
 8007a08:	f04f 0c00 	mov.w	ip, #0
 8007a0c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a10:	2909      	cmp	r1, #9
 8007a12:	d97f      	bls.n	8007b14 <_strtod_l+0x29c>
 8007a14:	9519      	str	r5, [sp, #100]	; 0x64
 8007a16:	2700      	movs	r7, #0
 8007a18:	e09e      	b.n	8007b58 <_strtod_l+0x2e0>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	e7c8      	b.n	80079b0 <_strtod_l+0x138>
 8007a1e:	f1bb 0f08 	cmp.w	fp, #8
 8007a22:	bfd8      	it	le
 8007a24:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007a26:	f100 0001 	add.w	r0, r0, #1
 8007a2a:	bfd6      	itet	le
 8007a2c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a30:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007a34:	930a      	strle	r3, [sp, #40]	; 0x28
 8007a36:	f10b 0b01 	add.w	fp, fp, #1
 8007a3a:	9019      	str	r0, [sp, #100]	; 0x64
 8007a3c:	e7c1      	b.n	80079c2 <_strtod_l+0x14a>
 8007a3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	9219      	str	r2, [sp, #100]	; 0x64
 8007a44:	785a      	ldrb	r2, [r3, #1]
 8007a46:	f1bb 0f00 	cmp.w	fp, #0
 8007a4a:	d037      	beq.n	8007abc <_strtod_l+0x244>
 8007a4c:	465e      	mov	r6, fp
 8007a4e:	9008      	str	r0, [sp, #32]
 8007a50:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	d912      	bls.n	8007a7e <_strtod_l+0x206>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e7c4      	b.n	80079e6 <_strtod_l+0x16e>
 8007a5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a5e:	3001      	adds	r0, #1
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	9219      	str	r2, [sp, #100]	; 0x64
 8007a64:	785a      	ldrb	r2, [r3, #1]
 8007a66:	2a30      	cmp	r2, #48	; 0x30
 8007a68:	d0f8      	beq.n	8007a5c <_strtod_l+0x1e4>
 8007a6a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a6e:	2b08      	cmp	r3, #8
 8007a70:	f200 84e4 	bhi.w	800843c <_strtod_l+0xbc4>
 8007a74:	9008      	str	r0, [sp, #32]
 8007a76:	2000      	movs	r0, #0
 8007a78:	4606      	mov	r6, r0
 8007a7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007a7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a7e:	3a30      	subs	r2, #48	; 0x30
 8007a80:	f100 0301 	add.w	r3, r0, #1
 8007a84:	d014      	beq.n	8007ab0 <_strtod_l+0x238>
 8007a86:	9908      	ldr	r1, [sp, #32]
 8007a88:	eb00 0c06 	add.w	ip, r0, r6
 8007a8c:	4419      	add	r1, r3
 8007a8e:	9108      	str	r1, [sp, #32]
 8007a90:	4633      	mov	r3, r6
 8007a92:	210a      	movs	r1, #10
 8007a94:	4563      	cmp	r3, ip
 8007a96:	d113      	bne.n	8007ac0 <_strtod_l+0x248>
 8007a98:	1833      	adds	r3, r6, r0
 8007a9a:	2b08      	cmp	r3, #8
 8007a9c:	f106 0601 	add.w	r6, r6, #1
 8007aa0:	4406      	add	r6, r0
 8007aa2:	dc1a      	bgt.n	8007ada <_strtod_l+0x262>
 8007aa4:	230a      	movs	r3, #10
 8007aa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007aa8:	fb03 2301 	mla	r3, r3, r1, r2
 8007aac:	930a      	str	r3, [sp, #40]	; 0x28
 8007aae:	2300      	movs	r3, #0
 8007ab0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	1c51      	adds	r1, r2, #1
 8007ab6:	9119      	str	r1, [sp, #100]	; 0x64
 8007ab8:	7852      	ldrb	r2, [r2, #1]
 8007aba:	e7c9      	b.n	8007a50 <_strtod_l+0x1d8>
 8007abc:	4658      	mov	r0, fp
 8007abe:	e7d2      	b.n	8007a66 <_strtod_l+0x1ee>
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	f103 0301 	add.w	r3, r3, #1
 8007ac6:	dc03      	bgt.n	8007ad0 <_strtod_l+0x258>
 8007ac8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007aca:	434f      	muls	r7, r1
 8007acc:	970a      	str	r7, [sp, #40]	; 0x28
 8007ace:	e7e1      	b.n	8007a94 <_strtod_l+0x21c>
 8007ad0:	2b10      	cmp	r3, #16
 8007ad2:	bfd8      	it	le
 8007ad4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007ad8:	e7dc      	b.n	8007a94 <_strtod_l+0x21c>
 8007ada:	2e10      	cmp	r6, #16
 8007adc:	bfdc      	itt	le
 8007ade:	230a      	movle	r3, #10
 8007ae0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007ae4:	e7e3      	b.n	8007aae <_strtod_l+0x236>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9308      	str	r3, [sp, #32]
 8007aea:	2301      	movs	r3, #1
 8007aec:	e780      	b.n	80079f0 <_strtod_l+0x178>
 8007aee:	f04f 0c00 	mov.w	ip, #0
 8007af2:	1caa      	adds	r2, r5, #2
 8007af4:	9219      	str	r2, [sp, #100]	; 0x64
 8007af6:	78aa      	ldrb	r2, [r5, #2]
 8007af8:	e788      	b.n	8007a0c <_strtod_l+0x194>
 8007afa:	f04f 0c01 	mov.w	ip, #1
 8007afe:	e7f8      	b.n	8007af2 <_strtod_l+0x27a>
 8007b00:	0800bc7c 	.word	0x0800bc7c
 8007b04:	7ff00000 	.word	0x7ff00000
 8007b08:	0800bc7a 	.word	0x0800bc7a
 8007b0c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b0e:	1c51      	adds	r1, r2, #1
 8007b10:	9119      	str	r1, [sp, #100]	; 0x64
 8007b12:	7852      	ldrb	r2, [r2, #1]
 8007b14:	2a30      	cmp	r2, #48	; 0x30
 8007b16:	d0f9      	beq.n	8007b0c <_strtod_l+0x294>
 8007b18:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b1c:	2908      	cmp	r1, #8
 8007b1e:	f63f af7a 	bhi.w	8007a16 <_strtod_l+0x19e>
 8007b22:	3a30      	subs	r2, #48	; 0x30
 8007b24:	9209      	str	r2, [sp, #36]	; 0x24
 8007b26:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b28:	920c      	str	r2, [sp, #48]	; 0x30
 8007b2a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b2c:	1c57      	adds	r7, r2, #1
 8007b2e:	9719      	str	r7, [sp, #100]	; 0x64
 8007b30:	7852      	ldrb	r2, [r2, #1]
 8007b32:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007b36:	f1be 0f09 	cmp.w	lr, #9
 8007b3a:	d938      	bls.n	8007bae <_strtod_l+0x336>
 8007b3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b3e:	1a7f      	subs	r7, r7, r1
 8007b40:	2f08      	cmp	r7, #8
 8007b42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007b46:	dc03      	bgt.n	8007b50 <_strtod_l+0x2d8>
 8007b48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b4a:	428f      	cmp	r7, r1
 8007b4c:	bfa8      	it	ge
 8007b4e:	460f      	movge	r7, r1
 8007b50:	f1bc 0f00 	cmp.w	ip, #0
 8007b54:	d000      	beq.n	8007b58 <_strtod_l+0x2e0>
 8007b56:	427f      	negs	r7, r7
 8007b58:	2e00      	cmp	r6, #0
 8007b5a:	d14f      	bne.n	8007bfc <_strtod_l+0x384>
 8007b5c:	9905      	ldr	r1, [sp, #20]
 8007b5e:	4301      	orrs	r1, r0
 8007b60:	f47f aec3 	bne.w	80078ea <_strtod_l+0x72>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f47f aedb 	bne.w	8007920 <_strtod_l+0xa8>
 8007b6a:	2a69      	cmp	r2, #105	; 0x69
 8007b6c:	d029      	beq.n	8007bc2 <_strtod_l+0x34a>
 8007b6e:	dc26      	bgt.n	8007bbe <_strtod_l+0x346>
 8007b70:	2a49      	cmp	r2, #73	; 0x49
 8007b72:	d026      	beq.n	8007bc2 <_strtod_l+0x34a>
 8007b74:	2a4e      	cmp	r2, #78	; 0x4e
 8007b76:	f47f aed3 	bne.w	8007920 <_strtod_l+0xa8>
 8007b7a:	499a      	ldr	r1, [pc, #616]	; (8007de4 <_strtod_l+0x56c>)
 8007b7c:	a819      	add	r0, sp, #100	; 0x64
 8007b7e:	f002 fd05 	bl	800a58c <__match>
 8007b82:	2800      	cmp	r0, #0
 8007b84:	f43f aecc 	beq.w	8007920 <_strtod_l+0xa8>
 8007b88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b28      	cmp	r3, #40	; 0x28
 8007b8e:	d12f      	bne.n	8007bf0 <_strtod_l+0x378>
 8007b90:	4995      	ldr	r1, [pc, #596]	; (8007de8 <_strtod_l+0x570>)
 8007b92:	aa1c      	add	r2, sp, #112	; 0x70
 8007b94:	a819      	add	r0, sp, #100	; 0x64
 8007b96:	f002 fd0d 	bl	800a5b4 <__hexnan>
 8007b9a:	2805      	cmp	r0, #5
 8007b9c:	d128      	bne.n	8007bf0 <_strtod_l+0x378>
 8007b9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ba0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007ba4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007ba8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007bac:	e69d      	b.n	80078ea <_strtod_l+0x72>
 8007bae:	210a      	movs	r1, #10
 8007bb0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007bb2:	fb01 2107 	mla	r1, r1, r7, r2
 8007bb6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007bba:	9209      	str	r2, [sp, #36]	; 0x24
 8007bbc:	e7b5      	b.n	8007b2a <_strtod_l+0x2b2>
 8007bbe:	2a6e      	cmp	r2, #110	; 0x6e
 8007bc0:	e7d9      	b.n	8007b76 <_strtod_l+0x2fe>
 8007bc2:	498a      	ldr	r1, [pc, #552]	; (8007dec <_strtod_l+0x574>)
 8007bc4:	a819      	add	r0, sp, #100	; 0x64
 8007bc6:	f002 fce1 	bl	800a58c <__match>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	f43f aea8 	beq.w	8007920 <_strtod_l+0xa8>
 8007bd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bd2:	4987      	ldr	r1, [pc, #540]	; (8007df0 <_strtod_l+0x578>)
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	a819      	add	r0, sp, #100	; 0x64
 8007bd8:	9319      	str	r3, [sp, #100]	; 0x64
 8007bda:	f002 fcd7 	bl	800a58c <__match>
 8007bde:	b910      	cbnz	r0, 8007be6 <_strtod_l+0x36e>
 8007be0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007be2:	3301      	adds	r3, #1
 8007be4:	9319      	str	r3, [sp, #100]	; 0x64
 8007be6:	f04f 0800 	mov.w	r8, #0
 8007bea:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007df4 <_strtod_l+0x57c>
 8007bee:	e67c      	b.n	80078ea <_strtod_l+0x72>
 8007bf0:	4881      	ldr	r0, [pc, #516]	; (8007df8 <_strtod_l+0x580>)
 8007bf2:	f001 fb63 	bl	80092bc <nan>
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	4689      	mov	r9, r1
 8007bfa:	e676      	b.n	80078ea <_strtod_l+0x72>
 8007bfc:	9b08      	ldr	r3, [sp, #32]
 8007bfe:	f1bb 0f00 	cmp.w	fp, #0
 8007c02:	bf08      	it	eq
 8007c04:	46b3      	moveq	fp, r6
 8007c06:	1afb      	subs	r3, r7, r3
 8007c08:	2e10      	cmp	r6, #16
 8007c0a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c0c:	4635      	mov	r5, r6
 8007c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c10:	bfa8      	it	ge
 8007c12:	2510      	movge	r5, #16
 8007c14:	f7f8 fbf0 	bl	80003f8 <__aeabi_ui2d>
 8007c18:	2e09      	cmp	r6, #9
 8007c1a:	4680      	mov	r8, r0
 8007c1c:	4689      	mov	r9, r1
 8007c1e:	dd13      	ble.n	8007c48 <_strtod_l+0x3d0>
 8007c20:	4b76      	ldr	r3, [pc, #472]	; (8007dfc <_strtod_l+0x584>)
 8007c22:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c2a:	f7f8 fc5f 	bl	80004ec <__aeabi_dmul>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	4650      	mov	r0, sl
 8007c32:	4689      	mov	r9, r1
 8007c34:	f7f8 fbe0 	bl	80003f8 <__aeabi_ui2d>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	4649      	mov	r1, r9
 8007c40:	f7f8 fa9e 	bl	8000180 <__adddf3>
 8007c44:	4680      	mov	r8, r0
 8007c46:	4689      	mov	r9, r1
 8007c48:	2e0f      	cmp	r6, #15
 8007c4a:	dc36      	bgt.n	8007cba <_strtod_l+0x442>
 8007c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f43f ae4b 	beq.w	80078ea <_strtod_l+0x72>
 8007c54:	dd22      	ble.n	8007c9c <_strtod_l+0x424>
 8007c56:	2b16      	cmp	r3, #22
 8007c58:	dc09      	bgt.n	8007c6e <_strtod_l+0x3f6>
 8007c5a:	4968      	ldr	r1, [pc, #416]	; (8007dfc <_strtod_l+0x584>)
 8007c5c:	4642      	mov	r2, r8
 8007c5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c62:	464b      	mov	r3, r9
 8007c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c68:	f7f8 fc40 	bl	80004ec <__aeabi_dmul>
 8007c6c:	e7c3      	b.n	8007bf6 <_strtod_l+0x37e>
 8007c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c70:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007c74:	4293      	cmp	r3, r2
 8007c76:	db20      	blt.n	8007cba <_strtod_l+0x442>
 8007c78:	4c60      	ldr	r4, [pc, #384]	; (8007dfc <_strtod_l+0x584>)
 8007c7a:	f1c6 060f 	rsb	r6, r6, #15
 8007c7e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007c82:	4642      	mov	r2, r8
 8007c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c88:	464b      	mov	r3, r9
 8007c8a:	f7f8 fc2f 	bl	80004ec <__aeabi_dmul>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c90:	1b9e      	subs	r6, r3, r6
 8007c92:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007c96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007c9a:	e7e5      	b.n	8007c68 <_strtod_l+0x3f0>
 8007c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c9e:	3316      	adds	r3, #22
 8007ca0:	db0b      	blt.n	8007cba <_strtod_l+0x442>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	1bdf      	subs	r7, r3, r7
 8007ca8:	4b54      	ldr	r3, [pc, #336]	; (8007dfc <_strtod_l+0x584>)
 8007caa:	4649      	mov	r1, r9
 8007cac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007cb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb4:	f7f8 fd44 	bl	8000740 <__aeabi_ddiv>
 8007cb8:	e79d      	b.n	8007bf6 <_strtod_l+0x37e>
 8007cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbc:	1b75      	subs	r5, r6, r5
 8007cbe:	441d      	add	r5, r3
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	dd70      	ble.n	8007da6 <_strtod_l+0x52e>
 8007cc4:	f015 030f 	ands.w	r3, r5, #15
 8007cc8:	d00a      	beq.n	8007ce0 <_strtod_l+0x468>
 8007cca:	494c      	ldr	r1, [pc, #304]	; (8007dfc <_strtod_l+0x584>)
 8007ccc:	4642      	mov	r2, r8
 8007cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cd6:	464b      	mov	r3, r9
 8007cd8:	f7f8 fc08 	bl	80004ec <__aeabi_dmul>
 8007cdc:	4680      	mov	r8, r0
 8007cde:	4689      	mov	r9, r1
 8007ce0:	f035 050f 	bics.w	r5, r5, #15
 8007ce4:	d04d      	beq.n	8007d82 <_strtod_l+0x50a>
 8007ce6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007cea:	dd22      	ble.n	8007d32 <_strtod_l+0x4ba>
 8007cec:	2600      	movs	r6, #0
 8007cee:	46b3      	mov	fp, r6
 8007cf0:	960b      	str	r6, [sp, #44]	; 0x2c
 8007cf2:	9608      	str	r6, [sp, #32]
 8007cf4:	2322      	movs	r3, #34	; 0x22
 8007cf6:	f04f 0800 	mov.w	r8, #0
 8007cfa:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007df4 <_strtod_l+0x57c>
 8007cfe:	6023      	str	r3, [r4, #0]
 8007d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f43f adf1 	beq.w	80078ea <_strtod_l+0x72>
 8007d08:	4620      	mov	r0, r4
 8007d0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007d0c:	f002 fdf4 	bl	800a8f8 <_Bfree>
 8007d10:	4620      	mov	r0, r4
 8007d12:	9908      	ldr	r1, [sp, #32]
 8007d14:	f002 fdf0 	bl	800a8f8 <_Bfree>
 8007d18:	4659      	mov	r1, fp
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f002 fdec 	bl	800a8f8 <_Bfree>
 8007d20:	4620      	mov	r0, r4
 8007d22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d24:	f002 fde8 	bl	800a8f8 <_Bfree>
 8007d28:	4631      	mov	r1, r6
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f002 fde4 	bl	800a8f8 <_Bfree>
 8007d30:	e5db      	b.n	80078ea <_strtod_l+0x72>
 8007d32:	4b33      	ldr	r3, [pc, #204]	; (8007e00 <_strtod_l+0x588>)
 8007d34:	4640      	mov	r0, r8
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	469a      	mov	sl, r3
 8007d3e:	112d      	asrs	r5, r5, #4
 8007d40:	2d01      	cmp	r5, #1
 8007d42:	dc21      	bgt.n	8007d88 <_strtod_l+0x510>
 8007d44:	b10b      	cbz	r3, 8007d4a <_strtod_l+0x4d2>
 8007d46:	4680      	mov	r8, r0
 8007d48:	4689      	mov	r9, r1
 8007d4a:	492d      	ldr	r1, [pc, #180]	; (8007e00 <_strtod_l+0x588>)
 8007d4c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d50:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007d54:	4642      	mov	r2, r8
 8007d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	f7f8 fbc6 	bl	80004ec <__aeabi_dmul>
 8007d60:	4b24      	ldr	r3, [pc, #144]	; (8007df4 <_strtod_l+0x57c>)
 8007d62:	460a      	mov	r2, r1
 8007d64:	400b      	ands	r3, r1
 8007d66:	4927      	ldr	r1, [pc, #156]	; (8007e04 <_strtod_l+0x58c>)
 8007d68:	4680      	mov	r8, r0
 8007d6a:	428b      	cmp	r3, r1
 8007d6c:	d8be      	bhi.n	8007cec <_strtod_l+0x474>
 8007d6e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d72:	428b      	cmp	r3, r1
 8007d74:	bf86      	itte	hi
 8007d76:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d7a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007e08 <_strtod_l+0x590>
 8007d7e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d82:	2300      	movs	r3, #0
 8007d84:	9305      	str	r3, [sp, #20]
 8007d86:	e07b      	b.n	8007e80 <_strtod_l+0x608>
 8007d88:	07ea      	lsls	r2, r5, #31
 8007d8a:	d505      	bpl.n	8007d98 <_strtod_l+0x520>
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f7f8 fbab 	bl	80004ec <__aeabi_dmul>
 8007d96:	2301      	movs	r3, #1
 8007d98:	9a05      	ldr	r2, [sp, #20]
 8007d9a:	f10a 0a01 	add.w	sl, sl, #1
 8007d9e:	3208      	adds	r2, #8
 8007da0:	106d      	asrs	r5, r5, #1
 8007da2:	9205      	str	r2, [sp, #20]
 8007da4:	e7cc      	b.n	8007d40 <_strtod_l+0x4c8>
 8007da6:	d0ec      	beq.n	8007d82 <_strtod_l+0x50a>
 8007da8:	426d      	negs	r5, r5
 8007daa:	f015 020f 	ands.w	r2, r5, #15
 8007dae:	d00a      	beq.n	8007dc6 <_strtod_l+0x54e>
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <_strtod_l+0x584>)
 8007db2:	4640      	mov	r0, r8
 8007db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db8:	4649      	mov	r1, r9
 8007dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dbe:	f7f8 fcbf 	bl	8000740 <__aeabi_ddiv>
 8007dc2:	4680      	mov	r8, r0
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	112d      	asrs	r5, r5, #4
 8007dc8:	d0db      	beq.n	8007d82 <_strtod_l+0x50a>
 8007dca:	2d1f      	cmp	r5, #31
 8007dcc:	dd1e      	ble.n	8007e0c <_strtod_l+0x594>
 8007dce:	2600      	movs	r6, #0
 8007dd0:	46b3      	mov	fp, r6
 8007dd2:	960b      	str	r6, [sp, #44]	; 0x2c
 8007dd4:	9608      	str	r6, [sp, #32]
 8007dd6:	2322      	movs	r3, #34	; 0x22
 8007dd8:	f04f 0800 	mov.w	r8, #0
 8007ddc:	f04f 0900 	mov.w	r9, #0
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	e78d      	b.n	8007d00 <_strtod_l+0x488>
 8007de4:	0800bcdd 	.word	0x0800bcdd
 8007de8:	0800bc90 	.word	0x0800bc90
 8007dec:	0800bcd5 	.word	0x0800bcd5
 8007df0:	0800bd0f 	.word	0x0800bd0f
 8007df4:	7ff00000 	.word	0x7ff00000
 8007df8:	0800c0a1 	.word	0x0800c0a1
 8007dfc:	0800be80 	.word	0x0800be80
 8007e00:	0800be58 	.word	0x0800be58
 8007e04:	7ca00000 	.word	0x7ca00000
 8007e08:	7fefffff 	.word	0x7fefffff
 8007e0c:	f015 0310 	ands.w	r3, r5, #16
 8007e10:	bf18      	it	ne
 8007e12:	236a      	movne	r3, #106	; 0x6a
 8007e14:	4640      	mov	r0, r8
 8007e16:	9305      	str	r3, [sp, #20]
 8007e18:	4649      	mov	r1, r9
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80080e8 <_strtod_l+0x870>
 8007e20:	07ea      	lsls	r2, r5, #31
 8007e22:	d504      	bpl.n	8007e2e <_strtod_l+0x5b6>
 8007e24:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e28:	f7f8 fb60 	bl	80004ec <__aeabi_dmul>
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	106d      	asrs	r5, r5, #1
 8007e30:	f10a 0a08 	add.w	sl, sl, #8
 8007e34:	d1f4      	bne.n	8007e20 <_strtod_l+0x5a8>
 8007e36:	b10b      	cbz	r3, 8007e3c <_strtod_l+0x5c4>
 8007e38:	4680      	mov	r8, r0
 8007e3a:	4689      	mov	r9, r1
 8007e3c:	9b05      	ldr	r3, [sp, #20]
 8007e3e:	b1bb      	cbz	r3, 8007e70 <_strtod_l+0x5f8>
 8007e40:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e44:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	dd10      	ble.n	8007e70 <_strtod_l+0x5f8>
 8007e4e:	2b1f      	cmp	r3, #31
 8007e50:	f340 8128 	ble.w	80080a4 <_strtod_l+0x82c>
 8007e54:	2b34      	cmp	r3, #52	; 0x34
 8007e56:	bfd8      	it	le
 8007e58:	f04f 33ff 	movle.w	r3, #4294967295
 8007e5c:	f04f 0800 	mov.w	r8, #0
 8007e60:	bfcf      	iteee	gt
 8007e62:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e66:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e6a:	4093      	lslle	r3, r2
 8007e6c:	ea03 0901 	andle.w	r9, r3, r1
 8007e70:	2200      	movs	r2, #0
 8007e72:	2300      	movs	r3, #0
 8007e74:	4640      	mov	r0, r8
 8007e76:	4649      	mov	r1, r9
 8007e78:	f7f8 fda0 	bl	80009bc <__aeabi_dcmpeq>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1a6      	bne.n	8007dce <_strtod_l+0x556>
 8007e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e82:	465a      	mov	r2, fp
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4620      	mov	r0, r4
 8007e88:	4633      	mov	r3, r6
 8007e8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e8c:	f002 fd9c 	bl	800a9c8 <__s2b>
 8007e90:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f43f af2a 	beq.w	8007cec <_strtod_l+0x474>
 8007e98:	2600      	movs	r6, #0
 8007e9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9c:	9b08      	ldr	r3, [sp, #32]
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	eba3 0307 	sub.w	r3, r3, r7
 8007ea4:	bfa8      	it	ge
 8007ea6:	2300      	movge	r3, #0
 8007ea8:	46b3      	mov	fp, r6
 8007eaa:	9312      	str	r3, [sp, #72]	; 0x48
 8007eac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007eb0:	9316      	str	r3, [sp, #88]	; 0x58
 8007eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	6859      	ldr	r1, [r3, #4]
 8007eb8:	f002 fcde 	bl	800a878 <_Balloc>
 8007ebc:	9008      	str	r0, [sp, #32]
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	f43f af18 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec6:	300c      	adds	r0, #12
 8007ec8:	691a      	ldr	r2, [r3, #16]
 8007eca:	f103 010c 	add.w	r1, r3, #12
 8007ece:	3202      	adds	r2, #2
 8007ed0:	0092      	lsls	r2, r2, #2
 8007ed2:	f001 f9e5 	bl	80092a0 <memcpy>
 8007ed6:	ab1c      	add	r3, sp, #112	; 0x70
 8007ed8:	9301      	str	r3, [sp, #4]
 8007eda:	ab1b      	add	r3, sp, #108	; 0x6c
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	4642      	mov	r2, r8
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8007ee8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8007eec:	f003 f898 	bl	800b020 <__d2b>
 8007ef0:	901a      	str	r0, [sp, #104]	; 0x68
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f43f aefe 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007ef8:	2101      	movs	r1, #1
 8007efa:	4620      	mov	r0, r4
 8007efc:	f002 fdfc 	bl	800aaf8 <__i2b>
 8007f00:	4683      	mov	fp, r0
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f43f aef6 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007f08:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8007f0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f0c:	2f00      	cmp	r7, #0
 8007f0e:	bfab      	itete	ge
 8007f10:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8007f12:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007f14:	eb07 0a03 	addge.w	sl, r7, r3
 8007f18:	1bdd      	sublt	r5, r3, r7
 8007f1a:	9b05      	ldr	r3, [sp, #20]
 8007f1c:	bfa8      	it	ge
 8007f1e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007f20:	eba7 0703 	sub.w	r7, r7, r3
 8007f24:	4417      	add	r7, r2
 8007f26:	4b71      	ldr	r3, [pc, #452]	; (80080ec <_strtod_l+0x874>)
 8007f28:	f107 37ff 	add.w	r7, r7, #4294967295
 8007f2c:	bfb8      	it	lt
 8007f2e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8007f32:	429f      	cmp	r7, r3
 8007f34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f38:	f280 80c7 	bge.w	80080ca <_strtod_l+0x852>
 8007f3c:	1bdb      	subs	r3, r3, r7
 8007f3e:	2b1f      	cmp	r3, #31
 8007f40:	f04f 0101 	mov.w	r1, #1
 8007f44:	eba2 0203 	sub.w	r2, r2, r3
 8007f48:	f300 80b3 	bgt.w	80080b2 <_strtod_l+0x83a>
 8007f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f50:	9313      	str	r3, [sp, #76]	; 0x4c
 8007f52:	2300      	movs	r3, #0
 8007f54:	9310      	str	r3, [sp, #64]	; 0x40
 8007f56:	eb0a 0702 	add.w	r7, sl, r2
 8007f5a:	9b05      	ldr	r3, [sp, #20]
 8007f5c:	45ba      	cmp	sl, r7
 8007f5e:	4415      	add	r5, r2
 8007f60:	441d      	add	r5, r3
 8007f62:	4653      	mov	r3, sl
 8007f64:	bfa8      	it	ge
 8007f66:	463b      	movge	r3, r7
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	bfa8      	it	ge
 8007f6c:	462b      	movge	r3, r5
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfc2      	ittt	gt
 8007f72:	1aff      	subgt	r7, r7, r3
 8007f74:	1aed      	subgt	r5, r5, r3
 8007f76:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007f7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd17      	ble.n	8007fb0 <_strtod_l+0x738>
 8007f80:	4659      	mov	r1, fp
 8007f82:	461a      	mov	r2, r3
 8007f84:	4620      	mov	r0, r4
 8007f86:	f002 fe75 	bl	800ac74 <__pow5mult>
 8007f8a:	4683      	mov	fp, r0
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f43f aeb1 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007f92:	4601      	mov	r1, r0
 8007f94:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f96:	4620      	mov	r0, r4
 8007f98:	f002 fdc4 	bl	800ab24 <__multiply>
 8007f9c:	900a      	str	r0, [sp, #40]	; 0x28
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	f43f aea8 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007fa8:	f002 fca6 	bl	800a8f8 <_Bfree>
 8007fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fae:	931a      	str	r3, [sp, #104]	; 0x68
 8007fb0:	2f00      	cmp	r7, #0
 8007fb2:	f300 808f 	bgt.w	80080d4 <_strtod_l+0x85c>
 8007fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dd08      	ble.n	8007fce <_strtod_l+0x756>
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007fc0:	9908      	ldr	r1, [sp, #32]
 8007fc2:	f002 fe57 	bl	800ac74 <__pow5mult>
 8007fc6:	9008      	str	r0, [sp, #32]
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f43f ae93 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007fce:	2d00      	cmp	r5, #0
 8007fd0:	dd08      	ble.n	8007fe4 <_strtod_l+0x76c>
 8007fd2:	462a      	mov	r2, r5
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	9908      	ldr	r1, [sp, #32]
 8007fd8:	f002 fea6 	bl	800ad28 <__lshift>
 8007fdc:	9008      	str	r0, [sp, #32]
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f43f ae88 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007fe4:	f1ba 0f00 	cmp.w	sl, #0
 8007fe8:	dd08      	ble.n	8007ffc <_strtod_l+0x784>
 8007fea:	4659      	mov	r1, fp
 8007fec:	4652      	mov	r2, sl
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f002 fe9a 	bl	800ad28 <__lshift>
 8007ff4:	4683      	mov	fp, r0
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f43f ae7c 	beq.w	8007cf4 <_strtod_l+0x47c>
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	9a08      	ldr	r2, [sp, #32]
 8008000:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008002:	f002 ff19 	bl	800ae38 <__mdiff>
 8008006:	4606      	mov	r6, r0
 8008008:	2800      	cmp	r0, #0
 800800a:	f43f ae73 	beq.w	8007cf4 <_strtod_l+0x47c>
 800800e:	2500      	movs	r5, #0
 8008010:	68c3      	ldr	r3, [r0, #12]
 8008012:	4659      	mov	r1, fp
 8008014:	60c5      	str	r5, [r0, #12]
 8008016:	930a      	str	r3, [sp, #40]	; 0x28
 8008018:	f002 fef2 	bl	800ae00 <__mcmp>
 800801c:	42a8      	cmp	r0, r5
 800801e:	da6b      	bge.n	80080f8 <_strtod_l+0x880>
 8008020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008022:	ea53 0308 	orrs.w	r3, r3, r8
 8008026:	f040 808f 	bne.w	8008148 <_strtod_l+0x8d0>
 800802a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 808a 	bne.w	8008148 <_strtod_l+0x8d0>
 8008034:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008038:	0d1b      	lsrs	r3, r3, #20
 800803a:	051b      	lsls	r3, r3, #20
 800803c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008040:	f240 8082 	bls.w	8008148 <_strtod_l+0x8d0>
 8008044:	6973      	ldr	r3, [r6, #20]
 8008046:	b913      	cbnz	r3, 800804e <_strtod_l+0x7d6>
 8008048:	6933      	ldr	r3, [r6, #16]
 800804a:	2b01      	cmp	r3, #1
 800804c:	dd7c      	ble.n	8008148 <_strtod_l+0x8d0>
 800804e:	4631      	mov	r1, r6
 8008050:	2201      	movs	r2, #1
 8008052:	4620      	mov	r0, r4
 8008054:	f002 fe68 	bl	800ad28 <__lshift>
 8008058:	4659      	mov	r1, fp
 800805a:	4606      	mov	r6, r0
 800805c:	f002 fed0 	bl	800ae00 <__mcmp>
 8008060:	2800      	cmp	r0, #0
 8008062:	dd71      	ble.n	8008148 <_strtod_l+0x8d0>
 8008064:	9905      	ldr	r1, [sp, #20]
 8008066:	464b      	mov	r3, r9
 8008068:	4a21      	ldr	r2, [pc, #132]	; (80080f0 <_strtod_l+0x878>)
 800806a:	2900      	cmp	r1, #0
 800806c:	f000 808d 	beq.w	800818a <_strtod_l+0x912>
 8008070:	ea02 0109 	and.w	r1, r2, r9
 8008074:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008078:	f300 8087 	bgt.w	800818a <_strtod_l+0x912>
 800807c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008080:	f77f aea9 	ble.w	8007dd6 <_strtod_l+0x55e>
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	4b1a      	ldr	r3, [pc, #104]	; (80080f4 <_strtod_l+0x87c>)
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 fa2e 	bl	80004ec <__aeabi_dmul>
 8008090:	4b17      	ldr	r3, [pc, #92]	; (80080f0 <_strtod_l+0x878>)
 8008092:	4680      	mov	r8, r0
 8008094:	400b      	ands	r3, r1
 8008096:	4689      	mov	r9, r1
 8008098:	2b00      	cmp	r3, #0
 800809a:	f47f ae35 	bne.w	8007d08 <_strtod_l+0x490>
 800809e:	2322      	movs	r3, #34	; 0x22
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	e631      	b.n	8007d08 <_strtod_l+0x490>
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	ea03 0808 	and.w	r8, r3, r8
 80080b0:	e6de      	b.n	8007e70 <_strtod_l+0x5f8>
 80080b2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80080b6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80080ba:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80080be:	37e2      	adds	r7, #226	; 0xe2
 80080c0:	fa01 f307 	lsl.w	r3, r1, r7
 80080c4:	9310      	str	r3, [sp, #64]	; 0x40
 80080c6:	9113      	str	r1, [sp, #76]	; 0x4c
 80080c8:	e745      	b.n	8007f56 <_strtod_l+0x6de>
 80080ca:	2300      	movs	r3, #0
 80080cc:	9310      	str	r3, [sp, #64]	; 0x40
 80080ce:	2301      	movs	r3, #1
 80080d0:	9313      	str	r3, [sp, #76]	; 0x4c
 80080d2:	e740      	b.n	8007f56 <_strtod_l+0x6de>
 80080d4:	463a      	mov	r2, r7
 80080d6:	4620      	mov	r0, r4
 80080d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80080da:	f002 fe25 	bl	800ad28 <__lshift>
 80080de:	901a      	str	r0, [sp, #104]	; 0x68
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f47f af68 	bne.w	8007fb6 <_strtod_l+0x73e>
 80080e6:	e605      	b.n	8007cf4 <_strtod_l+0x47c>
 80080e8:	0800bca8 	.word	0x0800bca8
 80080ec:	fffffc02 	.word	0xfffffc02
 80080f0:	7ff00000 	.word	0x7ff00000
 80080f4:	39500000 	.word	0x39500000
 80080f8:	46ca      	mov	sl, r9
 80080fa:	d165      	bne.n	80081c8 <_strtod_l+0x950>
 80080fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008102:	b352      	cbz	r2, 800815a <_strtod_l+0x8e2>
 8008104:	4a9e      	ldr	r2, [pc, #632]	; (8008380 <_strtod_l+0xb08>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d12a      	bne.n	8008160 <_strtod_l+0x8e8>
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	4641      	mov	r1, r8
 800810e:	b1fb      	cbz	r3, 8008150 <_strtod_l+0x8d8>
 8008110:	4b9c      	ldr	r3, [pc, #624]	; (8008384 <_strtod_l+0xb0c>)
 8008112:	f04f 32ff 	mov.w	r2, #4294967295
 8008116:	ea09 0303 	and.w	r3, r9, r3
 800811a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800811e:	d81a      	bhi.n	8008156 <_strtod_l+0x8de>
 8008120:	0d1b      	lsrs	r3, r3, #20
 8008122:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008126:	fa02 f303 	lsl.w	r3, r2, r3
 800812a:	4299      	cmp	r1, r3
 800812c:	d118      	bne.n	8008160 <_strtod_l+0x8e8>
 800812e:	4b96      	ldr	r3, [pc, #600]	; (8008388 <_strtod_l+0xb10>)
 8008130:	459a      	cmp	sl, r3
 8008132:	d102      	bne.n	800813a <_strtod_l+0x8c2>
 8008134:	3101      	adds	r1, #1
 8008136:	f43f addd 	beq.w	8007cf4 <_strtod_l+0x47c>
 800813a:	f04f 0800 	mov.w	r8, #0
 800813e:	4b91      	ldr	r3, [pc, #580]	; (8008384 <_strtod_l+0xb0c>)
 8008140:	ea0a 0303 	and.w	r3, sl, r3
 8008144:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008148:	9b05      	ldr	r3, [sp, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d19a      	bne.n	8008084 <_strtod_l+0x80c>
 800814e:	e5db      	b.n	8007d08 <_strtod_l+0x490>
 8008150:	f04f 33ff 	mov.w	r3, #4294967295
 8008154:	e7e9      	b.n	800812a <_strtod_l+0x8b2>
 8008156:	4613      	mov	r3, r2
 8008158:	e7e7      	b.n	800812a <_strtod_l+0x8b2>
 800815a:	ea53 0308 	orrs.w	r3, r3, r8
 800815e:	d081      	beq.n	8008064 <_strtod_l+0x7ec>
 8008160:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008162:	b1e3      	cbz	r3, 800819e <_strtod_l+0x926>
 8008164:	ea13 0f0a 	tst.w	r3, sl
 8008168:	d0ee      	beq.n	8008148 <_strtod_l+0x8d0>
 800816a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816c:	4640      	mov	r0, r8
 800816e:	4649      	mov	r1, r9
 8008170:	9a05      	ldr	r2, [sp, #20]
 8008172:	b1c3      	cbz	r3, 80081a6 <_strtod_l+0x92e>
 8008174:	f7ff fb5d 	bl	8007832 <sulp>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800817e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008180:	f7f7 fffe 	bl	8000180 <__adddf3>
 8008184:	4680      	mov	r8, r0
 8008186:	4689      	mov	r9, r1
 8008188:	e7de      	b.n	8008148 <_strtod_l+0x8d0>
 800818a:	4013      	ands	r3, r2
 800818c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008190:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008194:	f04f 38ff 	mov.w	r8, #4294967295
 8008198:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800819c:	e7d4      	b.n	8008148 <_strtod_l+0x8d0>
 800819e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081a0:	ea13 0f08 	tst.w	r3, r8
 80081a4:	e7e0      	b.n	8008168 <_strtod_l+0x8f0>
 80081a6:	f7ff fb44 	bl	8007832 <sulp>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80081b2:	f7f7 ffe3 	bl	800017c <__aeabi_dsub>
 80081b6:	2200      	movs	r2, #0
 80081b8:	2300      	movs	r3, #0
 80081ba:	4680      	mov	r8, r0
 80081bc:	4689      	mov	r9, r1
 80081be:	f7f8 fbfd 	bl	80009bc <__aeabi_dcmpeq>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d0c0      	beq.n	8008148 <_strtod_l+0x8d0>
 80081c6:	e606      	b.n	8007dd6 <_strtod_l+0x55e>
 80081c8:	4659      	mov	r1, fp
 80081ca:	4630      	mov	r0, r6
 80081cc:	f002 ff7e 	bl	800b0cc <__ratio>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80081d8:	2200      	movs	r2, #0
 80081da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081de:	f7f8 fc01 	bl	80009e4 <__aeabi_dcmple>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d06f      	beq.n	80082c6 <_strtod_l+0xa4e>
 80081e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d17c      	bne.n	80082e6 <_strtod_l+0xa6e>
 80081ec:	f1b8 0f00 	cmp.w	r8, #0
 80081f0:	d159      	bne.n	80082a6 <_strtod_l+0xa2e>
 80081f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d17b      	bne.n	80082f2 <_strtod_l+0xa7a>
 80081fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081fe:	2200      	movs	r2, #0
 8008200:	4b62      	ldr	r3, [pc, #392]	; (800838c <_strtod_l+0xb14>)
 8008202:	f7f8 fbe5 	bl	80009d0 <__aeabi_dcmplt>
 8008206:	2800      	cmp	r0, #0
 8008208:	d15a      	bne.n	80082c0 <_strtod_l+0xa48>
 800820a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800820e:	2200      	movs	r2, #0
 8008210:	4b5f      	ldr	r3, [pc, #380]	; (8008390 <_strtod_l+0xb18>)
 8008212:	f7f8 f96b 	bl	80004ec <__aeabi_dmul>
 8008216:	4605      	mov	r5, r0
 8008218:	460f      	mov	r7, r1
 800821a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800821e:	9506      	str	r5, [sp, #24]
 8008220:	9307      	str	r3, [sp, #28]
 8008222:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008226:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800822a:	4b56      	ldr	r3, [pc, #344]	; (8008384 <_strtod_l+0xb0c>)
 800822c:	4a55      	ldr	r2, [pc, #340]	; (8008384 <_strtod_l+0xb0c>)
 800822e:	ea0a 0303 	and.w	r3, sl, r3
 8008232:	9313      	str	r3, [sp, #76]	; 0x4c
 8008234:	4b57      	ldr	r3, [pc, #348]	; (8008394 <_strtod_l+0xb1c>)
 8008236:	ea0a 0202 	and.w	r2, sl, r2
 800823a:	429a      	cmp	r2, r3
 800823c:	f040 80b0 	bne.w	80083a0 <_strtod_l+0xb28>
 8008240:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008244:	4640      	mov	r0, r8
 8008246:	4649      	mov	r1, r9
 8008248:	f002 fe82 	bl	800af50 <__ulp>
 800824c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008250:	f7f8 f94c 	bl	80004ec <__aeabi_dmul>
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	f7f7 ff92 	bl	8000180 <__adddf3>
 800825c:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008384 <_strtod_l+0xb0c>
 8008260:	4a4d      	ldr	r2, [pc, #308]	; (8008398 <_strtod_l+0xb20>)
 8008262:	ea01 0a0a 	and.w	sl, r1, sl
 8008266:	4592      	cmp	sl, r2
 8008268:	4680      	mov	r8, r0
 800826a:	d948      	bls.n	80082fe <_strtod_l+0xa86>
 800826c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800826e:	4b46      	ldr	r3, [pc, #280]	; (8008388 <_strtod_l+0xb10>)
 8008270:	429a      	cmp	r2, r3
 8008272:	d103      	bne.n	800827c <_strtod_l+0xa04>
 8008274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008276:	3301      	adds	r3, #1
 8008278:	f43f ad3c 	beq.w	8007cf4 <_strtod_l+0x47c>
 800827c:	f04f 38ff 	mov.w	r8, #4294967295
 8008280:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008388 <_strtod_l+0xb10>
 8008284:	4620      	mov	r0, r4
 8008286:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008288:	f002 fb36 	bl	800a8f8 <_Bfree>
 800828c:	4620      	mov	r0, r4
 800828e:	9908      	ldr	r1, [sp, #32]
 8008290:	f002 fb32 	bl	800a8f8 <_Bfree>
 8008294:	4659      	mov	r1, fp
 8008296:	4620      	mov	r0, r4
 8008298:	f002 fb2e 	bl	800a8f8 <_Bfree>
 800829c:	4631      	mov	r1, r6
 800829e:	4620      	mov	r0, r4
 80082a0:	f002 fb2a 	bl	800a8f8 <_Bfree>
 80082a4:	e605      	b.n	8007eb2 <_strtod_l+0x63a>
 80082a6:	f1b8 0f01 	cmp.w	r8, #1
 80082aa:	d103      	bne.n	80082b4 <_strtod_l+0xa3c>
 80082ac:	f1b9 0f00 	cmp.w	r9, #0
 80082b0:	f43f ad91 	beq.w	8007dd6 <_strtod_l+0x55e>
 80082b4:	2200      	movs	r2, #0
 80082b6:	4b39      	ldr	r3, [pc, #228]	; (800839c <_strtod_l+0xb24>)
 80082b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80082ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082be:	e016      	b.n	80082ee <_strtod_l+0xa76>
 80082c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80082c2:	4f33      	ldr	r7, [pc, #204]	; (8008390 <_strtod_l+0xb18>)
 80082c4:	e7a9      	b.n	800821a <_strtod_l+0x9a2>
 80082c6:	4b32      	ldr	r3, [pc, #200]	; (8008390 <_strtod_l+0xb18>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082ce:	f7f8 f90d 	bl	80004ec <__aeabi_dmul>
 80082d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d4:	4605      	mov	r5, r0
 80082d6:	460f      	mov	r7, r1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d09e      	beq.n	800821a <_strtod_l+0x9a2>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082e4:	e79d      	b.n	8008222 <_strtod_l+0x9aa>
 80082e6:	2200      	movs	r2, #0
 80082e8:	4b28      	ldr	r3, [pc, #160]	; (800838c <_strtod_l+0xb14>)
 80082ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082ee:	4f27      	ldr	r7, [pc, #156]	; (800838c <_strtod_l+0xb14>)
 80082f0:	e797      	b.n	8008222 <_strtod_l+0x9aa>
 80082f2:	2200      	movs	r2, #0
 80082f4:	4b29      	ldr	r3, [pc, #164]	; (800839c <_strtod_l+0xb24>)
 80082f6:	4645      	mov	r5, r8
 80082f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082fc:	e7f7      	b.n	80082ee <_strtod_l+0xa76>
 80082fe:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008302:	9b05      	ldr	r3, [sp, #20]
 8008304:	46ca      	mov	sl, r9
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1bc      	bne.n	8008284 <_strtod_l+0xa0c>
 800830a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800830e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008310:	0d1b      	lsrs	r3, r3, #20
 8008312:	051b      	lsls	r3, r3, #20
 8008314:	429a      	cmp	r2, r3
 8008316:	d1b5      	bne.n	8008284 <_strtod_l+0xa0c>
 8008318:	4628      	mov	r0, r5
 800831a:	4639      	mov	r1, r7
 800831c:	f7f8 ff28 	bl	8001170 <__aeabi_d2lz>
 8008320:	f7f8 f8b6 	bl	8000490 <__aeabi_l2d>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4628      	mov	r0, r5
 800832a:	4639      	mov	r1, r7
 800832c:	f7f7 ff26 	bl	800017c <__aeabi_dsub>
 8008330:	460b      	mov	r3, r1
 8008332:	4602      	mov	r2, r0
 8008334:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008338:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800833c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008342:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008346:	d06c      	beq.n	8008422 <_strtod_l+0xbaa>
 8008348:	a309      	add	r3, pc, #36	; (adr r3, 8008370 <_strtod_l+0xaf8>)
 800834a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834e:	f7f8 fb3f 	bl	80009d0 <__aeabi_dcmplt>
 8008352:	2800      	cmp	r0, #0
 8008354:	f47f acd8 	bne.w	8007d08 <_strtod_l+0x490>
 8008358:	a307      	add	r3, pc, #28	; (adr r3, 8008378 <_strtod_l+0xb00>)
 800835a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008362:	f7f8 fb53 	bl	8000a0c <__aeabi_dcmpgt>
 8008366:	2800      	cmp	r0, #0
 8008368:	d08c      	beq.n	8008284 <_strtod_l+0xa0c>
 800836a:	e4cd      	b.n	8007d08 <_strtod_l+0x490>
 800836c:	f3af 8000 	nop.w
 8008370:	94a03595 	.word	0x94a03595
 8008374:	3fdfffff 	.word	0x3fdfffff
 8008378:	35afe535 	.word	0x35afe535
 800837c:	3fe00000 	.word	0x3fe00000
 8008380:	000fffff 	.word	0x000fffff
 8008384:	7ff00000 	.word	0x7ff00000
 8008388:	7fefffff 	.word	0x7fefffff
 800838c:	3ff00000 	.word	0x3ff00000
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	7fe00000 	.word	0x7fe00000
 8008398:	7c9fffff 	.word	0x7c9fffff
 800839c:	bff00000 	.word	0xbff00000
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	b333      	cbz	r3, 80083f2 <_strtod_l+0xb7a>
 80083a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80083aa:	d822      	bhi.n	80083f2 <_strtod_l+0xb7a>
 80083ac:	a328      	add	r3, pc, #160	; (adr r3, 8008450 <_strtod_l+0xbd8>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	4628      	mov	r0, r5
 80083b4:	4639      	mov	r1, r7
 80083b6:	f7f8 fb15 	bl	80009e4 <__aeabi_dcmple>
 80083ba:	b1a0      	cbz	r0, 80083e6 <_strtod_l+0xb6e>
 80083bc:	4639      	mov	r1, r7
 80083be:	4628      	mov	r0, r5
 80083c0:	f7f8 fb6c 	bl	8000a9c <__aeabi_d2uiz>
 80083c4:	2801      	cmp	r0, #1
 80083c6:	bf38      	it	cc
 80083c8:	2001      	movcc	r0, #1
 80083ca:	f7f8 f815 	bl	80003f8 <__aeabi_ui2d>
 80083ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083d0:	4605      	mov	r5, r0
 80083d2:	460f      	mov	r7, r1
 80083d4:	bb03      	cbnz	r3, 8008418 <_strtod_l+0xba0>
 80083d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083da:	9014      	str	r0, [sp, #80]	; 0x50
 80083dc:	9315      	str	r3, [sp, #84]	; 0x54
 80083de:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80083e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083ea:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80083ee:	1a9b      	subs	r3, r3, r2
 80083f0:	9311      	str	r3, [sp, #68]	; 0x44
 80083f2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083f6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80083fa:	f002 fda9 	bl	800af50 <__ulp>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4640      	mov	r0, r8
 8008404:	4649      	mov	r1, r9
 8008406:	f7f8 f871 	bl	80004ec <__aeabi_dmul>
 800840a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800840c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800840e:	f7f7 feb7 	bl	8000180 <__adddf3>
 8008412:	4680      	mov	r8, r0
 8008414:	4689      	mov	r9, r1
 8008416:	e774      	b.n	8008302 <_strtod_l+0xa8a>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008420:	e7dd      	b.n	80083de <_strtod_l+0xb66>
 8008422:	a30d      	add	r3, pc, #52	; (adr r3, 8008458 <_strtod_l+0xbe0>)
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	f7f8 fad2 	bl	80009d0 <__aeabi_dcmplt>
 800842c:	e79b      	b.n	8008366 <_strtod_l+0xaee>
 800842e:	2300      	movs	r3, #0
 8008430:	930e      	str	r3, [sp, #56]	; 0x38
 8008432:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008434:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	f7ff ba5b 	b.w	80078f2 <_strtod_l+0x7a>
 800843c:	2a65      	cmp	r2, #101	; 0x65
 800843e:	f43f ab52 	beq.w	8007ae6 <_strtod_l+0x26e>
 8008442:	2a45      	cmp	r2, #69	; 0x45
 8008444:	f43f ab4f 	beq.w	8007ae6 <_strtod_l+0x26e>
 8008448:	2301      	movs	r3, #1
 800844a:	f7ff bb87 	b.w	8007b5c <_strtod_l+0x2e4>
 800844e:	bf00      	nop
 8008450:	ffc00000 	.word	0xffc00000
 8008454:	41dfffff 	.word	0x41dfffff
 8008458:	94a03595 	.word	0x94a03595
 800845c:	3fcfffff 	.word	0x3fcfffff

08008460 <strtod>:
 8008460:	460a      	mov	r2, r1
 8008462:	4601      	mov	r1, r0
 8008464:	4802      	ldr	r0, [pc, #8]	; (8008470 <strtod+0x10>)
 8008466:	4b03      	ldr	r3, [pc, #12]	; (8008474 <strtod+0x14>)
 8008468:	6800      	ldr	r0, [r0, #0]
 800846a:	f7ff ba05 	b.w	8007878 <_strtod_l>
 800846e:	bf00      	nop
 8008470:	200001d0 	.word	0x200001d0
 8008474:	20000018 	.word	0x20000018

08008478 <__cvt>:
 8008478:	2b00      	cmp	r3, #0
 800847a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800847e:	461f      	mov	r7, r3
 8008480:	bfbb      	ittet	lt
 8008482:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008486:	461f      	movlt	r7, r3
 8008488:	2300      	movge	r3, #0
 800848a:	232d      	movlt	r3, #45	; 0x2d
 800848c:	b088      	sub	sp, #32
 800848e:	4614      	mov	r4, r2
 8008490:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008492:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008494:	7013      	strb	r3, [r2, #0]
 8008496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008498:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800849c:	f023 0820 	bic.w	r8, r3, #32
 80084a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084a4:	d005      	beq.n	80084b2 <__cvt+0x3a>
 80084a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084aa:	d100      	bne.n	80084ae <__cvt+0x36>
 80084ac:	3501      	adds	r5, #1
 80084ae:	2302      	movs	r3, #2
 80084b0:	e000      	b.n	80084b4 <__cvt+0x3c>
 80084b2:	2303      	movs	r3, #3
 80084b4:	aa07      	add	r2, sp, #28
 80084b6:	9204      	str	r2, [sp, #16]
 80084b8:	aa06      	add	r2, sp, #24
 80084ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80084be:	e9cd 3500 	strd	r3, r5, [sp]
 80084c2:	4622      	mov	r2, r4
 80084c4:	463b      	mov	r3, r7
 80084c6:	f000 ff8b 	bl	80093e0 <_dtoa_r>
 80084ca:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084ce:	4606      	mov	r6, r0
 80084d0:	d102      	bne.n	80084d8 <__cvt+0x60>
 80084d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084d4:	07db      	lsls	r3, r3, #31
 80084d6:	d522      	bpl.n	800851e <__cvt+0xa6>
 80084d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084dc:	eb06 0905 	add.w	r9, r6, r5
 80084e0:	d110      	bne.n	8008504 <__cvt+0x8c>
 80084e2:	7833      	ldrb	r3, [r6, #0]
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d10a      	bne.n	80084fe <__cvt+0x86>
 80084e8:	2200      	movs	r2, #0
 80084ea:	2300      	movs	r3, #0
 80084ec:	4620      	mov	r0, r4
 80084ee:	4639      	mov	r1, r7
 80084f0:	f7f8 fa64 	bl	80009bc <__aeabi_dcmpeq>
 80084f4:	b918      	cbnz	r0, 80084fe <__cvt+0x86>
 80084f6:	f1c5 0501 	rsb	r5, r5, #1
 80084fa:	f8ca 5000 	str.w	r5, [sl]
 80084fe:	f8da 3000 	ldr.w	r3, [sl]
 8008502:	4499      	add	r9, r3
 8008504:	2200      	movs	r2, #0
 8008506:	2300      	movs	r3, #0
 8008508:	4620      	mov	r0, r4
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 fa56 	bl	80009bc <__aeabi_dcmpeq>
 8008510:	b108      	cbz	r0, 8008516 <__cvt+0x9e>
 8008512:	f8cd 901c 	str.w	r9, [sp, #28]
 8008516:	2230      	movs	r2, #48	; 0x30
 8008518:	9b07      	ldr	r3, [sp, #28]
 800851a:	454b      	cmp	r3, r9
 800851c:	d307      	bcc.n	800852e <__cvt+0xb6>
 800851e:	4630      	mov	r0, r6
 8008520:	9b07      	ldr	r3, [sp, #28]
 8008522:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008524:	1b9b      	subs	r3, r3, r6
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	b008      	add	sp, #32
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	9107      	str	r1, [sp, #28]
 8008532:	701a      	strb	r2, [r3, #0]
 8008534:	e7f0      	b.n	8008518 <__cvt+0xa0>

08008536 <__exponent>:
 8008536:	4603      	mov	r3, r0
 8008538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800853a:	2900      	cmp	r1, #0
 800853c:	f803 2b02 	strb.w	r2, [r3], #2
 8008540:	bfb6      	itet	lt
 8008542:	222d      	movlt	r2, #45	; 0x2d
 8008544:	222b      	movge	r2, #43	; 0x2b
 8008546:	4249      	neglt	r1, r1
 8008548:	2909      	cmp	r1, #9
 800854a:	7042      	strb	r2, [r0, #1]
 800854c:	dd2a      	ble.n	80085a4 <__exponent+0x6e>
 800854e:	f10d 0207 	add.w	r2, sp, #7
 8008552:	4617      	mov	r7, r2
 8008554:	260a      	movs	r6, #10
 8008556:	fb91 f5f6 	sdiv	r5, r1, r6
 800855a:	4694      	mov	ip, r2
 800855c:	fb06 1415 	mls	r4, r6, r5, r1
 8008560:	3430      	adds	r4, #48	; 0x30
 8008562:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008566:	460c      	mov	r4, r1
 8008568:	2c63      	cmp	r4, #99	; 0x63
 800856a:	4629      	mov	r1, r5
 800856c:	f102 32ff 	add.w	r2, r2, #4294967295
 8008570:	dcf1      	bgt.n	8008556 <__exponent+0x20>
 8008572:	3130      	adds	r1, #48	; 0x30
 8008574:	f1ac 0402 	sub.w	r4, ip, #2
 8008578:	f802 1c01 	strb.w	r1, [r2, #-1]
 800857c:	4622      	mov	r2, r4
 800857e:	1c41      	adds	r1, r0, #1
 8008580:	42ba      	cmp	r2, r7
 8008582:	d30a      	bcc.n	800859a <__exponent+0x64>
 8008584:	f10d 0209 	add.w	r2, sp, #9
 8008588:	eba2 020c 	sub.w	r2, r2, ip
 800858c:	42bc      	cmp	r4, r7
 800858e:	bf88      	it	hi
 8008590:	2200      	movhi	r2, #0
 8008592:	4413      	add	r3, r2
 8008594:	1a18      	subs	r0, r3, r0
 8008596:	b003      	add	sp, #12
 8008598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800859a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800859e:	f801 5f01 	strb.w	r5, [r1, #1]!
 80085a2:	e7ed      	b.n	8008580 <__exponent+0x4a>
 80085a4:	2330      	movs	r3, #48	; 0x30
 80085a6:	3130      	adds	r1, #48	; 0x30
 80085a8:	7083      	strb	r3, [r0, #2]
 80085aa:	70c1      	strb	r1, [r0, #3]
 80085ac:	1d03      	adds	r3, r0, #4
 80085ae:	e7f1      	b.n	8008594 <__exponent+0x5e>

080085b0 <_printf_float>:
 80085b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b4:	b091      	sub	sp, #68	; 0x44
 80085b6:	460c      	mov	r4, r1
 80085b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80085bc:	4616      	mov	r6, r2
 80085be:	461f      	mov	r7, r3
 80085c0:	4605      	mov	r5, r0
 80085c2:	f000 fde9 	bl	8009198 <_localeconv_r>
 80085c6:	6803      	ldr	r3, [r0, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	9309      	str	r3, [sp, #36]	; 0x24
 80085cc:	f7f7 fdca 	bl	8000164 <strlen>
 80085d0:	2300      	movs	r3, #0
 80085d2:	930e      	str	r3, [sp, #56]	; 0x38
 80085d4:	f8d8 3000 	ldr.w	r3, [r8]
 80085d8:	900a      	str	r0, [sp, #40]	; 0x28
 80085da:	3307      	adds	r3, #7
 80085dc:	f023 0307 	bic.w	r3, r3, #7
 80085e0:	f103 0208 	add.w	r2, r3, #8
 80085e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80085e8:	f8d4 b000 	ldr.w	fp, [r4]
 80085ec:	f8c8 2000 	str.w	r2, [r8]
 80085f0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80085f4:	4652      	mov	r2, sl
 80085f6:	4643      	mov	r3, r8
 80085f8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085fc:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008600:	930b      	str	r3, [sp, #44]	; 0x2c
 8008602:	f04f 32ff 	mov.w	r2, #4294967295
 8008606:	4650      	mov	r0, sl
 8008608:	4b9c      	ldr	r3, [pc, #624]	; (800887c <_printf_float+0x2cc>)
 800860a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800860c:	f7f8 fa08 	bl	8000a20 <__aeabi_dcmpun>
 8008610:	bb70      	cbnz	r0, 8008670 <_printf_float+0xc0>
 8008612:	f04f 32ff 	mov.w	r2, #4294967295
 8008616:	4650      	mov	r0, sl
 8008618:	4b98      	ldr	r3, [pc, #608]	; (800887c <_printf_float+0x2cc>)
 800861a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800861c:	f7f8 f9e2 	bl	80009e4 <__aeabi_dcmple>
 8008620:	bb30      	cbnz	r0, 8008670 <_printf_float+0xc0>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4650      	mov	r0, sl
 8008628:	4641      	mov	r1, r8
 800862a:	f7f8 f9d1 	bl	80009d0 <__aeabi_dcmplt>
 800862e:	b110      	cbz	r0, 8008636 <_printf_float+0x86>
 8008630:	232d      	movs	r3, #45	; 0x2d
 8008632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008636:	4a92      	ldr	r2, [pc, #584]	; (8008880 <_printf_float+0x2d0>)
 8008638:	4b92      	ldr	r3, [pc, #584]	; (8008884 <_printf_float+0x2d4>)
 800863a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800863e:	bf94      	ite	ls
 8008640:	4690      	movls	r8, r2
 8008642:	4698      	movhi	r8, r3
 8008644:	2303      	movs	r3, #3
 8008646:	f04f 0a00 	mov.w	sl, #0
 800864a:	6123      	str	r3, [r4, #16]
 800864c:	f02b 0304 	bic.w	r3, fp, #4
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	4633      	mov	r3, r6
 8008654:	4621      	mov	r1, r4
 8008656:	4628      	mov	r0, r5
 8008658:	9700      	str	r7, [sp, #0]
 800865a:	aa0f      	add	r2, sp, #60	; 0x3c
 800865c:	f000 f9d6 	bl	8008a0c <_printf_common>
 8008660:	3001      	adds	r0, #1
 8008662:	f040 8090 	bne.w	8008786 <_printf_float+0x1d6>
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	b011      	add	sp, #68	; 0x44
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	4652      	mov	r2, sl
 8008672:	4643      	mov	r3, r8
 8008674:	4650      	mov	r0, sl
 8008676:	4641      	mov	r1, r8
 8008678:	f7f8 f9d2 	bl	8000a20 <__aeabi_dcmpun>
 800867c:	b148      	cbz	r0, 8008692 <_printf_float+0xe2>
 800867e:	f1b8 0f00 	cmp.w	r8, #0
 8008682:	bfb8      	it	lt
 8008684:	232d      	movlt	r3, #45	; 0x2d
 8008686:	4a80      	ldr	r2, [pc, #512]	; (8008888 <_printf_float+0x2d8>)
 8008688:	bfb8      	it	lt
 800868a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800868e:	4b7f      	ldr	r3, [pc, #508]	; (800888c <_printf_float+0x2dc>)
 8008690:	e7d3      	b.n	800863a <_printf_float+0x8a>
 8008692:	6863      	ldr	r3, [r4, #4]
 8008694:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008698:	1c5a      	adds	r2, r3, #1
 800869a:	d142      	bne.n	8008722 <_printf_float+0x172>
 800869c:	2306      	movs	r3, #6
 800869e:	6063      	str	r3, [r4, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	9206      	str	r2, [sp, #24]
 80086a4:	aa0e      	add	r2, sp, #56	; 0x38
 80086a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80086aa:	aa0d      	add	r2, sp, #52	; 0x34
 80086ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80086b0:	9203      	str	r2, [sp, #12]
 80086b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80086b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80086ba:	6023      	str	r3, [r4, #0]
 80086bc:	6863      	ldr	r3, [r4, #4]
 80086be:	4652      	mov	r2, sl
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	4628      	mov	r0, r5
 80086c4:	4643      	mov	r3, r8
 80086c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80086c8:	f7ff fed6 	bl	8008478 <__cvt>
 80086cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086ce:	4680      	mov	r8, r0
 80086d0:	2947      	cmp	r1, #71	; 0x47
 80086d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80086d4:	d108      	bne.n	80086e8 <_printf_float+0x138>
 80086d6:	1cc8      	adds	r0, r1, #3
 80086d8:	db02      	blt.n	80086e0 <_printf_float+0x130>
 80086da:	6863      	ldr	r3, [r4, #4]
 80086dc:	4299      	cmp	r1, r3
 80086de:	dd40      	ble.n	8008762 <_printf_float+0x1b2>
 80086e0:	f1a9 0902 	sub.w	r9, r9, #2
 80086e4:	fa5f f989 	uxtb.w	r9, r9
 80086e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80086ec:	d81f      	bhi.n	800872e <_printf_float+0x17e>
 80086ee:	464a      	mov	r2, r9
 80086f0:	3901      	subs	r1, #1
 80086f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086f6:	910d      	str	r1, [sp, #52]	; 0x34
 80086f8:	f7ff ff1d 	bl	8008536 <__exponent>
 80086fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086fe:	4682      	mov	sl, r0
 8008700:	1813      	adds	r3, r2, r0
 8008702:	2a01      	cmp	r2, #1
 8008704:	6123      	str	r3, [r4, #16]
 8008706:	dc02      	bgt.n	800870e <_printf_float+0x15e>
 8008708:	6822      	ldr	r2, [r4, #0]
 800870a:	07d2      	lsls	r2, r2, #31
 800870c:	d501      	bpl.n	8008712 <_printf_float+0x162>
 800870e:	3301      	adds	r3, #1
 8008710:	6123      	str	r3, [r4, #16]
 8008712:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008716:	2b00      	cmp	r3, #0
 8008718:	d09b      	beq.n	8008652 <_printf_float+0xa2>
 800871a:	232d      	movs	r3, #45	; 0x2d
 800871c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008720:	e797      	b.n	8008652 <_printf_float+0xa2>
 8008722:	2947      	cmp	r1, #71	; 0x47
 8008724:	d1bc      	bne.n	80086a0 <_printf_float+0xf0>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1ba      	bne.n	80086a0 <_printf_float+0xf0>
 800872a:	2301      	movs	r3, #1
 800872c:	e7b7      	b.n	800869e <_printf_float+0xee>
 800872e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008732:	d118      	bne.n	8008766 <_printf_float+0x1b6>
 8008734:	2900      	cmp	r1, #0
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	dd0b      	ble.n	8008752 <_printf_float+0x1a2>
 800873a:	6121      	str	r1, [r4, #16]
 800873c:	b913      	cbnz	r3, 8008744 <_printf_float+0x194>
 800873e:	6822      	ldr	r2, [r4, #0]
 8008740:	07d0      	lsls	r0, r2, #31
 8008742:	d502      	bpl.n	800874a <_printf_float+0x19a>
 8008744:	3301      	adds	r3, #1
 8008746:	440b      	add	r3, r1
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	f04f 0a00 	mov.w	sl, #0
 800874e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008750:	e7df      	b.n	8008712 <_printf_float+0x162>
 8008752:	b913      	cbnz	r3, 800875a <_printf_float+0x1aa>
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	07d2      	lsls	r2, r2, #31
 8008758:	d501      	bpl.n	800875e <_printf_float+0x1ae>
 800875a:	3302      	adds	r3, #2
 800875c:	e7f4      	b.n	8008748 <_printf_float+0x198>
 800875e:	2301      	movs	r3, #1
 8008760:	e7f2      	b.n	8008748 <_printf_float+0x198>
 8008762:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008768:	4299      	cmp	r1, r3
 800876a:	db05      	blt.n	8008778 <_printf_float+0x1c8>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	6121      	str	r1, [r4, #16]
 8008770:	07d8      	lsls	r0, r3, #31
 8008772:	d5ea      	bpl.n	800874a <_printf_float+0x19a>
 8008774:	1c4b      	adds	r3, r1, #1
 8008776:	e7e7      	b.n	8008748 <_printf_float+0x198>
 8008778:	2900      	cmp	r1, #0
 800877a:	bfcc      	ite	gt
 800877c:	2201      	movgt	r2, #1
 800877e:	f1c1 0202 	rsble	r2, r1, #2
 8008782:	4413      	add	r3, r2
 8008784:	e7e0      	b.n	8008748 <_printf_float+0x198>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	055a      	lsls	r2, r3, #21
 800878a:	d407      	bmi.n	800879c <_printf_float+0x1ec>
 800878c:	6923      	ldr	r3, [r4, #16]
 800878e:	4642      	mov	r2, r8
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	d12b      	bne.n	80087f2 <_printf_float+0x242>
 800879a:	e764      	b.n	8008666 <_printf_float+0xb6>
 800879c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80087a0:	f240 80dd 	bls.w	800895e <_printf_float+0x3ae>
 80087a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087a8:	2200      	movs	r2, #0
 80087aa:	2300      	movs	r3, #0
 80087ac:	f7f8 f906 	bl	80009bc <__aeabi_dcmpeq>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d033      	beq.n	800881c <_printf_float+0x26c>
 80087b4:	2301      	movs	r3, #1
 80087b6:	4631      	mov	r1, r6
 80087b8:	4628      	mov	r0, r5
 80087ba:	4a35      	ldr	r2, [pc, #212]	; (8008890 <_printf_float+0x2e0>)
 80087bc:	47b8      	blx	r7
 80087be:	3001      	adds	r0, #1
 80087c0:	f43f af51 	beq.w	8008666 <_printf_float+0xb6>
 80087c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80087c8:	429a      	cmp	r2, r3
 80087ca:	db02      	blt.n	80087d2 <_printf_float+0x222>
 80087cc:	6823      	ldr	r3, [r4, #0]
 80087ce:	07d8      	lsls	r0, r3, #31
 80087d0:	d50f      	bpl.n	80087f2 <_printf_float+0x242>
 80087d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087d6:	4631      	mov	r1, r6
 80087d8:	4628      	mov	r0, r5
 80087da:	47b8      	blx	r7
 80087dc:	3001      	adds	r0, #1
 80087de:	f43f af42 	beq.w	8008666 <_printf_float+0xb6>
 80087e2:	f04f 0800 	mov.w	r8, #0
 80087e6:	f104 091a 	add.w	r9, r4, #26
 80087ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ec:	3b01      	subs	r3, #1
 80087ee:	4543      	cmp	r3, r8
 80087f0:	dc09      	bgt.n	8008806 <_printf_float+0x256>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	079b      	lsls	r3, r3, #30
 80087f6:	f100 8104 	bmi.w	8008a02 <_printf_float+0x452>
 80087fa:	68e0      	ldr	r0, [r4, #12]
 80087fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087fe:	4298      	cmp	r0, r3
 8008800:	bfb8      	it	lt
 8008802:	4618      	movlt	r0, r3
 8008804:	e731      	b.n	800866a <_printf_float+0xba>
 8008806:	2301      	movs	r3, #1
 8008808:	464a      	mov	r2, r9
 800880a:	4631      	mov	r1, r6
 800880c:	4628      	mov	r0, r5
 800880e:	47b8      	blx	r7
 8008810:	3001      	adds	r0, #1
 8008812:	f43f af28 	beq.w	8008666 <_printf_float+0xb6>
 8008816:	f108 0801 	add.w	r8, r8, #1
 800881a:	e7e6      	b.n	80087ea <_printf_float+0x23a>
 800881c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800881e:	2b00      	cmp	r3, #0
 8008820:	dc38      	bgt.n	8008894 <_printf_float+0x2e4>
 8008822:	2301      	movs	r3, #1
 8008824:	4631      	mov	r1, r6
 8008826:	4628      	mov	r0, r5
 8008828:	4a19      	ldr	r2, [pc, #100]	; (8008890 <_printf_float+0x2e0>)
 800882a:	47b8      	blx	r7
 800882c:	3001      	adds	r0, #1
 800882e:	f43f af1a 	beq.w	8008666 <_printf_float+0xb6>
 8008832:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008836:	4313      	orrs	r3, r2
 8008838:	d102      	bne.n	8008840 <_printf_float+0x290>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	07d9      	lsls	r1, r3, #31
 800883e:	d5d8      	bpl.n	80087f2 <_printf_float+0x242>
 8008840:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	f43f af0b 	beq.w	8008666 <_printf_float+0xb6>
 8008850:	f04f 0900 	mov.w	r9, #0
 8008854:	f104 0a1a 	add.w	sl, r4, #26
 8008858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800885a:	425b      	negs	r3, r3
 800885c:	454b      	cmp	r3, r9
 800885e:	dc01      	bgt.n	8008864 <_printf_float+0x2b4>
 8008860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008862:	e794      	b.n	800878e <_printf_float+0x1de>
 8008864:	2301      	movs	r3, #1
 8008866:	4652      	mov	r2, sl
 8008868:	4631      	mov	r1, r6
 800886a:	4628      	mov	r0, r5
 800886c:	47b8      	blx	r7
 800886e:	3001      	adds	r0, #1
 8008870:	f43f aef9 	beq.w	8008666 <_printf_float+0xb6>
 8008874:	f109 0901 	add.w	r9, r9, #1
 8008878:	e7ee      	b.n	8008858 <_printf_float+0x2a8>
 800887a:	bf00      	nop
 800887c:	7fefffff 	.word	0x7fefffff
 8008880:	0800bcd0 	.word	0x0800bcd0
 8008884:	0800bcd4 	.word	0x0800bcd4
 8008888:	0800bcd8 	.word	0x0800bcd8
 800888c:	0800bcdc 	.word	0x0800bcdc
 8008890:	0800bce0 	.word	0x0800bce0
 8008894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008896:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008898:	429a      	cmp	r2, r3
 800889a:	bfa8      	it	ge
 800889c:	461a      	movge	r2, r3
 800889e:	2a00      	cmp	r2, #0
 80088a0:	4691      	mov	r9, r2
 80088a2:	dc37      	bgt.n	8008914 <_printf_float+0x364>
 80088a4:	f04f 0b00 	mov.w	fp, #0
 80088a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ac:	f104 021a 	add.w	r2, r4, #26
 80088b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80088b4:	ebaa 0309 	sub.w	r3, sl, r9
 80088b8:	455b      	cmp	r3, fp
 80088ba:	dc33      	bgt.n	8008924 <_printf_float+0x374>
 80088bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088c0:	429a      	cmp	r2, r3
 80088c2:	db3b      	blt.n	800893c <_printf_float+0x38c>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	07da      	lsls	r2, r3, #31
 80088c8:	d438      	bmi.n	800893c <_printf_float+0x38c>
 80088ca:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80088ce:	eba2 0903 	sub.w	r9, r2, r3
 80088d2:	eba2 020a 	sub.w	r2, r2, sl
 80088d6:	4591      	cmp	r9, r2
 80088d8:	bfa8      	it	ge
 80088da:	4691      	movge	r9, r2
 80088dc:	f1b9 0f00 	cmp.w	r9, #0
 80088e0:	dc34      	bgt.n	800894c <_printf_float+0x39c>
 80088e2:	f04f 0800 	mov.w	r8, #0
 80088e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088ea:	f104 0a1a 	add.w	sl, r4, #26
 80088ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80088f2:	1a9b      	subs	r3, r3, r2
 80088f4:	eba3 0309 	sub.w	r3, r3, r9
 80088f8:	4543      	cmp	r3, r8
 80088fa:	f77f af7a 	ble.w	80087f2 <_printf_float+0x242>
 80088fe:	2301      	movs	r3, #1
 8008900:	4652      	mov	r2, sl
 8008902:	4631      	mov	r1, r6
 8008904:	4628      	mov	r0, r5
 8008906:	47b8      	blx	r7
 8008908:	3001      	adds	r0, #1
 800890a:	f43f aeac 	beq.w	8008666 <_printf_float+0xb6>
 800890e:	f108 0801 	add.w	r8, r8, #1
 8008912:	e7ec      	b.n	80088ee <_printf_float+0x33e>
 8008914:	4613      	mov	r3, r2
 8008916:	4631      	mov	r1, r6
 8008918:	4642      	mov	r2, r8
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	d1c0      	bne.n	80088a4 <_printf_float+0x2f4>
 8008922:	e6a0      	b.n	8008666 <_printf_float+0xb6>
 8008924:	2301      	movs	r3, #1
 8008926:	4631      	mov	r1, r6
 8008928:	4628      	mov	r0, r5
 800892a:	920b      	str	r2, [sp, #44]	; 0x2c
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f ae99 	beq.w	8008666 <_printf_float+0xb6>
 8008934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008936:	f10b 0b01 	add.w	fp, fp, #1
 800893a:	e7b9      	b.n	80088b0 <_printf_float+0x300>
 800893c:	4631      	mov	r1, r6
 800893e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008942:	4628      	mov	r0, r5
 8008944:	47b8      	blx	r7
 8008946:	3001      	adds	r0, #1
 8008948:	d1bf      	bne.n	80088ca <_printf_float+0x31a>
 800894a:	e68c      	b.n	8008666 <_printf_float+0xb6>
 800894c:	464b      	mov	r3, r9
 800894e:	4631      	mov	r1, r6
 8008950:	4628      	mov	r0, r5
 8008952:	eb08 020a 	add.w	r2, r8, sl
 8008956:	47b8      	blx	r7
 8008958:	3001      	adds	r0, #1
 800895a:	d1c2      	bne.n	80088e2 <_printf_float+0x332>
 800895c:	e683      	b.n	8008666 <_printf_float+0xb6>
 800895e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008960:	2a01      	cmp	r2, #1
 8008962:	dc01      	bgt.n	8008968 <_printf_float+0x3b8>
 8008964:	07db      	lsls	r3, r3, #31
 8008966:	d539      	bpl.n	80089dc <_printf_float+0x42c>
 8008968:	2301      	movs	r3, #1
 800896a:	4642      	mov	r2, r8
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f ae77 	beq.w	8008666 <_printf_float+0xb6>
 8008978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800897c:	4631      	mov	r1, r6
 800897e:	4628      	mov	r0, r5
 8008980:	47b8      	blx	r7
 8008982:	3001      	adds	r0, #1
 8008984:	f43f ae6f 	beq.w	8008666 <_printf_float+0xb6>
 8008988:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800898c:	2200      	movs	r2, #0
 800898e:	2300      	movs	r3, #0
 8008990:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008994:	f7f8 f812 	bl	80009bc <__aeabi_dcmpeq>
 8008998:	b9d8      	cbnz	r0, 80089d2 <_printf_float+0x422>
 800899a:	f109 33ff 	add.w	r3, r9, #4294967295
 800899e:	f108 0201 	add.w	r2, r8, #1
 80089a2:	4631      	mov	r1, r6
 80089a4:	4628      	mov	r0, r5
 80089a6:	47b8      	blx	r7
 80089a8:	3001      	adds	r0, #1
 80089aa:	d10e      	bne.n	80089ca <_printf_float+0x41a>
 80089ac:	e65b      	b.n	8008666 <_printf_float+0xb6>
 80089ae:	2301      	movs	r3, #1
 80089b0:	464a      	mov	r2, r9
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b8      	blx	r7
 80089b8:	3001      	adds	r0, #1
 80089ba:	f43f ae54 	beq.w	8008666 <_printf_float+0xb6>
 80089be:	f108 0801 	add.w	r8, r8, #1
 80089c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c4:	3b01      	subs	r3, #1
 80089c6:	4543      	cmp	r3, r8
 80089c8:	dcf1      	bgt.n	80089ae <_printf_float+0x3fe>
 80089ca:	4653      	mov	r3, sl
 80089cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089d0:	e6de      	b.n	8008790 <_printf_float+0x1e0>
 80089d2:	f04f 0800 	mov.w	r8, #0
 80089d6:	f104 091a 	add.w	r9, r4, #26
 80089da:	e7f2      	b.n	80089c2 <_printf_float+0x412>
 80089dc:	2301      	movs	r3, #1
 80089de:	4642      	mov	r2, r8
 80089e0:	e7df      	b.n	80089a2 <_printf_float+0x3f2>
 80089e2:	2301      	movs	r3, #1
 80089e4:	464a      	mov	r2, r9
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b8      	blx	r7
 80089ec:	3001      	adds	r0, #1
 80089ee:	f43f ae3a 	beq.w	8008666 <_printf_float+0xb6>
 80089f2:	f108 0801 	add.w	r8, r8, #1
 80089f6:	68e3      	ldr	r3, [r4, #12]
 80089f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089fa:	1a5b      	subs	r3, r3, r1
 80089fc:	4543      	cmp	r3, r8
 80089fe:	dcf0      	bgt.n	80089e2 <_printf_float+0x432>
 8008a00:	e6fb      	b.n	80087fa <_printf_float+0x24a>
 8008a02:	f04f 0800 	mov.w	r8, #0
 8008a06:	f104 0919 	add.w	r9, r4, #25
 8008a0a:	e7f4      	b.n	80089f6 <_printf_float+0x446>

08008a0c <_printf_common>:
 8008a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a10:	4616      	mov	r6, r2
 8008a12:	4699      	mov	r9, r3
 8008a14:	688a      	ldr	r2, [r1, #8]
 8008a16:	690b      	ldr	r3, [r1, #16]
 8008a18:	4607      	mov	r7, r0
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	bfb8      	it	lt
 8008a1e:	4613      	movlt	r3, r2
 8008a20:	6033      	str	r3, [r6, #0]
 8008a22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a26:	460c      	mov	r4, r1
 8008a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a2c:	b10a      	cbz	r2, 8008a32 <_printf_common+0x26>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	6033      	str	r3, [r6, #0]
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	0699      	lsls	r1, r3, #26
 8008a36:	bf42      	ittt	mi
 8008a38:	6833      	ldrmi	r3, [r6, #0]
 8008a3a:	3302      	addmi	r3, #2
 8008a3c:	6033      	strmi	r3, [r6, #0]
 8008a3e:	6825      	ldr	r5, [r4, #0]
 8008a40:	f015 0506 	ands.w	r5, r5, #6
 8008a44:	d106      	bne.n	8008a54 <_printf_common+0x48>
 8008a46:	f104 0a19 	add.w	sl, r4, #25
 8008a4a:	68e3      	ldr	r3, [r4, #12]
 8008a4c:	6832      	ldr	r2, [r6, #0]
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	42ab      	cmp	r3, r5
 8008a52:	dc2b      	bgt.n	8008aac <_printf_common+0xa0>
 8008a54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a58:	1e13      	subs	r3, r2, #0
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	bf18      	it	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	0692      	lsls	r2, r2, #26
 8008a62:	d430      	bmi.n	8008ac6 <_printf_common+0xba>
 8008a64:	4649      	mov	r1, r9
 8008a66:	4638      	mov	r0, r7
 8008a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a6c:	47c0      	blx	r8
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d023      	beq.n	8008aba <_printf_common+0xae>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	6922      	ldr	r2, [r4, #16]
 8008a76:	f003 0306 	and.w	r3, r3, #6
 8008a7a:	2b04      	cmp	r3, #4
 8008a7c:	bf14      	ite	ne
 8008a7e:	2500      	movne	r5, #0
 8008a80:	6833      	ldreq	r3, [r6, #0]
 8008a82:	f04f 0600 	mov.w	r6, #0
 8008a86:	bf08      	it	eq
 8008a88:	68e5      	ldreq	r5, [r4, #12]
 8008a8a:	f104 041a 	add.w	r4, r4, #26
 8008a8e:	bf08      	it	eq
 8008a90:	1aed      	subeq	r5, r5, r3
 8008a92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008a96:	bf08      	it	eq
 8008a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	bfc4      	itt	gt
 8008aa0:	1a9b      	subgt	r3, r3, r2
 8008aa2:	18ed      	addgt	r5, r5, r3
 8008aa4:	42b5      	cmp	r5, r6
 8008aa6:	d11a      	bne.n	8008ade <_printf_common+0xd2>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	e008      	b.n	8008abe <_printf_common+0xb2>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4652      	mov	r2, sl
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	47c0      	blx	r8
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d103      	bne.n	8008ac2 <_printf_common+0xb6>
 8008aba:	f04f 30ff 	mov.w	r0, #4294967295
 8008abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ac2:	3501      	adds	r5, #1
 8008ac4:	e7c1      	b.n	8008a4a <_printf_common+0x3e>
 8008ac6:	2030      	movs	r0, #48	; 0x30
 8008ac8:	18e1      	adds	r1, r4, r3
 8008aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ad4:	4422      	add	r2, r4
 8008ad6:	3302      	adds	r3, #2
 8008ad8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008adc:	e7c2      	b.n	8008a64 <_printf_common+0x58>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	4649      	mov	r1, r9
 8008ae4:	4638      	mov	r0, r7
 8008ae6:	47c0      	blx	r8
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d0e6      	beq.n	8008aba <_printf_common+0xae>
 8008aec:	3601      	adds	r6, #1
 8008aee:	e7d9      	b.n	8008aa4 <_printf_common+0x98>

08008af0 <_printf_i>:
 8008af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008af4:	7e0f      	ldrb	r7, [r1, #24]
 8008af6:	4691      	mov	r9, r2
 8008af8:	2f78      	cmp	r7, #120	; 0x78
 8008afa:	4680      	mov	r8, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	469a      	mov	sl, r3
 8008b00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b06:	d807      	bhi.n	8008b18 <_printf_i+0x28>
 8008b08:	2f62      	cmp	r7, #98	; 0x62
 8008b0a:	d80a      	bhi.n	8008b22 <_printf_i+0x32>
 8008b0c:	2f00      	cmp	r7, #0
 8008b0e:	f000 80d5 	beq.w	8008cbc <_printf_i+0x1cc>
 8008b12:	2f58      	cmp	r7, #88	; 0x58
 8008b14:	f000 80c1 	beq.w	8008c9a <_printf_i+0x1aa>
 8008b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b20:	e03a      	b.n	8008b98 <_printf_i+0xa8>
 8008b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b26:	2b15      	cmp	r3, #21
 8008b28:	d8f6      	bhi.n	8008b18 <_printf_i+0x28>
 8008b2a:	a101      	add	r1, pc, #4	; (adr r1, 8008b30 <_printf_i+0x40>)
 8008b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b30:	08008b89 	.word	0x08008b89
 8008b34:	08008b9d 	.word	0x08008b9d
 8008b38:	08008b19 	.word	0x08008b19
 8008b3c:	08008b19 	.word	0x08008b19
 8008b40:	08008b19 	.word	0x08008b19
 8008b44:	08008b19 	.word	0x08008b19
 8008b48:	08008b9d 	.word	0x08008b9d
 8008b4c:	08008b19 	.word	0x08008b19
 8008b50:	08008b19 	.word	0x08008b19
 8008b54:	08008b19 	.word	0x08008b19
 8008b58:	08008b19 	.word	0x08008b19
 8008b5c:	08008ca3 	.word	0x08008ca3
 8008b60:	08008bc9 	.word	0x08008bc9
 8008b64:	08008c5d 	.word	0x08008c5d
 8008b68:	08008b19 	.word	0x08008b19
 8008b6c:	08008b19 	.word	0x08008b19
 8008b70:	08008cc5 	.word	0x08008cc5
 8008b74:	08008b19 	.word	0x08008b19
 8008b78:	08008bc9 	.word	0x08008bc9
 8008b7c:	08008b19 	.word	0x08008b19
 8008b80:	08008b19 	.word	0x08008b19
 8008b84:	08008c65 	.word	0x08008c65
 8008b88:	682b      	ldr	r3, [r5, #0]
 8008b8a:	1d1a      	adds	r2, r3, #4
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	602a      	str	r2, [r5, #0]
 8008b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e0a0      	b.n	8008cde <_printf_i+0x1ee>
 8008b9c:	6820      	ldr	r0, [r4, #0]
 8008b9e:	682b      	ldr	r3, [r5, #0]
 8008ba0:	0607      	lsls	r7, r0, #24
 8008ba2:	f103 0104 	add.w	r1, r3, #4
 8008ba6:	6029      	str	r1, [r5, #0]
 8008ba8:	d501      	bpl.n	8008bae <_printf_i+0xbe>
 8008baa:	681e      	ldr	r6, [r3, #0]
 8008bac:	e003      	b.n	8008bb6 <_printf_i+0xc6>
 8008bae:	0646      	lsls	r6, r0, #25
 8008bb0:	d5fb      	bpl.n	8008baa <_printf_i+0xba>
 8008bb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bb6:	2e00      	cmp	r6, #0
 8008bb8:	da03      	bge.n	8008bc2 <_printf_i+0xd2>
 8008bba:	232d      	movs	r3, #45	; 0x2d
 8008bbc:	4276      	negs	r6, r6
 8008bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bc2:	230a      	movs	r3, #10
 8008bc4:	4859      	ldr	r0, [pc, #356]	; (8008d2c <_printf_i+0x23c>)
 8008bc6:	e012      	b.n	8008bee <_printf_i+0xfe>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	6820      	ldr	r0, [r4, #0]
 8008bcc:	1d19      	adds	r1, r3, #4
 8008bce:	6029      	str	r1, [r5, #0]
 8008bd0:	0605      	lsls	r5, r0, #24
 8008bd2:	d501      	bpl.n	8008bd8 <_printf_i+0xe8>
 8008bd4:	681e      	ldr	r6, [r3, #0]
 8008bd6:	e002      	b.n	8008bde <_printf_i+0xee>
 8008bd8:	0641      	lsls	r1, r0, #25
 8008bda:	d5fb      	bpl.n	8008bd4 <_printf_i+0xe4>
 8008bdc:	881e      	ldrh	r6, [r3, #0]
 8008bde:	2f6f      	cmp	r7, #111	; 0x6f
 8008be0:	bf0c      	ite	eq
 8008be2:	2308      	moveq	r3, #8
 8008be4:	230a      	movne	r3, #10
 8008be6:	4851      	ldr	r0, [pc, #324]	; (8008d2c <_printf_i+0x23c>)
 8008be8:	2100      	movs	r1, #0
 8008bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bee:	6865      	ldr	r5, [r4, #4]
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	bfa8      	it	ge
 8008bf4:	6821      	ldrge	r1, [r4, #0]
 8008bf6:	60a5      	str	r5, [r4, #8]
 8008bf8:	bfa4      	itt	ge
 8008bfa:	f021 0104 	bicge.w	r1, r1, #4
 8008bfe:	6021      	strge	r1, [r4, #0]
 8008c00:	b90e      	cbnz	r6, 8008c06 <_printf_i+0x116>
 8008c02:	2d00      	cmp	r5, #0
 8008c04:	d04b      	beq.n	8008c9e <_printf_i+0x1ae>
 8008c06:	4615      	mov	r5, r2
 8008c08:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c0c:	fb03 6711 	mls	r7, r3, r1, r6
 8008c10:	5dc7      	ldrb	r7, [r0, r7]
 8008c12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c16:	4637      	mov	r7, r6
 8008c18:	42bb      	cmp	r3, r7
 8008c1a:	460e      	mov	r6, r1
 8008c1c:	d9f4      	bls.n	8008c08 <_printf_i+0x118>
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	d10b      	bne.n	8008c3a <_printf_i+0x14a>
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	07de      	lsls	r6, r3, #31
 8008c26:	d508      	bpl.n	8008c3a <_printf_i+0x14a>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	6861      	ldr	r1, [r4, #4]
 8008c2c:	4299      	cmp	r1, r3
 8008c2e:	bfde      	ittt	le
 8008c30:	2330      	movle	r3, #48	; 0x30
 8008c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c3a:	1b52      	subs	r2, r2, r5
 8008c3c:	6122      	str	r2, [r4, #16]
 8008c3e:	464b      	mov	r3, r9
 8008c40:	4621      	mov	r1, r4
 8008c42:	4640      	mov	r0, r8
 8008c44:	f8cd a000 	str.w	sl, [sp]
 8008c48:	aa03      	add	r2, sp, #12
 8008c4a:	f7ff fedf 	bl	8008a0c <_printf_common>
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d14a      	bne.n	8008ce8 <_printf_i+0x1f8>
 8008c52:	f04f 30ff 	mov.w	r0, #4294967295
 8008c56:	b004      	add	sp, #16
 8008c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	f043 0320 	orr.w	r3, r3, #32
 8008c62:	6023      	str	r3, [r4, #0]
 8008c64:	2778      	movs	r7, #120	; 0x78
 8008c66:	4832      	ldr	r0, [pc, #200]	; (8008d30 <_printf_i+0x240>)
 8008c68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c6c:	6823      	ldr	r3, [r4, #0]
 8008c6e:	6829      	ldr	r1, [r5, #0]
 8008c70:	061f      	lsls	r7, r3, #24
 8008c72:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c76:	d402      	bmi.n	8008c7e <_printf_i+0x18e>
 8008c78:	065f      	lsls	r7, r3, #25
 8008c7a:	bf48      	it	mi
 8008c7c:	b2b6      	uxthmi	r6, r6
 8008c7e:	07df      	lsls	r7, r3, #31
 8008c80:	bf48      	it	mi
 8008c82:	f043 0320 	orrmi.w	r3, r3, #32
 8008c86:	6029      	str	r1, [r5, #0]
 8008c88:	bf48      	it	mi
 8008c8a:	6023      	strmi	r3, [r4, #0]
 8008c8c:	b91e      	cbnz	r6, 8008c96 <_printf_i+0x1a6>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	f023 0320 	bic.w	r3, r3, #32
 8008c94:	6023      	str	r3, [r4, #0]
 8008c96:	2310      	movs	r3, #16
 8008c98:	e7a6      	b.n	8008be8 <_printf_i+0xf8>
 8008c9a:	4824      	ldr	r0, [pc, #144]	; (8008d2c <_printf_i+0x23c>)
 8008c9c:	e7e4      	b.n	8008c68 <_printf_i+0x178>
 8008c9e:	4615      	mov	r5, r2
 8008ca0:	e7bd      	b.n	8008c1e <_printf_i+0x12e>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	6826      	ldr	r6, [r4, #0]
 8008ca6:	1d18      	adds	r0, r3, #4
 8008ca8:	6961      	ldr	r1, [r4, #20]
 8008caa:	6028      	str	r0, [r5, #0]
 8008cac:	0635      	lsls	r5, r6, #24
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	d501      	bpl.n	8008cb6 <_printf_i+0x1c6>
 8008cb2:	6019      	str	r1, [r3, #0]
 8008cb4:	e002      	b.n	8008cbc <_printf_i+0x1cc>
 8008cb6:	0670      	lsls	r0, r6, #25
 8008cb8:	d5fb      	bpl.n	8008cb2 <_printf_i+0x1c2>
 8008cba:	8019      	strh	r1, [r3, #0]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	4615      	mov	r5, r2
 8008cc0:	6123      	str	r3, [r4, #16]
 8008cc2:	e7bc      	b.n	8008c3e <_printf_i+0x14e>
 8008cc4:	682b      	ldr	r3, [r5, #0]
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	1d1a      	adds	r2, r3, #4
 8008cca:	602a      	str	r2, [r5, #0]
 8008ccc:	681d      	ldr	r5, [r3, #0]
 8008cce:	6862      	ldr	r2, [r4, #4]
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 fad7 	bl	8009284 <memchr>
 8008cd6:	b108      	cbz	r0, 8008cdc <_printf_i+0x1ec>
 8008cd8:	1b40      	subs	r0, r0, r5
 8008cda:	6060      	str	r0, [r4, #4]
 8008cdc:	6863      	ldr	r3, [r4, #4]
 8008cde:	6123      	str	r3, [r4, #16]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce6:	e7aa      	b.n	8008c3e <_printf_i+0x14e>
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4649      	mov	r1, r9
 8008cec:	4640      	mov	r0, r8
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	47d0      	blx	sl
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	d0ad      	beq.n	8008c52 <_printf_i+0x162>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	079b      	lsls	r3, r3, #30
 8008cfa:	d413      	bmi.n	8008d24 <_printf_i+0x234>
 8008cfc:	68e0      	ldr	r0, [r4, #12]
 8008cfe:	9b03      	ldr	r3, [sp, #12]
 8008d00:	4298      	cmp	r0, r3
 8008d02:	bfb8      	it	lt
 8008d04:	4618      	movlt	r0, r3
 8008d06:	e7a6      	b.n	8008c56 <_printf_i+0x166>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4632      	mov	r2, r6
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	4640      	mov	r0, r8
 8008d10:	47d0      	blx	sl
 8008d12:	3001      	adds	r0, #1
 8008d14:	d09d      	beq.n	8008c52 <_printf_i+0x162>
 8008d16:	3501      	adds	r5, #1
 8008d18:	68e3      	ldr	r3, [r4, #12]
 8008d1a:	9903      	ldr	r1, [sp, #12]
 8008d1c:	1a5b      	subs	r3, r3, r1
 8008d1e:	42ab      	cmp	r3, r5
 8008d20:	dcf2      	bgt.n	8008d08 <_printf_i+0x218>
 8008d22:	e7eb      	b.n	8008cfc <_printf_i+0x20c>
 8008d24:	2500      	movs	r5, #0
 8008d26:	f104 0619 	add.w	r6, r4, #25
 8008d2a:	e7f5      	b.n	8008d18 <_printf_i+0x228>
 8008d2c:	0800bce2 	.word	0x0800bce2
 8008d30:	0800bcf3 	.word	0x0800bcf3

08008d34 <std>:
 8008d34:	2300      	movs	r3, #0
 8008d36:	b510      	push	{r4, lr}
 8008d38:	4604      	mov	r4, r0
 8008d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d42:	6083      	str	r3, [r0, #8]
 8008d44:	8181      	strh	r1, [r0, #12]
 8008d46:	6643      	str	r3, [r0, #100]	; 0x64
 8008d48:	81c2      	strh	r2, [r0, #14]
 8008d4a:	6183      	str	r3, [r0, #24]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	2208      	movs	r2, #8
 8008d50:	305c      	adds	r0, #92	; 0x5c
 8008d52:	f000 fa07 	bl	8009164 <memset>
 8008d56:	4b05      	ldr	r3, [pc, #20]	; (8008d6c <std+0x38>)
 8008d58:	6224      	str	r4, [r4, #32]
 8008d5a:	6263      	str	r3, [r4, #36]	; 0x24
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <std+0x3c>)
 8008d5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d60:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <std+0x40>)
 8008d62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d64:	4b04      	ldr	r3, [pc, #16]	; (8008d78 <std+0x44>)
 8008d66:	6323      	str	r3, [r4, #48]	; 0x30
 8008d68:	bd10      	pop	{r4, pc}
 8008d6a:	bf00      	nop
 8008d6c:	08008fb5 	.word	0x08008fb5
 8008d70:	08008fd7 	.word	0x08008fd7
 8008d74:	0800900f 	.word	0x0800900f
 8008d78:	08009033 	.word	0x08009033

08008d7c <stdio_exit_handler>:
 8008d7c:	4a02      	ldr	r2, [pc, #8]	; (8008d88 <stdio_exit_handler+0xc>)
 8008d7e:	4903      	ldr	r1, [pc, #12]	; (8008d8c <stdio_exit_handler+0x10>)
 8008d80:	4803      	ldr	r0, [pc, #12]	; (8008d90 <stdio_exit_handler+0x14>)
 8008d82:	f000 b869 	b.w	8008e58 <_fwalk_sglue>
 8008d86:	bf00      	nop
 8008d88:	2000000c 	.word	0x2000000c
 8008d8c:	0800b581 	.word	0x0800b581
 8008d90:	20000184 	.word	0x20000184

08008d94 <cleanup_stdio>:
 8008d94:	6841      	ldr	r1, [r0, #4]
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <cleanup_stdio+0x34>)
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4299      	cmp	r1, r3
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	d001      	beq.n	8008da4 <cleanup_stdio+0x10>
 8008da0:	f002 fbee 	bl	800b580 <_fflush_r>
 8008da4:	68a1      	ldr	r1, [r4, #8]
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <cleanup_stdio+0x38>)
 8008da8:	4299      	cmp	r1, r3
 8008daa:	d002      	beq.n	8008db2 <cleanup_stdio+0x1e>
 8008dac:	4620      	mov	r0, r4
 8008dae:	f002 fbe7 	bl	800b580 <_fflush_r>
 8008db2:	68e1      	ldr	r1, [r4, #12]
 8008db4:	4b06      	ldr	r3, [pc, #24]	; (8008dd0 <cleanup_stdio+0x3c>)
 8008db6:	4299      	cmp	r1, r3
 8008db8:	d004      	beq.n	8008dc4 <cleanup_stdio+0x30>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dc0:	f002 bbde 	b.w	800b580 <_fflush_r>
 8008dc4:	bd10      	pop	{r4, pc}
 8008dc6:	bf00      	nop
 8008dc8:	2000079c 	.word	0x2000079c
 8008dcc:	20000804 	.word	0x20000804
 8008dd0:	2000086c 	.word	0x2000086c

08008dd4 <global_stdio_init.part.0>:
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <global_stdio_init.part.0+0x30>)
 8008dd8:	4c0b      	ldr	r4, [pc, #44]	; (8008e08 <global_stdio_init.part.0+0x34>)
 8008dda:	4a0c      	ldr	r2, [pc, #48]	; (8008e0c <global_stdio_init.part.0+0x38>)
 8008ddc:	4620      	mov	r0, r4
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	2104      	movs	r1, #4
 8008de2:	2200      	movs	r2, #0
 8008de4:	f7ff ffa6 	bl	8008d34 <std>
 8008de8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008dec:	2201      	movs	r2, #1
 8008dee:	2109      	movs	r1, #9
 8008df0:	f7ff ffa0 	bl	8008d34 <std>
 8008df4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008df8:	2202      	movs	r2, #2
 8008dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfe:	2112      	movs	r1, #18
 8008e00:	f7ff bf98 	b.w	8008d34 <std>
 8008e04:	200008d4 	.word	0x200008d4
 8008e08:	2000079c 	.word	0x2000079c
 8008e0c:	08008d7d 	.word	0x08008d7d

08008e10 <__sfp_lock_acquire>:
 8008e10:	4801      	ldr	r0, [pc, #4]	; (8008e18 <__sfp_lock_acquire+0x8>)
 8008e12:	f000 ba35 	b.w	8009280 <__retarget_lock_acquire_recursive>
 8008e16:	bf00      	nop
 8008e18:	200008dd 	.word	0x200008dd

08008e1c <__sfp_lock_release>:
 8008e1c:	4801      	ldr	r0, [pc, #4]	; (8008e24 <__sfp_lock_release+0x8>)
 8008e1e:	f000 ba30 	b.w	8009282 <__retarget_lock_release_recursive>
 8008e22:	bf00      	nop
 8008e24:	200008dd 	.word	0x200008dd

08008e28 <__sinit>:
 8008e28:	b510      	push	{r4, lr}
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	f7ff fff0 	bl	8008e10 <__sfp_lock_acquire>
 8008e30:	6a23      	ldr	r3, [r4, #32]
 8008e32:	b11b      	cbz	r3, 8008e3c <__sinit+0x14>
 8008e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e38:	f7ff bff0 	b.w	8008e1c <__sfp_lock_release>
 8008e3c:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <__sinit+0x28>)
 8008e3e:	6223      	str	r3, [r4, #32]
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <__sinit+0x2c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1f5      	bne.n	8008e34 <__sinit+0xc>
 8008e48:	f7ff ffc4 	bl	8008dd4 <global_stdio_init.part.0>
 8008e4c:	e7f2      	b.n	8008e34 <__sinit+0xc>
 8008e4e:	bf00      	nop
 8008e50:	08008d95 	.word	0x08008d95
 8008e54:	200008d4 	.word	0x200008d4

08008e58 <_fwalk_sglue>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	4607      	mov	r7, r0
 8008e5e:	4688      	mov	r8, r1
 8008e60:	4614      	mov	r4, r2
 8008e62:	2600      	movs	r6, #0
 8008e64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e68:	f1b9 0901 	subs.w	r9, r9, #1
 8008e6c:	d505      	bpl.n	8008e7a <_fwalk_sglue+0x22>
 8008e6e:	6824      	ldr	r4, [r4, #0]
 8008e70:	2c00      	cmp	r4, #0
 8008e72:	d1f7      	bne.n	8008e64 <_fwalk_sglue+0xc>
 8008e74:	4630      	mov	r0, r6
 8008e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d907      	bls.n	8008e90 <_fwalk_sglue+0x38>
 8008e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e84:	3301      	adds	r3, #1
 8008e86:	d003      	beq.n	8008e90 <_fwalk_sglue+0x38>
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	47c0      	blx	r8
 8008e8e:	4306      	orrs	r6, r0
 8008e90:	3568      	adds	r5, #104	; 0x68
 8008e92:	e7e9      	b.n	8008e68 <_fwalk_sglue+0x10>

08008e94 <_puts_r>:
 8008e94:	6a03      	ldr	r3, [r0, #32]
 8008e96:	b570      	push	{r4, r5, r6, lr}
 8008e98:	4605      	mov	r5, r0
 8008e9a:	460e      	mov	r6, r1
 8008e9c:	6884      	ldr	r4, [r0, #8]
 8008e9e:	b90b      	cbnz	r3, 8008ea4 <_puts_r+0x10>
 8008ea0:	f7ff ffc2 	bl	8008e28 <__sinit>
 8008ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ea6:	07db      	lsls	r3, r3, #31
 8008ea8:	d405      	bmi.n	8008eb6 <_puts_r+0x22>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	0598      	lsls	r0, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <_puts_r+0x22>
 8008eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb2:	f000 f9e5 	bl	8009280 <__retarget_lock_acquire_recursive>
 8008eb6:	89a3      	ldrh	r3, [r4, #12]
 8008eb8:	0719      	lsls	r1, r3, #28
 8008eba:	d513      	bpl.n	8008ee4 <_puts_r+0x50>
 8008ebc:	6923      	ldr	r3, [r4, #16]
 8008ebe:	b18b      	cbz	r3, 8008ee4 <_puts_r+0x50>
 8008ec0:	3e01      	subs	r6, #1
 8008ec2:	68a3      	ldr	r3, [r4, #8]
 8008ec4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	60a3      	str	r3, [r4, #8]
 8008ecc:	b9e9      	cbnz	r1, 8008f0a <_puts_r+0x76>
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da2e      	bge.n	8008f30 <_puts_r+0x9c>
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	210a      	movs	r1, #10
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f000 f8af 	bl	800903a <__swbuf_r>
 8008edc:	3001      	adds	r0, #1
 8008ede:	d007      	beq.n	8008ef0 <_puts_r+0x5c>
 8008ee0:	250a      	movs	r5, #10
 8008ee2:	e007      	b.n	8008ef4 <_puts_r+0x60>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	f000 f8e4 	bl	80090b4 <__swsetup_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d0e7      	beq.n	8008ec0 <_puts_r+0x2c>
 8008ef0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ef4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ef6:	07da      	lsls	r2, r3, #31
 8008ef8:	d405      	bmi.n	8008f06 <_puts_r+0x72>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	059b      	lsls	r3, r3, #22
 8008efe:	d402      	bmi.n	8008f06 <_puts_r+0x72>
 8008f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f02:	f000 f9be 	bl	8009282 <__retarget_lock_release_recursive>
 8008f06:	4628      	mov	r0, r5
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da04      	bge.n	8008f18 <_puts_r+0x84>
 8008f0e:	69a2      	ldr	r2, [r4, #24]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	dc06      	bgt.n	8008f22 <_puts_r+0x8e>
 8008f14:	290a      	cmp	r1, #10
 8008f16:	d004      	beq.n	8008f22 <_puts_r+0x8e>
 8008f18:	6823      	ldr	r3, [r4, #0]
 8008f1a:	1c5a      	adds	r2, r3, #1
 8008f1c:	6022      	str	r2, [r4, #0]
 8008f1e:	7019      	strb	r1, [r3, #0]
 8008f20:	e7cf      	b.n	8008ec2 <_puts_r+0x2e>
 8008f22:	4622      	mov	r2, r4
 8008f24:	4628      	mov	r0, r5
 8008f26:	f000 f888 	bl	800903a <__swbuf_r>
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	d1c9      	bne.n	8008ec2 <_puts_r+0x2e>
 8008f2e:	e7df      	b.n	8008ef0 <_puts_r+0x5c>
 8008f30:	250a      	movs	r5, #10
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	6022      	str	r2, [r4, #0]
 8008f38:	701d      	strb	r5, [r3, #0]
 8008f3a:	e7db      	b.n	8008ef4 <_puts_r+0x60>

08008f3c <puts>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <puts+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f7ff bfa7 	b.w	8008e94 <_puts_r>
 8008f46:	bf00      	nop
 8008f48:	200001d0 	.word	0x200001d0

08008f4c <sniprintf>:
 8008f4c:	b40c      	push	{r2, r3}
 8008f4e:	b530      	push	{r4, r5, lr}
 8008f50:	4b17      	ldr	r3, [pc, #92]	; (8008fb0 <sniprintf+0x64>)
 8008f52:	1e0c      	subs	r4, r1, #0
 8008f54:	681d      	ldr	r5, [r3, #0]
 8008f56:	b09d      	sub	sp, #116	; 0x74
 8008f58:	da08      	bge.n	8008f6c <sniprintf+0x20>
 8008f5a:	238b      	movs	r3, #139	; 0x8b
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	602b      	str	r3, [r5, #0]
 8008f62:	b01d      	add	sp, #116	; 0x74
 8008f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f68:	b002      	add	sp, #8
 8008f6a:	4770      	bx	lr
 8008f6c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f74:	bf0c      	ite	eq
 8008f76:	4623      	moveq	r3, r4
 8008f78:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f7c:	9304      	str	r3, [sp, #16]
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f84:	9002      	str	r0, [sp, #8]
 8008f86:	9006      	str	r0, [sp, #24]
 8008f88:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	ab21      	add	r3, sp, #132	; 0x84
 8008f90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008f92:	a902      	add	r1, sp, #8
 8008f94:	9301      	str	r3, [sp, #4]
 8008f96:	f002 f973 	bl	800b280 <_svfiprintf_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	bfbc      	itt	lt
 8008f9e:	238b      	movlt	r3, #139	; 0x8b
 8008fa0:	602b      	strlt	r3, [r5, #0]
 8008fa2:	2c00      	cmp	r4, #0
 8008fa4:	d0dd      	beq.n	8008f62 <sniprintf+0x16>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	9b02      	ldr	r3, [sp, #8]
 8008faa:	701a      	strb	r2, [r3, #0]
 8008fac:	e7d9      	b.n	8008f62 <sniprintf+0x16>
 8008fae:	bf00      	nop
 8008fb0:	200001d0 	.word	0x200001d0

08008fb4 <__sread>:
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fbc:	f000 f912 	bl	80091e4 <_read_r>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	bfab      	itete	ge
 8008fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8008fc8:	181b      	addge	r3, r3, r0
 8008fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fce:	bfac      	ite	ge
 8008fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fd2:	81a3      	strhlt	r3, [r4, #12]
 8008fd4:	bd10      	pop	{r4, pc}

08008fd6 <__swrite>:
 8008fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fda:	461f      	mov	r7, r3
 8008fdc:	898b      	ldrh	r3, [r1, #12]
 8008fde:	4605      	mov	r5, r0
 8008fe0:	05db      	lsls	r3, r3, #23
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	4616      	mov	r6, r2
 8008fe6:	d505      	bpl.n	8008ff4 <__swrite+0x1e>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	2200      	movs	r2, #0
 8008fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff0:	f000 f8e6 	bl	80091c0 <_lseek_r>
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ffc:	81a3      	strh	r3, [r4, #12]
 8008ffe:	4628      	mov	r0, r5
 8009000:	463b      	mov	r3, r7
 8009002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800900a:	f000 b8fd 	b.w	8009208 <_write_r>

0800900e <__sseek>:
 800900e:	b510      	push	{r4, lr}
 8009010:	460c      	mov	r4, r1
 8009012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009016:	f000 f8d3 	bl	80091c0 <_lseek_r>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	89a3      	ldrh	r3, [r4, #12]
 800901e:	bf15      	itete	ne
 8009020:	6560      	strne	r0, [r4, #84]	; 0x54
 8009022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800902a:	81a3      	strheq	r3, [r4, #12]
 800902c:	bf18      	it	ne
 800902e:	81a3      	strhne	r3, [r4, #12]
 8009030:	bd10      	pop	{r4, pc}

08009032 <__sclose>:
 8009032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009036:	f000 b8b3 	b.w	80091a0 <_close_r>

0800903a <__swbuf_r>:
 800903a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903c:	460e      	mov	r6, r1
 800903e:	4614      	mov	r4, r2
 8009040:	4605      	mov	r5, r0
 8009042:	b118      	cbz	r0, 800904c <__swbuf_r+0x12>
 8009044:	6a03      	ldr	r3, [r0, #32]
 8009046:	b90b      	cbnz	r3, 800904c <__swbuf_r+0x12>
 8009048:	f7ff feee 	bl	8008e28 <__sinit>
 800904c:	69a3      	ldr	r3, [r4, #24]
 800904e:	60a3      	str	r3, [r4, #8]
 8009050:	89a3      	ldrh	r3, [r4, #12]
 8009052:	071a      	lsls	r2, r3, #28
 8009054:	d525      	bpl.n	80090a2 <__swbuf_r+0x68>
 8009056:	6923      	ldr	r3, [r4, #16]
 8009058:	b31b      	cbz	r3, 80090a2 <__swbuf_r+0x68>
 800905a:	6823      	ldr	r3, [r4, #0]
 800905c:	6922      	ldr	r2, [r4, #16]
 800905e:	b2f6      	uxtb	r6, r6
 8009060:	1a98      	subs	r0, r3, r2
 8009062:	6963      	ldr	r3, [r4, #20]
 8009064:	4637      	mov	r7, r6
 8009066:	4283      	cmp	r3, r0
 8009068:	dc04      	bgt.n	8009074 <__swbuf_r+0x3a>
 800906a:	4621      	mov	r1, r4
 800906c:	4628      	mov	r0, r5
 800906e:	f002 fa87 	bl	800b580 <_fflush_r>
 8009072:	b9e0      	cbnz	r0, 80090ae <__swbuf_r+0x74>
 8009074:	68a3      	ldr	r3, [r4, #8]
 8009076:	3b01      	subs	r3, #1
 8009078:	60a3      	str	r3, [r4, #8]
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	6022      	str	r2, [r4, #0]
 8009080:	701e      	strb	r6, [r3, #0]
 8009082:	6962      	ldr	r2, [r4, #20]
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	429a      	cmp	r2, r3
 8009088:	d004      	beq.n	8009094 <__swbuf_r+0x5a>
 800908a:	89a3      	ldrh	r3, [r4, #12]
 800908c:	07db      	lsls	r3, r3, #31
 800908e:	d506      	bpl.n	800909e <__swbuf_r+0x64>
 8009090:	2e0a      	cmp	r6, #10
 8009092:	d104      	bne.n	800909e <__swbuf_r+0x64>
 8009094:	4621      	mov	r1, r4
 8009096:	4628      	mov	r0, r5
 8009098:	f002 fa72 	bl	800b580 <_fflush_r>
 800909c:	b938      	cbnz	r0, 80090ae <__swbuf_r+0x74>
 800909e:	4638      	mov	r0, r7
 80090a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 f805 	bl	80090b4 <__swsetup_r>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0d5      	beq.n	800905a <__swbuf_r+0x20>
 80090ae:	f04f 37ff 	mov.w	r7, #4294967295
 80090b2:	e7f4      	b.n	800909e <__swbuf_r+0x64>

080090b4 <__swsetup_r>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	4b2a      	ldr	r3, [pc, #168]	; (8009160 <__swsetup_r+0xac>)
 80090b8:	4605      	mov	r5, r0
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	460c      	mov	r4, r1
 80090be:	b118      	cbz	r0, 80090c8 <__swsetup_r+0x14>
 80090c0:	6a03      	ldr	r3, [r0, #32]
 80090c2:	b90b      	cbnz	r3, 80090c8 <__swsetup_r+0x14>
 80090c4:	f7ff feb0 	bl	8008e28 <__sinit>
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090ce:	0718      	lsls	r0, r3, #28
 80090d0:	d422      	bmi.n	8009118 <__swsetup_r+0x64>
 80090d2:	06d9      	lsls	r1, r3, #27
 80090d4:	d407      	bmi.n	80090e6 <__swsetup_r+0x32>
 80090d6:	2309      	movs	r3, #9
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80090de:	f04f 30ff 	mov.w	r0, #4294967295
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	e034      	b.n	8009150 <__swsetup_r+0x9c>
 80090e6:	0758      	lsls	r0, r3, #29
 80090e8:	d512      	bpl.n	8009110 <__swsetup_r+0x5c>
 80090ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ec:	b141      	cbz	r1, 8009100 <__swsetup_r+0x4c>
 80090ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f2:	4299      	cmp	r1, r3
 80090f4:	d002      	beq.n	80090fc <__swsetup_r+0x48>
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 ff56 	bl	8009fa8 <_free_r>
 80090fc:	2300      	movs	r3, #0
 80090fe:	6363      	str	r3, [r4, #52]	; 0x34
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009106:	81a3      	strh	r3, [r4, #12]
 8009108:	2300      	movs	r3, #0
 800910a:	6063      	str	r3, [r4, #4]
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	6023      	str	r3, [r4, #0]
 8009110:	89a3      	ldrh	r3, [r4, #12]
 8009112:	f043 0308 	orr.w	r3, r3, #8
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	b94b      	cbnz	r3, 8009130 <__swsetup_r+0x7c>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009126:	d003      	beq.n	8009130 <__swsetup_r+0x7c>
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f002 fa75 	bl	800b61a <__smakebuf_r>
 8009130:	89a0      	ldrh	r0, [r4, #12]
 8009132:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009136:	f010 0301 	ands.w	r3, r0, #1
 800913a:	d00a      	beq.n	8009152 <__swsetup_r+0x9e>
 800913c:	2300      	movs	r3, #0
 800913e:	60a3      	str	r3, [r4, #8]
 8009140:	6963      	ldr	r3, [r4, #20]
 8009142:	425b      	negs	r3, r3
 8009144:	61a3      	str	r3, [r4, #24]
 8009146:	6923      	ldr	r3, [r4, #16]
 8009148:	b943      	cbnz	r3, 800915c <__swsetup_r+0xa8>
 800914a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800914e:	d1c4      	bne.n	80090da <__swsetup_r+0x26>
 8009150:	bd38      	pop	{r3, r4, r5, pc}
 8009152:	0781      	lsls	r1, r0, #30
 8009154:	bf58      	it	pl
 8009156:	6963      	ldrpl	r3, [r4, #20]
 8009158:	60a3      	str	r3, [r4, #8]
 800915a:	e7f4      	b.n	8009146 <__swsetup_r+0x92>
 800915c:	2000      	movs	r0, #0
 800915e:	e7f7      	b.n	8009150 <__swsetup_r+0x9c>
 8009160:	200001d0 	.word	0x200001d0

08009164 <memset>:
 8009164:	4603      	mov	r3, r0
 8009166:	4402      	add	r2, r0
 8009168:	4293      	cmp	r3, r2
 800916a:	d100      	bne.n	800916e <memset+0xa>
 800916c:	4770      	bx	lr
 800916e:	f803 1b01 	strb.w	r1, [r3], #1
 8009172:	e7f9      	b.n	8009168 <memset+0x4>

08009174 <strncmp>:
 8009174:	b510      	push	{r4, lr}
 8009176:	b16a      	cbz	r2, 8009194 <strncmp+0x20>
 8009178:	3901      	subs	r1, #1
 800917a:	1884      	adds	r4, r0, r2
 800917c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009180:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009184:	429a      	cmp	r2, r3
 8009186:	d103      	bne.n	8009190 <strncmp+0x1c>
 8009188:	42a0      	cmp	r0, r4
 800918a:	d001      	beq.n	8009190 <strncmp+0x1c>
 800918c:	2a00      	cmp	r2, #0
 800918e:	d1f5      	bne.n	800917c <strncmp+0x8>
 8009190:	1ad0      	subs	r0, r2, r3
 8009192:	bd10      	pop	{r4, pc}
 8009194:	4610      	mov	r0, r2
 8009196:	e7fc      	b.n	8009192 <strncmp+0x1e>

08009198 <_localeconv_r>:
 8009198:	4800      	ldr	r0, [pc, #0]	; (800919c <_localeconv_r+0x4>)
 800919a:	4770      	bx	lr
 800919c:	20000108 	.word	0x20000108

080091a0 <_close_r>:
 80091a0:	b538      	push	{r3, r4, r5, lr}
 80091a2:	2300      	movs	r3, #0
 80091a4:	4d05      	ldr	r5, [pc, #20]	; (80091bc <_close_r+0x1c>)
 80091a6:	4604      	mov	r4, r0
 80091a8:	4608      	mov	r0, r1
 80091aa:	602b      	str	r3, [r5, #0]
 80091ac:	f7f9 f9b6 	bl	800251c <_close>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_close_r+0x1a>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_close_r+0x1a>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	200008d8 	.word	0x200008d8

080091c0 <_lseek_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	4611      	mov	r1, r2
 80091c8:	2200      	movs	r2, #0
 80091ca:	4d05      	ldr	r5, [pc, #20]	; (80091e0 <_lseek_r+0x20>)
 80091cc:	602a      	str	r2, [r5, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	f7f9 f9c8 	bl	8002564 <_lseek>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d102      	bne.n	80091de <_lseek_r+0x1e>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b103      	cbz	r3, 80091de <_lseek_r+0x1e>
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	200008d8 	.word	0x200008d8

080091e4 <_read_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	2200      	movs	r2, #0
 80091ee:	4d05      	ldr	r5, [pc, #20]	; (8009204 <_read_r+0x20>)
 80091f0:	602a      	str	r2, [r5, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	f7f9 f959 	bl	80024aa <_read>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_read_r+0x1e>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_read_r+0x1e>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	200008d8 	.word	0x200008d8

08009208 <_write_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4604      	mov	r4, r0
 800920c:	4608      	mov	r0, r1
 800920e:	4611      	mov	r1, r2
 8009210:	2200      	movs	r2, #0
 8009212:	4d05      	ldr	r5, [pc, #20]	; (8009228 <_write_r+0x20>)
 8009214:	602a      	str	r2, [r5, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	f7f9 f964 	bl	80024e4 <_write>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_write_r+0x1e>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_write_r+0x1e>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	200008d8 	.word	0x200008d8

0800922c <__errno>:
 800922c:	4b01      	ldr	r3, [pc, #4]	; (8009234 <__errno+0x8>)
 800922e:	6818      	ldr	r0, [r3, #0]
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	200001d0 	.word	0x200001d0

08009238 <__libc_init_array>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	2600      	movs	r6, #0
 800923c:	4d0c      	ldr	r5, [pc, #48]	; (8009270 <__libc_init_array+0x38>)
 800923e:	4c0d      	ldr	r4, [pc, #52]	; (8009274 <__libc_init_array+0x3c>)
 8009240:	1b64      	subs	r4, r4, r5
 8009242:	10a4      	asrs	r4, r4, #2
 8009244:	42a6      	cmp	r6, r4
 8009246:	d109      	bne.n	800925c <__libc_init_array+0x24>
 8009248:	f002 fc78 	bl	800bb3c <_init>
 800924c:	2600      	movs	r6, #0
 800924e:	4d0a      	ldr	r5, [pc, #40]	; (8009278 <__libc_init_array+0x40>)
 8009250:	4c0a      	ldr	r4, [pc, #40]	; (800927c <__libc_init_array+0x44>)
 8009252:	1b64      	subs	r4, r4, r5
 8009254:	10a4      	asrs	r4, r4, #2
 8009256:	42a6      	cmp	r6, r4
 8009258:	d105      	bne.n	8009266 <__libc_init_array+0x2e>
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009260:	4798      	blx	r3
 8009262:	3601      	adds	r6, #1
 8009264:	e7ee      	b.n	8009244 <__libc_init_array+0xc>
 8009266:	f855 3b04 	ldr.w	r3, [r5], #4
 800926a:	4798      	blx	r3
 800926c:	3601      	adds	r6, #1
 800926e:	e7f2      	b.n	8009256 <__libc_init_array+0x1e>
 8009270:	0800c0a4 	.word	0x0800c0a4
 8009274:	0800c0a4 	.word	0x0800c0a4
 8009278:	0800c0a4 	.word	0x0800c0a4
 800927c:	0800c0a8 	.word	0x0800c0a8

08009280 <__retarget_lock_acquire_recursive>:
 8009280:	4770      	bx	lr

08009282 <__retarget_lock_release_recursive>:
 8009282:	4770      	bx	lr

08009284 <memchr>:
 8009284:	4603      	mov	r3, r0
 8009286:	b510      	push	{r4, lr}
 8009288:	b2c9      	uxtb	r1, r1
 800928a:	4402      	add	r2, r0
 800928c:	4293      	cmp	r3, r2
 800928e:	4618      	mov	r0, r3
 8009290:	d101      	bne.n	8009296 <memchr+0x12>
 8009292:	2000      	movs	r0, #0
 8009294:	e003      	b.n	800929e <memchr+0x1a>
 8009296:	7804      	ldrb	r4, [r0, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	428c      	cmp	r4, r1
 800929c:	d1f6      	bne.n	800928c <memchr+0x8>
 800929e:	bd10      	pop	{r4, pc}

080092a0 <memcpy>:
 80092a0:	440a      	add	r2, r1
 80092a2:	4291      	cmp	r1, r2
 80092a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092a8:	d100      	bne.n	80092ac <memcpy+0xc>
 80092aa:	4770      	bx	lr
 80092ac:	b510      	push	{r4, lr}
 80092ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092b2:	4291      	cmp	r1, r2
 80092b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092b8:	d1f9      	bne.n	80092ae <memcpy+0xe>
 80092ba:	bd10      	pop	{r4, pc}

080092bc <nan>:
 80092bc:	2000      	movs	r0, #0
 80092be:	4901      	ldr	r1, [pc, #4]	; (80092c4 <nan+0x8>)
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	7ff80000 	.word	0x7ff80000

080092c8 <quorem>:
 80092c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	6903      	ldr	r3, [r0, #16]
 80092ce:	690c      	ldr	r4, [r1, #16]
 80092d0:	4607      	mov	r7, r0
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	db7f      	blt.n	80093d6 <quorem+0x10e>
 80092d6:	3c01      	subs	r4, #1
 80092d8:	f100 0514 	add.w	r5, r0, #20
 80092dc:	f101 0814 	add.w	r8, r1, #20
 80092e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092ee:	3301      	adds	r3, #1
 80092f0:	429a      	cmp	r2, r3
 80092f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80092f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092fe:	d331      	bcc.n	8009364 <quorem+0x9c>
 8009300:	f04f 0e00 	mov.w	lr, #0
 8009304:	4640      	mov	r0, r8
 8009306:	46ac      	mov	ip, r5
 8009308:	46f2      	mov	sl, lr
 800930a:	f850 2b04 	ldr.w	r2, [r0], #4
 800930e:	b293      	uxth	r3, r2
 8009310:	fb06 e303 	mla	r3, r6, r3, lr
 8009314:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009318:	0c1a      	lsrs	r2, r3, #16
 800931a:	b29b      	uxth	r3, r3
 800931c:	fb06 220e 	mla	r2, r6, lr, r2
 8009320:	ebaa 0303 	sub.w	r3, sl, r3
 8009324:	f8dc a000 	ldr.w	sl, [ip]
 8009328:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800932c:	fa1f fa8a 	uxth.w	sl, sl
 8009330:	4453      	add	r3, sl
 8009332:	f8dc a000 	ldr.w	sl, [ip]
 8009336:	b292      	uxth	r2, r2
 8009338:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800933c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009340:	b29b      	uxth	r3, r3
 8009342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009346:	4581      	cmp	r9, r0
 8009348:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800934c:	f84c 3b04 	str.w	r3, [ip], #4
 8009350:	d2db      	bcs.n	800930a <quorem+0x42>
 8009352:	f855 300b 	ldr.w	r3, [r5, fp]
 8009356:	b92b      	cbnz	r3, 8009364 <quorem+0x9c>
 8009358:	9b01      	ldr	r3, [sp, #4]
 800935a:	3b04      	subs	r3, #4
 800935c:	429d      	cmp	r5, r3
 800935e:	461a      	mov	r2, r3
 8009360:	d32d      	bcc.n	80093be <quorem+0xf6>
 8009362:	613c      	str	r4, [r7, #16]
 8009364:	4638      	mov	r0, r7
 8009366:	f001 fd4b 	bl	800ae00 <__mcmp>
 800936a:	2800      	cmp	r0, #0
 800936c:	db23      	blt.n	80093b6 <quorem+0xee>
 800936e:	4629      	mov	r1, r5
 8009370:	2000      	movs	r0, #0
 8009372:	3601      	adds	r6, #1
 8009374:	f858 2b04 	ldr.w	r2, [r8], #4
 8009378:	f8d1 c000 	ldr.w	ip, [r1]
 800937c:	b293      	uxth	r3, r2
 800937e:	1ac3      	subs	r3, r0, r3
 8009380:	0c12      	lsrs	r2, r2, #16
 8009382:	fa1f f08c 	uxth.w	r0, ip
 8009386:	4403      	add	r3, r0
 8009388:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800938c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009390:	b29b      	uxth	r3, r3
 8009392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009396:	45c1      	cmp	r9, r8
 8009398:	ea4f 4022 	mov.w	r0, r2, asr #16
 800939c:	f841 3b04 	str.w	r3, [r1], #4
 80093a0:	d2e8      	bcs.n	8009374 <quorem+0xac>
 80093a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093aa:	b922      	cbnz	r2, 80093b6 <quorem+0xee>
 80093ac:	3b04      	subs	r3, #4
 80093ae:	429d      	cmp	r5, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	d30a      	bcc.n	80093ca <quorem+0x102>
 80093b4:	613c      	str	r4, [r7, #16]
 80093b6:	4630      	mov	r0, r6
 80093b8:	b003      	add	sp, #12
 80093ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	3b04      	subs	r3, #4
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	d1cd      	bne.n	8009362 <quorem+0x9a>
 80093c6:	3c01      	subs	r4, #1
 80093c8:	e7c8      	b.n	800935c <quorem+0x94>
 80093ca:	6812      	ldr	r2, [r2, #0]
 80093cc:	3b04      	subs	r3, #4
 80093ce:	2a00      	cmp	r2, #0
 80093d0:	d1f0      	bne.n	80093b4 <quorem+0xec>
 80093d2:	3c01      	subs	r4, #1
 80093d4:	e7eb      	b.n	80093ae <quorem+0xe6>
 80093d6:	2000      	movs	r0, #0
 80093d8:	e7ee      	b.n	80093b8 <quorem+0xf0>
 80093da:	0000      	movs	r0, r0
 80093dc:	0000      	movs	r0, r0
	...

080093e0 <_dtoa_r>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	4616      	mov	r6, r2
 80093e6:	461f      	mov	r7, r3
 80093e8:	69c4      	ldr	r4, [r0, #28]
 80093ea:	b099      	sub	sp, #100	; 0x64
 80093ec:	4605      	mov	r5, r0
 80093ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80093f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80093f6:	b974      	cbnz	r4, 8009416 <_dtoa_r+0x36>
 80093f8:	2010      	movs	r0, #16
 80093fa:	f001 f977 	bl	800a6ec <malloc>
 80093fe:	4602      	mov	r2, r0
 8009400:	61e8      	str	r0, [r5, #28]
 8009402:	b920      	cbnz	r0, 800940e <_dtoa_r+0x2e>
 8009404:	21ef      	movs	r1, #239	; 0xef
 8009406:	4bac      	ldr	r3, [pc, #688]	; (80096b8 <_dtoa_r+0x2d8>)
 8009408:	48ac      	ldr	r0, [pc, #688]	; (80096bc <_dtoa_r+0x2dc>)
 800940a:	f002 f98f 	bl	800b72c <__assert_func>
 800940e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009412:	6004      	str	r4, [r0, #0]
 8009414:	60c4      	str	r4, [r0, #12]
 8009416:	69eb      	ldr	r3, [r5, #28]
 8009418:	6819      	ldr	r1, [r3, #0]
 800941a:	b151      	cbz	r1, 8009432 <_dtoa_r+0x52>
 800941c:	685a      	ldr	r2, [r3, #4]
 800941e:	2301      	movs	r3, #1
 8009420:	4093      	lsls	r3, r2
 8009422:	604a      	str	r2, [r1, #4]
 8009424:	608b      	str	r3, [r1, #8]
 8009426:	4628      	mov	r0, r5
 8009428:	f001 fa66 	bl	800a8f8 <_Bfree>
 800942c:	2200      	movs	r2, #0
 800942e:	69eb      	ldr	r3, [r5, #28]
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	1e3b      	subs	r3, r7, #0
 8009434:	bfaf      	iteee	ge
 8009436:	2300      	movge	r3, #0
 8009438:	2201      	movlt	r2, #1
 800943a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800943e:	9305      	strlt	r3, [sp, #20]
 8009440:	bfa8      	it	ge
 8009442:	f8c8 3000 	strge.w	r3, [r8]
 8009446:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800944a:	4b9d      	ldr	r3, [pc, #628]	; (80096c0 <_dtoa_r+0x2e0>)
 800944c:	bfb8      	it	lt
 800944e:	f8c8 2000 	strlt.w	r2, [r8]
 8009452:	ea33 0309 	bics.w	r3, r3, r9
 8009456:	d119      	bne.n	800948c <_dtoa_r+0xac>
 8009458:	f242 730f 	movw	r3, #9999	; 0x270f
 800945c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009464:	4333      	orrs	r3, r6
 8009466:	f000 8589 	beq.w	8009f7c <_dtoa_r+0xb9c>
 800946a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800946c:	b953      	cbnz	r3, 8009484 <_dtoa_r+0xa4>
 800946e:	4b95      	ldr	r3, [pc, #596]	; (80096c4 <_dtoa_r+0x2e4>)
 8009470:	e023      	b.n	80094ba <_dtoa_r+0xda>
 8009472:	4b95      	ldr	r3, [pc, #596]	; (80096c8 <_dtoa_r+0x2e8>)
 8009474:	9303      	str	r3, [sp, #12]
 8009476:	3308      	adds	r3, #8
 8009478:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	9803      	ldr	r0, [sp, #12]
 800947e:	b019      	add	sp, #100	; 0x64
 8009480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009484:	4b8f      	ldr	r3, [pc, #572]	; (80096c4 <_dtoa_r+0x2e4>)
 8009486:	9303      	str	r3, [sp, #12]
 8009488:	3303      	adds	r3, #3
 800948a:	e7f5      	b.n	8009478 <_dtoa_r+0x98>
 800948c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009490:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009494:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009498:	2200      	movs	r2, #0
 800949a:	2300      	movs	r3, #0
 800949c:	f7f7 fa8e 	bl	80009bc <__aeabi_dcmpeq>
 80094a0:	4680      	mov	r8, r0
 80094a2:	b160      	cbz	r0, 80094be <_dtoa_r+0xde>
 80094a4:	2301      	movs	r3, #1
 80094a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8562 	beq.w	8009f76 <_dtoa_r+0xb96>
 80094b2:	4b86      	ldr	r3, [pc, #536]	; (80096cc <_dtoa_r+0x2ec>)
 80094b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	9303      	str	r3, [sp, #12]
 80094bc:	e7de      	b.n	800947c <_dtoa_r+0x9c>
 80094be:	ab16      	add	r3, sp, #88	; 0x58
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	ab17      	add	r3, sp, #92	; 0x5c
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	4628      	mov	r0, r5
 80094c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094cc:	f001 fda8 	bl	800b020 <__d2b>
 80094d0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80094d4:	4682      	mov	sl, r0
 80094d6:	2c00      	cmp	r4, #0
 80094d8:	d07e      	beq.n	80095d8 <_dtoa_r+0x1f8>
 80094da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80094e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094e8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80094ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80094f0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80094f4:	4619      	mov	r1, r3
 80094f6:	2200      	movs	r2, #0
 80094f8:	4b75      	ldr	r3, [pc, #468]	; (80096d0 <_dtoa_r+0x2f0>)
 80094fa:	f7f6 fe3f 	bl	800017c <__aeabi_dsub>
 80094fe:	a368      	add	r3, pc, #416	; (adr r3, 80096a0 <_dtoa_r+0x2c0>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f6 fff2 	bl	80004ec <__aeabi_dmul>
 8009508:	a367      	add	r3, pc, #412	; (adr r3, 80096a8 <_dtoa_r+0x2c8>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f6 fe37 	bl	8000180 <__adddf3>
 8009512:	4606      	mov	r6, r0
 8009514:	4620      	mov	r0, r4
 8009516:	460f      	mov	r7, r1
 8009518:	f7f6 ff7e 	bl	8000418 <__aeabi_i2d>
 800951c:	a364      	add	r3, pc, #400	; (adr r3, 80096b0 <_dtoa_r+0x2d0>)
 800951e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009522:	f7f6 ffe3 	bl	80004ec <__aeabi_dmul>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4630      	mov	r0, r6
 800952c:	4639      	mov	r1, r7
 800952e:	f7f6 fe27 	bl	8000180 <__adddf3>
 8009532:	4606      	mov	r6, r0
 8009534:	460f      	mov	r7, r1
 8009536:	f7f7 fa89 	bl	8000a4c <__aeabi_d2iz>
 800953a:	2200      	movs	r2, #0
 800953c:	4683      	mov	fp, r0
 800953e:	2300      	movs	r3, #0
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f7 fa44 	bl	80009d0 <__aeabi_dcmplt>
 8009548:	b148      	cbz	r0, 800955e <_dtoa_r+0x17e>
 800954a:	4658      	mov	r0, fp
 800954c:	f7f6 ff64 	bl	8000418 <__aeabi_i2d>
 8009550:	4632      	mov	r2, r6
 8009552:	463b      	mov	r3, r7
 8009554:	f7f7 fa32 	bl	80009bc <__aeabi_dcmpeq>
 8009558:	b908      	cbnz	r0, 800955e <_dtoa_r+0x17e>
 800955a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800955e:	f1bb 0f16 	cmp.w	fp, #22
 8009562:	d857      	bhi.n	8009614 <_dtoa_r+0x234>
 8009564:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009568:	4b5a      	ldr	r3, [pc, #360]	; (80096d4 <_dtoa_r+0x2f4>)
 800956a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800956e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009572:	f7f7 fa2d 	bl	80009d0 <__aeabi_dcmplt>
 8009576:	2800      	cmp	r0, #0
 8009578:	d04e      	beq.n	8009618 <_dtoa_r+0x238>
 800957a:	2300      	movs	r3, #0
 800957c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009580:	930f      	str	r3, [sp, #60]	; 0x3c
 8009582:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009584:	1b1b      	subs	r3, r3, r4
 8009586:	1e5a      	subs	r2, r3, #1
 8009588:	bf46      	itte	mi
 800958a:	f1c3 0901 	rsbmi	r9, r3, #1
 800958e:	2300      	movmi	r3, #0
 8009590:	f04f 0900 	movpl.w	r9, #0
 8009594:	9209      	str	r2, [sp, #36]	; 0x24
 8009596:	bf48      	it	mi
 8009598:	9309      	strmi	r3, [sp, #36]	; 0x24
 800959a:	f1bb 0f00 	cmp.w	fp, #0
 800959e:	db3d      	blt.n	800961c <_dtoa_r+0x23c>
 80095a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80095a6:	445b      	add	r3, fp
 80095a8:	9309      	str	r3, [sp, #36]	; 0x24
 80095aa:	2300      	movs	r3, #0
 80095ac:	930a      	str	r3, [sp, #40]	; 0x28
 80095ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095b0:	2b09      	cmp	r3, #9
 80095b2:	d867      	bhi.n	8009684 <_dtoa_r+0x2a4>
 80095b4:	2b05      	cmp	r3, #5
 80095b6:	bfc4      	itt	gt
 80095b8:	3b04      	subgt	r3, #4
 80095ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80095bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095be:	bfc8      	it	gt
 80095c0:	2400      	movgt	r4, #0
 80095c2:	f1a3 0302 	sub.w	r3, r3, #2
 80095c6:	bfd8      	it	le
 80095c8:	2401      	movle	r4, #1
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	f200 8086 	bhi.w	80096dc <_dtoa_r+0x2fc>
 80095d0:	e8df f003 	tbb	[pc, r3]
 80095d4:	5637392c 	.word	0x5637392c
 80095d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80095dc:	441c      	add	r4, r3
 80095de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	bfc1      	itttt	gt
 80095e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095ea:	fa09 f903 	lslgt.w	r9, r9, r3
 80095ee:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80095f2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80095f6:	bfd6      	itet	le
 80095f8:	f1c3 0320 	rsble	r3, r3, #32
 80095fc:	ea49 0003 	orrgt.w	r0, r9, r3
 8009600:	fa06 f003 	lslle.w	r0, r6, r3
 8009604:	f7f6 fef8 	bl	80003f8 <__aeabi_ui2d>
 8009608:	2201      	movs	r2, #1
 800960a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800960e:	3c01      	subs	r4, #1
 8009610:	9213      	str	r2, [sp, #76]	; 0x4c
 8009612:	e76f      	b.n	80094f4 <_dtoa_r+0x114>
 8009614:	2301      	movs	r3, #1
 8009616:	e7b3      	b.n	8009580 <_dtoa_r+0x1a0>
 8009618:	900f      	str	r0, [sp, #60]	; 0x3c
 800961a:	e7b2      	b.n	8009582 <_dtoa_r+0x1a2>
 800961c:	f1cb 0300 	rsb	r3, fp, #0
 8009620:	930a      	str	r3, [sp, #40]	; 0x28
 8009622:	2300      	movs	r3, #0
 8009624:	eba9 090b 	sub.w	r9, r9, fp
 8009628:	930e      	str	r3, [sp, #56]	; 0x38
 800962a:	e7c0      	b.n	80095ae <_dtoa_r+0x1ce>
 800962c:	2300      	movs	r3, #0
 800962e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009630:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009632:	2b00      	cmp	r3, #0
 8009634:	dc55      	bgt.n	80096e2 <_dtoa_r+0x302>
 8009636:	2301      	movs	r3, #1
 8009638:	461a      	mov	r2, r3
 800963a:	9306      	str	r3, [sp, #24]
 800963c:	9308      	str	r3, [sp, #32]
 800963e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009640:	e00b      	b.n	800965a <_dtoa_r+0x27a>
 8009642:	2301      	movs	r3, #1
 8009644:	e7f3      	b.n	800962e <_dtoa_r+0x24e>
 8009646:	2300      	movs	r3, #0
 8009648:	930b      	str	r3, [sp, #44]	; 0x2c
 800964a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800964c:	445b      	add	r3, fp
 800964e:	9306      	str	r3, [sp, #24]
 8009650:	3301      	adds	r3, #1
 8009652:	2b01      	cmp	r3, #1
 8009654:	9308      	str	r3, [sp, #32]
 8009656:	bfb8      	it	lt
 8009658:	2301      	movlt	r3, #1
 800965a:	2100      	movs	r1, #0
 800965c:	2204      	movs	r2, #4
 800965e:	69e8      	ldr	r0, [r5, #28]
 8009660:	f102 0614 	add.w	r6, r2, #20
 8009664:	429e      	cmp	r6, r3
 8009666:	d940      	bls.n	80096ea <_dtoa_r+0x30a>
 8009668:	6041      	str	r1, [r0, #4]
 800966a:	4628      	mov	r0, r5
 800966c:	f001 f904 	bl	800a878 <_Balloc>
 8009670:	9003      	str	r0, [sp, #12]
 8009672:	2800      	cmp	r0, #0
 8009674:	d13c      	bne.n	80096f0 <_dtoa_r+0x310>
 8009676:	4602      	mov	r2, r0
 8009678:	f240 11af 	movw	r1, #431	; 0x1af
 800967c:	4b16      	ldr	r3, [pc, #88]	; (80096d8 <_dtoa_r+0x2f8>)
 800967e:	e6c3      	b.n	8009408 <_dtoa_r+0x28>
 8009680:	2301      	movs	r3, #1
 8009682:	e7e1      	b.n	8009648 <_dtoa_r+0x268>
 8009684:	2401      	movs	r4, #1
 8009686:	2300      	movs	r3, #0
 8009688:	940b      	str	r4, [sp, #44]	; 0x2c
 800968a:	9322      	str	r3, [sp, #136]	; 0x88
 800968c:	f04f 33ff 	mov.w	r3, #4294967295
 8009690:	2200      	movs	r2, #0
 8009692:	9306      	str	r3, [sp, #24]
 8009694:	9308      	str	r3, [sp, #32]
 8009696:	2312      	movs	r3, #18
 8009698:	e7d1      	b.n	800963e <_dtoa_r+0x25e>
 800969a:	bf00      	nop
 800969c:	f3af 8000 	nop.w
 80096a0:	636f4361 	.word	0x636f4361
 80096a4:	3fd287a7 	.word	0x3fd287a7
 80096a8:	8b60c8b3 	.word	0x8b60c8b3
 80096ac:	3fc68a28 	.word	0x3fc68a28
 80096b0:	509f79fb 	.word	0x509f79fb
 80096b4:	3fd34413 	.word	0x3fd34413
 80096b8:	0800bd19 	.word	0x0800bd19
 80096bc:	0800bd30 	.word	0x0800bd30
 80096c0:	7ff00000 	.word	0x7ff00000
 80096c4:	0800bd15 	.word	0x0800bd15
 80096c8:	0800bd0c 	.word	0x0800bd0c
 80096cc:	0800bce1 	.word	0x0800bce1
 80096d0:	3ff80000 	.word	0x3ff80000
 80096d4:	0800be80 	.word	0x0800be80
 80096d8:	0800bd88 	.word	0x0800bd88
 80096dc:	2301      	movs	r3, #1
 80096de:	930b      	str	r3, [sp, #44]	; 0x2c
 80096e0:	e7d4      	b.n	800968c <_dtoa_r+0x2ac>
 80096e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80096e4:	9306      	str	r3, [sp, #24]
 80096e6:	9308      	str	r3, [sp, #32]
 80096e8:	e7b7      	b.n	800965a <_dtoa_r+0x27a>
 80096ea:	3101      	adds	r1, #1
 80096ec:	0052      	lsls	r2, r2, #1
 80096ee:	e7b7      	b.n	8009660 <_dtoa_r+0x280>
 80096f0:	69eb      	ldr	r3, [r5, #28]
 80096f2:	9a03      	ldr	r2, [sp, #12]
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	9b08      	ldr	r3, [sp, #32]
 80096f8:	2b0e      	cmp	r3, #14
 80096fa:	f200 80a8 	bhi.w	800984e <_dtoa_r+0x46e>
 80096fe:	2c00      	cmp	r4, #0
 8009700:	f000 80a5 	beq.w	800984e <_dtoa_r+0x46e>
 8009704:	f1bb 0f00 	cmp.w	fp, #0
 8009708:	dd34      	ble.n	8009774 <_dtoa_r+0x394>
 800970a:	4b9a      	ldr	r3, [pc, #616]	; (8009974 <_dtoa_r+0x594>)
 800970c:	f00b 020f 	and.w	r2, fp, #15
 8009710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009714:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009718:	e9d3 3400 	ldrd	r3, r4, [r3]
 800971c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009720:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009724:	d016      	beq.n	8009754 <_dtoa_r+0x374>
 8009726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800972a:	4b93      	ldr	r3, [pc, #588]	; (8009978 <_dtoa_r+0x598>)
 800972c:	2703      	movs	r7, #3
 800972e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009732:	f7f7 f805 	bl	8000740 <__aeabi_ddiv>
 8009736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800973a:	f004 040f 	and.w	r4, r4, #15
 800973e:	4e8e      	ldr	r6, [pc, #568]	; (8009978 <_dtoa_r+0x598>)
 8009740:	b954      	cbnz	r4, 8009758 <_dtoa_r+0x378>
 8009742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800974a:	f7f6 fff9 	bl	8000740 <__aeabi_ddiv>
 800974e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009752:	e029      	b.n	80097a8 <_dtoa_r+0x3c8>
 8009754:	2702      	movs	r7, #2
 8009756:	e7f2      	b.n	800973e <_dtoa_r+0x35e>
 8009758:	07e1      	lsls	r1, r4, #31
 800975a:	d508      	bpl.n	800976e <_dtoa_r+0x38e>
 800975c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009760:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009764:	f7f6 fec2 	bl	80004ec <__aeabi_dmul>
 8009768:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800976c:	3701      	adds	r7, #1
 800976e:	1064      	asrs	r4, r4, #1
 8009770:	3608      	adds	r6, #8
 8009772:	e7e5      	b.n	8009740 <_dtoa_r+0x360>
 8009774:	f000 80a5 	beq.w	80098c2 <_dtoa_r+0x4e2>
 8009778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800977c:	f1cb 0400 	rsb	r4, fp, #0
 8009780:	4b7c      	ldr	r3, [pc, #496]	; (8009974 <_dtoa_r+0x594>)
 8009782:	f004 020f 	and.w	r2, r4, #15
 8009786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	f7f6 fead 	bl	80004ec <__aeabi_dmul>
 8009792:	2702      	movs	r7, #2
 8009794:	2300      	movs	r3, #0
 8009796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800979a:	4e77      	ldr	r6, [pc, #476]	; (8009978 <_dtoa_r+0x598>)
 800979c:	1124      	asrs	r4, r4, #4
 800979e:	2c00      	cmp	r4, #0
 80097a0:	f040 8084 	bne.w	80098ac <_dtoa_r+0x4cc>
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1d2      	bne.n	800974e <_dtoa_r+0x36e>
 80097a8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80097ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80097b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 8087 	beq.w	80098c6 <_dtoa_r+0x4e6>
 80097b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097bc:	2200      	movs	r2, #0
 80097be:	4b6f      	ldr	r3, [pc, #444]	; (800997c <_dtoa_r+0x59c>)
 80097c0:	f7f7 f906 	bl	80009d0 <__aeabi_dcmplt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d07e      	beq.n	80098c6 <_dtoa_r+0x4e6>
 80097c8:	9b08      	ldr	r3, [sp, #32]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d07b      	beq.n	80098c6 <_dtoa_r+0x4e6>
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	dd38      	ble.n	8009846 <_dtoa_r+0x466>
 80097d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097d8:	2200      	movs	r2, #0
 80097da:	4b69      	ldr	r3, [pc, #420]	; (8009980 <_dtoa_r+0x5a0>)
 80097dc:	f7f6 fe86 	bl	80004ec <__aeabi_dmul>
 80097e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097e4:	9c06      	ldr	r4, [sp, #24]
 80097e6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80097ea:	3701      	adds	r7, #1
 80097ec:	4638      	mov	r0, r7
 80097ee:	f7f6 fe13 	bl	8000418 <__aeabi_i2d>
 80097f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f6:	f7f6 fe79 	bl	80004ec <__aeabi_dmul>
 80097fa:	2200      	movs	r2, #0
 80097fc:	4b61      	ldr	r3, [pc, #388]	; (8009984 <_dtoa_r+0x5a4>)
 80097fe:	f7f6 fcbf 	bl	8000180 <__adddf3>
 8009802:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009806:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800980a:	9611      	str	r6, [sp, #68]	; 0x44
 800980c:	2c00      	cmp	r4, #0
 800980e:	d15d      	bne.n	80098cc <_dtoa_r+0x4ec>
 8009810:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009814:	2200      	movs	r2, #0
 8009816:	4b5c      	ldr	r3, [pc, #368]	; (8009988 <_dtoa_r+0x5a8>)
 8009818:	f7f6 fcb0 	bl	800017c <__aeabi_dsub>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009824:	4633      	mov	r3, r6
 8009826:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009828:	f7f7 f8f0 	bl	8000a0c <__aeabi_dcmpgt>
 800982c:	2800      	cmp	r0, #0
 800982e:	f040 8295 	bne.w	8009d5c <_dtoa_r+0x97c>
 8009832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009836:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009838:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800983c:	f7f7 f8c8 	bl	80009d0 <__aeabi_dcmplt>
 8009840:	2800      	cmp	r0, #0
 8009842:	f040 8289 	bne.w	8009d58 <_dtoa_r+0x978>
 8009846:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800984a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800984e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009850:	2b00      	cmp	r3, #0
 8009852:	f2c0 8151 	blt.w	8009af8 <_dtoa_r+0x718>
 8009856:	f1bb 0f0e 	cmp.w	fp, #14
 800985a:	f300 814d 	bgt.w	8009af8 <_dtoa_r+0x718>
 800985e:	4b45      	ldr	r3, [pc, #276]	; (8009974 <_dtoa_r+0x594>)
 8009860:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009864:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009868:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800986c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800986e:	2b00      	cmp	r3, #0
 8009870:	f280 80da 	bge.w	8009a28 <_dtoa_r+0x648>
 8009874:	9b08      	ldr	r3, [sp, #32]
 8009876:	2b00      	cmp	r3, #0
 8009878:	f300 80d6 	bgt.w	8009a28 <_dtoa_r+0x648>
 800987c:	f040 826b 	bne.w	8009d56 <_dtoa_r+0x976>
 8009880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009884:	2200      	movs	r2, #0
 8009886:	4b40      	ldr	r3, [pc, #256]	; (8009988 <_dtoa_r+0x5a8>)
 8009888:	f7f6 fe30 	bl	80004ec <__aeabi_dmul>
 800988c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009890:	f7f7 f8b2 	bl	80009f8 <__aeabi_dcmpge>
 8009894:	9c08      	ldr	r4, [sp, #32]
 8009896:	4626      	mov	r6, r4
 8009898:	2800      	cmp	r0, #0
 800989a:	f040 8241 	bne.w	8009d20 <_dtoa_r+0x940>
 800989e:	2331      	movs	r3, #49	; 0x31
 80098a0:	9f03      	ldr	r7, [sp, #12]
 80098a2:	f10b 0b01 	add.w	fp, fp, #1
 80098a6:	f807 3b01 	strb.w	r3, [r7], #1
 80098aa:	e23d      	b.n	8009d28 <_dtoa_r+0x948>
 80098ac:	07e2      	lsls	r2, r4, #31
 80098ae:	d505      	bpl.n	80098bc <_dtoa_r+0x4dc>
 80098b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098b4:	f7f6 fe1a 	bl	80004ec <__aeabi_dmul>
 80098b8:	2301      	movs	r3, #1
 80098ba:	3701      	adds	r7, #1
 80098bc:	1064      	asrs	r4, r4, #1
 80098be:	3608      	adds	r6, #8
 80098c0:	e76d      	b.n	800979e <_dtoa_r+0x3be>
 80098c2:	2702      	movs	r7, #2
 80098c4:	e770      	b.n	80097a8 <_dtoa_r+0x3c8>
 80098c6:	46d8      	mov	r8, fp
 80098c8:	9c08      	ldr	r4, [sp, #32]
 80098ca:	e78f      	b.n	80097ec <_dtoa_r+0x40c>
 80098cc:	9903      	ldr	r1, [sp, #12]
 80098ce:	4b29      	ldr	r3, [pc, #164]	; (8009974 <_dtoa_r+0x594>)
 80098d0:	4421      	add	r1, r4
 80098d2:	9112      	str	r1, [sp, #72]	; 0x48
 80098d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098da:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80098de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098e2:	2900      	cmp	r1, #0
 80098e4:	d054      	beq.n	8009990 <_dtoa_r+0x5b0>
 80098e6:	2000      	movs	r0, #0
 80098e8:	4928      	ldr	r1, [pc, #160]	; (800998c <_dtoa_r+0x5ac>)
 80098ea:	f7f6 ff29 	bl	8000740 <__aeabi_ddiv>
 80098ee:	463b      	mov	r3, r7
 80098f0:	4632      	mov	r2, r6
 80098f2:	f7f6 fc43 	bl	800017c <__aeabi_dsub>
 80098f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098fa:	9f03      	ldr	r7, [sp, #12]
 80098fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009900:	f7f7 f8a4 	bl	8000a4c <__aeabi_d2iz>
 8009904:	4604      	mov	r4, r0
 8009906:	f7f6 fd87 	bl	8000418 <__aeabi_i2d>
 800990a:	4602      	mov	r2, r0
 800990c:	460b      	mov	r3, r1
 800990e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009912:	f7f6 fc33 	bl	800017c <__aeabi_dsub>
 8009916:	4602      	mov	r2, r0
 8009918:	460b      	mov	r3, r1
 800991a:	3430      	adds	r4, #48	; 0x30
 800991c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009920:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009924:	f807 4b01 	strb.w	r4, [r7], #1
 8009928:	f7f7 f852 	bl	80009d0 <__aeabi_dcmplt>
 800992c:	2800      	cmp	r0, #0
 800992e:	d173      	bne.n	8009a18 <_dtoa_r+0x638>
 8009930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009934:	2000      	movs	r0, #0
 8009936:	4911      	ldr	r1, [pc, #68]	; (800997c <_dtoa_r+0x59c>)
 8009938:	f7f6 fc20 	bl	800017c <__aeabi_dsub>
 800993c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009940:	f7f7 f846 	bl	80009d0 <__aeabi_dcmplt>
 8009944:	2800      	cmp	r0, #0
 8009946:	f040 80b6 	bne.w	8009ab6 <_dtoa_r+0x6d6>
 800994a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800994c:	429f      	cmp	r7, r3
 800994e:	f43f af7a 	beq.w	8009846 <_dtoa_r+0x466>
 8009952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009956:	2200      	movs	r2, #0
 8009958:	4b09      	ldr	r3, [pc, #36]	; (8009980 <_dtoa_r+0x5a0>)
 800995a:	f7f6 fdc7 	bl	80004ec <__aeabi_dmul>
 800995e:	2200      	movs	r2, #0
 8009960:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <_dtoa_r+0x5a0>)
 800996a:	f7f6 fdbf 	bl	80004ec <__aeabi_dmul>
 800996e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009972:	e7c3      	b.n	80098fc <_dtoa_r+0x51c>
 8009974:	0800be80 	.word	0x0800be80
 8009978:	0800be58 	.word	0x0800be58
 800997c:	3ff00000 	.word	0x3ff00000
 8009980:	40240000 	.word	0x40240000
 8009984:	401c0000 	.word	0x401c0000
 8009988:	40140000 	.word	0x40140000
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f7f6 fdaa 	bl	80004ec <__aeabi_dmul>
 8009998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800999a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800999e:	9c03      	ldr	r4, [sp, #12]
 80099a0:	9314      	str	r3, [sp, #80]	; 0x50
 80099a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099a6:	f7f7 f851 	bl	8000a4c <__aeabi_d2iz>
 80099aa:	9015      	str	r0, [sp, #84]	; 0x54
 80099ac:	f7f6 fd34 	bl	8000418 <__aeabi_i2d>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099b8:	f7f6 fbe0 	bl	800017c <__aeabi_dsub>
 80099bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099be:	4606      	mov	r6, r0
 80099c0:	3330      	adds	r3, #48	; 0x30
 80099c2:	f804 3b01 	strb.w	r3, [r4], #1
 80099c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099c8:	460f      	mov	r7, r1
 80099ca:	429c      	cmp	r4, r3
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	d124      	bne.n	8009a1c <_dtoa_r+0x63c>
 80099d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099d6:	4baf      	ldr	r3, [pc, #700]	; (8009c94 <_dtoa_r+0x8b4>)
 80099d8:	f7f6 fbd2 	bl	8000180 <__adddf3>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f7 f812 	bl	8000a0c <__aeabi_dcmpgt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d163      	bne.n	8009ab4 <_dtoa_r+0x6d4>
 80099ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099f0:	2000      	movs	r0, #0
 80099f2:	49a8      	ldr	r1, [pc, #672]	; (8009c94 <_dtoa_r+0x8b4>)
 80099f4:	f7f6 fbc2 	bl	800017c <__aeabi_dsub>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4630      	mov	r0, r6
 80099fe:	4639      	mov	r1, r7
 8009a00:	f7f6 ffe6 	bl	80009d0 <__aeabi_dcmplt>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f43f af1e 	beq.w	8009846 <_dtoa_r+0x466>
 8009a0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a0c:	1e7b      	subs	r3, r7, #1
 8009a0e:	9314      	str	r3, [sp, #80]	; 0x50
 8009a10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009a14:	2b30      	cmp	r3, #48	; 0x30
 8009a16:	d0f8      	beq.n	8009a0a <_dtoa_r+0x62a>
 8009a18:	46c3      	mov	fp, r8
 8009a1a:	e03b      	b.n	8009a94 <_dtoa_r+0x6b4>
 8009a1c:	4b9e      	ldr	r3, [pc, #632]	; (8009c98 <_dtoa_r+0x8b8>)
 8009a1e:	f7f6 fd65 	bl	80004ec <__aeabi_dmul>
 8009a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a26:	e7bc      	b.n	80099a2 <_dtoa_r+0x5c2>
 8009a28:	9f03      	ldr	r7, [sp, #12]
 8009a2a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a2e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a32:	4640      	mov	r0, r8
 8009a34:	4649      	mov	r1, r9
 8009a36:	f7f6 fe83 	bl	8000740 <__aeabi_ddiv>
 8009a3a:	f7f7 f807 	bl	8000a4c <__aeabi_d2iz>
 8009a3e:	4604      	mov	r4, r0
 8009a40:	f7f6 fcea 	bl	8000418 <__aeabi_i2d>
 8009a44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a48:	f7f6 fd50 	bl	80004ec <__aeabi_dmul>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	460b      	mov	r3, r1
 8009a50:	4640      	mov	r0, r8
 8009a52:	4649      	mov	r1, r9
 8009a54:	f7f6 fb92 	bl	800017c <__aeabi_dsub>
 8009a58:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009a5c:	f807 6b01 	strb.w	r6, [r7], #1
 8009a60:	9e03      	ldr	r6, [sp, #12]
 8009a62:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009a66:	1bbe      	subs	r6, r7, r6
 8009a68:	45b4      	cmp	ip, r6
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	d136      	bne.n	8009ade <_dtoa_r+0x6fe>
 8009a70:	f7f6 fb86 	bl	8000180 <__adddf3>
 8009a74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4689      	mov	r9, r1
 8009a7c:	f7f6 ffc6 	bl	8000a0c <__aeabi_dcmpgt>
 8009a80:	bb58      	cbnz	r0, 8009ada <_dtoa_r+0x6fa>
 8009a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a86:	4640      	mov	r0, r8
 8009a88:	4649      	mov	r1, r9
 8009a8a:	f7f6 ff97 	bl	80009bc <__aeabi_dcmpeq>
 8009a8e:	b108      	cbz	r0, 8009a94 <_dtoa_r+0x6b4>
 8009a90:	07e3      	lsls	r3, r4, #31
 8009a92:	d422      	bmi.n	8009ada <_dtoa_r+0x6fa>
 8009a94:	4651      	mov	r1, sl
 8009a96:	4628      	mov	r0, r5
 8009a98:	f000 ff2e 	bl	800a8f8 <_Bfree>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009aa0:	703b      	strb	r3, [r7, #0]
 8009aa2:	f10b 0301 	add.w	r3, fp, #1
 8009aa6:	6013      	str	r3, [r2, #0]
 8009aa8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f43f ace6 	beq.w	800947c <_dtoa_r+0x9c>
 8009ab0:	601f      	str	r7, [r3, #0]
 8009ab2:	e4e3      	b.n	800947c <_dtoa_r+0x9c>
 8009ab4:	4627      	mov	r7, r4
 8009ab6:	463b      	mov	r3, r7
 8009ab8:	461f      	mov	r7, r3
 8009aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009abe:	2a39      	cmp	r2, #57	; 0x39
 8009ac0:	d107      	bne.n	8009ad2 <_dtoa_r+0x6f2>
 8009ac2:	9a03      	ldr	r2, [sp, #12]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d1f7      	bne.n	8009ab8 <_dtoa_r+0x6d8>
 8009ac8:	2230      	movs	r2, #48	; 0x30
 8009aca:	9903      	ldr	r1, [sp, #12]
 8009acc:	f108 0801 	add.w	r8, r8, #1
 8009ad0:	700a      	strb	r2, [r1, #0]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	3201      	adds	r2, #1
 8009ad6:	701a      	strb	r2, [r3, #0]
 8009ad8:	e79e      	b.n	8009a18 <_dtoa_r+0x638>
 8009ada:	46d8      	mov	r8, fp
 8009adc:	e7eb      	b.n	8009ab6 <_dtoa_r+0x6d6>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	4b6d      	ldr	r3, [pc, #436]	; (8009c98 <_dtoa_r+0x8b8>)
 8009ae2:	f7f6 fd03 	bl	80004ec <__aeabi_dmul>
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4680      	mov	r8, r0
 8009aec:	4689      	mov	r9, r1
 8009aee:	f7f6 ff65 	bl	80009bc <__aeabi_dcmpeq>
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d09b      	beq.n	8009a2e <_dtoa_r+0x64e>
 8009af6:	e7cd      	b.n	8009a94 <_dtoa_r+0x6b4>
 8009af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009afa:	2a00      	cmp	r2, #0
 8009afc:	f000 80c4 	beq.w	8009c88 <_dtoa_r+0x8a8>
 8009b00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b02:	2a01      	cmp	r2, #1
 8009b04:	f300 80a8 	bgt.w	8009c58 <_dtoa_r+0x878>
 8009b08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b0a:	2a00      	cmp	r2, #0
 8009b0c:	f000 80a0 	beq.w	8009c50 <_dtoa_r+0x870>
 8009b10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b14:	464f      	mov	r7, r9
 8009b16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	441a      	add	r2, r3
 8009b1e:	4628      	mov	r0, r5
 8009b20:	4499      	add	r9, r3
 8009b22:	9209      	str	r2, [sp, #36]	; 0x24
 8009b24:	f000 ffe8 	bl	800aaf8 <__i2b>
 8009b28:	4606      	mov	r6, r0
 8009b2a:	b15f      	cbz	r7, 8009b44 <_dtoa_r+0x764>
 8009b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dd08      	ble.n	8009b44 <_dtoa_r+0x764>
 8009b32:	42bb      	cmp	r3, r7
 8009b34:	bfa8      	it	ge
 8009b36:	463b      	movge	r3, r7
 8009b38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b3a:	eba9 0903 	sub.w	r9, r9, r3
 8009b3e:	1aff      	subs	r7, r7, r3
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	9309      	str	r3, [sp, #36]	; 0x24
 8009b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b46:	b1f3      	cbz	r3, 8009b86 <_dtoa_r+0x7a6>
 8009b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 80a0 	beq.w	8009c90 <_dtoa_r+0x8b0>
 8009b50:	2c00      	cmp	r4, #0
 8009b52:	dd10      	ble.n	8009b76 <_dtoa_r+0x796>
 8009b54:	4631      	mov	r1, r6
 8009b56:	4622      	mov	r2, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f001 f88b 	bl	800ac74 <__pow5mult>
 8009b5e:	4652      	mov	r2, sl
 8009b60:	4601      	mov	r1, r0
 8009b62:	4606      	mov	r6, r0
 8009b64:	4628      	mov	r0, r5
 8009b66:	f000 ffdd 	bl	800ab24 <__multiply>
 8009b6a:	4680      	mov	r8, r0
 8009b6c:	4651      	mov	r1, sl
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 fec2 	bl	800a8f8 <_Bfree>
 8009b74:	46c2      	mov	sl, r8
 8009b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b78:	1b1a      	subs	r2, r3, r4
 8009b7a:	d004      	beq.n	8009b86 <_dtoa_r+0x7a6>
 8009b7c:	4651      	mov	r1, sl
 8009b7e:	4628      	mov	r0, r5
 8009b80:	f001 f878 	bl	800ac74 <__pow5mult>
 8009b84:	4682      	mov	sl, r0
 8009b86:	2101      	movs	r1, #1
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 ffb5 	bl	800aaf8 <__i2b>
 8009b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b90:	4604      	mov	r4, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f340 8082 	ble.w	8009c9c <_dtoa_r+0x8bc>
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4601      	mov	r1, r0
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	f001 f869 	bl	800ac74 <__pow5mult>
 8009ba2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ba4:	4604      	mov	r4, r0
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	dd7b      	ble.n	8009ca2 <_dtoa_r+0x8c2>
 8009baa:	f04f 0800 	mov.w	r8, #0
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bb4:	6918      	ldr	r0, [r3, #16]
 8009bb6:	f000 ff51 	bl	800aa5c <__hi0bits>
 8009bba:	f1c0 0020 	rsb	r0, r0, #32
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	4418      	add	r0, r3
 8009bc2:	f010 001f 	ands.w	r0, r0, #31
 8009bc6:	f000 8092 	beq.w	8009cee <_dtoa_r+0x90e>
 8009bca:	f1c0 0320 	rsb	r3, r0, #32
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	f340 8085 	ble.w	8009cde <_dtoa_r+0x8fe>
 8009bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bd6:	f1c0 001c 	rsb	r0, r0, #28
 8009bda:	4403      	add	r3, r0
 8009bdc:	4481      	add	r9, r0
 8009bde:	4407      	add	r7, r0
 8009be0:	9309      	str	r3, [sp, #36]	; 0x24
 8009be2:	f1b9 0f00 	cmp.w	r9, #0
 8009be6:	dd05      	ble.n	8009bf4 <_dtoa_r+0x814>
 8009be8:	4651      	mov	r1, sl
 8009bea:	464a      	mov	r2, r9
 8009bec:	4628      	mov	r0, r5
 8009bee:	f001 f89b 	bl	800ad28 <__lshift>
 8009bf2:	4682      	mov	sl, r0
 8009bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	dd05      	ble.n	8009c06 <_dtoa_r+0x826>
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f001 f892 	bl	800ad28 <__lshift>
 8009c04:	4604      	mov	r4, r0
 8009c06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d072      	beq.n	8009cf2 <_dtoa_r+0x912>
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	4650      	mov	r0, sl
 8009c10:	f001 f8f6 	bl	800ae00 <__mcmp>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	da6c      	bge.n	8009cf2 <_dtoa_r+0x912>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	4651      	mov	r1, sl
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f000 fe8c 	bl	800a93c <__multadd>
 8009c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c26:	4682      	mov	sl, r0
 8009c28:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 81ac 	beq.w	8009f8a <_dtoa_r+0xbaa>
 8009c32:	2300      	movs	r3, #0
 8009c34:	4631      	mov	r1, r6
 8009c36:	220a      	movs	r2, #10
 8009c38:	4628      	mov	r0, r5
 8009c3a:	f000 fe7f 	bl	800a93c <__multadd>
 8009c3e:	9b06      	ldr	r3, [sp, #24]
 8009c40:	4606      	mov	r6, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f300 8093 	bgt.w	8009d6e <_dtoa_r+0x98e>
 8009c48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	dc59      	bgt.n	8009d02 <_dtoa_r+0x922>
 8009c4e:	e08e      	b.n	8009d6e <_dtoa_r+0x98e>
 8009c50:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c52:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c56:	e75d      	b.n	8009b14 <_dtoa_r+0x734>
 8009c58:	9b08      	ldr	r3, [sp, #32]
 8009c5a:	1e5c      	subs	r4, r3, #1
 8009c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c5e:	42a3      	cmp	r3, r4
 8009c60:	bfbf      	itttt	lt
 8009c62:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c64:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009c66:	1ae3      	sublt	r3, r4, r3
 8009c68:	18d2      	addlt	r2, r2, r3
 8009c6a:	bfa8      	it	ge
 8009c6c:	1b1c      	subge	r4, r3, r4
 8009c6e:	9b08      	ldr	r3, [sp, #32]
 8009c70:	bfbe      	ittt	lt
 8009c72:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009c74:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009c76:	2400      	movlt	r4, #0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	bfb5      	itete	lt
 8009c7c:	eba9 0703 	sublt.w	r7, r9, r3
 8009c80:	464f      	movge	r7, r9
 8009c82:	2300      	movlt	r3, #0
 8009c84:	9b08      	ldrge	r3, [sp, #32]
 8009c86:	e747      	b.n	8009b18 <_dtoa_r+0x738>
 8009c88:	464f      	mov	r7, r9
 8009c8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c8c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009c8e:	e74c      	b.n	8009b2a <_dtoa_r+0x74a>
 8009c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c92:	e773      	b.n	8009b7c <_dtoa_r+0x79c>
 8009c94:	3fe00000 	.word	0x3fe00000
 8009c98:	40240000 	.word	0x40240000
 8009c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	dc18      	bgt.n	8009cd4 <_dtoa_r+0x8f4>
 8009ca2:	9b04      	ldr	r3, [sp, #16]
 8009ca4:	b9b3      	cbnz	r3, 8009cd4 <_dtoa_r+0x8f4>
 8009ca6:	9b05      	ldr	r3, [sp, #20]
 8009ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cac:	b993      	cbnz	r3, 8009cd4 <_dtoa_r+0x8f4>
 8009cae:	9b05      	ldr	r3, [sp, #20]
 8009cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cb4:	0d1b      	lsrs	r3, r3, #20
 8009cb6:	051b      	lsls	r3, r3, #20
 8009cb8:	b17b      	cbz	r3, 8009cda <_dtoa_r+0x8fa>
 8009cba:	f04f 0801 	mov.w	r8, #1
 8009cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc0:	f109 0901 	add.w	r9, r9, #1
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f47f af6f 	bne.w	8009bae <_dtoa_r+0x7ce>
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	e774      	b.n	8009bbe <_dtoa_r+0x7de>
 8009cd4:	f04f 0800 	mov.w	r8, #0
 8009cd8:	e7f6      	b.n	8009cc8 <_dtoa_r+0x8e8>
 8009cda:	4698      	mov	r8, r3
 8009cdc:	e7f4      	b.n	8009cc8 <_dtoa_r+0x8e8>
 8009cde:	d080      	beq.n	8009be2 <_dtoa_r+0x802>
 8009ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ce2:	331c      	adds	r3, #28
 8009ce4:	441a      	add	r2, r3
 8009ce6:	4499      	add	r9, r3
 8009ce8:	441f      	add	r7, r3
 8009cea:	9209      	str	r2, [sp, #36]	; 0x24
 8009cec:	e779      	b.n	8009be2 <_dtoa_r+0x802>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	e7f6      	b.n	8009ce0 <_dtoa_r+0x900>
 8009cf2:	9b08      	ldr	r3, [sp, #32]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	dc34      	bgt.n	8009d62 <_dtoa_r+0x982>
 8009cf8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	dd31      	ble.n	8009d62 <_dtoa_r+0x982>
 8009cfe:	9b08      	ldr	r3, [sp, #32]
 8009d00:	9306      	str	r3, [sp, #24]
 8009d02:	9b06      	ldr	r3, [sp, #24]
 8009d04:	b963      	cbnz	r3, 8009d20 <_dtoa_r+0x940>
 8009d06:	4621      	mov	r1, r4
 8009d08:	2205      	movs	r2, #5
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f000 fe16 	bl	800a93c <__multadd>
 8009d10:	4601      	mov	r1, r0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4650      	mov	r0, sl
 8009d16:	f001 f873 	bl	800ae00 <__mcmp>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	f73f adbf 	bgt.w	800989e <_dtoa_r+0x4be>
 8009d20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d22:	9f03      	ldr	r7, [sp, #12]
 8009d24:	ea6f 0b03 	mvn.w	fp, r3
 8009d28:	f04f 0800 	mov.w	r8, #0
 8009d2c:	4621      	mov	r1, r4
 8009d2e:	4628      	mov	r0, r5
 8009d30:	f000 fde2 	bl	800a8f8 <_Bfree>
 8009d34:	2e00      	cmp	r6, #0
 8009d36:	f43f aead 	beq.w	8009a94 <_dtoa_r+0x6b4>
 8009d3a:	f1b8 0f00 	cmp.w	r8, #0
 8009d3e:	d005      	beq.n	8009d4c <_dtoa_r+0x96c>
 8009d40:	45b0      	cmp	r8, r6
 8009d42:	d003      	beq.n	8009d4c <_dtoa_r+0x96c>
 8009d44:	4641      	mov	r1, r8
 8009d46:	4628      	mov	r0, r5
 8009d48:	f000 fdd6 	bl	800a8f8 <_Bfree>
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4628      	mov	r0, r5
 8009d50:	f000 fdd2 	bl	800a8f8 <_Bfree>
 8009d54:	e69e      	b.n	8009a94 <_dtoa_r+0x6b4>
 8009d56:	2400      	movs	r4, #0
 8009d58:	4626      	mov	r6, r4
 8009d5a:	e7e1      	b.n	8009d20 <_dtoa_r+0x940>
 8009d5c:	46c3      	mov	fp, r8
 8009d5e:	4626      	mov	r6, r4
 8009d60:	e59d      	b.n	800989e <_dtoa_r+0x4be>
 8009d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 80c8 	beq.w	8009efa <_dtoa_r+0xb1a>
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	9306      	str	r3, [sp, #24]
 8009d6e:	2f00      	cmp	r7, #0
 8009d70:	dd05      	ble.n	8009d7e <_dtoa_r+0x99e>
 8009d72:	4631      	mov	r1, r6
 8009d74:	463a      	mov	r2, r7
 8009d76:	4628      	mov	r0, r5
 8009d78:	f000 ffd6 	bl	800ad28 <__lshift>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	f1b8 0f00 	cmp.w	r8, #0
 8009d82:	d05b      	beq.n	8009e3c <_dtoa_r+0xa5c>
 8009d84:	4628      	mov	r0, r5
 8009d86:	6871      	ldr	r1, [r6, #4]
 8009d88:	f000 fd76 	bl	800a878 <_Balloc>
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	b928      	cbnz	r0, 8009d9c <_dtoa_r+0x9bc>
 8009d90:	4602      	mov	r2, r0
 8009d92:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009d96:	4b81      	ldr	r3, [pc, #516]	; (8009f9c <_dtoa_r+0xbbc>)
 8009d98:	f7ff bb36 	b.w	8009408 <_dtoa_r+0x28>
 8009d9c:	6932      	ldr	r2, [r6, #16]
 8009d9e:	f106 010c 	add.w	r1, r6, #12
 8009da2:	3202      	adds	r2, #2
 8009da4:	0092      	lsls	r2, r2, #2
 8009da6:	300c      	adds	r0, #12
 8009da8:	f7ff fa7a 	bl	80092a0 <memcpy>
 8009dac:	2201      	movs	r2, #1
 8009dae:	4639      	mov	r1, r7
 8009db0:	4628      	mov	r0, r5
 8009db2:	f000 ffb9 	bl	800ad28 <__lshift>
 8009db6:	46b0      	mov	r8, r6
 8009db8:	4606      	mov	r6, r0
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	9a03      	ldr	r2, [sp, #12]
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	9308      	str	r3, [sp, #32]
 8009dc2:	9b06      	ldr	r3, [sp, #24]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc8:	9b04      	ldr	r3, [sp, #16]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd0:	9b08      	ldr	r3, [sp, #32]
 8009dd2:	4621      	mov	r1, r4
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	4650      	mov	r0, sl
 8009dd8:	9304      	str	r3, [sp, #16]
 8009dda:	f7ff fa75 	bl	80092c8 <quorem>
 8009dde:	4641      	mov	r1, r8
 8009de0:	9006      	str	r0, [sp, #24]
 8009de2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009de6:	4650      	mov	r0, sl
 8009de8:	f001 f80a 	bl	800ae00 <__mcmp>
 8009dec:	4632      	mov	r2, r6
 8009dee:	9009      	str	r0, [sp, #36]	; 0x24
 8009df0:	4621      	mov	r1, r4
 8009df2:	4628      	mov	r0, r5
 8009df4:	f001 f820 	bl	800ae38 <__mdiff>
 8009df8:	68c2      	ldr	r2, [r0, #12]
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	bb02      	cbnz	r2, 8009e40 <_dtoa_r+0xa60>
 8009dfe:	4601      	mov	r1, r0
 8009e00:	4650      	mov	r0, sl
 8009e02:	f000 fffd 	bl	800ae00 <__mcmp>
 8009e06:	4602      	mov	r2, r0
 8009e08:	4639      	mov	r1, r7
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	920c      	str	r2, [sp, #48]	; 0x30
 8009e0e:	f000 fd73 	bl	800a8f8 <_Bfree>
 8009e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e16:	9f08      	ldr	r7, [sp, #32]
 8009e18:	ea43 0102 	orr.w	r1, r3, r2
 8009e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e1e:	4319      	orrs	r1, r3
 8009e20:	d110      	bne.n	8009e44 <_dtoa_r+0xa64>
 8009e22:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e26:	d029      	beq.n	8009e7c <_dtoa_r+0xa9c>
 8009e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	dd02      	ble.n	8009e34 <_dtoa_r+0xa54>
 8009e2e:	9b06      	ldr	r3, [sp, #24]
 8009e30:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	f883 9000 	strb.w	r9, [r3]
 8009e3a:	e777      	b.n	8009d2c <_dtoa_r+0x94c>
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	e7ba      	b.n	8009db6 <_dtoa_r+0x9d6>
 8009e40:	2201      	movs	r2, #1
 8009e42:	e7e1      	b.n	8009e08 <_dtoa_r+0xa28>
 8009e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	db04      	blt.n	8009e54 <_dtoa_r+0xa74>
 8009e4a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009e50:	430b      	orrs	r3, r1
 8009e52:	d120      	bne.n	8009e96 <_dtoa_r+0xab6>
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	dded      	ble.n	8009e34 <_dtoa_r+0xa54>
 8009e58:	4651      	mov	r1, sl
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f000 ff63 	bl	800ad28 <__lshift>
 8009e62:	4621      	mov	r1, r4
 8009e64:	4682      	mov	sl, r0
 8009e66:	f000 ffcb 	bl	800ae00 <__mcmp>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	dc03      	bgt.n	8009e76 <_dtoa_r+0xa96>
 8009e6e:	d1e1      	bne.n	8009e34 <_dtoa_r+0xa54>
 8009e70:	f019 0f01 	tst.w	r9, #1
 8009e74:	d0de      	beq.n	8009e34 <_dtoa_r+0xa54>
 8009e76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e7a:	d1d8      	bne.n	8009e2e <_dtoa_r+0xa4e>
 8009e7c:	2339      	movs	r3, #57	; 0x39
 8009e7e:	9a04      	ldr	r2, [sp, #16]
 8009e80:	7013      	strb	r3, [r2, #0]
 8009e82:	463b      	mov	r3, r7
 8009e84:	461f      	mov	r7, r3
 8009e86:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	2a39      	cmp	r2, #57	; 0x39
 8009e8e:	d06b      	beq.n	8009f68 <_dtoa_r+0xb88>
 8009e90:	3201      	adds	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	e74a      	b.n	8009d2c <_dtoa_r+0x94c>
 8009e96:	2a00      	cmp	r2, #0
 8009e98:	dd07      	ble.n	8009eaa <_dtoa_r+0xaca>
 8009e9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e9e:	d0ed      	beq.n	8009e7c <_dtoa_r+0xa9c>
 8009ea0:	9a04      	ldr	r2, [sp, #16]
 8009ea2:	f109 0301 	add.w	r3, r9, #1
 8009ea6:	7013      	strb	r3, [r2, #0]
 8009ea8:	e740      	b.n	8009d2c <_dtoa_r+0x94c>
 8009eaa:	9b08      	ldr	r3, [sp, #32]
 8009eac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eae:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d042      	beq.n	8009f3c <_dtoa_r+0xb5c>
 8009eb6:	4651      	mov	r1, sl
 8009eb8:	2300      	movs	r3, #0
 8009eba:	220a      	movs	r2, #10
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	f000 fd3d 	bl	800a93c <__multadd>
 8009ec2:	45b0      	cmp	r8, r6
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	f04f 0300 	mov.w	r3, #0
 8009eca:	f04f 020a 	mov.w	r2, #10
 8009ece:	4641      	mov	r1, r8
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	d107      	bne.n	8009ee4 <_dtoa_r+0xb04>
 8009ed4:	f000 fd32 	bl	800a93c <__multadd>
 8009ed8:	4680      	mov	r8, r0
 8009eda:	4606      	mov	r6, r0
 8009edc:	9b08      	ldr	r3, [sp, #32]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	9308      	str	r3, [sp, #32]
 8009ee2:	e775      	b.n	8009dd0 <_dtoa_r+0x9f0>
 8009ee4:	f000 fd2a 	bl	800a93c <__multadd>
 8009ee8:	4631      	mov	r1, r6
 8009eea:	4680      	mov	r8, r0
 8009eec:	2300      	movs	r3, #0
 8009eee:	220a      	movs	r2, #10
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f000 fd23 	bl	800a93c <__multadd>
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	e7f0      	b.n	8009edc <_dtoa_r+0xafc>
 8009efa:	9b08      	ldr	r3, [sp, #32]
 8009efc:	9306      	str	r3, [sp, #24]
 8009efe:	9f03      	ldr	r7, [sp, #12]
 8009f00:	4621      	mov	r1, r4
 8009f02:	4650      	mov	r0, sl
 8009f04:	f7ff f9e0 	bl	80092c8 <quorem>
 8009f08:	9b03      	ldr	r3, [sp, #12]
 8009f0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f0e:	f807 9b01 	strb.w	r9, [r7], #1
 8009f12:	1afa      	subs	r2, r7, r3
 8009f14:	9b06      	ldr	r3, [sp, #24]
 8009f16:	4293      	cmp	r3, r2
 8009f18:	dd07      	ble.n	8009f2a <_dtoa_r+0xb4a>
 8009f1a:	4651      	mov	r1, sl
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	220a      	movs	r2, #10
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fd0b 	bl	800a93c <__multadd>
 8009f26:	4682      	mov	sl, r0
 8009f28:	e7ea      	b.n	8009f00 <_dtoa_r+0xb20>
 8009f2a:	9b06      	ldr	r3, [sp, #24]
 8009f2c:	f04f 0800 	mov.w	r8, #0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	bfcc      	ite	gt
 8009f34:	461f      	movgt	r7, r3
 8009f36:	2701      	movle	r7, #1
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	441f      	add	r7, r3
 8009f3c:	4651      	mov	r1, sl
 8009f3e:	2201      	movs	r2, #1
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 fef1 	bl	800ad28 <__lshift>
 8009f46:	4621      	mov	r1, r4
 8009f48:	4682      	mov	sl, r0
 8009f4a:	f000 ff59 	bl	800ae00 <__mcmp>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	dc97      	bgt.n	8009e82 <_dtoa_r+0xaa2>
 8009f52:	d102      	bne.n	8009f5a <_dtoa_r+0xb7a>
 8009f54:	f019 0f01 	tst.w	r9, #1
 8009f58:	d193      	bne.n	8009e82 <_dtoa_r+0xaa2>
 8009f5a:	463b      	mov	r3, r7
 8009f5c:	461f      	mov	r7, r3
 8009f5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f62:	2a30      	cmp	r2, #48	; 0x30
 8009f64:	d0fa      	beq.n	8009f5c <_dtoa_r+0xb7c>
 8009f66:	e6e1      	b.n	8009d2c <_dtoa_r+0x94c>
 8009f68:	9a03      	ldr	r2, [sp, #12]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d18a      	bne.n	8009e84 <_dtoa_r+0xaa4>
 8009f6e:	2331      	movs	r3, #49	; 0x31
 8009f70:	f10b 0b01 	add.w	fp, fp, #1
 8009f74:	e797      	b.n	8009ea6 <_dtoa_r+0xac6>
 8009f76:	4b0a      	ldr	r3, [pc, #40]	; (8009fa0 <_dtoa_r+0xbc0>)
 8009f78:	f7ff ba9f 	b.w	80094ba <_dtoa_r+0xda>
 8009f7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f47f aa77 	bne.w	8009472 <_dtoa_r+0x92>
 8009f84:	4b07      	ldr	r3, [pc, #28]	; (8009fa4 <_dtoa_r+0xbc4>)
 8009f86:	f7ff ba98 	b.w	80094ba <_dtoa_r+0xda>
 8009f8a:	9b06      	ldr	r3, [sp, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	dcb6      	bgt.n	8009efe <_dtoa_r+0xb1e>
 8009f90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	f73f aeb5 	bgt.w	8009d02 <_dtoa_r+0x922>
 8009f98:	e7b1      	b.n	8009efe <_dtoa_r+0xb1e>
 8009f9a:	bf00      	nop
 8009f9c:	0800bd88 	.word	0x0800bd88
 8009fa0:	0800bce0 	.word	0x0800bce0
 8009fa4:	0800bd0c 	.word	0x0800bd0c

08009fa8 <_free_r>:
 8009fa8:	b538      	push	{r3, r4, r5, lr}
 8009faa:	4605      	mov	r5, r0
 8009fac:	2900      	cmp	r1, #0
 8009fae:	d040      	beq.n	800a032 <_free_r+0x8a>
 8009fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb4:	1f0c      	subs	r4, r1, #4
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	bfb8      	it	lt
 8009fba:	18e4      	addlt	r4, r4, r3
 8009fbc:	f000 fc50 	bl	800a860 <__malloc_lock>
 8009fc0:	4a1c      	ldr	r2, [pc, #112]	; (800a034 <_free_r+0x8c>)
 8009fc2:	6813      	ldr	r3, [r2, #0]
 8009fc4:	b933      	cbnz	r3, 8009fd4 <_free_r+0x2c>
 8009fc6:	6063      	str	r3, [r4, #4]
 8009fc8:	6014      	str	r4, [r2, #0]
 8009fca:	4628      	mov	r0, r5
 8009fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd0:	f000 bc4c 	b.w	800a86c <__malloc_unlock>
 8009fd4:	42a3      	cmp	r3, r4
 8009fd6:	d908      	bls.n	8009fea <_free_r+0x42>
 8009fd8:	6820      	ldr	r0, [r4, #0]
 8009fda:	1821      	adds	r1, r4, r0
 8009fdc:	428b      	cmp	r3, r1
 8009fde:	bf01      	itttt	eq
 8009fe0:	6819      	ldreq	r1, [r3, #0]
 8009fe2:	685b      	ldreq	r3, [r3, #4]
 8009fe4:	1809      	addeq	r1, r1, r0
 8009fe6:	6021      	streq	r1, [r4, #0]
 8009fe8:	e7ed      	b.n	8009fc6 <_free_r+0x1e>
 8009fea:	461a      	mov	r2, r3
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	b10b      	cbz	r3, 8009ff4 <_free_r+0x4c>
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	d9fa      	bls.n	8009fea <_free_r+0x42>
 8009ff4:	6811      	ldr	r1, [r2, #0]
 8009ff6:	1850      	adds	r0, r2, r1
 8009ff8:	42a0      	cmp	r0, r4
 8009ffa:	d10b      	bne.n	800a014 <_free_r+0x6c>
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	4401      	add	r1, r0
 800a000:	1850      	adds	r0, r2, r1
 800a002:	4283      	cmp	r3, r0
 800a004:	6011      	str	r1, [r2, #0]
 800a006:	d1e0      	bne.n	8009fca <_free_r+0x22>
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	4408      	add	r0, r1
 800a00e:	6010      	str	r0, [r2, #0]
 800a010:	6053      	str	r3, [r2, #4]
 800a012:	e7da      	b.n	8009fca <_free_r+0x22>
 800a014:	d902      	bls.n	800a01c <_free_r+0x74>
 800a016:	230c      	movs	r3, #12
 800a018:	602b      	str	r3, [r5, #0]
 800a01a:	e7d6      	b.n	8009fca <_free_r+0x22>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	1821      	adds	r1, r4, r0
 800a020:	428b      	cmp	r3, r1
 800a022:	bf01      	itttt	eq
 800a024:	6819      	ldreq	r1, [r3, #0]
 800a026:	685b      	ldreq	r3, [r3, #4]
 800a028:	1809      	addeq	r1, r1, r0
 800a02a:	6021      	streq	r1, [r4, #0]
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	6054      	str	r4, [r2, #4]
 800a030:	e7cb      	b.n	8009fca <_free_r+0x22>
 800a032:	bd38      	pop	{r3, r4, r5, pc}
 800a034:	200008e0 	.word	0x200008e0

0800a038 <rshift>:
 800a038:	6903      	ldr	r3, [r0, #16]
 800a03a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a03e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a042:	f100 0414 	add.w	r4, r0, #20
 800a046:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a04a:	dd46      	ble.n	800a0da <rshift+0xa2>
 800a04c:	f011 011f 	ands.w	r1, r1, #31
 800a050:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a054:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a058:	d10c      	bne.n	800a074 <rshift+0x3c>
 800a05a:	4629      	mov	r1, r5
 800a05c:	f100 0710 	add.w	r7, r0, #16
 800a060:	42b1      	cmp	r1, r6
 800a062:	d335      	bcc.n	800a0d0 <rshift+0x98>
 800a064:	1a9b      	subs	r3, r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	1eea      	subs	r2, r5, #3
 800a06a:	4296      	cmp	r6, r2
 800a06c:	bf38      	it	cc
 800a06e:	2300      	movcc	r3, #0
 800a070:	4423      	add	r3, r4
 800a072:	e015      	b.n	800a0a0 <rshift+0x68>
 800a074:	46a1      	mov	r9, r4
 800a076:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a07a:	f1c1 0820 	rsb	r8, r1, #32
 800a07e:	40cf      	lsrs	r7, r1
 800a080:	f105 0e04 	add.w	lr, r5, #4
 800a084:	4576      	cmp	r6, lr
 800a086:	46f4      	mov	ip, lr
 800a088:	d816      	bhi.n	800a0b8 <rshift+0x80>
 800a08a:	1a9a      	subs	r2, r3, r2
 800a08c:	0092      	lsls	r2, r2, #2
 800a08e:	3a04      	subs	r2, #4
 800a090:	3501      	adds	r5, #1
 800a092:	42ae      	cmp	r6, r5
 800a094:	bf38      	it	cc
 800a096:	2200      	movcc	r2, #0
 800a098:	18a3      	adds	r3, r4, r2
 800a09a:	50a7      	str	r7, [r4, r2]
 800a09c:	b107      	cbz	r7, 800a0a0 <rshift+0x68>
 800a09e:	3304      	adds	r3, #4
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	eba3 0204 	sub.w	r2, r3, r4
 800a0a6:	bf08      	it	eq
 800a0a8:	2300      	moveq	r3, #0
 800a0aa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0ae:	6102      	str	r2, [r0, #16]
 800a0b0:	bf08      	it	eq
 800a0b2:	6143      	streq	r3, [r0, #20]
 800a0b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0b8:	f8dc c000 	ldr.w	ip, [ip]
 800a0bc:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0c0:	ea4c 0707 	orr.w	r7, ip, r7
 800a0c4:	f849 7b04 	str.w	r7, [r9], #4
 800a0c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0cc:	40cf      	lsrs	r7, r1
 800a0ce:	e7d9      	b.n	800a084 <rshift+0x4c>
 800a0d0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0d4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0d8:	e7c2      	b.n	800a060 <rshift+0x28>
 800a0da:	4623      	mov	r3, r4
 800a0dc:	e7e0      	b.n	800a0a0 <rshift+0x68>

0800a0de <__hexdig_fun>:
 800a0de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a0e2:	2b09      	cmp	r3, #9
 800a0e4:	d802      	bhi.n	800a0ec <__hexdig_fun+0xe>
 800a0e6:	3820      	subs	r0, #32
 800a0e8:	b2c0      	uxtb	r0, r0
 800a0ea:	4770      	bx	lr
 800a0ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a0f0:	2b05      	cmp	r3, #5
 800a0f2:	d801      	bhi.n	800a0f8 <__hexdig_fun+0x1a>
 800a0f4:	3847      	subs	r0, #71	; 0x47
 800a0f6:	e7f7      	b.n	800a0e8 <__hexdig_fun+0xa>
 800a0f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a0fc:	2b05      	cmp	r3, #5
 800a0fe:	d801      	bhi.n	800a104 <__hexdig_fun+0x26>
 800a100:	3827      	subs	r0, #39	; 0x27
 800a102:	e7f1      	b.n	800a0e8 <__hexdig_fun+0xa>
 800a104:	2000      	movs	r0, #0
 800a106:	4770      	bx	lr

0800a108 <__gethex>:
 800a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	4681      	mov	r9, r0
 800a10e:	468a      	mov	sl, r1
 800a110:	4617      	mov	r7, r2
 800a112:	680a      	ldr	r2, [r1, #0]
 800a114:	b085      	sub	sp, #20
 800a116:	f102 0b02 	add.w	fp, r2, #2
 800a11a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a11e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a122:	9302      	str	r3, [sp, #8]
 800a124:	32fe      	adds	r2, #254	; 0xfe
 800a126:	eb02 030b 	add.w	r3, r2, fp
 800a12a:	46d8      	mov	r8, fp
 800a12c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	2830      	cmp	r0, #48	; 0x30
 800a134:	d0f7      	beq.n	800a126 <__gethex+0x1e>
 800a136:	f7ff ffd2 	bl	800a0de <__hexdig_fun>
 800a13a:	4604      	mov	r4, r0
 800a13c:	2800      	cmp	r0, #0
 800a13e:	d138      	bne.n	800a1b2 <__gethex+0xaa>
 800a140:	2201      	movs	r2, #1
 800a142:	4640      	mov	r0, r8
 800a144:	49a7      	ldr	r1, [pc, #668]	; (800a3e4 <__gethex+0x2dc>)
 800a146:	f7ff f815 	bl	8009174 <strncmp>
 800a14a:	4606      	mov	r6, r0
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d169      	bne.n	800a224 <__gethex+0x11c>
 800a150:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a154:	465d      	mov	r5, fp
 800a156:	f7ff ffc2 	bl	800a0de <__hexdig_fun>
 800a15a:	2800      	cmp	r0, #0
 800a15c:	d064      	beq.n	800a228 <__gethex+0x120>
 800a15e:	465a      	mov	r2, fp
 800a160:	7810      	ldrb	r0, [r2, #0]
 800a162:	4690      	mov	r8, r2
 800a164:	2830      	cmp	r0, #48	; 0x30
 800a166:	f102 0201 	add.w	r2, r2, #1
 800a16a:	d0f9      	beq.n	800a160 <__gethex+0x58>
 800a16c:	f7ff ffb7 	bl	800a0de <__hexdig_fun>
 800a170:	2301      	movs	r3, #1
 800a172:	fab0 f480 	clz	r4, r0
 800a176:	465e      	mov	r6, fp
 800a178:	0964      	lsrs	r4, r4, #5
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	4642      	mov	r2, r8
 800a17e:	4615      	mov	r5, r2
 800a180:	7828      	ldrb	r0, [r5, #0]
 800a182:	3201      	adds	r2, #1
 800a184:	f7ff ffab 	bl	800a0de <__hexdig_fun>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d1f8      	bne.n	800a17e <__gethex+0x76>
 800a18c:	2201      	movs	r2, #1
 800a18e:	4628      	mov	r0, r5
 800a190:	4994      	ldr	r1, [pc, #592]	; (800a3e4 <__gethex+0x2dc>)
 800a192:	f7fe ffef 	bl	8009174 <strncmp>
 800a196:	b978      	cbnz	r0, 800a1b8 <__gethex+0xb0>
 800a198:	b946      	cbnz	r6, 800a1ac <__gethex+0xa4>
 800a19a:	1c6e      	adds	r6, r5, #1
 800a19c:	4632      	mov	r2, r6
 800a19e:	4615      	mov	r5, r2
 800a1a0:	7828      	ldrb	r0, [r5, #0]
 800a1a2:	3201      	adds	r2, #1
 800a1a4:	f7ff ff9b 	bl	800a0de <__hexdig_fun>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d1f8      	bne.n	800a19e <__gethex+0x96>
 800a1ac:	1b73      	subs	r3, r6, r5
 800a1ae:	009e      	lsls	r6, r3, #2
 800a1b0:	e004      	b.n	800a1bc <__gethex+0xb4>
 800a1b2:	2400      	movs	r4, #0
 800a1b4:	4626      	mov	r6, r4
 800a1b6:	e7e1      	b.n	800a17c <__gethex+0x74>
 800a1b8:	2e00      	cmp	r6, #0
 800a1ba:	d1f7      	bne.n	800a1ac <__gethex+0xa4>
 800a1bc:	782b      	ldrb	r3, [r5, #0]
 800a1be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1c2:	2b50      	cmp	r3, #80	; 0x50
 800a1c4:	d13d      	bne.n	800a242 <__gethex+0x13a>
 800a1c6:	786b      	ldrb	r3, [r5, #1]
 800a1c8:	2b2b      	cmp	r3, #43	; 0x2b
 800a1ca:	d02f      	beq.n	800a22c <__gethex+0x124>
 800a1cc:	2b2d      	cmp	r3, #45	; 0x2d
 800a1ce:	d031      	beq.n	800a234 <__gethex+0x12c>
 800a1d0:	f04f 0b00 	mov.w	fp, #0
 800a1d4:	1c69      	adds	r1, r5, #1
 800a1d6:	7808      	ldrb	r0, [r1, #0]
 800a1d8:	f7ff ff81 	bl	800a0de <__hexdig_fun>
 800a1dc:	1e42      	subs	r2, r0, #1
 800a1de:	b2d2      	uxtb	r2, r2
 800a1e0:	2a18      	cmp	r2, #24
 800a1e2:	d82e      	bhi.n	800a242 <__gethex+0x13a>
 800a1e4:	f1a0 0210 	sub.w	r2, r0, #16
 800a1e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1ec:	f7ff ff77 	bl	800a0de <__hexdig_fun>
 800a1f0:	f100 3cff 	add.w	ip, r0, #4294967295
 800a1f4:	fa5f fc8c 	uxtb.w	ip, ip
 800a1f8:	f1bc 0f18 	cmp.w	ip, #24
 800a1fc:	d91d      	bls.n	800a23a <__gethex+0x132>
 800a1fe:	f1bb 0f00 	cmp.w	fp, #0
 800a202:	d000      	beq.n	800a206 <__gethex+0xfe>
 800a204:	4252      	negs	r2, r2
 800a206:	4416      	add	r6, r2
 800a208:	f8ca 1000 	str.w	r1, [sl]
 800a20c:	b1dc      	cbz	r4, 800a246 <__gethex+0x13e>
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	bf14      	ite	ne
 800a214:	f04f 0800 	movne.w	r8, #0
 800a218:	f04f 0806 	moveq.w	r8, #6
 800a21c:	4640      	mov	r0, r8
 800a21e:	b005      	add	sp, #20
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	4645      	mov	r5, r8
 800a226:	4626      	mov	r6, r4
 800a228:	2401      	movs	r4, #1
 800a22a:	e7c7      	b.n	800a1bc <__gethex+0xb4>
 800a22c:	f04f 0b00 	mov.w	fp, #0
 800a230:	1ca9      	adds	r1, r5, #2
 800a232:	e7d0      	b.n	800a1d6 <__gethex+0xce>
 800a234:	f04f 0b01 	mov.w	fp, #1
 800a238:	e7fa      	b.n	800a230 <__gethex+0x128>
 800a23a:	230a      	movs	r3, #10
 800a23c:	fb03 0002 	mla	r0, r3, r2, r0
 800a240:	e7d0      	b.n	800a1e4 <__gethex+0xdc>
 800a242:	4629      	mov	r1, r5
 800a244:	e7e0      	b.n	800a208 <__gethex+0x100>
 800a246:	4621      	mov	r1, r4
 800a248:	eba5 0308 	sub.w	r3, r5, r8
 800a24c:	3b01      	subs	r3, #1
 800a24e:	2b07      	cmp	r3, #7
 800a250:	dc0a      	bgt.n	800a268 <__gethex+0x160>
 800a252:	4648      	mov	r0, r9
 800a254:	f000 fb10 	bl	800a878 <_Balloc>
 800a258:	4604      	mov	r4, r0
 800a25a:	b940      	cbnz	r0, 800a26e <__gethex+0x166>
 800a25c:	4602      	mov	r2, r0
 800a25e:	21e4      	movs	r1, #228	; 0xe4
 800a260:	4b61      	ldr	r3, [pc, #388]	; (800a3e8 <__gethex+0x2e0>)
 800a262:	4862      	ldr	r0, [pc, #392]	; (800a3ec <__gethex+0x2e4>)
 800a264:	f001 fa62 	bl	800b72c <__assert_func>
 800a268:	3101      	adds	r1, #1
 800a26a:	105b      	asrs	r3, r3, #1
 800a26c:	e7ef      	b.n	800a24e <__gethex+0x146>
 800a26e:	2300      	movs	r3, #0
 800a270:	469b      	mov	fp, r3
 800a272:	f100 0a14 	add.w	sl, r0, #20
 800a276:	f8cd a004 	str.w	sl, [sp, #4]
 800a27a:	45a8      	cmp	r8, r5
 800a27c:	d344      	bcc.n	800a308 <__gethex+0x200>
 800a27e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a282:	4658      	mov	r0, fp
 800a284:	f848 bb04 	str.w	fp, [r8], #4
 800a288:	eba8 080a 	sub.w	r8, r8, sl
 800a28c:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a290:	6122      	str	r2, [r4, #16]
 800a292:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a296:	f000 fbe1 	bl	800aa5c <__hi0bits>
 800a29a:	683d      	ldr	r5, [r7, #0]
 800a29c:	eba8 0800 	sub.w	r8, r8, r0
 800a2a0:	45a8      	cmp	r8, r5
 800a2a2:	dd59      	ble.n	800a358 <__gethex+0x250>
 800a2a4:	eba8 0805 	sub.w	r8, r8, r5
 800a2a8:	4641      	mov	r1, r8
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f000 ff5f 	bl	800b16e <__any_on>
 800a2b0:	4683      	mov	fp, r0
 800a2b2:	b1b8      	cbz	r0, 800a2e4 <__gethex+0x1dc>
 800a2b4:	f04f 0b01 	mov.w	fp, #1
 800a2b8:	f108 33ff 	add.w	r3, r8, #4294967295
 800a2bc:	1159      	asrs	r1, r3, #5
 800a2be:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a2c2:	f003 021f 	and.w	r2, r3, #31
 800a2c6:	fa0b f202 	lsl.w	r2, fp, r2
 800a2ca:	420a      	tst	r2, r1
 800a2cc:	d00a      	beq.n	800a2e4 <__gethex+0x1dc>
 800a2ce:	455b      	cmp	r3, fp
 800a2d0:	dd06      	ble.n	800a2e0 <__gethex+0x1d8>
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f1a8 0102 	sub.w	r1, r8, #2
 800a2d8:	f000 ff49 	bl	800b16e <__any_on>
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d138      	bne.n	800a352 <__gethex+0x24a>
 800a2e0:	f04f 0b02 	mov.w	fp, #2
 800a2e4:	4641      	mov	r1, r8
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f7ff fea6 	bl	800a038 <rshift>
 800a2ec:	4446      	add	r6, r8
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	42b3      	cmp	r3, r6
 800a2f2:	da41      	bge.n	800a378 <__gethex+0x270>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4648      	mov	r0, r9
 800a2f8:	f000 fafe 	bl	800a8f8 <_Bfree>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a300:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	e789      	b.n	800a21c <__gethex+0x114>
 800a308:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a30c:	2a2e      	cmp	r2, #46	; 0x2e
 800a30e:	d014      	beq.n	800a33a <__gethex+0x232>
 800a310:	2b20      	cmp	r3, #32
 800a312:	d106      	bne.n	800a322 <__gethex+0x21a>
 800a314:	9b01      	ldr	r3, [sp, #4]
 800a316:	f843 bb04 	str.w	fp, [r3], #4
 800a31a:	f04f 0b00 	mov.w	fp, #0
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	465b      	mov	r3, fp
 800a322:	7828      	ldrb	r0, [r5, #0]
 800a324:	9303      	str	r3, [sp, #12]
 800a326:	f7ff feda 	bl	800a0de <__hexdig_fun>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	f000 000f 	and.w	r0, r0, #15
 800a330:	4098      	lsls	r0, r3
 800a332:	ea4b 0b00 	orr.w	fp, fp, r0
 800a336:	3304      	adds	r3, #4
 800a338:	e79f      	b.n	800a27a <__gethex+0x172>
 800a33a:	45a8      	cmp	r8, r5
 800a33c:	d8e8      	bhi.n	800a310 <__gethex+0x208>
 800a33e:	2201      	movs	r2, #1
 800a340:	4628      	mov	r0, r5
 800a342:	4928      	ldr	r1, [pc, #160]	; (800a3e4 <__gethex+0x2dc>)
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	f7fe ff15 	bl	8009174 <strncmp>
 800a34a:	9b03      	ldr	r3, [sp, #12]
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d1df      	bne.n	800a310 <__gethex+0x208>
 800a350:	e793      	b.n	800a27a <__gethex+0x172>
 800a352:	f04f 0b03 	mov.w	fp, #3
 800a356:	e7c5      	b.n	800a2e4 <__gethex+0x1dc>
 800a358:	da0b      	bge.n	800a372 <__gethex+0x26a>
 800a35a:	eba5 0808 	sub.w	r8, r5, r8
 800a35e:	4621      	mov	r1, r4
 800a360:	4642      	mov	r2, r8
 800a362:	4648      	mov	r0, r9
 800a364:	f000 fce0 	bl	800ad28 <__lshift>
 800a368:	4604      	mov	r4, r0
 800a36a:	eba6 0608 	sub.w	r6, r6, r8
 800a36e:	f100 0a14 	add.w	sl, r0, #20
 800a372:	f04f 0b00 	mov.w	fp, #0
 800a376:	e7ba      	b.n	800a2ee <__gethex+0x1e6>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	42b3      	cmp	r3, r6
 800a37c:	dd74      	ble.n	800a468 <__gethex+0x360>
 800a37e:	1b9e      	subs	r6, r3, r6
 800a380:	42b5      	cmp	r5, r6
 800a382:	dc35      	bgt.n	800a3f0 <__gethex+0x2e8>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d023      	beq.n	800a3d2 <__gethex+0x2ca>
 800a38a:	2b03      	cmp	r3, #3
 800a38c:	d025      	beq.n	800a3da <__gethex+0x2d2>
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d115      	bne.n	800a3be <__gethex+0x2b6>
 800a392:	42b5      	cmp	r5, r6
 800a394:	d113      	bne.n	800a3be <__gethex+0x2b6>
 800a396:	2d01      	cmp	r5, #1
 800a398:	d10b      	bne.n	800a3b2 <__gethex+0x2aa>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	9a02      	ldr	r2, [sp, #8]
 800a39e:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	6123      	str	r3, [r4, #16]
 800a3a8:	f8ca 3000 	str.w	r3, [sl]
 800a3ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3ae:	601c      	str	r4, [r3, #0]
 800a3b0:	e734      	b.n	800a21c <__gethex+0x114>
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	1e69      	subs	r1, r5, #1
 800a3b6:	f000 feda 	bl	800b16e <__any_on>
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d1ed      	bne.n	800a39a <__gethex+0x292>
 800a3be:	4621      	mov	r1, r4
 800a3c0:	4648      	mov	r0, r9
 800a3c2:	f000 fa99 	bl	800a8f8 <_Bfree>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a3ce:	6013      	str	r3, [r2, #0]
 800a3d0:	e724      	b.n	800a21c <__gethex+0x114>
 800a3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1f2      	bne.n	800a3be <__gethex+0x2b6>
 800a3d8:	e7df      	b.n	800a39a <__gethex+0x292>
 800a3da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1dc      	bne.n	800a39a <__gethex+0x292>
 800a3e0:	e7ed      	b.n	800a3be <__gethex+0x2b6>
 800a3e2:	bf00      	nop
 800a3e4:	0800bc7a 	.word	0x0800bc7a
 800a3e8:	0800bd88 	.word	0x0800bd88
 800a3ec:	0800bd99 	.word	0x0800bd99
 800a3f0:	f106 38ff 	add.w	r8, r6, #4294967295
 800a3f4:	f1bb 0f00 	cmp.w	fp, #0
 800a3f8:	d133      	bne.n	800a462 <__gethex+0x35a>
 800a3fa:	f1b8 0f00 	cmp.w	r8, #0
 800a3fe:	d004      	beq.n	800a40a <__gethex+0x302>
 800a400:	4641      	mov	r1, r8
 800a402:	4620      	mov	r0, r4
 800a404:	f000 feb3 	bl	800b16e <__any_on>
 800a408:	4683      	mov	fp, r0
 800a40a:	2301      	movs	r3, #1
 800a40c:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a410:	f008 081f 	and.w	r8, r8, #31
 800a414:	fa03 f308 	lsl.w	r3, r3, r8
 800a418:	f04f 0802 	mov.w	r8, #2
 800a41c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a420:	4631      	mov	r1, r6
 800a422:	4213      	tst	r3, r2
 800a424:	4620      	mov	r0, r4
 800a426:	bf18      	it	ne
 800a428:	f04b 0b02 	orrne.w	fp, fp, #2
 800a42c:	1bad      	subs	r5, r5, r6
 800a42e:	f7ff fe03 	bl	800a038 <rshift>
 800a432:	687e      	ldr	r6, [r7, #4]
 800a434:	f1bb 0f00 	cmp.w	fp, #0
 800a438:	d04a      	beq.n	800a4d0 <__gethex+0x3c8>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d016      	beq.n	800a46e <__gethex+0x366>
 800a440:	2b03      	cmp	r3, #3
 800a442:	d018      	beq.n	800a476 <__gethex+0x36e>
 800a444:	2b01      	cmp	r3, #1
 800a446:	d109      	bne.n	800a45c <__gethex+0x354>
 800a448:	f01b 0f02 	tst.w	fp, #2
 800a44c:	d006      	beq.n	800a45c <__gethex+0x354>
 800a44e:	f8da 3000 	ldr.w	r3, [sl]
 800a452:	ea4b 0b03 	orr.w	fp, fp, r3
 800a456:	f01b 0f01 	tst.w	fp, #1
 800a45a:	d10f      	bne.n	800a47c <__gethex+0x374>
 800a45c:	f048 0810 	orr.w	r8, r8, #16
 800a460:	e036      	b.n	800a4d0 <__gethex+0x3c8>
 800a462:	f04f 0b01 	mov.w	fp, #1
 800a466:	e7d0      	b.n	800a40a <__gethex+0x302>
 800a468:	f04f 0801 	mov.w	r8, #1
 800a46c:	e7e2      	b.n	800a434 <__gethex+0x32c>
 800a46e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a470:	f1c3 0301 	rsb	r3, r3, #1
 800a474:	930f      	str	r3, [sp, #60]	; 0x3c
 800a476:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d0ef      	beq.n	800a45c <__gethex+0x354>
 800a47c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a480:	f104 0214 	add.w	r2, r4, #20
 800a484:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	2300      	movs	r3, #0
 800a48c:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a490:	4694      	mov	ip, r2
 800a492:	f852 1b04 	ldr.w	r1, [r2], #4
 800a496:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a49a:	d01e      	beq.n	800a4da <__gethex+0x3d2>
 800a49c:	3101      	adds	r1, #1
 800a49e:	f8cc 1000 	str.w	r1, [ip]
 800a4a2:	f1b8 0f02 	cmp.w	r8, #2
 800a4a6:	f104 0214 	add.w	r2, r4, #20
 800a4aa:	d13d      	bne.n	800a528 <__gethex+0x420>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	42ab      	cmp	r3, r5
 800a4b2:	d10b      	bne.n	800a4cc <__gethex+0x3c4>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	1169      	asrs	r1, r5, #5
 800a4b8:	f005 051f 	and.w	r5, r5, #31
 800a4bc:	fa03 f505 	lsl.w	r5, r3, r5
 800a4c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c4:	421d      	tst	r5, r3
 800a4c6:	bf18      	it	ne
 800a4c8:	f04f 0801 	movne.w	r8, #1
 800a4cc:	f048 0820 	orr.w	r8, r8, #32
 800a4d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4d2:	601c      	str	r4, [r3, #0]
 800a4d4:	9b02      	ldr	r3, [sp, #8]
 800a4d6:	601e      	str	r6, [r3, #0]
 800a4d8:	e6a0      	b.n	800a21c <__gethex+0x114>
 800a4da:	4290      	cmp	r0, r2
 800a4dc:	f842 3c04 	str.w	r3, [r2, #-4]
 800a4e0:	d8d6      	bhi.n	800a490 <__gethex+0x388>
 800a4e2:	68a2      	ldr	r2, [r4, #8]
 800a4e4:	4593      	cmp	fp, r2
 800a4e6:	db17      	blt.n	800a518 <__gethex+0x410>
 800a4e8:	6861      	ldr	r1, [r4, #4]
 800a4ea:	4648      	mov	r0, r9
 800a4ec:	3101      	adds	r1, #1
 800a4ee:	f000 f9c3 	bl	800a878 <_Balloc>
 800a4f2:	4682      	mov	sl, r0
 800a4f4:	b918      	cbnz	r0, 800a4fe <__gethex+0x3f6>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	2184      	movs	r1, #132	; 0x84
 800a4fa:	4b1a      	ldr	r3, [pc, #104]	; (800a564 <__gethex+0x45c>)
 800a4fc:	e6b1      	b.n	800a262 <__gethex+0x15a>
 800a4fe:	6922      	ldr	r2, [r4, #16]
 800a500:	f104 010c 	add.w	r1, r4, #12
 800a504:	3202      	adds	r2, #2
 800a506:	0092      	lsls	r2, r2, #2
 800a508:	300c      	adds	r0, #12
 800a50a:	f7fe fec9 	bl	80092a0 <memcpy>
 800a50e:	4621      	mov	r1, r4
 800a510:	4648      	mov	r0, r9
 800a512:	f000 f9f1 	bl	800a8f8 <_Bfree>
 800a516:	4654      	mov	r4, sl
 800a518:	6922      	ldr	r2, [r4, #16]
 800a51a:	1c51      	adds	r1, r2, #1
 800a51c:	6121      	str	r1, [r4, #16]
 800a51e:	2101      	movs	r1, #1
 800a520:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a524:	6151      	str	r1, [r2, #20]
 800a526:	e7bc      	b.n	800a4a2 <__gethex+0x39a>
 800a528:	6921      	ldr	r1, [r4, #16]
 800a52a:	4559      	cmp	r1, fp
 800a52c:	dd0b      	ble.n	800a546 <__gethex+0x43e>
 800a52e:	2101      	movs	r1, #1
 800a530:	4620      	mov	r0, r4
 800a532:	f7ff fd81 	bl	800a038 <rshift>
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	3601      	adds	r6, #1
 800a53a:	42b3      	cmp	r3, r6
 800a53c:	f6ff aeda 	blt.w	800a2f4 <__gethex+0x1ec>
 800a540:	f04f 0801 	mov.w	r8, #1
 800a544:	e7c2      	b.n	800a4cc <__gethex+0x3c4>
 800a546:	f015 051f 	ands.w	r5, r5, #31
 800a54a:	d0f9      	beq.n	800a540 <__gethex+0x438>
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	f1c5 0520 	rsb	r5, r5, #32
 800a552:	441a      	add	r2, r3
 800a554:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a558:	f000 fa80 	bl	800aa5c <__hi0bits>
 800a55c:	42a8      	cmp	r0, r5
 800a55e:	dbe6      	blt.n	800a52e <__gethex+0x426>
 800a560:	e7ee      	b.n	800a540 <__gethex+0x438>
 800a562:	bf00      	nop
 800a564:	0800bd88 	.word	0x0800bd88

0800a568 <L_shift>:
 800a568:	f1c2 0208 	rsb	r2, r2, #8
 800a56c:	0092      	lsls	r2, r2, #2
 800a56e:	b570      	push	{r4, r5, r6, lr}
 800a570:	f1c2 0620 	rsb	r6, r2, #32
 800a574:	6843      	ldr	r3, [r0, #4]
 800a576:	6804      	ldr	r4, [r0, #0]
 800a578:	fa03 f506 	lsl.w	r5, r3, r6
 800a57c:	432c      	orrs	r4, r5
 800a57e:	40d3      	lsrs	r3, r2
 800a580:	6004      	str	r4, [r0, #0]
 800a582:	f840 3f04 	str.w	r3, [r0, #4]!
 800a586:	4288      	cmp	r0, r1
 800a588:	d3f4      	bcc.n	800a574 <L_shift+0xc>
 800a58a:	bd70      	pop	{r4, r5, r6, pc}

0800a58c <__match>:
 800a58c:	b530      	push	{r4, r5, lr}
 800a58e:	6803      	ldr	r3, [r0, #0]
 800a590:	3301      	adds	r3, #1
 800a592:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a596:	b914      	cbnz	r4, 800a59e <__match+0x12>
 800a598:	6003      	str	r3, [r0, #0]
 800a59a:	2001      	movs	r0, #1
 800a59c:	bd30      	pop	{r4, r5, pc}
 800a59e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5a6:	2d19      	cmp	r5, #25
 800a5a8:	bf98      	it	ls
 800a5aa:	3220      	addls	r2, #32
 800a5ac:	42a2      	cmp	r2, r4
 800a5ae:	d0f0      	beq.n	800a592 <__match+0x6>
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	e7f3      	b.n	800a59c <__match+0x10>

0800a5b4 <__hexnan>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	2500      	movs	r5, #0
 800a5ba:	680b      	ldr	r3, [r1, #0]
 800a5bc:	4682      	mov	sl, r0
 800a5be:	115e      	asrs	r6, r3, #5
 800a5c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5c4:	f013 031f 	ands.w	r3, r3, #31
 800a5c8:	bf18      	it	ne
 800a5ca:	3604      	addne	r6, #4
 800a5cc:	1f37      	subs	r7, r6, #4
 800a5ce:	4690      	mov	r8, r2
 800a5d0:	46b9      	mov	r9, r7
 800a5d2:	463c      	mov	r4, r7
 800a5d4:	46ab      	mov	fp, r5
 800a5d6:	b087      	sub	sp, #28
 800a5d8:	6801      	ldr	r1, [r0, #0]
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	f846 5c04 	str.w	r5, [r6, #-4]
 800a5e0:	9502      	str	r5, [sp, #8]
 800a5e2:	784a      	ldrb	r2, [r1, #1]
 800a5e4:	1c4b      	adds	r3, r1, #1
 800a5e6:	9303      	str	r3, [sp, #12]
 800a5e8:	b342      	cbz	r2, 800a63c <__hexnan+0x88>
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	9105      	str	r1, [sp, #20]
 800a5ee:	9204      	str	r2, [sp, #16]
 800a5f0:	f7ff fd75 	bl	800a0de <__hexdig_fun>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d14f      	bne.n	800a698 <__hexnan+0xe4>
 800a5f8:	9a04      	ldr	r2, [sp, #16]
 800a5fa:	9905      	ldr	r1, [sp, #20]
 800a5fc:	2a20      	cmp	r2, #32
 800a5fe:	d818      	bhi.n	800a632 <__hexnan+0x7e>
 800a600:	9b02      	ldr	r3, [sp, #8]
 800a602:	459b      	cmp	fp, r3
 800a604:	dd13      	ble.n	800a62e <__hexnan+0x7a>
 800a606:	454c      	cmp	r4, r9
 800a608:	d206      	bcs.n	800a618 <__hexnan+0x64>
 800a60a:	2d07      	cmp	r5, #7
 800a60c:	dc04      	bgt.n	800a618 <__hexnan+0x64>
 800a60e:	462a      	mov	r2, r5
 800a610:	4649      	mov	r1, r9
 800a612:	4620      	mov	r0, r4
 800a614:	f7ff ffa8 	bl	800a568 <L_shift>
 800a618:	4544      	cmp	r4, r8
 800a61a:	d950      	bls.n	800a6be <__hexnan+0x10a>
 800a61c:	2300      	movs	r3, #0
 800a61e:	f1a4 0904 	sub.w	r9, r4, #4
 800a622:	f844 3c04 	str.w	r3, [r4, #-4]
 800a626:	461d      	mov	r5, r3
 800a628:	464c      	mov	r4, r9
 800a62a:	f8cd b008 	str.w	fp, [sp, #8]
 800a62e:	9903      	ldr	r1, [sp, #12]
 800a630:	e7d7      	b.n	800a5e2 <__hexnan+0x2e>
 800a632:	2a29      	cmp	r2, #41	; 0x29
 800a634:	d155      	bne.n	800a6e2 <__hexnan+0x12e>
 800a636:	3102      	adds	r1, #2
 800a638:	f8ca 1000 	str.w	r1, [sl]
 800a63c:	f1bb 0f00 	cmp.w	fp, #0
 800a640:	d04f      	beq.n	800a6e2 <__hexnan+0x12e>
 800a642:	454c      	cmp	r4, r9
 800a644:	d206      	bcs.n	800a654 <__hexnan+0xa0>
 800a646:	2d07      	cmp	r5, #7
 800a648:	dc04      	bgt.n	800a654 <__hexnan+0xa0>
 800a64a:	462a      	mov	r2, r5
 800a64c:	4649      	mov	r1, r9
 800a64e:	4620      	mov	r0, r4
 800a650:	f7ff ff8a 	bl	800a568 <L_shift>
 800a654:	4544      	cmp	r4, r8
 800a656:	d934      	bls.n	800a6c2 <__hexnan+0x10e>
 800a658:	4623      	mov	r3, r4
 800a65a:	f1a8 0204 	sub.w	r2, r8, #4
 800a65e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a662:	429f      	cmp	r7, r3
 800a664:	f842 1f04 	str.w	r1, [r2, #4]!
 800a668:	d2f9      	bcs.n	800a65e <__hexnan+0xaa>
 800a66a:	1b3b      	subs	r3, r7, r4
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	3304      	adds	r3, #4
 800a672:	3e03      	subs	r6, #3
 800a674:	3401      	adds	r4, #1
 800a676:	42a6      	cmp	r6, r4
 800a678:	bf38      	it	cc
 800a67a:	2304      	movcc	r3, #4
 800a67c:	2200      	movs	r2, #0
 800a67e:	4443      	add	r3, r8
 800a680:	f843 2b04 	str.w	r2, [r3], #4
 800a684:	429f      	cmp	r7, r3
 800a686:	d2fb      	bcs.n	800a680 <__hexnan+0xcc>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	b91b      	cbnz	r3, 800a694 <__hexnan+0xe0>
 800a68c:	4547      	cmp	r7, r8
 800a68e:	d126      	bne.n	800a6de <__hexnan+0x12a>
 800a690:	2301      	movs	r3, #1
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	2005      	movs	r0, #5
 800a696:	e025      	b.n	800a6e4 <__hexnan+0x130>
 800a698:	3501      	adds	r5, #1
 800a69a:	2d08      	cmp	r5, #8
 800a69c:	f10b 0b01 	add.w	fp, fp, #1
 800a6a0:	dd06      	ble.n	800a6b0 <__hexnan+0xfc>
 800a6a2:	4544      	cmp	r4, r8
 800a6a4:	d9c3      	bls.n	800a62e <__hexnan+0x7a>
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	2501      	movs	r5, #1
 800a6aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6ae:	3c04      	subs	r4, #4
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	f000 000f 	and.w	r0, r0, #15
 800a6b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	e7b7      	b.n	800a62e <__hexnan+0x7a>
 800a6be:	2508      	movs	r5, #8
 800a6c0:	e7b5      	b.n	800a62e <__hexnan+0x7a>
 800a6c2:	9b01      	ldr	r3, [sp, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0df      	beq.n	800a688 <__hexnan+0xd4>
 800a6c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6cc:	f1c3 0320 	rsb	r3, r3, #32
 800a6d0:	40da      	lsrs	r2, r3
 800a6d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a6dc:	e7d4      	b.n	800a688 <__hexnan+0xd4>
 800a6de:	3f04      	subs	r7, #4
 800a6e0:	e7d2      	b.n	800a688 <__hexnan+0xd4>
 800a6e2:	2004      	movs	r0, #4
 800a6e4:	b007      	add	sp, #28
 800a6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a6ec <malloc>:
 800a6ec:	4b02      	ldr	r3, [pc, #8]	; (800a6f8 <malloc+0xc>)
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	f000 b823 	b.w	800a73c <_malloc_r>
 800a6f6:	bf00      	nop
 800a6f8:	200001d0 	.word	0x200001d0

0800a6fc <sbrk_aligned>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	4e0e      	ldr	r6, [pc, #56]	; (800a738 <sbrk_aligned+0x3c>)
 800a700:	460c      	mov	r4, r1
 800a702:	6831      	ldr	r1, [r6, #0]
 800a704:	4605      	mov	r5, r0
 800a706:	b911      	cbnz	r1, 800a70e <sbrk_aligned+0x12>
 800a708:	f001 f800 	bl	800b70c <_sbrk_r>
 800a70c:	6030      	str	r0, [r6, #0]
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 fffb 	bl	800b70c <_sbrk_r>
 800a716:	1c43      	adds	r3, r0, #1
 800a718:	d00a      	beq.n	800a730 <sbrk_aligned+0x34>
 800a71a:	1cc4      	adds	r4, r0, #3
 800a71c:	f024 0403 	bic.w	r4, r4, #3
 800a720:	42a0      	cmp	r0, r4
 800a722:	d007      	beq.n	800a734 <sbrk_aligned+0x38>
 800a724:	1a21      	subs	r1, r4, r0
 800a726:	4628      	mov	r0, r5
 800a728:	f000 fff0 	bl	800b70c <_sbrk_r>
 800a72c:	3001      	adds	r0, #1
 800a72e:	d101      	bne.n	800a734 <sbrk_aligned+0x38>
 800a730:	f04f 34ff 	mov.w	r4, #4294967295
 800a734:	4620      	mov	r0, r4
 800a736:	bd70      	pop	{r4, r5, r6, pc}
 800a738:	200008e4 	.word	0x200008e4

0800a73c <_malloc_r>:
 800a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a740:	1ccd      	adds	r5, r1, #3
 800a742:	f025 0503 	bic.w	r5, r5, #3
 800a746:	3508      	adds	r5, #8
 800a748:	2d0c      	cmp	r5, #12
 800a74a:	bf38      	it	cc
 800a74c:	250c      	movcc	r5, #12
 800a74e:	2d00      	cmp	r5, #0
 800a750:	4607      	mov	r7, r0
 800a752:	db01      	blt.n	800a758 <_malloc_r+0x1c>
 800a754:	42a9      	cmp	r1, r5
 800a756:	d905      	bls.n	800a764 <_malloc_r+0x28>
 800a758:	230c      	movs	r3, #12
 800a75a:	2600      	movs	r6, #0
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	4630      	mov	r0, r6
 800a760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a764:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a838 <_malloc_r+0xfc>
 800a768:	f000 f87a 	bl	800a860 <__malloc_lock>
 800a76c:	f8d8 3000 	ldr.w	r3, [r8]
 800a770:	461c      	mov	r4, r3
 800a772:	bb5c      	cbnz	r4, 800a7cc <_malloc_r+0x90>
 800a774:	4629      	mov	r1, r5
 800a776:	4638      	mov	r0, r7
 800a778:	f7ff ffc0 	bl	800a6fc <sbrk_aligned>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	4604      	mov	r4, r0
 800a780:	d155      	bne.n	800a82e <_malloc_r+0xf2>
 800a782:	f8d8 4000 	ldr.w	r4, [r8]
 800a786:	4626      	mov	r6, r4
 800a788:	2e00      	cmp	r6, #0
 800a78a:	d145      	bne.n	800a818 <_malloc_r+0xdc>
 800a78c:	2c00      	cmp	r4, #0
 800a78e:	d048      	beq.n	800a822 <_malloc_r+0xe6>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	4631      	mov	r1, r6
 800a794:	4638      	mov	r0, r7
 800a796:	eb04 0903 	add.w	r9, r4, r3
 800a79a:	f000 ffb7 	bl	800b70c <_sbrk_r>
 800a79e:	4581      	cmp	r9, r0
 800a7a0:	d13f      	bne.n	800a822 <_malloc_r+0xe6>
 800a7a2:	6821      	ldr	r1, [r4, #0]
 800a7a4:	4638      	mov	r0, r7
 800a7a6:	1a6d      	subs	r5, r5, r1
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	f7ff ffa7 	bl	800a6fc <sbrk_aligned>
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d037      	beq.n	800a822 <_malloc_r+0xe6>
 800a7b2:	6823      	ldr	r3, [r4, #0]
 800a7b4:	442b      	add	r3, r5
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d038      	beq.n	800a832 <_malloc_r+0xf6>
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	42a2      	cmp	r2, r4
 800a7c4:	d12b      	bne.n	800a81e <_malloc_r+0xe2>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	605a      	str	r2, [r3, #4]
 800a7ca:	e00f      	b.n	800a7ec <_malloc_r+0xb0>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	1b52      	subs	r2, r2, r5
 800a7d0:	d41f      	bmi.n	800a812 <_malloc_r+0xd6>
 800a7d2:	2a0b      	cmp	r2, #11
 800a7d4:	d917      	bls.n	800a806 <_malloc_r+0xca>
 800a7d6:	1961      	adds	r1, r4, r5
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	6025      	str	r5, [r4, #0]
 800a7dc:	bf18      	it	ne
 800a7de:	6059      	strne	r1, [r3, #4]
 800a7e0:	6863      	ldr	r3, [r4, #4]
 800a7e2:	bf08      	it	eq
 800a7e4:	f8c8 1000 	streq.w	r1, [r8]
 800a7e8:	5162      	str	r2, [r4, r5]
 800a7ea:	604b      	str	r3, [r1, #4]
 800a7ec:	4638      	mov	r0, r7
 800a7ee:	f104 060b 	add.w	r6, r4, #11
 800a7f2:	f000 f83b 	bl	800a86c <__malloc_unlock>
 800a7f6:	f026 0607 	bic.w	r6, r6, #7
 800a7fa:	1d23      	adds	r3, r4, #4
 800a7fc:	1af2      	subs	r2, r6, r3
 800a7fe:	d0ae      	beq.n	800a75e <_malloc_r+0x22>
 800a800:	1b9b      	subs	r3, r3, r6
 800a802:	50a3      	str	r3, [r4, r2]
 800a804:	e7ab      	b.n	800a75e <_malloc_r+0x22>
 800a806:	42a3      	cmp	r3, r4
 800a808:	6862      	ldr	r2, [r4, #4]
 800a80a:	d1dd      	bne.n	800a7c8 <_malloc_r+0x8c>
 800a80c:	f8c8 2000 	str.w	r2, [r8]
 800a810:	e7ec      	b.n	800a7ec <_malloc_r+0xb0>
 800a812:	4623      	mov	r3, r4
 800a814:	6864      	ldr	r4, [r4, #4]
 800a816:	e7ac      	b.n	800a772 <_malloc_r+0x36>
 800a818:	4634      	mov	r4, r6
 800a81a:	6876      	ldr	r6, [r6, #4]
 800a81c:	e7b4      	b.n	800a788 <_malloc_r+0x4c>
 800a81e:	4613      	mov	r3, r2
 800a820:	e7cc      	b.n	800a7bc <_malloc_r+0x80>
 800a822:	230c      	movs	r3, #12
 800a824:	4638      	mov	r0, r7
 800a826:	603b      	str	r3, [r7, #0]
 800a828:	f000 f820 	bl	800a86c <__malloc_unlock>
 800a82c:	e797      	b.n	800a75e <_malloc_r+0x22>
 800a82e:	6025      	str	r5, [r4, #0]
 800a830:	e7dc      	b.n	800a7ec <_malloc_r+0xb0>
 800a832:	605b      	str	r3, [r3, #4]
 800a834:	deff      	udf	#255	; 0xff
 800a836:	bf00      	nop
 800a838:	200008e0 	.word	0x200008e0

0800a83c <__ascii_mbtowc>:
 800a83c:	b082      	sub	sp, #8
 800a83e:	b901      	cbnz	r1, 800a842 <__ascii_mbtowc+0x6>
 800a840:	a901      	add	r1, sp, #4
 800a842:	b142      	cbz	r2, 800a856 <__ascii_mbtowc+0x1a>
 800a844:	b14b      	cbz	r3, 800a85a <__ascii_mbtowc+0x1e>
 800a846:	7813      	ldrb	r3, [r2, #0]
 800a848:	600b      	str	r3, [r1, #0]
 800a84a:	7812      	ldrb	r2, [r2, #0]
 800a84c:	1e10      	subs	r0, r2, #0
 800a84e:	bf18      	it	ne
 800a850:	2001      	movne	r0, #1
 800a852:	b002      	add	sp, #8
 800a854:	4770      	bx	lr
 800a856:	4610      	mov	r0, r2
 800a858:	e7fb      	b.n	800a852 <__ascii_mbtowc+0x16>
 800a85a:	f06f 0001 	mvn.w	r0, #1
 800a85e:	e7f8      	b.n	800a852 <__ascii_mbtowc+0x16>

0800a860 <__malloc_lock>:
 800a860:	4801      	ldr	r0, [pc, #4]	; (800a868 <__malloc_lock+0x8>)
 800a862:	f7fe bd0d 	b.w	8009280 <__retarget_lock_acquire_recursive>
 800a866:	bf00      	nop
 800a868:	200008dc 	.word	0x200008dc

0800a86c <__malloc_unlock>:
 800a86c:	4801      	ldr	r0, [pc, #4]	; (800a874 <__malloc_unlock+0x8>)
 800a86e:	f7fe bd08 	b.w	8009282 <__retarget_lock_release_recursive>
 800a872:	bf00      	nop
 800a874:	200008dc 	.word	0x200008dc

0800a878 <_Balloc>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	69c6      	ldr	r6, [r0, #28]
 800a87c:	4604      	mov	r4, r0
 800a87e:	460d      	mov	r5, r1
 800a880:	b976      	cbnz	r6, 800a8a0 <_Balloc+0x28>
 800a882:	2010      	movs	r0, #16
 800a884:	f7ff ff32 	bl	800a6ec <malloc>
 800a888:	4602      	mov	r2, r0
 800a88a:	61e0      	str	r0, [r4, #28]
 800a88c:	b920      	cbnz	r0, 800a898 <_Balloc+0x20>
 800a88e:	216b      	movs	r1, #107	; 0x6b
 800a890:	4b17      	ldr	r3, [pc, #92]	; (800a8f0 <_Balloc+0x78>)
 800a892:	4818      	ldr	r0, [pc, #96]	; (800a8f4 <_Balloc+0x7c>)
 800a894:	f000 ff4a 	bl	800b72c <__assert_func>
 800a898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a89c:	6006      	str	r6, [r0, #0]
 800a89e:	60c6      	str	r6, [r0, #12]
 800a8a0:	69e6      	ldr	r6, [r4, #28]
 800a8a2:	68f3      	ldr	r3, [r6, #12]
 800a8a4:	b183      	cbz	r3, 800a8c8 <_Balloc+0x50>
 800a8a6:	69e3      	ldr	r3, [r4, #28]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8ae:	b9b8      	cbnz	r0, 800a8e0 <_Balloc+0x68>
 800a8b0:	2101      	movs	r1, #1
 800a8b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a8b6:	1d72      	adds	r2, r6, #5
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	0092      	lsls	r2, r2, #2
 800a8bc:	f000 ff54 	bl	800b768 <_calloc_r>
 800a8c0:	b160      	cbz	r0, 800a8dc <_Balloc+0x64>
 800a8c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8c6:	e00e      	b.n	800a8e6 <_Balloc+0x6e>
 800a8c8:	2221      	movs	r2, #33	; 0x21
 800a8ca:	2104      	movs	r1, #4
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 ff4b 	bl	800b768 <_calloc_r>
 800a8d2:	69e3      	ldr	r3, [r4, #28]
 800a8d4:	60f0      	str	r0, [r6, #12]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d1e4      	bne.n	800a8a6 <_Balloc+0x2e>
 800a8dc:	2000      	movs	r0, #0
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	6802      	ldr	r2, [r0, #0]
 800a8e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8ec:	e7f7      	b.n	800a8de <_Balloc+0x66>
 800a8ee:	bf00      	nop
 800a8f0:	0800bd19 	.word	0x0800bd19
 800a8f4:	0800bdf9 	.word	0x0800bdf9

0800a8f8 <_Bfree>:
 800a8f8:	b570      	push	{r4, r5, r6, lr}
 800a8fa:	69c6      	ldr	r6, [r0, #28]
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	b976      	cbnz	r6, 800a920 <_Bfree+0x28>
 800a902:	2010      	movs	r0, #16
 800a904:	f7ff fef2 	bl	800a6ec <malloc>
 800a908:	4602      	mov	r2, r0
 800a90a:	61e8      	str	r0, [r5, #28]
 800a90c:	b920      	cbnz	r0, 800a918 <_Bfree+0x20>
 800a90e:	218f      	movs	r1, #143	; 0x8f
 800a910:	4b08      	ldr	r3, [pc, #32]	; (800a934 <_Bfree+0x3c>)
 800a912:	4809      	ldr	r0, [pc, #36]	; (800a938 <_Bfree+0x40>)
 800a914:	f000 ff0a 	bl	800b72c <__assert_func>
 800a918:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a91c:	6006      	str	r6, [r0, #0]
 800a91e:	60c6      	str	r6, [r0, #12]
 800a920:	b13c      	cbz	r4, 800a932 <_Bfree+0x3a>
 800a922:	69eb      	ldr	r3, [r5, #28]
 800a924:	6862      	ldr	r2, [r4, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a92c:	6021      	str	r1, [r4, #0]
 800a92e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	0800bd19 	.word	0x0800bd19
 800a938:	0800bdf9 	.word	0x0800bdf9

0800a93c <__multadd>:
 800a93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a940:	4607      	mov	r7, r0
 800a942:	460c      	mov	r4, r1
 800a944:	461e      	mov	r6, r3
 800a946:	2000      	movs	r0, #0
 800a948:	690d      	ldr	r5, [r1, #16]
 800a94a:	f101 0c14 	add.w	ip, r1, #20
 800a94e:	f8dc 3000 	ldr.w	r3, [ip]
 800a952:	3001      	adds	r0, #1
 800a954:	b299      	uxth	r1, r3
 800a956:	fb02 6101 	mla	r1, r2, r1, r6
 800a95a:	0c1e      	lsrs	r6, r3, #16
 800a95c:	0c0b      	lsrs	r3, r1, #16
 800a95e:	fb02 3306 	mla	r3, r2, r6, r3
 800a962:	b289      	uxth	r1, r1
 800a964:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a968:	4285      	cmp	r5, r0
 800a96a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a96e:	f84c 1b04 	str.w	r1, [ip], #4
 800a972:	dcec      	bgt.n	800a94e <__multadd+0x12>
 800a974:	b30e      	cbz	r6, 800a9ba <__multadd+0x7e>
 800a976:	68a3      	ldr	r3, [r4, #8]
 800a978:	42ab      	cmp	r3, r5
 800a97a:	dc19      	bgt.n	800a9b0 <__multadd+0x74>
 800a97c:	6861      	ldr	r1, [r4, #4]
 800a97e:	4638      	mov	r0, r7
 800a980:	3101      	adds	r1, #1
 800a982:	f7ff ff79 	bl	800a878 <_Balloc>
 800a986:	4680      	mov	r8, r0
 800a988:	b928      	cbnz	r0, 800a996 <__multadd+0x5a>
 800a98a:	4602      	mov	r2, r0
 800a98c:	21ba      	movs	r1, #186	; 0xba
 800a98e:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <__multadd+0x84>)
 800a990:	480c      	ldr	r0, [pc, #48]	; (800a9c4 <__multadd+0x88>)
 800a992:	f000 fecb 	bl	800b72c <__assert_func>
 800a996:	6922      	ldr	r2, [r4, #16]
 800a998:	f104 010c 	add.w	r1, r4, #12
 800a99c:	3202      	adds	r2, #2
 800a99e:	0092      	lsls	r2, r2, #2
 800a9a0:	300c      	adds	r0, #12
 800a9a2:	f7fe fc7d 	bl	80092a0 <memcpy>
 800a9a6:	4621      	mov	r1, r4
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f7ff ffa5 	bl	800a8f8 <_Bfree>
 800a9ae:	4644      	mov	r4, r8
 800a9b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	615e      	str	r6, [r3, #20]
 800a9b8:	6125      	str	r5, [r4, #16]
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	0800bd88 	.word	0x0800bd88
 800a9c4:	0800bdf9 	.word	0x0800bdf9

0800a9c8 <__s2b>:
 800a9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	2209      	movs	r2, #9
 800a9d0:	461f      	mov	r7, r3
 800a9d2:	3308      	adds	r3, #8
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9da:	4606      	mov	r6, r0
 800a9dc:	2201      	movs	r2, #1
 800a9de:	2100      	movs	r1, #0
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	db09      	blt.n	800a9f8 <__s2b+0x30>
 800a9e4:	4630      	mov	r0, r6
 800a9e6:	f7ff ff47 	bl	800a878 <_Balloc>
 800a9ea:	b940      	cbnz	r0, 800a9fe <__s2b+0x36>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	21d3      	movs	r1, #211	; 0xd3
 800a9f0:	4b18      	ldr	r3, [pc, #96]	; (800aa54 <__s2b+0x8c>)
 800a9f2:	4819      	ldr	r0, [pc, #100]	; (800aa58 <__s2b+0x90>)
 800a9f4:	f000 fe9a 	bl	800b72c <__assert_func>
 800a9f8:	0052      	lsls	r2, r2, #1
 800a9fa:	3101      	adds	r1, #1
 800a9fc:	e7f0      	b.n	800a9e0 <__s2b+0x18>
 800a9fe:	9b08      	ldr	r3, [sp, #32]
 800aa00:	2d09      	cmp	r5, #9
 800aa02:	6143      	str	r3, [r0, #20]
 800aa04:	f04f 0301 	mov.w	r3, #1
 800aa08:	6103      	str	r3, [r0, #16]
 800aa0a:	dd16      	ble.n	800aa3a <__s2b+0x72>
 800aa0c:	f104 0909 	add.w	r9, r4, #9
 800aa10:	46c8      	mov	r8, r9
 800aa12:	442c      	add	r4, r5
 800aa14:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa18:	4601      	mov	r1, r0
 800aa1a:	220a      	movs	r2, #10
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	3b30      	subs	r3, #48	; 0x30
 800aa20:	f7ff ff8c 	bl	800a93c <__multadd>
 800aa24:	45a0      	cmp	r8, r4
 800aa26:	d1f5      	bne.n	800aa14 <__s2b+0x4c>
 800aa28:	f1a5 0408 	sub.w	r4, r5, #8
 800aa2c:	444c      	add	r4, r9
 800aa2e:	1b2d      	subs	r5, r5, r4
 800aa30:	1963      	adds	r3, r4, r5
 800aa32:	42bb      	cmp	r3, r7
 800aa34:	db04      	blt.n	800aa40 <__s2b+0x78>
 800aa36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa3a:	2509      	movs	r5, #9
 800aa3c:	340a      	adds	r4, #10
 800aa3e:	e7f6      	b.n	800aa2e <__s2b+0x66>
 800aa40:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa44:	4601      	mov	r1, r0
 800aa46:	220a      	movs	r2, #10
 800aa48:	4630      	mov	r0, r6
 800aa4a:	3b30      	subs	r3, #48	; 0x30
 800aa4c:	f7ff ff76 	bl	800a93c <__multadd>
 800aa50:	e7ee      	b.n	800aa30 <__s2b+0x68>
 800aa52:	bf00      	nop
 800aa54:	0800bd88 	.word	0x0800bd88
 800aa58:	0800bdf9 	.word	0x0800bdf9

0800aa5c <__hi0bits>:
 800aa5c:	0c02      	lsrs	r2, r0, #16
 800aa5e:	0412      	lsls	r2, r2, #16
 800aa60:	4603      	mov	r3, r0
 800aa62:	b9ca      	cbnz	r2, 800aa98 <__hi0bits+0x3c>
 800aa64:	0403      	lsls	r3, r0, #16
 800aa66:	2010      	movs	r0, #16
 800aa68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aa6c:	bf04      	itt	eq
 800aa6e:	021b      	lsleq	r3, r3, #8
 800aa70:	3008      	addeq	r0, #8
 800aa72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aa76:	bf04      	itt	eq
 800aa78:	011b      	lsleq	r3, r3, #4
 800aa7a:	3004      	addeq	r0, #4
 800aa7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aa80:	bf04      	itt	eq
 800aa82:	009b      	lsleq	r3, r3, #2
 800aa84:	3002      	addeq	r0, #2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	db05      	blt.n	800aa96 <__hi0bits+0x3a>
 800aa8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aa8e:	f100 0001 	add.w	r0, r0, #1
 800aa92:	bf08      	it	eq
 800aa94:	2020      	moveq	r0, #32
 800aa96:	4770      	bx	lr
 800aa98:	2000      	movs	r0, #0
 800aa9a:	e7e5      	b.n	800aa68 <__hi0bits+0xc>

0800aa9c <__lo0bits>:
 800aa9c:	6803      	ldr	r3, [r0, #0]
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	f013 0007 	ands.w	r0, r3, #7
 800aaa4:	d00b      	beq.n	800aabe <__lo0bits+0x22>
 800aaa6:	07d9      	lsls	r1, r3, #31
 800aaa8:	d421      	bmi.n	800aaee <__lo0bits+0x52>
 800aaaa:	0798      	lsls	r0, r3, #30
 800aaac:	bf49      	itett	mi
 800aaae:	085b      	lsrmi	r3, r3, #1
 800aab0:	089b      	lsrpl	r3, r3, #2
 800aab2:	2001      	movmi	r0, #1
 800aab4:	6013      	strmi	r3, [r2, #0]
 800aab6:	bf5c      	itt	pl
 800aab8:	2002      	movpl	r0, #2
 800aaba:	6013      	strpl	r3, [r2, #0]
 800aabc:	4770      	bx	lr
 800aabe:	b299      	uxth	r1, r3
 800aac0:	b909      	cbnz	r1, 800aac6 <__lo0bits+0x2a>
 800aac2:	2010      	movs	r0, #16
 800aac4:	0c1b      	lsrs	r3, r3, #16
 800aac6:	b2d9      	uxtb	r1, r3
 800aac8:	b909      	cbnz	r1, 800aace <__lo0bits+0x32>
 800aaca:	3008      	adds	r0, #8
 800aacc:	0a1b      	lsrs	r3, r3, #8
 800aace:	0719      	lsls	r1, r3, #28
 800aad0:	bf04      	itt	eq
 800aad2:	091b      	lsreq	r3, r3, #4
 800aad4:	3004      	addeq	r0, #4
 800aad6:	0799      	lsls	r1, r3, #30
 800aad8:	bf04      	itt	eq
 800aada:	089b      	lsreq	r3, r3, #2
 800aadc:	3002      	addeq	r0, #2
 800aade:	07d9      	lsls	r1, r3, #31
 800aae0:	d403      	bmi.n	800aaea <__lo0bits+0x4e>
 800aae2:	085b      	lsrs	r3, r3, #1
 800aae4:	f100 0001 	add.w	r0, r0, #1
 800aae8:	d003      	beq.n	800aaf2 <__lo0bits+0x56>
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	4770      	bx	lr
 800aaee:	2000      	movs	r0, #0
 800aaf0:	4770      	bx	lr
 800aaf2:	2020      	movs	r0, #32
 800aaf4:	4770      	bx	lr
	...

0800aaf8 <__i2b>:
 800aaf8:	b510      	push	{r4, lr}
 800aafa:	460c      	mov	r4, r1
 800aafc:	2101      	movs	r1, #1
 800aafe:	f7ff febb 	bl	800a878 <_Balloc>
 800ab02:	4602      	mov	r2, r0
 800ab04:	b928      	cbnz	r0, 800ab12 <__i2b+0x1a>
 800ab06:	f240 1145 	movw	r1, #325	; 0x145
 800ab0a:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <__i2b+0x24>)
 800ab0c:	4804      	ldr	r0, [pc, #16]	; (800ab20 <__i2b+0x28>)
 800ab0e:	f000 fe0d 	bl	800b72c <__assert_func>
 800ab12:	2301      	movs	r3, #1
 800ab14:	6144      	str	r4, [r0, #20]
 800ab16:	6103      	str	r3, [r0, #16]
 800ab18:	bd10      	pop	{r4, pc}
 800ab1a:	bf00      	nop
 800ab1c:	0800bd88 	.word	0x0800bd88
 800ab20:	0800bdf9 	.word	0x0800bdf9

0800ab24 <__multiply>:
 800ab24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab28:	4691      	mov	r9, r2
 800ab2a:	690a      	ldr	r2, [r1, #16]
 800ab2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab30:	460c      	mov	r4, r1
 800ab32:	429a      	cmp	r2, r3
 800ab34:	bfbe      	ittt	lt
 800ab36:	460b      	movlt	r3, r1
 800ab38:	464c      	movlt	r4, r9
 800ab3a:	4699      	movlt	r9, r3
 800ab3c:	6927      	ldr	r7, [r4, #16]
 800ab3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab42:	68a3      	ldr	r3, [r4, #8]
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	eb07 060a 	add.w	r6, r7, sl
 800ab4a:	42b3      	cmp	r3, r6
 800ab4c:	b085      	sub	sp, #20
 800ab4e:	bfb8      	it	lt
 800ab50:	3101      	addlt	r1, #1
 800ab52:	f7ff fe91 	bl	800a878 <_Balloc>
 800ab56:	b930      	cbnz	r0, 800ab66 <__multiply+0x42>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ab5e:	4b43      	ldr	r3, [pc, #268]	; (800ac6c <__multiply+0x148>)
 800ab60:	4843      	ldr	r0, [pc, #268]	; (800ac70 <__multiply+0x14c>)
 800ab62:	f000 fde3 	bl	800b72c <__assert_func>
 800ab66:	f100 0514 	add.w	r5, r0, #20
 800ab6a:	462b      	mov	r3, r5
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab72:	4543      	cmp	r3, r8
 800ab74:	d321      	bcc.n	800abba <__multiply+0x96>
 800ab76:	f104 0314 	add.w	r3, r4, #20
 800ab7a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab7e:	f109 0314 	add.w	r3, r9, #20
 800ab82:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab86:	9202      	str	r2, [sp, #8]
 800ab88:	1b3a      	subs	r2, r7, r4
 800ab8a:	3a15      	subs	r2, #21
 800ab8c:	f022 0203 	bic.w	r2, r2, #3
 800ab90:	3204      	adds	r2, #4
 800ab92:	f104 0115 	add.w	r1, r4, #21
 800ab96:	428f      	cmp	r7, r1
 800ab98:	bf38      	it	cc
 800ab9a:	2204      	movcc	r2, #4
 800ab9c:	9201      	str	r2, [sp, #4]
 800ab9e:	9a02      	ldr	r2, [sp, #8]
 800aba0:	9303      	str	r3, [sp, #12]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d80c      	bhi.n	800abc0 <__multiply+0x9c>
 800aba6:	2e00      	cmp	r6, #0
 800aba8:	dd03      	ble.n	800abb2 <__multiply+0x8e>
 800abaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d05a      	beq.n	800ac68 <__multiply+0x144>
 800abb2:	6106      	str	r6, [r0, #16]
 800abb4:	b005      	add	sp, #20
 800abb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abba:	f843 2b04 	str.w	r2, [r3], #4
 800abbe:	e7d8      	b.n	800ab72 <__multiply+0x4e>
 800abc0:	f8b3 a000 	ldrh.w	sl, [r3]
 800abc4:	f1ba 0f00 	cmp.w	sl, #0
 800abc8:	d023      	beq.n	800ac12 <__multiply+0xee>
 800abca:	46a9      	mov	r9, r5
 800abcc:	f04f 0c00 	mov.w	ip, #0
 800abd0:	f104 0e14 	add.w	lr, r4, #20
 800abd4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800abd8:	f8d9 1000 	ldr.w	r1, [r9]
 800abdc:	fa1f fb82 	uxth.w	fp, r2
 800abe0:	b289      	uxth	r1, r1
 800abe2:	fb0a 110b 	mla	r1, sl, fp, r1
 800abe6:	4461      	add	r1, ip
 800abe8:	f8d9 c000 	ldr.w	ip, [r9]
 800abec:	0c12      	lsrs	r2, r2, #16
 800abee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800abf2:	fb0a c202 	mla	r2, sl, r2, ip
 800abf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800abfa:	b289      	uxth	r1, r1
 800abfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac00:	4577      	cmp	r7, lr
 800ac02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac06:	f849 1b04 	str.w	r1, [r9], #4
 800ac0a:	d8e3      	bhi.n	800abd4 <__multiply+0xb0>
 800ac0c:	9a01      	ldr	r2, [sp, #4]
 800ac0e:	f845 c002 	str.w	ip, [r5, r2]
 800ac12:	9a03      	ldr	r2, [sp, #12]
 800ac14:	3304      	adds	r3, #4
 800ac16:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac1a:	f1b9 0f00 	cmp.w	r9, #0
 800ac1e:	d021      	beq.n	800ac64 <__multiply+0x140>
 800ac20:	46ae      	mov	lr, r5
 800ac22:	f04f 0a00 	mov.w	sl, #0
 800ac26:	6829      	ldr	r1, [r5, #0]
 800ac28:	f104 0c14 	add.w	ip, r4, #20
 800ac2c:	f8bc b000 	ldrh.w	fp, [ip]
 800ac30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac34:	b289      	uxth	r1, r1
 800ac36:	fb09 220b 	mla	r2, r9, fp, r2
 800ac3a:	4452      	add	r2, sl
 800ac3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac40:	f84e 1b04 	str.w	r1, [lr], #4
 800ac44:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ac48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac4c:	f8be 1000 	ldrh.w	r1, [lr]
 800ac50:	4567      	cmp	r7, ip
 800ac52:	fb09 110a 	mla	r1, r9, sl, r1
 800ac56:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ac5a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac5e:	d8e5      	bhi.n	800ac2c <__multiply+0x108>
 800ac60:	9a01      	ldr	r2, [sp, #4]
 800ac62:	50a9      	str	r1, [r5, r2]
 800ac64:	3504      	adds	r5, #4
 800ac66:	e79a      	b.n	800ab9e <__multiply+0x7a>
 800ac68:	3e01      	subs	r6, #1
 800ac6a:	e79c      	b.n	800aba6 <__multiply+0x82>
 800ac6c:	0800bd88 	.word	0x0800bd88
 800ac70:	0800bdf9 	.word	0x0800bdf9

0800ac74 <__pow5mult>:
 800ac74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac78:	4615      	mov	r5, r2
 800ac7a:	f012 0203 	ands.w	r2, r2, #3
 800ac7e:	4606      	mov	r6, r0
 800ac80:	460f      	mov	r7, r1
 800ac82:	d007      	beq.n	800ac94 <__pow5mult+0x20>
 800ac84:	4c25      	ldr	r4, [pc, #148]	; (800ad1c <__pow5mult+0xa8>)
 800ac86:	3a01      	subs	r2, #1
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac8e:	f7ff fe55 	bl	800a93c <__multadd>
 800ac92:	4607      	mov	r7, r0
 800ac94:	10ad      	asrs	r5, r5, #2
 800ac96:	d03d      	beq.n	800ad14 <__pow5mult+0xa0>
 800ac98:	69f4      	ldr	r4, [r6, #28]
 800ac9a:	b97c      	cbnz	r4, 800acbc <__pow5mult+0x48>
 800ac9c:	2010      	movs	r0, #16
 800ac9e:	f7ff fd25 	bl	800a6ec <malloc>
 800aca2:	4602      	mov	r2, r0
 800aca4:	61f0      	str	r0, [r6, #28]
 800aca6:	b928      	cbnz	r0, 800acb4 <__pow5mult+0x40>
 800aca8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800acac:	4b1c      	ldr	r3, [pc, #112]	; (800ad20 <__pow5mult+0xac>)
 800acae:	481d      	ldr	r0, [pc, #116]	; (800ad24 <__pow5mult+0xb0>)
 800acb0:	f000 fd3c 	bl	800b72c <__assert_func>
 800acb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acb8:	6004      	str	r4, [r0, #0]
 800acba:	60c4      	str	r4, [r0, #12]
 800acbc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800acc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acc4:	b94c      	cbnz	r4, 800acda <__pow5mult+0x66>
 800acc6:	f240 2171 	movw	r1, #625	; 0x271
 800acca:	4630      	mov	r0, r6
 800accc:	f7ff ff14 	bl	800aaf8 <__i2b>
 800acd0:	2300      	movs	r3, #0
 800acd2:	4604      	mov	r4, r0
 800acd4:	f8c8 0008 	str.w	r0, [r8, #8]
 800acd8:	6003      	str	r3, [r0, #0]
 800acda:	f04f 0900 	mov.w	r9, #0
 800acde:	07eb      	lsls	r3, r5, #31
 800ace0:	d50a      	bpl.n	800acf8 <__pow5mult+0x84>
 800ace2:	4639      	mov	r1, r7
 800ace4:	4622      	mov	r2, r4
 800ace6:	4630      	mov	r0, r6
 800ace8:	f7ff ff1c 	bl	800ab24 <__multiply>
 800acec:	4680      	mov	r8, r0
 800acee:	4639      	mov	r1, r7
 800acf0:	4630      	mov	r0, r6
 800acf2:	f7ff fe01 	bl	800a8f8 <_Bfree>
 800acf6:	4647      	mov	r7, r8
 800acf8:	106d      	asrs	r5, r5, #1
 800acfa:	d00b      	beq.n	800ad14 <__pow5mult+0xa0>
 800acfc:	6820      	ldr	r0, [r4, #0]
 800acfe:	b938      	cbnz	r0, 800ad10 <__pow5mult+0x9c>
 800ad00:	4622      	mov	r2, r4
 800ad02:	4621      	mov	r1, r4
 800ad04:	4630      	mov	r0, r6
 800ad06:	f7ff ff0d 	bl	800ab24 <__multiply>
 800ad0a:	6020      	str	r0, [r4, #0]
 800ad0c:	f8c0 9000 	str.w	r9, [r0]
 800ad10:	4604      	mov	r4, r0
 800ad12:	e7e4      	b.n	800acde <__pow5mult+0x6a>
 800ad14:	4638      	mov	r0, r7
 800ad16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0800bf48 	.word	0x0800bf48
 800ad20:	0800bd19 	.word	0x0800bd19
 800ad24:	0800bdf9 	.word	0x0800bdf9

0800ad28 <__lshift>:
 800ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	4607      	mov	r7, r0
 800ad30:	4691      	mov	r9, r2
 800ad32:	6923      	ldr	r3, [r4, #16]
 800ad34:	6849      	ldr	r1, [r1, #4]
 800ad36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad3a:	68a3      	ldr	r3, [r4, #8]
 800ad3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad40:	f108 0601 	add.w	r6, r8, #1
 800ad44:	42b3      	cmp	r3, r6
 800ad46:	db0b      	blt.n	800ad60 <__lshift+0x38>
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7ff fd95 	bl	800a878 <_Balloc>
 800ad4e:	4605      	mov	r5, r0
 800ad50:	b948      	cbnz	r0, 800ad66 <__lshift+0x3e>
 800ad52:	4602      	mov	r2, r0
 800ad54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ad58:	4b27      	ldr	r3, [pc, #156]	; (800adf8 <__lshift+0xd0>)
 800ad5a:	4828      	ldr	r0, [pc, #160]	; (800adfc <__lshift+0xd4>)
 800ad5c:	f000 fce6 	bl	800b72c <__assert_func>
 800ad60:	3101      	adds	r1, #1
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	e7ee      	b.n	800ad44 <__lshift+0x1c>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f100 0114 	add.w	r1, r0, #20
 800ad6c:	f100 0210 	add.w	r2, r0, #16
 800ad70:	4618      	mov	r0, r3
 800ad72:	4553      	cmp	r3, sl
 800ad74:	db33      	blt.n	800adde <__lshift+0xb6>
 800ad76:	6920      	ldr	r0, [r4, #16]
 800ad78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad7c:	f104 0314 	add.w	r3, r4, #20
 800ad80:	f019 091f 	ands.w	r9, r9, #31
 800ad84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad8c:	d02b      	beq.n	800ade6 <__lshift+0xbe>
 800ad8e:	468a      	mov	sl, r1
 800ad90:	2200      	movs	r2, #0
 800ad92:	f1c9 0e20 	rsb	lr, r9, #32
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	fa00 f009 	lsl.w	r0, r0, r9
 800ad9c:	4310      	orrs	r0, r2
 800ad9e:	f84a 0b04 	str.w	r0, [sl], #4
 800ada2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada6:	459c      	cmp	ip, r3
 800ada8:	fa22 f20e 	lsr.w	r2, r2, lr
 800adac:	d8f3      	bhi.n	800ad96 <__lshift+0x6e>
 800adae:	ebac 0304 	sub.w	r3, ip, r4
 800adb2:	3b15      	subs	r3, #21
 800adb4:	f023 0303 	bic.w	r3, r3, #3
 800adb8:	3304      	adds	r3, #4
 800adba:	f104 0015 	add.w	r0, r4, #21
 800adbe:	4584      	cmp	ip, r0
 800adc0:	bf38      	it	cc
 800adc2:	2304      	movcc	r3, #4
 800adc4:	50ca      	str	r2, [r1, r3]
 800adc6:	b10a      	cbz	r2, 800adcc <__lshift+0xa4>
 800adc8:	f108 0602 	add.w	r6, r8, #2
 800adcc:	3e01      	subs	r6, #1
 800adce:	4638      	mov	r0, r7
 800add0:	4621      	mov	r1, r4
 800add2:	612e      	str	r6, [r5, #16]
 800add4:	f7ff fd90 	bl	800a8f8 <_Bfree>
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ade2:	3301      	adds	r3, #1
 800ade4:	e7c5      	b.n	800ad72 <__lshift+0x4a>
 800ade6:	3904      	subs	r1, #4
 800ade8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adec:	459c      	cmp	ip, r3
 800adee:	f841 2f04 	str.w	r2, [r1, #4]!
 800adf2:	d8f9      	bhi.n	800ade8 <__lshift+0xc0>
 800adf4:	e7ea      	b.n	800adcc <__lshift+0xa4>
 800adf6:	bf00      	nop
 800adf8:	0800bd88 	.word	0x0800bd88
 800adfc:	0800bdf9 	.word	0x0800bdf9

0800ae00 <__mcmp>:
 800ae00:	4603      	mov	r3, r0
 800ae02:	690a      	ldr	r2, [r1, #16]
 800ae04:	6900      	ldr	r0, [r0, #16]
 800ae06:	b530      	push	{r4, r5, lr}
 800ae08:	1a80      	subs	r0, r0, r2
 800ae0a:	d10d      	bne.n	800ae28 <__mcmp+0x28>
 800ae0c:	3314      	adds	r3, #20
 800ae0e:	3114      	adds	r1, #20
 800ae10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae20:	4295      	cmp	r5, r2
 800ae22:	d002      	beq.n	800ae2a <__mcmp+0x2a>
 800ae24:	d304      	bcc.n	800ae30 <__mcmp+0x30>
 800ae26:	2001      	movs	r0, #1
 800ae28:	bd30      	pop	{r4, r5, pc}
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	d3f4      	bcc.n	800ae18 <__mcmp+0x18>
 800ae2e:	e7fb      	b.n	800ae28 <__mcmp+0x28>
 800ae30:	f04f 30ff 	mov.w	r0, #4294967295
 800ae34:	e7f8      	b.n	800ae28 <__mcmp+0x28>
	...

0800ae38 <__mdiff>:
 800ae38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	460d      	mov	r5, r1
 800ae3e:	4607      	mov	r7, r0
 800ae40:	4611      	mov	r1, r2
 800ae42:	4628      	mov	r0, r5
 800ae44:	4614      	mov	r4, r2
 800ae46:	f7ff ffdb 	bl	800ae00 <__mcmp>
 800ae4a:	1e06      	subs	r6, r0, #0
 800ae4c:	d111      	bne.n	800ae72 <__mdiff+0x3a>
 800ae4e:	4631      	mov	r1, r6
 800ae50:	4638      	mov	r0, r7
 800ae52:	f7ff fd11 	bl	800a878 <_Balloc>
 800ae56:	4602      	mov	r2, r0
 800ae58:	b928      	cbnz	r0, 800ae66 <__mdiff+0x2e>
 800ae5a:	f240 2137 	movw	r1, #567	; 0x237
 800ae5e:	4b3a      	ldr	r3, [pc, #232]	; (800af48 <__mdiff+0x110>)
 800ae60:	483a      	ldr	r0, [pc, #232]	; (800af4c <__mdiff+0x114>)
 800ae62:	f000 fc63 	bl	800b72c <__assert_func>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae72:	bfa4      	itt	ge
 800ae74:	4623      	movge	r3, r4
 800ae76:	462c      	movge	r4, r5
 800ae78:	4638      	mov	r0, r7
 800ae7a:	6861      	ldr	r1, [r4, #4]
 800ae7c:	bfa6      	itte	ge
 800ae7e:	461d      	movge	r5, r3
 800ae80:	2600      	movge	r6, #0
 800ae82:	2601      	movlt	r6, #1
 800ae84:	f7ff fcf8 	bl	800a878 <_Balloc>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	b918      	cbnz	r0, 800ae94 <__mdiff+0x5c>
 800ae8c:	f240 2145 	movw	r1, #581	; 0x245
 800ae90:	4b2d      	ldr	r3, [pc, #180]	; (800af48 <__mdiff+0x110>)
 800ae92:	e7e5      	b.n	800ae60 <__mdiff+0x28>
 800ae94:	f102 0814 	add.w	r8, r2, #20
 800ae98:	46c2      	mov	sl, r8
 800ae9a:	f04f 0c00 	mov.w	ip, #0
 800ae9e:	6927      	ldr	r7, [r4, #16]
 800aea0:	60c6      	str	r6, [r0, #12]
 800aea2:	692e      	ldr	r6, [r5, #16]
 800aea4:	f104 0014 	add.w	r0, r4, #20
 800aea8:	f105 0914 	add.w	r9, r5, #20
 800aeac:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800aeb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aeb4:	3410      	adds	r4, #16
 800aeb6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800aeba:	f859 3b04 	ldr.w	r3, [r9], #4
 800aebe:	fa1f f18b 	uxth.w	r1, fp
 800aec2:	4461      	add	r1, ip
 800aec4:	fa1f fc83 	uxth.w	ip, r3
 800aec8:	0c1b      	lsrs	r3, r3, #16
 800aeca:	eba1 010c 	sub.w	r1, r1, ip
 800aece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aed2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800aed6:	b289      	uxth	r1, r1
 800aed8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800aedc:	454e      	cmp	r6, r9
 800aede:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aee2:	f84a 1b04 	str.w	r1, [sl], #4
 800aee6:	d8e6      	bhi.n	800aeb6 <__mdiff+0x7e>
 800aee8:	1b73      	subs	r3, r6, r5
 800aeea:	3b15      	subs	r3, #21
 800aeec:	f023 0303 	bic.w	r3, r3, #3
 800aef0:	3515      	adds	r5, #21
 800aef2:	3304      	adds	r3, #4
 800aef4:	42ae      	cmp	r6, r5
 800aef6:	bf38      	it	cc
 800aef8:	2304      	movcc	r3, #4
 800aefa:	4418      	add	r0, r3
 800aefc:	4443      	add	r3, r8
 800aefe:	461e      	mov	r6, r3
 800af00:	4605      	mov	r5, r0
 800af02:	4575      	cmp	r5, lr
 800af04:	d30e      	bcc.n	800af24 <__mdiff+0xec>
 800af06:	f10e 0103 	add.w	r1, lr, #3
 800af0a:	1a09      	subs	r1, r1, r0
 800af0c:	f021 0103 	bic.w	r1, r1, #3
 800af10:	3803      	subs	r0, #3
 800af12:	4586      	cmp	lr, r0
 800af14:	bf38      	it	cc
 800af16:	2100      	movcc	r1, #0
 800af18:	440b      	add	r3, r1
 800af1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af1e:	b189      	cbz	r1, 800af44 <__mdiff+0x10c>
 800af20:	6117      	str	r7, [r2, #16]
 800af22:	e7a3      	b.n	800ae6c <__mdiff+0x34>
 800af24:	f855 8b04 	ldr.w	r8, [r5], #4
 800af28:	fa1f f188 	uxth.w	r1, r8
 800af2c:	4461      	add	r1, ip
 800af2e:	140c      	asrs	r4, r1, #16
 800af30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af34:	b289      	uxth	r1, r1
 800af36:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800af3a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800af3e:	f846 1b04 	str.w	r1, [r6], #4
 800af42:	e7de      	b.n	800af02 <__mdiff+0xca>
 800af44:	3f01      	subs	r7, #1
 800af46:	e7e8      	b.n	800af1a <__mdiff+0xe2>
 800af48:	0800bd88 	.word	0x0800bd88
 800af4c:	0800bdf9 	.word	0x0800bdf9

0800af50 <__ulp>:
 800af50:	4b0e      	ldr	r3, [pc, #56]	; (800af8c <__ulp+0x3c>)
 800af52:	400b      	ands	r3, r1
 800af54:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dc08      	bgt.n	800af6e <__ulp+0x1e>
 800af5c:	425b      	negs	r3, r3
 800af5e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800af62:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af66:	da04      	bge.n	800af72 <__ulp+0x22>
 800af68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800af6c:	4113      	asrs	r3, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	e008      	b.n	800af84 <__ulp+0x34>
 800af72:	f1a2 0314 	sub.w	r3, r2, #20
 800af76:	2b1e      	cmp	r3, #30
 800af78:	bfd6      	itet	le
 800af7a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800af7e:	2201      	movgt	r2, #1
 800af80:	40da      	lsrle	r2, r3
 800af82:	2300      	movs	r3, #0
 800af84:	4619      	mov	r1, r3
 800af86:	4610      	mov	r0, r2
 800af88:	4770      	bx	lr
 800af8a:	bf00      	nop
 800af8c:	7ff00000 	.word	0x7ff00000

0800af90 <__b2d>:
 800af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af92:	6905      	ldr	r5, [r0, #16]
 800af94:	f100 0714 	add.w	r7, r0, #20
 800af98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800af9c:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800afa0:	1f2e      	subs	r6, r5, #4
 800afa2:	4620      	mov	r0, r4
 800afa4:	f7ff fd5a 	bl	800aa5c <__hi0bits>
 800afa8:	f1c0 0220 	rsb	r2, r0, #32
 800afac:	280a      	cmp	r0, #10
 800afae:	4603      	mov	r3, r0
 800afb0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b01c <__b2d+0x8c>
 800afb4:	600a      	str	r2, [r1, #0]
 800afb6:	dc12      	bgt.n	800afde <__b2d+0x4e>
 800afb8:	f1c0 0e0b 	rsb	lr, r0, #11
 800afbc:	fa24 f20e 	lsr.w	r2, r4, lr
 800afc0:	42b7      	cmp	r7, r6
 800afc2:	ea42 010c 	orr.w	r1, r2, ip
 800afc6:	bf2c      	ite	cs
 800afc8:	2200      	movcs	r2, #0
 800afca:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800afce:	3315      	adds	r3, #21
 800afd0:	fa04 f303 	lsl.w	r3, r4, r3
 800afd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800afd8:	431a      	orrs	r2, r3
 800afda:	4610      	mov	r0, r2
 800afdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afde:	42b7      	cmp	r7, r6
 800afe0:	bf2e      	itee	cs
 800afe2:	2200      	movcs	r2, #0
 800afe4:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800afe8:	f1a5 0608 	subcc.w	r6, r5, #8
 800afec:	3b0b      	subs	r3, #11
 800afee:	d012      	beq.n	800b016 <__b2d+0x86>
 800aff0:	f1c3 0520 	rsb	r5, r3, #32
 800aff4:	fa22 f105 	lsr.w	r1, r2, r5
 800aff8:	409c      	lsls	r4, r3
 800affa:	430c      	orrs	r4, r1
 800affc:	42be      	cmp	r6, r7
 800affe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b002:	bf94      	ite	ls
 800b004:	2400      	movls	r4, #0
 800b006:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b00a:	409a      	lsls	r2, r3
 800b00c:	40ec      	lsrs	r4, r5
 800b00e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b012:	4322      	orrs	r2, r4
 800b014:	e7e1      	b.n	800afda <__b2d+0x4a>
 800b016:	ea44 010c 	orr.w	r1, r4, ip
 800b01a:	e7de      	b.n	800afda <__b2d+0x4a>
 800b01c:	3ff00000 	.word	0x3ff00000

0800b020 <__d2b>:
 800b020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b022:	2101      	movs	r1, #1
 800b024:	4617      	mov	r7, r2
 800b026:	461c      	mov	r4, r3
 800b028:	9e08      	ldr	r6, [sp, #32]
 800b02a:	f7ff fc25 	bl	800a878 <_Balloc>
 800b02e:	4605      	mov	r5, r0
 800b030:	b930      	cbnz	r0, 800b040 <__d2b+0x20>
 800b032:	4602      	mov	r2, r0
 800b034:	f240 310f 	movw	r1, #783	; 0x30f
 800b038:	4b22      	ldr	r3, [pc, #136]	; (800b0c4 <__d2b+0xa4>)
 800b03a:	4823      	ldr	r0, [pc, #140]	; (800b0c8 <__d2b+0xa8>)
 800b03c:	f000 fb76 	bl	800b72c <__assert_func>
 800b040:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b044:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b048:	bb24      	cbnz	r4, 800b094 <__d2b+0x74>
 800b04a:	2f00      	cmp	r7, #0
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	d026      	beq.n	800b09e <__d2b+0x7e>
 800b050:	4668      	mov	r0, sp
 800b052:	9700      	str	r7, [sp, #0]
 800b054:	f7ff fd22 	bl	800aa9c <__lo0bits>
 800b058:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b05c:	b1e8      	cbz	r0, 800b09a <__d2b+0x7a>
 800b05e:	f1c0 0320 	rsb	r3, r0, #32
 800b062:	fa02 f303 	lsl.w	r3, r2, r3
 800b066:	430b      	orrs	r3, r1
 800b068:	40c2      	lsrs	r2, r0
 800b06a:	616b      	str	r3, [r5, #20]
 800b06c:	9201      	str	r2, [sp, #4]
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	bf14      	ite	ne
 800b074:	2102      	movne	r1, #2
 800b076:	2101      	moveq	r1, #1
 800b078:	61ab      	str	r3, [r5, #24]
 800b07a:	6129      	str	r1, [r5, #16]
 800b07c:	b1bc      	cbz	r4, 800b0ae <__d2b+0x8e>
 800b07e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b082:	4404      	add	r4, r0
 800b084:	6034      	str	r4, [r6, #0]
 800b086:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08c:	6018      	str	r0, [r3, #0]
 800b08e:	4628      	mov	r0, r5
 800b090:	b003      	add	sp, #12
 800b092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b098:	e7d7      	b.n	800b04a <__d2b+0x2a>
 800b09a:	6169      	str	r1, [r5, #20]
 800b09c:	e7e7      	b.n	800b06e <__d2b+0x4e>
 800b09e:	a801      	add	r0, sp, #4
 800b0a0:	f7ff fcfc 	bl	800aa9c <__lo0bits>
 800b0a4:	9b01      	ldr	r3, [sp, #4]
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	616b      	str	r3, [r5, #20]
 800b0aa:	3020      	adds	r0, #32
 800b0ac:	e7e5      	b.n	800b07a <__d2b+0x5a>
 800b0ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0b2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b0b6:	6030      	str	r0, [r6, #0]
 800b0b8:	6918      	ldr	r0, [r3, #16]
 800b0ba:	f7ff fccf 	bl	800aa5c <__hi0bits>
 800b0be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b0c2:	e7e2      	b.n	800b08a <__d2b+0x6a>
 800b0c4:	0800bd88 	.word	0x0800bd88
 800b0c8:	0800bdf9 	.word	0x0800bdf9

0800b0cc <__ratio>:
 800b0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d0:	4688      	mov	r8, r1
 800b0d2:	4669      	mov	r1, sp
 800b0d4:	4681      	mov	r9, r0
 800b0d6:	f7ff ff5b 	bl	800af90 <__b2d>
 800b0da:	460f      	mov	r7, r1
 800b0dc:	4604      	mov	r4, r0
 800b0de:	460d      	mov	r5, r1
 800b0e0:	4640      	mov	r0, r8
 800b0e2:	a901      	add	r1, sp, #4
 800b0e4:	f7ff ff54 	bl	800af90 <__b2d>
 800b0e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b0f0:	468b      	mov	fp, r1
 800b0f2:	eba3 0c02 	sub.w	ip, r3, r2
 800b0f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfd5      	itete	le
 800b104:	460a      	movle	r2, r1
 800b106:	462a      	movgt	r2, r5
 800b108:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b10c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b110:	bfd8      	it	le
 800b112:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b116:	465b      	mov	r3, fp
 800b118:	4602      	mov	r2, r0
 800b11a:	4639      	mov	r1, r7
 800b11c:	4620      	mov	r0, r4
 800b11e:	f7f5 fb0f 	bl	8000740 <__aeabi_ddiv>
 800b122:	b003      	add	sp, #12
 800b124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b128 <__copybits>:
 800b128:	3901      	subs	r1, #1
 800b12a:	b570      	push	{r4, r5, r6, lr}
 800b12c:	1149      	asrs	r1, r1, #5
 800b12e:	6914      	ldr	r4, [r2, #16]
 800b130:	3101      	adds	r1, #1
 800b132:	f102 0314 	add.w	r3, r2, #20
 800b136:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b13a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b13e:	1f05      	subs	r5, r0, #4
 800b140:	42a3      	cmp	r3, r4
 800b142:	d30c      	bcc.n	800b15e <__copybits+0x36>
 800b144:	1aa3      	subs	r3, r4, r2
 800b146:	3b11      	subs	r3, #17
 800b148:	f023 0303 	bic.w	r3, r3, #3
 800b14c:	3211      	adds	r2, #17
 800b14e:	42a2      	cmp	r2, r4
 800b150:	bf88      	it	hi
 800b152:	2300      	movhi	r3, #0
 800b154:	4418      	add	r0, r3
 800b156:	2300      	movs	r3, #0
 800b158:	4288      	cmp	r0, r1
 800b15a:	d305      	bcc.n	800b168 <__copybits+0x40>
 800b15c:	bd70      	pop	{r4, r5, r6, pc}
 800b15e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b162:	f845 6f04 	str.w	r6, [r5, #4]!
 800b166:	e7eb      	b.n	800b140 <__copybits+0x18>
 800b168:	f840 3b04 	str.w	r3, [r0], #4
 800b16c:	e7f4      	b.n	800b158 <__copybits+0x30>

0800b16e <__any_on>:
 800b16e:	f100 0214 	add.w	r2, r0, #20
 800b172:	6900      	ldr	r0, [r0, #16]
 800b174:	114b      	asrs	r3, r1, #5
 800b176:	4298      	cmp	r0, r3
 800b178:	b510      	push	{r4, lr}
 800b17a:	db11      	blt.n	800b1a0 <__any_on+0x32>
 800b17c:	dd0a      	ble.n	800b194 <__any_on+0x26>
 800b17e:	f011 011f 	ands.w	r1, r1, #31
 800b182:	d007      	beq.n	800b194 <__any_on+0x26>
 800b184:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b188:	fa24 f001 	lsr.w	r0, r4, r1
 800b18c:	fa00 f101 	lsl.w	r1, r0, r1
 800b190:	428c      	cmp	r4, r1
 800b192:	d10b      	bne.n	800b1ac <__any_on+0x3e>
 800b194:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b198:	4293      	cmp	r3, r2
 800b19a:	d803      	bhi.n	800b1a4 <__any_on+0x36>
 800b19c:	2000      	movs	r0, #0
 800b19e:	bd10      	pop	{r4, pc}
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	e7f7      	b.n	800b194 <__any_on+0x26>
 800b1a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	d0f5      	beq.n	800b198 <__any_on+0x2a>
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	e7f6      	b.n	800b19e <__any_on+0x30>

0800b1b0 <__ascii_wctomb>:
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	4608      	mov	r0, r1
 800b1b4:	b141      	cbz	r1, 800b1c8 <__ascii_wctomb+0x18>
 800b1b6:	2aff      	cmp	r2, #255	; 0xff
 800b1b8:	d904      	bls.n	800b1c4 <__ascii_wctomb+0x14>
 800b1ba:	228a      	movs	r2, #138	; 0x8a
 800b1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	4770      	bx	lr
 800b1c4:	2001      	movs	r0, #1
 800b1c6:	700a      	strb	r2, [r1, #0]
 800b1c8:	4770      	bx	lr

0800b1ca <__ssputs_r>:
 800b1ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ce:	461f      	mov	r7, r3
 800b1d0:	688e      	ldr	r6, [r1, #8]
 800b1d2:	4682      	mov	sl, r0
 800b1d4:	42be      	cmp	r6, r7
 800b1d6:	460c      	mov	r4, r1
 800b1d8:	4690      	mov	r8, r2
 800b1da:	680b      	ldr	r3, [r1, #0]
 800b1dc:	d82c      	bhi.n	800b238 <__ssputs_r+0x6e>
 800b1de:	898a      	ldrh	r2, [r1, #12]
 800b1e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1e4:	d026      	beq.n	800b234 <__ssputs_r+0x6a>
 800b1e6:	6965      	ldr	r5, [r4, #20]
 800b1e8:	6909      	ldr	r1, [r1, #16]
 800b1ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1ee:	eba3 0901 	sub.w	r9, r3, r1
 800b1f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1f6:	1c7b      	adds	r3, r7, #1
 800b1f8:	444b      	add	r3, r9
 800b1fa:	106d      	asrs	r5, r5, #1
 800b1fc:	429d      	cmp	r5, r3
 800b1fe:	bf38      	it	cc
 800b200:	461d      	movcc	r5, r3
 800b202:	0553      	lsls	r3, r2, #21
 800b204:	d527      	bpl.n	800b256 <__ssputs_r+0x8c>
 800b206:	4629      	mov	r1, r5
 800b208:	f7ff fa98 	bl	800a73c <_malloc_r>
 800b20c:	4606      	mov	r6, r0
 800b20e:	b360      	cbz	r0, 800b26a <__ssputs_r+0xa0>
 800b210:	464a      	mov	r2, r9
 800b212:	6921      	ldr	r1, [r4, #16]
 800b214:	f7fe f844 	bl	80092a0 <memcpy>
 800b218:	89a3      	ldrh	r3, [r4, #12]
 800b21a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b21e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b222:	81a3      	strh	r3, [r4, #12]
 800b224:	6126      	str	r6, [r4, #16]
 800b226:	444e      	add	r6, r9
 800b228:	6026      	str	r6, [r4, #0]
 800b22a:	463e      	mov	r6, r7
 800b22c:	6165      	str	r5, [r4, #20]
 800b22e:	eba5 0509 	sub.w	r5, r5, r9
 800b232:	60a5      	str	r5, [r4, #8]
 800b234:	42be      	cmp	r6, r7
 800b236:	d900      	bls.n	800b23a <__ssputs_r+0x70>
 800b238:	463e      	mov	r6, r7
 800b23a:	4632      	mov	r2, r6
 800b23c:	4641      	mov	r1, r8
 800b23e:	6820      	ldr	r0, [r4, #0]
 800b240:	f000 fa27 	bl	800b692 <memmove>
 800b244:	2000      	movs	r0, #0
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	1b9b      	subs	r3, r3, r6
 800b24a:	60a3      	str	r3, [r4, #8]
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	4433      	add	r3, r6
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b256:	462a      	mov	r2, r5
 800b258:	f000 fa9a 	bl	800b790 <_realloc_r>
 800b25c:	4606      	mov	r6, r0
 800b25e:	2800      	cmp	r0, #0
 800b260:	d1e0      	bne.n	800b224 <__ssputs_r+0x5a>
 800b262:	4650      	mov	r0, sl
 800b264:	6921      	ldr	r1, [r4, #16]
 800b266:	f7fe fe9f 	bl	8009fa8 <_free_r>
 800b26a:	230c      	movs	r3, #12
 800b26c:	f8ca 3000 	str.w	r3, [sl]
 800b270:	89a3      	ldrh	r3, [r4, #12]
 800b272:	f04f 30ff 	mov.w	r0, #4294967295
 800b276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	e7e9      	b.n	800b252 <__ssputs_r+0x88>
	...

0800b280 <_svfiprintf_r>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	4698      	mov	r8, r3
 800b286:	898b      	ldrh	r3, [r1, #12]
 800b288:	4607      	mov	r7, r0
 800b28a:	061b      	lsls	r3, r3, #24
 800b28c:	460d      	mov	r5, r1
 800b28e:	4614      	mov	r4, r2
 800b290:	b09d      	sub	sp, #116	; 0x74
 800b292:	d50e      	bpl.n	800b2b2 <_svfiprintf_r+0x32>
 800b294:	690b      	ldr	r3, [r1, #16]
 800b296:	b963      	cbnz	r3, 800b2b2 <_svfiprintf_r+0x32>
 800b298:	2140      	movs	r1, #64	; 0x40
 800b29a:	f7ff fa4f 	bl	800a73c <_malloc_r>
 800b29e:	6028      	str	r0, [r5, #0]
 800b2a0:	6128      	str	r0, [r5, #16]
 800b2a2:	b920      	cbnz	r0, 800b2ae <_svfiprintf_r+0x2e>
 800b2a4:	230c      	movs	r3, #12
 800b2a6:	603b      	str	r3, [r7, #0]
 800b2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ac:	e0d0      	b.n	800b450 <_svfiprintf_r+0x1d0>
 800b2ae:	2340      	movs	r3, #64	; 0x40
 800b2b0:	616b      	str	r3, [r5, #20]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b6:	2320      	movs	r3, #32
 800b2b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2bc:	2330      	movs	r3, #48	; 0x30
 800b2be:	f04f 0901 	mov.w	r9, #1
 800b2c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2c6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b468 <_svfiprintf_r+0x1e8>
 800b2ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2ce:	4623      	mov	r3, r4
 800b2d0:	469a      	mov	sl, r3
 800b2d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2d6:	b10a      	cbz	r2, 800b2dc <_svfiprintf_r+0x5c>
 800b2d8:	2a25      	cmp	r2, #37	; 0x25
 800b2da:	d1f9      	bne.n	800b2d0 <_svfiprintf_r+0x50>
 800b2dc:	ebba 0b04 	subs.w	fp, sl, r4
 800b2e0:	d00b      	beq.n	800b2fa <_svfiprintf_r+0x7a>
 800b2e2:	465b      	mov	r3, fp
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff ff6e 	bl	800b1ca <__ssputs_r>
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	f000 80a9 	beq.w	800b446 <_svfiprintf_r+0x1c6>
 800b2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2f6:	445a      	add	r2, fp
 800b2f8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80a1 	beq.w	800b446 <_svfiprintf_r+0x1c6>
 800b304:	2300      	movs	r3, #0
 800b306:	f04f 32ff 	mov.w	r2, #4294967295
 800b30a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b30e:	f10a 0a01 	add.w	sl, sl, #1
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	9307      	str	r3, [sp, #28]
 800b316:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b31a:	931a      	str	r3, [sp, #104]	; 0x68
 800b31c:	4654      	mov	r4, sl
 800b31e:	2205      	movs	r2, #5
 800b320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b324:	4850      	ldr	r0, [pc, #320]	; (800b468 <_svfiprintf_r+0x1e8>)
 800b326:	f7fd ffad 	bl	8009284 <memchr>
 800b32a:	9a04      	ldr	r2, [sp, #16]
 800b32c:	b9d8      	cbnz	r0, 800b366 <_svfiprintf_r+0xe6>
 800b32e:	06d0      	lsls	r0, r2, #27
 800b330:	bf44      	itt	mi
 800b332:	2320      	movmi	r3, #32
 800b334:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b338:	0711      	lsls	r1, r2, #28
 800b33a:	bf44      	itt	mi
 800b33c:	232b      	movmi	r3, #43	; 0x2b
 800b33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b342:	f89a 3000 	ldrb.w	r3, [sl]
 800b346:	2b2a      	cmp	r3, #42	; 0x2a
 800b348:	d015      	beq.n	800b376 <_svfiprintf_r+0xf6>
 800b34a:	4654      	mov	r4, sl
 800b34c:	2000      	movs	r0, #0
 800b34e:	f04f 0c0a 	mov.w	ip, #10
 800b352:	9a07      	ldr	r2, [sp, #28]
 800b354:	4621      	mov	r1, r4
 800b356:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b35a:	3b30      	subs	r3, #48	; 0x30
 800b35c:	2b09      	cmp	r3, #9
 800b35e:	d94d      	bls.n	800b3fc <_svfiprintf_r+0x17c>
 800b360:	b1b0      	cbz	r0, 800b390 <_svfiprintf_r+0x110>
 800b362:	9207      	str	r2, [sp, #28]
 800b364:	e014      	b.n	800b390 <_svfiprintf_r+0x110>
 800b366:	eba0 0308 	sub.w	r3, r0, r8
 800b36a:	fa09 f303 	lsl.w	r3, r9, r3
 800b36e:	4313      	orrs	r3, r2
 800b370:	46a2      	mov	sl, r4
 800b372:	9304      	str	r3, [sp, #16]
 800b374:	e7d2      	b.n	800b31c <_svfiprintf_r+0x9c>
 800b376:	9b03      	ldr	r3, [sp, #12]
 800b378:	1d19      	adds	r1, r3, #4
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	9103      	str	r1, [sp, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	bfbb      	ittet	lt
 800b382:	425b      	neglt	r3, r3
 800b384:	f042 0202 	orrlt.w	r2, r2, #2
 800b388:	9307      	strge	r3, [sp, #28]
 800b38a:	9307      	strlt	r3, [sp, #28]
 800b38c:	bfb8      	it	lt
 800b38e:	9204      	strlt	r2, [sp, #16]
 800b390:	7823      	ldrb	r3, [r4, #0]
 800b392:	2b2e      	cmp	r3, #46	; 0x2e
 800b394:	d10c      	bne.n	800b3b0 <_svfiprintf_r+0x130>
 800b396:	7863      	ldrb	r3, [r4, #1]
 800b398:	2b2a      	cmp	r3, #42	; 0x2a
 800b39a:	d134      	bne.n	800b406 <_svfiprintf_r+0x186>
 800b39c:	9b03      	ldr	r3, [sp, #12]
 800b39e:	3402      	adds	r4, #2
 800b3a0:	1d1a      	adds	r2, r3, #4
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	9203      	str	r2, [sp, #12]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	bfb8      	it	lt
 800b3aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3ae:	9305      	str	r3, [sp, #20]
 800b3b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b46c <_svfiprintf_r+0x1ec>
 800b3b4:	2203      	movs	r2, #3
 800b3b6:	4650      	mov	r0, sl
 800b3b8:	7821      	ldrb	r1, [r4, #0]
 800b3ba:	f7fd ff63 	bl	8009284 <memchr>
 800b3be:	b138      	cbz	r0, 800b3d0 <_svfiprintf_r+0x150>
 800b3c0:	2240      	movs	r2, #64	; 0x40
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	eba0 000a 	sub.w	r0, r0, sl
 800b3c8:	4082      	lsls	r2, r0
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	3401      	adds	r4, #1
 800b3ce:	9304      	str	r3, [sp, #16]
 800b3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d4:	2206      	movs	r2, #6
 800b3d6:	4826      	ldr	r0, [pc, #152]	; (800b470 <_svfiprintf_r+0x1f0>)
 800b3d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3dc:	f7fd ff52 	bl	8009284 <memchr>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d038      	beq.n	800b456 <_svfiprintf_r+0x1d6>
 800b3e4:	4b23      	ldr	r3, [pc, #140]	; (800b474 <_svfiprintf_r+0x1f4>)
 800b3e6:	bb1b      	cbnz	r3, 800b430 <_svfiprintf_r+0x1b0>
 800b3e8:	9b03      	ldr	r3, [sp, #12]
 800b3ea:	3307      	adds	r3, #7
 800b3ec:	f023 0307 	bic.w	r3, r3, #7
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	9303      	str	r3, [sp, #12]
 800b3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f6:	4433      	add	r3, r6
 800b3f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3fa:	e768      	b.n	800b2ce <_svfiprintf_r+0x4e>
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	2001      	movs	r0, #1
 800b400:	fb0c 3202 	mla	r2, ip, r2, r3
 800b404:	e7a6      	b.n	800b354 <_svfiprintf_r+0xd4>
 800b406:	2300      	movs	r3, #0
 800b408:	f04f 0c0a 	mov.w	ip, #10
 800b40c:	4619      	mov	r1, r3
 800b40e:	3401      	adds	r4, #1
 800b410:	9305      	str	r3, [sp, #20]
 800b412:	4620      	mov	r0, r4
 800b414:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b418:	3a30      	subs	r2, #48	; 0x30
 800b41a:	2a09      	cmp	r2, #9
 800b41c:	d903      	bls.n	800b426 <_svfiprintf_r+0x1a6>
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d0c6      	beq.n	800b3b0 <_svfiprintf_r+0x130>
 800b422:	9105      	str	r1, [sp, #20]
 800b424:	e7c4      	b.n	800b3b0 <_svfiprintf_r+0x130>
 800b426:	4604      	mov	r4, r0
 800b428:	2301      	movs	r3, #1
 800b42a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b42e:	e7f0      	b.n	800b412 <_svfiprintf_r+0x192>
 800b430:	ab03      	add	r3, sp, #12
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	462a      	mov	r2, r5
 800b436:	4638      	mov	r0, r7
 800b438:	4b0f      	ldr	r3, [pc, #60]	; (800b478 <_svfiprintf_r+0x1f8>)
 800b43a:	a904      	add	r1, sp, #16
 800b43c:	f7fd f8b8 	bl	80085b0 <_printf_float>
 800b440:	1c42      	adds	r2, r0, #1
 800b442:	4606      	mov	r6, r0
 800b444:	d1d6      	bne.n	800b3f4 <_svfiprintf_r+0x174>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	065b      	lsls	r3, r3, #25
 800b44a:	f53f af2d 	bmi.w	800b2a8 <_svfiprintf_r+0x28>
 800b44e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b450:	b01d      	add	sp, #116	; 0x74
 800b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b456:	ab03      	add	r3, sp, #12
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	462a      	mov	r2, r5
 800b45c:	4638      	mov	r0, r7
 800b45e:	4b06      	ldr	r3, [pc, #24]	; (800b478 <_svfiprintf_r+0x1f8>)
 800b460:	a904      	add	r1, sp, #16
 800b462:	f7fd fb45 	bl	8008af0 <_printf_i>
 800b466:	e7eb      	b.n	800b440 <_svfiprintf_r+0x1c0>
 800b468:	0800c055 	.word	0x0800c055
 800b46c:	0800c05b 	.word	0x0800c05b
 800b470:	0800c05f 	.word	0x0800c05f
 800b474:	080085b1 	.word	0x080085b1
 800b478:	0800b1cb 	.word	0x0800b1cb

0800b47c <__sflush_r>:
 800b47c:	898a      	ldrh	r2, [r1, #12]
 800b47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b480:	4605      	mov	r5, r0
 800b482:	0710      	lsls	r0, r2, #28
 800b484:	460c      	mov	r4, r1
 800b486:	d457      	bmi.n	800b538 <__sflush_r+0xbc>
 800b488:	684b      	ldr	r3, [r1, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	dc04      	bgt.n	800b498 <__sflush_r+0x1c>
 800b48e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b490:	2b00      	cmp	r3, #0
 800b492:	dc01      	bgt.n	800b498 <__sflush_r+0x1c>
 800b494:	2000      	movs	r0, #0
 800b496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b49a:	2e00      	cmp	r6, #0
 800b49c:	d0fa      	beq.n	800b494 <__sflush_r+0x18>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4a4:	682f      	ldr	r7, [r5, #0]
 800b4a6:	6a21      	ldr	r1, [r4, #32]
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	d032      	beq.n	800b512 <__sflush_r+0x96>
 800b4ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	075a      	lsls	r2, r3, #29
 800b4b2:	d505      	bpl.n	800b4c0 <__sflush_r+0x44>
 800b4b4:	6863      	ldr	r3, [r4, #4]
 800b4b6:	1ac0      	subs	r0, r0, r3
 800b4b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4ba:	b10b      	cbz	r3, 800b4c0 <__sflush_r+0x44>
 800b4bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b4be:	1ac0      	subs	r0, r0, r3
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	6a21      	ldr	r1, [r4, #32]
 800b4ca:	47b0      	blx	r6
 800b4cc:	1c43      	adds	r3, r0, #1
 800b4ce:	89a3      	ldrh	r3, [r4, #12]
 800b4d0:	d106      	bne.n	800b4e0 <__sflush_r+0x64>
 800b4d2:	6829      	ldr	r1, [r5, #0]
 800b4d4:	291d      	cmp	r1, #29
 800b4d6:	d82b      	bhi.n	800b530 <__sflush_r+0xb4>
 800b4d8:	4a28      	ldr	r2, [pc, #160]	; (800b57c <__sflush_r+0x100>)
 800b4da:	410a      	asrs	r2, r1
 800b4dc:	07d6      	lsls	r6, r2, #31
 800b4de:	d427      	bmi.n	800b530 <__sflush_r+0xb4>
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	6062      	str	r2, [r4, #4]
 800b4e4:	6922      	ldr	r2, [r4, #16]
 800b4e6:	04d9      	lsls	r1, r3, #19
 800b4e8:	6022      	str	r2, [r4, #0]
 800b4ea:	d504      	bpl.n	800b4f6 <__sflush_r+0x7a>
 800b4ec:	1c42      	adds	r2, r0, #1
 800b4ee:	d101      	bne.n	800b4f4 <__sflush_r+0x78>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b903      	cbnz	r3, 800b4f6 <__sflush_r+0x7a>
 800b4f4:	6560      	str	r0, [r4, #84]	; 0x54
 800b4f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4f8:	602f      	str	r7, [r5, #0]
 800b4fa:	2900      	cmp	r1, #0
 800b4fc:	d0ca      	beq.n	800b494 <__sflush_r+0x18>
 800b4fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b502:	4299      	cmp	r1, r3
 800b504:	d002      	beq.n	800b50c <__sflush_r+0x90>
 800b506:	4628      	mov	r0, r5
 800b508:	f7fe fd4e 	bl	8009fa8 <_free_r>
 800b50c:	2000      	movs	r0, #0
 800b50e:	6360      	str	r0, [r4, #52]	; 0x34
 800b510:	e7c1      	b.n	800b496 <__sflush_r+0x1a>
 800b512:	2301      	movs	r3, #1
 800b514:	4628      	mov	r0, r5
 800b516:	47b0      	blx	r6
 800b518:	1c41      	adds	r1, r0, #1
 800b51a:	d1c8      	bne.n	800b4ae <__sflush_r+0x32>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d0c5      	beq.n	800b4ae <__sflush_r+0x32>
 800b522:	2b1d      	cmp	r3, #29
 800b524:	d001      	beq.n	800b52a <__sflush_r+0xae>
 800b526:	2b16      	cmp	r3, #22
 800b528:	d101      	bne.n	800b52e <__sflush_r+0xb2>
 800b52a:	602f      	str	r7, [r5, #0]
 800b52c:	e7b2      	b.n	800b494 <__sflush_r+0x18>
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b534:	81a3      	strh	r3, [r4, #12]
 800b536:	e7ae      	b.n	800b496 <__sflush_r+0x1a>
 800b538:	690f      	ldr	r7, [r1, #16]
 800b53a:	2f00      	cmp	r7, #0
 800b53c:	d0aa      	beq.n	800b494 <__sflush_r+0x18>
 800b53e:	0793      	lsls	r3, r2, #30
 800b540:	bf18      	it	ne
 800b542:	2300      	movne	r3, #0
 800b544:	680e      	ldr	r6, [r1, #0]
 800b546:	bf08      	it	eq
 800b548:	694b      	ldreq	r3, [r1, #20]
 800b54a:	1bf6      	subs	r6, r6, r7
 800b54c:	600f      	str	r7, [r1, #0]
 800b54e:	608b      	str	r3, [r1, #8]
 800b550:	2e00      	cmp	r6, #0
 800b552:	dd9f      	ble.n	800b494 <__sflush_r+0x18>
 800b554:	4633      	mov	r3, r6
 800b556:	463a      	mov	r2, r7
 800b558:	4628      	mov	r0, r5
 800b55a:	6a21      	ldr	r1, [r4, #32]
 800b55c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b560:	47e0      	blx	ip
 800b562:	2800      	cmp	r0, #0
 800b564:	dc06      	bgt.n	800b574 <__sflush_r+0xf8>
 800b566:	89a3      	ldrh	r3, [r4, #12]
 800b568:	f04f 30ff 	mov.w	r0, #4294967295
 800b56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	e790      	b.n	800b496 <__sflush_r+0x1a>
 800b574:	4407      	add	r7, r0
 800b576:	1a36      	subs	r6, r6, r0
 800b578:	e7ea      	b.n	800b550 <__sflush_r+0xd4>
 800b57a:	bf00      	nop
 800b57c:	dfbffffe 	.word	0xdfbffffe

0800b580 <_fflush_r>:
 800b580:	b538      	push	{r3, r4, r5, lr}
 800b582:	690b      	ldr	r3, [r1, #16]
 800b584:	4605      	mov	r5, r0
 800b586:	460c      	mov	r4, r1
 800b588:	b913      	cbnz	r3, 800b590 <_fflush_r+0x10>
 800b58a:	2500      	movs	r5, #0
 800b58c:	4628      	mov	r0, r5
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	b118      	cbz	r0, 800b59a <_fflush_r+0x1a>
 800b592:	6a03      	ldr	r3, [r0, #32]
 800b594:	b90b      	cbnz	r3, 800b59a <_fflush_r+0x1a>
 800b596:	f7fd fc47 	bl	8008e28 <__sinit>
 800b59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d0f3      	beq.n	800b58a <_fflush_r+0xa>
 800b5a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5a4:	07d0      	lsls	r0, r2, #31
 800b5a6:	d404      	bmi.n	800b5b2 <_fflush_r+0x32>
 800b5a8:	0599      	lsls	r1, r3, #22
 800b5aa:	d402      	bmi.n	800b5b2 <_fflush_r+0x32>
 800b5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ae:	f7fd fe67 	bl	8009280 <__retarget_lock_acquire_recursive>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	4621      	mov	r1, r4
 800b5b6:	f7ff ff61 	bl	800b47c <__sflush_r>
 800b5ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5bc:	4605      	mov	r5, r0
 800b5be:	07da      	lsls	r2, r3, #31
 800b5c0:	d4e4      	bmi.n	800b58c <_fflush_r+0xc>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	059b      	lsls	r3, r3, #22
 800b5c6:	d4e1      	bmi.n	800b58c <_fflush_r+0xc>
 800b5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ca:	f7fd fe5a 	bl	8009282 <__retarget_lock_release_recursive>
 800b5ce:	e7dd      	b.n	800b58c <_fflush_r+0xc>

0800b5d0 <__swhatbuf_r>:
 800b5d0:	b570      	push	{r4, r5, r6, lr}
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d8:	4615      	mov	r5, r2
 800b5da:	2900      	cmp	r1, #0
 800b5dc:	461e      	mov	r6, r3
 800b5de:	b096      	sub	sp, #88	; 0x58
 800b5e0:	da0c      	bge.n	800b5fc <__swhatbuf_r+0x2c>
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b5ea:	bf0c      	ite	eq
 800b5ec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b5f0:	2340      	movne	r3, #64	; 0x40
 800b5f2:	2000      	movs	r0, #0
 800b5f4:	6031      	str	r1, [r6, #0]
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	b016      	add	sp, #88	; 0x58
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	466a      	mov	r2, sp
 800b5fe:	f000 f863 	bl	800b6c8 <_fstat_r>
 800b602:	2800      	cmp	r0, #0
 800b604:	dbed      	blt.n	800b5e2 <__swhatbuf_r+0x12>
 800b606:	9901      	ldr	r1, [sp, #4]
 800b608:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b60c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b610:	4259      	negs	r1, r3
 800b612:	4159      	adcs	r1, r3
 800b614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b618:	e7eb      	b.n	800b5f2 <__swhatbuf_r+0x22>

0800b61a <__smakebuf_r>:
 800b61a:	898b      	ldrh	r3, [r1, #12]
 800b61c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b61e:	079d      	lsls	r5, r3, #30
 800b620:	4606      	mov	r6, r0
 800b622:	460c      	mov	r4, r1
 800b624:	d507      	bpl.n	800b636 <__smakebuf_r+0x1c>
 800b626:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b62a:	6023      	str	r3, [r4, #0]
 800b62c:	6123      	str	r3, [r4, #16]
 800b62e:	2301      	movs	r3, #1
 800b630:	6163      	str	r3, [r4, #20]
 800b632:	b002      	add	sp, #8
 800b634:	bd70      	pop	{r4, r5, r6, pc}
 800b636:	466a      	mov	r2, sp
 800b638:	ab01      	add	r3, sp, #4
 800b63a:	f7ff ffc9 	bl	800b5d0 <__swhatbuf_r>
 800b63e:	9900      	ldr	r1, [sp, #0]
 800b640:	4605      	mov	r5, r0
 800b642:	4630      	mov	r0, r6
 800b644:	f7ff f87a 	bl	800a73c <_malloc_r>
 800b648:	b948      	cbnz	r0, 800b65e <__smakebuf_r+0x44>
 800b64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b64e:	059a      	lsls	r2, r3, #22
 800b650:	d4ef      	bmi.n	800b632 <__smakebuf_r+0x18>
 800b652:	f023 0303 	bic.w	r3, r3, #3
 800b656:	f043 0302 	orr.w	r3, r3, #2
 800b65a:	81a3      	strh	r3, [r4, #12]
 800b65c:	e7e3      	b.n	800b626 <__smakebuf_r+0xc>
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	6020      	str	r0, [r4, #0]
 800b662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	9b00      	ldr	r3, [sp, #0]
 800b66a:	6120      	str	r0, [r4, #16]
 800b66c:	6163      	str	r3, [r4, #20]
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	b15b      	cbz	r3, 800b68a <__smakebuf_r+0x70>
 800b672:	4630      	mov	r0, r6
 800b674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b678:	f000 f838 	bl	800b6ec <_isatty_r>
 800b67c:	b128      	cbz	r0, 800b68a <__smakebuf_r+0x70>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f023 0303 	bic.w	r3, r3, #3
 800b684:	f043 0301 	orr.w	r3, r3, #1
 800b688:	81a3      	strh	r3, [r4, #12]
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	431d      	orrs	r5, r3
 800b68e:	81a5      	strh	r5, [r4, #12]
 800b690:	e7cf      	b.n	800b632 <__smakebuf_r+0x18>

0800b692 <memmove>:
 800b692:	4288      	cmp	r0, r1
 800b694:	b510      	push	{r4, lr}
 800b696:	eb01 0402 	add.w	r4, r1, r2
 800b69a:	d902      	bls.n	800b6a2 <memmove+0x10>
 800b69c:	4284      	cmp	r4, r0
 800b69e:	4623      	mov	r3, r4
 800b6a0:	d807      	bhi.n	800b6b2 <memmove+0x20>
 800b6a2:	1e43      	subs	r3, r0, #1
 800b6a4:	42a1      	cmp	r1, r4
 800b6a6:	d008      	beq.n	800b6ba <memmove+0x28>
 800b6a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6b0:	e7f8      	b.n	800b6a4 <memmove+0x12>
 800b6b2:	4601      	mov	r1, r0
 800b6b4:	4402      	add	r2, r0
 800b6b6:	428a      	cmp	r2, r1
 800b6b8:	d100      	bne.n	800b6bc <memmove+0x2a>
 800b6ba:	bd10      	pop	{r4, pc}
 800b6bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6c4:	e7f7      	b.n	800b6b6 <memmove+0x24>
	...

0800b6c8 <_fstat_r>:
 800b6c8:	b538      	push	{r3, r4, r5, lr}
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_fstat_r+0x20>)
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	602b      	str	r3, [r5, #0]
 800b6d6:	f7f6 ff2c 	bl	8002532 <_fstat>
 800b6da:	1c43      	adds	r3, r0, #1
 800b6dc:	d102      	bne.n	800b6e4 <_fstat_r+0x1c>
 800b6de:	682b      	ldr	r3, [r5, #0]
 800b6e0:	b103      	cbz	r3, 800b6e4 <_fstat_r+0x1c>
 800b6e2:	6023      	str	r3, [r4, #0]
 800b6e4:	bd38      	pop	{r3, r4, r5, pc}
 800b6e6:	bf00      	nop
 800b6e8:	200008d8 	.word	0x200008d8

0800b6ec <_isatty_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4d05      	ldr	r5, [pc, #20]	; (800b708 <_isatty_r+0x1c>)
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4608      	mov	r0, r1
 800b6f6:	602b      	str	r3, [r5, #0]
 800b6f8:	f7f6 ff2a 	bl	8002550 <_isatty>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_isatty_r+0x1a>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_isatty_r+0x1a>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	200008d8 	.word	0x200008d8

0800b70c <_sbrk_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	2300      	movs	r3, #0
 800b710:	4d05      	ldr	r5, [pc, #20]	; (800b728 <_sbrk_r+0x1c>)
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	602b      	str	r3, [r5, #0]
 800b718:	f7f6 ff30 	bl	800257c <_sbrk>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_sbrk_r+0x1a>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_sbrk_r+0x1a>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	200008d8 	.word	0x200008d8

0800b72c <__assert_func>:
 800b72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b72e:	4614      	mov	r4, r2
 800b730:	461a      	mov	r2, r3
 800b732:	4b09      	ldr	r3, [pc, #36]	; (800b758 <__assert_func+0x2c>)
 800b734:	4605      	mov	r5, r0
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	68d8      	ldr	r0, [r3, #12]
 800b73a:	b14c      	cbz	r4, 800b750 <__assert_func+0x24>
 800b73c:	4b07      	ldr	r3, [pc, #28]	; (800b75c <__assert_func+0x30>)
 800b73e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b742:	9100      	str	r1, [sp, #0]
 800b744:	462b      	mov	r3, r5
 800b746:	4906      	ldr	r1, [pc, #24]	; (800b760 <__assert_func+0x34>)
 800b748:	f000 f852 	bl	800b7f0 <fiprintf>
 800b74c:	f000 f862 	bl	800b814 <abort>
 800b750:	4b04      	ldr	r3, [pc, #16]	; (800b764 <__assert_func+0x38>)
 800b752:	461c      	mov	r4, r3
 800b754:	e7f3      	b.n	800b73e <__assert_func+0x12>
 800b756:	bf00      	nop
 800b758:	200001d0 	.word	0x200001d0
 800b75c:	0800c066 	.word	0x0800c066
 800b760:	0800c073 	.word	0x0800c073
 800b764:	0800c0a1 	.word	0x0800c0a1

0800b768 <_calloc_r>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	fba1 5402 	umull	r5, r4, r1, r2
 800b76e:	b934      	cbnz	r4, 800b77e <_calloc_r+0x16>
 800b770:	4629      	mov	r1, r5
 800b772:	f7fe ffe3 	bl	800a73c <_malloc_r>
 800b776:	4606      	mov	r6, r0
 800b778:	b928      	cbnz	r0, 800b786 <_calloc_r+0x1e>
 800b77a:	4630      	mov	r0, r6
 800b77c:	bd70      	pop	{r4, r5, r6, pc}
 800b77e:	220c      	movs	r2, #12
 800b780:	2600      	movs	r6, #0
 800b782:	6002      	str	r2, [r0, #0]
 800b784:	e7f9      	b.n	800b77a <_calloc_r+0x12>
 800b786:	462a      	mov	r2, r5
 800b788:	4621      	mov	r1, r4
 800b78a:	f7fd fceb 	bl	8009164 <memset>
 800b78e:	e7f4      	b.n	800b77a <_calloc_r+0x12>

0800b790 <_realloc_r>:
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	4680      	mov	r8, r0
 800b796:	4614      	mov	r4, r2
 800b798:	460e      	mov	r6, r1
 800b79a:	b921      	cbnz	r1, 800b7a6 <_realloc_r+0x16>
 800b79c:	4611      	mov	r1, r2
 800b79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a2:	f7fe bfcb 	b.w	800a73c <_malloc_r>
 800b7a6:	b92a      	cbnz	r2, 800b7b4 <_realloc_r+0x24>
 800b7a8:	f7fe fbfe 	bl	8009fa8 <_free_r>
 800b7ac:	4625      	mov	r5, r4
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b4:	f000 f835 	bl	800b822 <_malloc_usable_size_r>
 800b7b8:	4284      	cmp	r4, r0
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	d802      	bhi.n	800b7c4 <_realloc_r+0x34>
 800b7be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b7c2:	d812      	bhi.n	800b7ea <_realloc_r+0x5a>
 800b7c4:	4621      	mov	r1, r4
 800b7c6:	4640      	mov	r0, r8
 800b7c8:	f7fe ffb8 	bl	800a73c <_malloc_r>
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	d0ed      	beq.n	800b7ae <_realloc_r+0x1e>
 800b7d2:	42bc      	cmp	r4, r7
 800b7d4:	4622      	mov	r2, r4
 800b7d6:	4631      	mov	r1, r6
 800b7d8:	bf28      	it	cs
 800b7da:	463a      	movcs	r2, r7
 800b7dc:	f7fd fd60 	bl	80092a0 <memcpy>
 800b7e0:	4631      	mov	r1, r6
 800b7e2:	4640      	mov	r0, r8
 800b7e4:	f7fe fbe0 	bl	8009fa8 <_free_r>
 800b7e8:	e7e1      	b.n	800b7ae <_realloc_r+0x1e>
 800b7ea:	4635      	mov	r5, r6
 800b7ec:	e7df      	b.n	800b7ae <_realloc_r+0x1e>
	...

0800b7f0 <fiprintf>:
 800b7f0:	b40e      	push	{r1, r2, r3}
 800b7f2:	b503      	push	{r0, r1, lr}
 800b7f4:	4601      	mov	r1, r0
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	4805      	ldr	r0, [pc, #20]	; (800b810 <fiprintf+0x20>)
 800b7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fe:	6800      	ldr	r0, [r0, #0]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	f000 f83d 	bl	800b880 <_vfiprintf_r>
 800b806:	b002      	add	sp, #8
 800b808:	f85d eb04 	ldr.w	lr, [sp], #4
 800b80c:	b003      	add	sp, #12
 800b80e:	4770      	bx	lr
 800b810:	200001d0 	.word	0x200001d0

0800b814 <abort>:
 800b814:	2006      	movs	r0, #6
 800b816:	b508      	push	{r3, lr}
 800b818:	f000 f974 	bl	800bb04 <raise>
 800b81c:	2001      	movs	r0, #1
 800b81e:	f7f6 fe3a 	bl	8002496 <_exit>

0800b822 <_malloc_usable_size_r>:
 800b822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b826:	1f18      	subs	r0, r3, #4
 800b828:	2b00      	cmp	r3, #0
 800b82a:	bfbc      	itt	lt
 800b82c:	580b      	ldrlt	r3, [r1, r0]
 800b82e:	18c0      	addlt	r0, r0, r3
 800b830:	4770      	bx	lr

0800b832 <__sfputc_r>:
 800b832:	6893      	ldr	r3, [r2, #8]
 800b834:	b410      	push	{r4}
 800b836:	3b01      	subs	r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	6093      	str	r3, [r2, #8]
 800b83c:	da07      	bge.n	800b84e <__sfputc_r+0x1c>
 800b83e:	6994      	ldr	r4, [r2, #24]
 800b840:	42a3      	cmp	r3, r4
 800b842:	db01      	blt.n	800b848 <__sfputc_r+0x16>
 800b844:	290a      	cmp	r1, #10
 800b846:	d102      	bne.n	800b84e <__sfputc_r+0x1c>
 800b848:	bc10      	pop	{r4}
 800b84a:	f7fd bbf6 	b.w	800903a <__swbuf_r>
 800b84e:	6813      	ldr	r3, [r2, #0]
 800b850:	1c58      	adds	r0, r3, #1
 800b852:	6010      	str	r0, [r2, #0]
 800b854:	7019      	strb	r1, [r3, #0]
 800b856:	4608      	mov	r0, r1
 800b858:	bc10      	pop	{r4}
 800b85a:	4770      	bx	lr

0800b85c <__sfputs_r>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	4606      	mov	r6, r0
 800b860:	460f      	mov	r7, r1
 800b862:	4614      	mov	r4, r2
 800b864:	18d5      	adds	r5, r2, r3
 800b866:	42ac      	cmp	r4, r5
 800b868:	d101      	bne.n	800b86e <__sfputs_r+0x12>
 800b86a:	2000      	movs	r0, #0
 800b86c:	e007      	b.n	800b87e <__sfputs_r+0x22>
 800b86e:	463a      	mov	r2, r7
 800b870:	4630      	mov	r0, r6
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	f7ff ffdc 	bl	800b832 <__sfputc_r>
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	d1f3      	bne.n	800b866 <__sfputs_r+0xa>
 800b87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b880 <_vfiprintf_r>:
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	460d      	mov	r5, r1
 800b886:	4614      	mov	r4, r2
 800b888:	4698      	mov	r8, r3
 800b88a:	4606      	mov	r6, r0
 800b88c:	b09d      	sub	sp, #116	; 0x74
 800b88e:	b118      	cbz	r0, 800b898 <_vfiprintf_r+0x18>
 800b890:	6a03      	ldr	r3, [r0, #32]
 800b892:	b90b      	cbnz	r3, 800b898 <_vfiprintf_r+0x18>
 800b894:	f7fd fac8 	bl	8008e28 <__sinit>
 800b898:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b89a:	07d9      	lsls	r1, r3, #31
 800b89c:	d405      	bmi.n	800b8aa <_vfiprintf_r+0x2a>
 800b89e:	89ab      	ldrh	r3, [r5, #12]
 800b8a0:	059a      	lsls	r2, r3, #22
 800b8a2:	d402      	bmi.n	800b8aa <_vfiprintf_r+0x2a>
 800b8a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8a6:	f7fd fceb 	bl	8009280 <__retarget_lock_acquire_recursive>
 800b8aa:	89ab      	ldrh	r3, [r5, #12]
 800b8ac:	071b      	lsls	r3, r3, #28
 800b8ae:	d501      	bpl.n	800b8b4 <_vfiprintf_r+0x34>
 800b8b0:	692b      	ldr	r3, [r5, #16]
 800b8b2:	b99b      	cbnz	r3, 800b8dc <_vfiprintf_r+0x5c>
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7fd fbfc 	bl	80090b4 <__swsetup_r>
 800b8bc:	b170      	cbz	r0, 800b8dc <_vfiprintf_r+0x5c>
 800b8be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c0:	07dc      	lsls	r4, r3, #31
 800b8c2:	d504      	bpl.n	800b8ce <_vfiprintf_r+0x4e>
 800b8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c8:	b01d      	add	sp, #116	; 0x74
 800b8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ce:	89ab      	ldrh	r3, [r5, #12]
 800b8d0:	0598      	lsls	r0, r3, #22
 800b8d2:	d4f7      	bmi.n	800b8c4 <_vfiprintf_r+0x44>
 800b8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d6:	f7fd fcd4 	bl	8009282 <__retarget_lock_release_recursive>
 800b8da:	e7f3      	b.n	800b8c4 <_vfiprintf_r+0x44>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e0:	2320      	movs	r3, #32
 800b8e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8e6:	2330      	movs	r3, #48	; 0x30
 800b8e8:	f04f 0901 	mov.w	r9, #1
 800b8ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800baa0 <_vfiprintf_r+0x220>
 800b8f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8f8:	4623      	mov	r3, r4
 800b8fa:	469a      	mov	sl, r3
 800b8fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b900:	b10a      	cbz	r2, 800b906 <_vfiprintf_r+0x86>
 800b902:	2a25      	cmp	r2, #37	; 0x25
 800b904:	d1f9      	bne.n	800b8fa <_vfiprintf_r+0x7a>
 800b906:	ebba 0b04 	subs.w	fp, sl, r4
 800b90a:	d00b      	beq.n	800b924 <_vfiprintf_r+0xa4>
 800b90c:	465b      	mov	r3, fp
 800b90e:	4622      	mov	r2, r4
 800b910:	4629      	mov	r1, r5
 800b912:	4630      	mov	r0, r6
 800b914:	f7ff ffa2 	bl	800b85c <__sfputs_r>
 800b918:	3001      	adds	r0, #1
 800b91a:	f000 80a9 	beq.w	800ba70 <_vfiprintf_r+0x1f0>
 800b91e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b920:	445a      	add	r2, fp
 800b922:	9209      	str	r2, [sp, #36]	; 0x24
 800b924:	f89a 3000 	ldrb.w	r3, [sl]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 80a1 	beq.w	800ba70 <_vfiprintf_r+0x1f0>
 800b92e:	2300      	movs	r3, #0
 800b930:	f04f 32ff 	mov.w	r2, #4294967295
 800b934:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b938:	f10a 0a01 	add.w	sl, sl, #1
 800b93c:	9304      	str	r3, [sp, #16]
 800b93e:	9307      	str	r3, [sp, #28]
 800b940:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b944:	931a      	str	r3, [sp, #104]	; 0x68
 800b946:	4654      	mov	r4, sl
 800b948:	2205      	movs	r2, #5
 800b94a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b94e:	4854      	ldr	r0, [pc, #336]	; (800baa0 <_vfiprintf_r+0x220>)
 800b950:	f7fd fc98 	bl	8009284 <memchr>
 800b954:	9a04      	ldr	r2, [sp, #16]
 800b956:	b9d8      	cbnz	r0, 800b990 <_vfiprintf_r+0x110>
 800b958:	06d1      	lsls	r1, r2, #27
 800b95a:	bf44      	itt	mi
 800b95c:	2320      	movmi	r3, #32
 800b95e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b962:	0713      	lsls	r3, r2, #28
 800b964:	bf44      	itt	mi
 800b966:	232b      	movmi	r3, #43	; 0x2b
 800b968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b96c:	f89a 3000 	ldrb.w	r3, [sl]
 800b970:	2b2a      	cmp	r3, #42	; 0x2a
 800b972:	d015      	beq.n	800b9a0 <_vfiprintf_r+0x120>
 800b974:	4654      	mov	r4, sl
 800b976:	2000      	movs	r0, #0
 800b978:	f04f 0c0a 	mov.w	ip, #10
 800b97c:	9a07      	ldr	r2, [sp, #28]
 800b97e:	4621      	mov	r1, r4
 800b980:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b984:	3b30      	subs	r3, #48	; 0x30
 800b986:	2b09      	cmp	r3, #9
 800b988:	d94d      	bls.n	800ba26 <_vfiprintf_r+0x1a6>
 800b98a:	b1b0      	cbz	r0, 800b9ba <_vfiprintf_r+0x13a>
 800b98c:	9207      	str	r2, [sp, #28]
 800b98e:	e014      	b.n	800b9ba <_vfiprintf_r+0x13a>
 800b990:	eba0 0308 	sub.w	r3, r0, r8
 800b994:	fa09 f303 	lsl.w	r3, r9, r3
 800b998:	4313      	orrs	r3, r2
 800b99a:	46a2      	mov	sl, r4
 800b99c:	9304      	str	r3, [sp, #16]
 800b99e:	e7d2      	b.n	800b946 <_vfiprintf_r+0xc6>
 800b9a0:	9b03      	ldr	r3, [sp, #12]
 800b9a2:	1d19      	adds	r1, r3, #4
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	9103      	str	r1, [sp, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfbb      	ittet	lt
 800b9ac:	425b      	neglt	r3, r3
 800b9ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b9b2:	9307      	strge	r3, [sp, #28]
 800b9b4:	9307      	strlt	r3, [sp, #28]
 800b9b6:	bfb8      	it	lt
 800b9b8:	9204      	strlt	r2, [sp, #16]
 800b9ba:	7823      	ldrb	r3, [r4, #0]
 800b9bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9be:	d10c      	bne.n	800b9da <_vfiprintf_r+0x15a>
 800b9c0:	7863      	ldrb	r3, [r4, #1]
 800b9c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9c4:	d134      	bne.n	800ba30 <_vfiprintf_r+0x1b0>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	3402      	adds	r4, #2
 800b9ca:	1d1a      	adds	r2, r3, #4
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	9203      	str	r2, [sp, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bfb8      	it	lt
 800b9d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9d8:	9305      	str	r3, [sp, #20]
 800b9da:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800baa4 <_vfiprintf_r+0x224>
 800b9de:	2203      	movs	r2, #3
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	7821      	ldrb	r1, [r4, #0]
 800b9e4:	f7fd fc4e 	bl	8009284 <memchr>
 800b9e8:	b138      	cbz	r0, 800b9fa <_vfiprintf_r+0x17a>
 800b9ea:	2240      	movs	r2, #64	; 0x40
 800b9ec:	9b04      	ldr	r3, [sp, #16]
 800b9ee:	eba0 000a 	sub.w	r0, r0, sl
 800b9f2:	4082      	lsls	r2, r0
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	3401      	adds	r4, #1
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fe:	2206      	movs	r2, #6
 800ba00:	4829      	ldr	r0, [pc, #164]	; (800baa8 <_vfiprintf_r+0x228>)
 800ba02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba06:	f7fd fc3d 	bl	8009284 <memchr>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d03f      	beq.n	800ba8e <_vfiprintf_r+0x20e>
 800ba0e:	4b27      	ldr	r3, [pc, #156]	; (800baac <_vfiprintf_r+0x22c>)
 800ba10:	bb1b      	cbnz	r3, 800ba5a <_vfiprintf_r+0x1da>
 800ba12:	9b03      	ldr	r3, [sp, #12]
 800ba14:	3307      	adds	r3, #7
 800ba16:	f023 0307 	bic.w	r3, r3, #7
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	9303      	str	r3, [sp, #12]
 800ba1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba20:	443b      	add	r3, r7
 800ba22:	9309      	str	r3, [sp, #36]	; 0x24
 800ba24:	e768      	b.n	800b8f8 <_vfiprintf_r+0x78>
 800ba26:	460c      	mov	r4, r1
 800ba28:	2001      	movs	r0, #1
 800ba2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba2e:	e7a6      	b.n	800b97e <_vfiprintf_r+0xfe>
 800ba30:	2300      	movs	r3, #0
 800ba32:	f04f 0c0a 	mov.w	ip, #10
 800ba36:	4619      	mov	r1, r3
 800ba38:	3401      	adds	r4, #1
 800ba3a:	9305      	str	r3, [sp, #20]
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba42:	3a30      	subs	r2, #48	; 0x30
 800ba44:	2a09      	cmp	r2, #9
 800ba46:	d903      	bls.n	800ba50 <_vfiprintf_r+0x1d0>
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0c6      	beq.n	800b9da <_vfiprintf_r+0x15a>
 800ba4c:	9105      	str	r1, [sp, #20]
 800ba4e:	e7c4      	b.n	800b9da <_vfiprintf_r+0x15a>
 800ba50:	4604      	mov	r4, r0
 800ba52:	2301      	movs	r3, #1
 800ba54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba58:	e7f0      	b.n	800ba3c <_vfiprintf_r+0x1bc>
 800ba5a:	ab03      	add	r3, sp, #12
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	462a      	mov	r2, r5
 800ba60:	4630      	mov	r0, r6
 800ba62:	4b13      	ldr	r3, [pc, #76]	; (800bab0 <_vfiprintf_r+0x230>)
 800ba64:	a904      	add	r1, sp, #16
 800ba66:	f7fc fda3 	bl	80085b0 <_printf_float>
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	1c78      	adds	r0, r7, #1
 800ba6e:	d1d6      	bne.n	800ba1e <_vfiprintf_r+0x19e>
 800ba70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba72:	07d9      	lsls	r1, r3, #31
 800ba74:	d405      	bmi.n	800ba82 <_vfiprintf_r+0x202>
 800ba76:	89ab      	ldrh	r3, [r5, #12]
 800ba78:	059a      	lsls	r2, r3, #22
 800ba7a:	d402      	bmi.n	800ba82 <_vfiprintf_r+0x202>
 800ba7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba7e:	f7fd fc00 	bl	8009282 <__retarget_lock_release_recursive>
 800ba82:	89ab      	ldrh	r3, [r5, #12]
 800ba84:	065b      	lsls	r3, r3, #25
 800ba86:	f53f af1d 	bmi.w	800b8c4 <_vfiprintf_r+0x44>
 800ba8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba8c:	e71c      	b.n	800b8c8 <_vfiprintf_r+0x48>
 800ba8e:	ab03      	add	r3, sp, #12
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	462a      	mov	r2, r5
 800ba94:	4630      	mov	r0, r6
 800ba96:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <_vfiprintf_r+0x230>)
 800ba98:	a904      	add	r1, sp, #16
 800ba9a:	f7fd f829 	bl	8008af0 <_printf_i>
 800ba9e:	e7e4      	b.n	800ba6a <_vfiprintf_r+0x1ea>
 800baa0:	0800c055 	.word	0x0800c055
 800baa4:	0800c05b 	.word	0x0800c05b
 800baa8:	0800c05f 	.word	0x0800c05f
 800baac:	080085b1 	.word	0x080085b1
 800bab0:	0800b85d 	.word	0x0800b85d

0800bab4 <_raise_r>:
 800bab4:	291f      	cmp	r1, #31
 800bab6:	b538      	push	{r3, r4, r5, lr}
 800bab8:	4604      	mov	r4, r0
 800baba:	460d      	mov	r5, r1
 800babc:	d904      	bls.n	800bac8 <_raise_r+0x14>
 800babe:	2316      	movs	r3, #22
 800bac0:	6003      	str	r3, [r0, #0]
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800baca:	b112      	cbz	r2, 800bad2 <_raise_r+0x1e>
 800bacc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bad0:	b94b      	cbnz	r3, 800bae6 <_raise_r+0x32>
 800bad2:	4620      	mov	r0, r4
 800bad4:	f000 f830 	bl	800bb38 <_getpid_r>
 800bad8:	462a      	mov	r2, r5
 800bada:	4601      	mov	r1, r0
 800badc:	4620      	mov	r0, r4
 800bade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bae2:	f000 b817 	b.w	800bb14 <_kill_r>
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d00a      	beq.n	800bb00 <_raise_r+0x4c>
 800baea:	1c59      	adds	r1, r3, #1
 800baec:	d103      	bne.n	800baf6 <_raise_r+0x42>
 800baee:	2316      	movs	r3, #22
 800baf0:	6003      	str	r3, [r0, #0]
 800baf2:	2001      	movs	r0, #1
 800baf4:	e7e7      	b.n	800bac6 <_raise_r+0x12>
 800baf6:	2400      	movs	r4, #0
 800baf8:	4628      	mov	r0, r5
 800bafa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bafe:	4798      	blx	r3
 800bb00:	2000      	movs	r0, #0
 800bb02:	e7e0      	b.n	800bac6 <_raise_r+0x12>

0800bb04 <raise>:
 800bb04:	4b02      	ldr	r3, [pc, #8]	; (800bb10 <raise+0xc>)
 800bb06:	4601      	mov	r1, r0
 800bb08:	6818      	ldr	r0, [r3, #0]
 800bb0a:	f7ff bfd3 	b.w	800bab4 <_raise_r>
 800bb0e:	bf00      	nop
 800bb10:	200001d0 	.word	0x200001d0

0800bb14 <_kill_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	2300      	movs	r3, #0
 800bb18:	4d06      	ldr	r5, [pc, #24]	; (800bb34 <_kill_r+0x20>)
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	4611      	mov	r1, r2
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	f7f6 fca8 	bl	8002476 <_kill>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d102      	bne.n	800bb30 <_kill_r+0x1c>
 800bb2a:	682b      	ldr	r3, [r5, #0]
 800bb2c:	b103      	cbz	r3, 800bb30 <_kill_r+0x1c>
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	bd38      	pop	{r3, r4, r5, pc}
 800bb32:	bf00      	nop
 800bb34:	200008d8 	.word	0x200008d8

0800bb38 <_getpid_r>:
 800bb38:	f7f6 bc96 	b.w	8002468 <_getpid>

0800bb3c <_init>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	bf00      	nop
 800bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb42:	bc08      	pop	{r3}
 800bb44:	469e      	mov	lr, r3
 800bb46:	4770      	bx	lr

0800bb48 <_fini>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr
