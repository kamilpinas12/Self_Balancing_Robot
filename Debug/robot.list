
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800bfb0  0800bfb0  0001bfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c540  0800c540  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c540  0800c540  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c540  0800c540  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c544  0800c544  0001c544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200001d4  0800c71c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  0800c71c  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ea7  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003262  00000000  00000000  000330e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00036350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfa  00000000  00000000  00037540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aa79  00000000  00000000  0003833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f49  00000000  00000000  00052db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fbaf  00000000  00000000  0006acfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f40  00000000  00000000  000fa8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001007ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bf94 	.word	0x0800bf94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800bf94 	.word	0x0800bf94

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_DMA_Init+0x38>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <MX_DMA_Init+0x38>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_DMA_Init+0x38>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 15, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	210f      	movs	r1, #15
 8001202:	200f      	movs	r0, #15
 8001204:	f002 fbaf 	bl	8003966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001208:	200f      	movs	r0, #15
 800120a:	f002 fbc8 	bl	800399e <HAL_NVIC_EnableIRQ>

}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0310 	add.w	r3, r7, #16
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001230:	4b40      	ldr	r3, [pc, #256]	; (8001334 <MX_GPIO_Init+0x118>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a3f      	ldr	r2, [pc, #252]	; (8001334 <MX_GPIO_Init+0x118>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <MX_GPIO_Init+0x118>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001248:	4b3a      	ldr	r3, [pc, #232]	; (8001334 <MX_GPIO_Init+0x118>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a39      	ldr	r2, [pc, #228]	; (8001334 <MX_GPIO_Init+0x118>)
 800124e:	f043 0320 	orr.w	r3, r3, #32
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b37      	ldr	r3, [pc, #220]	; (8001334 <MX_GPIO_Init+0x118>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <MX_GPIO_Init+0x118>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a33      	ldr	r2, [pc, #204]	; (8001334 <MX_GPIO_Init+0x118>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b31      	ldr	r3, [pc, #196]	; (8001334 <MX_GPIO_Init+0x118>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	4b2e      	ldr	r3, [pc, #184]	; (8001334 <MX_GPIO_Init+0x118>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <MX_GPIO_Init+0x118>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <MX_GPIO_Init+0x118>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001296:	4828      	ldr	r0, [pc, #160]	; (8001338 <MX_GPIO_Init+0x11c>)
 8001298:	f002 ffc2 	bl	8004220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2108      	movs	r1, #8
 80012a0:	4826      	ldr	r0, [pc, #152]	; (800133c <MX_GPIO_Init+0x120>)
 80012a2:	f002 ffbd 	bl	8004220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 80012a6:	2201      	movs	r2, #1
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	4824      	ldr	r0, [pc, #144]	; (800133c <MX_GPIO_Init+0x120>)
 80012ac:	f002 ffb8 	bl	8004220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2102      	movs	r1, #2
 80012b4:	4822      	ldr	r0, [pc, #136]	; (8001340 <MX_GPIO_Init+0x124>)
 80012b6:	f002 ffb3 	bl	8004220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2302      	movs	r3, #2
 80012ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 0310 	add.w	r3, r7, #16
 80012d0:	4619      	mov	r1, r3
 80012d2:	4819      	ldr	r0, [pc, #100]	; (8001338 <MX_GPIO_Init+0x11c>)
 80012d4:	f002 fe20 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 80012d8:	2388      	movs	r3, #136	; 0x88
 80012da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <MX_GPIO_Init+0x120>)
 80012f0:	f002 fe12 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2302      	movs	r3, #2
 8001302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_GPIO_Init+0x124>)
 800130c:	f002 fe04 	bl	8003f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_STATE_Pin;
 8001310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_GPIO_Init+0x120>)
 8001326:	f002 fdf7 	bl	8003f18 <HAL_GPIO_Init>

}
 800132a:	bf00      	nop
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40021000 	.word	0x40021000
 8001338:	40011000 	.word	0x40011000
 800133c:	40010800 	.word	0x40010800
 8001340:	40010c00 	.word	0x40010c00

08001344 <saturation>:
#include "helpers.h"

#define RET_FUN_SATURATION 100.0f


void saturation(float min, float max, float* val){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
	if(*val > max) *val = max;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff febc 	bl	80010d4 <__aeabi_fcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <saturation+0x24>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	601a      	str	r2, [r3, #0]
	if(*val < min) *val = min;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f7ff fece 	bl	8001110 <__aeabi_fcmpgt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d100      	bne.n	800137c <saturation+0x38>
}
 800137a:	e002      	b.n	8001382 <saturation+0x3e>
	if(*val < min) *val = min;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001390:	4b12      	ldr	r3, [pc, #72]	; (80013dc <MX_I2C1_Init+0x50>)
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <MX_I2C1_Init+0x54>)
 8001394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <MX_I2C1_Init+0x50>)
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_I2C1_Init+0x58>)
 800139a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_I2C1_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_I2C1_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_I2C1_Init+0x50>)
 80013aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_I2C1_Init+0x50>)
 80013ca:	f002 ff41 	bl	8004250 <HAL_I2C_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013d4:	f000 fd4e 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200001f0 	.word	0x200001f0
 80013e0:	40005400 	.word	0x40005400
 80013e4:	000186a0 	.word	0x000186a0

080013e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <MX_I2C2_Init+0x50>)
 80013ee:	4a13      	ldr	r2, [pc, #76]	; (800143c <MX_I2C2_Init+0x54>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_I2C2_Init+0x50>)
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <MX_I2C2_Init+0x58>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <MX_I2C2_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_I2C2_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_I2C2_Init+0x50>)
 8001406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <MX_I2C2_Init+0x50>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001412:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_I2C2_Init+0x50>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_I2C2_Init+0x50>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_I2C2_Init+0x50>)
 8001420:	2200      	movs	r2, #0
 8001422:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_I2C2_Init+0x50>)
 8001426:	f002 ff13 	bl	8004250 <HAL_I2C_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001430:	f000 fd20 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000244 	.word	0x20000244
 800143c:	40005800 	.word	0x40005800
 8001440:	000186a0 	.word	0x000186a0

08001444 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a2b      	ldr	r2, [pc, #172]	; (800150c <HAL_I2C_MspInit+0xc8>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d124      	bne.n	80014ae <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a29      	ldr	r2, [pc, #164]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800147c:	23c0      	movs	r3, #192	; 0xc0
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0318 	add.w	r3, r7, #24
 800148c:	4619      	mov	r1, r3
 800148e:	4821      	ldr	r0, [pc, #132]	; (8001514 <HAL_I2C_MspInit+0xd0>)
 8001490:	f002 fd42 	bl	8003f18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	4a1d      	ldr	r2, [pc, #116]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 800149a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800149e:	61d3      	str	r3, [r2, #28]
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014ac:	e029      	b.n	8001502 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a19      	ldr	r2, [pc, #100]	; (8001518 <HAL_I2C_MspInit+0xd4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d124      	bne.n	8001502 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b8:	4b15      	ldr	r3, [pc, #84]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d6:	2312      	movs	r3, #18
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4619      	mov	r1, r3
 80014e4:	480b      	ldr	r0, [pc, #44]	; (8001514 <HAL_I2C_MspInit+0xd0>)
 80014e6:	f002 fd17 	bl	8003f18 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_I2C_MspInit+0xcc>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
}
 8001502:	bf00      	nop
 8001504:	3728      	adds	r7, #40	; 0x28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40005400 	.word	0x40005400
 8001510:	40021000 	.word	0x40021000
 8001514:	40010c00 	.word	0x40010c00
 8001518:	40005800 	.word	0x40005800

0800151c <filter_init>:
 */

#include "low_pass_filter.h"


filter_typedef filter_init(float alpha){
 800151c:	b490      	push	{r4, r7}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
	filter_typedef f = {alpha, 0, 1};
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	2301      	movs	r3, #1
 8001532:	753b      	strb	r3, [r7, #20]
	return f;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	461c      	mov	r4, r3
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001540:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bc90      	pop	{r4, r7}
 800154c:	4770      	bx	lr

0800154e <filter>:


float filter(filter_typedef* filter, float new_value){
 800154e:	b590      	push	{r4, r7, lr}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
	if(filter->reset){
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7a1b      	ldrb	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <filter+0x22>
		filter->reset = 0;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	721a      	strb	r2, [r3, #8]
		filter->prev_value = new_value;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	605a      	str	r2, [r3, #4]
		return new_value;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	e021      	b.n	80015b4 <filter+0x66>
	}
	else{
		float filtered_value = (filter->alpha) * new_value + (1 - filter->alpha) * filter->prev_value;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fc0e 	bl	8000d98 <__aeabi_fmul>
 800157c:	4603      	mov	r3, r0
 800157e:	461c      	mov	r4, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800158a:	f7ff fafb 	bl	8000b84 <__aeabi_fsub>
 800158e:	4603      	mov	r3, r0
 8001590:	461a      	mov	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff fbfd 	bl	8000d98 <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff faf0 	bl	8000b88 <__addsf3>
 80015a8:	4603      	mov	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]
		filter->prev_value = filtered_value;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
		return filtered_value;
 80015b2:	68fb      	ldr	r3, [r7, #12]
	}
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd90      	pop	{r4, r7, pc}

080015bc <reset_filter>:


void reset_filter(filter_typedef* filter){
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	filter->reset = 1;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	721a      	strb	r2, [r3, #8]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int ch)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b0a      	cmp	r3, #10
 80015e0:	d109      	bne.n	80015f6 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80015e2:	230d      	movs	r3, #13
 80015e4:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 80015e6:	f107 010f 	add.w	r1, r7, #15
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	2201      	movs	r2, #1
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <__io_putchar+0x3c>)
 80015f2:	f005 fa4d 	bl	8006a90 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80015f6:	1d39      	adds	r1, r7, #4
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295
 80015fc:	2201      	movs	r2, #1
 80015fe:	4804      	ldr	r0, [pc, #16]	; (8001610 <__io_putchar+0x3c>)
 8001600:	f005 fa46 	bl	8006a90 <HAL_UART_Transmit>
    return 1;
 8001604:	2301      	movs	r3, #1
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000430 	.word	0x20000430

08001614 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	if(htim == stepper1.htim){
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	429a      	cmp	r2, r3
 8001624:	d103      	bne.n	800162e <HAL_TIM_PeriodElapsedCallback+0x1a>
		stepper_update(&stepper1);
 8001626:	4808      	ldr	r0, [pc, #32]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001628:	f001 fa10 	bl	8002a4c <stepper_update>
	}
	else if(htim == stepper2.htim){
		stepper_update(&stepper2);
	}
}
 800162c:	e007      	b.n	800163e <HAL_TIM_PeriodElapsedCallback+0x2a>
	else if(htim == stepper2.htim){
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	429a      	cmp	r2, r3
 8001636:	d102      	bne.n	800163e <HAL_TIM_PeriodElapsedCallback+0x2a>
		stepper_update(&stepper2);
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800163a:	f001 fa07 	bl	8002a4c <stepper_update>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000298 	.word	0x20000298
 800164c:	200002cc 	.word	0x200002cc

08001650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001654:	b0de      	sub	sp, #376	; 0x178
 8001656:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001658:	f002 f828 	bl	80036ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800165c:	f000 fbc4 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001660:	f7ff fddc 	bl	800121c <MX_GPIO_Init>
  MX_DMA_Init();
 8001664:	f7ff fdbc 	bl	80011e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001668:	f7ff fe90 	bl	800138c <MX_I2C1_Init>
  MX_TIM2_Init();
 800166c:	f001 fb7c 	bl	8002d68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001670:	f001 fbf0 	bl	8002e54 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001674:	f001 fea6 	bl	80033c4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001678:	f7ff feb6 	bl	80013e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  // stepper motor setup
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	9304      	str	r3, [sp, #16]
 8001682:	f241 7370 	movw	r3, #6000	; 0x1770
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	2308      	movs	r3, #8
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	4b68      	ldr	r3, [pc, #416]	; (8001830 <main+0x1e0>)
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4b66      	ldr	r3, [pc, #408]	; (8001830 <main+0x1e0>)
 8001696:	2200      	movs	r2, #0
 8001698:	4966      	ldr	r1, [pc, #408]	; (8001834 <main+0x1e4>)
 800169a:	4867      	ldr	r0, [pc, #412]	; (8001838 <main+0x1e8>)
 800169c:	f001 f84d 	bl	800273a <stepper_init>
		  DIR1_GPIO_Port, DIR1_Pin, 6000, -1);
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 80016a0:	2301      	movs	r3, #1
 80016a2:	9304      	str	r3, [sp, #16]
 80016a4:	f241 7370 	movw	r3, #6000	; 0x1770
 80016a8:	9303      	str	r3, [sp, #12]
 80016aa:	2302      	movs	r3, #2
 80016ac:	9302      	str	r3, [sp, #8]
 80016ae:	4b63      	ldr	r3, [pc, #396]	; (800183c <main+0x1ec>)
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <main+0x1e0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	4961      	ldr	r1, [pc, #388]	; (8001840 <main+0x1f0>)
 80016bc:	4861      	ldr	r0, [pc, #388]	; (8001844 <main+0x1f4>)
 80016be:	f001 f83c 	bl	800273a <stepper_init>
		  DIR2_GPIO_Port, DIR2_Pin, 6000, 1);


  // MPU setup
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 80016c2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016c6:	22d0      	movs	r2, #208	; 0xd0
 80016c8:	495f      	ldr	r1, [pc, #380]	; (8001848 <main+0x1f8>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fd44 	bl	8002158 <mpu_init>

  if(mpu_who_am_i(&mpu) != HAL_OK)
 80016d0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fd2b 	bl	8002130 <mpu_who_am_i>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d007      	beq.n	80016f0 <main+0xa0>
  {
	  while(1)
	  {
		  printf("Error while connecting to mpu 6050\n");
 80016e0:	485a      	ldr	r0, [pc, #360]	; (800184c <main+0x1fc>)
 80016e2:	f007 fdd5 	bl	8009290 <puts>
		  HAL_Delay(1000);
 80016e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ea:	f002 f841 	bl	8003770 <HAL_Delay>
		  printf("Error while connecting to mpu 6050\n");
 80016ee:	e7f7      	b.n	80016e0 <main+0x90>
	  }
  }

  set_gyro_scale(&mpu, range_250);
 80016f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fc5a 	bl	8001fb0 <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 80016fc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001700:	2100      	movs	r1, #0
 8001702:	4618      	mov	r0, r3
 8001704:	f000 fca2 	bl	800204c <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc44Hz_Gyro42Hz);
 8001708:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800170c:	2103      	movs	r1, #3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fcea 	bl	80020e8 <mpu_low_pass_filter>
  HAL_Delay(300);
 8001714:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001718:	f002 f82a 	bl	8003770 <HAL_Delay>


  mpu_gyro_calibration(&mpu);
 800171c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fe0d 	bl	8002340 <mpu_gyro_calibration>



  user_function_typedef user_function_array[] = {
 8001726:	4a4a      	ldr	r2, [pc, #296]	; (8001850 <main+0x200>)
 8001728:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800172c:	4611      	mov	r1, r2
 800172e:	2278      	movs	r2, #120	; 0x78
 8001730:	4618      	mov	r0, r3
 8001732:	f007 ff2b 	bl	800958c <memcpy>
		{&rotate, "rotate", 2},
		{&change_pid, "pid", 3}
  };


  uart_interface_init(&uart_interface, &huart1, &hdma_usart1_rx, user_function_array, sizeof(user_function_array) / sizeof(user_function_typedef));
 8001736:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800173a:	2205      	movs	r2, #5
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	4a45      	ldr	r2, [pc, #276]	; (8001854 <main+0x204>)
 8001740:	4945      	ldr	r1, [pc, #276]	; (8001858 <main+0x208>)
 8001742:	4846      	ldr	r0, [pc, #280]	; (800185c <main+0x20c>)
 8001744:	f001 fcb8 	bl	80030b8 <uart_interface_init>

  start_uart_interface(&uart_interface);
 8001748:	4844      	ldr	r0, [pc, #272]	; (800185c <main+0x20c>)
 800174a:	f001 fc89 	bl	8003060 <start_uart_interface>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // balancing parameters
  int delay = 4;
 800174e:	2304      	movs	r3, #4
 8001750:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158


  pid_typedef angle_pid = pid_init(480, 6, 1200);
 8001754:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001758:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 800175c:	4b40      	ldr	r3, [pc, #256]	; (8001860 <main+0x210>)
 800175e:	4a41      	ldr	r2, [pc, #260]	; (8001864 <main+0x214>)
 8001760:	4941      	ldr	r1, [pc, #260]	; (8001868 <main+0x218>)
 8001762:	f000 ff85 	bl	8002670 <pid_init>
  pid_typedef pos_pid = pid_init(0.001, 0.0000001, 0.01);
 8001766:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800176a:	f5a3 7092 	sub.w	r0, r3, #292	; 0x124
 800176e:	4b3f      	ldr	r3, [pc, #252]	; (800186c <main+0x21c>)
 8001770:	4a3f      	ldr	r2, [pc, #252]	; (8001870 <main+0x220>)
 8001772:	4940      	ldr	r1, [pc, #256]	; (8001874 <main+0x224>)
 8001774:	f000 ff7c 	bl	8002670 <pid_init>

  float k_tacho_feedback = 0.003;
 8001778:	4b3f      	ldr	r3, [pc, #252]	; (8001878 <main+0x228>)
 800177a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154


  filter_typedef speed_filter = filter_init(0.01);
 800177e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001782:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001786:	4939      	ldr	r1, [pc, #228]	; (800186c <main+0x21c>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fec7 	bl	800151c <filter_init>
  filter_typedef pos_pid_derivative_filter = filter_init(0.2);
 800178e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001792:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001796:	4939      	ldr	r1, [pc, #228]	; (800187c <main+0x22c>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff febf 	bl	800151c <filter_init>
  filter_typedef pos_pid_filter = filter_init(0.1);
 800179e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80017a2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80017a6:	4936      	ldr	r1, [pc, #216]	; (8001880 <main+0x230>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff feb7 	bl	800151c <filter_init>
  filter_typedef angle_pid_derivative_filter = filter_init(0.2);
 80017ae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80017b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017b6:	4931      	ldr	r1, [pc, #196]	; (800187c <main+0x22c>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff feaf 	bl	800151c <filter_init>


  unsigned long lst_time = HAL_GetTick();
 80017be:	f001 ffcd 	bl	800375c <HAL_GetTick>
 80017c2:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c


  while (1)
  {
	  mpu_calc_x_angle(&mpu);
 80017c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 feac 	bl	8002528 <mpu_calc_x_angle>

	  execute_uart_command(&uart_interface);
 80017d0:	4822      	ldr	r0, [pc, #136]	; (800185c <main+0x20c>)
 80017d2:	f001 fc97 	bl	8003104 <execute_uart_command>
	  start_uart_interface(&uart_interface);
 80017d6:	4821      	ldr	r0, [pc, #132]	; (800185c <main+0x20c>)
 80017d8:	f001 fc42 	bl	8003060 <start_uart_interface>


	  if(fabsf(mpu.x_angle) < 0.01){
 80017dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe29 	bl	800043c <__aeabi_f2d>
 80017ea:	a30f      	add	r3, pc, #60	; (adr r3, 8001828 <main+0x1d8>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7ff f8ee 	bl	80009d0 <__aeabi_dcmplt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 82df 	beq.w	8001dba <main+0x76a>
		  // set up before entering main loop

		  lst_time = HAL_GetTick();
 80017fc:	f001 ffae 	bl	800375c <HAL_GetTick>
 8001800:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c


		  // start motors
		  stepper_enable(&stepper1, 1);
 8001804:	2101      	movs	r1, #1
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <main+0x1e8>)
 8001808:	f000 ffdd 	bl	80027c6 <stepper_enable>
		  stepper_enable(&stepper2, 1);
 800180c:	2101      	movs	r1, #1
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <main+0x1f4>)
 8001810:	f000 ffd9 	bl	80027c6 <stepper_enable>

		  //restart motor position
		  stepper1.step_counter = 0;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <main+0x1e8>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
		  stepper2.step_counter = 0;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <main+0x1f4>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]

		  // main loop
		  while(fabsf(mpu.x_angle) < 0.5){
 8001820:	e287      	b.n	8001d32 <main+0x6e2>
 8001822:	bf00      	nop
 8001824:	f3af 8000 	nop.w
 8001828:	47ae147b 	.word	0x47ae147b
 800182c:	3f847ae1 	.word	0x3f847ae1
 8001830:	40010800 	.word	0x40010800
 8001834:	200003a0 	.word	0x200003a0
 8001838:	20000298 	.word	0x20000298
 800183c:	40010c00 	.word	0x40010c00
 8001840:	200003e8 	.word	0x200003e8
 8001844:	200002cc 	.word	0x200002cc
 8001848:	200001f0 	.word	0x200001f0
 800184c:	0800bfb0 	.word	0x0800bfb0
 8001850:	0800bfd4 	.word	0x0800bfd4
 8001854:	20000478 	.word	0x20000478
 8001858:	20000430 	.word	0x20000430
 800185c:	20000324 	.word	0x20000324
 8001860:	44960000 	.word	0x44960000
 8001864:	40c00000 	.word	0x40c00000
 8001868:	43f00000 	.word	0x43f00000
 800186c:	3c23d70a 	.word	0x3c23d70a
 8001870:	33d6bf95 	.word	0x33d6bf95
 8001874:	3a83126f 	.word	0x3a83126f
 8001878:	3b449ba6 	.word	0x3b449ba6
 800187c:	3e4ccccd 	.word	0x3e4ccccd
 8001880:	3dcccccd 	.word	0x3dcccccd
			  if((HAL_GetTick() - mpu.lst_time_x_angle) >= delay){
 8001884:	f001 ff6a 	bl	800375c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800188e:	1ad2      	subs	r2, r2, r3
 8001890:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001894:	429a      	cmp	r2, r3
 8001896:	f0c0 824c 	bcc.w	8001d32 <main+0x6e2>

				  mpu_calc_x_angle(&mpu);
 800189a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 fe42 	bl	8002528 <mpu_calc_x_angle>
				  float time_delta = (mpu.lst_time_x_angle - lst_time);
 80018a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80018a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fa1a 	bl	8000ce8 <__aeabi_ui2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
				  lst_time = mpu.lst_time_x_angle;
 80018ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c


				  float robot_speed = (stepper1.speed + stepper2.speed) / 2;
 80018c2:	4bc7      	ldr	r3, [pc, #796]	; (8001be0 <main+0x590>)
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	4ac7      	ldr	r2, [pc, #796]	; (8001be4 <main+0x594>)
 80018c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80018ca:	4611      	mov	r1, r2
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff f95b 	bl	8000b88 <__addsf3>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fb11 	bl	8000f00 <__aeabi_fdiv>
 80018de:	4603      	mov	r3, r0
 80018e0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

				  float position_error = stepper1.step_counter-set_pos;
 80018e4:	4bbe      	ldr	r3, [pc, #760]	; (8001be0 <main+0x590>)
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	4bbf      	ldr	r3, [pc, #764]	; (8001be8 <main+0x598>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff f9fe 	bl	8000cf0 <__aeabi_i2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

				  float desired_speed = (position_error * 0.05);
 80018fa:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80018fe:	f7fe fd9d 	bl	800043c <__aeabi_f2d>
 8001902:	a3b5      	add	r3, pc, #724	; (adr r3, 8001bd8 <main+0x588>)
 8001904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001908:	f7fe fdf0 	bl	80004ec <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f8e2 	bl	8000adc <__aeabi_d2f>
 8001918:	4602      	mov	r2, r0
 800191a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800191e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001922:	601a      	str	r2, [r3, #0]
				  saturation(-40, 40, &desired_speed);
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	461a      	mov	r2, r3
 800192a:	49b0      	ldr	r1, [pc, #704]	; (8001bec <main+0x59c>)
 800192c:	48b0      	ldr	r0, [pc, #704]	; (8001bf0 <main+0x5a0>)
 800192e:	f7ff fd09 	bl	8001344 <saturation>

				  pos_pid.error = filter(&pos_pid_filter, robot_speed - desired_speed);
 8001932:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001936:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8001942:	f7ff f91f 	bl	8000b84 <__aeabi_fsub>
 8001946:	4603      	mov	r3, r0
 8001948:	461a      	mov	r2, r3
 800194a:	f107 0318 	add.w	r3, r7, #24
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fdfc 	bl	800154e <filter>
 8001956:	4602      	mov	r2, r0
 8001958:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800195c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001960:	611a      	str	r2, [r3, #16]


				  // pos P
				  float p_pos = pos_pid.error * pos_pid.kp;
 8001962:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001966:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001970:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4619      	mov	r1, r3
 8001978:	4610      	mov	r0, r2
 800197a:	f7ff fa0d 	bl	8000d98 <__aeabi_fmul>
 800197e:	4603      	mov	r3, r0
 8001980:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

				  // pos I
				  pos_pid.i += 0.5 * (pos_pid.error + pos_pid.prev_error) * pos_pid.ki * time_delta;
 8001984:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001988:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd54 	bl	800043c <__aeabi_f2d>
 8001994:	4604      	mov	r4, r0
 8001996:	460d      	mov	r5, r1
 8001998:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800199c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80019a6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	4619      	mov	r1, r3
 80019ae:	4610      	mov	r0, r2
 80019b0:	f7ff f8ea 	bl	8000b88 <__addsf3>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fd40 	bl	800043c <__aeabi_f2d>
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b8c      	ldr	r3, [pc, #560]	; (8001bf4 <main+0x5a4>)
 80019c2:	f7fe fd93 	bl	80004ec <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4690      	mov	r8, r2
 80019cc:	4699      	mov	r9, r3
 80019ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80019d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7fe fd2f 	bl	800043c <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4640      	mov	r0, r8
 80019e4:	4649      	mov	r1, r9
 80019e6:	f7fe fd81 	bl	80004ec <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4690      	mov	r8, r2
 80019f0:	4699      	mov	r9, r3
 80019f2:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80019f6:	f7fe fd21 	bl	800043c <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4640      	mov	r0, r8
 8001a00:	4649      	mov	r1, r9
 8001a02:	f7fe fd73 	bl	80004ec <__aeabi_dmul>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	f7fe fbb7 	bl	8000180 <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff f85f 	bl	8000adc <__aeabi_d2f>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001a24:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a28:	60da      	str	r2, [r3, #12]
				  saturation(-0.2, 0.2, &pos_pid.i);
 8001a2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a2e:	330c      	adds	r3, #12
 8001a30:	461a      	mov	r2, r3
 8001a32:	4971      	ldr	r1, [pc, #452]	; (8001bf8 <main+0x5a8>)
 8001a34:	4871      	ldr	r0, [pc, #452]	; (8001bfc <main+0x5ac>)
 8001a36:	f7ff fc85 	bl	8001344 <saturation>

				  // pos D
				  float filtered_error = filter(&pos_pid_derivative_filter, pos_pid.error);
 8001a3a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001a3e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a42:	691a      	ldr	r2, [r3, #16]
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fd7f 	bl	800154e <filter>
 8001a50:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
				  float d_pos = pos_pid.kd * (filtered_error - pos_pid.prev_error) / time_delta;
 8001a54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001a58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a5c:	689c      	ldr	r4, [r3, #8]
 8001a5e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001a62:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8001a6e:	f7ff f889 	bl	8000b84 <__aeabi_fsub>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4619      	mov	r1, r3
 8001a76:	4620      	mov	r0, r4
 8001a78:	f7ff f98e 	bl	8000d98 <__aeabi_fmul>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fa3c 	bl	8000f00 <__aeabi_fdiv>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

				  //tacho feedback
				  float tacho_feedback_angle = filter(&speed_filter, robot_speed) * k_tacho_feedback;
 8001a8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a92:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fd59 	bl	800154e <filter>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f978 	bl	8000d98 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ab0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001ab4:	601a      	str	r2, [r3, #0]
				  saturation(-0.15, 0.15, &tacho_feedback_angle);
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4951      	ldr	r1, [pc, #324]	; (8001c00 <main+0x5b0>)
 8001abc:	4851      	ldr	r0, [pc, #324]	; (8001c04 <main+0x5b4>)
 8001abe:	f7ff fc41 	bl	8001344 <saturation>

//				  if(fabs(robot_speed) < 5){
//					 tacho_feedback_angle = 0;
//				  }

				  float target_angle = p_pos + pos_pid.i + d_pos + tacho_feedback_angle;
 8001ac2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001ac6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f859 	bl	8000b88 <__addsf3>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f853 	bl	8000b88 <__addsf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001aea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f7ff f848 	bl	8000b88 <__addsf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b00:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b04:	601a      	str	r2, [r3, #0]

				  saturation(-0.25, 0.25, &target_angle);
 8001b06:	463b      	mov	r3, r7
 8001b08:	461a      	mov	r2, r3
 8001b0a:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001b0e:	483e      	ldr	r0, [pc, #248]	; (8001c08 <main+0x5b8>)
 8001b10:	f7ff fc18 	bl	8001344 <saturation>



				  // angle PID
				  angle_pid.error =  target_angle - mpu.x_angle;
 8001b14:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b18:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f82d 	bl	8000b84 <__aeabi_fsub>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b36:	611a      	str	r2, [r3, #16]

				  // P
				  float p = angle_pid.error * angle_pid.kp;
 8001b38:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4610      	mov	r0, r2
 8001b50:	f7ff f922 	bl	8000d98 <__aeabi_fmul>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

				  // I with staturation
				  angle_pid.i += ((angle_pid.error + angle_pid.prev_error) * time_delta * angle_pid.ki) / 2;
 8001b5a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b62:	68dc      	ldr	r4, [r3, #12]
 8001b64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f7ff f804 	bl	8000b88 <__addsf3>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff f906 	bl	8000d98 <__aeabi_fmul>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	f7ff f8fb 	bl	8000d98 <__aeabi_fmul>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f9a9 	bl	8000f00 <__aeabi_fdiv>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f7fe ffe8 	bl	8000b88 <__addsf3>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001bc4:	60da      	str	r2, [r3, #12]
				  saturation(-60, 60, &angle_pid.i);
 8001bc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bca:	330c      	adds	r3, #12
 8001bcc:	461a      	mov	r2, r3
 8001bce:	490f      	ldr	r1, [pc, #60]	; (8001c0c <main+0x5bc>)
 8001bd0:	e01e      	b.n	8001c10 <main+0x5c0>
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	9999999a 	.word	0x9999999a
 8001bdc:	3fa99999 	.word	0x3fa99999
 8001be0:	20000298 	.word	0x20000298
 8001be4:	200002cc 	.word	0x200002cc
 8001be8:	20000300 	.word	0x20000300
 8001bec:	42200000 	.word	0x42200000
 8001bf0:	c2200000 	.word	0xc2200000
 8001bf4:	3fe00000 	.word	0x3fe00000
 8001bf8:	3e4ccccd 	.word	0x3e4ccccd
 8001bfc:	be4ccccd 	.word	0xbe4ccccd
 8001c00:	3e19999a 	.word	0x3e19999a
 8001c04:	be19999a 	.word	0xbe19999a
 8001c08:	be800000 	.word	0xbe800000
 8001c0c:	42700000 	.word	0x42700000
 8001c10:	486d      	ldr	r0, [pc, #436]	; (8001dc8 <main+0x778>)
 8001c12:	f7ff fb97 	bl	8001344 <saturation>

				  // D
				  filtered_error = filter(&angle_pid_derivative_filter, angle_pid.error);
 8001c16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fc91 	bl	800154e <filter>
 8001c2c:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
				  float d = angle_pid.kd * (filtered_error - angle_pid.prev_error)/time_delta;
 8001c30:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c38:	689c      	ldr	r4, [r3, #8]
 8001c3a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	4619      	mov	r1, r3
 8001c46:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8001c4a:	f7fe ff9b 	bl	8000b84 <__aeabi_fsub>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4619      	mov	r1, r3
 8001c52:	4620      	mov	r0, r4
 8001c54:	f7ff f8a0 	bl	8000d98 <__aeabi_fmul>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f94e 	bl	8000f00 <__aeabi_fdiv>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

				  float pid = p + angle_pid.i + d;
 8001c6a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe ff85 	bl	8000b88 <__addsf3>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4619      	mov	r1, r3
 8001c82:	f8d7 0134 	ldr.w	r0, [r7, #308]	; 0x134
 8001c86:	f7fe ff7f 	bl	8000b88 <__addsf3>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130


				  if(spin_duration_ms > 0){
 8001c90:	4b4e      	ldr	r3, [pc, #312]	; (8001dcc <main+0x77c>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d028      	beq.n	8001cea <main+0x69a>
					  stepper_set_speed(&stepper1, pid + spin_value);
 8001c98:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <main+0x780>)
 8001c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f826 	bl	8000cf0 <__aeabi_i2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ff6c 	bl	8000b88 <__addsf3>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4847      	ldr	r0, [pc, #284]	; (8001dd4 <main+0x784>)
 8001cb6:	f000 fdbb 	bl	8002830 <stepper_set_speed>
				  	  stepper_set_speed(&stepper2, pid - spin_value);
 8001cba:	4b45      	ldr	r3, [pc, #276]	; (8001dd0 <main+0x780>)
 8001cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f815 	bl	8000cf0 <__aeabi_i2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001cce:	f7fe ff59 	bl	8000b84 <__aeabi_fsub>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4840      	ldr	r0, [pc, #256]	; (8001dd8 <main+0x788>)
 8001cd8:	f000 fdaa 	bl	8002830 <stepper_set_speed>
				  	  spin_duration_ms --;
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <main+0x77c>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <main+0x77c>)
 8001ce6:	801a      	strh	r2, [r3, #0]
 8001ce8:	e009      	b.n	8001cfe <main+0x6ae>
				  }
				  else{
					  stepper_set_speed(&stepper1, pid);
 8001cea:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001cee:	4839      	ldr	r0, [pc, #228]	; (8001dd4 <main+0x784>)
 8001cf0:	f000 fd9e 	bl	8002830 <stepper_set_speed>
				  	  stepper_set_speed(&stepper2, pid);
 8001cf4:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001cf8:	4837      	ldr	r0, [pc, #220]	; (8001dd8 <main+0x788>)
 8001cfa:	f000 fd99 	bl	8002830 <stepper_set_speed>
				  }

				  angle_pid.prev_error = angle_pid.error;
 8001cfe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d10:	615a      	str	r2, [r3, #20]
				  pos_pid.prev_error = pos_pid.error;
 8001d12:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d16:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8001d20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d24:	615a      	str	r2, [r3, #20]


				  execute_uart_command(&uart_interface);
 8001d26:	482d      	ldr	r0, [pc, #180]	; (8001ddc <main+0x78c>)
 8001d28:	f001 f9ec 	bl	8003104 <execute_uart_command>
				  start_uart_interface(&uart_interface);
 8001d2c:	482b      	ldr	r0, [pc, #172]	; (8001ddc <main+0x78c>)
 8001d2e:	f001 f997 	bl	8003060 <start_uart_interface>
		  while(fabsf(mpu.x_angle) < 0.5){
 8001d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d3a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f9c8 	bl	80010d4 <__aeabi_fcmplt>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f47f ad9c 	bne.w	8001884 <main+0x234>
			  }


		  }
		  //stop motors
		  stepper_set_speed(&stepper1, 0);
 8001d4c:	f04f 0100 	mov.w	r1, #0
 8001d50:	4820      	ldr	r0, [pc, #128]	; (8001dd4 <main+0x784>)
 8001d52:	f000 fd6d 	bl	8002830 <stepper_set_speed>
		  stepper_set_speed(&stepper2, 0);
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <main+0x788>)
 8001d5c:	f000 fd68 	bl	8002830 <stepper_set_speed>
		  stepper_enable(&stepper1, 0);
 8001d60:	2100      	movs	r1, #0
 8001d62:	481c      	ldr	r0, [pc, #112]	; (8001dd4 <main+0x784>)
 8001d64:	f000 fd2f 	bl	80027c6 <stepper_enable>
		  stepper_enable(&stepper2, 0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	481b      	ldr	r0, [pc, #108]	; (8001dd8 <main+0x788>)
 8001d6c:	f000 fd2b 	bl	80027c6 <stepper_enable>

		  pid_reset(&angle_pid);
 8001d70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 fca4 	bl	80026c2 <pid_reset>
		  pid_reset(&pos_pid);
 8001d7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fc9f 	bl	80026c2 <pid_reset>

		  reset_filter(&speed_filter);
 8001d84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fc17 	bl	80015bc <reset_filter>
		  reset_filter(&pos_pid_derivative_filter);
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fc12 	bl	80015bc <reset_filter>
		  reset_filter(&pos_pid_filter);
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fc0d 	bl	80015bc <reset_filter>
		  reset_filter(&angle_pid_derivative_filter);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fc08 	bl	80015bc <reset_filter>


		  set_pos = 0;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <main+0x790>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
		  set_speed = 0;
 8001db2:	4b0c      	ldr	r3, [pc, #48]	; (8001de4 <main+0x794>)
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]

	  }


	  HAL_Delay(delay);
 8001dba:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fcd6 	bl	8003770 <HAL_Delay>
	  mpu_calc_x_angle(&mpu);
 8001dc4:	e4ff      	b.n	80017c6 <main+0x176>
 8001dc6:	bf00      	nop
 8001dc8:	c2700000 	.word	0xc2700000
 8001dcc:	20000398 	.word	0x20000398
 8001dd0:	2000039a 	.word	0x2000039a
 8001dd4:	20000298 	.word	0x20000298
 8001dd8:	200002cc 	.word	0x200002cc
 8001ddc:	20000324 	.word	0x20000324
 8001de0:	20000300 	.word	0x20000300
 8001de4:	20000304 	.word	0x20000304

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b090      	sub	sp, #64	; 0x40
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	2228      	movs	r2, #40	; 0x28
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f007 fb2a 	bl	8009450 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e2c:	f107 0318 	add.w	r3, r7, #24
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fa73 	bl	800531c <HAL_RCC_OscConfig>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001e3c:	f000 f81a 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e40:	230f      	movs	r3, #15
 8001e42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e44:	2302      	movs	r3, #2
 8001e46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2102      	movs	r1, #2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fce0 	bl	8005820 <HAL_RCC_ClockConfig>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001e66:	f000 f805 	bl	8001e74 <Error_Handler>
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	3740      	adds	r7, #64	; 0x40
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  stepper_set_speed(&stepper1, 0);
 8001e78:	f04f 0100 	mov.w	r1, #0
 8001e7c:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <Error_Handler+0x30>)
 8001e7e:	f000 fcd7 	bl	8002830 <stepper_set_speed>
  stepper_set_speed(&stepper2, 0);
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <Error_Handler+0x34>)
 8001e88:	f000 fcd2 	bl	8002830 <stepper_set_speed>
  stepper_enable(&stepper1, 0);
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <Error_Handler+0x30>)
 8001e90:	f000 fc99 	bl	80027c6 <stepper_enable>
  stepper_enable(&stepper2, 0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <Error_Handler+0x34>)
 8001e98:	f000 fc95 	bl	80027c6 <stepper_enable>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop

  __disable_irq();
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <Error_Handler+0x2c>
 8001ea2:	bf00      	nop
 8001ea4:	20000298 	.word	0x20000298
 8001ea8:	200002cc 	.word	0x200002cc

08001eac <mpu_write_reg>:




static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af04      	add	r7, sp, #16
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	791b      	ldrb	r3, [r3, #4]
 8001ec4:	b299      	uxth	r1, r3
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	1cbb      	adds	r3, r7, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f002 fafd 	bl	80044d8 <HAL_I2C_Mem_Write>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b088      	sub	sp, #32
 8001eea:	af04      	add	r7, sp, #16
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	460b      	mov	r3, r1
 8001ef0:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	791b      	ldrb	r3, [r3, #4]
 8001efa:	b299      	uxth	r1, r3
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	9302      	str	r3, [sp, #8]
 8001f06:	2301      	movs	r3, #1
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	f107 030f 	add.w	r3, r7, #15
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	f002 fbdb 	bl	80046cc <HAL_I2C_Mem_Read>
	return tmp;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001f2c:	216b      	movs	r1, #107	; 0x6b
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffd9 	bl	8001ee6 <mpu_read_reg>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f3e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8001f40:	78fb      	ldrb	r3, [r7, #3]
 8001f42:	01db      	lsls	r3, r3, #7
 8001f44:	b25a      	sxtb	r2, r3
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	461a      	mov	r2, r3
 8001f54:	216b      	movs	r1, #107	; 0x6b
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa8 	bl	8001eac <mpu_write_reg>
}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001f70:	216b      	movs	r1, #107	; 0x6b
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff ffb7 	bl	8001ee6 <mpu_read_reg>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f82:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 8001f84:	78fb      	ldrb	r3, [r7, #3]
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	216b      	movs	r1, #107	; 0x6b
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff83 	bl	8001eac <mpu_write_reg>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 8001fbc:	211b      	movs	r1, #27
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff91 	bl	8001ee6 <mpu_read_reg>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	f023 0318 	bic.w	r3, r3, #24
 8001fce:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	f003 0318 	and.w	r3, r3, #24
 8001fda:	b25a      	sxtb	r2, r3
 8001fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	211b      	movs	r1, #27
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ff5d 	bl	8001eac <mpu_write_reg>

	switch (range){
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d81b      	bhi.n	8002030 <set_gyro_scale+0x80>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <set_gyro_scale+0x50>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002011 	.word	0x08002011
 8002004:	08002019 	.word	0x08002019
 8002008:	08002021 	.word	0x08002021
 800200c:	08002029 	.word	0x08002029
	case range_250:
		mpu->gyro_scale = 0.007633;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <set_gyro_scale+0x8c>)
 8002014:	609a      	str	r2, [r3, #8]
		break;
 8002016:	e00c      	b.n	8002032 <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a09      	ldr	r2, [pc, #36]	; (8002040 <set_gyro_scale+0x90>)
 800201c:	609a      	str	r2, [r3, #8]
		break;
 800201e:	e008      	b.n	8002032 <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <set_gyro_scale+0x94>)
 8002024:	609a      	str	r2, [r3, #8]
		break;
 8002026:	e004      	b.n	8002032 <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <set_gyro_scale+0x98>)
 800202c:	609a      	str	r2, [r3, #8]
		break;
 800202e:	e000      	b.n	8002032 <set_gyro_scale+0x82>
	default:
		break;
 8002030:	bf00      	nop
	}
}
 8002032:	bf00      	nop
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	3bfa1e3f 	.word	0x3bfa1e3f
 8002040:	3c7a2270 	.word	0x3c7a2270
 8002044:	3cf9bfdf 	.word	0x3cf9bfdf
 8002048:	3d79c0ec 	.word	0x3d79c0ec

0800204c <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8002058:	211c      	movs	r1, #28
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff43 	bl	8001ee6 <mpu_read_reg>
 8002060:	4603      	mov	r3, r0
 8002062:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	f023 0318 	bic.w	r3, r3, #24
 800206a:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	b25b      	sxtb	r3, r3
 8002072:	f003 0318 	and.w	r3, r3, #24
 8002076:	b25a      	sxtb	r2, r3
 8002078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207c:	4313      	orrs	r3, r2
 800207e:	b25b      	sxtb	r3, r3
 8002080:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	461a      	mov	r2, r3
 8002086:	211c      	movs	r1, #28
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff0f 	bl	8001eac <mpu_write_reg>

	switch (range)
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d81b      	bhi.n	80020cc <set_accelerometer_scale+0x80>
 8002094:	a201      	add	r2, pc, #4	; (adr r2, 800209c <set_accelerometer_scale+0x50>)
 8002096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209a:	bf00      	nop
 800209c:	080020ad 	.word	0x080020ad
 80020a0:	080020b5 	.word	0x080020b5
 80020a4:	080020bd 	.word	0x080020bd
 80020a8:	080020c5 	.word	0x080020c5
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <set_accelerometer_scale+0x8c>)
 80020b0:	60da      	str	r2, [r3, #12]
		break;
 80020b2:	e00c      	b.n	80020ce <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <set_accelerometer_scale+0x90>)
 80020b8:	60da      	str	r2, [r3, #12]
		break;
 80020ba:	e008      	b.n	80020ce <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <set_accelerometer_scale+0x94>)
 80020c0:	60da      	str	r2, [r3, #12]
		break;
 80020c2:	e004      	b.n	80020ce <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <set_accelerometer_scale+0x98>)
 80020c8:	60da      	str	r2, [r3, #12]
		break;
 80020ca:	e000      	b.n	80020ce <set_accelerometer_scale+0x82>
	default:
		break;
 80020cc:	bf00      	nop
	}
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	387fda40 	.word	0x387fda40
 80020dc:	38ffda40 	.word	0x38ffda40
 80020e0:	397fda40 	.word	0x397fda40
 80020e4:	39fff518 	.word	0x39fff518

080020e8 <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 80020f4:	211a      	movs	r1, #26
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fef5 	bl	8001ee6 <mpu_read_reg>
 80020fc:	4603      	mov	r3, r0
 80020fe:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	f023 0307 	bic.w	r3, r3, #7
 8002106:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 8002108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	b25a      	sxtb	r2, r3
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	4313      	orrs	r3, r2
 8002118:	b25b      	sxtb	r3, r3
 800211a:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	461a      	mov	r2, r3
 8002120:	211a      	movs	r1, #26
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fec2 	bl	8001eac <mpu_write_reg>
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8002138:	2175      	movs	r1, #117	; 0x75
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fed3 	bl	8001ee6 <mpu_read_reg>
 8002140:	4603      	mov	r3, r0
 8002142:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b68      	cmp	r3, #104	; 0x68
 8002148:	d101      	bne.n	800214e <mpu_who_am_i+0x1e>
		return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
	}
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b096      	sub	sp, #88	; 0x58
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	4613      	mov	r3, r2
 8002164:	71fb      	strb	r3, [r7, #7]
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	617b      	str	r3, [r7, #20]
	mpu.i2c_address = i2c_address;
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	763b      	strb	r3, [r7, #24]


	mpu_reset(&mpu, 1);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	2101      	movs	r1, #1
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fed3 	bl	8001f20 <mpu_reset>

	HAL_Delay(1000);
 800217a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800217e:	f001 faf7 	bl	8003770 <HAL_Delay>

	mpu_sleep_mode(&mpu, 0);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff feeb 	bl	8001f64 <mpu_sleep_mode>

	set_gyro_scale(&mpu, range_250);
 800218e:	f107 0314 	add.w	r3, r7, #20
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff0b 	bl	8001fb0 <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff53 	bl	800204c <set_accelerometer_scale>

	mpu.gx_bias = 0;
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
	mpu.gy_bias = 0;
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
	mpu.gz_bias = 0;
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	mpu.lst_time_x_angle = HAL_GetTick();
 80021b8:	f001 fad0 	bl	800375c <HAL_GetTick>
 80021bc:	4603      	mov	r3, r0
 80021be:	653b      	str	r3, [r7, #80]	; 0x50
	mpu.lst_time_y_angle = HAL_GetTick();
 80021c0:	f001 facc 	bl	800375c <HAL_GetTick>
 80021c4:	4603      	mov	r3, r0
 80021c6:	657b      	str	r3, [r7, #84]	; 0x54


	return mpu;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2244      	movs	r2, #68	; 0x44
 80021d2:	4619      	mov	r1, r3
 80021d4:	f007 f9da 	bl	800958c <memcpy>
}
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	3758      	adds	r7, #88	; 0x58
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <mpu_get_data>:



void mpu_get_data(mpu6050_typedef *mpu)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af04      	add	r7, sp, #16
 80021e6:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	791b      	ldrb	r3, [r3, #4]
 80021f0:	b299      	uxth	r1, r3
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	9302      	str	r3, [sp, #8]
 80021f8:	230e      	movs	r3, #14
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	f107 0308 	add.w	r3, r7, #8
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	2301      	movs	r3, #1
 8002204:	223b      	movs	r2, #59	; 0x3b
 8002206:	f002 fa61 	bl	80046cc <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 800220a:	7a3b      	ldrb	r3, [r7, #8]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b21a      	sxth	r2, r3
 8002210:	7a7b      	ldrb	r3, [r7, #9]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21b      	sxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fd69 	bl	8000cf0 <__aeabi_i2f>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f7fe fdb6 	bl	8000d98 <__aeabi_fmul>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 8002234:	7abb      	ldrb	r3, [r7, #10]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21a      	sxth	r2, r3
 800223a:	7afb      	ldrb	r3, [r7, #11]
 800223c:	b21b      	sxth	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b21b      	sxth	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fd54 	bl	8000cf0 <__aeabi_i2f>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f7fe fda1 	bl	8000d98 <__aeabi_fmul>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 800225e:	7b3b      	ldrb	r3, [r7, #12]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b21a      	sxth	r2, r3
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	b21b      	sxth	r3, r3
 8002268:	4313      	orrs	r3, r2
 800226a:	b21b      	sxth	r3, r3
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe fd3f 	bl	8000cf0 <__aeabi_i2f>
 8002272:	4602      	mov	r2, r0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4619      	mov	r1, r3
 800227a:	4610      	mov	r0, r2
 800227c:	f7fe fd8c 	bl	8000d98 <__aeabi_fmul>
 8002280:	4603      	mov	r3, r0
 8002282:	461a      	mov	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 8002288:	7c3b      	ldrb	r3, [r7, #16]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	7c7b      	ldrb	r3, [r7, #17]
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21b      	sxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f7fe fd2a 	bl	8000cf0 <__aeabi_i2f>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7fe fd77 	bl	8000d98 <__aeabi_fmul>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4610      	mov	r0, r2
 80022b6:	f7fe fc65 	bl	8000b84 <__aeabi_fsub>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 80022c2:	7cbb      	ldrb	r3, [r7, #18]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	b21a      	sxth	r2, r3
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	4313      	orrs	r3, r2
 80022ce:	b21b      	sxth	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7fe fd0d 	bl	8000cf0 <__aeabi_i2f>
 80022d6:	4602      	mov	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f7fe fd5a 	bl	8000d98 <__aeabi_fmul>
 80022e4:	4603      	mov	r3, r0
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7fe fc48 	bl	8000b84 <__aeabi_fsub>
 80022f4:	4603      	mov	r3, r0
 80022f6:	461a      	mov	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 80022fc:	7d3b      	ldrb	r3, [r7, #20]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b21a      	sxth	r2, r3
 8002302:	7d7b      	ldrb	r3, [r7, #21]
 8002304:	b21b      	sxth	r3, r3
 8002306:	4313      	orrs	r3, r2
 8002308:	b21b      	sxth	r3, r3
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fcf0 	bl	8000cf0 <__aeabi_i2f>
 8002310:	4602      	mov	r2, r0
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f7fe fd3d 	bl	8000d98 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	461a      	mov	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4619      	mov	r1, r3
 8002328:	4610      	mov	r0, r2
 800232a:	f7fe fc2b 	bl	8000b84 <__aeabi_fsub>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002336:	bf00      	nop
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <mpu_gyro_calibration>:


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800234e:	485e      	ldr	r0, [pc, #376]	; (80024c8 <mpu_gyro_calibration+0x188>)
 8002350:	f001 ff66 	bl	8004220 <HAL_GPIO_WritePin>
	uint8_t counter = 100;
 8002354:	2364      	movs	r3, #100	; 0x64
 8002356:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e060      	b.n	8002432 <mpu_gyro_calibration+0xf2>
	{
		mpu_get_data(mpu);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff35 	bl	80021e0 <mpu_get_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800237e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fec4 	bl	8001110 <__aeabi_fcmpgt>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d117      	bne.n	80023be <mpu_gyro_calibration+0x7e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002396:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe feb8 	bl	8001110 <__aeabi_fcmpgt>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10b      	bne.n	80023be <mpu_gyro_calibration+0x7e>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023ae:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe feac 	bl	8001110 <__aeabi_fcmpgt>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01b      	beq.n	80023f6 <mpu_gyro_calibration+0xb6>
			i = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
			gx_sum = 0;
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
			gy_sum = 0;
 80023c8:	f04f 0300 	mov.w	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
			gz_sum = 0;
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023da:	483b      	ldr	r0, [pc, #236]	; (80024c8 <mpu_gyro_calibration+0x188>)
 80023dc:	f001 ff20 	bl	8004220 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 80023e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023e4:	f001 f9c4 	bl	8003770 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023e8:	2200      	movs	r2, #0
 80023ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ee:	4836      	ldr	r0, [pc, #216]	; (80024c8 <mpu_gyro_calibration+0x188>)
 80023f0:	f001 ff16 	bl	8004220 <HAL_GPIO_WritePin>
			continue;
 80023f4:	e01a      	b.n	800242c <mpu_gyro_calibration+0xec>
		}

		gx_sum += mpu->gx;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	4619      	mov	r1, r3
 80023fc:	69f8      	ldr	r0, [r7, #28]
 80023fe:	f7fe fbc3 	bl	8000b88 <__addsf3>
 8002402:	4603      	mov	r3, r0
 8002404:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	4619      	mov	r1, r3
 800240c:	69b8      	ldr	r0, [r7, #24]
 800240e:	f7fe fbbb 	bl	8000b88 <__addsf3>
 8002412:	4603      	mov	r3, r0
 8002414:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4619      	mov	r1, r3
 800241c:	6978      	ldr	r0, [r7, #20]
 800241e:	f7fe fbb3 	bl	8000b88 <__addsf3>
 8002422:	4603      	mov	r3, r0
 8002424:	617b      	str	r3, [r7, #20]

		HAL_Delay(4);
 8002426:	2004      	movs	r0, #4
 8002428:	f001 f9a2 	bl	8003770 <HAL_Delay>
	for(int i = 0; i < counter; i++)
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	3301      	adds	r3, #1
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	429a      	cmp	r2, r3
 8002438:	db9a      	blt.n	8002370 <mpu_gyro_calibration+0x30>
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691c      	ldr	r4, [r3, #16]
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe fc55 	bl	8000cf0 <__aeabi_i2f>
 8002446:	4603      	mov	r3, r0
 8002448:	4619      	mov	r1, r3
 800244a:	69f8      	ldr	r0, [r7, #28]
 800244c:	f7fe fd58 	bl	8000f00 <__aeabi_fdiv>
 8002450:	4603      	mov	r3, r0
 8002452:	4619      	mov	r1, r3
 8002454:	4620      	mov	r0, r4
 8002456:	f7fe fb97 	bl	8000b88 <__addsf3>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695c      	ldr	r4, [r3, #20]
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe fc41 	bl	8000cf0 <__aeabi_i2f>
 800246e:	4603      	mov	r3, r0
 8002470:	4619      	mov	r1, r3
 8002472:	69b8      	ldr	r0, [r7, #24]
 8002474:	f7fe fd44 	bl	8000f00 <__aeabi_fdiv>
 8002478:	4603      	mov	r3, r0
 800247a:	4619      	mov	r1, r3
 800247c:	4620      	mov	r0, r4
 800247e:	f7fe fb83 	bl	8000b88 <__addsf3>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699c      	ldr	r4, [r3, #24]
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fc2d 	bl	8000cf0 <__aeabi_i2f>
 8002496:	4603      	mov	r3, r0
 8002498:	4619      	mov	r1, r3
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7fe fd30 	bl	8000f00 <__aeabi_fdiv>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4619      	mov	r1, r3
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7fe fb6f 	bl	8000b88 <__addsf3>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80024b2:	2201      	movs	r2, #1
 80024b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <mpu_gyro_calibration+0x188>)
 80024ba:	f001 feb1 	bl	8004220 <HAL_GPIO_WritePin>
}
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	; 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd90      	pop	{r4, r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40011000 	.word	0x40011000
 80024cc:	00000000 	.word	0x00000000

080024d0 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 80024d0:	b5b0      	push	{r4, r5, r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ax, mpu->az) + M_PI/2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd ffad 	bl	800043c <__aeabi_f2d>
 80024e2:	4604      	mov	r4, r0
 80024e4:	460d      	mov	r5, r1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd ffa6 	bl	800043c <__aeabi_f2d>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f009 faea 	bl	800bad0 <atan2>
 80024fc:	a308      	add	r3, pc, #32	; (adr r3, 8002520 <mpu_get_acc_x_angle+0x50>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd fe3d 	bl	8000180 <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fae5 	bl	8000adc <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bdb0      	pop	{r4, r5, r7, pc}
 800251c:	f3af 8000 	nop.w
 8002520:	54442d18 	.word	0x54442d18
 8002524:	3ff921fb 	.word	0x3ff921fb

08002528 <mpu_calc_x_angle>:

}


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8002528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
	mpu_get_data(mpu);
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff fe54 	bl	80021e0 <mpu_get_data>
	float delta = (HAL_GetTick() - mpu->lst_time_x_angle) / 1000.0;
 8002538:	f001 f910 	bl	800375c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ff57 	bl	80003f8 <__aeabi_ui2d>
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	4b46      	ldr	r3, [pc, #280]	; (8002668 <mpu_calc_x_angle+0x140>)
 8002550:	f7fe f8f6 	bl	8000740 <__aeabi_ddiv>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fabe 	bl	8000adc <__aeabi_d2f>
 8002560:	4603      	mov	r3, r0
 8002562:	617b      	str	r3, [r7, #20]
	mpu->lst_time_x_angle = HAL_GetTick();
 8002564:	f001 f8fa 	bl	800375c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	63da      	str	r2, [r3, #60]	; 0x3c
	if(delta > 0.01)
 800256e:	6978      	ldr	r0, [r7, #20]
 8002570:	f7fd ff64 	bl	800043c <__aeabi_f2d>
 8002574:	a338      	add	r3, pc, #224	; (adr r3, 8002658 <mpu_calc_x_angle+0x130>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fe fa47 	bl	8000a0c <__aeabi_dcmpgt>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00b      	beq.n	800259c <mpu_calc_x_angle+0x74>
	{
		mpu->x_angle = mpu_get_acc_x_angle(mpu);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f7ff ffa3 	bl	80024d0 <mpu_get_acc_x_angle>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	635a      	str	r2, [r3, #52]	; 0x34
		mpu->lst_time_x_angle = HAL_GetTick();
 8002590:	f001 f8e4 	bl	800375c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	63da      	str	r2, [r3, #60]	; 0x3c
	{
		//complementary filter
		float alpha = 0.005;
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
	}
}
 800259a:	e055      	b.n	8002648 <mpu_calc_x_angle+0x120>
		float alpha = 0.005;
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <mpu_calc_x_angle+0x144>)
 800259e:	613b      	str	r3, [r7, #16]
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff ff95 	bl	80024d0 <mpu_get_acc_x_angle>
 80025a6:	4603      	mov	r3, r0
 80025a8:	6939      	ldr	r1, [r7, #16]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fbf4 	bl	8000d98 <__aeabi_fmul>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff42 	bl	800043c <__aeabi_f2d>
 80025b8:	4604      	mov	r4, r0
 80025ba:	460d      	mov	r5, r1
 80025bc:	6939      	ldr	r1, [r7, #16]
 80025be:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80025c2:	f7fe fadf 	bl	8000b84 <__aeabi_fsub>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ff37 	bl	800043c <__aeabi_f2d>
 80025ce:	4680      	mov	r8, r0
 80025d0:	4689      	mov	r9, r1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ff30 	bl	800043c <__aeabi_f2d>
 80025dc:	4682      	mov	sl, r0
 80025de:	468b      	mov	fp, r1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff27 	bl	800043c <__aeabi_f2d>
 80025ee:	a31c      	add	r3, pc, #112	; (adr r3, 8002660 <mpu_calc_x_angle+0x138>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fd ff7a 	bl	80004ec <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	e9c7 2300 	strd	r2, r3, [r7]
 8002600:	6978      	ldr	r0, [r7, #20]
 8002602:	f7fd ff1b 	bl	800043c <__aeabi_f2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800260e:	f7fd ff6d 	bl	80004ec <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4650      	mov	r0, sl
 8002618:	4659      	mov	r1, fp
 800261a:	f7fd fdb1 	bl	8000180 <__adddf3>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4640      	mov	r0, r8
 8002624:	4649      	mov	r1, r9
 8002626:	f7fd ff61 	bl	80004ec <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4620      	mov	r0, r4
 8002630:	4629      	mov	r1, r5
 8002632:	f7fd fda5 	bl	8000180 <__adddf3>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fa4d 	bl	8000adc <__aeabi_d2f>
 8002642:	4602      	mov	r2, r0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002648:	bf00      	nop
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002652:	bf00      	nop
 8002654:	f3af 8000 	nop.w
 8002658:	47ae147b 	.word	0x47ae147b
 800265c:	3f847ae1 	.word	0x3f847ae1
 8002660:	22d4405f 	.word	0x22d4405f
 8002664:	3f91df47 	.word	0x3f91df47
 8002668:	408f4000 	.word	0x408f4000
 800266c:	3ba3d70a 	.word	0x3ba3d70a

08002670 <pid_init>:
#include "pid_lib.h"




pid_typedef pid_init(float kp, float ki, float kd){
 8002670:	b4b0      	push	{r4, r5, r7}
 8002672:	b08d      	sub	sp, #52	; 0x34
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
	pid_typedef pid = {kp, ki, kd, 0, 0, 1};
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	60da      	str	r2, [r3, #12]
 800268c:	611a      	str	r2, [r3, #16]
 800268e:	615a      	str	r2, [r3, #20]
 8002690:	619a      	str	r2, [r3, #24]
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
	return pid;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	461d      	mov	r5, r3
 80026a8:	f107 0414 	add.w	r4, r7, #20
 80026ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80026b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	3734      	adds	r7, #52	; 0x34
 80026bc:	46bd      	mov	sp, r7
 80026be:	bcb0      	pop	{r4, r5, r7}
 80026c0:	4770      	bx	lr

080026c2 <pid_reset>:


void pid_reset(pid_typedef* pid){
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	pid->i = 0;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
	pid->prev_error = 0;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <set_dir>:


extern volatile uint8_t spin_duration_ms;


static void set_dir(stepper_typedef *stepper, int dir){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
	if((dir * stepper->dir_polarity) == 1){
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10d      	bne.n	8002718 <set_dir+0x34>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6918      	ldr	r0, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	8a9b      	ldrh	r3, [r3, #20]
 8002704:	b29b      	uxth	r3, r3
 8002706:	2201      	movs	r2, #1
 8002708:	4619      	mov	r1, r3
 800270a:	f001 fd89 	bl	8004220 <HAL_GPIO_WritePin>
		stepper->dir = 1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -1;
	}
}
 8002716:	e00c      	b.n	8002732 <set_dir+0x4e>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6918      	ldr	r0, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8a9b      	ldrh	r3, [r3, #20]
 8002720:	b29b      	uxth	r3, r3
 8002722:	2200      	movs	r2, #0
 8002724:	4619      	mov	r1, r3
 8002726:	f001 fd7b 	bl	8004220 <HAL_GPIO_WritePin>
		stepper->dir = -1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	22ff      	movs	r2, #255	; 0xff
 800272e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <stepper_init>:


//dir pin polarity : 1 or -1
void stepper_init(stepper_typedef *stepper, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *EN_Port, uint16_t EN_Pin,
		GPIO_TypeDef *DIR_Port, uint16_t DIR_Pin, unsigned int max_speed, int dir_polarity)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	603b      	str	r3, [r7, #0]
	stepper->htim = htim;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	601a      	str	r2, [r3, #0]
	stepper->Channel = Channel;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	605a      	str	r2, [r3, #4]

	stepper->EN_Port = EN_Port;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	609a      	str	r2, [r3, #8]
	stepper->EN_Pin = EN_Pin;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8b3a      	ldrh	r2, [r7, #24]
 800275e:	819a      	strh	r2, [r3, #12]
	stepper->DIR_Port = DIR_Port;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	611a      	str	r2, [r3, #16]
	stepper->DIR_Pin = DIR_Pin;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8c3a      	ldrh	r2, [r7, #32]
 800276a:	829a      	strh	r2, [r3, #20]

	stepper->step_counter = 0;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
	stepper->on_off = 0;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2020 	strb.w	r2, [r3, #32]
	stepper-> new_counter = 65000;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

	stepper->dir_polarity = dir_polarity;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
	stepper->max_speed = max_speed;
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	619a      	str	r2, [r3, #24]

	set_dir(stepper, 1);
 800278e:	2101      	movs	r1, #1
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7ff ffa7 	bl	80026e4 <set_dir>
	stepper_enable(stepper, 0);
 8002796:	2100      	movs	r1, #0
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f814 	bl	80027c6 <stepper_enable>
	stepper_set_speed(stepper, 0);
 800279e:	f04f 0100 	mov.w	r1, #0
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f844 	bl	8002830 <stepper_set_speed>
	stepper->speed = 0;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28


	// start timer
	HAL_TIM_Base_Start_IT(htim);
 80027b0:	68b8      	ldr	r0, [r7, #8]
 80027b2:	f003 fa13 	bl	8005bdc <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68b8      	ldr	r0, [r7, #8]
 80027ba:	f003 fab9 	bl	8005d30 <HAL_TIM_PWM_Start>
}
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <stepper_enable>:



void stepper_enable(stepper_typedef *stepper, bool en)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
	if(en){
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <stepper_enable+0x2e>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6898      	ldr	r0, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	899b      	ldrh	r3, [r3, #12]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2200      	movs	r2, #0
 80027e4:	4619      	mov	r1, r3
 80027e6:	f001 fd1b 	bl	8004220 <HAL_GPIO_WritePin>
		stepper->enable = 1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		stepper_set_speed(stepper, 0);
		stepper->enable = 0;
		stepper->on_off = 0;
		stepper->speed = 0;
	}
}
 80027f2:	e019      	b.n	8002828 <stepper_enable+0x62>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6898      	ldr	r0, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	899b      	ldrh	r3, [r3, #12]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2201      	movs	r2, #1
 8002800:	4619      	mov	r1, r3
 8002802:	f001 fd0d 	bl	8004220 <HAL_GPIO_WritePin>
		stepper_set_speed(stepper, 0);
 8002806:	f04f 0100 	mov.w	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f810 	bl	8002830 <stepper_set_speed>
		stepper->enable = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		stepper->on_off = 0;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2020 	strb.w	r2, [r3, #32]
		stepper->speed = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <stepper_set_speed>:



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 8002830:	b5b0      	push	{r4, r5, r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
	saturation(-100, 100, &speed);
 800283a:	463b      	mov	r3, r7
 800283c:	461a      	mov	r2, r3
 800283e:	497e      	ldr	r1, [pc, #504]	; (8002a38 <stepper_set_speed+0x208>)
 8002840:	487e      	ldr	r0, [pc, #504]	; (8002a3c <stepper_set_speed+0x20c>)
 8002842:	f7fe fd7f 	bl	8001344 <saturation>

	stepper->speed = speed;
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

	if(speed == 0){
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fc34 	bl	80010c0 <__aeabi_fcmpeq>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d032      	beq.n	80028c4 <stepper_set_speed+0x94>
		stepper->on_off = 0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2020 	strb.w	r2, [r3, #32]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <stepper_set_speed+0x4a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2200      	movs	r2, #0
 8002876:	635a      	str	r2, [r3, #52]	; 0x34
 8002878:	e018      	b.n	80028ac <stepper_set_speed+0x7c>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b04      	cmp	r3, #4
 8002880:	d105      	bne.n	800288e <stepper_set_speed+0x5e>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2300      	movs	r3, #0
 800288a:	6393      	str	r3, [r2, #56]	; 0x38
 800288c:	e00e      	b.n	80028ac <stepper_set_speed+0x7c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d105      	bne.n	80028a2 <stepper_set_speed+0x72>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2300      	movs	r3, #0
 800289e:	63d3      	str	r3, [r2, #60]	; 0x3c
 80028a0:	e004      	b.n	80028ac <stepper_set_speed+0x7c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028c0:	60da      	str	r2, [r3, #12]
		if(speed > 0) set_dir(stepper, 1);
		else set_dir(stepper, -1);

	}

}
 80028c2:	e0ae      	b.n	8002a22 <stepper_set_speed+0x1f2>
		stepper->on_off = 1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2020 	strb.w	r2, [r3, #32]
		speed = stepper->max_speed * (speed / 100.0);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fda1 	bl	8000418 <__aeabi_i2d>
 80028d6:	4604      	mov	r4, r0
 80028d8:	460d      	mov	r5, r1
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd fdad 	bl	800043c <__aeabi_f2d>
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b56      	ldr	r3, [pc, #344]	; (8002a40 <stepper_set_speed+0x210>)
 80028e8:	f7fd ff2a 	bl	8000740 <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fdfa 	bl	80004ec <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f8ec 	bl	8000adc <__aeabi_d2f>
 8002904:	4603      	mov	r3, r0
 8002906:	603b      	str	r3, [r7, #0]
		if(speed > stepper->max_speed) speed = stepper->max_speed;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe f9ef 	bl	8000cf0 <__aeabi_i2f>
 8002912:	4602      	mov	r2, r0
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f7fe fbdb 	bl	80010d4 <__aeabi_fcmplt>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <stepper_set_speed+0x102>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe f9e1 	bl	8000cf0 <__aeabi_i2f>
 800292e:	4603      	mov	r3, r0
 8002930:	603b      	str	r3, [r7, #0]
		if(speed < -stepper->max_speed) speed = -stepper->max_speed;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	425b      	negs	r3, r3
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe f9d9 	bl	8000cf0 <__aeabi_i2f>
 800293e:	4602      	mov	r2, r0
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f7fe fbe3 	bl	8001110 <__aeabi_fcmpgt>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <stepper_set_speed+0x130>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	425b      	negs	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f7fe f9ca 	bl	8000cf0 <__aeabi_i2f>
 800295c:	4603      	mov	r3, r0
 800295e:	603b      	str	r3, [r7, #0]
		if(speed > 0 && speed < 16) speed = 16;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f04f 0100 	mov.w	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fbd2 	bl	8001110 <__aeabi_fcmpgt>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00b      	beq.n	800298a <stepper_set_speed+0x15a>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe fbab 	bl	80010d4 <__aeabi_fcmplt>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <stepper_set_speed+0x15a>
 8002984:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8002988:	603b      	str	r3, [r7, #0]
		if(speed < 0 && speed >-16) speed = -16;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	f04f 0100 	mov.w	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fb9f 	bl	80010d4 <__aeabi_fcmplt>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <stepper_set_speed+0x180>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4929      	ldr	r1, [pc, #164]	; (8002a44 <stepper_set_speed+0x214>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fe fbb5 	bl	8001110 <__aeabi_fcmpgt>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <stepper_set_speed+0x180>
 80029ac:	4b25      	ldr	r3, [pc, #148]	; (8002a44 <stepper_set_speed+0x214>)
 80029ae:	603b      	str	r3, [r7, #0]
		uint16_t counter = (1.0/abs(speed)) * SEC2uSEC;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe fbb6 	bl	8001124 <__aeabi_f2iz>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bfb8      	it	lt
 80029be:	425b      	neglt	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fd29 	bl	8000418 <__aeabi_i2d>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	f04f 0000 	mov.w	r0, #0
 80029ce:	491e      	ldr	r1, [pc, #120]	; (8002a48 <stepper_set_speed+0x218>)
 80029d0:	f7fd feb6 	bl	8000740 <__aeabi_ddiv>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	a314      	add	r3, pc, #80	; (adr r3, 8002a30 <stepper_set_speed+0x200>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	f7fd fd83 	bl	80004ec <__aeabi_dmul>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f7fe f855 	bl	8000a9c <__aeabi_d2uiz>
 80029f2:	4603      	mov	r3, r0
 80029f4:	81fb      	strh	r3, [r7, #14]
		stepper->new_counter = counter;
 80029f6:	89fa      	ldrh	r2, [r7, #14]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
		if(speed > 0) set_dir(stepper, 1);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f04f 0100 	mov.w	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fe fb84 	bl	8001110 <__aeabi_fcmpgt>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d004      	beq.n	8002a18 <stepper_set_speed+0x1e8>
 8002a0e:	2101      	movs	r1, #1
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff fe67 	bl	80026e4 <set_dir>
}
 8002a16:	e004      	b.n	8002a22 <stepper_set_speed+0x1f2>
		else set_dir(stepper, -1);
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff fe61 	bl	80026e4 <set_dir>
}
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	f3af 8000 	nop.w
 8002a30:	00000000 	.word	0x00000000
 8002a34:	412e8480 	.word	0x412e8480
 8002a38:	42c80000 	.word	0x42c80000
 8002a3c:	c2c80000 	.word	0xc2c80000
 8002a40:	40590000 	.word	0x40590000
 8002a44:	c1800000 	.word	0xc1800000
 8002a48:	3ff00000 	.word	0x3ff00000

08002a4c <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	if(stepper->on_off){
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d036      	beq.n	8002ace <stepper_update+0x82>
		stepper->step_counter += stepper->dir;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002a66:	b25a      	sxtb	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	61da      	str	r2, [r3, #28]

		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d105      	bne.n	8002a9c <stepper_update+0x50>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2264      	movs	r2, #100	; 0x64
 8002a98:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 8002a9a:	e018      	b.n	8002ace <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d105      	bne.n	8002ab0 <stepper_update+0x64>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	2364      	movs	r3, #100	; 0x64
 8002aac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002aae:	e00e      	b.n	8002ace <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d105      	bne.n	8002ac4 <stepper_update+0x78>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	2364      	movs	r3, #100	; 0x64
 8002ac0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002ac2:	e004      	b.n	8002ace <stepper_update+0x82>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	2364      	movs	r3, #100	; 0x64
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <HAL_MspInit+0x5c>)
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <HAL_MspInit+0x5c>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6193      	str	r3, [r2, #24]
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <HAL_MspInit+0x5c>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <HAL_MspInit+0x5c>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a0e      	ldr	r2, [pc, #56]	; (8002b34 <HAL_MspInit+0x5c>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b00:	61d3      	str	r3, [r2, #28]
 8002b02:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <HAL_MspInit+0x5c>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_MspInit+0x60>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_MspInit+0x60>)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40010000 	.word	0x40010000

08002b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <NMI_Handler+0x4>

08002b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b46:	e7fe      	b.n	8002b46 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	e7fe      	b.n	8002b4c <MemManage_Handler+0x4>

08002b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b52:	e7fe      	b.n	8002b52 <BusFault_Handler+0x4>

08002b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b58:	e7fe      	b.n	8002b58 <UsageFault_Handler+0x4>

08002b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b82:	f000 fdd9 	bl	8003738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <DMA1_Channel5_IRQHandler+0x10>)
 8002b92:	f001 f88d 	bl	8003cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000478 	.word	0x20000478

08002ba0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <TIM2_IRQHandler+0x10>)
 8002ba6:	f003 f965 	bl	8005e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200003a0 	.word	0x200003a0

08002bb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <TIM3_IRQHandler+0x10>)
 8002bba:	f003 f95b 	bl	8005e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200003e8 	.word	0x200003e8

08002bc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <USART1_IRQHandler+0x10>)
 8002bce:	f004 f843 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000430 	.word	0x20000430

08002bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <_kill>:

int _kill(int pid, int sig)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bf4:	f006 fc90 	bl	8009518 <__errno>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2216      	movs	r2, #22
 8002bfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_exit>:

void _exit (int status)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c12:	f04f 31ff 	mov.w	r1, #4294967295
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff ffe7 	bl	8002bea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c1c:	e7fe      	b.n	8002c1c <_exit+0x12>

08002c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e00a      	b.n	8002c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c30:	f3af 8000 	nop.w
 8002c34:	4601      	mov	r1, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	60ba      	str	r2, [r7, #8]
 8002c3c:	b2ca      	uxtb	r2, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dbf0      	blt.n	8002c30 <_read+0x12>
  }

  return len;
 8002c4e:	687b      	ldr	r3, [r7, #4]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e009      	b.n	8002c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	60ba      	str	r2, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fcae 	bl	80015d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dbf1      	blt.n	8002c6a <_write+0x12>
  }
  return len;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_close>:

int _close(int file)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <_isatty>:

int _isatty(int file)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ccc:	2301      	movs	r3, #1
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <_sbrk+0x5c>)
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <_sbrk+0x60>)
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <_sbrk+0x64>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d0c:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <_sbrk+0x64>)
 8002d0e:	4a12      	ldr	r2, [pc, #72]	; (8002d58 <_sbrk+0x68>)
 8002d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <_sbrk+0x64>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4413      	add	r3, r2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d207      	bcs.n	8002d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d20:	f006 fbfa 	bl	8009518 <__errno>
 8002d24:	4603      	mov	r3, r0
 8002d26:	220c      	movs	r2, #12
 8002d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2e:	e009      	b.n	8002d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d30:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <_sbrk+0x64>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	4a05      	ldr	r2, [pc, #20]	; (8002d54 <_sbrk+0x64>)
 8002d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d42:	68fb      	ldr	r3, [r7, #12]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20005000 	.word	0x20005000
 8002d50:	00000400 	.word	0x00000400
 8002d54:	2000039c 	.word	0x2000039c
 8002d58:	20000610 	.word	0x20000610

08002d5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08e      	sub	sp, #56	; 0x38
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	609a      	str	r2, [r3, #8]
 8002d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7c:	f107 0320 	add.w	r3, r7, #32
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
 8002d94:	615a      	str	r2, [r3, #20]
 8002d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d98:	4b2d      	ldr	r3, [pc, #180]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002da2:	2247      	movs	r2, #71	; 0x47
 8002da4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da6:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002dac:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002db2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db4:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dba:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dc0:	4823      	ldr	r0, [pc, #140]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002dc2:	f002 febb 	bl	8005b3c <HAL_TIM_Base_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002dcc:	f7ff f852 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dda:	4619      	mov	r1, r3
 8002ddc:	481c      	ldr	r0, [pc, #112]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002dde:	f003 f9fb 	bl	80061d8 <HAL_TIM_ConfigClockSource>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002de8:	f7ff f844 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002dec:	4818      	ldr	r0, [pc, #96]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002dee:	f002 ff47 	bl	8005c80 <HAL_TIM_PWM_Init>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002df8:	f7ff f83c 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e04:	f107 0320 	add.w	r3, r7, #32
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4811      	ldr	r0, [pc, #68]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002e0c:	f003 fd80 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002e16:	f7ff f82d 	bl	8001e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e1a:	2360      	movs	r3, #96	; 0x60
 8002e1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4807      	ldr	r0, [pc, #28]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002e32:	f003 f90f 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002e3c:	f7ff f81a 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002e40:	4803      	ldr	r0, [pc, #12]	; (8002e50 <MX_TIM2_Init+0xe8>)
 8002e42:	f000 f8bd 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 8002e46:	bf00      	nop
 8002e48:	3738      	adds	r7, #56	; 0x38
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200003a0 	.word	0x200003a0

08002e54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08e      	sub	sp, #56	; 0x38
 8002e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e68:	f107 0320 	add.w	r3, r7, #32
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e72:	1d3b      	adds	r3, r7, #4
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
 8002e80:	615a      	str	r2, [r3, #20]
 8002e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e84:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002e86:	4a2d      	ldr	r2, [pc, #180]	; (8002f3c <MX_TIM3_Init+0xe8>)
 8002e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8002e8a:	4b2b      	ldr	r3, [pc, #172]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002e8c:	2247      	movs	r2, #71	; 0x47
 8002e8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e96:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e9e:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ea4:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002eaa:	4823      	ldr	r0, [pc, #140]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002eac:	f002 fe46 	bl	8005b3c <HAL_TIM_Base_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002eb6:	f7fe ffdd 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	481c      	ldr	r0, [pc, #112]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002ec8:	f003 f986 	bl	80061d8 <HAL_TIM_ConfigClockSource>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002ed2:	f7fe ffcf 	bl	8001e74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ed6:	4818      	ldr	r0, [pc, #96]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002ed8:	f002 fed2 	bl	8005c80 <HAL_TIM_PWM_Init>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002ee2:	f7fe ffc7 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002eee:	f107 0320 	add.w	r3, r7, #32
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4810      	ldr	r0, [pc, #64]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002ef6:	f003 fd0b 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002f00:	f7fe ffb8 	bl	8001e74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f04:	2360      	movs	r3, #96	; 0x60
 8002f06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	2200      	movs	r2, #0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002f1c:	f003 f89a 	bl	8006054 <HAL_TIM_PWM_ConfigChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002f26:	f7fe ffa5 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f2a:	4803      	ldr	r0, [pc, #12]	; (8002f38 <MX_TIM3_Init+0xe4>)
 8002f2c:	f000 f848 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 8002f30:	bf00      	nop
 8002f32:	3738      	adds	r7, #56	; 0x38
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200003e8 	.word	0x200003e8
 8002f3c:	40000400 	.word	0x40000400

08002f40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d114      	bne.n	8002f7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_TIM_Base_MspInit+0x78>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIM_Base_MspInit+0x78>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	61d3      	str	r3, [r2, #28]
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_TIM_Base_MspInit+0x78>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	201c      	movs	r0, #28
 8002f70:	f000 fcf9 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f74:	201c      	movs	r0, #28
 8002f76:	f000 fd12 	bl	800399e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f7a:	e018      	b.n	8002fae <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <HAL_TIM_Base_MspInit+0x7c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d113      	bne.n	8002fae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_TIM_Base_MspInit+0x78>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <HAL_TIM_Base_MspInit+0x78>)
 8002f8c:	f043 0302 	orr.w	r3, r3, #2
 8002f90:	61d3      	str	r3, [r2, #28]
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <HAL_TIM_Base_MspInit+0x78>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	201d      	movs	r0, #29
 8002fa4:	f000 fcdf 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002fa8:	201d      	movs	r0, #29
 8002faa:	f000 fcf8 	bl	800399e <HAL_NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40000400 	.word	0x40000400

08002fc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fde:	d118      	bne.n	8003012 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_TIM_MspPostInit+0x94>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4a1b      	ldr	r2, [pc, #108]	; (8003054 <HAL_TIM_MspPostInit+0x94>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6193      	str	r3, [r2, #24]
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_TIM_MspPostInit+0x94>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2302      	movs	r3, #2
 8003002:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	4619      	mov	r1, r3
 800300a:	4813      	ldr	r0, [pc, #76]	; (8003058 <HAL_TIM_MspPostInit+0x98>)
 800300c:	f000 ff84 	bl	8003f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003010:	e01c      	b.n	800304c <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a11      	ldr	r2, [pc, #68]	; (800305c <HAL_TIM_MspPostInit+0x9c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d117      	bne.n	800304c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800301c:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <HAL_TIM_MspPostInit+0x94>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <HAL_TIM_MspPostInit+0x94>)
 8003022:	f043 0304 	orr.w	r3, r3, #4
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_TIM_MspPostInit+0x94>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003034:	2340      	movs	r3, #64	; 0x40
 8003036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2302      	movs	r3, #2
 800303e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8003040:	f107 0310 	add.w	r3, r7, #16
 8003044:	4619      	mov	r1, r3
 8003046:	4804      	ldr	r0, [pc, #16]	; (8003058 <HAL_TIM_MspPostInit+0x98>)
 8003048:	f000 ff66 	bl	8003f18 <HAL_GPIO_Init>
}
 800304c:	bf00      	nop
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	40010800 	.word	0x40010800
 800305c:	40000400 	.word	0x40000400

08003060 <start_uart_interface>:
extern uart_interface_typedef uart_interface;




void start_uart_interface(uart_interface_typedef* uart_int){
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_int->huart, uart_int->receive_buffer, BUFFER_SIZE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3304      	adds	r3, #4
 8003070:	2264      	movs	r2, #100	; 0x64
 8003072:	4619      	mov	r1, r3
 8003074:	f003 fd97 	bl	8006ba6 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_UARTEx_RxEventCallback>:
// UART IDLE interrupt
//if you want to receive data from multiple uart add another if statement for your uart and uart_interface_typedef structure


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	460b      	mov	r3, r1
 800308a:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == uart_interface.huart->Instance)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_UARTEx_RxEventCallback+0x34>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d107      	bne.n	80030aa <HAL_UARTEx_RxEventCallback+0x2a>
    {
    	uart_interface.command_received_flag = 1;
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_UARTEx_RxEventCallback+0x34>)
 800309c:	2201      	movs	r2, #1
 800309e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    	uart_interface.commnad_size = Size;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_UARTEx_RxEventCallback+0x34>)
 80030a4:	887b      	ldrh	r3, [r7, #2]
 80030a6:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68

    }
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	20000324 	.word	0x20000324

080030b8 <uart_interface_init>:


void uart_interface_init(uart_interface_typedef* uart_int, UART_HandleTypeDef *huart, DMA_HandleTypeDef* hdma_usart_rx, user_function_typedef* functions_array, uint8_t num_functions){
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
	__HAL_DMA_DISABLE_IT(hdma_usart_rx, DMA_IT_HT); //disable half transfer dma interrupt
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0204 	bic.w	r2, r2, #4
 80030d4:	601a      	str	r2, [r3, #0]

	uart_int->huart = huart;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	601a      	str	r2, [r3, #0]
	uart_int->commnad_size = 0;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	uart_int->command_received_flag = 0;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	uart_int->functions_array = functions_array;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	66da      	str	r2, [r3, #108]	; 0x6c
	uart_int->num_functions = num_functions;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	7e3a      	ldrb	r2, [r7, #24]
 80030f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

}
 80030fa:	bf00      	nop
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <execute_uart_command>:
 * can't parse command (error), returns 0
 * successful command read,  returns 1
 * command not found , returns 2
 */

int execute_uart_command(uart_interface_typedef* uart_int){
 8003104:	b580      	push	{r7, lr}
 8003106:	b09c      	sub	sp, #112	; 0x70
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	if(!uart_int->command_received_flag) return -1;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <execute_uart_command+0x20>
 800311e:	f04f 33ff 	mov.w	r3, #4294967295
 8003122:	e119      	b.n	8003358 <execute_uart_command+0x254>

	uart_int->command_received_flag = 0;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

	char function_code[FUNCTION_CODE_MAX_LENGTH];
	char args[MAX_NUM_ARGS][ARG_MAX_LENGTH];


	uint8_t idx = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	// parse function code
	for(int i = 0; i < uart_int->commnad_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8003132:	2300      	movs	r3, #0
 8003134:	66bb      	str	r3, [r7, #104]	; 0x68
 8003136:	e02c      	b.n	8003192 <execute_uart_command+0x8e>
		idx ++;
 8003138:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800313c:	3301      	adds	r3, #1
 800313e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		char elem = uart_int->receive_buffer[i];
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		if(elem == '\0' || elem == '\r' || elem == '\n' || elem == '('){
 8003150:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <execute_uart_command+0x6c>
 8003158:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800315c:	2b0d      	cmp	r3, #13
 800315e:	d007      	beq.n	8003170 <execute_uart_command+0x6c>
 8003160:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003164:	2b0a      	cmp	r3, #10
 8003166:	d003      	beq.n	8003170 <execute_uart_command+0x6c>
 8003168:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800316c:	2b28      	cmp	r3, #40	; 0x28
 800316e:	d106      	bne.n	800317e <execute_uart_command+0x7a>
			function_code[i] = '\0';
 8003170:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003176:	4413      	add	r3, r2
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
			break;
 800317c:	e013      	b.n	80031a6 <execute_uart_command+0xa2>
		}
		else function_code[i] = elem;
 800317e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003182:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003184:	4413      	add	r3, r2
 8003186:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800318a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < uart_int->commnad_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 800318c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800318e:	3301      	adds	r3, #1
 8003190:	66bb      	str	r3, [r7, #104]	; 0x68
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003198:	461a      	mov	r2, r3
 800319a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800319c:	4293      	cmp	r3, r2
 800319e:	dbcb      	blt.n	8003138 <execute_uart_command+0x34>
 80031a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a2:	2b0f      	cmp	r3, #15
 80031a4:	ddc8      	ble.n	8003138 <execute_uart_command+0x34>
	}


	//parse arguments
	bool no_args = 1;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t arg_len = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t arg_counter = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	for(int i = idx; i < uart_int->commnad_size; i++)
 80031b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031bc:	663b      	str	r3, [r7, #96]	; 0x60
 80031be:	e06c      	b.n	800329a <execute_uart_command+0x196>
	{
		//safety checks
		if(arg_counter >= MAX_NUM_ARGS || arg_len >= ARG_MAX_LENGTH) return 0; //error, to many argumenst/to long argument
 80031c0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d803      	bhi.n	80031d0 <execute_uart_command+0xcc>
 80031c8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80031cc:	2b0b      	cmp	r3, #11
 80031ce:	d901      	bls.n	80031d4 <execute_uart_command+0xd0>
 80031d0:	2300      	movs	r3, #0
 80031d2:	e0c1      	b.n	8003358 <execute_uart_command+0x254>

		char elem = uart_int->receive_buffer[i];
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
		if(elem == '\0' || elem == '\r' || elem == '\n') return 0; //error, commands ends with ')'
 80031e2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <execute_uart_command+0xf6>
 80031ea:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80031ee:	2b0d      	cmp	r3, #13
 80031f0:	d003      	beq.n	80031fa <execute_uart_command+0xf6>
 80031f2:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d101      	bne.n	80031fe <execute_uart_command+0xfa>
 80031fa:	2300      	movs	r3, #0
 80031fc:	e0ac      	b.n	8003358 <execute_uart_command+0x254>

		else if(elem == ')'){
 80031fe:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003202:	2b29      	cmp	r3, #41	; 0x29
 8003204:	d10e      	bne.n	8003224 <execute_uart_command+0x120>
			args[arg_counter][arg_len] = '\0';
 8003206:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800320a:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	3370      	adds	r3, #112	; 0x70
 8003218:	443b      	add	r3, r7
 800321a:	440b      	add	r3, r1
 800321c:	3b64      	subs	r3, #100	; 0x64
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
			break;
 8003222:	e041      	b.n	80032a8 <execute_uart_command+0x1a4>
		}
		else if(elem == ','){
 8003224:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8003228:	2b2c      	cmp	r3, #44	; 0x2c
 800322a:	d116      	bne.n	800325a <execute_uart_command+0x156>
			args[arg_counter][arg_len] = '\0';
 800322c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8003230:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	3370      	adds	r3, #112	; 0x70
 800323e:	443b      	add	r3, r7
 8003240:	440b      	add	r3, r1
 8003242:	3b64      	subs	r3, #100	; 0x64
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
			arg_counter++;
 8003248:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800324c:	3301      	adds	r3, #1
 800324e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			arg_len = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003258:	e01c      	b.n	8003294 <execute_uart_command+0x190>
		}
		else if(elem == ' '){
 800325a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800325e:	2b20      	cmp	r3, #32
 8003260:	d017      	beq.n	8003292 <execute_uart_command+0x18e>
			continue;
		}
		else{
			no_args = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			args[arg_counter][arg_len] = elem;
 8003268:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800326c:	f897 1066 	ldrb.w	r1, [r7, #102]	; 0x66
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	3370      	adds	r3, #112	; 0x70
 800327a:	443b      	add	r3, r7
 800327c:	440b      	add	r3, r1
 800327e:	3b64      	subs	r3, #100	; 0x64
 8003280:	f897 205a 	ldrb.w	r2, [r7, #90]	; 0x5a
 8003284:	701a      	strb	r2, [r3, #0]
			arg_len ++;
 8003286:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800328a:	3301      	adds	r3, #1
 800328c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8003290:	e000      	b.n	8003294 <execute_uart_command+0x190>
			continue;
 8003292:	bf00      	nop
	for(int i = idx; i < uart_int->commnad_size; i++)
 8003294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003296:	3301      	adds	r3, #1
 8003298:	663b      	str	r3, [r7, #96]	; 0x60
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80032a0:	461a      	mov	r2, r3
 80032a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a4:	4293      	cmp	r3, r2
 80032a6:	db8b      	blt.n	80031c0 <execute_uart_command+0xbc>
		}
	}
	if(!no_args) arg_counter++;
 80032a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80032ac:	f083 0301 	eor.w	r3, r3, #1
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <execute_uart_command+0x1bc>
 80032b6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80032ba:	3301      	adds	r3, #1
 80032bc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	if(strcmp(function_code, "help") == 0){
 80032c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032c4:	4926      	ldr	r1, [pc, #152]	; (8003360 <execute_uart_command+0x25c>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fc ff42 	bl	8000150 <strcmp>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d104      	bne.n	80032dc <execute_uart_command+0x1d8>
		help(uart_int);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f846 	bl	8003364 <help>
		return 1;
 80032d8:	2301      	movs	r3, #1
 80032da:	e03d      	b.n	8003358 <execute_uart_command+0x254>
	}



	//run
	for(int i = 0; i < uart_int->num_functions; i++){
 80032dc:	2300      	movs	r3, #0
 80032de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032e0:	e030      	b.n	8003344 <execute_uart_command+0x240>
		if(strcmp(function_code, uart_int->functions_array[i].function_code) == 0){
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80032e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	440b      	add	r3, r1
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fc ff28 	bl	8000150 <strcmp>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d11b      	bne.n	800333e <execute_uart_command+0x23a>
			if(uart_int->functions_array[i].num_args == arg_counter){
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800330a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	7d1b      	ldrb	r3, [r3, #20]
 8003318:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800331c:	429a      	cmp	r2, r3
 800331e:	d119      	bne.n	8003354 <execute_uart_command+0x250>
				(*uart_int->functions_array[i].function_pointer)(args);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f107 020c 	add.w	r2, r7, #12
 8003336:	4610      	mov	r0, r2
 8003338:	4798      	blx	r3
				return 1;
 800333a:	2301      	movs	r3, #1
 800333c:	e00c      	b.n	8003358 <execute_uart_command+0x254>
	for(int i = 0; i < uart_int->num_functions; i++){
 800333e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003340:	3301      	adds	r3, #1
 8003342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800334a:	461a      	mov	r2, r3
 800334c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800334e:	4293      	cmp	r3, r2
 8003350:	dbc7      	blt.n	80032e2 <execute_uart_command+0x1de>
 8003352:	e000      	b.n	8003356 <execute_uart_command+0x252>
			}
			break;
 8003354:	bf00      	nop
//
//	for(int i = 0; i < arg_counter; i++){
//		printf("arg%d = [%s]\n", i, args[i]);
//	}

	return 2;
 8003356:	2302      	movs	r3, #2
}
 8003358:	4618      	mov	r0, r3
 800335a:	3770      	adds	r7, #112	; 0x70
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	0800c04c 	.word	0x0800c04c

08003364 <help>:




void help(uart_interface_typedef* uart_int){
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < uart_int->num_functions; i++){
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e019      	b.n	80033a6 <help+0x42>
		printf("%s : %d arg\n", uart_int->functions_array[i].function_code, uart_int->functions_array[i].num_args);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	1d18      	adds	r0, r3, #4
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	440b      	add	r3, r1
 8003394:	7d1b      	ldrb	r3, [r3, #20]
 8003396:	461a      	mov	r2, r3
 8003398:	4601      	mov	r1, r0
 800339a:	4809      	ldr	r0, [pc, #36]	; (80033c0 <help+0x5c>)
 800339c:	f005 ff12 	bl	80091c4 <iprintf>
	for(int i = 0; i < uart_int->num_functions; i++){
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4293      	cmp	r3, r2
 80033b2:	dbde      	blt.n	8003372 <help+0xe>
	}
}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	0800c054 	.word	0x0800c054

080033c4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033c8:	4b11      	ldr	r3, [pc, #68]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <MX_USART1_UART_Init+0x50>)
 80033cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80033ce:	4b10      	ldr	r3, [pc, #64]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80033d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033d6:	4b0e      	ldr	r3, [pc, #56]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033dc:	4b0c      	ldr	r3, [pc, #48]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033ea:	220c      	movs	r2, #12
 80033ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033fa:	4805      	ldr	r0, [pc, #20]	; (8003410 <MX_USART1_UART_Init+0x4c>)
 80033fc:	f003 faf8 	bl	80069f0 <HAL_UART_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003406:	f7fe fd35 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000430 	.word	0x20000430
 8003414:	40013800 	.word	0x40013800

08003418 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 0310 	add.w	r3, r7, #16
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a33      	ldr	r2, [pc, #204]	; (8003500 <HAL_UART_MspInit+0xe8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d15f      	bne.n	80034f8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003438:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_UART_MspInit+0xec>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	4a31      	ldr	r2, [pc, #196]	; (8003504 <HAL_UART_MspInit+0xec>)
 800343e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003442:	6193      	str	r3, [r2, #24]
 8003444:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <HAL_UART_MspInit+0xec>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003450:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <HAL_UART_MspInit+0xec>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4a2b      	ldr	r2, [pc, #172]	; (8003504 <HAL_UART_MspInit+0xec>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6193      	str	r3, [r2, #24]
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_UART_MspInit+0xec>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800346c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003472:	2303      	movs	r3, #3
 8003474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	4619      	mov	r1, r3
 800347c:	4822      	ldr	r0, [pc, #136]	; (8003508 <HAL_UART_MspInit+0xf0>)
 800347e:	f000 fd4b 	bl	8003f18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003490:	f107 0310 	add.w	r3, r7, #16
 8003494:	4619      	mov	r1, r3
 8003496:	481c      	ldr	r0, [pc, #112]	; (8003508 <HAL_UART_MspInit+0xf0>)
 8003498:	f000 fd3e 	bl	8003f18 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <HAL_UART_MspInit+0xf4>)
 800349e:	4a1c      	ldr	r2, [pc, #112]	; (8003510 <HAL_UART_MspInit+0xf8>)
 80034a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034a8:	4b18      	ldr	r3, [pc, #96]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ba:	4b14      	ldr	r3, [pc, #80]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80034cc:	480f      	ldr	r0, [pc, #60]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034ce:	f000 fa81 	bl	80039d4 <HAL_DMA_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80034d8:	f7fe fccc 	bl	8001e74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80034e2:	4a0a      	ldr	r2, [pc, #40]	; (800350c <HAL_UART_MspInit+0xf4>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034e8:	2200      	movs	r2, #0
 80034ea:	2100      	movs	r1, #0
 80034ec:	2025      	movs	r0, #37	; 0x25
 80034ee:	f000 fa3a 	bl	8003966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034f2:	2025      	movs	r0, #37	; 0x25
 80034f4:	f000 fa53 	bl	800399e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80034f8:	bf00      	nop
 80034fa:	3720      	adds	r7, #32
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40013800 	.word	0x40013800
 8003504:	40021000 	.word	0x40021000
 8003508:	40010800 	.word	0x40010800
 800350c:	20000478 	.word	0x20000478
 8003510:	40020058 	.word	0x40020058

08003514 <led>:
extern pid_typedef pos_pid;




void led(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	if(strcmp(args[0], "1") == 0){
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <led+0x44>)
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fc fe16 	bl	8000150 <strcmp>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d105      	bne.n	8003536 <led+0x22>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003530:	480a      	ldr	r0, [pc, #40]	; (800355c <led+0x48>)
 8003532:	f000 fe75 	bl	8004220 <HAL_GPIO_WritePin>
	}
	if(strcmp(args[0], "0") == 0){
 8003536:	490a      	ldr	r1, [pc, #40]	; (8003560 <led+0x4c>)
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fc fe09 	bl	8000150 <strcmp>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <led+0x3c>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003544:	2201      	movs	r2, #1
 8003546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800354a:	4804      	ldr	r0, [pc, #16]	; (800355c <led+0x48>)
 800354c:	f000 fe68 	bl	8004220 <HAL_GPIO_WritePin>
	}
}
 8003550:	bf00      	nop
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	0800c064 	.word	0x0800c064
 800355c:	40011000 	.word	0x40011000
 8003560:	0800c068 	.word	0x0800c068

08003564 <comunication_test>:

void comunication_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	printf("Czesc ;)\n");
 800356c:	4803      	ldr	r0, [pc, #12]	; (800357c <comunication_test+0x18>)
 800356e:	f005 fe8f 	bl	8009290 <puts>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	0800c06c 	.word	0x0800c06c

08003580 <set_position>:




void set_position(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

	if(strcmp(args[0], "0") == 0){
 8003588:	490c      	ldr	r1, [pc, #48]	; (80035bc <set_position+0x3c>)
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fc fde0 	bl	8000150 <strcmp>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d103      	bne.n	800359e <set_position+0x1e>
		set_pos = 0;
 8003596:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <set_position+0x40>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e00b      	b.n	80035b6 <set_position+0x36>
	}
	else{
		int32_t val = atoi(args[0]);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 fa55 	bl	8007a4e <atoi>
 80035a4:	60f8      	str	r0, [r7, #12]
		if(val == 0) return;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <set_position+0x34>
		set_pos = val;
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <set_position+0x40>)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	e000      	b.n	80035b6 <set_position+0x36>
		if(val == 0) return;
 80035b4:	bf00      	nop
	}
}
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	0800c068 	.word	0x0800c068
 80035c0:	20000300 	.word	0x20000300

080035c4 <rotate>:



void rotate(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
	spin_duration_ms = atoi(args[0]);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f004 fa3e 	bl	8007a4e <atoi>
 80035d2:	4603      	mov	r3, r0
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <rotate+0x30>)
 80035d8:	701a      	strb	r2, [r3, #0]
	spin_value = atoi(args[1]);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	330c      	adds	r3, #12
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 fa35 	bl	8007a4e <atoi>
 80035e4:	4603      	mov	r3, r0
 80035e6:	b25a      	sxtb	r2, r3
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <rotate+0x34>)
 80035ea:	701a      	strb	r2, [r3, #0]
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000398 	.word	0x20000398
 80035f8:	2000039a 	.word	0x2000039a

080035fc <change_pid>:



void change_pid(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	pos_pid.kp = atof(args[0]);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f004 fa1f 	bl	8007a48 <atof>
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	4610      	mov	r0, r2
 8003610:	4619      	mov	r1, r3
 8003612:	f7fd fa63 	bl	8000adc <__aeabi_d2f>
 8003616:	4603      	mov	r3, r0
 8003618:	4a10      	ldr	r2, [pc, #64]	; (800365c <change_pid+0x60>)
 800361a:	6013      	str	r3, [r2, #0]
	pos_pid.ki = atof(args[1]);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	330c      	adds	r3, #12
 8003620:	4618      	mov	r0, r3
 8003622:	f004 fa11 	bl	8007a48 <atof>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f7fd fa55 	bl	8000adc <__aeabi_d2f>
 8003632:	4603      	mov	r3, r0
 8003634:	4a09      	ldr	r2, [pc, #36]	; (800365c <change_pid+0x60>)
 8003636:	6053      	str	r3, [r2, #4]
	pos_pid.kd = atof(args[2]);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3318      	adds	r3, #24
 800363c:	4618      	mov	r0, r3
 800363e:	f004 fa03 	bl	8007a48 <atof>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	f7fd fa47 	bl	8000adc <__aeabi_d2f>
 800364e:	4603      	mov	r3, r0
 8003650:	4a02      	ldr	r2, [pc, #8]	; (800365c <change_pid+0x60>)
 8003652:	6093      	str	r3, [r2, #8]


}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	20000308 	.word	0x20000308

08003660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003660:	f7ff fb7c 	bl	8002d5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003664:	480b      	ldr	r0, [pc, #44]	; (8003694 <LoopFillZerobss+0xe>)
   ldr r1, =_edata
 8003666:	490c      	ldr	r1, [pc, #48]	; (8003698 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003668:	4a0c      	ldr	r2, [pc, #48]	; (800369c <LoopFillZerobss+0x16>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800366c:	e002      	b.n	8003674 <LoopCopyDataInit>

0800366e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800366e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003672:	3304      	adds	r3, #4

08003674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003678:	d3f9      	bcc.n	800366e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367a:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800367c:	4c09      	ldr	r4, [pc, #36]	; (80036a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800367e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003680:	e001      	b.n	8003686 <LoopFillZerobss>

08003682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003684:	3204      	adds	r2, #4

08003686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003688:	d3fb      	bcc.n	8003682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800368a:	f005 ff4b 	bl	8009524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800368e:	f7fd ffdf 	bl	8001650 <main>
  bx lr
 8003692:	4770      	bx	lr
  ldr r0, =_sdata
 8003694:	20000000 	.word	0x20000000
   ldr r1, =_edata
 8003698:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800369c:	0800c548 	.word	0x0800c548
  ldr r2, =_sbss
 80036a0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80036a4:	2000060c 	.word	0x2000060c

080036a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036a8:	e7fe      	b.n	80036a8 <ADC1_2_IRQHandler>
	...

080036ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b0:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <HAL_Init+0x28>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a07      	ldr	r2, [pc, #28]	; (80036d4 <HAL_Init+0x28>)
 80036b6:	f043 0310 	orr.w	r3, r3, #16
 80036ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f000 f947 	bl	8003950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c2:	200f      	movs	r0, #15
 80036c4:	f000 f808 	bl	80036d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c8:	f7ff fa06 	bl	8002ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000

080036d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_InitTick+0x54>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_InitTick+0x58>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f95f 	bl	80039ba <HAL_SYSTICK_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00e      	b.n	8003724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2b0f      	cmp	r3, #15
 800370a:	d80a      	bhi.n	8003722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800370c:	2200      	movs	r2, #0
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	f000 f927 	bl	8003966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003718:	4a06      	ldr	r2, [pc, #24]	; (8003734 <HAL_InitTick+0x5c>)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000000 	.word	0x20000000
 8003730:	20000008 	.word	0x20000008
 8003734:	20000004 	.word	0x20000004

08003738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_IncTick+0x1c>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_IncTick+0x20>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4413      	add	r3, r2
 8003748:	4a03      	ldr	r2, [pc, #12]	; (8003758 <HAL_IncTick+0x20>)
 800374a:	6013      	str	r3, [r2, #0]
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	20000008 	.word	0x20000008
 8003758:	200004bc 	.word	0x200004bc

0800375c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return uwTick;
 8003760:	4b02      	ldr	r3, [pc, #8]	; (800376c <HAL_GetTick+0x10>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr
 800376c:	200004bc 	.word	0x200004bc

08003770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003778:	f7ff fff0 	bl	800375c <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d005      	beq.n	8003796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <HAL_Delay+0x44>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003796:	bf00      	nop
 8003798:	f7ff ffe0 	bl	800375c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d8f7      	bhi.n	8003798 <HAL_Delay+0x28>
  {
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000008 	.word	0x20000008

080037b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f003 0307 	and.w	r3, r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c8:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ea:	4a04      	ldr	r2, [pc, #16]	; (80037fc <__NVIC_SetPriorityGrouping+0x44>)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	60d3      	str	r3, [r2, #12]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003804:	4b04      	ldr	r3, [pc, #16]	; (8003818 <__NVIC_GetPriorityGrouping+0x18>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	0a1b      	lsrs	r3, r3, #8
 800380a:	f003 0307 	and.w	r3, r3, #7
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	2b00      	cmp	r3, #0
 800382c:	db0b      	blt.n	8003846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	f003 021f 	and.w	r2, r3, #31
 8003834:	4906      	ldr	r1, [pc, #24]	; (8003850 <__NVIC_EnableIRQ+0x34>)
 8003836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2001      	movs	r0, #1
 800383e:	fa00 f202 	lsl.w	r2, r0, r2
 8003842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	e000e100 	.word	0xe000e100

08003854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	6039      	str	r1, [r7, #0]
 800385e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	2b00      	cmp	r3, #0
 8003866:	db0a      	blt.n	800387e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	b2da      	uxtb	r2, r3
 800386c:	490c      	ldr	r1, [pc, #48]	; (80038a0 <__NVIC_SetPriority+0x4c>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	0112      	lsls	r2, r2, #4
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	440b      	add	r3, r1
 8003878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800387c:	e00a      	b.n	8003894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	4908      	ldr	r1, [pc, #32]	; (80038a4 <__NVIC_SetPriority+0x50>)
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	3b04      	subs	r3, #4
 800388c:	0112      	lsls	r2, r2, #4
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	440b      	add	r3, r1
 8003892:	761a      	strb	r2, [r3, #24]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000e100 	.word	0xe000e100
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f1c3 0307 	rsb	r3, r3, #7
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	bf28      	it	cs
 80038c6:	2304      	movcs	r3, #4
 80038c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2b06      	cmp	r3, #6
 80038d0:	d902      	bls.n	80038d8 <NVIC_EncodePriority+0x30>
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	3b03      	subs	r3, #3
 80038d6:	e000      	b.n	80038da <NVIC_EncodePriority+0x32>
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	f04f 32ff 	mov.w	r2, #4294967295
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	43da      	mvns	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	401a      	ands	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038f0:	f04f 31ff 	mov.w	r1, #4294967295
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	fa01 f303 	lsl.w	r3, r1, r3
 80038fa:	43d9      	mvns	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003900:	4313      	orrs	r3, r2
         );
}
 8003902:	4618      	mov	r0, r3
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800391c:	d301      	bcc.n	8003922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800391e:	2301      	movs	r3, #1
 8003920:	e00f      	b.n	8003942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <SysTick_Config+0x40>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3b01      	subs	r3, #1
 8003928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800392a:	210f      	movs	r1, #15
 800392c:	f04f 30ff 	mov.w	r0, #4294967295
 8003930:	f7ff ff90 	bl	8003854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <SysTick_Config+0x40>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <SysTick_Config+0x40>)
 800393c:	2207      	movs	r2, #7
 800393e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	e000e010 	.word	0xe000e010

08003950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff2d 	bl	80037b8 <__NVIC_SetPriorityGrouping>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003966:	b580      	push	{r7, lr}
 8003968:	b086      	sub	sp, #24
 800396a:	af00      	add	r7, sp, #0
 800396c:	4603      	mov	r3, r0
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003978:	f7ff ff42 	bl	8003800 <__NVIC_GetPriorityGrouping>
 800397c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	6978      	ldr	r0, [r7, #20]
 8003984:	f7ff ff90 	bl	80038a8 <NVIC_EncodePriority>
 8003988:	4602      	mov	r2, r0
 800398a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff5f 	bl	8003854 <__NVIC_SetPriority>
}
 8003996:	bf00      	nop
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	4603      	mov	r3, r0
 80039a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff35 	bl	800381c <__NVIC_EnableIRQ>
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ffa2 	bl	800390c <SysTick_Config>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e043      	b.n	8003a72 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_DMA_Init+0xa8>)
 80039f2:	4413      	add	r3, r2
 80039f4:	4a22      	ldr	r2, [pc, #136]	; (8003a80 <HAL_DMA_Init+0xac>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	091b      	lsrs	r3, r3, #4
 80039fc:	009a      	lsls	r2, r3, #2
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <HAL_DMA_Init+0xb0>)
 8003a06:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	bffdfff8 	.word	0xbffdfff8
 8003a80:	cccccccd 	.word	0xcccccccd
 8003a84:	40020000 	.word	0x40020000

08003a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_DMA_Start_IT+0x20>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e04b      	b.n	8003b40 <HAL_DMA_Start_IT+0xb8>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d13a      	bne.n	8003b32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	68b9      	ldr	r1, [r7, #8]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f9eb 	bl	8003ebc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 020e 	orr.w	r2, r2, #14
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e00f      	b.n	8003b20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0204 	bic.w	r2, r2, #4
 8003b0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 020a 	orr.w	r2, r2, #10
 8003b1e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	e005      	b.n	8003b3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3718      	adds	r7, #24
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d008      	beq.n	8003b72 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2204      	movs	r2, #4
 8003b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e020      	b.n	8003bb4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 020e 	bic.w	r2, r2, #14
 8003b80:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0201 	bic.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
	...

08003bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d005      	beq.n	8003be4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e051      	b.n	8003c88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 020e 	bic.w	r2, r2, #14
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_DMA_Abort_IT+0xd4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d029      	beq.n	8003c62 <HAL_DMA_Abort_IT+0xa2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_DMA_Abort_IT+0xd8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d022      	beq.n	8003c5e <HAL_DMA_Abort_IT+0x9e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_DMA_Abort_IT+0xdc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01a      	beq.n	8003c58 <HAL_DMA_Abort_IT+0x98>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1e      	ldr	r2, [pc, #120]	; (8003ca0 <HAL_DMA_Abort_IT+0xe0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d012      	beq.n	8003c52 <HAL_DMA_Abort_IT+0x92>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <HAL_DMA_Abort_IT+0xe4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d00a      	beq.n	8003c4c <HAL_DMA_Abort_IT+0x8c>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_DMA_Abort_IT+0xe8>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d102      	bne.n	8003c46 <HAL_DMA_Abort_IT+0x86>
 8003c40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003c44:	e00e      	b.n	8003c64 <HAL_DMA_Abort_IT+0xa4>
 8003c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c4a:	e00b      	b.n	8003c64 <HAL_DMA_Abort_IT+0xa4>
 8003c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c50:	e008      	b.n	8003c64 <HAL_DMA_Abort_IT+0xa4>
 8003c52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c56:	e005      	b.n	8003c64 <HAL_DMA_Abort_IT+0xa4>
 8003c58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c5c:	e002      	b.n	8003c64 <HAL_DMA_Abort_IT+0xa4>
 8003c5e:	2310      	movs	r3, #16
 8003c60:	e000      	b.n	8003c64 <HAL_DMA_Abort_IT+0xa4>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_DMA_Abort_IT+0xec>)
 8003c66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	4798      	blx	r3
    } 
  }
  return status;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40020008 	.word	0x40020008
 8003c98:	4002001c 	.word	0x4002001c
 8003c9c:	40020030 	.word	0x40020030
 8003ca0:	40020044 	.word	0x40020044
 8003ca4:	40020058 	.word	0x40020058
 8003ca8:	4002006c 	.word	0x4002006c
 8003cac:	40020000 	.word	0x40020000

08003cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ccc:	2204      	movs	r2, #4
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d04f      	beq.n	8003d78 <HAL_DMA_IRQHandler+0xc8>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d04a      	beq.n	8003d78 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d107      	bne.n	8003d00 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0204 	bic.w	r2, r2, #4
 8003cfe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a66      	ldr	r2, [pc, #408]	; (8003ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d029      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xae>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a65      	ldr	r2, [pc, #404]	; (8003ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_IRQHandler+0xaa>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a63      	ldr	r2, [pc, #396]	; (8003ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01a      	beq.n	8003d54 <HAL_DMA_IRQHandler+0xa4>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a62      	ldr	r2, [pc, #392]	; (8003eac <HAL_DMA_IRQHandler+0x1fc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d012      	beq.n	8003d4e <HAL_DMA_IRQHandler+0x9e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a60      	ldr	r2, [pc, #384]	; (8003eb0 <HAL_DMA_IRQHandler+0x200>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00a      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x98>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a5f      	ldr	r2, [pc, #380]	; (8003eb4 <HAL_DMA_IRQHandler+0x204>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d102      	bne.n	8003d42 <HAL_DMA_IRQHandler+0x92>
 8003d3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d40:	e00e      	b.n	8003d60 <HAL_DMA_IRQHandler+0xb0>
 8003d42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d46:	e00b      	b.n	8003d60 <HAL_DMA_IRQHandler+0xb0>
 8003d48:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d4c:	e008      	b.n	8003d60 <HAL_DMA_IRQHandler+0xb0>
 8003d4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d52:	e005      	b.n	8003d60 <HAL_DMA_IRQHandler+0xb0>
 8003d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d58:	e002      	b.n	8003d60 <HAL_DMA_IRQHandler+0xb0>
 8003d5a:	2340      	movs	r3, #64	; 0x40
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_IRQHandler+0xb0>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	4a55      	ldr	r2, [pc, #340]	; (8003eb8 <HAL_DMA_IRQHandler+0x208>)
 8003d62:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8094 	beq.w	8003e96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d76:	e08e      	b.n	8003e96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d056      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x186>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d051      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0320 	and.w	r3, r3, #32
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 020a 	bic.w	r2, r2, #10
 8003dae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a38      	ldr	r2, [pc, #224]	; (8003ea0 <HAL_DMA_IRQHandler+0x1f0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d029      	beq.n	8003e16 <HAL_DMA_IRQHandler+0x166>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a37      	ldr	r2, [pc, #220]	; (8003ea4 <HAL_DMA_IRQHandler+0x1f4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d022      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x162>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a35      	ldr	r2, [pc, #212]	; (8003ea8 <HAL_DMA_IRQHandler+0x1f8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d01a      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x15c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a34      	ldr	r2, [pc, #208]	; (8003eac <HAL_DMA_IRQHandler+0x1fc>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d012      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x156>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a32      	ldr	r2, [pc, #200]	; (8003eb0 <HAL_DMA_IRQHandler+0x200>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00a      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x150>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a31      	ldr	r2, [pc, #196]	; (8003eb4 <HAL_DMA_IRQHandler+0x204>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d102      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x14a>
 8003df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003df8:	e00e      	b.n	8003e18 <HAL_DMA_IRQHandler+0x168>
 8003dfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfe:	e00b      	b.n	8003e18 <HAL_DMA_IRQHandler+0x168>
 8003e00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e04:	e008      	b.n	8003e18 <HAL_DMA_IRQHandler+0x168>
 8003e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e0a:	e005      	b.n	8003e18 <HAL_DMA_IRQHandler+0x168>
 8003e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e10:	e002      	b.n	8003e18 <HAL_DMA_IRQHandler+0x168>
 8003e12:	2320      	movs	r3, #32
 8003e14:	e000      	b.n	8003e18 <HAL_DMA_IRQHandler+0x168>
 8003e16:	2302      	movs	r3, #2
 8003e18:	4a27      	ldr	r2, [pc, #156]	; (8003eb8 <HAL_DMA_IRQHandler+0x208>)
 8003e1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d034      	beq.n	8003e96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e34:	e02f      	b.n	8003e96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d028      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x1e8>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d023      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 020e 	bic.w	r2, r2, #14
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
    }
  }
  return;
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
}
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40020008 	.word	0x40020008
 8003ea4:	4002001c 	.word	0x4002001c
 8003ea8:	40020030 	.word	0x40020030
 8003eac:	40020044 	.word	0x40020044
 8003eb0:	40020058 	.word	0x40020058
 8003eb4:	4002006c 	.word	0x4002006c
 8003eb8:	40020000 	.word	0x40020000

08003ebc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d108      	bne.n	8003efc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003efa:	e007      	b.n	8003f0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
	...

08003f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b08b      	sub	sp, #44	; 0x2c
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f2a:	e169      	b.n	8004200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	f040 8158 	bne.w	80041fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	4a9a      	ldr	r2, [pc, #616]	; (80041b8 <HAL_GPIO_Init+0x2a0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d05e      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f54:	4a98      	ldr	r2, [pc, #608]	; (80041b8 <HAL_GPIO_Init+0x2a0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d875      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f5a:	4a98      	ldr	r2, [pc, #608]	; (80041bc <HAL_GPIO_Init+0x2a4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d058      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f60:	4a96      	ldr	r2, [pc, #600]	; (80041bc <HAL_GPIO_Init+0x2a4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d86f      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f66:	4a96      	ldr	r2, [pc, #600]	; (80041c0 <HAL_GPIO_Init+0x2a8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d052      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f6c:	4a94      	ldr	r2, [pc, #592]	; (80041c0 <HAL_GPIO_Init+0x2a8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d869      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f72:	4a94      	ldr	r2, [pc, #592]	; (80041c4 <HAL_GPIO_Init+0x2ac>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04c      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f78:	4a92      	ldr	r2, [pc, #584]	; (80041c4 <HAL_GPIO_Init+0x2ac>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d863      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f7e:	4a92      	ldr	r2, [pc, #584]	; (80041c8 <HAL_GPIO_Init+0x2b0>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d046      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
 8003f84:	4a90      	ldr	r2, [pc, #576]	; (80041c8 <HAL_GPIO_Init+0x2b0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d85d      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f8a:	2b12      	cmp	r3, #18
 8003f8c:	d82a      	bhi.n	8003fe4 <HAL_GPIO_Init+0xcc>
 8003f8e:	2b12      	cmp	r3, #18
 8003f90:	d859      	bhi.n	8004046 <HAL_GPIO_Init+0x12e>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <HAL_GPIO_Init+0x80>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08004013 	.word	0x08004013
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	08003fff 	.word	0x08003fff
 8003fa4:	08004041 	.word	0x08004041
 8003fa8:	08004047 	.word	0x08004047
 8003fac:	08004047 	.word	0x08004047
 8003fb0:	08004047 	.word	0x08004047
 8003fb4:	08004047 	.word	0x08004047
 8003fb8:	08004047 	.word	0x08004047
 8003fbc:	08004047 	.word	0x08004047
 8003fc0:	08004047 	.word	0x08004047
 8003fc4:	08004047 	.word	0x08004047
 8003fc8:	08004047 	.word	0x08004047
 8003fcc:	08004047 	.word	0x08004047
 8003fd0:	08004047 	.word	0x08004047
 8003fd4:	08004047 	.word	0x08004047
 8003fd8:	08004047 	.word	0x08004047
 8003fdc:	08003ff5 	.word	0x08003ff5
 8003fe0:	08004009 	.word	0x08004009
 8003fe4:	4a79      	ldr	r2, [pc, #484]	; (80041cc <HAL_GPIO_Init+0x2b4>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fea:	e02c      	b.n	8004046 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	623b      	str	r3, [r7, #32]
          break;
 8003ff2:	e029      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	623b      	str	r3, [r7, #32]
          break;
 8003ffc:	e024      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	3308      	adds	r3, #8
 8004004:	623b      	str	r3, [r7, #32]
          break;
 8004006:	e01f      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	330c      	adds	r3, #12
 800400e:	623b      	str	r3, [r7, #32]
          break;
 8004010:	e01a      	b.n	8004048 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800401a:	2304      	movs	r3, #4
 800401c:	623b      	str	r3, [r7, #32]
          break;
 800401e:	e013      	b.n	8004048 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d105      	bne.n	8004034 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004028:	2308      	movs	r3, #8
 800402a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	611a      	str	r2, [r3, #16]
          break;
 8004032:	e009      	b.n	8004048 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004034:	2308      	movs	r3, #8
 8004036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	615a      	str	r2, [r3, #20]
          break;
 800403e:	e003      	b.n	8004048 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
          break;
 8004044:	e000      	b.n	8004048 <HAL_GPIO_Init+0x130>
          break;
 8004046:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2bff      	cmp	r3, #255	; 0xff
 800404c:	d801      	bhi.n	8004052 <HAL_GPIO_Init+0x13a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	e001      	b.n	8004056 <HAL_GPIO_Init+0x13e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
 8004056:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2bff      	cmp	r3, #255	; 0xff
 800405c:	d802      	bhi.n	8004064 <HAL_GPIO_Init+0x14c>
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	e002      	b.n	800406a <HAL_GPIO_Init+0x152>
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	3b08      	subs	r3, #8
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	210f      	movs	r1, #15
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	fa01 f303 	lsl.w	r3, r1, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	401a      	ands	r2, r3
 800407c:	6a39      	ldr	r1, [r7, #32]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80b1 	beq.w	80041fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004098:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <HAL_GPIO_Init+0x2b8>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4a4c      	ldr	r2, [pc, #304]	; (80041d0 <HAL_GPIO_Init+0x2b8>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6193      	str	r3, [r2, #24]
 80040a4:	4b4a      	ldr	r3, [pc, #296]	; (80041d0 <HAL_GPIO_Init+0x2b8>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040b0:	4a48      	ldr	r2, [pc, #288]	; (80041d4 <HAL_GPIO_Init+0x2bc>)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	220f      	movs	r2, #15
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43db      	mvns	r3, r3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a40      	ldr	r2, [pc, #256]	; (80041d8 <HAL_GPIO_Init+0x2c0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <HAL_GPIO_Init+0x1ec>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a3f      	ldr	r2, [pc, #252]	; (80041dc <HAL_GPIO_Init+0x2c4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d00d      	beq.n	8004100 <HAL_GPIO_Init+0x1e8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3e      	ldr	r2, [pc, #248]	; (80041e0 <HAL_GPIO_Init+0x2c8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <HAL_GPIO_Init+0x1e4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3d      	ldr	r2, [pc, #244]	; (80041e4 <HAL_GPIO_Init+0x2cc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_GPIO_Init+0x1e0>
 80040f4:	2303      	movs	r3, #3
 80040f6:	e006      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 80040f8:	2304      	movs	r3, #4
 80040fa:	e004      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e002      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 8004100:	2301      	movs	r3, #1
 8004102:	e000      	b.n	8004106 <HAL_GPIO_Init+0x1ee>
 8004104:	2300      	movs	r3, #0
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	f002 0203 	and.w	r2, r2, #3
 800410c:	0092      	lsls	r2, r2, #2
 800410e:	4093      	lsls	r3, r2
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004116:	492f      	ldr	r1, [pc, #188]	; (80041d4 <HAL_GPIO_Init+0x2bc>)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	089b      	lsrs	r3, r3, #2
 800411c:	3302      	adds	r3, #2
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d006      	beq.n	800413e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004130:	4b2d      	ldr	r3, [pc, #180]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	492c      	ldr	r1, [pc, #176]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
 800413c:	e006      	b.n	800414c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800413e:	4b2a      	ldr	r3, [pc, #168]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	43db      	mvns	r3, r3
 8004146:	4928      	ldr	r1, [pc, #160]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004148:	4013      	ands	r3, r2
 800414a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d006      	beq.n	8004166 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004158:	4b23      	ldr	r3, [pc, #140]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	4922      	ldr	r1, [pc, #136]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	60cb      	str	r3, [r1, #12]
 8004164:	e006      	b.n	8004174 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	43db      	mvns	r3, r3
 800416e:	491e      	ldr	r1, [pc, #120]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004170:	4013      	ands	r3, r2
 8004172:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d006      	beq.n	800418e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	4918      	ldr	r1, [pc, #96]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	e006      	b.n	800419c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800418e:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	43db      	mvns	r3, r3
 8004196:	4914      	ldr	r1, [pc, #80]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 8004198:	4013      	ands	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d021      	beq.n	80041ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80041a8:	4b0f      	ldr	r3, [pc, #60]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <HAL_GPIO_Init+0x2d0>)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]
 80041b4:	e021      	b.n	80041fa <HAL_GPIO_Init+0x2e2>
 80041b6:	bf00      	nop
 80041b8:	10320000 	.word	0x10320000
 80041bc:	10310000 	.word	0x10310000
 80041c0:	10220000 	.word	0x10220000
 80041c4:	10210000 	.word	0x10210000
 80041c8:	10120000 	.word	0x10120000
 80041cc:	10110000 	.word	0x10110000
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40010000 	.word	0x40010000
 80041d8:	40010800 	.word	0x40010800
 80041dc:	40010c00 	.word	0x40010c00
 80041e0:	40011000 	.word	0x40011000
 80041e4:	40011400 	.word	0x40011400
 80041e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_GPIO_Init+0x304>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	43db      	mvns	r3, r3
 80041f4:	4909      	ldr	r1, [pc, #36]	; (800421c <HAL_GPIO_Init+0x304>)
 80041f6:	4013      	ands	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	3301      	adds	r3, #1
 80041fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	f47f ae8e 	bne.w	8003f2c <HAL_GPIO_Init+0x14>
  }
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	372c      	adds	r7, #44	; 0x2c
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40010400 	.word	0x40010400

08004220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	807b      	strh	r3, [r7, #2]
 800422c:	4613      	mov	r3, r2
 800422e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004230:	787b      	ldrb	r3, [r7, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800423c:	e003      	b.n	8004246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	041a      	lsls	r2, r3, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e12b      	b.n	80044ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd f8e4 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042b4:	f001 fbfc 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 80042b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a81      	ldr	r2, [pc, #516]	; (80044c4 <HAL_I2C_Init+0x274>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d807      	bhi.n	80042d4 <HAL_I2C_Init+0x84>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a80      	ldr	r2, [pc, #512]	; (80044c8 <HAL_I2C_Init+0x278>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e006      	b.n	80042e2 <HAL_I2C_Init+0x92>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a7d      	ldr	r2, [pc, #500]	; (80044cc <HAL_I2C_Init+0x27c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0e7      	b.n	80044ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a78      	ldr	r2, [pc, #480]	; (80044d0 <HAL_I2C_Init+0x280>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <HAL_I2C_Init+0x274>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <HAL_I2C_Init+0xd4>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	e009      	b.n	8004338 <HAL_I2C_Init+0xe8>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	4a69      	ldr	r2, [pc, #420]	; (80044d4 <HAL_I2C_Init+0x284>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	3301      	adds	r3, #1
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800434a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	495c      	ldr	r1, [pc, #368]	; (80044c4 <HAL_I2C_Init+0x274>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d819      	bhi.n	800438c <HAL_I2C_Init+0x13c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e59      	subs	r1, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fbb1 f3f3 	udiv	r3, r1, r3
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	f640 73fc 	movw	r3, #4092	; 0xffc
 800436c:	400b      	ands	r3, r1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_I2C_Init+0x138>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e59      	subs	r1, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	e051      	b.n	800442c <HAL_I2C_Init+0x1dc>
 8004388:	2304      	movs	r3, #4
 800438a:	e04f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <HAL_I2C_Init+0x168>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e012      	b.n	80043de <HAL_I2C_Init+0x18e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x196>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e022      	b.n	800442c <HAL_I2C_Init+0x1dc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_I2C_Init+0x1bc>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e58      	subs	r0, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	440b      	add	r3, r1
 80043fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	e00f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6809      	ldr	r1, [r1, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800445a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6911      	ldr	r1, [r2, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	000186a0 	.word	0x000186a0
 80044c8:	001e847f 	.word	0x001e847f
 80044cc:	003d08ff 	.word	0x003d08ff
 80044d0:	431bde83 	.word	0x431bde83
 80044d4:	10624dd3 	.word	0x10624dd3

080044d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044f2:	f7ff f933 	bl	800375c <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b20      	cmp	r3, #32
 8004502:	f040 80d9 	bne.w	80046b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2319      	movs	r3, #25
 800450c:	2201      	movs	r2, #1
 800450e:	496d      	ldr	r1, [pc, #436]	; (80046c4 <HAL_I2C_Mem_Write+0x1ec>)
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 fccd 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
 800451e:	e0cc      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_I2C_Mem_Write+0x56>
 800452a:	2302      	movs	r3, #2
 800452c:	e0c5      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d007      	beq.n	8004554 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2221      	movs	r2, #33	; 0x21
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a3a      	ldr	r2, [r7, #32]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <HAL_I2C_Mem_Write+0x1f0>)
 8004594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004596:	88f8      	ldrh	r0, [r7, #6]
 8004598:	893a      	ldrh	r2, [r7, #8]
 800459a:	8979      	ldrh	r1, [r7, #10]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4603      	mov	r3, r0
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fb04 	bl	8004bb4 <I2C_RequestMemoryWrite>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d052      	beq.n	8004658 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e081      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fd92 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	d107      	bne.n	80045de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e06b      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	781a      	ldrb	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11b      	bne.n	8004658 <HAL_I2C_Mem_Write+0x180>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004624:	2b00      	cmp	r3, #0
 8004626:	d017      	beq.n	8004658 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	781a      	ldrb	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1aa      	bne.n	80045b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fd85 	bl	8005174 <I2C_WaitOnBTFFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2b04      	cmp	r3, #4
 8004676:	d107      	bne.n	8004688 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e016      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	00100002 	.word	0x00100002
 80046c8:	ffff0000 	.word	0xffff0000

080046cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	460b      	mov	r3, r1
 80046e0:	813b      	strh	r3, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ea:	f7ff f837 	bl	800375c <HAL_GetTick>
 80046ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	f040 8250 	bne.w	8004b9e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	4982      	ldr	r1, [pc, #520]	; (8004910 <HAL_I2C_Mem_Read+0x244>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fbd1 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	e243      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Mem_Read+0x5a>
 8004722:	2302      	movs	r3, #2
 8004724:	e23c      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2222      	movs	r2, #34	; 0x22
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a62      	ldr	r2, [pc, #392]	; (8004914 <HAL_I2C_Mem_Read+0x248>)
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800478e:	88f8      	ldrh	r0, [r7, #6]
 8004790:	893a      	ldrh	r2, [r7, #8]
 8004792:	8979      	ldrh	r1, [r7, #10]
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fa9e 	bl	8004ce0 <I2C_RequestMemoryRead>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e1f8      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d113      	bne.n	80047de <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047da:	601a      	str	r2, [r3, #0]
 80047dc:	e1cc      	b.n	8004b78 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d11e      	bne.n	8004824 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047f6:	b672      	cpsid	i
}
 80047f8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800481e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004820:	b662      	cpsie	i
}
 8004822:	e035      	b.n	8004890 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b02      	cmp	r3, #2
 800482a:	d11e      	bne.n	800486a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800483c:	b672      	cpsid	i
}
 800483e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004864:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004866:	b662      	cpsie	i
}
 8004868:	e012      	b.n	8004890 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004878:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004890:	e172      	b.n	8004b78 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004896:	2b03      	cmp	r3, #3
 8004898:	f200 811f 	bhi.w	8004ada <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d123      	bne.n	80048ec <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 fcab 	bl	8005204 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e173      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048ea:	e145      	b.n	8004b78 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d152      	bne.n	800499a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	2200      	movs	r2, #0
 80048fc:	4906      	ldr	r1, [pc, #24]	; (8004918 <HAL_I2C_Mem_Read+0x24c>)
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fad6 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e148      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
 800490e:	bf00      	nop
 8004910:	00100002 	.word	0x00100002
 8004914:	ffff0000 	.word	0xffff0000
 8004918:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800491c:	b672      	cpsid	i
}
 800491e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	b2d2      	uxtb	r2, r2
 800493c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	1c5a      	adds	r2, r3, #1
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004962:	b662      	cpsie	i
}
 8004964:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004998:	e0ee      	b.n	8004b78 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2200      	movs	r2, #0
 80049a2:	4981      	ldr	r1, [pc, #516]	; (8004ba8 <HAL_I2C_Mem_Read+0x4dc>)
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fa83 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0f5      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80049c4:	b672      	cpsid	i
}
 80049c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80049fa:	4b6c      	ldr	r3, [pc, #432]	; (8004bac <HAL_I2C_Mem_Read+0x4e0>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	08db      	lsrs	r3, r3, #3
 8004a00:	4a6b      	ldr	r2, [pc, #428]	; (8004bb0 <HAL_I2C_Mem_Read+0x4e4>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	0a1a      	lsrs	r2, r3, #8
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	00da      	lsls	r2, r3, #3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d118      	bne.n	8004a52 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004a42:	b662      	cpsie	i
}
 8004a44:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e0a6      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d1d9      	bne.n	8004a14 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691a      	ldr	r2, [r3, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004aa2:	b662      	cpsie	i
}
 8004aa4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad8:	e04e      	b.n	8004b78 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fb90 	bl	8005204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e058      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d124      	bne.n	8004b78 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d107      	bne.n	8004b46 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b44:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	691a      	ldr	r2, [r3, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f47f ae88 	bne.w	8004892 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8004b9e:	2302      	movs	r3, #2
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	00010004 	.word	0x00010004
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	14f8b589 	.word	0x14f8b589

08004bb4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	817b      	strh	r3, [r7, #10]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	813b      	strh	r3, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f960 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c04:	d103      	bne.n	8004c0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e05f      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	6a3a      	ldr	r2, [r7, #32]
 8004c26:	492d      	ldr	r1, [pc, #180]	; (8004cdc <I2C_RequestMemoryWrite+0x128>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f9bb 	bl	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e04c      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fa46 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00d      	beq.n	8004c7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d107      	bne.n	8004c76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e02b      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d105      	bne.n	8004c8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c80:	893b      	ldrh	r3, [r7, #8]
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e021      	b.n	8004cd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9c:	6a39      	ldr	r1, [r7, #32]
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fa20 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00d      	beq.n	8004cc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d107      	bne.n	8004cc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e005      	b.n	8004cd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cc6:	893b      	ldrh	r3, [r7, #8]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	00010002 	.word	0x00010002

08004ce0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	817b      	strh	r3, [r7, #10]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	813b      	strh	r3, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f8c2 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00d      	beq.n	8004d4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d103      	bne.n	8004d4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e0aa      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4e:	897b      	ldrh	r3, [r7, #10]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	6a3a      	ldr	r2, [r7, #32]
 8004d62:	4952      	ldr	r1, [pc, #328]	; (8004eac <I2C_RequestMemoryRead+0x1cc>)
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f91d 	bl	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d001      	beq.n	8004d74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e097      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d8c:	6a39      	ldr	r1, [r7, #32]
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 f9a8 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00d      	beq.n	8004db6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d107      	bne.n	8004db2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e076      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d105      	bne.n	8004dc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dbc:	893b      	ldrh	r3, [r7, #8]
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	611a      	str	r2, [r3, #16]
 8004dc6:	e021      	b.n	8004e0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc8:	893b      	ldrh	r3, [r7, #8]
 8004dca:	0a1b      	lsrs	r3, r3, #8
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	6a39      	ldr	r1, [r7, #32]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f982 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d107      	bne.n	8004dfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e050      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e02:	893b      	ldrh	r3, [r7, #8]
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0e:	6a39      	ldr	r1, [r7, #32]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f967 	bl	80050e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00d      	beq.n	8004e38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d107      	bne.n	8004e34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e035      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 f82b 	bl	8004eb0 <I2C_WaitOnFlagUntilTimeout>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00d      	beq.n	8004e7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e6e:	d103      	bne.n	8004e78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e013      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e7c:	897b      	ldrh	r3, [r7, #10]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	6a3a      	ldr	r2, [r7, #32]
 8004e90:	4906      	ldr	r1, [pc, #24]	; (8004eac <I2C_RequestMemoryRead+0x1cc>)
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f886 	bl	8004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	00010002 	.word	0x00010002

08004eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	603b      	str	r3, [r7, #0]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec0:	e048      	b.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec8:	d044      	beq.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eca:	f7fe fc47 	bl	800375c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d302      	bcc.n	8004ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d139      	bne.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	0c1b      	lsrs	r3, r3, #16
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d10d      	bne.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	43da      	mvns	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	e00c      	b.n	8004f20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	43da      	mvns	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d116      	bne.n	8004f54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	f043 0220 	orr.w	r2, r3, #32
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e023      	b.n	8004f9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d10d      	bne.n	8004f7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	43da      	mvns	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	e00c      	b.n	8004f94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	43da      	mvns	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	461a      	mov	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d093      	beq.n	8004ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fb2:	e071      	b.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc2:	d123      	bne.n	800500c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004fdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	f043 0204 	orr.w	r2, r3, #4
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e067      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d041      	beq.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005014:	f7fe fba2 	bl	800375c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d136      	bne.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10c      	bne.n	800504e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	43da      	mvns	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4013      	ands	r3, r2
 8005040:	b29b      	uxth	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	bf14      	ite	ne
 8005046:	2301      	movne	r3, #1
 8005048:	2300      	moveq	r3, #0
 800504a:	b2db      	uxtb	r3, r3
 800504c:	e00b      	b.n	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	43da      	mvns	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d016      	beq.n	8005098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	f043 0220 	orr.w	r2, r3, #32
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e021      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10c      	bne.n	80050bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	43da      	mvns	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	4013      	ands	r3, r2
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf14      	ite	ne
 80050b4:	2301      	movne	r3, #1
 80050b6:	2300      	moveq	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	e00b      	b.n	80050d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	43da      	mvns	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4013      	ands	r3, r2
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	bf14      	ite	ne
 80050ce:	2301      	movne	r3, #1
 80050d0:	2300      	moveq	r3, #0
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f47f af6d 	bne.w	8004fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f0:	e034      	b.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f8e3 	bl	80052be <I2C_IsAcknowledgeFailed>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e034      	b.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005108:	d028      	beq.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800510a:	f7fe fb27 	bl	800375c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	429a      	cmp	r2, r3
 8005118:	d302      	bcc.n	8005120 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11d      	bne.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512a:	2b80      	cmp	r3, #128	; 0x80
 800512c:	d016      	beq.n	800515c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e007      	b.n	800516c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d1c3      	bne.n	80050f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005180:	e034      	b.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f89b 	bl	80052be <I2C_IsAcknowledgeFailed>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e034      	b.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d028      	beq.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519a:	f7fe fadf 	bl	800375c <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d302      	bcc.n	80051b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d11d      	bne.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d016      	beq.n	80051ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	f043 0220 	orr.w	r2, r3, #32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e007      	b.n	80051fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d1c3      	bne.n	8005182 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005210:	e049      	b.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b10      	cmp	r3, #16
 800521e:	d119      	bne.n	8005254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f06f 0210 	mvn.w	r2, #16
 8005228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e030      	b.n	80052b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7fe fa82 	bl	800375c <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11d      	bne.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d016      	beq.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e007      	b.n	80052b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d1ae      	bne.n	8005212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052be:	b480      	push	{r7}
 80052c0:	b083      	sub	sp, #12
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d4:	d11b      	bne.n	800530e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr
	...

0800531c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e272      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8087 	beq.w	800544a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800533c:	4b92      	ldr	r3, [pc, #584]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f003 030c 	and.w	r3, r3, #12
 8005344:	2b04      	cmp	r3, #4
 8005346:	d00c      	beq.n	8005362 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005348:	4b8f      	ldr	r3, [pc, #572]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f003 030c 	and.w	r3, r3, #12
 8005350:	2b08      	cmp	r3, #8
 8005352:	d112      	bne.n	800537a <HAL_RCC_OscConfig+0x5e>
 8005354:	4b8c      	ldr	r3, [pc, #560]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	d10b      	bne.n	800537a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005362:	4b89      	ldr	r3, [pc, #548]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d06c      	beq.n	8005448 <HAL_RCC_OscConfig+0x12c>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d168      	bne.n	8005448 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e24c      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d106      	bne.n	8005392 <HAL_RCC_OscConfig+0x76>
 8005384:	4b80      	ldr	r3, [pc, #512]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a7f      	ldr	r2, [pc, #508]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 800538a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	e02e      	b.n	80053f0 <HAL_RCC_OscConfig+0xd4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <HAL_RCC_OscConfig+0x98>
 800539a:	4b7b      	ldr	r3, [pc, #492]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7a      	ldr	r2, [pc, #488]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	4b78      	ldr	r3, [pc, #480]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a77      	ldr	r2, [pc, #476]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b0:	6013      	str	r3, [r2, #0]
 80053b2:	e01d      	b.n	80053f0 <HAL_RCC_OscConfig+0xd4>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053bc:	d10c      	bne.n	80053d8 <HAL_RCC_OscConfig+0xbc>
 80053be:	4b72      	ldr	r3, [pc, #456]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a71      	ldr	r2, [pc, #452]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	4b6f      	ldr	r3, [pc, #444]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a6e      	ldr	r2, [pc, #440]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	e00b      	b.n	80053f0 <HAL_RCC_OscConfig+0xd4>
 80053d8:	4b6b      	ldr	r3, [pc, #428]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a6a      	ldr	r2, [pc, #424]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	4b68      	ldr	r3, [pc, #416]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a67      	ldr	r2, [pc, #412]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80053ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d013      	beq.n	8005420 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f8:	f7fe f9b0 	bl	800375c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005400:	f7fe f9ac 	bl	800375c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b64      	cmp	r3, #100	; 0x64
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e200      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	4b5d      	ldr	r3, [pc, #372]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0xe4>
 800541e:	e014      	b.n	800544a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fe f99c 	bl	800375c <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005428:	f7fe f998 	bl	800375c <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b64      	cmp	r3, #100	; 0x64
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e1ec      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543a:	4b53      	ldr	r3, [pc, #332]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x10c>
 8005446:	e000      	b.n	800544a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d063      	beq.n	800551e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005456:	4b4c      	ldr	r3, [pc, #304]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00b      	beq.n	800547a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005462:	4b49      	ldr	r3, [pc, #292]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f003 030c 	and.w	r3, r3, #12
 800546a:	2b08      	cmp	r3, #8
 800546c:	d11c      	bne.n	80054a8 <HAL_RCC_OscConfig+0x18c>
 800546e:	4b46      	ldr	r3, [pc, #280]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d116      	bne.n	80054a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800547a:	4b43      	ldr	r3, [pc, #268]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <HAL_RCC_OscConfig+0x176>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d001      	beq.n	8005492 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e1c0      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005492:	4b3d      	ldr	r3, [pc, #244]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4939      	ldr	r1, [pc, #228]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80054a2:	4313      	orrs	r3, r2
 80054a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a6:	e03a      	b.n	800551e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d020      	beq.n	80054f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b0:	4b36      	ldr	r3, [pc, #216]	; (800558c <HAL_RCC_OscConfig+0x270>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b6:	f7fe f951 	bl	800375c <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054be:	f7fe f94d 	bl	800375c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e1a1      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d0:	4b2d      	ldr	r3, [pc, #180]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054dc:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4927      	ldr	r1, [pc, #156]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	600b      	str	r3, [r1, #0]
 80054f0:	e015      	b.n	800551e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054f2:	4b26      	ldr	r3, [pc, #152]	; (800558c <HAL_RCC_OscConfig+0x270>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f8:	f7fe f930 	bl	800375c <HAL_GetTick>
 80054fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054fe:	e008      	b.n	8005512 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005500:	f7fe f92c 	bl	800375c <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e180      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f0      	bne.n	8005500 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d03a      	beq.n	80055a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d019      	beq.n	8005566 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005532:	4b17      	ldr	r3, [pc, #92]	; (8005590 <HAL_RCC_OscConfig+0x274>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005538:	f7fe f910 	bl	800375c <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005540:	f7fe f90c 	bl	800375c <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e160      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005552:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <HAL_RCC_OscConfig+0x26c>)
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0f0      	beq.n	8005540 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800555e:	2001      	movs	r0, #1
 8005560:	f000 face 	bl	8005b00 <RCC_Delay>
 8005564:	e01c      	b.n	80055a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005566:	4b0a      	ldr	r3, [pc, #40]	; (8005590 <HAL_RCC_OscConfig+0x274>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556c:	f7fe f8f6 	bl	800375c <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005572:	e00f      	b.n	8005594 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005574:	f7fe f8f2 	bl	800375c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d908      	bls.n	8005594 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e146      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
 8005586:	bf00      	nop
 8005588:	40021000 	.word	0x40021000
 800558c:	42420000 	.word	0x42420000
 8005590:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	4b92      	ldr	r3, [pc, #584]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1e9      	bne.n	8005574 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80a6 	beq.w	80056fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055ae:	2300      	movs	r3, #0
 80055b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b2:	4b8b      	ldr	r3, [pc, #556]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10d      	bne.n	80055da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055be:	4b88      	ldr	r3, [pc, #544]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	4a87      	ldr	r2, [pc, #540]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80055c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c8:	61d3      	str	r3, [r2, #28]
 80055ca:	4b85      	ldr	r3, [pc, #532]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055d2:	60bb      	str	r3, [r7, #8]
 80055d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d6:	2301      	movs	r3, #1
 80055d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055da:	4b82      	ldr	r3, [pc, #520]	; (80057e4 <HAL_RCC_OscConfig+0x4c8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d118      	bne.n	8005618 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e6:	4b7f      	ldr	r3, [pc, #508]	; (80057e4 <HAL_RCC_OscConfig+0x4c8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7e      	ldr	r2, [pc, #504]	; (80057e4 <HAL_RCC_OscConfig+0x4c8>)
 80055ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f2:	f7fe f8b3 	bl	800375c <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055fa:	f7fe f8af 	bl	800375c <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b64      	cmp	r3, #100	; 0x64
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e103      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800560c:	4b75      	ldr	r3, [pc, #468]	; (80057e4 <HAL_RCC_OscConfig+0x4c8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d106      	bne.n	800562e <HAL_RCC_OscConfig+0x312>
 8005620:	4b6f      	ldr	r3, [pc, #444]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	4a6e      	ldr	r2, [pc, #440]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6213      	str	r3, [r2, #32]
 800562c:	e02d      	b.n	800568a <HAL_RCC_OscConfig+0x36e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0x334>
 8005636:	4b6a      	ldr	r3, [pc, #424]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	4a69      	ldr	r2, [pc, #420]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	6213      	str	r3, [r2, #32]
 8005642:	4b67      	ldr	r3, [pc, #412]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	4a66      	ldr	r2, [pc, #408]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005648:	f023 0304 	bic.w	r3, r3, #4
 800564c:	6213      	str	r3, [r2, #32]
 800564e:	e01c      	b.n	800568a <HAL_RCC_OscConfig+0x36e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	2b05      	cmp	r3, #5
 8005656:	d10c      	bne.n	8005672 <HAL_RCC_OscConfig+0x356>
 8005658:	4b61      	ldr	r3, [pc, #388]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4a60      	ldr	r2, [pc, #384]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 800565e:	f043 0304 	orr.w	r3, r3, #4
 8005662:	6213      	str	r3, [r2, #32]
 8005664:	4b5e      	ldr	r3, [pc, #376]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	4a5d      	ldr	r2, [pc, #372]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6213      	str	r3, [r2, #32]
 8005670:	e00b      	b.n	800568a <HAL_RCC_OscConfig+0x36e>
 8005672:	4b5b      	ldr	r3, [pc, #364]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	4a5a      	ldr	r2, [pc, #360]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	6213      	str	r3, [r2, #32]
 800567e:	4b58      	ldr	r3, [pc, #352]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	4a57      	ldr	r2, [pc, #348]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005684:	f023 0304 	bic.w	r3, r3, #4
 8005688:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d015      	beq.n	80056be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005692:	f7fe f863 	bl	800375c <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005698:	e00a      	b.n	80056b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569a:	f7fe f85f 	bl	800375c <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e0b1      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b0:	4b4b      	ldr	r3, [pc, #300]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0ee      	beq.n	800569a <HAL_RCC_OscConfig+0x37e>
 80056bc:	e014      	b.n	80056e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056be:	f7fe f84d 	bl	800375c <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fe f849 	bl	800375c <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e09b      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056dc:	4b40      	ldr	r3, [pc, #256]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ee      	bne.n	80056c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d105      	bne.n	80056fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ee:	4b3c      	ldr	r3, [pc, #240]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	4a3b      	ldr	r2, [pc, #236]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80056f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 8087 	beq.w	8005812 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005704:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b08      	cmp	r3, #8
 800570e:	d061      	beq.n	80057d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d146      	bne.n	80057a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005718:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <HAL_RCC_OscConfig+0x4cc>)
 800571a:	2200      	movs	r2, #0
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fe f81d 	bl	800375c <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005726:	f7fe f819 	bl	800375c <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e06d      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005738:	4b29      	ldr	r3, [pc, #164]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1f0      	bne.n	8005726 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574c:	d108      	bne.n	8005760 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800574e:	4b24      	ldr	r3, [pc, #144]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	4921      	ldr	r1, [pc, #132]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 800575c:	4313      	orrs	r3, r2
 800575e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005760:	4b1f      	ldr	r3, [pc, #124]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a19      	ldr	r1, [r3, #32]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	430b      	orrs	r3, r1
 8005772:	491b      	ldr	r1, [pc, #108]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 8005774:	4313      	orrs	r3, r2
 8005776:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_RCC_OscConfig+0x4cc>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577e:	f7fd ffed 	bl	800375c <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005784:	e008      	b.n	8005798 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005786:	f7fd ffe9 	bl	800375c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b02      	cmp	r3, #2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e03d      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005798:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCC_OscConfig+0x46a>
 80057a4:	e035      	b.n	8005812 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <HAL_RCC_OscConfig+0x4cc>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ac:	f7fd ffd6 	bl	800375c <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fd ffd2 	bl	800375c <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e026      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCC_OscConfig+0x4c4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x498>
 80057d2:	e01e      	b.n	8005812 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e019      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40007000 	.word	0x40007000
 80057e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <HAL_RCC_OscConfig+0x500>)
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d106      	bne.n	800580e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d001      	beq.n	8005812 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	40021000 	.word	0x40021000

08005820 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0d0      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005834:	4b6a      	ldr	r3, [pc, #424]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	429a      	cmp	r2, r3
 8005840:	d910      	bls.n	8005864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005842:	4b67      	ldr	r3, [pc, #412]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f023 0207 	bic.w	r2, r3, #7
 800584a:	4965      	ldr	r1, [pc, #404]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	4313      	orrs	r3, r2
 8005850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005852:	4b63      	ldr	r3, [pc, #396]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d001      	beq.n	8005864 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0b8      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
 800586c:	2b00      	cmp	r3, #0
 800586e:	d020      	beq.n	80058b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a58      	ldr	r2, [pc, #352]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005882:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005886:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005894:	4b53      	ldr	r3, [pc, #332]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a52      	ldr	r2, [pc, #328]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 800589a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800589e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a0:	4b50      	ldr	r3, [pc, #320]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	494d      	ldr	r1, [pc, #308]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d040      	beq.n	8005940 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c6:	4b47      	ldr	r3, [pc, #284]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d115      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e07f      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d107      	bne.n	80058ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058de:	4b41      	ldr	r3, [pc, #260]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d109      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e073      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ee:	4b3d      	ldr	r3, [pc, #244]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e06b      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fe:	4b39      	ldr	r3, [pc, #228]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f023 0203 	bic.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4936      	ldr	r1, [pc, #216]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 800590c:	4313      	orrs	r3, r2
 800590e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005910:	f7fd ff24 	bl	800375c <HAL_GetTick>
 8005914:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	e00a      	b.n	800592e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005918:	f7fd ff20 	bl	800375c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e053      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592e:	4b2d      	ldr	r3, [pc, #180]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f003 020c 	and.w	r2, r3, #12
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	429a      	cmp	r2, r3
 800593e:	d1eb      	bne.n	8005918 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d210      	bcs.n	8005970 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f023 0207 	bic.w	r2, r3, #7
 8005956:	4922      	ldr	r1, [pc, #136]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	4313      	orrs	r3, r2
 800595c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <HAL_RCC_ClockConfig+0x1c0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	429a      	cmp	r2, r3
 800596a:	d001      	beq.n	8005970 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e032      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d008      	beq.n	800598e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4916      	ldr	r1, [pc, #88]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 800598a:	4313      	orrs	r3, r2
 800598c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800599a:	4b12      	ldr	r3, [pc, #72]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	490e      	ldr	r1, [pc, #56]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059ae:	f000 f821 	bl	80059f4 <HAL_RCC_GetSysClockFreq>
 80059b2:	4602      	mov	r2, r0
 80059b4:	4b0b      	ldr	r3, [pc, #44]	; (80059e4 <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	490a      	ldr	r1, [pc, #40]	; (80059e8 <HAL_RCC_ClockConfig+0x1c8>)
 80059c0:	5ccb      	ldrb	r3, [r1, r3]
 80059c2:	fa22 f303 	lsr.w	r3, r2, r3
 80059c6:	4a09      	ldr	r2, [pc, #36]	; (80059ec <HAL_RCC_ClockConfig+0x1cc>)
 80059c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059ca:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <HAL_RCC_ClockConfig+0x1d0>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fd fe82 	bl	80036d8 <HAL_InitTick>

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40022000 	.word	0x40022000
 80059e4:	40021000 	.word	0x40021000
 80059e8:	0800c078 	.word	0x0800c078
 80059ec:	20000000 	.word	0x20000000
 80059f0:	20000004 	.word	0x20000004

080059f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	2300      	movs	r3, #0
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	2300      	movs	r3, #0
 8005a08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 030c 	and.w	r3, r3, #12
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d002      	beq.n	8005a24 <HAL_RCC_GetSysClockFreq+0x30>
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d003      	beq.n	8005a2a <HAL_RCC_GetSysClockFreq+0x36>
 8005a22:	e027      	b.n	8005a74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a24:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8005a26:	613b      	str	r3, [r7, #16]
      break;
 8005a28:	e027      	b.n	8005a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	0c9b      	lsrs	r3, r3, #18
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005a34:	5cd3      	ldrb	r3, [r2, r3]
 8005a36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d010      	beq.n	8005a64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <HAL_RCC_GetSysClockFreq+0x94>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	0c5b      	lsrs	r3, r3, #17
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005a4e:	5cd3      	ldrb	r3, [r2, r3]
 8005a50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8005a56:	fb03 f202 	mul.w	r2, r3, r2
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e004      	b.n	8005a6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a0c      	ldr	r2, [pc, #48]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a68:	fb02 f303 	mul.w	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	613b      	str	r3, [r7, #16]
      break;
 8005a72:	e002      	b.n	8005a7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <HAL_RCC_GetSysClockFreq+0x98>)
 8005a76:	613b      	str	r3, [r7, #16]
      break;
 8005a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a7a:	693b      	ldr	r3, [r7, #16]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
 8005a8c:	007a1200 	.word	0x007a1200
 8005a90:	0800c090 	.word	0x0800c090
 8005a94:	0800c0a0 	.word	0x0800c0a0
 8005a98:	003d0900 	.word	0x003d0900

08005a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <HAL_RCC_GetHCLKFreq+0x10>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	20000000 	.word	0x20000000

08005ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ab4:	f7ff fff2 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	0a1b      	lsrs	r3, r3, #8
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	4903      	ldr	r1, [pc, #12]	; (8005ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	0800c088 	.word	0x0800c088

08005ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005adc:	f7ff ffde 	bl	8005a9c <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	0adb      	lsrs	r3, r3, #11
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4903      	ldr	r1, [pc, #12]	; (8005afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	0800c088 	.word	0x0800c088

08005b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b08:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <RCC_Delay+0x34>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <RCC_Delay+0x38>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	0a5b      	lsrs	r3, r3, #9
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b1c:	bf00      	nop
  }
  while (Delay --);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1e5a      	subs	r2, r3, #1
 8005b22:	60fa      	str	r2, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1f9      	bne.n	8005b1c <RCC_Delay+0x1c>
}
 8005b28:	bf00      	nop
 8005b2a:	bf00      	nop
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr
 8005b34:	20000000 	.word	0x20000000
 8005b38:	10624dd3 	.word	0x10624dd3

08005b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e041      	b.n	8005bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fd f9ec 	bl	8002f40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f000 fc18 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d001      	beq.n	8005bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e03a      	b.n	8005c6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a18      	ldr	r2, [pc, #96]	; (8005c74 <HAL_TIM_Base_Start_IT+0x98>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d00e      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x58>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1e:	d009      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x58>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a14      	ldr	r2, [pc, #80]	; (8005c78 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d004      	beq.n	8005c34 <HAL_TIM_Base_Start_IT+0x58>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a13      	ldr	r2, [pc, #76]	; (8005c7c <HAL_TIM_Base_Start_IT+0xa0>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d111      	bne.n	8005c58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b06      	cmp	r3, #6
 8005c44:	d010      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0201 	orr.w	r2, r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c56:	e007      	b.n	8005c68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	40012c00 	.word	0x40012c00
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800

08005c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e041      	b.n	8005d16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d106      	bne.n	8005cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 f839 	bl	8005d1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 fb76 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	b083      	sub	sp, #12
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d26:	bf00      	nop
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_TIM_PWM_Start+0x24>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e022      	b.n	8005d9a <HAL_TIM_PWM_Start+0x6a>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d109      	bne.n	8005d6e <HAL_TIM_PWM_Start+0x3e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	e015      	b.n	8005d9a <HAL_TIM_PWM_Start+0x6a>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d109      	bne.n	8005d88 <HAL_TIM_PWM_Start+0x58>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e008      	b.n	8005d9a <HAL_TIM_PWM_Start+0x6a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e05e      	b.n	8005e60 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d104      	bne.n	8005db2 <HAL_TIM_PWM_Start+0x82>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005db0:	e013      	b.n	8005dda <HAL_TIM_PWM_Start+0xaa>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIM_PWM_Start+0x92>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005dc0:	e00b      	b.n	8005dda <HAL_TIM_PWM_Start+0xaa>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d104      	bne.n	8005dd2 <HAL_TIM_PWM_Start+0xa2>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dd0:	e003      	b.n	8005dda <HAL_TIM_PWM_Start+0xaa>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2201      	movs	r2, #1
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fd70 	bl	80068c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	; (8005e68 <HAL_TIM_PWM_Start+0x138>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d107      	bne.n	8005e02 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <HAL_TIM_PWM_Start+0x138>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_TIM_PWM_Start+0xfa>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e14:	d009      	beq.n	8005e2a <HAL_TIM_PWM_Start+0xfa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <HAL_TIM_PWM_Start+0x13c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIM_PWM_Start+0xfa>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <HAL_TIM_PWM_Start+0x140>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d111      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b06      	cmp	r3, #6
 8005e3a:	d010      	beq.n	8005e5e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4c:	e007      	b.n	8005e5e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	40012c00 	.word	0x40012c00
 8005e6c:	40000400 	.word	0x40000400
 8005e70:	40000800 	.word	0x40000800

08005e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d020      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01b      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f06f 0202 	mvn.w	r2, #2
 8005ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa5a 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005ec4:	e005      	b.n	8005ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa4d 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 fa5c 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d020      	beq.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d01b      	beq.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0204 	mvn.w	r2, #4
 8005ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa34 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fa27 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fa36 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d020      	beq.n	8005f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0208 	mvn.w	r2, #8
 8005f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2204      	movs	r2, #4
 8005f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa0e 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005f5c:	e005      	b.n	8005f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa01 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fa10 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0310 	and.w	r3, r3, #16
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0210 	mvn.w	r2, #16
 8005f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2208      	movs	r2, #8
 8005f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	69db      	ldr	r3, [r3, #28]
 8005f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9e8 	bl	8006378 <HAL_TIM_IC_CaptureCallback>
 8005fa8:	e005      	b.n	8005fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f9db 	bl	8006366 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f9ea 	bl	800638a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00c      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d007      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0201 	mvn.w	r2, #1
 8005fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fb fb1a 	bl	8001614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00c      	beq.n	8006004 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 fced 	bl	80069de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f9ba 	bl	800639c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00c      	beq.n	800604c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d007      	beq.n	800604c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f06f 0220 	mvn.w	r2, #32
 8006044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fcc0 	bl	80069cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800606a:	2b01      	cmp	r3, #1
 800606c:	d101      	bne.n	8006072 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800606e:	2302      	movs	r3, #2
 8006070:	e0ae      	b.n	80061d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b0c      	cmp	r3, #12
 800607e:	f200 809f 	bhi.w	80061c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080061c1 	.word	0x080061c1
 8006090:	080061c1 	.word	0x080061c1
 8006094:	080061c1 	.word	0x080061c1
 8006098:	080060fd 	.word	0x080060fd
 800609c:	080061c1 	.word	0x080061c1
 80060a0:	080061c1 	.word	0x080061c1
 80060a4:	080061c1 	.word	0x080061c1
 80060a8:	0800613f 	.word	0x0800613f
 80060ac:	080061c1 	.word	0x080061c1
 80060b0:	080061c1 	.word	0x080061c1
 80060b4:	080061c1 	.word	0x080061c1
 80060b8:	0800617f 	.word	0x0800617f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 f9e2 	bl	800648c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	699a      	ldr	r2, [r3, #24]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6999      	ldr	r1, [r3, #24]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	619a      	str	r2, [r3, #24]
      break;
 80060fa:	e064      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fa28 	bl	8006558 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699a      	ldr	r2, [r3, #24]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006116:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	699a      	ldr	r2, [r3, #24]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006126:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6999      	ldr	r1, [r3, #24]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	619a      	str	r2, [r3, #24]
      break;
 800613c:	e043      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fa71 	bl	800662c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	69da      	ldr	r2, [r3, #28]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0208 	orr.w	r2, r2, #8
 8006158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0204 	bic.w	r2, r2, #4
 8006168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	69d9      	ldr	r1, [r3, #28]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	61da      	str	r2, [r3, #28]
      break;
 800617c:	e023      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68b9      	ldr	r1, [r7, #8]
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fabb 	bl	8006700 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006198:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	69da      	ldr	r2, [r3, #28]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	69d9      	ldr	r1, [r3, #28]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	021a      	lsls	r2, r3, #8
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	61da      	str	r2, [r3, #28]
      break;
 80061be:	e002      	b.n	80061c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]
      break;
 80061c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d101      	bne.n	80061f4 <HAL_TIM_ConfigClockSource+0x1c>
 80061f0:	2302      	movs	r3, #2
 80061f2:	e0b4      	b.n	800635e <HAL_TIM_ConfigClockSource+0x186>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800621a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622c:	d03e      	beq.n	80062ac <HAL_TIM_ConfigClockSource+0xd4>
 800622e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006232:	f200 8087 	bhi.w	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623a:	f000 8086 	beq.w	800634a <HAL_TIM_ConfigClockSource+0x172>
 800623e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006242:	d87f      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006244:	2b70      	cmp	r3, #112	; 0x70
 8006246:	d01a      	beq.n	800627e <HAL_TIM_ConfigClockSource+0xa6>
 8006248:	2b70      	cmp	r3, #112	; 0x70
 800624a:	d87b      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 800624c:	2b60      	cmp	r3, #96	; 0x60
 800624e:	d050      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x11a>
 8006250:	2b60      	cmp	r3, #96	; 0x60
 8006252:	d877      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006254:	2b50      	cmp	r3, #80	; 0x50
 8006256:	d03c      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0xfa>
 8006258:	2b50      	cmp	r3, #80	; 0x50
 800625a:	d873      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d058      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0x13a>
 8006260:	2b40      	cmp	r3, #64	; 0x40
 8006262:	d86f      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006264:	2b30      	cmp	r3, #48	; 0x30
 8006266:	d064      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 8006268:	2b30      	cmp	r3, #48	; 0x30
 800626a:	d86b      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b20      	cmp	r3, #32
 800626e:	d060      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 8006270:	2b20      	cmp	r3, #32
 8006272:	d867      	bhi.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d05c      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 8006278:	2b10      	cmp	r3, #16
 800627a:	d05a      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x15a>
 800627c:	e062      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800628e:	f000 fafc 	bl	800688a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	609a      	str	r2, [r3, #8]
      break;
 80062aa:	e04f      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062bc:	f000 fae5 	bl	800688a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062ce:	609a      	str	r2, [r3, #8]
      break;
 80062d0:	e03c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062de:	461a      	mov	r2, r3
 80062e0:	f000 fa5c 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2150      	movs	r1, #80	; 0x50
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fab3 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 80062f0:	e02c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062fe:	461a      	mov	r2, r3
 8006300:	f000 fa7a 	bl	80067f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2160      	movs	r1, #96	; 0x60
 800630a:	4618      	mov	r0, r3
 800630c:	f000 faa3 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 8006310:	e01c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	461a      	mov	r2, r3
 8006320:	f000 fa3c 	bl	800679c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2140      	movs	r1, #64	; 0x40
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fa93 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 8006330:	e00c      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f000 fa8a 	bl	8006856 <TIM_ITRx_SetConfig>
      break;
 8006342:	e003      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
      break;
 8006348:	e000      	b.n	800634c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800634a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800635c:	7bfb      	ldrb	r3, [r7, #15]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800638a:	b480      	push	{r7}
 800638c:	b083      	sub	sp, #12
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr

0800639c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr
	...

080063b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a2f      	ldr	r2, [pc, #188]	; (8006480 <TIM_Base_SetConfig+0xd0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00b      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ce:	d007      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <TIM_Base_SetConfig+0xd4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d003      	beq.n	80063e0 <TIM_Base_SetConfig+0x30>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a2b      	ldr	r2, [pc, #172]	; (8006488 <TIM_Base_SetConfig+0xd8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d108      	bne.n	80063f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a22      	ldr	r2, [pc, #136]	; (8006480 <TIM_Base_SetConfig+0xd0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00b      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006400:	d007      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a1f      	ldr	r2, [pc, #124]	; (8006484 <TIM_Base_SetConfig+0xd4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_Base_SetConfig+0x62>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <TIM_Base_SetConfig+0xd8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d108      	bne.n	8006424 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <TIM_Base_SetConfig+0xd0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d103      	bne.n	8006458 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]
  }
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40000400 	.word	0x40000400
 8006488:	40000800 	.word	0x40000800

0800648c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f023 0201 	bic.w	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 0302 	bic.w	r3, r3, #2
 80064d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <TIM_OC1_SetConfig+0xc8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d10c      	bne.n	8006502 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f023 0308 	bic.w	r3, r3, #8
 80064ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0304 	bic.w	r3, r3, #4
 8006500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a13      	ldr	r2, [pc, #76]	; (8006554 <TIM_OC1_SetConfig+0xc8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d111      	bne.n	800652e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	bc80      	pop	{r7}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00

08006558 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	f023 0210 	bic.w	r2, r3, #16
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f023 0320 	bic.w	r3, r3, #32
 80065a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <TIM_OC2_SetConfig+0xd0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10d      	bne.n	80065d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a14      	ldr	r2, [pc, #80]	; (8006628 <TIM_OC2_SetConfig+0xd0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d113      	bne.n	8006604 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00

0800662c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a1d      	ldr	r2, [pc, #116]	; (80066fc <TIM_OC3_SetConfig+0xd0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d10d      	bne.n	80066a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006690:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	021b      	lsls	r3, r3, #8
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a14      	ldr	r2, [pc, #80]	; (80066fc <TIM_OC3_SetConfig+0xd0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d113      	bne.n	80066d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bc80      	pop	{r7}
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00

08006700 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800674a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	031b      	lsls	r3, r3, #12
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a0f      	ldr	r2, [pc, #60]	; (8006798 <TIM_OC4_SetConfig+0x98>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d109      	bne.n	8006774 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	019b      	lsls	r3, r3, #6
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	621a      	str	r2, [r3, #32]
}
 800678e:	bf00      	nop
 8006790:	371c      	adds	r7, #28
 8006792:	46bd      	mov	sp, r7
 8006794:	bc80      	pop	{r7}
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00

0800679c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f023 030a 	bic.w	r3, r3, #10
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	f023 0210 	bic.w	r2, r3, #16
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	031b      	lsls	r3, r3, #12
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006834:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	621a      	str	r2, [r3, #32]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr

08006856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006856:	b480      	push	{r7}
 8006858:	b085      	sub	sp, #20
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	f043 0307 	orr.w	r3, r3, #7
 8006878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	609a      	str	r2, [r3, #8]
}
 8006880:	bf00      	nop
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
 8006896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	021a      	lsls	r2, r3, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	609a      	str	r2, [r3, #8]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	2201      	movs	r2, #1
 80068dc:	fa02 f303 	lsl.w	r3, r2, r3
 80068e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6a1a      	ldr	r2, [r3, #32]
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	401a      	ands	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1a      	ldr	r2, [r3, #32]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f003 031f 	and.w	r3, r3, #31
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
}
 8006906:	bf00      	nop
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	bc80      	pop	{r7}
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e046      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4313      	orrs	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a10      	ldr	r2, [pc, #64]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40000400 	.word	0x40000400
 80069c8:	40000800 	.word	0x40000800

080069cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	bc80      	pop	{r7}
 80069dc:	4770      	bx	lr

080069de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e042      	b.n	8006a88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fc fcfe 	bl	8003418 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2224      	movs	r2, #36	; 0x24
 8006a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 ff79 	bl	800792c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695a      	ldr	r2, [r3, #20]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b08a      	sub	sp, #40	; 0x28
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	603b      	str	r3, [r7, #0]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d175      	bne.n	8006b9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_UART_Transmit+0x2c>
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e06e      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2221      	movs	r2, #33	; 0x21
 8006aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ace:	f7fc fe45 	bl	800375c <HAL_GetTick>
 8006ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae8:	d108      	bne.n	8006afc <HAL_UART_Transmit+0x6c>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d104      	bne.n	8006afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	e003      	b.n	8006b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b04:	e02e      	b.n	8006b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2180      	movs	r1, #128	; 0x80
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 fc55 	bl	80073c0 <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e03a      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	3302      	adds	r3, #2
 8006b42:	61bb      	str	r3, [r7, #24]
 8006b44:	e007      	b.n	8006b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	3301      	adds	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1cb      	bne.n	8006b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	2200      	movs	r2, #0
 8006b76:	2140      	movs	r1, #64	; 0x40
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 fc21 	bl	80073c0 <UART_WaitOnFlagUntilTimeout>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e006      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006b9c:	2302      	movs	r3, #2
  }
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3720      	adds	r7, #32
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b08c      	sub	sp, #48	; 0x30
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d146      	bne.n	8006c4e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e03f      	b.n	8006c50 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	461a      	mov	r2, r3
 8006be0:	68b9      	ldr	r1, [r7, #8]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 fc46 	bl	8007474 <UART_Start_Receive_DMA>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d125      	bne.n	8006c42 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f043 0310 	orr.w	r3, r3, #16
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	330c      	adds	r3, #12
 8006c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c2c:	627a      	str	r2, [r7, #36]	; 0x24
 8006c2e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6a39      	ldr	r1, [r7, #32]
 8006c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e5      	bne.n	8006c0c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8006c40:	e002      	b.n	8006c48 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    return status;
 8006c48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c4c:	e000      	b.n	8006c50 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8006c4e:	2302      	movs	r3, #2
  }
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3730      	adds	r7, #48	; 0x30
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b0ba      	sub	sp, #232	; 0xe8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8e:	f003 030f 	and.w	r3, r3, #15
 8006c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10f      	bne.n	8006cbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <HAL_UART_IRQHandler+0x66>
 8006caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cae:	f003 0320 	and.w	r3, r3, #32
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fd7a 	bl	80077b0 <UART_Receive_IT>
      return;
 8006cbc:	e25b      	b.n	8007176 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006cbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80de 	beq.w	8006e84 <HAL_UART_IRQHandler+0x22c>
 8006cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ccc:	f003 0301 	and.w	r3, r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d106      	bne.n	8006ce2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80d1 	beq.w	8006e84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <HAL_UART_IRQHandler+0xae>
 8006cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d005      	beq.n	8006d06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfe:	f043 0201 	orr.w	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0a:	f003 0304 	and.w	r3, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00b      	beq.n	8006d2a <HAL_UART_IRQHandler+0xd2>
 8006d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f043 0202 	orr.w	r2, r3, #2
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <HAL_UART_IRQHandler+0xf6>
 8006d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d005      	beq.n	8006d4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f043 0204 	orr.w	r2, r3, #4
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d011      	beq.n	8006d7e <HAL_UART_IRQHandler+0x126>
 8006d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d005      	beq.n	8006d7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	f043 0208 	orr.w	r2, r3, #8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 81f2 	beq.w	800716c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d008      	beq.n	8006da6 <HAL_UART_IRQHandler+0x14e>
 8006d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d002      	beq.n	8006da6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fd05 	bl	80077b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2300      	moveq	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d103      	bne.n	8006dd2 <HAL_UART_IRQHandler+0x17a>
 8006dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d04f      	beq.n	8006e72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fc0f 	bl	80075f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d041      	beq.n	8006e6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3314      	adds	r3, #20
 8006e0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1d9      	bne.n	8006de6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d013      	beq.n	8006e62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	4a7e      	ldr	r2, [pc, #504]	; (8007038 <HAL_UART_IRQHandler+0x3e0>)
 8006e40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7fc feba 	bl	8003bc0 <HAL_DMA_Abort_IT>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d016      	beq.n	8006e80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e60:	e00e      	b.n	8006e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9a5 	bl	80071b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e68:	e00a      	b.n	8006e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f9a1 	bl	80071b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	e006      	b.n	8006e80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f99d 	bl	80071b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006e7e:	e175      	b.n	800716c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	bf00      	nop
    return;
 8006e82:	e173      	b.n	800716c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	f040 814f 	bne.w	800712c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8148 	beq.w	800712c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8141 	beq.w	800712c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	60bb      	str	r3, [r7, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 80b6 	beq.w	800703c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006edc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 8145 	beq.w	8007170 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	f080 813e 	bcs.w	8007170 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006efa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b20      	cmp	r3, #32
 8006f04:	f000 8088 	beq.w	8007018 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006f34:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006f38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1d9      	bne.n	8006f08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3314      	adds	r3, #20
 8006f5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3314      	adds	r3, #20
 8006f74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f84:	e841 2300 	strex	r3, r2, [r1]
 8006f88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1e1      	bne.n	8006f54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3314      	adds	r3, #20
 8006f96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fbc:	e841 2300 	strex	r3, r2, [r1]
 8006fc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1e3      	bne.n	8006f90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	330c      	adds	r3, #12
 8006fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	f023 0310 	bic.w	r3, r3, #16
 8006fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	330c      	adds	r3, #12
 8006ff6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ffa:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ffc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007002:	e841 2300 	strex	r3, r2, [r1]
 8007006:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1e3      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	4618      	mov	r0, r3
 8007014:	f7fc fd98 	bl	8003b48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007026:	b29b      	uxth	r3, r3
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	b29b      	uxth	r3, r3
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7fc f826 	bl	8003080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007034:	e09c      	b.n	8007170 <HAL_UART_IRQHandler+0x518>
 8007036:	bf00      	nop
 8007038:	080076bb 	.word	0x080076bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007044:	b29b      	uxth	r3, r3
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	f000 808e 	beq.w	8007174 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8089 	beq.w	8007174 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	330c      	adds	r3, #12
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007086:	647a      	str	r2, [r7, #68]	; 0x44
 8007088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800708c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e3      	bne.n	8007062 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3314      	adds	r3, #20
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	623b      	str	r3, [r7, #32]
   return(result);
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3314      	adds	r3, #20
 80070ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070be:	633a      	str	r2, [r7, #48]	; 0x30
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e3      	bne.n	800709a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0310 	bic.w	r3, r3, #16
 80070f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007104:	61fa      	str	r2, [r7, #28]
 8007106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	617b      	str	r3, [r7, #20]
   return(result);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e3      	bne.n	80070e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800711e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fb ffab 	bl	8003080 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800712a:	e023      	b.n	8007174 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800712c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007134:	2b00      	cmp	r3, #0
 8007136:	d009      	beq.n	800714c <HAL_UART_IRQHandler+0x4f4>
 8007138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800713c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007140:	2b00      	cmp	r3, #0
 8007142:	d003      	beq.n	800714c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 facc 	bl	80076e2 <UART_Transmit_IT>
    return;
 800714a:	e014      	b.n	8007176 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800714c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00e      	beq.n	8007176 <HAL_UART_IRQHandler+0x51e>
 8007158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fb0b 	bl	8007780 <UART_EndTransmit_IT>
    return;
 800716a:	e004      	b.n	8007176 <HAL_UART_IRQHandler+0x51e>
    return;
 800716c:	bf00      	nop
 800716e:	e002      	b.n	8007176 <HAL_UART_IRQHandler+0x51e>
      return;
 8007170:	bf00      	nop
 8007172:	e000      	b.n	8007176 <HAL_UART_IRQHandler+0x51e>
      return;
 8007174:	bf00      	nop
  }
}
 8007176:	37e8      	adds	r7, #232	; 0xe8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	bc80      	pop	{r7}
 800718c:	4770      	bx	lr

0800718e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800718e:	b480      	push	{r7}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007196:	bf00      	nop
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr

080071b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	bc80      	pop	{r7}
 80071c2:	4770      	bx	lr

080071c4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b09c      	sub	sp, #112	; 0x70
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d172      	bne.n	80072c6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80071e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e2:	2200      	movs	r2, #0
 80071e4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80071fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	330c      	adds	r3, #12
 8007204:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007206:	65ba      	str	r2, [r7, #88]	; 0x58
 8007208:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800720c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e5      	bne.n	80071e6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3314      	adds	r3, #20
 8007220:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	667b      	str	r3, [r7, #100]	; 0x64
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3314      	adds	r3, #20
 8007238:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800723a:	647a      	str	r2, [r7, #68]	; 0x44
 800723c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007240:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	623b      	str	r3, [r7, #32]
   return(result);
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007264:	663b      	str	r3, [r7, #96]	; 0x60
 8007266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3314      	adds	r3, #20
 800726c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800726e:	633a      	str	r2, [r7, #48]	; 0x30
 8007270:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007276:	e841 2300 	strex	r3, r2, [r1]
 800727a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800727c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1e5      	bne.n	800724e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007284:	2220      	movs	r2, #32
 8007286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800728a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	2b01      	cmp	r3, #1
 8007290:	d119      	bne.n	80072c6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	330c      	adds	r3, #12
 8007298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072b2:	61fa      	str	r2, [r7, #28]
 80072b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b6:	69b9      	ldr	r1, [r7, #24]
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	e841 2300 	strex	r3, r2, [r1]
 80072be:	617b      	str	r3, [r7, #20]
   return(result);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1e5      	bne.n	8007292 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c8:	2200      	movs	r2, #0
 80072ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d106      	bne.n	80072e2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072d8:	4619      	mov	r1, r3
 80072da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072dc:	f7fb fed0 	bl	8003080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072e0:	e002      	b.n	80072e8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80072e2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80072e4:	f7ff ff53 	bl	800718e <HAL_UART_RxCpltCallback>
}
 80072e8:	bf00      	nop
 80072ea:	3770      	adds	r7, #112	; 0x70
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	2b01      	cmp	r3, #1
 800730a:	d108      	bne.n	800731e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007310:	085b      	lsrs	r3, r3, #1
 8007312:	b29b      	uxth	r3, r3
 8007314:	4619      	mov	r1, r3
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f7fb feb2 	bl	8003080 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800731c:	e002      	b.n	8007324 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f7ff ff3e 	bl	80071a0 <HAL_UART_RxHalfCpltCallback>
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b21      	cmp	r3, #33	; 0x21
 800735e:	d108      	bne.n	8007372 <UART_DMAError+0x46>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2200      	movs	r2, #0
 800736a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800736c:	68b8      	ldr	r0, [r7, #8]
 800736e:	f000 f91b 	bl	80075a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf14      	ite	ne
 8007380:	2301      	movne	r3, #1
 8007382:	2300      	moveq	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b22      	cmp	r3, #34	; 0x22
 8007392:	d108      	bne.n	80073a6 <UART_DMAError+0x7a>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d005      	beq.n	80073a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	2200      	movs	r2, #0
 800739e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073a0:	68b8      	ldr	r0, [r7, #8]
 80073a2:	f000 f928 	bl	80075f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073aa:	f043 0210 	orr.w	r2, r3, #16
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073b2:	68b8      	ldr	r0, [r7, #8]
 80073b4:	f7ff fefd 	bl	80071b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	603b      	str	r3, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d0:	e03b      	b.n	800744a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d037      	beq.n	800744a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073da:	f7fc f9bf 	bl	800375c <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	6a3a      	ldr	r2, [r7, #32]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d302      	bcc.n	80073f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e03a      	b.n	800746a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d023      	beq.n	800744a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b80      	cmp	r3, #128	; 0x80
 8007406:	d020      	beq.n	800744a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b40      	cmp	r3, #64	; 0x40
 800740c:	d01d      	beq.n	800744a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0308 	and.w	r3, r3, #8
 8007418:	2b08      	cmp	r3, #8
 800741a:	d116      	bne.n	800744a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800741c:	2300      	movs	r3, #0
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 f8df 	bl	80075f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2208      	movs	r2, #8
 800743c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e00f      	b.n	800746a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	4013      	ands	r3, r2
 8007454:	68ba      	ldr	r2, [r7, #8]
 8007456:	429a      	cmp	r2, r3
 8007458:	bf0c      	ite	eq
 800745a:	2301      	moveq	r3, #1
 800745c:	2300      	movne	r3, #0
 800745e:	b2db      	uxtb	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	429a      	cmp	r2, r3
 8007466:	d0b4      	beq.n	80073d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b098      	sub	sp, #96	; 0x60
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	4613      	mov	r3, r2
 8007480:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2222      	movs	r2, #34	; 0x22
 8007498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a0:	4a3e      	ldr	r2, [pc, #248]	; (800759c <UART_Start_Receive_DMA+0x128>)
 80074a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074a8:	4a3d      	ldr	r2, [pc, #244]	; (80075a0 <UART_Start_Receive_DMA+0x12c>)
 80074aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b0:	4a3c      	ldr	r2, [pc, #240]	; (80075a4 <UART_Start_Receive_DMA+0x130>)
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b8:	2200      	movs	r2, #0
 80074ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80074bc:	f107 0308 	add.w	r3, r7, #8
 80074c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	f7fc fad8 	bl	8003a88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80074d8:	2300      	movs	r3, #0
 80074da:	613b      	str	r3, [r7, #16]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	613b      	str	r3, [r7, #16]
 80074ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d019      	beq.n	800752a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	330c      	adds	r3, #12
 80074fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800750c:	65bb      	str	r3, [r7, #88]	; 0x58
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	330c      	adds	r3, #12
 8007514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007516:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007518:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800751c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e5      	bne.n	80074f6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753c:	f043 0301 	orr.w	r3, r3, #1
 8007540:	657b      	str	r3, [r7, #84]	; 0x54
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800754a:	63ba      	str	r2, [r7, #56]	; 0x38
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e5      	bne.n	800752a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	3314      	adds	r3, #20
 8007564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	e853 3f00 	ldrex	r3, [r3]
 800756c:	617b      	str	r3, [r7, #20]
   return(result);
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007574:	653b      	str	r3, [r7, #80]	; 0x50
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	3314      	adds	r3, #20
 800757c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800757e:	627a      	str	r2, [r7, #36]	; 0x24
 8007580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6a39      	ldr	r1, [r7, #32]
 8007584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	61fb      	str	r3, [r7, #28]
   return(result);
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e5      	bne.n	800755e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3760      	adds	r7, #96	; 0x60
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	080071c5 	.word	0x080071c5
 80075a0:	080072f1 	.word	0x080072f1
 80075a4:	0800732d 	.word	0x0800732d

080075a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b089      	sub	sp, #36	; 0x24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	330c      	adds	r3, #12
 80075b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	e853 3f00 	ldrex	r3, [r3]
 80075be:	60bb      	str	r3, [r7, #8]
   return(result);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075c6:	61fb      	str	r3, [r7, #28]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330c      	adds	r3, #12
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	61ba      	str	r2, [r7, #24]
 80075d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d4:	6979      	ldr	r1, [r7, #20]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	e841 2300 	strex	r3, r2, [r1]
 80075dc:	613b      	str	r3, [r7, #16]
   return(result);
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1e5      	bne.n	80075b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80075ec:	bf00      	nop
 80075ee:	3724      	adds	r7, #36	; 0x24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bc80      	pop	{r7}
 80075f4:	4770      	bx	lr

080075f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b095      	sub	sp, #84	; 0x54
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	330c      	adds	r3, #12
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800761e:	643a      	str	r2, [r7, #64]	; 0x40
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e5      	bne.n	80075fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3314      	adds	r3, #20
 8007638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	61fb      	str	r3, [r7, #28]
   return(result);
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	f023 0301 	bic.w	r3, r3, #1
 8007648:	64bb      	str	r3, [r7, #72]	; 0x48
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	2b01      	cmp	r3, #1
 800766c:	d119      	bne.n	80076a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	330c      	adds	r3, #12
 8007674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	60bb      	str	r3, [r7, #8]
   return(result);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f023 0310 	bic.w	r3, r3, #16
 8007684:	647b      	str	r3, [r7, #68]	; 0x44
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	330c      	adds	r3, #12
 800768c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800768e:	61ba      	str	r2, [r7, #24]
 8007690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6979      	ldr	r1, [r7, #20]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	613b      	str	r3, [r7, #16]
   return(result);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e5      	bne.n	800766e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076b0:	bf00      	nop
 80076b2:	3754      	adds	r7, #84	; 0x54
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr

080076ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fd6c 	bl	80071b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b085      	sub	sp, #20
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	2b21      	cmp	r3, #33	; 0x21
 80076f4:	d13e      	bne.n	8007774 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fe:	d114      	bne.n	800772a <UART_Transmit_IT+0x48>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d110      	bne.n	800772a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	881b      	ldrh	r3, [r3, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800771c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	1c9a      	adds	r2, r3, #2
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	621a      	str	r2, [r3, #32]
 8007728:	e008      	b.n	800773c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	1c59      	adds	r1, r3, #1
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	6211      	str	r1, [r2, #32]
 8007734:	781a      	ldrb	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29b      	uxth	r3, r3
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	4619      	mov	r1, r3
 800774a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10f      	bne.n	8007770 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800775e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e000      	b.n	8007776 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007774:	2302      	movs	r3, #2
  }
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007796:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff fceb 	bl	800717c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08c      	sub	sp, #48	; 0x30
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	2b22      	cmp	r3, #34	; 0x22
 80077c2:	f040 80ae 	bne.w	8007922 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	d117      	bne.n	8007800 <UART_Receive_IT+0x50>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d113      	bne.n	8007800 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	1c9a      	adds	r2, r3, #2
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	629a      	str	r2, [r3, #40]	; 0x28
 80077fe:	e026      	b.n	800784e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007804:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007806:	2300      	movs	r3, #0
 8007808:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007812:	d007      	beq.n	8007824 <UART_Receive_IT+0x74>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <UART_Receive_IT+0x82>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d106      	bne.n	8007832 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	e008      	b.n	8007844 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783e:	b2da      	uxtb	r2, r3
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007852:	b29b      	uxth	r3, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	4619      	mov	r1, r3
 800785c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800785e:	2b00      	cmp	r3, #0
 8007860:	d15d      	bne.n	800791e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68da      	ldr	r2, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f022 0220 	bic.w	r2, r2, #32
 8007870:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007880:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695a      	ldr	r2, [r3, #20]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f022 0201 	bic.w	r2, r2, #1
 8007890:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2220      	movs	r2, #32
 8007896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d135      	bne.n	8007914 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	330c      	adds	r3, #12
 80078b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	613b      	str	r3, [r7, #16]
   return(result);
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f023 0310 	bic.w	r3, r3, #16
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	330c      	adds	r3, #12
 80078cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ce:	623a      	str	r2, [r7, #32]
 80078d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	69f9      	ldr	r1, [r7, #28]
 80078d4:	6a3a      	ldr	r2, [r7, #32]
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	61bb      	str	r3, [r7, #24]
   return(result);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e5      	bne.n	80078ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0310 	and.w	r3, r3, #16
 80078ec:	2b10      	cmp	r3, #16
 80078ee:	d10a      	bne.n	8007906 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80078f0:	2300      	movs	r3, #0
 80078f2:	60fb      	str	r3, [r7, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7fb fbb7 	bl	8003080 <HAL_UARTEx_RxEventCallback>
 8007912:	e002      	b.n	800791a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7ff fc3a 	bl	800718e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e002      	b.n	8007924 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	e000      	b.n	8007924 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007922:	2302      	movs	r3, #2
  }
}
 8007924:	4618      	mov	r0, r3
 8007926:	3730      	adds	r7, #48	; 0x30
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007966:	f023 030c 	bic.w	r3, r3, #12
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	430b      	orrs	r3, r1
 8007972:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	430a      	orrs	r2, r1
 8007988:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a2c      	ldr	r2, [pc, #176]	; (8007a40 <UART_SetConfig+0x114>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d103      	bne.n	800799c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007994:	f7fe f8a0 	bl	8005ad8 <HAL_RCC_GetPCLK2Freq>
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	e002      	b.n	80079a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800799c:	f7fe f888 	bl	8005ab0 <HAL_RCC_GetPCLK1Freq>
 80079a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	009a      	lsls	r2, r3, #2
 80079ac:	441a      	add	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b8:	4a22      	ldr	r2, [pc, #136]	; (8007a44 <UART_SetConfig+0x118>)
 80079ba:	fba2 2303 	umull	r2, r3, r2, r3
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	0119      	lsls	r1, r3, #4
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009a      	lsls	r2, r3, #2
 80079cc:	441a      	add	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80079d8:	4b1a      	ldr	r3, [pc, #104]	; (8007a44 <UART_SetConfig+0x118>)
 80079da:	fba3 0302 	umull	r0, r3, r3, r2
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	2064      	movs	r0, #100	; 0x64
 80079e2:	fb00 f303 	mul.w	r3, r0, r3
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	3332      	adds	r3, #50	; 0x32
 80079ec:	4a15      	ldr	r2, [pc, #84]	; (8007a44 <UART_SetConfig+0x118>)
 80079ee:	fba2 2303 	umull	r2, r3, r2, r3
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079f8:	4419      	add	r1, r3
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	009a      	lsls	r2, r3, #2
 8007a04:	441a      	add	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a10:	4b0c      	ldr	r3, [pc, #48]	; (8007a44 <UART_SetConfig+0x118>)
 8007a12:	fba3 0302 	umull	r0, r3, r3, r2
 8007a16:	095b      	lsrs	r3, r3, #5
 8007a18:	2064      	movs	r0, #100	; 0x64
 8007a1a:	fb00 f303 	mul.w	r3, r0, r3
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	3332      	adds	r3, #50	; 0x32
 8007a24:	4a07      	ldr	r2, [pc, #28]	; (8007a44 <UART_SetConfig+0x118>)
 8007a26:	fba2 2303 	umull	r2, r3, r2, r3
 8007a2a:	095b      	lsrs	r3, r3, #5
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	440a      	add	r2, r1
 8007a36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40013800 	.word	0x40013800
 8007a44:	51eb851f 	.word	0x51eb851f

08007a48 <atof>:
 8007a48:	2100      	movs	r1, #0
 8007a4a:	f000 be19 	b.w	8008680 <strtod>

08007a4e <atoi>:
 8007a4e:	220a      	movs	r2, #10
 8007a50:	2100      	movs	r1, #0
 8007a52:	f000 be9f 	b.w	8008794 <strtol>

08007a56 <sulp>:
 8007a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5a:	460f      	mov	r7, r1
 8007a5c:	4690      	mov	r8, r2
 8007a5e:	f003 fbeb 	bl	800b238 <__ulp>
 8007a62:	4604      	mov	r4, r0
 8007a64:	460d      	mov	r5, r1
 8007a66:	f1b8 0f00 	cmp.w	r8, #0
 8007a6a:	d011      	beq.n	8007a90 <sulp+0x3a>
 8007a6c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a70:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd0b      	ble.n	8007a90 <sulp+0x3a>
 8007a78:	2400      	movs	r4, #0
 8007a7a:	051b      	lsls	r3, r3, #20
 8007a7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a80:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a84:	4622      	mov	r2, r4
 8007a86:	462b      	mov	r3, r5
 8007a88:	f7f8 fd30 	bl	80004ec <__aeabi_dmul>
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	460d      	mov	r5, r1
 8007a90:	4620      	mov	r0, r4
 8007a92:	4629      	mov	r1, r5
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007a98 <_strtod_l>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	b09f      	sub	sp, #124	; 0x7c
 8007a9e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	921a      	str	r2, [sp, #104]	; 0x68
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	f04f 0800 	mov.w	r8, #0
 8007aac:	f04f 0900 	mov.w	r9, #0
 8007ab0:	460a      	mov	r2, r1
 8007ab2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ab4:	7811      	ldrb	r1, [r2, #0]
 8007ab6:	292b      	cmp	r1, #43	; 0x2b
 8007ab8:	d04a      	beq.n	8007b50 <_strtod_l+0xb8>
 8007aba:	d838      	bhi.n	8007b2e <_strtod_l+0x96>
 8007abc:	290d      	cmp	r1, #13
 8007abe:	d832      	bhi.n	8007b26 <_strtod_l+0x8e>
 8007ac0:	2908      	cmp	r1, #8
 8007ac2:	d832      	bhi.n	8007b2a <_strtod_l+0x92>
 8007ac4:	2900      	cmp	r1, #0
 8007ac6:	d03b      	beq.n	8007b40 <_strtod_l+0xa8>
 8007ac8:	2200      	movs	r2, #0
 8007aca:	920e      	str	r2, [sp, #56]	; 0x38
 8007acc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007ace:	7832      	ldrb	r2, [r6, #0]
 8007ad0:	2a30      	cmp	r2, #48	; 0x30
 8007ad2:	f040 80b2 	bne.w	8007c3a <_strtod_l+0x1a2>
 8007ad6:	7872      	ldrb	r2, [r6, #1]
 8007ad8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007adc:	2a58      	cmp	r2, #88	; 0x58
 8007ade:	d16e      	bne.n	8007bbe <_strtod_l+0x126>
 8007ae0:	9302      	str	r3, [sp, #8]
 8007ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	9301      	str	r3, [sp, #4]
 8007ae8:	ab1a      	add	r3, sp, #104	; 0x68
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4a8c      	ldr	r2, [pc, #560]	; (8007d20 <_strtod_l+0x288>)
 8007aee:	ab1b      	add	r3, sp, #108	; 0x6c
 8007af0:	a919      	add	r1, sp, #100	; 0x64
 8007af2:	f002 fc7d 	bl	800a3f0 <__gethex>
 8007af6:	f010 070f 	ands.w	r7, r0, #15
 8007afa:	4605      	mov	r5, r0
 8007afc:	d005      	beq.n	8007b0a <_strtod_l+0x72>
 8007afe:	2f06      	cmp	r7, #6
 8007b00:	d128      	bne.n	8007b54 <_strtod_l+0xbc>
 8007b02:	2300      	movs	r3, #0
 8007b04:	3601      	adds	r6, #1
 8007b06:	9619      	str	r6, [sp, #100]	; 0x64
 8007b08:	930e      	str	r3, [sp, #56]	; 0x38
 8007b0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f040 85a0 	bne.w	8008652 <_strtod_l+0xbba>
 8007b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b14:	b1cb      	cbz	r3, 8007b4a <_strtod_l+0xb2>
 8007b16:	4642      	mov	r2, r8
 8007b18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	b01f      	add	sp, #124	; 0x7c
 8007b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	2920      	cmp	r1, #32
 8007b28:	d1ce      	bne.n	8007ac8 <_strtod_l+0x30>
 8007b2a:	3201      	adds	r2, #1
 8007b2c:	e7c1      	b.n	8007ab2 <_strtod_l+0x1a>
 8007b2e:	292d      	cmp	r1, #45	; 0x2d
 8007b30:	d1ca      	bne.n	8007ac8 <_strtod_l+0x30>
 8007b32:	2101      	movs	r1, #1
 8007b34:	910e      	str	r1, [sp, #56]	; 0x38
 8007b36:	1c51      	adds	r1, r2, #1
 8007b38:	9119      	str	r1, [sp, #100]	; 0x64
 8007b3a:	7852      	ldrb	r2, [r2, #1]
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	d1c5      	bne.n	8007acc <_strtod_l+0x34>
 8007b40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b42:	9519      	str	r5, [sp, #100]	; 0x64
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f040 8582 	bne.w	800864e <_strtod_l+0xbb6>
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	e7e5      	b.n	8007b1c <_strtod_l+0x84>
 8007b50:	2100      	movs	r1, #0
 8007b52:	e7ef      	b.n	8007b34 <_strtod_l+0x9c>
 8007b54:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b56:	b13a      	cbz	r2, 8007b68 <_strtod_l+0xd0>
 8007b58:	2135      	movs	r1, #53	; 0x35
 8007b5a:	a81c      	add	r0, sp, #112	; 0x70
 8007b5c:	f003 fc58 	bl	800b410 <__copybits>
 8007b60:	4620      	mov	r0, r4
 8007b62:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b64:	f003 f83c 	bl	800abe0 <_Bfree>
 8007b68:	3f01      	subs	r7, #1
 8007b6a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b6c:	2f04      	cmp	r7, #4
 8007b6e:	d806      	bhi.n	8007b7e <_strtod_l+0xe6>
 8007b70:	e8df f007 	tbb	[pc, r7]
 8007b74:	201d0314 	.word	0x201d0314
 8007b78:	14          	.byte	0x14
 8007b79:	00          	.byte	0x00
 8007b7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007b7e:	05e9      	lsls	r1, r5, #23
 8007b80:	bf48      	it	mi
 8007b82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007b86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b8a:	0d1b      	lsrs	r3, r3, #20
 8007b8c:	051b      	lsls	r3, r3, #20
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1bb      	bne.n	8007b0a <_strtod_l+0x72>
 8007b92:	f001 fcc1 	bl	8009518 <__errno>
 8007b96:	2322      	movs	r3, #34	; 0x22
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	e7b6      	b.n	8007b0a <_strtod_l+0x72>
 8007b9c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ba0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007ba4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ba8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007bac:	e7e7      	b.n	8007b7e <_strtod_l+0xe6>
 8007bae:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007d24 <_strtod_l+0x28c>
 8007bb2:	e7e4      	b.n	8007b7e <_strtod_l+0xe6>
 8007bb4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007bb8:	f04f 38ff 	mov.w	r8, #4294967295
 8007bbc:	e7df      	b.n	8007b7e <_strtod_l+0xe6>
 8007bbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	9219      	str	r2, [sp, #100]	; 0x64
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b30      	cmp	r3, #48	; 0x30
 8007bc8:	d0f9      	beq.n	8007bbe <_strtod_l+0x126>
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d09d      	beq.n	8007b0a <_strtod_l+0x72>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f04f 0a00 	mov.w	sl, #0
 8007bd4:	220a      	movs	r2, #10
 8007bd6:	46d3      	mov	fp, sl
 8007bd8:	9305      	str	r3, [sp, #20]
 8007bda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bdc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007be2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007be4:	7806      	ldrb	r6, [r0, #0]
 8007be6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007bea:	b2d9      	uxtb	r1, r3
 8007bec:	2909      	cmp	r1, #9
 8007bee:	d926      	bls.n	8007c3e <_strtod_l+0x1a6>
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	494d      	ldr	r1, [pc, #308]	; (8007d28 <_strtod_l+0x290>)
 8007bf4:	f001 fc34 	bl	8009460 <strncmp>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d030      	beq.n	8007c5e <_strtod_l+0x1c6>
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	4632      	mov	r2, r6
 8007c00:	4603      	mov	r3, r0
 8007c02:	465e      	mov	r6, fp
 8007c04:	9008      	str	r0, [sp, #32]
 8007c06:	2a65      	cmp	r2, #101	; 0x65
 8007c08:	d001      	beq.n	8007c0e <_strtod_l+0x176>
 8007c0a:	2a45      	cmp	r2, #69	; 0x45
 8007c0c:	d113      	bne.n	8007c36 <_strtod_l+0x19e>
 8007c0e:	b91e      	cbnz	r6, 8007c18 <_strtod_l+0x180>
 8007c10:	9a05      	ldr	r2, [sp, #20]
 8007c12:	4302      	orrs	r2, r0
 8007c14:	d094      	beq.n	8007b40 <_strtod_l+0xa8>
 8007c16:	2600      	movs	r6, #0
 8007c18:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007c1a:	1c6a      	adds	r2, r5, #1
 8007c1c:	9219      	str	r2, [sp, #100]	; 0x64
 8007c1e:	786a      	ldrb	r2, [r5, #1]
 8007c20:	2a2b      	cmp	r2, #43	; 0x2b
 8007c22:	d074      	beq.n	8007d0e <_strtod_l+0x276>
 8007c24:	2a2d      	cmp	r2, #45	; 0x2d
 8007c26:	d078      	beq.n	8007d1a <_strtod_l+0x282>
 8007c28:	f04f 0c00 	mov.w	ip, #0
 8007c2c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c30:	2909      	cmp	r1, #9
 8007c32:	d97f      	bls.n	8007d34 <_strtod_l+0x29c>
 8007c34:	9519      	str	r5, [sp, #100]	; 0x64
 8007c36:	2700      	movs	r7, #0
 8007c38:	e09e      	b.n	8007d78 <_strtod_l+0x2e0>
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e7c8      	b.n	8007bd0 <_strtod_l+0x138>
 8007c3e:	f1bb 0f08 	cmp.w	fp, #8
 8007c42:	bfd8      	it	le
 8007c44:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007c46:	f100 0001 	add.w	r0, r0, #1
 8007c4a:	bfd6      	itet	le
 8007c4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c50:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007c54:	930a      	strle	r3, [sp, #40]	; 0x28
 8007c56:	f10b 0b01 	add.w	fp, fp, #1
 8007c5a:	9019      	str	r0, [sp, #100]	; 0x64
 8007c5c:	e7c1      	b.n	8007be2 <_strtod_l+0x14a>
 8007c5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c60:	1c5a      	adds	r2, r3, #1
 8007c62:	9219      	str	r2, [sp, #100]	; 0x64
 8007c64:	785a      	ldrb	r2, [r3, #1]
 8007c66:	f1bb 0f00 	cmp.w	fp, #0
 8007c6a:	d037      	beq.n	8007cdc <_strtod_l+0x244>
 8007c6c:	465e      	mov	r6, fp
 8007c6e:	9008      	str	r0, [sp, #32]
 8007c70:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d912      	bls.n	8007c9e <_strtod_l+0x206>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7c4      	b.n	8007c06 <_strtod_l+0x16e>
 8007c7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c7e:	3001      	adds	r0, #1
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	9219      	str	r2, [sp, #100]	; 0x64
 8007c84:	785a      	ldrb	r2, [r3, #1]
 8007c86:	2a30      	cmp	r2, #48	; 0x30
 8007c88:	d0f8      	beq.n	8007c7c <_strtod_l+0x1e4>
 8007c8a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	f200 84e4 	bhi.w	800865c <_strtod_l+0xbc4>
 8007c94:	9008      	str	r0, [sp, #32]
 8007c96:	2000      	movs	r0, #0
 8007c98:	4606      	mov	r6, r0
 8007c9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9e:	3a30      	subs	r2, #48	; 0x30
 8007ca0:	f100 0301 	add.w	r3, r0, #1
 8007ca4:	d014      	beq.n	8007cd0 <_strtod_l+0x238>
 8007ca6:	9908      	ldr	r1, [sp, #32]
 8007ca8:	eb00 0c06 	add.w	ip, r0, r6
 8007cac:	4419      	add	r1, r3
 8007cae:	9108      	str	r1, [sp, #32]
 8007cb0:	4633      	mov	r3, r6
 8007cb2:	210a      	movs	r1, #10
 8007cb4:	4563      	cmp	r3, ip
 8007cb6:	d113      	bne.n	8007ce0 <_strtod_l+0x248>
 8007cb8:	1833      	adds	r3, r6, r0
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	f106 0601 	add.w	r6, r6, #1
 8007cc0:	4406      	add	r6, r0
 8007cc2:	dc1a      	bgt.n	8007cfa <_strtod_l+0x262>
 8007cc4:	230a      	movs	r3, #10
 8007cc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007cc8:	fb03 2301 	mla	r3, r3, r1, r2
 8007ccc:	930a      	str	r3, [sp, #40]	; 0x28
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	1c51      	adds	r1, r2, #1
 8007cd6:	9119      	str	r1, [sp, #100]	; 0x64
 8007cd8:	7852      	ldrb	r2, [r2, #1]
 8007cda:	e7c9      	b.n	8007c70 <_strtod_l+0x1d8>
 8007cdc:	4658      	mov	r0, fp
 8007cde:	e7d2      	b.n	8007c86 <_strtod_l+0x1ee>
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	f103 0301 	add.w	r3, r3, #1
 8007ce6:	dc03      	bgt.n	8007cf0 <_strtod_l+0x258>
 8007ce8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007cea:	434f      	muls	r7, r1
 8007cec:	970a      	str	r7, [sp, #40]	; 0x28
 8007cee:	e7e1      	b.n	8007cb4 <_strtod_l+0x21c>
 8007cf0:	2b10      	cmp	r3, #16
 8007cf2:	bfd8      	it	le
 8007cf4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007cf8:	e7dc      	b.n	8007cb4 <_strtod_l+0x21c>
 8007cfa:	2e10      	cmp	r6, #16
 8007cfc:	bfdc      	itt	le
 8007cfe:	230a      	movle	r3, #10
 8007d00:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007d04:	e7e3      	b.n	8007cce <_strtod_l+0x236>
 8007d06:	2300      	movs	r3, #0
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e780      	b.n	8007c10 <_strtod_l+0x178>
 8007d0e:	f04f 0c00 	mov.w	ip, #0
 8007d12:	1caa      	adds	r2, r5, #2
 8007d14:	9219      	str	r2, [sp, #100]	; 0x64
 8007d16:	78aa      	ldrb	r2, [r5, #2]
 8007d18:	e788      	b.n	8007c2c <_strtod_l+0x194>
 8007d1a:	f04f 0c01 	mov.w	ip, #1
 8007d1e:	e7f8      	b.n	8007d12 <_strtod_l+0x27a>
 8007d20:	0800c0a4 	.word	0x0800c0a4
 8007d24:	7ff00000 	.word	0x7ff00000
 8007d28:	0800c0a2 	.word	0x0800c0a2
 8007d2c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d2e:	1c51      	adds	r1, r2, #1
 8007d30:	9119      	str	r1, [sp, #100]	; 0x64
 8007d32:	7852      	ldrb	r2, [r2, #1]
 8007d34:	2a30      	cmp	r2, #48	; 0x30
 8007d36:	d0f9      	beq.n	8007d2c <_strtod_l+0x294>
 8007d38:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d3c:	2908      	cmp	r1, #8
 8007d3e:	f63f af7a 	bhi.w	8007c36 <_strtod_l+0x19e>
 8007d42:	3a30      	subs	r2, #48	; 0x30
 8007d44:	9209      	str	r2, [sp, #36]	; 0x24
 8007d46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d48:	920c      	str	r2, [sp, #48]	; 0x30
 8007d4a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d4c:	1c57      	adds	r7, r2, #1
 8007d4e:	9719      	str	r7, [sp, #100]	; 0x64
 8007d50:	7852      	ldrb	r2, [r2, #1]
 8007d52:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d56:	f1be 0f09 	cmp.w	lr, #9
 8007d5a:	d938      	bls.n	8007dce <_strtod_l+0x336>
 8007d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d5e:	1a7f      	subs	r7, r7, r1
 8007d60:	2f08      	cmp	r7, #8
 8007d62:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007d66:	dc03      	bgt.n	8007d70 <_strtod_l+0x2d8>
 8007d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d6a:	428f      	cmp	r7, r1
 8007d6c:	bfa8      	it	ge
 8007d6e:	460f      	movge	r7, r1
 8007d70:	f1bc 0f00 	cmp.w	ip, #0
 8007d74:	d000      	beq.n	8007d78 <_strtod_l+0x2e0>
 8007d76:	427f      	negs	r7, r7
 8007d78:	2e00      	cmp	r6, #0
 8007d7a:	d14f      	bne.n	8007e1c <_strtod_l+0x384>
 8007d7c:	9905      	ldr	r1, [sp, #20]
 8007d7e:	4301      	orrs	r1, r0
 8007d80:	f47f aec3 	bne.w	8007b0a <_strtod_l+0x72>
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f47f aedb 	bne.w	8007b40 <_strtod_l+0xa8>
 8007d8a:	2a69      	cmp	r2, #105	; 0x69
 8007d8c:	d029      	beq.n	8007de2 <_strtod_l+0x34a>
 8007d8e:	dc26      	bgt.n	8007dde <_strtod_l+0x346>
 8007d90:	2a49      	cmp	r2, #73	; 0x49
 8007d92:	d026      	beq.n	8007de2 <_strtod_l+0x34a>
 8007d94:	2a4e      	cmp	r2, #78	; 0x4e
 8007d96:	f47f aed3 	bne.w	8007b40 <_strtod_l+0xa8>
 8007d9a:	499a      	ldr	r1, [pc, #616]	; (8008004 <_strtod_l+0x56c>)
 8007d9c:	a819      	add	r0, sp, #100	; 0x64
 8007d9e:	f002 fd69 	bl	800a874 <__match>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f43f aecc 	beq.w	8007b40 <_strtod_l+0xa8>
 8007da8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b28      	cmp	r3, #40	; 0x28
 8007dae:	d12f      	bne.n	8007e10 <_strtod_l+0x378>
 8007db0:	4995      	ldr	r1, [pc, #596]	; (8008008 <_strtod_l+0x570>)
 8007db2:	aa1c      	add	r2, sp, #112	; 0x70
 8007db4:	a819      	add	r0, sp, #100	; 0x64
 8007db6:	f002 fd71 	bl	800a89c <__hexnan>
 8007dba:	2805      	cmp	r0, #5
 8007dbc:	d128      	bne.n	8007e10 <_strtod_l+0x378>
 8007dbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007dc0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007dc4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007dc8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007dcc:	e69d      	b.n	8007b0a <_strtod_l+0x72>
 8007dce:	210a      	movs	r1, #10
 8007dd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007dd2:	fb01 2107 	mla	r1, r1, r7, r2
 8007dd6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007dda:	9209      	str	r2, [sp, #36]	; 0x24
 8007ddc:	e7b5      	b.n	8007d4a <_strtod_l+0x2b2>
 8007dde:	2a6e      	cmp	r2, #110	; 0x6e
 8007de0:	e7d9      	b.n	8007d96 <_strtod_l+0x2fe>
 8007de2:	498a      	ldr	r1, [pc, #552]	; (800800c <_strtod_l+0x574>)
 8007de4:	a819      	add	r0, sp, #100	; 0x64
 8007de6:	f002 fd45 	bl	800a874 <__match>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	f43f aea8 	beq.w	8007b40 <_strtod_l+0xa8>
 8007df0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007df2:	4987      	ldr	r1, [pc, #540]	; (8008010 <_strtod_l+0x578>)
 8007df4:	3b01      	subs	r3, #1
 8007df6:	a819      	add	r0, sp, #100	; 0x64
 8007df8:	9319      	str	r3, [sp, #100]	; 0x64
 8007dfa:	f002 fd3b 	bl	800a874 <__match>
 8007dfe:	b910      	cbnz	r0, 8007e06 <_strtod_l+0x36e>
 8007e00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007e02:	3301      	adds	r3, #1
 8007e04:	9319      	str	r3, [sp, #100]	; 0x64
 8007e06:	f04f 0800 	mov.w	r8, #0
 8007e0a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008014 <_strtod_l+0x57c>
 8007e0e:	e67c      	b.n	8007b0a <_strtod_l+0x72>
 8007e10:	4881      	ldr	r0, [pc, #516]	; (8008018 <_strtod_l+0x580>)
 8007e12:	f001 fbc9 	bl	80095a8 <nan>
 8007e16:	4680      	mov	r8, r0
 8007e18:	4689      	mov	r9, r1
 8007e1a:	e676      	b.n	8007b0a <_strtod_l+0x72>
 8007e1c:	9b08      	ldr	r3, [sp, #32]
 8007e1e:	f1bb 0f00 	cmp.w	fp, #0
 8007e22:	bf08      	it	eq
 8007e24:	46b3      	moveq	fp, r6
 8007e26:	1afb      	subs	r3, r7, r3
 8007e28:	2e10      	cmp	r6, #16
 8007e2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007e2c:	4635      	mov	r5, r6
 8007e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e30:	bfa8      	it	ge
 8007e32:	2510      	movge	r5, #16
 8007e34:	f7f8 fae0 	bl	80003f8 <__aeabi_ui2d>
 8007e38:	2e09      	cmp	r6, #9
 8007e3a:	4680      	mov	r8, r0
 8007e3c:	4689      	mov	r9, r1
 8007e3e:	dd13      	ble.n	8007e68 <_strtod_l+0x3d0>
 8007e40:	4b76      	ldr	r3, [pc, #472]	; (800801c <_strtod_l+0x584>)
 8007e42:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007e46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e4a:	f7f8 fb4f 	bl	80004ec <__aeabi_dmul>
 8007e4e:	4680      	mov	r8, r0
 8007e50:	4650      	mov	r0, sl
 8007e52:	4689      	mov	r9, r1
 8007e54:	f7f8 fad0 	bl	80003f8 <__aeabi_ui2d>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	4649      	mov	r1, r9
 8007e60:	f7f8 f98e 	bl	8000180 <__adddf3>
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	2e0f      	cmp	r6, #15
 8007e6a:	dc36      	bgt.n	8007eda <_strtod_l+0x442>
 8007e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f43f ae4b 	beq.w	8007b0a <_strtod_l+0x72>
 8007e74:	dd22      	ble.n	8007ebc <_strtod_l+0x424>
 8007e76:	2b16      	cmp	r3, #22
 8007e78:	dc09      	bgt.n	8007e8e <_strtod_l+0x3f6>
 8007e7a:	4968      	ldr	r1, [pc, #416]	; (800801c <_strtod_l+0x584>)
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e82:	464b      	mov	r3, r9
 8007e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e88:	f7f8 fb30 	bl	80004ec <__aeabi_dmul>
 8007e8c:	e7c3      	b.n	8007e16 <_strtod_l+0x37e>
 8007e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e90:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007e94:	4293      	cmp	r3, r2
 8007e96:	db20      	blt.n	8007eda <_strtod_l+0x442>
 8007e98:	4c60      	ldr	r4, [pc, #384]	; (800801c <_strtod_l+0x584>)
 8007e9a:	f1c6 060f 	rsb	r6, r6, #15
 8007e9e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007ea2:	4642      	mov	r2, r8
 8007ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	f7f8 fb1f 	bl	80004ec <__aeabi_dmul>
 8007eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eb0:	1b9e      	subs	r6, r3, r6
 8007eb2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007eb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007eba:	e7e5      	b.n	8007e88 <_strtod_l+0x3f0>
 8007ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ebe:	3316      	adds	r3, #22
 8007ec0:	db0b      	blt.n	8007eda <_strtod_l+0x442>
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	1bdf      	subs	r7, r3, r7
 8007ec8:	4b54      	ldr	r3, [pc, #336]	; (800801c <_strtod_l+0x584>)
 8007eca:	4649      	mov	r1, r9
 8007ecc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed4:	f7f8 fc34 	bl	8000740 <__aeabi_ddiv>
 8007ed8:	e79d      	b.n	8007e16 <_strtod_l+0x37e>
 8007eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007edc:	1b75      	subs	r5, r6, r5
 8007ede:	441d      	add	r5, r3
 8007ee0:	2d00      	cmp	r5, #0
 8007ee2:	dd70      	ble.n	8007fc6 <_strtod_l+0x52e>
 8007ee4:	f015 030f 	ands.w	r3, r5, #15
 8007ee8:	d00a      	beq.n	8007f00 <_strtod_l+0x468>
 8007eea:	494c      	ldr	r1, [pc, #304]	; (800801c <_strtod_l+0x584>)
 8007eec:	4642      	mov	r2, r8
 8007eee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ef2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	f7f8 faf8 	bl	80004ec <__aeabi_dmul>
 8007efc:	4680      	mov	r8, r0
 8007efe:	4689      	mov	r9, r1
 8007f00:	f035 050f 	bics.w	r5, r5, #15
 8007f04:	d04d      	beq.n	8007fa2 <_strtod_l+0x50a>
 8007f06:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007f0a:	dd22      	ble.n	8007f52 <_strtod_l+0x4ba>
 8007f0c:	2600      	movs	r6, #0
 8007f0e:	46b3      	mov	fp, r6
 8007f10:	960b      	str	r6, [sp, #44]	; 0x2c
 8007f12:	9608      	str	r6, [sp, #32]
 8007f14:	2322      	movs	r3, #34	; 0x22
 8007f16:	f04f 0800 	mov.w	r8, #0
 8007f1a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8008014 <_strtod_l+0x57c>
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f43f adf1 	beq.w	8007b0a <_strtod_l+0x72>
 8007f28:	4620      	mov	r0, r4
 8007f2a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007f2c:	f002 fe58 	bl	800abe0 <_Bfree>
 8007f30:	4620      	mov	r0, r4
 8007f32:	9908      	ldr	r1, [sp, #32]
 8007f34:	f002 fe54 	bl	800abe0 <_Bfree>
 8007f38:	4659      	mov	r1, fp
 8007f3a:	4620      	mov	r0, r4
 8007f3c:	f002 fe50 	bl	800abe0 <_Bfree>
 8007f40:	4620      	mov	r0, r4
 8007f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f44:	f002 fe4c 	bl	800abe0 <_Bfree>
 8007f48:	4631      	mov	r1, r6
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f002 fe48 	bl	800abe0 <_Bfree>
 8007f50:	e5db      	b.n	8007b0a <_strtod_l+0x72>
 8007f52:	4b33      	ldr	r3, [pc, #204]	; (8008020 <_strtod_l+0x588>)
 8007f54:	4640      	mov	r0, r8
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	112d      	asrs	r5, r5, #4
 8007f60:	2d01      	cmp	r5, #1
 8007f62:	dc21      	bgt.n	8007fa8 <_strtod_l+0x510>
 8007f64:	b10b      	cbz	r3, 8007f6a <_strtod_l+0x4d2>
 8007f66:	4680      	mov	r8, r0
 8007f68:	4689      	mov	r9, r1
 8007f6a:	492d      	ldr	r1, [pc, #180]	; (8008020 <_strtod_l+0x588>)
 8007f6c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f70:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f74:	4642      	mov	r2, r8
 8007f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	f7f8 fab6 	bl	80004ec <__aeabi_dmul>
 8007f80:	4b24      	ldr	r3, [pc, #144]	; (8008014 <_strtod_l+0x57c>)
 8007f82:	460a      	mov	r2, r1
 8007f84:	400b      	ands	r3, r1
 8007f86:	4927      	ldr	r1, [pc, #156]	; (8008024 <_strtod_l+0x58c>)
 8007f88:	4680      	mov	r8, r0
 8007f8a:	428b      	cmp	r3, r1
 8007f8c:	d8be      	bhi.n	8007f0c <_strtod_l+0x474>
 8007f8e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f92:	428b      	cmp	r3, r1
 8007f94:	bf86      	itte	hi
 8007f96:	f04f 38ff 	movhi.w	r8, #4294967295
 8007f9a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8008028 <_strtod_l+0x590>
 8007f9e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	9305      	str	r3, [sp, #20]
 8007fa6:	e07b      	b.n	80080a0 <_strtod_l+0x608>
 8007fa8:	07ea      	lsls	r2, r5, #31
 8007faa:	d505      	bpl.n	8007fb8 <_strtod_l+0x520>
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 fa9b 	bl	80004ec <__aeabi_dmul>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	9a05      	ldr	r2, [sp, #20]
 8007fba:	f10a 0a01 	add.w	sl, sl, #1
 8007fbe:	3208      	adds	r2, #8
 8007fc0:	106d      	asrs	r5, r5, #1
 8007fc2:	9205      	str	r2, [sp, #20]
 8007fc4:	e7cc      	b.n	8007f60 <_strtod_l+0x4c8>
 8007fc6:	d0ec      	beq.n	8007fa2 <_strtod_l+0x50a>
 8007fc8:	426d      	negs	r5, r5
 8007fca:	f015 020f 	ands.w	r2, r5, #15
 8007fce:	d00a      	beq.n	8007fe6 <_strtod_l+0x54e>
 8007fd0:	4b12      	ldr	r3, [pc, #72]	; (800801c <_strtod_l+0x584>)
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd8:	4649      	mov	r1, r9
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f7f8 fbaf 	bl	8000740 <__aeabi_ddiv>
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	4689      	mov	r9, r1
 8007fe6:	112d      	asrs	r5, r5, #4
 8007fe8:	d0db      	beq.n	8007fa2 <_strtod_l+0x50a>
 8007fea:	2d1f      	cmp	r5, #31
 8007fec:	dd1e      	ble.n	800802c <_strtod_l+0x594>
 8007fee:	2600      	movs	r6, #0
 8007ff0:	46b3      	mov	fp, r6
 8007ff2:	960b      	str	r6, [sp, #44]	; 0x2c
 8007ff4:	9608      	str	r6, [sp, #32]
 8007ff6:	2322      	movs	r3, #34	; 0x22
 8007ff8:	f04f 0800 	mov.w	r8, #0
 8007ffc:	f04f 0900 	mov.w	r9, #0
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	e78d      	b.n	8007f20 <_strtod_l+0x488>
 8008004:	0800c206 	.word	0x0800c206
 8008008:	0800c0b8 	.word	0x0800c0b8
 800800c:	0800c1fe 	.word	0x0800c1fe
 8008010:	0800c238 	.word	0x0800c238
 8008014:	7ff00000 	.word	0x7ff00000
 8008018:	0800c4c8 	.word	0x0800c4c8
 800801c:	0800c3a8 	.word	0x0800c3a8
 8008020:	0800c380 	.word	0x0800c380
 8008024:	7ca00000 	.word	0x7ca00000
 8008028:	7fefffff 	.word	0x7fefffff
 800802c:	f015 0310 	ands.w	r3, r5, #16
 8008030:	bf18      	it	ne
 8008032:	236a      	movne	r3, #106	; 0x6a
 8008034:	4640      	mov	r0, r8
 8008036:	9305      	str	r3, [sp, #20]
 8008038:	4649      	mov	r1, r9
 800803a:	2300      	movs	r3, #0
 800803c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008308 <_strtod_l+0x870>
 8008040:	07ea      	lsls	r2, r5, #31
 8008042:	d504      	bpl.n	800804e <_strtod_l+0x5b6>
 8008044:	e9da 2300 	ldrd	r2, r3, [sl]
 8008048:	f7f8 fa50 	bl	80004ec <__aeabi_dmul>
 800804c:	2301      	movs	r3, #1
 800804e:	106d      	asrs	r5, r5, #1
 8008050:	f10a 0a08 	add.w	sl, sl, #8
 8008054:	d1f4      	bne.n	8008040 <_strtod_l+0x5a8>
 8008056:	b10b      	cbz	r3, 800805c <_strtod_l+0x5c4>
 8008058:	4680      	mov	r8, r0
 800805a:	4689      	mov	r9, r1
 800805c:	9b05      	ldr	r3, [sp, #20]
 800805e:	b1bb      	cbz	r3, 8008090 <_strtod_l+0x5f8>
 8008060:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008064:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008068:	2b00      	cmp	r3, #0
 800806a:	4649      	mov	r1, r9
 800806c:	dd10      	ble.n	8008090 <_strtod_l+0x5f8>
 800806e:	2b1f      	cmp	r3, #31
 8008070:	f340 8128 	ble.w	80082c4 <_strtod_l+0x82c>
 8008074:	2b34      	cmp	r3, #52	; 0x34
 8008076:	bfd8      	it	le
 8008078:	f04f 33ff 	movle.w	r3, #4294967295
 800807c:	f04f 0800 	mov.w	r8, #0
 8008080:	bfcf      	iteee	gt
 8008082:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008086:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800808a:	4093      	lslle	r3, r2
 800808c:	ea03 0901 	andle.w	r9, r3, r1
 8008090:	2200      	movs	r2, #0
 8008092:	2300      	movs	r3, #0
 8008094:	4640      	mov	r0, r8
 8008096:	4649      	mov	r1, r9
 8008098:	f7f8 fc90 	bl	80009bc <__aeabi_dcmpeq>
 800809c:	2800      	cmp	r0, #0
 800809e:	d1a6      	bne.n	8007fee <_strtod_l+0x556>
 80080a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a2:	465a      	mov	r2, fp
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4620      	mov	r0, r4
 80080a8:	4633      	mov	r3, r6
 80080aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ac:	f002 fe00 	bl	800acb0 <__s2b>
 80080b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f43f af2a 	beq.w	8007f0c <_strtod_l+0x474>
 80080b8:	2600      	movs	r6, #0
 80080ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080bc:	9b08      	ldr	r3, [sp, #32]
 80080be:	2a00      	cmp	r2, #0
 80080c0:	eba3 0307 	sub.w	r3, r3, r7
 80080c4:	bfa8      	it	ge
 80080c6:	2300      	movge	r3, #0
 80080c8:	46b3      	mov	fp, r6
 80080ca:	9312      	str	r3, [sp, #72]	; 0x48
 80080cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080d0:	9316      	str	r3, [sp, #88]	; 0x58
 80080d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d4:	4620      	mov	r0, r4
 80080d6:	6859      	ldr	r1, [r3, #4]
 80080d8:	f002 fd42 	bl	800ab60 <_Balloc>
 80080dc:	9008      	str	r0, [sp, #32]
 80080de:	2800      	cmp	r0, #0
 80080e0:	f43f af18 	beq.w	8007f14 <_strtod_l+0x47c>
 80080e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080e6:	300c      	adds	r0, #12
 80080e8:	691a      	ldr	r2, [r3, #16]
 80080ea:	f103 010c 	add.w	r1, r3, #12
 80080ee:	3202      	adds	r2, #2
 80080f0:	0092      	lsls	r2, r2, #2
 80080f2:	f001 fa4b 	bl	800958c <memcpy>
 80080f6:	ab1c      	add	r3, sp, #112	; 0x70
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	ab1b      	add	r3, sp, #108	; 0x6c
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	4642      	mov	r2, r8
 8008100:	464b      	mov	r3, r9
 8008102:	4620      	mov	r0, r4
 8008104:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008108:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800810c:	f003 f8fc 	bl	800b308 <__d2b>
 8008110:	901a      	str	r0, [sp, #104]	; 0x68
 8008112:	2800      	cmp	r0, #0
 8008114:	f43f aefe 	beq.w	8007f14 <_strtod_l+0x47c>
 8008118:	2101      	movs	r1, #1
 800811a:	4620      	mov	r0, r4
 800811c:	f002 fe60 	bl	800ade0 <__i2b>
 8008120:	4683      	mov	fp, r0
 8008122:	2800      	cmp	r0, #0
 8008124:	f43f aef6 	beq.w	8007f14 <_strtod_l+0x47c>
 8008128:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800812a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800812c:	2f00      	cmp	r7, #0
 800812e:	bfab      	itete	ge
 8008130:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8008132:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008134:	eb07 0a03 	addge.w	sl, r7, r3
 8008138:	1bdd      	sublt	r5, r3, r7
 800813a:	9b05      	ldr	r3, [sp, #20]
 800813c:	bfa8      	it	ge
 800813e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8008140:	eba7 0703 	sub.w	r7, r7, r3
 8008144:	4417      	add	r7, r2
 8008146:	4b71      	ldr	r3, [pc, #452]	; (800830c <_strtod_l+0x874>)
 8008148:	f107 37ff 	add.w	r7, r7, #4294967295
 800814c:	bfb8      	it	lt
 800814e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8008152:	429f      	cmp	r7, r3
 8008154:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008158:	f280 80c7 	bge.w	80082ea <_strtod_l+0x852>
 800815c:	1bdb      	subs	r3, r3, r7
 800815e:	2b1f      	cmp	r3, #31
 8008160:	f04f 0101 	mov.w	r1, #1
 8008164:	eba2 0203 	sub.w	r2, r2, r3
 8008168:	f300 80b3 	bgt.w	80082d2 <_strtod_l+0x83a>
 800816c:	fa01 f303 	lsl.w	r3, r1, r3
 8008170:	9313      	str	r3, [sp, #76]	; 0x4c
 8008172:	2300      	movs	r3, #0
 8008174:	9310      	str	r3, [sp, #64]	; 0x40
 8008176:	eb0a 0702 	add.w	r7, sl, r2
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	45ba      	cmp	sl, r7
 800817e:	4415      	add	r5, r2
 8008180:	441d      	add	r5, r3
 8008182:	4653      	mov	r3, sl
 8008184:	bfa8      	it	ge
 8008186:	463b      	movge	r3, r7
 8008188:	42ab      	cmp	r3, r5
 800818a:	bfa8      	it	ge
 800818c:	462b      	movge	r3, r5
 800818e:	2b00      	cmp	r3, #0
 8008190:	bfc2      	ittt	gt
 8008192:	1aff      	subgt	r7, r7, r3
 8008194:	1aed      	subgt	r5, r5, r3
 8008196:	ebaa 0a03 	subgt.w	sl, sl, r3
 800819a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd17      	ble.n	80081d0 <_strtod_l+0x738>
 80081a0:	4659      	mov	r1, fp
 80081a2:	461a      	mov	r2, r3
 80081a4:	4620      	mov	r0, r4
 80081a6:	f002 fed9 	bl	800af5c <__pow5mult>
 80081aa:	4683      	mov	fp, r0
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f43f aeb1 	beq.w	8007f14 <_strtod_l+0x47c>
 80081b2:	4601      	mov	r1, r0
 80081b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80081b6:	4620      	mov	r0, r4
 80081b8:	f002 fe28 	bl	800ae0c <__multiply>
 80081bc:	900a      	str	r0, [sp, #40]	; 0x28
 80081be:	2800      	cmp	r0, #0
 80081c0:	f43f aea8 	beq.w	8007f14 <_strtod_l+0x47c>
 80081c4:	4620      	mov	r0, r4
 80081c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081c8:	f002 fd0a 	bl	800abe0 <_Bfree>
 80081cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ce:	931a      	str	r3, [sp, #104]	; 0x68
 80081d0:	2f00      	cmp	r7, #0
 80081d2:	f300 808f 	bgt.w	80082f4 <_strtod_l+0x85c>
 80081d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dd08      	ble.n	80081ee <_strtod_l+0x756>
 80081dc:	4620      	mov	r0, r4
 80081de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80081e0:	9908      	ldr	r1, [sp, #32]
 80081e2:	f002 febb 	bl	800af5c <__pow5mult>
 80081e6:	9008      	str	r0, [sp, #32]
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f43f ae93 	beq.w	8007f14 <_strtod_l+0x47c>
 80081ee:	2d00      	cmp	r5, #0
 80081f0:	dd08      	ble.n	8008204 <_strtod_l+0x76c>
 80081f2:	462a      	mov	r2, r5
 80081f4:	4620      	mov	r0, r4
 80081f6:	9908      	ldr	r1, [sp, #32]
 80081f8:	f002 ff0a 	bl	800b010 <__lshift>
 80081fc:	9008      	str	r0, [sp, #32]
 80081fe:	2800      	cmp	r0, #0
 8008200:	f43f ae88 	beq.w	8007f14 <_strtod_l+0x47c>
 8008204:	f1ba 0f00 	cmp.w	sl, #0
 8008208:	dd08      	ble.n	800821c <_strtod_l+0x784>
 800820a:	4659      	mov	r1, fp
 800820c:	4652      	mov	r2, sl
 800820e:	4620      	mov	r0, r4
 8008210:	f002 fefe 	bl	800b010 <__lshift>
 8008214:	4683      	mov	fp, r0
 8008216:	2800      	cmp	r0, #0
 8008218:	f43f ae7c 	beq.w	8007f14 <_strtod_l+0x47c>
 800821c:	4620      	mov	r0, r4
 800821e:	9a08      	ldr	r2, [sp, #32]
 8008220:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008222:	f002 ff7d 	bl	800b120 <__mdiff>
 8008226:	4606      	mov	r6, r0
 8008228:	2800      	cmp	r0, #0
 800822a:	f43f ae73 	beq.w	8007f14 <_strtod_l+0x47c>
 800822e:	2500      	movs	r5, #0
 8008230:	68c3      	ldr	r3, [r0, #12]
 8008232:	4659      	mov	r1, fp
 8008234:	60c5      	str	r5, [r0, #12]
 8008236:	930a      	str	r3, [sp, #40]	; 0x28
 8008238:	f002 ff56 	bl	800b0e8 <__mcmp>
 800823c:	42a8      	cmp	r0, r5
 800823e:	da6b      	bge.n	8008318 <_strtod_l+0x880>
 8008240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008242:	ea53 0308 	orrs.w	r3, r3, r8
 8008246:	f040 808f 	bne.w	8008368 <_strtod_l+0x8d0>
 800824a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 808a 	bne.w	8008368 <_strtod_l+0x8d0>
 8008254:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008258:	0d1b      	lsrs	r3, r3, #20
 800825a:	051b      	lsls	r3, r3, #20
 800825c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008260:	f240 8082 	bls.w	8008368 <_strtod_l+0x8d0>
 8008264:	6973      	ldr	r3, [r6, #20]
 8008266:	b913      	cbnz	r3, 800826e <_strtod_l+0x7d6>
 8008268:	6933      	ldr	r3, [r6, #16]
 800826a:	2b01      	cmp	r3, #1
 800826c:	dd7c      	ble.n	8008368 <_strtod_l+0x8d0>
 800826e:	4631      	mov	r1, r6
 8008270:	2201      	movs	r2, #1
 8008272:	4620      	mov	r0, r4
 8008274:	f002 fecc 	bl	800b010 <__lshift>
 8008278:	4659      	mov	r1, fp
 800827a:	4606      	mov	r6, r0
 800827c:	f002 ff34 	bl	800b0e8 <__mcmp>
 8008280:	2800      	cmp	r0, #0
 8008282:	dd71      	ble.n	8008368 <_strtod_l+0x8d0>
 8008284:	9905      	ldr	r1, [sp, #20]
 8008286:	464b      	mov	r3, r9
 8008288:	4a21      	ldr	r2, [pc, #132]	; (8008310 <_strtod_l+0x878>)
 800828a:	2900      	cmp	r1, #0
 800828c:	f000 808d 	beq.w	80083aa <_strtod_l+0x912>
 8008290:	ea02 0109 	and.w	r1, r2, r9
 8008294:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008298:	f300 8087 	bgt.w	80083aa <_strtod_l+0x912>
 800829c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082a0:	f77f aea9 	ble.w	8007ff6 <_strtod_l+0x55e>
 80082a4:	4640      	mov	r0, r8
 80082a6:	4649      	mov	r1, r9
 80082a8:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <_strtod_l+0x87c>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	f7f8 f91e 	bl	80004ec <__aeabi_dmul>
 80082b0:	4b17      	ldr	r3, [pc, #92]	; (8008310 <_strtod_l+0x878>)
 80082b2:	4680      	mov	r8, r0
 80082b4:	400b      	ands	r3, r1
 80082b6:	4689      	mov	r9, r1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f47f ae35 	bne.w	8007f28 <_strtod_l+0x490>
 80082be:	2322      	movs	r3, #34	; 0x22
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	e631      	b.n	8007f28 <_strtod_l+0x490>
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	ea03 0808 	and.w	r8, r3, r8
 80082d0:	e6de      	b.n	8008090 <_strtod_l+0x5f8>
 80082d2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80082d6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80082da:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80082de:	37e2      	adds	r7, #226	; 0xe2
 80082e0:	fa01 f307 	lsl.w	r3, r1, r7
 80082e4:	9310      	str	r3, [sp, #64]	; 0x40
 80082e6:	9113      	str	r1, [sp, #76]	; 0x4c
 80082e8:	e745      	b.n	8008176 <_strtod_l+0x6de>
 80082ea:	2300      	movs	r3, #0
 80082ec:	9310      	str	r3, [sp, #64]	; 0x40
 80082ee:	2301      	movs	r3, #1
 80082f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80082f2:	e740      	b.n	8008176 <_strtod_l+0x6de>
 80082f4:	463a      	mov	r2, r7
 80082f6:	4620      	mov	r0, r4
 80082f8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80082fa:	f002 fe89 	bl	800b010 <__lshift>
 80082fe:	901a      	str	r0, [sp, #104]	; 0x68
 8008300:	2800      	cmp	r0, #0
 8008302:	f47f af68 	bne.w	80081d6 <_strtod_l+0x73e>
 8008306:	e605      	b.n	8007f14 <_strtod_l+0x47c>
 8008308:	0800c0d0 	.word	0x0800c0d0
 800830c:	fffffc02 	.word	0xfffffc02
 8008310:	7ff00000 	.word	0x7ff00000
 8008314:	39500000 	.word	0x39500000
 8008318:	46ca      	mov	sl, r9
 800831a:	d165      	bne.n	80083e8 <_strtod_l+0x950>
 800831c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800831e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008322:	b352      	cbz	r2, 800837a <_strtod_l+0x8e2>
 8008324:	4a9e      	ldr	r2, [pc, #632]	; (80085a0 <_strtod_l+0xb08>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d12a      	bne.n	8008380 <_strtod_l+0x8e8>
 800832a:	9b05      	ldr	r3, [sp, #20]
 800832c:	4641      	mov	r1, r8
 800832e:	b1fb      	cbz	r3, 8008370 <_strtod_l+0x8d8>
 8008330:	4b9c      	ldr	r3, [pc, #624]	; (80085a4 <_strtod_l+0xb0c>)
 8008332:	f04f 32ff 	mov.w	r2, #4294967295
 8008336:	ea09 0303 	and.w	r3, r9, r3
 800833a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800833e:	d81a      	bhi.n	8008376 <_strtod_l+0x8de>
 8008340:	0d1b      	lsrs	r3, r3, #20
 8008342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	4299      	cmp	r1, r3
 800834c:	d118      	bne.n	8008380 <_strtod_l+0x8e8>
 800834e:	4b96      	ldr	r3, [pc, #600]	; (80085a8 <_strtod_l+0xb10>)
 8008350:	459a      	cmp	sl, r3
 8008352:	d102      	bne.n	800835a <_strtod_l+0x8c2>
 8008354:	3101      	adds	r1, #1
 8008356:	f43f addd 	beq.w	8007f14 <_strtod_l+0x47c>
 800835a:	f04f 0800 	mov.w	r8, #0
 800835e:	4b91      	ldr	r3, [pc, #580]	; (80085a4 <_strtod_l+0xb0c>)
 8008360:	ea0a 0303 	and.w	r3, sl, r3
 8008364:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008368:	9b05      	ldr	r3, [sp, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d19a      	bne.n	80082a4 <_strtod_l+0x80c>
 800836e:	e5db      	b.n	8007f28 <_strtod_l+0x490>
 8008370:	f04f 33ff 	mov.w	r3, #4294967295
 8008374:	e7e9      	b.n	800834a <_strtod_l+0x8b2>
 8008376:	4613      	mov	r3, r2
 8008378:	e7e7      	b.n	800834a <_strtod_l+0x8b2>
 800837a:	ea53 0308 	orrs.w	r3, r3, r8
 800837e:	d081      	beq.n	8008284 <_strtod_l+0x7ec>
 8008380:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008382:	b1e3      	cbz	r3, 80083be <_strtod_l+0x926>
 8008384:	ea13 0f0a 	tst.w	r3, sl
 8008388:	d0ee      	beq.n	8008368 <_strtod_l+0x8d0>
 800838a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800838c:	4640      	mov	r0, r8
 800838e:	4649      	mov	r1, r9
 8008390:	9a05      	ldr	r2, [sp, #20]
 8008392:	b1c3      	cbz	r3, 80083c6 <_strtod_l+0x92e>
 8008394:	f7ff fb5f 	bl	8007a56 <sulp>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800839e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083a0:	f7f7 feee 	bl	8000180 <__adddf3>
 80083a4:	4680      	mov	r8, r0
 80083a6:	4689      	mov	r9, r1
 80083a8:	e7de      	b.n	8008368 <_strtod_l+0x8d0>
 80083aa:	4013      	ands	r3, r2
 80083ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80083b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80083b4:	f04f 38ff 	mov.w	r8, #4294967295
 80083b8:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80083bc:	e7d4      	b.n	8008368 <_strtod_l+0x8d0>
 80083be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083c0:	ea13 0f08 	tst.w	r3, r8
 80083c4:	e7e0      	b.n	8008388 <_strtod_l+0x8f0>
 80083c6:	f7ff fb46 	bl	8007a56 <sulp>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	980c      	ldr	r0, [sp, #48]	; 0x30
 80083d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083d2:	f7f7 fed3 	bl	800017c <__aeabi_dsub>
 80083d6:	2200      	movs	r2, #0
 80083d8:	2300      	movs	r3, #0
 80083da:	4680      	mov	r8, r0
 80083dc:	4689      	mov	r9, r1
 80083de:	f7f8 faed 	bl	80009bc <__aeabi_dcmpeq>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d0c0      	beq.n	8008368 <_strtod_l+0x8d0>
 80083e6:	e606      	b.n	8007ff6 <_strtod_l+0x55e>
 80083e8:	4659      	mov	r1, fp
 80083ea:	4630      	mov	r0, r6
 80083ec:	f002 ffe2 	bl	800b3b4 <__ratio>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083f8:	2200      	movs	r2, #0
 80083fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083fe:	f7f8 faf1 	bl	80009e4 <__aeabi_dcmple>
 8008402:	2800      	cmp	r0, #0
 8008404:	d06f      	beq.n	80084e6 <_strtod_l+0xa4e>
 8008406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008408:	2b00      	cmp	r3, #0
 800840a:	d17c      	bne.n	8008506 <_strtod_l+0xa6e>
 800840c:	f1b8 0f00 	cmp.w	r8, #0
 8008410:	d159      	bne.n	80084c6 <_strtod_l+0xa2e>
 8008412:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008416:	2b00      	cmp	r3, #0
 8008418:	d17b      	bne.n	8008512 <_strtod_l+0xa7a>
 800841a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800841e:	2200      	movs	r2, #0
 8008420:	4b62      	ldr	r3, [pc, #392]	; (80085ac <_strtod_l+0xb14>)
 8008422:	f7f8 fad5 	bl	80009d0 <__aeabi_dcmplt>
 8008426:	2800      	cmp	r0, #0
 8008428:	d15a      	bne.n	80084e0 <_strtod_l+0xa48>
 800842a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800842e:	2200      	movs	r2, #0
 8008430:	4b5f      	ldr	r3, [pc, #380]	; (80085b0 <_strtod_l+0xb18>)
 8008432:	f7f8 f85b 	bl	80004ec <__aeabi_dmul>
 8008436:	4605      	mov	r5, r0
 8008438:	460f      	mov	r7, r1
 800843a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800843e:	9506      	str	r5, [sp, #24]
 8008440:	9307      	str	r3, [sp, #28]
 8008442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008446:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800844a:	4b56      	ldr	r3, [pc, #344]	; (80085a4 <_strtod_l+0xb0c>)
 800844c:	4a55      	ldr	r2, [pc, #340]	; (80085a4 <_strtod_l+0xb0c>)
 800844e:	ea0a 0303 	and.w	r3, sl, r3
 8008452:	9313      	str	r3, [sp, #76]	; 0x4c
 8008454:	4b57      	ldr	r3, [pc, #348]	; (80085b4 <_strtod_l+0xb1c>)
 8008456:	ea0a 0202 	and.w	r2, sl, r2
 800845a:	429a      	cmp	r2, r3
 800845c:	f040 80b0 	bne.w	80085c0 <_strtod_l+0xb28>
 8008460:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008464:	4640      	mov	r0, r8
 8008466:	4649      	mov	r1, r9
 8008468:	f002 fee6 	bl	800b238 <__ulp>
 800846c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008470:	f7f8 f83c 	bl	80004ec <__aeabi_dmul>
 8008474:	4642      	mov	r2, r8
 8008476:	464b      	mov	r3, r9
 8008478:	f7f7 fe82 	bl	8000180 <__adddf3>
 800847c:	f8df a124 	ldr.w	sl, [pc, #292]	; 80085a4 <_strtod_l+0xb0c>
 8008480:	4a4d      	ldr	r2, [pc, #308]	; (80085b8 <_strtod_l+0xb20>)
 8008482:	ea01 0a0a 	and.w	sl, r1, sl
 8008486:	4592      	cmp	sl, r2
 8008488:	4680      	mov	r8, r0
 800848a:	d948      	bls.n	800851e <_strtod_l+0xa86>
 800848c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800848e:	4b46      	ldr	r3, [pc, #280]	; (80085a8 <_strtod_l+0xb10>)
 8008490:	429a      	cmp	r2, r3
 8008492:	d103      	bne.n	800849c <_strtod_l+0xa04>
 8008494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008496:	3301      	adds	r3, #1
 8008498:	f43f ad3c 	beq.w	8007f14 <_strtod_l+0x47c>
 800849c:	f04f 38ff 	mov.w	r8, #4294967295
 80084a0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80085a8 <_strtod_l+0xb10>
 80084a4:	4620      	mov	r0, r4
 80084a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80084a8:	f002 fb9a 	bl	800abe0 <_Bfree>
 80084ac:	4620      	mov	r0, r4
 80084ae:	9908      	ldr	r1, [sp, #32]
 80084b0:	f002 fb96 	bl	800abe0 <_Bfree>
 80084b4:	4659      	mov	r1, fp
 80084b6:	4620      	mov	r0, r4
 80084b8:	f002 fb92 	bl	800abe0 <_Bfree>
 80084bc:	4631      	mov	r1, r6
 80084be:	4620      	mov	r0, r4
 80084c0:	f002 fb8e 	bl	800abe0 <_Bfree>
 80084c4:	e605      	b.n	80080d2 <_strtod_l+0x63a>
 80084c6:	f1b8 0f01 	cmp.w	r8, #1
 80084ca:	d103      	bne.n	80084d4 <_strtod_l+0xa3c>
 80084cc:	f1b9 0f00 	cmp.w	r9, #0
 80084d0:	f43f ad91 	beq.w	8007ff6 <_strtod_l+0x55e>
 80084d4:	2200      	movs	r2, #0
 80084d6:	4b39      	ldr	r3, [pc, #228]	; (80085bc <_strtod_l+0xb24>)
 80084d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084de:	e016      	b.n	800850e <_strtod_l+0xa76>
 80084e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084e2:	4f33      	ldr	r7, [pc, #204]	; (80085b0 <_strtod_l+0xb18>)
 80084e4:	e7a9      	b.n	800843a <_strtod_l+0x9a2>
 80084e6:	4b32      	ldr	r3, [pc, #200]	; (80085b0 <_strtod_l+0xb18>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80084ee:	f7f7 fffd 	bl	80004ec <__aeabi_dmul>
 80084f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f4:	4605      	mov	r5, r0
 80084f6:	460f      	mov	r7, r1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d09e      	beq.n	800843a <_strtod_l+0x9a2>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008504:	e79d      	b.n	8008442 <_strtod_l+0x9aa>
 8008506:	2200      	movs	r2, #0
 8008508:	4b28      	ldr	r3, [pc, #160]	; (80085ac <_strtod_l+0xb14>)
 800850a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800850e:	4f27      	ldr	r7, [pc, #156]	; (80085ac <_strtod_l+0xb14>)
 8008510:	e797      	b.n	8008442 <_strtod_l+0x9aa>
 8008512:	2200      	movs	r2, #0
 8008514:	4b29      	ldr	r3, [pc, #164]	; (80085bc <_strtod_l+0xb24>)
 8008516:	4645      	mov	r5, r8
 8008518:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800851c:	e7f7      	b.n	800850e <_strtod_l+0xa76>
 800851e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8008522:	9b05      	ldr	r3, [sp, #20]
 8008524:	46ca      	mov	sl, r9
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1bc      	bne.n	80084a4 <_strtod_l+0xa0c>
 800852a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800852e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008530:	0d1b      	lsrs	r3, r3, #20
 8008532:	051b      	lsls	r3, r3, #20
 8008534:	429a      	cmp	r2, r3
 8008536:	d1b5      	bne.n	80084a4 <_strtod_l+0xa0c>
 8008538:	4628      	mov	r0, r5
 800853a:	4639      	mov	r1, r7
 800853c:	f7f8 fe18 	bl	8001170 <__aeabi_d2lz>
 8008540:	f7f7 ffa6 	bl	8000490 <__aeabi_l2d>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	4628      	mov	r0, r5
 800854a:	4639      	mov	r1, r7
 800854c:	f7f7 fe16 	bl	800017c <__aeabi_dsub>
 8008550:	460b      	mov	r3, r1
 8008552:	4602      	mov	r2, r0
 8008554:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8008558:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800855c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800855e:	ea4a 0a08 	orr.w	sl, sl, r8
 8008562:	ea5a 0a03 	orrs.w	sl, sl, r3
 8008566:	d06c      	beq.n	8008642 <_strtod_l+0xbaa>
 8008568:	a309      	add	r3, pc, #36	; (adr r3, 8008590 <_strtod_l+0xaf8>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f8 fa2f 	bl	80009d0 <__aeabi_dcmplt>
 8008572:	2800      	cmp	r0, #0
 8008574:	f47f acd8 	bne.w	8007f28 <_strtod_l+0x490>
 8008578:	a307      	add	r3, pc, #28	; (adr r3, 8008598 <_strtod_l+0xb00>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008582:	f7f8 fa43 	bl	8000a0c <__aeabi_dcmpgt>
 8008586:	2800      	cmp	r0, #0
 8008588:	d08c      	beq.n	80084a4 <_strtod_l+0xa0c>
 800858a:	e4cd      	b.n	8007f28 <_strtod_l+0x490>
 800858c:	f3af 8000 	nop.w
 8008590:	94a03595 	.word	0x94a03595
 8008594:	3fdfffff 	.word	0x3fdfffff
 8008598:	35afe535 	.word	0x35afe535
 800859c:	3fe00000 	.word	0x3fe00000
 80085a0:	000fffff 	.word	0x000fffff
 80085a4:	7ff00000 	.word	0x7ff00000
 80085a8:	7fefffff 	.word	0x7fefffff
 80085ac:	3ff00000 	.word	0x3ff00000
 80085b0:	3fe00000 	.word	0x3fe00000
 80085b4:	7fe00000 	.word	0x7fe00000
 80085b8:	7c9fffff 	.word	0x7c9fffff
 80085bc:	bff00000 	.word	0xbff00000
 80085c0:	9b05      	ldr	r3, [sp, #20]
 80085c2:	b333      	cbz	r3, 8008612 <_strtod_l+0xb7a>
 80085c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085ca:	d822      	bhi.n	8008612 <_strtod_l+0xb7a>
 80085cc:	a328      	add	r3, pc, #160	; (adr r3, 8008670 <_strtod_l+0xbd8>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	4628      	mov	r0, r5
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 fa05 	bl	80009e4 <__aeabi_dcmple>
 80085da:	b1a0      	cbz	r0, 8008606 <_strtod_l+0xb6e>
 80085dc:	4639      	mov	r1, r7
 80085de:	4628      	mov	r0, r5
 80085e0:	f7f8 fa5c 	bl	8000a9c <__aeabi_d2uiz>
 80085e4:	2801      	cmp	r0, #1
 80085e6:	bf38      	it	cc
 80085e8:	2001      	movcc	r0, #1
 80085ea:	f7f7 ff05 	bl	80003f8 <__aeabi_ui2d>
 80085ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f0:	4605      	mov	r5, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	bb03      	cbnz	r3, 8008638 <_strtod_l+0xba0>
 80085f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085fa:	9014      	str	r0, [sp, #80]	; 0x50
 80085fc:	9315      	str	r3, [sp, #84]	; 0x54
 80085fe:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008602:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008606:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800860a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800860e:	1a9b      	subs	r3, r3, r2
 8008610:	9311      	str	r3, [sp, #68]	; 0x44
 8008612:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008614:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008616:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800861a:	f002 fe0d 	bl	800b238 <__ulp>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f7f7 ff61 	bl	80004ec <__aeabi_dmul>
 800862a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800862e:	f7f7 fda7 	bl	8000180 <__adddf3>
 8008632:	4680      	mov	r8, r0
 8008634:	4689      	mov	r9, r1
 8008636:	e774      	b.n	8008522 <_strtod_l+0xa8a>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008640:	e7dd      	b.n	80085fe <_strtod_l+0xb66>
 8008642:	a30d      	add	r3, pc, #52	; (adr r3, 8008678 <_strtod_l+0xbe0>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	f7f8 f9c2 	bl	80009d0 <__aeabi_dcmplt>
 800864c:	e79b      	b.n	8008586 <_strtod_l+0xaee>
 800864e:	2300      	movs	r3, #0
 8008650:	930e      	str	r3, [sp, #56]	; 0x38
 8008652:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008654:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	f7ff ba5b 	b.w	8007b12 <_strtod_l+0x7a>
 800865c:	2a65      	cmp	r2, #101	; 0x65
 800865e:	f43f ab52 	beq.w	8007d06 <_strtod_l+0x26e>
 8008662:	2a45      	cmp	r2, #69	; 0x45
 8008664:	f43f ab4f 	beq.w	8007d06 <_strtod_l+0x26e>
 8008668:	2301      	movs	r3, #1
 800866a:	f7ff bb87 	b.w	8007d7c <_strtod_l+0x2e4>
 800866e:	bf00      	nop
 8008670:	ffc00000 	.word	0xffc00000
 8008674:	41dfffff 	.word	0x41dfffff
 8008678:	94a03595 	.word	0x94a03595
 800867c:	3fcfffff 	.word	0x3fcfffff

08008680 <strtod>:
 8008680:	460a      	mov	r2, r1
 8008682:	4601      	mov	r1, r0
 8008684:	4802      	ldr	r0, [pc, #8]	; (8008690 <strtod+0x10>)
 8008686:	4b03      	ldr	r3, [pc, #12]	; (8008694 <strtod+0x14>)
 8008688:	6800      	ldr	r0, [r0, #0]
 800868a:	f7ff ba05 	b.w	8007a98 <_strtod_l>
 800868e:	bf00      	nop
 8008690:	200001d0 	.word	0x200001d0
 8008694:	20000018 	.word	0x20000018

08008698 <_strtol_l.constprop.0>:
 8008698:	2b01      	cmp	r3, #1
 800869a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869e:	4686      	mov	lr, r0
 80086a0:	4690      	mov	r8, r2
 80086a2:	d001      	beq.n	80086a8 <_strtol_l.constprop.0+0x10>
 80086a4:	2b24      	cmp	r3, #36	; 0x24
 80086a6:	d906      	bls.n	80086b6 <_strtol_l.constprop.0+0x1e>
 80086a8:	f000 ff36 	bl	8009518 <__errno>
 80086ac:	2316      	movs	r3, #22
 80086ae:	6003      	str	r3, [r0, #0]
 80086b0:	2000      	movs	r0, #0
 80086b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b6:	460d      	mov	r5, r1
 80086b8:	4835      	ldr	r0, [pc, #212]	; (8008790 <_strtol_l.constprop.0+0xf8>)
 80086ba:	462a      	mov	r2, r5
 80086bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086c0:	5d06      	ldrb	r6, [r0, r4]
 80086c2:	f016 0608 	ands.w	r6, r6, #8
 80086c6:	d1f8      	bne.n	80086ba <_strtol_l.constprop.0+0x22>
 80086c8:	2c2d      	cmp	r4, #45	; 0x2d
 80086ca:	d12e      	bne.n	800872a <_strtol_l.constprop.0+0x92>
 80086cc:	2601      	movs	r6, #1
 80086ce:	782c      	ldrb	r4, [r5, #0]
 80086d0:	1c95      	adds	r5, r2, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d057      	beq.n	8008786 <_strtol_l.constprop.0+0xee>
 80086d6:	2b10      	cmp	r3, #16
 80086d8:	d109      	bne.n	80086ee <_strtol_l.constprop.0+0x56>
 80086da:	2c30      	cmp	r4, #48	; 0x30
 80086dc:	d107      	bne.n	80086ee <_strtol_l.constprop.0+0x56>
 80086de:	782a      	ldrb	r2, [r5, #0]
 80086e0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80086e4:	2a58      	cmp	r2, #88	; 0x58
 80086e6:	d149      	bne.n	800877c <_strtol_l.constprop.0+0xe4>
 80086e8:	2310      	movs	r3, #16
 80086ea:	786c      	ldrb	r4, [r5, #1]
 80086ec:	3502      	adds	r5, #2
 80086ee:	2200      	movs	r2, #0
 80086f0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80086f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086f8:	fbbc f9f3 	udiv	r9, ip, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	fb03 ca19 	mls	sl, r3, r9, ip
 8008702:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008706:	2f09      	cmp	r7, #9
 8008708:	d814      	bhi.n	8008734 <_strtol_l.constprop.0+0x9c>
 800870a:	463c      	mov	r4, r7
 800870c:	42a3      	cmp	r3, r4
 800870e:	dd20      	ble.n	8008752 <_strtol_l.constprop.0+0xba>
 8008710:	1c57      	adds	r7, r2, #1
 8008712:	d007      	beq.n	8008724 <_strtol_l.constprop.0+0x8c>
 8008714:	4581      	cmp	r9, r0
 8008716:	d319      	bcc.n	800874c <_strtol_l.constprop.0+0xb4>
 8008718:	d101      	bne.n	800871e <_strtol_l.constprop.0+0x86>
 800871a:	45a2      	cmp	sl, r4
 800871c:	db16      	blt.n	800874c <_strtol_l.constprop.0+0xb4>
 800871e:	2201      	movs	r2, #1
 8008720:	fb00 4003 	mla	r0, r0, r3, r4
 8008724:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008728:	e7eb      	b.n	8008702 <_strtol_l.constprop.0+0x6a>
 800872a:	2c2b      	cmp	r4, #43	; 0x2b
 800872c:	bf04      	itt	eq
 800872e:	782c      	ldrbeq	r4, [r5, #0]
 8008730:	1c95      	addeq	r5, r2, #2
 8008732:	e7ce      	b.n	80086d2 <_strtol_l.constprop.0+0x3a>
 8008734:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008738:	2f19      	cmp	r7, #25
 800873a:	d801      	bhi.n	8008740 <_strtol_l.constprop.0+0xa8>
 800873c:	3c37      	subs	r4, #55	; 0x37
 800873e:	e7e5      	b.n	800870c <_strtol_l.constprop.0+0x74>
 8008740:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008744:	2f19      	cmp	r7, #25
 8008746:	d804      	bhi.n	8008752 <_strtol_l.constprop.0+0xba>
 8008748:	3c57      	subs	r4, #87	; 0x57
 800874a:	e7df      	b.n	800870c <_strtol_l.constprop.0+0x74>
 800874c:	f04f 32ff 	mov.w	r2, #4294967295
 8008750:	e7e8      	b.n	8008724 <_strtol_l.constprop.0+0x8c>
 8008752:	1c53      	adds	r3, r2, #1
 8008754:	d108      	bne.n	8008768 <_strtol_l.constprop.0+0xd0>
 8008756:	2322      	movs	r3, #34	; 0x22
 8008758:	4660      	mov	r0, ip
 800875a:	f8ce 3000 	str.w	r3, [lr]
 800875e:	f1b8 0f00 	cmp.w	r8, #0
 8008762:	d0a6      	beq.n	80086b2 <_strtol_l.constprop.0+0x1a>
 8008764:	1e69      	subs	r1, r5, #1
 8008766:	e006      	b.n	8008776 <_strtol_l.constprop.0+0xde>
 8008768:	b106      	cbz	r6, 800876c <_strtol_l.constprop.0+0xd4>
 800876a:	4240      	negs	r0, r0
 800876c:	f1b8 0f00 	cmp.w	r8, #0
 8008770:	d09f      	beq.n	80086b2 <_strtol_l.constprop.0+0x1a>
 8008772:	2a00      	cmp	r2, #0
 8008774:	d1f6      	bne.n	8008764 <_strtol_l.constprop.0+0xcc>
 8008776:	f8c8 1000 	str.w	r1, [r8]
 800877a:	e79a      	b.n	80086b2 <_strtol_l.constprop.0+0x1a>
 800877c:	2430      	movs	r4, #48	; 0x30
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1b5      	bne.n	80086ee <_strtol_l.constprop.0+0x56>
 8008782:	2308      	movs	r3, #8
 8008784:	e7b3      	b.n	80086ee <_strtol_l.constprop.0+0x56>
 8008786:	2c30      	cmp	r4, #48	; 0x30
 8008788:	d0a9      	beq.n	80086de <_strtol_l.constprop.0+0x46>
 800878a:	230a      	movs	r3, #10
 800878c:	e7af      	b.n	80086ee <_strtol_l.constprop.0+0x56>
 800878e:	bf00      	nop
 8008790:	0800c0f9 	.word	0x0800c0f9

08008794 <strtol>:
 8008794:	4613      	mov	r3, r2
 8008796:	460a      	mov	r2, r1
 8008798:	4601      	mov	r1, r0
 800879a:	4802      	ldr	r0, [pc, #8]	; (80087a4 <strtol+0x10>)
 800879c:	6800      	ldr	r0, [r0, #0]
 800879e:	f7ff bf7b 	b.w	8008698 <_strtol_l.constprop.0>
 80087a2:	bf00      	nop
 80087a4:	200001d0 	.word	0x200001d0

080087a8 <__cvt>:
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087ae:	461f      	mov	r7, r3
 80087b0:	bfbb      	ittet	lt
 80087b2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80087b6:	461f      	movlt	r7, r3
 80087b8:	2300      	movge	r3, #0
 80087ba:	232d      	movlt	r3, #45	; 0x2d
 80087bc:	b088      	sub	sp, #32
 80087be:	4614      	mov	r4, r2
 80087c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80087c4:	7013      	strb	r3, [r2, #0]
 80087c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80087cc:	f023 0820 	bic.w	r8, r3, #32
 80087d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80087d4:	d005      	beq.n	80087e2 <__cvt+0x3a>
 80087d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80087da:	d100      	bne.n	80087de <__cvt+0x36>
 80087dc:	3501      	adds	r5, #1
 80087de:	2302      	movs	r3, #2
 80087e0:	e000      	b.n	80087e4 <__cvt+0x3c>
 80087e2:	2303      	movs	r3, #3
 80087e4:	aa07      	add	r2, sp, #28
 80087e6:	9204      	str	r2, [sp, #16]
 80087e8:	aa06      	add	r2, sp, #24
 80087ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80087ee:	e9cd 3500 	strd	r3, r5, [sp]
 80087f2:	4622      	mov	r2, r4
 80087f4:	463b      	mov	r3, r7
 80087f6:	f000 ff67 	bl	80096c8 <_dtoa_r>
 80087fa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80087fe:	4606      	mov	r6, r0
 8008800:	d102      	bne.n	8008808 <__cvt+0x60>
 8008802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008804:	07db      	lsls	r3, r3, #31
 8008806:	d522      	bpl.n	800884e <__cvt+0xa6>
 8008808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800880c:	eb06 0905 	add.w	r9, r6, r5
 8008810:	d110      	bne.n	8008834 <__cvt+0x8c>
 8008812:	7833      	ldrb	r3, [r6, #0]
 8008814:	2b30      	cmp	r3, #48	; 0x30
 8008816:	d10a      	bne.n	800882e <__cvt+0x86>
 8008818:	2200      	movs	r2, #0
 800881a:	2300      	movs	r3, #0
 800881c:	4620      	mov	r0, r4
 800881e:	4639      	mov	r1, r7
 8008820:	f7f8 f8cc 	bl	80009bc <__aeabi_dcmpeq>
 8008824:	b918      	cbnz	r0, 800882e <__cvt+0x86>
 8008826:	f1c5 0501 	rsb	r5, r5, #1
 800882a:	f8ca 5000 	str.w	r5, [sl]
 800882e:	f8da 3000 	ldr.w	r3, [sl]
 8008832:	4499      	add	r9, r3
 8008834:	2200      	movs	r2, #0
 8008836:	2300      	movs	r3, #0
 8008838:	4620      	mov	r0, r4
 800883a:	4639      	mov	r1, r7
 800883c:	f7f8 f8be 	bl	80009bc <__aeabi_dcmpeq>
 8008840:	b108      	cbz	r0, 8008846 <__cvt+0x9e>
 8008842:	f8cd 901c 	str.w	r9, [sp, #28]
 8008846:	2230      	movs	r2, #48	; 0x30
 8008848:	9b07      	ldr	r3, [sp, #28]
 800884a:	454b      	cmp	r3, r9
 800884c:	d307      	bcc.n	800885e <__cvt+0xb6>
 800884e:	4630      	mov	r0, r6
 8008850:	9b07      	ldr	r3, [sp, #28]
 8008852:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008854:	1b9b      	subs	r3, r3, r6
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	b008      	add	sp, #32
 800885a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800885e:	1c59      	adds	r1, r3, #1
 8008860:	9107      	str	r1, [sp, #28]
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	e7f0      	b.n	8008848 <__cvt+0xa0>

08008866 <__exponent>:
 8008866:	4603      	mov	r3, r0
 8008868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800886a:	2900      	cmp	r1, #0
 800886c:	f803 2b02 	strb.w	r2, [r3], #2
 8008870:	bfb6      	itet	lt
 8008872:	222d      	movlt	r2, #45	; 0x2d
 8008874:	222b      	movge	r2, #43	; 0x2b
 8008876:	4249      	neglt	r1, r1
 8008878:	2909      	cmp	r1, #9
 800887a:	7042      	strb	r2, [r0, #1]
 800887c:	dd2a      	ble.n	80088d4 <__exponent+0x6e>
 800887e:	f10d 0207 	add.w	r2, sp, #7
 8008882:	4617      	mov	r7, r2
 8008884:	260a      	movs	r6, #10
 8008886:	fb91 f5f6 	sdiv	r5, r1, r6
 800888a:	4694      	mov	ip, r2
 800888c:	fb06 1415 	mls	r4, r6, r5, r1
 8008890:	3430      	adds	r4, #48	; 0x30
 8008892:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008896:	460c      	mov	r4, r1
 8008898:	2c63      	cmp	r4, #99	; 0x63
 800889a:	4629      	mov	r1, r5
 800889c:	f102 32ff 	add.w	r2, r2, #4294967295
 80088a0:	dcf1      	bgt.n	8008886 <__exponent+0x20>
 80088a2:	3130      	adds	r1, #48	; 0x30
 80088a4:	f1ac 0402 	sub.w	r4, ip, #2
 80088a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088ac:	4622      	mov	r2, r4
 80088ae:	1c41      	adds	r1, r0, #1
 80088b0:	42ba      	cmp	r2, r7
 80088b2:	d30a      	bcc.n	80088ca <__exponent+0x64>
 80088b4:	f10d 0209 	add.w	r2, sp, #9
 80088b8:	eba2 020c 	sub.w	r2, r2, ip
 80088bc:	42bc      	cmp	r4, r7
 80088be:	bf88      	it	hi
 80088c0:	2200      	movhi	r2, #0
 80088c2:	4413      	add	r3, r2
 80088c4:	1a18      	subs	r0, r3, r0
 80088c6:	b003      	add	sp, #12
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80088ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80088d2:	e7ed      	b.n	80088b0 <__exponent+0x4a>
 80088d4:	2330      	movs	r3, #48	; 0x30
 80088d6:	3130      	adds	r1, #48	; 0x30
 80088d8:	7083      	strb	r3, [r0, #2]
 80088da:	70c1      	strb	r1, [r0, #3]
 80088dc:	1d03      	adds	r3, r0, #4
 80088de:	e7f1      	b.n	80088c4 <__exponent+0x5e>

080088e0 <_printf_float>:
 80088e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e4:	b091      	sub	sp, #68	; 0x44
 80088e6:	460c      	mov	r4, r1
 80088e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80088ec:	4616      	mov	r6, r2
 80088ee:	461f      	mov	r7, r3
 80088f0:	4605      	mov	r5, r0
 80088f2:	f000 fdc7 	bl	8009484 <_localeconv_r>
 80088f6:	6803      	ldr	r3, [r0, #0]
 80088f8:	4618      	mov	r0, r3
 80088fa:	9309      	str	r3, [sp, #36]	; 0x24
 80088fc:	f7f7 fc32 	bl	8000164 <strlen>
 8008900:	2300      	movs	r3, #0
 8008902:	930e      	str	r3, [sp, #56]	; 0x38
 8008904:	f8d8 3000 	ldr.w	r3, [r8]
 8008908:	900a      	str	r0, [sp, #40]	; 0x28
 800890a:	3307      	adds	r3, #7
 800890c:	f023 0307 	bic.w	r3, r3, #7
 8008910:	f103 0208 	add.w	r2, r3, #8
 8008914:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008918:	f8d4 b000 	ldr.w	fp, [r4]
 800891c:	f8c8 2000 	str.w	r2, [r8]
 8008920:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008924:	4652      	mov	r2, sl
 8008926:	4643      	mov	r3, r8
 8008928:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800892c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008930:	930b      	str	r3, [sp, #44]	; 0x2c
 8008932:	f04f 32ff 	mov.w	r2, #4294967295
 8008936:	4650      	mov	r0, sl
 8008938:	4b9c      	ldr	r3, [pc, #624]	; (8008bac <_printf_float+0x2cc>)
 800893a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800893c:	f7f8 f870 	bl	8000a20 <__aeabi_dcmpun>
 8008940:	bb70      	cbnz	r0, 80089a0 <_printf_float+0xc0>
 8008942:	f04f 32ff 	mov.w	r2, #4294967295
 8008946:	4650      	mov	r0, sl
 8008948:	4b98      	ldr	r3, [pc, #608]	; (8008bac <_printf_float+0x2cc>)
 800894a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800894c:	f7f8 f84a 	bl	80009e4 <__aeabi_dcmple>
 8008950:	bb30      	cbnz	r0, 80089a0 <_printf_float+0xc0>
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	4650      	mov	r0, sl
 8008958:	4641      	mov	r1, r8
 800895a:	f7f8 f839 	bl	80009d0 <__aeabi_dcmplt>
 800895e:	b110      	cbz	r0, 8008966 <_printf_float+0x86>
 8008960:	232d      	movs	r3, #45	; 0x2d
 8008962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008966:	4a92      	ldr	r2, [pc, #584]	; (8008bb0 <_printf_float+0x2d0>)
 8008968:	4b92      	ldr	r3, [pc, #584]	; (8008bb4 <_printf_float+0x2d4>)
 800896a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800896e:	bf94      	ite	ls
 8008970:	4690      	movls	r8, r2
 8008972:	4698      	movhi	r8, r3
 8008974:	2303      	movs	r3, #3
 8008976:	f04f 0a00 	mov.w	sl, #0
 800897a:	6123      	str	r3, [r4, #16]
 800897c:	f02b 0304 	bic.w	r3, fp, #4
 8008980:	6023      	str	r3, [r4, #0]
 8008982:	4633      	mov	r3, r6
 8008984:	4621      	mov	r1, r4
 8008986:	4628      	mov	r0, r5
 8008988:	9700      	str	r7, [sp, #0]
 800898a:	aa0f      	add	r2, sp, #60	; 0x3c
 800898c:	f000 f9d6 	bl	8008d3c <_printf_common>
 8008990:	3001      	adds	r0, #1
 8008992:	f040 8090 	bne.w	8008ab6 <_printf_float+0x1d6>
 8008996:	f04f 30ff 	mov.w	r0, #4294967295
 800899a:	b011      	add	sp, #68	; 0x44
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a0:	4652      	mov	r2, sl
 80089a2:	4643      	mov	r3, r8
 80089a4:	4650      	mov	r0, sl
 80089a6:	4641      	mov	r1, r8
 80089a8:	f7f8 f83a 	bl	8000a20 <__aeabi_dcmpun>
 80089ac:	b148      	cbz	r0, 80089c2 <_printf_float+0xe2>
 80089ae:	f1b8 0f00 	cmp.w	r8, #0
 80089b2:	bfb8      	it	lt
 80089b4:	232d      	movlt	r3, #45	; 0x2d
 80089b6:	4a80      	ldr	r2, [pc, #512]	; (8008bb8 <_printf_float+0x2d8>)
 80089b8:	bfb8      	it	lt
 80089ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80089be:	4b7f      	ldr	r3, [pc, #508]	; (8008bbc <_printf_float+0x2dc>)
 80089c0:	e7d3      	b.n	800896a <_printf_float+0x8a>
 80089c2:	6863      	ldr	r3, [r4, #4]
 80089c4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	d142      	bne.n	8008a52 <_printf_float+0x172>
 80089cc:	2306      	movs	r3, #6
 80089ce:	6063      	str	r3, [r4, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	9206      	str	r2, [sp, #24]
 80089d4:	aa0e      	add	r2, sp, #56	; 0x38
 80089d6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80089da:	aa0d      	add	r2, sp, #52	; 0x34
 80089dc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80089e0:	9203      	str	r2, [sp, #12]
 80089e2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80089e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	6863      	ldr	r3, [r4, #4]
 80089ee:	4652      	mov	r2, sl
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	4628      	mov	r0, r5
 80089f4:	4643      	mov	r3, r8
 80089f6:	910b      	str	r1, [sp, #44]	; 0x2c
 80089f8:	f7ff fed6 	bl	80087a8 <__cvt>
 80089fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089fe:	4680      	mov	r8, r0
 8008a00:	2947      	cmp	r1, #71	; 0x47
 8008a02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a04:	d108      	bne.n	8008a18 <_printf_float+0x138>
 8008a06:	1cc8      	adds	r0, r1, #3
 8008a08:	db02      	blt.n	8008a10 <_printf_float+0x130>
 8008a0a:	6863      	ldr	r3, [r4, #4]
 8008a0c:	4299      	cmp	r1, r3
 8008a0e:	dd40      	ble.n	8008a92 <_printf_float+0x1b2>
 8008a10:	f1a9 0902 	sub.w	r9, r9, #2
 8008a14:	fa5f f989 	uxtb.w	r9, r9
 8008a18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a1c:	d81f      	bhi.n	8008a5e <_printf_float+0x17e>
 8008a1e:	464a      	mov	r2, r9
 8008a20:	3901      	subs	r1, #1
 8008a22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a26:	910d      	str	r1, [sp, #52]	; 0x34
 8008a28:	f7ff ff1d 	bl	8008866 <__exponent>
 8008a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a2e:	4682      	mov	sl, r0
 8008a30:	1813      	adds	r3, r2, r0
 8008a32:	2a01      	cmp	r2, #1
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	dc02      	bgt.n	8008a3e <_printf_float+0x15e>
 8008a38:	6822      	ldr	r2, [r4, #0]
 8008a3a:	07d2      	lsls	r2, r2, #31
 8008a3c:	d501      	bpl.n	8008a42 <_printf_float+0x162>
 8008a3e:	3301      	adds	r3, #1
 8008a40:	6123      	str	r3, [r4, #16]
 8008a42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d09b      	beq.n	8008982 <_printf_float+0xa2>
 8008a4a:	232d      	movs	r3, #45	; 0x2d
 8008a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a50:	e797      	b.n	8008982 <_printf_float+0xa2>
 8008a52:	2947      	cmp	r1, #71	; 0x47
 8008a54:	d1bc      	bne.n	80089d0 <_printf_float+0xf0>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1ba      	bne.n	80089d0 <_printf_float+0xf0>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e7b7      	b.n	80089ce <_printf_float+0xee>
 8008a5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008a62:	d118      	bne.n	8008a96 <_printf_float+0x1b6>
 8008a64:	2900      	cmp	r1, #0
 8008a66:	6863      	ldr	r3, [r4, #4]
 8008a68:	dd0b      	ble.n	8008a82 <_printf_float+0x1a2>
 8008a6a:	6121      	str	r1, [r4, #16]
 8008a6c:	b913      	cbnz	r3, 8008a74 <_printf_float+0x194>
 8008a6e:	6822      	ldr	r2, [r4, #0]
 8008a70:	07d0      	lsls	r0, r2, #31
 8008a72:	d502      	bpl.n	8008a7a <_printf_float+0x19a>
 8008a74:	3301      	adds	r3, #1
 8008a76:	440b      	add	r3, r1
 8008a78:	6123      	str	r3, [r4, #16]
 8008a7a:	f04f 0a00 	mov.w	sl, #0
 8008a7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008a80:	e7df      	b.n	8008a42 <_printf_float+0x162>
 8008a82:	b913      	cbnz	r3, 8008a8a <_printf_float+0x1aa>
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	07d2      	lsls	r2, r2, #31
 8008a88:	d501      	bpl.n	8008a8e <_printf_float+0x1ae>
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	e7f4      	b.n	8008a78 <_printf_float+0x198>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e7f2      	b.n	8008a78 <_printf_float+0x198>
 8008a92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a98:	4299      	cmp	r1, r3
 8008a9a:	db05      	blt.n	8008aa8 <_printf_float+0x1c8>
 8008a9c:	6823      	ldr	r3, [r4, #0]
 8008a9e:	6121      	str	r1, [r4, #16]
 8008aa0:	07d8      	lsls	r0, r3, #31
 8008aa2:	d5ea      	bpl.n	8008a7a <_printf_float+0x19a>
 8008aa4:	1c4b      	adds	r3, r1, #1
 8008aa6:	e7e7      	b.n	8008a78 <_printf_float+0x198>
 8008aa8:	2900      	cmp	r1, #0
 8008aaa:	bfcc      	ite	gt
 8008aac:	2201      	movgt	r2, #1
 8008aae:	f1c1 0202 	rsble	r2, r1, #2
 8008ab2:	4413      	add	r3, r2
 8008ab4:	e7e0      	b.n	8008a78 <_printf_float+0x198>
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	055a      	lsls	r2, r3, #21
 8008aba:	d407      	bmi.n	8008acc <_printf_float+0x1ec>
 8008abc:	6923      	ldr	r3, [r4, #16]
 8008abe:	4642      	mov	r2, r8
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	d12b      	bne.n	8008b22 <_printf_float+0x242>
 8008aca:	e764      	b.n	8008996 <_printf_float+0xb6>
 8008acc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ad0:	f240 80dd 	bls.w	8008c8e <_printf_float+0x3ae>
 8008ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2300      	movs	r3, #0
 8008adc:	f7f7 ff6e 	bl	80009bc <__aeabi_dcmpeq>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d033      	beq.n	8008b4c <_printf_float+0x26c>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	4631      	mov	r1, r6
 8008ae8:	4628      	mov	r0, r5
 8008aea:	4a35      	ldr	r2, [pc, #212]	; (8008bc0 <_printf_float+0x2e0>)
 8008aec:	47b8      	blx	r7
 8008aee:	3001      	adds	r0, #1
 8008af0:	f43f af51 	beq.w	8008996 <_printf_float+0xb6>
 8008af4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008af8:	429a      	cmp	r2, r3
 8008afa:	db02      	blt.n	8008b02 <_printf_float+0x222>
 8008afc:	6823      	ldr	r3, [r4, #0]
 8008afe:	07d8      	lsls	r0, r3, #31
 8008b00:	d50f      	bpl.n	8008b22 <_printf_float+0x242>
 8008b02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b06:	4631      	mov	r1, r6
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b8      	blx	r7
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	f43f af42 	beq.w	8008996 <_printf_float+0xb6>
 8008b12:	f04f 0800 	mov.w	r8, #0
 8008b16:	f104 091a 	add.w	r9, r4, #26
 8008b1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	4543      	cmp	r3, r8
 8008b20:	dc09      	bgt.n	8008b36 <_printf_float+0x256>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	079b      	lsls	r3, r3, #30
 8008b26:	f100 8104 	bmi.w	8008d32 <_printf_float+0x452>
 8008b2a:	68e0      	ldr	r0, [r4, #12]
 8008b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b2e:	4298      	cmp	r0, r3
 8008b30:	bfb8      	it	lt
 8008b32:	4618      	movlt	r0, r3
 8008b34:	e731      	b.n	800899a <_printf_float+0xba>
 8008b36:	2301      	movs	r3, #1
 8008b38:	464a      	mov	r2, r9
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	47b8      	blx	r7
 8008b40:	3001      	adds	r0, #1
 8008b42:	f43f af28 	beq.w	8008996 <_printf_float+0xb6>
 8008b46:	f108 0801 	add.w	r8, r8, #1
 8008b4a:	e7e6      	b.n	8008b1a <_printf_float+0x23a>
 8008b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	dc38      	bgt.n	8008bc4 <_printf_float+0x2e4>
 8008b52:	2301      	movs	r3, #1
 8008b54:	4631      	mov	r1, r6
 8008b56:	4628      	mov	r0, r5
 8008b58:	4a19      	ldr	r2, [pc, #100]	; (8008bc0 <_printf_float+0x2e0>)
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f43f af1a 	beq.w	8008996 <_printf_float+0xb6>
 8008b62:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008b66:	4313      	orrs	r3, r2
 8008b68:	d102      	bne.n	8008b70 <_printf_float+0x290>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	07d9      	lsls	r1, r3, #31
 8008b6e:	d5d8      	bpl.n	8008b22 <_printf_float+0x242>
 8008b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f43f af0b 	beq.w	8008996 <_printf_float+0xb6>
 8008b80:	f04f 0900 	mov.w	r9, #0
 8008b84:	f104 0a1a 	add.w	sl, r4, #26
 8008b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b8a:	425b      	negs	r3, r3
 8008b8c:	454b      	cmp	r3, r9
 8008b8e:	dc01      	bgt.n	8008b94 <_printf_float+0x2b4>
 8008b90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b92:	e794      	b.n	8008abe <_printf_float+0x1de>
 8008b94:	2301      	movs	r3, #1
 8008b96:	4652      	mov	r2, sl
 8008b98:	4631      	mov	r1, r6
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	47b8      	blx	r7
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	f43f aef9 	beq.w	8008996 <_printf_float+0xb6>
 8008ba4:	f109 0901 	add.w	r9, r9, #1
 8008ba8:	e7ee      	b.n	8008b88 <_printf_float+0x2a8>
 8008baa:	bf00      	nop
 8008bac:	7fefffff 	.word	0x7fefffff
 8008bb0:	0800c1f9 	.word	0x0800c1f9
 8008bb4:	0800c1fd 	.word	0x0800c1fd
 8008bb8:	0800c201 	.word	0x0800c201
 8008bbc:	0800c205 	.word	0x0800c205
 8008bc0:	0800c209 	.word	0x0800c209
 8008bc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	bfa8      	it	ge
 8008bcc:	461a      	movge	r2, r3
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	4691      	mov	r9, r2
 8008bd2:	dc37      	bgt.n	8008c44 <_printf_float+0x364>
 8008bd4:	f04f 0b00 	mov.w	fp, #0
 8008bd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bdc:	f104 021a 	add.w	r2, r4, #26
 8008be0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008be4:	ebaa 0309 	sub.w	r3, sl, r9
 8008be8:	455b      	cmp	r3, fp
 8008bea:	dc33      	bgt.n	8008c54 <_printf_float+0x374>
 8008bec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	db3b      	blt.n	8008c6c <_printf_float+0x38c>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07da      	lsls	r2, r3, #31
 8008bf8:	d438      	bmi.n	8008c6c <_printf_float+0x38c>
 8008bfa:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008bfe:	eba2 0903 	sub.w	r9, r2, r3
 8008c02:	eba2 020a 	sub.w	r2, r2, sl
 8008c06:	4591      	cmp	r9, r2
 8008c08:	bfa8      	it	ge
 8008c0a:	4691      	movge	r9, r2
 8008c0c:	f1b9 0f00 	cmp.w	r9, #0
 8008c10:	dc34      	bgt.n	8008c7c <_printf_float+0x39c>
 8008c12:	f04f 0800 	mov.w	r8, #0
 8008c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c1a:	f104 0a1a 	add.w	sl, r4, #26
 8008c1e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c22:	1a9b      	subs	r3, r3, r2
 8008c24:	eba3 0309 	sub.w	r3, r3, r9
 8008c28:	4543      	cmp	r3, r8
 8008c2a:	f77f af7a 	ble.w	8008b22 <_printf_float+0x242>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4652      	mov	r2, sl
 8008c32:	4631      	mov	r1, r6
 8008c34:	4628      	mov	r0, r5
 8008c36:	47b8      	blx	r7
 8008c38:	3001      	adds	r0, #1
 8008c3a:	f43f aeac 	beq.w	8008996 <_printf_float+0xb6>
 8008c3e:	f108 0801 	add.w	r8, r8, #1
 8008c42:	e7ec      	b.n	8008c1e <_printf_float+0x33e>
 8008c44:	4613      	mov	r3, r2
 8008c46:	4631      	mov	r1, r6
 8008c48:	4642      	mov	r2, r8
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	47b8      	blx	r7
 8008c4e:	3001      	adds	r0, #1
 8008c50:	d1c0      	bne.n	8008bd4 <_printf_float+0x2f4>
 8008c52:	e6a0      	b.n	8008996 <_printf_float+0xb6>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4631      	mov	r1, r6
 8008c58:	4628      	mov	r0, r5
 8008c5a:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c5c:	47b8      	blx	r7
 8008c5e:	3001      	adds	r0, #1
 8008c60:	f43f ae99 	beq.w	8008996 <_printf_float+0xb6>
 8008c64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c66:	f10b 0b01 	add.w	fp, fp, #1
 8008c6a:	e7b9      	b.n	8008be0 <_printf_float+0x300>
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c72:	4628      	mov	r0, r5
 8008c74:	47b8      	blx	r7
 8008c76:	3001      	adds	r0, #1
 8008c78:	d1bf      	bne.n	8008bfa <_printf_float+0x31a>
 8008c7a:	e68c      	b.n	8008996 <_printf_float+0xb6>
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	eb08 020a 	add.w	r2, r8, sl
 8008c86:	47b8      	blx	r7
 8008c88:	3001      	adds	r0, #1
 8008c8a:	d1c2      	bne.n	8008c12 <_printf_float+0x332>
 8008c8c:	e683      	b.n	8008996 <_printf_float+0xb6>
 8008c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c90:	2a01      	cmp	r2, #1
 8008c92:	dc01      	bgt.n	8008c98 <_printf_float+0x3b8>
 8008c94:	07db      	lsls	r3, r3, #31
 8008c96:	d539      	bpl.n	8008d0c <_printf_float+0x42c>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4642      	mov	r2, r8
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b8      	blx	r7
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	f43f ae77 	beq.w	8008996 <_printf_float+0xb6>
 8008ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f43f ae6f 	beq.w	8008996 <_printf_float+0xb6>
 8008cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008cc4:	f7f7 fe7a 	bl	80009bc <__aeabi_dcmpeq>
 8008cc8:	b9d8      	cbnz	r0, 8008d02 <_printf_float+0x422>
 8008cca:	f109 33ff 	add.w	r3, r9, #4294967295
 8008cce:	f108 0201 	add.w	r2, r8, #1
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b8      	blx	r7
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d10e      	bne.n	8008cfa <_printf_float+0x41a>
 8008cdc:	e65b      	b.n	8008996 <_printf_float+0xb6>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	464a      	mov	r2, r9
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f ae54 	beq.w	8008996 <_printf_float+0xb6>
 8008cee:	f108 0801 	add.w	r8, r8, #1
 8008cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	4543      	cmp	r3, r8
 8008cf8:	dcf1      	bgt.n	8008cde <_printf_float+0x3fe>
 8008cfa:	4653      	mov	r3, sl
 8008cfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d00:	e6de      	b.n	8008ac0 <_printf_float+0x1e0>
 8008d02:	f04f 0800 	mov.w	r8, #0
 8008d06:	f104 091a 	add.w	r9, r4, #26
 8008d0a:	e7f2      	b.n	8008cf2 <_printf_float+0x412>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	4642      	mov	r2, r8
 8008d10:	e7df      	b.n	8008cd2 <_printf_float+0x3f2>
 8008d12:	2301      	movs	r3, #1
 8008d14:	464a      	mov	r2, r9
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae3a 	beq.w	8008996 <_printf_float+0xb6>
 8008d22:	f108 0801 	add.w	r8, r8, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d2a:	1a5b      	subs	r3, r3, r1
 8008d2c:	4543      	cmp	r3, r8
 8008d2e:	dcf0      	bgt.n	8008d12 <_printf_float+0x432>
 8008d30:	e6fb      	b.n	8008b2a <_printf_float+0x24a>
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	f104 0919 	add.w	r9, r4, #25
 8008d3a:	e7f4      	b.n	8008d26 <_printf_float+0x446>

08008d3c <_printf_common>:
 8008d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d40:	4616      	mov	r6, r2
 8008d42:	4699      	mov	r9, r3
 8008d44:	688a      	ldr	r2, [r1, #8]
 8008d46:	690b      	ldr	r3, [r1, #16]
 8008d48:	4607      	mov	r7, r0
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	bfb8      	it	lt
 8008d4e:	4613      	movlt	r3, r2
 8008d50:	6033      	str	r3, [r6, #0]
 8008d52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d56:	460c      	mov	r4, r1
 8008d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d5c:	b10a      	cbz	r2, 8008d62 <_printf_common+0x26>
 8008d5e:	3301      	adds	r3, #1
 8008d60:	6033      	str	r3, [r6, #0]
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	0699      	lsls	r1, r3, #26
 8008d66:	bf42      	ittt	mi
 8008d68:	6833      	ldrmi	r3, [r6, #0]
 8008d6a:	3302      	addmi	r3, #2
 8008d6c:	6033      	strmi	r3, [r6, #0]
 8008d6e:	6825      	ldr	r5, [r4, #0]
 8008d70:	f015 0506 	ands.w	r5, r5, #6
 8008d74:	d106      	bne.n	8008d84 <_printf_common+0x48>
 8008d76:	f104 0a19 	add.w	sl, r4, #25
 8008d7a:	68e3      	ldr	r3, [r4, #12]
 8008d7c:	6832      	ldr	r2, [r6, #0]
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dc2b      	bgt.n	8008ddc <_printf_common+0xa0>
 8008d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d88:	1e13      	subs	r3, r2, #0
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	bf18      	it	ne
 8008d8e:	2301      	movne	r3, #1
 8008d90:	0692      	lsls	r2, r2, #26
 8008d92:	d430      	bmi.n	8008df6 <_printf_common+0xba>
 8008d94:	4649      	mov	r1, r9
 8008d96:	4638      	mov	r0, r7
 8008d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d9c:	47c0      	blx	r8
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d023      	beq.n	8008dea <_printf_common+0xae>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	6922      	ldr	r2, [r4, #16]
 8008da6:	f003 0306 	and.w	r3, r3, #6
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	bf14      	ite	ne
 8008dae:	2500      	movne	r5, #0
 8008db0:	6833      	ldreq	r3, [r6, #0]
 8008db2:	f04f 0600 	mov.w	r6, #0
 8008db6:	bf08      	it	eq
 8008db8:	68e5      	ldreq	r5, [r4, #12]
 8008dba:	f104 041a 	add.w	r4, r4, #26
 8008dbe:	bf08      	it	eq
 8008dc0:	1aed      	subeq	r5, r5, r3
 8008dc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008dc6:	bf08      	it	eq
 8008dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	bfc4      	itt	gt
 8008dd0:	1a9b      	subgt	r3, r3, r2
 8008dd2:	18ed      	addgt	r5, r5, r3
 8008dd4:	42b5      	cmp	r5, r6
 8008dd6:	d11a      	bne.n	8008e0e <_printf_common+0xd2>
 8008dd8:	2000      	movs	r0, #0
 8008dda:	e008      	b.n	8008dee <_printf_common+0xb2>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	4652      	mov	r2, sl
 8008de0:	4649      	mov	r1, r9
 8008de2:	4638      	mov	r0, r7
 8008de4:	47c0      	blx	r8
 8008de6:	3001      	adds	r0, #1
 8008de8:	d103      	bne.n	8008df2 <_printf_common+0xb6>
 8008dea:	f04f 30ff 	mov.w	r0, #4294967295
 8008dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df2:	3501      	adds	r5, #1
 8008df4:	e7c1      	b.n	8008d7a <_printf_common+0x3e>
 8008df6:	2030      	movs	r0, #48	; 0x30
 8008df8:	18e1      	adds	r1, r4, r3
 8008dfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e04:	4422      	add	r2, r4
 8008e06:	3302      	adds	r3, #2
 8008e08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e0c:	e7c2      	b.n	8008d94 <_printf_common+0x58>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4622      	mov	r2, r4
 8008e12:	4649      	mov	r1, r9
 8008e14:	4638      	mov	r0, r7
 8008e16:	47c0      	blx	r8
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d0e6      	beq.n	8008dea <_printf_common+0xae>
 8008e1c:	3601      	adds	r6, #1
 8008e1e:	e7d9      	b.n	8008dd4 <_printf_common+0x98>

08008e20 <_printf_i>:
 8008e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e24:	7e0f      	ldrb	r7, [r1, #24]
 8008e26:	4691      	mov	r9, r2
 8008e28:	2f78      	cmp	r7, #120	; 0x78
 8008e2a:	4680      	mov	r8, r0
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	469a      	mov	sl, r3
 8008e30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e36:	d807      	bhi.n	8008e48 <_printf_i+0x28>
 8008e38:	2f62      	cmp	r7, #98	; 0x62
 8008e3a:	d80a      	bhi.n	8008e52 <_printf_i+0x32>
 8008e3c:	2f00      	cmp	r7, #0
 8008e3e:	f000 80d5 	beq.w	8008fec <_printf_i+0x1cc>
 8008e42:	2f58      	cmp	r7, #88	; 0x58
 8008e44:	f000 80c1 	beq.w	8008fca <_printf_i+0x1aa>
 8008e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008e50:	e03a      	b.n	8008ec8 <_printf_i+0xa8>
 8008e52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e56:	2b15      	cmp	r3, #21
 8008e58:	d8f6      	bhi.n	8008e48 <_printf_i+0x28>
 8008e5a:	a101      	add	r1, pc, #4	; (adr r1, 8008e60 <_printf_i+0x40>)
 8008e5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e60:	08008eb9 	.word	0x08008eb9
 8008e64:	08008ecd 	.word	0x08008ecd
 8008e68:	08008e49 	.word	0x08008e49
 8008e6c:	08008e49 	.word	0x08008e49
 8008e70:	08008e49 	.word	0x08008e49
 8008e74:	08008e49 	.word	0x08008e49
 8008e78:	08008ecd 	.word	0x08008ecd
 8008e7c:	08008e49 	.word	0x08008e49
 8008e80:	08008e49 	.word	0x08008e49
 8008e84:	08008e49 	.word	0x08008e49
 8008e88:	08008e49 	.word	0x08008e49
 8008e8c:	08008fd3 	.word	0x08008fd3
 8008e90:	08008ef9 	.word	0x08008ef9
 8008e94:	08008f8d 	.word	0x08008f8d
 8008e98:	08008e49 	.word	0x08008e49
 8008e9c:	08008e49 	.word	0x08008e49
 8008ea0:	08008ff5 	.word	0x08008ff5
 8008ea4:	08008e49 	.word	0x08008e49
 8008ea8:	08008ef9 	.word	0x08008ef9
 8008eac:	08008e49 	.word	0x08008e49
 8008eb0:	08008e49 	.word	0x08008e49
 8008eb4:	08008f95 	.word	0x08008f95
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	1d1a      	adds	r2, r3, #4
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	602a      	str	r2, [r5, #0]
 8008ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0a0      	b.n	800900e <_printf_i+0x1ee>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	682b      	ldr	r3, [r5, #0]
 8008ed0:	0607      	lsls	r7, r0, #24
 8008ed2:	f103 0104 	add.w	r1, r3, #4
 8008ed6:	6029      	str	r1, [r5, #0]
 8008ed8:	d501      	bpl.n	8008ede <_printf_i+0xbe>
 8008eda:	681e      	ldr	r6, [r3, #0]
 8008edc:	e003      	b.n	8008ee6 <_printf_i+0xc6>
 8008ede:	0646      	lsls	r6, r0, #25
 8008ee0:	d5fb      	bpl.n	8008eda <_printf_i+0xba>
 8008ee2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008ee6:	2e00      	cmp	r6, #0
 8008ee8:	da03      	bge.n	8008ef2 <_printf_i+0xd2>
 8008eea:	232d      	movs	r3, #45	; 0x2d
 8008eec:	4276      	negs	r6, r6
 8008eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef2:	230a      	movs	r3, #10
 8008ef4:	4859      	ldr	r0, [pc, #356]	; (800905c <_printf_i+0x23c>)
 8008ef6:	e012      	b.n	8008f1e <_printf_i+0xfe>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	6820      	ldr	r0, [r4, #0]
 8008efc:	1d19      	adds	r1, r3, #4
 8008efe:	6029      	str	r1, [r5, #0]
 8008f00:	0605      	lsls	r5, r0, #24
 8008f02:	d501      	bpl.n	8008f08 <_printf_i+0xe8>
 8008f04:	681e      	ldr	r6, [r3, #0]
 8008f06:	e002      	b.n	8008f0e <_printf_i+0xee>
 8008f08:	0641      	lsls	r1, r0, #25
 8008f0a:	d5fb      	bpl.n	8008f04 <_printf_i+0xe4>
 8008f0c:	881e      	ldrh	r6, [r3, #0]
 8008f0e:	2f6f      	cmp	r7, #111	; 0x6f
 8008f10:	bf0c      	ite	eq
 8008f12:	2308      	moveq	r3, #8
 8008f14:	230a      	movne	r3, #10
 8008f16:	4851      	ldr	r0, [pc, #324]	; (800905c <_printf_i+0x23c>)
 8008f18:	2100      	movs	r1, #0
 8008f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f1e:	6865      	ldr	r5, [r4, #4]
 8008f20:	2d00      	cmp	r5, #0
 8008f22:	bfa8      	it	ge
 8008f24:	6821      	ldrge	r1, [r4, #0]
 8008f26:	60a5      	str	r5, [r4, #8]
 8008f28:	bfa4      	itt	ge
 8008f2a:	f021 0104 	bicge.w	r1, r1, #4
 8008f2e:	6021      	strge	r1, [r4, #0]
 8008f30:	b90e      	cbnz	r6, 8008f36 <_printf_i+0x116>
 8008f32:	2d00      	cmp	r5, #0
 8008f34:	d04b      	beq.n	8008fce <_printf_i+0x1ae>
 8008f36:	4615      	mov	r5, r2
 8008f38:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f3c:	fb03 6711 	mls	r7, r3, r1, r6
 8008f40:	5dc7      	ldrb	r7, [r0, r7]
 8008f42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f46:	4637      	mov	r7, r6
 8008f48:	42bb      	cmp	r3, r7
 8008f4a:	460e      	mov	r6, r1
 8008f4c:	d9f4      	bls.n	8008f38 <_printf_i+0x118>
 8008f4e:	2b08      	cmp	r3, #8
 8008f50:	d10b      	bne.n	8008f6a <_printf_i+0x14a>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	07de      	lsls	r6, r3, #31
 8008f56:	d508      	bpl.n	8008f6a <_printf_i+0x14a>
 8008f58:	6923      	ldr	r3, [r4, #16]
 8008f5a:	6861      	ldr	r1, [r4, #4]
 8008f5c:	4299      	cmp	r1, r3
 8008f5e:	bfde      	ittt	le
 8008f60:	2330      	movle	r3, #48	; 0x30
 8008f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f6a:	1b52      	subs	r2, r2, r5
 8008f6c:	6122      	str	r2, [r4, #16]
 8008f6e:	464b      	mov	r3, r9
 8008f70:	4621      	mov	r1, r4
 8008f72:	4640      	mov	r0, r8
 8008f74:	f8cd a000 	str.w	sl, [sp]
 8008f78:	aa03      	add	r2, sp, #12
 8008f7a:	f7ff fedf 	bl	8008d3c <_printf_common>
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d14a      	bne.n	8009018 <_printf_i+0x1f8>
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295
 8008f86:	b004      	add	sp, #16
 8008f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8c:	6823      	ldr	r3, [r4, #0]
 8008f8e:	f043 0320 	orr.w	r3, r3, #32
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	2778      	movs	r7, #120	; 0x78
 8008f96:	4832      	ldr	r0, [pc, #200]	; (8009060 <_printf_i+0x240>)
 8008f98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	6829      	ldr	r1, [r5, #0]
 8008fa0:	061f      	lsls	r7, r3, #24
 8008fa2:	f851 6b04 	ldr.w	r6, [r1], #4
 8008fa6:	d402      	bmi.n	8008fae <_printf_i+0x18e>
 8008fa8:	065f      	lsls	r7, r3, #25
 8008faa:	bf48      	it	mi
 8008fac:	b2b6      	uxthmi	r6, r6
 8008fae:	07df      	lsls	r7, r3, #31
 8008fb0:	bf48      	it	mi
 8008fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8008fb6:	6029      	str	r1, [r5, #0]
 8008fb8:	bf48      	it	mi
 8008fba:	6023      	strmi	r3, [r4, #0]
 8008fbc:	b91e      	cbnz	r6, 8008fc6 <_printf_i+0x1a6>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f023 0320 	bic.w	r3, r3, #32
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	e7a6      	b.n	8008f18 <_printf_i+0xf8>
 8008fca:	4824      	ldr	r0, [pc, #144]	; (800905c <_printf_i+0x23c>)
 8008fcc:	e7e4      	b.n	8008f98 <_printf_i+0x178>
 8008fce:	4615      	mov	r5, r2
 8008fd0:	e7bd      	b.n	8008f4e <_printf_i+0x12e>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	6826      	ldr	r6, [r4, #0]
 8008fd6:	1d18      	adds	r0, r3, #4
 8008fd8:	6961      	ldr	r1, [r4, #20]
 8008fda:	6028      	str	r0, [r5, #0]
 8008fdc:	0635      	lsls	r5, r6, #24
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	d501      	bpl.n	8008fe6 <_printf_i+0x1c6>
 8008fe2:	6019      	str	r1, [r3, #0]
 8008fe4:	e002      	b.n	8008fec <_printf_i+0x1cc>
 8008fe6:	0670      	lsls	r0, r6, #25
 8008fe8:	d5fb      	bpl.n	8008fe2 <_printf_i+0x1c2>
 8008fea:	8019      	strh	r1, [r3, #0]
 8008fec:	2300      	movs	r3, #0
 8008fee:	4615      	mov	r5, r2
 8008ff0:	6123      	str	r3, [r4, #16]
 8008ff2:	e7bc      	b.n	8008f6e <_printf_i+0x14e>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	1d1a      	adds	r2, r3, #4
 8008ffa:	602a      	str	r2, [r5, #0]
 8008ffc:	681d      	ldr	r5, [r3, #0]
 8008ffe:	6862      	ldr	r2, [r4, #4]
 8009000:	4628      	mov	r0, r5
 8009002:	f000 fab5 	bl	8009570 <memchr>
 8009006:	b108      	cbz	r0, 800900c <_printf_i+0x1ec>
 8009008:	1b40      	subs	r0, r0, r5
 800900a:	6060      	str	r0, [r4, #4]
 800900c:	6863      	ldr	r3, [r4, #4]
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	2300      	movs	r3, #0
 8009012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009016:	e7aa      	b.n	8008f6e <_printf_i+0x14e>
 8009018:	462a      	mov	r2, r5
 800901a:	4649      	mov	r1, r9
 800901c:	4640      	mov	r0, r8
 800901e:	6923      	ldr	r3, [r4, #16]
 8009020:	47d0      	blx	sl
 8009022:	3001      	adds	r0, #1
 8009024:	d0ad      	beq.n	8008f82 <_printf_i+0x162>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	079b      	lsls	r3, r3, #30
 800902a:	d413      	bmi.n	8009054 <_printf_i+0x234>
 800902c:	68e0      	ldr	r0, [r4, #12]
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	4298      	cmp	r0, r3
 8009032:	bfb8      	it	lt
 8009034:	4618      	movlt	r0, r3
 8009036:	e7a6      	b.n	8008f86 <_printf_i+0x166>
 8009038:	2301      	movs	r3, #1
 800903a:	4632      	mov	r2, r6
 800903c:	4649      	mov	r1, r9
 800903e:	4640      	mov	r0, r8
 8009040:	47d0      	blx	sl
 8009042:	3001      	adds	r0, #1
 8009044:	d09d      	beq.n	8008f82 <_printf_i+0x162>
 8009046:	3501      	adds	r5, #1
 8009048:	68e3      	ldr	r3, [r4, #12]
 800904a:	9903      	ldr	r1, [sp, #12]
 800904c:	1a5b      	subs	r3, r3, r1
 800904e:	42ab      	cmp	r3, r5
 8009050:	dcf2      	bgt.n	8009038 <_printf_i+0x218>
 8009052:	e7eb      	b.n	800902c <_printf_i+0x20c>
 8009054:	2500      	movs	r5, #0
 8009056:	f104 0619 	add.w	r6, r4, #25
 800905a:	e7f5      	b.n	8009048 <_printf_i+0x228>
 800905c:	0800c20b 	.word	0x0800c20b
 8009060:	0800c21c 	.word	0x0800c21c

08009064 <std>:
 8009064:	2300      	movs	r3, #0
 8009066:	b510      	push	{r4, lr}
 8009068:	4604      	mov	r4, r0
 800906a:	e9c0 3300 	strd	r3, r3, [r0]
 800906e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009072:	6083      	str	r3, [r0, #8]
 8009074:	8181      	strh	r1, [r0, #12]
 8009076:	6643      	str	r3, [r0, #100]	; 0x64
 8009078:	81c2      	strh	r2, [r0, #14]
 800907a:	6183      	str	r3, [r0, #24]
 800907c:	4619      	mov	r1, r3
 800907e:	2208      	movs	r2, #8
 8009080:	305c      	adds	r0, #92	; 0x5c
 8009082:	f000 f9e5 	bl	8009450 <memset>
 8009086:	4b05      	ldr	r3, [pc, #20]	; (800909c <std+0x38>)
 8009088:	6224      	str	r4, [r4, #32]
 800908a:	6263      	str	r3, [r4, #36]	; 0x24
 800908c:	4b04      	ldr	r3, [pc, #16]	; (80090a0 <std+0x3c>)
 800908e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <std+0x40>)
 8009092:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009094:	4b04      	ldr	r3, [pc, #16]	; (80090a8 <std+0x44>)
 8009096:	6323      	str	r3, [r4, #48]	; 0x30
 8009098:	bd10      	pop	{r4, pc}
 800909a:	bf00      	nop
 800909c:	080092a1 	.word	0x080092a1
 80090a0:	080092c3 	.word	0x080092c3
 80090a4:	080092fb 	.word	0x080092fb
 80090a8:	0800931f 	.word	0x0800931f

080090ac <stdio_exit_handler>:
 80090ac:	4a02      	ldr	r2, [pc, #8]	; (80090b8 <stdio_exit_handler+0xc>)
 80090ae:	4903      	ldr	r1, [pc, #12]	; (80090bc <stdio_exit_handler+0x10>)
 80090b0:	4803      	ldr	r0, [pc, #12]	; (80090c0 <stdio_exit_handler+0x14>)
 80090b2:	f000 b869 	b.w	8009188 <_fwalk_sglue>
 80090b6:	bf00      	nop
 80090b8:	2000000c 	.word	0x2000000c
 80090bc:	0800b839 	.word	0x0800b839
 80090c0:	20000184 	.word	0x20000184

080090c4 <cleanup_stdio>:
 80090c4:	6841      	ldr	r1, [r0, #4]
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <cleanup_stdio+0x34>)
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4299      	cmp	r1, r3
 80090cc:	4604      	mov	r4, r0
 80090ce:	d001      	beq.n	80090d4 <cleanup_stdio+0x10>
 80090d0:	f002 fbb2 	bl	800b838 <_fflush_r>
 80090d4:	68a1      	ldr	r1, [r4, #8]
 80090d6:	4b09      	ldr	r3, [pc, #36]	; (80090fc <cleanup_stdio+0x38>)
 80090d8:	4299      	cmp	r1, r3
 80090da:	d002      	beq.n	80090e2 <cleanup_stdio+0x1e>
 80090dc:	4620      	mov	r0, r4
 80090de:	f002 fbab 	bl	800b838 <_fflush_r>
 80090e2:	68e1      	ldr	r1, [r4, #12]
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <cleanup_stdio+0x3c>)
 80090e6:	4299      	cmp	r1, r3
 80090e8:	d004      	beq.n	80090f4 <cleanup_stdio+0x30>
 80090ea:	4620      	mov	r0, r4
 80090ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090f0:	f002 bba2 	b.w	800b838 <_fflush_r>
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	bf00      	nop
 80090f8:	200004c0 	.word	0x200004c0
 80090fc:	20000528 	.word	0x20000528
 8009100:	20000590 	.word	0x20000590

08009104 <global_stdio_init.part.0>:
 8009104:	b510      	push	{r4, lr}
 8009106:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <global_stdio_init.part.0+0x30>)
 8009108:	4c0b      	ldr	r4, [pc, #44]	; (8009138 <global_stdio_init.part.0+0x34>)
 800910a:	4a0c      	ldr	r2, [pc, #48]	; (800913c <global_stdio_init.part.0+0x38>)
 800910c:	4620      	mov	r0, r4
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	2104      	movs	r1, #4
 8009112:	2200      	movs	r2, #0
 8009114:	f7ff ffa6 	bl	8009064 <std>
 8009118:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800911c:	2201      	movs	r2, #1
 800911e:	2109      	movs	r1, #9
 8009120:	f7ff ffa0 	bl	8009064 <std>
 8009124:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009128:	2202      	movs	r2, #2
 800912a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800912e:	2112      	movs	r1, #18
 8009130:	f7ff bf98 	b.w	8009064 <std>
 8009134:	200005f8 	.word	0x200005f8
 8009138:	200004c0 	.word	0x200004c0
 800913c:	080090ad 	.word	0x080090ad

08009140 <__sfp_lock_acquire>:
 8009140:	4801      	ldr	r0, [pc, #4]	; (8009148 <__sfp_lock_acquire+0x8>)
 8009142:	f000 ba13 	b.w	800956c <__retarget_lock_acquire_recursive>
 8009146:	bf00      	nop
 8009148:	20000601 	.word	0x20000601

0800914c <__sfp_lock_release>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__sfp_lock_release+0x8>)
 800914e:	f000 ba0e 	b.w	800956e <__retarget_lock_release_recursive>
 8009152:	bf00      	nop
 8009154:	20000601 	.word	0x20000601

08009158 <__sinit>:
 8009158:	b510      	push	{r4, lr}
 800915a:	4604      	mov	r4, r0
 800915c:	f7ff fff0 	bl	8009140 <__sfp_lock_acquire>
 8009160:	6a23      	ldr	r3, [r4, #32]
 8009162:	b11b      	cbz	r3, 800916c <__sinit+0x14>
 8009164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009168:	f7ff bff0 	b.w	800914c <__sfp_lock_release>
 800916c:	4b04      	ldr	r3, [pc, #16]	; (8009180 <__sinit+0x28>)
 800916e:	6223      	str	r3, [r4, #32]
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <__sinit+0x2c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1f5      	bne.n	8009164 <__sinit+0xc>
 8009178:	f7ff ffc4 	bl	8009104 <global_stdio_init.part.0>
 800917c:	e7f2      	b.n	8009164 <__sinit+0xc>
 800917e:	bf00      	nop
 8009180:	080090c5 	.word	0x080090c5
 8009184:	200005f8 	.word	0x200005f8

08009188 <_fwalk_sglue>:
 8009188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800918c:	4607      	mov	r7, r0
 800918e:	4688      	mov	r8, r1
 8009190:	4614      	mov	r4, r2
 8009192:	2600      	movs	r6, #0
 8009194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009198:	f1b9 0901 	subs.w	r9, r9, #1
 800919c:	d505      	bpl.n	80091aa <_fwalk_sglue+0x22>
 800919e:	6824      	ldr	r4, [r4, #0]
 80091a0:	2c00      	cmp	r4, #0
 80091a2:	d1f7      	bne.n	8009194 <_fwalk_sglue+0xc>
 80091a4:	4630      	mov	r0, r6
 80091a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091aa:	89ab      	ldrh	r3, [r5, #12]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d907      	bls.n	80091c0 <_fwalk_sglue+0x38>
 80091b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091b4:	3301      	adds	r3, #1
 80091b6:	d003      	beq.n	80091c0 <_fwalk_sglue+0x38>
 80091b8:	4629      	mov	r1, r5
 80091ba:	4638      	mov	r0, r7
 80091bc:	47c0      	blx	r8
 80091be:	4306      	orrs	r6, r0
 80091c0:	3568      	adds	r5, #104	; 0x68
 80091c2:	e7e9      	b.n	8009198 <_fwalk_sglue+0x10>

080091c4 <iprintf>:
 80091c4:	b40f      	push	{r0, r1, r2, r3}
 80091c6:	b507      	push	{r0, r1, r2, lr}
 80091c8:	4906      	ldr	r1, [pc, #24]	; (80091e4 <iprintf+0x20>)
 80091ca:	ab04      	add	r3, sp, #16
 80091cc:	6808      	ldr	r0, [r1, #0]
 80091ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d2:	6881      	ldr	r1, [r0, #8]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	f002 f993 	bl	800b500 <_vfiprintf_r>
 80091da:	b003      	add	sp, #12
 80091dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80091e0:	b004      	add	sp, #16
 80091e2:	4770      	bx	lr
 80091e4:	200001d0 	.word	0x200001d0

080091e8 <_puts_r>:
 80091e8:	6a03      	ldr	r3, [r0, #32]
 80091ea:	b570      	push	{r4, r5, r6, lr}
 80091ec:	4605      	mov	r5, r0
 80091ee:	460e      	mov	r6, r1
 80091f0:	6884      	ldr	r4, [r0, #8]
 80091f2:	b90b      	cbnz	r3, 80091f8 <_puts_r+0x10>
 80091f4:	f7ff ffb0 	bl	8009158 <__sinit>
 80091f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091fa:	07db      	lsls	r3, r3, #31
 80091fc:	d405      	bmi.n	800920a <_puts_r+0x22>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	0598      	lsls	r0, r3, #22
 8009202:	d402      	bmi.n	800920a <_puts_r+0x22>
 8009204:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009206:	f000 f9b1 	bl	800956c <__retarget_lock_acquire_recursive>
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	0719      	lsls	r1, r3, #28
 800920e:	d513      	bpl.n	8009238 <_puts_r+0x50>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	b18b      	cbz	r3, 8009238 <_puts_r+0x50>
 8009214:	3e01      	subs	r6, #1
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800921c:	3b01      	subs	r3, #1
 800921e:	60a3      	str	r3, [r4, #8]
 8009220:	b9e9      	cbnz	r1, 800925e <_puts_r+0x76>
 8009222:	2b00      	cmp	r3, #0
 8009224:	da2e      	bge.n	8009284 <_puts_r+0x9c>
 8009226:	4622      	mov	r2, r4
 8009228:	210a      	movs	r1, #10
 800922a:	4628      	mov	r0, r5
 800922c:	f000 f87b 	bl	8009326 <__swbuf_r>
 8009230:	3001      	adds	r0, #1
 8009232:	d007      	beq.n	8009244 <_puts_r+0x5c>
 8009234:	250a      	movs	r5, #10
 8009236:	e007      	b.n	8009248 <_puts_r+0x60>
 8009238:	4621      	mov	r1, r4
 800923a:	4628      	mov	r0, r5
 800923c:	f000 f8b0 	bl	80093a0 <__swsetup_r>
 8009240:	2800      	cmp	r0, #0
 8009242:	d0e7      	beq.n	8009214 <_puts_r+0x2c>
 8009244:	f04f 35ff 	mov.w	r5, #4294967295
 8009248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800924a:	07da      	lsls	r2, r3, #31
 800924c:	d405      	bmi.n	800925a <_puts_r+0x72>
 800924e:	89a3      	ldrh	r3, [r4, #12]
 8009250:	059b      	lsls	r3, r3, #22
 8009252:	d402      	bmi.n	800925a <_puts_r+0x72>
 8009254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009256:	f000 f98a 	bl	800956e <__retarget_lock_release_recursive>
 800925a:	4628      	mov	r0, r5
 800925c:	bd70      	pop	{r4, r5, r6, pc}
 800925e:	2b00      	cmp	r3, #0
 8009260:	da04      	bge.n	800926c <_puts_r+0x84>
 8009262:	69a2      	ldr	r2, [r4, #24]
 8009264:	429a      	cmp	r2, r3
 8009266:	dc06      	bgt.n	8009276 <_puts_r+0x8e>
 8009268:	290a      	cmp	r1, #10
 800926a:	d004      	beq.n	8009276 <_puts_r+0x8e>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	6022      	str	r2, [r4, #0]
 8009272:	7019      	strb	r1, [r3, #0]
 8009274:	e7cf      	b.n	8009216 <_puts_r+0x2e>
 8009276:	4622      	mov	r2, r4
 8009278:	4628      	mov	r0, r5
 800927a:	f000 f854 	bl	8009326 <__swbuf_r>
 800927e:	3001      	adds	r0, #1
 8009280:	d1c9      	bne.n	8009216 <_puts_r+0x2e>
 8009282:	e7df      	b.n	8009244 <_puts_r+0x5c>
 8009284:	250a      	movs	r5, #10
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	1c5a      	adds	r2, r3, #1
 800928a:	6022      	str	r2, [r4, #0]
 800928c:	701d      	strb	r5, [r3, #0]
 800928e:	e7db      	b.n	8009248 <_puts_r+0x60>

08009290 <puts>:
 8009290:	4b02      	ldr	r3, [pc, #8]	; (800929c <puts+0xc>)
 8009292:	4601      	mov	r1, r0
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	f7ff bfa7 	b.w	80091e8 <_puts_r>
 800929a:	bf00      	nop
 800929c:	200001d0 	.word	0x200001d0

080092a0 <__sread>:
 80092a0:	b510      	push	{r4, lr}
 80092a2:	460c      	mov	r4, r1
 80092a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a8:	f000 f912 	bl	80094d0 <_read_r>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	bfab      	itete	ge
 80092b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092b2:	89a3      	ldrhlt	r3, [r4, #12]
 80092b4:	181b      	addge	r3, r3, r0
 80092b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092ba:	bfac      	ite	ge
 80092bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80092be:	81a3      	strhlt	r3, [r4, #12]
 80092c0:	bd10      	pop	{r4, pc}

080092c2 <__swrite>:
 80092c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c6:	461f      	mov	r7, r3
 80092c8:	898b      	ldrh	r3, [r1, #12]
 80092ca:	4605      	mov	r5, r0
 80092cc:	05db      	lsls	r3, r3, #23
 80092ce:	460c      	mov	r4, r1
 80092d0:	4616      	mov	r6, r2
 80092d2:	d505      	bpl.n	80092e0 <__swrite+0x1e>
 80092d4:	2302      	movs	r3, #2
 80092d6:	2200      	movs	r2, #0
 80092d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092dc:	f000 f8e6 	bl	80094ac <_lseek_r>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	4632      	mov	r2, r6
 80092e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092e8:	81a3      	strh	r3, [r4, #12]
 80092ea:	4628      	mov	r0, r5
 80092ec:	463b      	mov	r3, r7
 80092ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f6:	f000 b8fd 	b.w	80094f4 <_write_r>

080092fa <__sseek>:
 80092fa:	b510      	push	{r4, lr}
 80092fc:	460c      	mov	r4, r1
 80092fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009302:	f000 f8d3 	bl	80094ac <_lseek_r>
 8009306:	1c43      	adds	r3, r0, #1
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	bf15      	itete	ne
 800930c:	6560      	strne	r0, [r4, #84]	; 0x54
 800930e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009316:	81a3      	strheq	r3, [r4, #12]
 8009318:	bf18      	it	ne
 800931a:	81a3      	strhne	r3, [r4, #12]
 800931c:	bd10      	pop	{r4, pc}

0800931e <__sclose>:
 800931e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009322:	f000 b8b3 	b.w	800948c <_close_r>

08009326 <__swbuf_r>:
 8009326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009328:	460e      	mov	r6, r1
 800932a:	4614      	mov	r4, r2
 800932c:	4605      	mov	r5, r0
 800932e:	b118      	cbz	r0, 8009338 <__swbuf_r+0x12>
 8009330:	6a03      	ldr	r3, [r0, #32]
 8009332:	b90b      	cbnz	r3, 8009338 <__swbuf_r+0x12>
 8009334:	f7ff ff10 	bl	8009158 <__sinit>
 8009338:	69a3      	ldr	r3, [r4, #24]
 800933a:	60a3      	str	r3, [r4, #8]
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	071a      	lsls	r2, r3, #28
 8009340:	d525      	bpl.n	800938e <__swbuf_r+0x68>
 8009342:	6923      	ldr	r3, [r4, #16]
 8009344:	b31b      	cbz	r3, 800938e <__swbuf_r+0x68>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	6922      	ldr	r2, [r4, #16]
 800934a:	b2f6      	uxtb	r6, r6
 800934c:	1a98      	subs	r0, r3, r2
 800934e:	6963      	ldr	r3, [r4, #20]
 8009350:	4637      	mov	r7, r6
 8009352:	4283      	cmp	r3, r0
 8009354:	dc04      	bgt.n	8009360 <__swbuf_r+0x3a>
 8009356:	4621      	mov	r1, r4
 8009358:	4628      	mov	r0, r5
 800935a:	f002 fa6d 	bl	800b838 <_fflush_r>
 800935e:	b9e0      	cbnz	r0, 800939a <__swbuf_r+0x74>
 8009360:	68a3      	ldr	r3, [r4, #8]
 8009362:	3b01      	subs	r3, #1
 8009364:	60a3      	str	r3, [r4, #8]
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	6022      	str	r2, [r4, #0]
 800936c:	701e      	strb	r6, [r3, #0]
 800936e:	6962      	ldr	r2, [r4, #20]
 8009370:	1c43      	adds	r3, r0, #1
 8009372:	429a      	cmp	r2, r3
 8009374:	d004      	beq.n	8009380 <__swbuf_r+0x5a>
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	07db      	lsls	r3, r3, #31
 800937a:	d506      	bpl.n	800938a <__swbuf_r+0x64>
 800937c:	2e0a      	cmp	r6, #10
 800937e:	d104      	bne.n	800938a <__swbuf_r+0x64>
 8009380:	4621      	mov	r1, r4
 8009382:	4628      	mov	r0, r5
 8009384:	f002 fa58 	bl	800b838 <_fflush_r>
 8009388:	b938      	cbnz	r0, 800939a <__swbuf_r+0x74>
 800938a:	4638      	mov	r0, r7
 800938c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938e:	4621      	mov	r1, r4
 8009390:	4628      	mov	r0, r5
 8009392:	f000 f805 	bl	80093a0 <__swsetup_r>
 8009396:	2800      	cmp	r0, #0
 8009398:	d0d5      	beq.n	8009346 <__swbuf_r+0x20>
 800939a:	f04f 37ff 	mov.w	r7, #4294967295
 800939e:	e7f4      	b.n	800938a <__swbuf_r+0x64>

080093a0 <__swsetup_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4b2a      	ldr	r3, [pc, #168]	; (800944c <__swsetup_r+0xac>)
 80093a4:	4605      	mov	r5, r0
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	460c      	mov	r4, r1
 80093aa:	b118      	cbz	r0, 80093b4 <__swsetup_r+0x14>
 80093ac:	6a03      	ldr	r3, [r0, #32]
 80093ae:	b90b      	cbnz	r3, 80093b4 <__swsetup_r+0x14>
 80093b0:	f7ff fed2 	bl	8009158 <__sinit>
 80093b4:	89a3      	ldrh	r3, [r4, #12]
 80093b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093ba:	0718      	lsls	r0, r3, #28
 80093bc:	d422      	bmi.n	8009404 <__swsetup_r+0x64>
 80093be:	06d9      	lsls	r1, r3, #27
 80093c0:	d407      	bmi.n	80093d2 <__swsetup_r+0x32>
 80093c2:	2309      	movs	r3, #9
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	81a3      	strh	r3, [r4, #12]
 80093d0:	e034      	b.n	800943c <__swsetup_r+0x9c>
 80093d2:	0758      	lsls	r0, r3, #29
 80093d4:	d512      	bpl.n	80093fc <__swsetup_r+0x5c>
 80093d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093d8:	b141      	cbz	r1, 80093ec <__swsetup_r+0x4c>
 80093da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093de:	4299      	cmp	r1, r3
 80093e0:	d002      	beq.n	80093e8 <__swsetup_r+0x48>
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 ff54 	bl	800a290 <_free_r>
 80093e8:	2300      	movs	r3, #0
 80093ea:	6363      	str	r3, [r4, #52]	; 0x34
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	2300      	movs	r3, #0
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	89a3      	ldrh	r3, [r4, #12]
 80093fe:	f043 0308 	orr.w	r3, r3, #8
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	6923      	ldr	r3, [r4, #16]
 8009406:	b94b      	cbnz	r3, 800941c <__swsetup_r+0x7c>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800940e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009412:	d003      	beq.n	800941c <__swsetup_r+0x7c>
 8009414:	4621      	mov	r1, r4
 8009416:	4628      	mov	r0, r5
 8009418:	f002 fa5b 	bl	800b8d2 <__smakebuf_r>
 800941c:	89a0      	ldrh	r0, [r4, #12]
 800941e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009422:	f010 0301 	ands.w	r3, r0, #1
 8009426:	d00a      	beq.n	800943e <__swsetup_r+0x9e>
 8009428:	2300      	movs	r3, #0
 800942a:	60a3      	str	r3, [r4, #8]
 800942c:	6963      	ldr	r3, [r4, #20]
 800942e:	425b      	negs	r3, r3
 8009430:	61a3      	str	r3, [r4, #24]
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	b943      	cbnz	r3, 8009448 <__swsetup_r+0xa8>
 8009436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800943a:	d1c4      	bne.n	80093c6 <__swsetup_r+0x26>
 800943c:	bd38      	pop	{r3, r4, r5, pc}
 800943e:	0781      	lsls	r1, r0, #30
 8009440:	bf58      	it	pl
 8009442:	6963      	ldrpl	r3, [r4, #20]
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	e7f4      	b.n	8009432 <__swsetup_r+0x92>
 8009448:	2000      	movs	r0, #0
 800944a:	e7f7      	b.n	800943c <__swsetup_r+0x9c>
 800944c:	200001d0 	.word	0x200001d0

08009450 <memset>:
 8009450:	4603      	mov	r3, r0
 8009452:	4402      	add	r2, r0
 8009454:	4293      	cmp	r3, r2
 8009456:	d100      	bne.n	800945a <memset+0xa>
 8009458:	4770      	bx	lr
 800945a:	f803 1b01 	strb.w	r1, [r3], #1
 800945e:	e7f9      	b.n	8009454 <memset+0x4>

08009460 <strncmp>:
 8009460:	b510      	push	{r4, lr}
 8009462:	b16a      	cbz	r2, 8009480 <strncmp+0x20>
 8009464:	3901      	subs	r1, #1
 8009466:	1884      	adds	r4, r0, r2
 8009468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800946c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009470:	429a      	cmp	r2, r3
 8009472:	d103      	bne.n	800947c <strncmp+0x1c>
 8009474:	42a0      	cmp	r0, r4
 8009476:	d001      	beq.n	800947c <strncmp+0x1c>
 8009478:	2a00      	cmp	r2, #0
 800947a:	d1f5      	bne.n	8009468 <strncmp+0x8>
 800947c:	1ad0      	subs	r0, r2, r3
 800947e:	bd10      	pop	{r4, pc}
 8009480:	4610      	mov	r0, r2
 8009482:	e7fc      	b.n	800947e <strncmp+0x1e>

08009484 <_localeconv_r>:
 8009484:	4800      	ldr	r0, [pc, #0]	; (8009488 <_localeconv_r+0x4>)
 8009486:	4770      	bx	lr
 8009488:	20000108 	.word	0x20000108

0800948c <_close_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	2300      	movs	r3, #0
 8009490:	4d05      	ldr	r5, [pc, #20]	; (80094a8 <_close_r+0x1c>)
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f9 fbfa 	bl	8002c90 <_close>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_close_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_close_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	200005fc 	.word	0x200005fc

080094ac <_lseek_r>:
 80094ac:	b538      	push	{r3, r4, r5, lr}
 80094ae:	4604      	mov	r4, r0
 80094b0:	4608      	mov	r0, r1
 80094b2:	4611      	mov	r1, r2
 80094b4:	2200      	movs	r2, #0
 80094b6:	4d05      	ldr	r5, [pc, #20]	; (80094cc <_lseek_r+0x20>)
 80094b8:	602a      	str	r2, [r5, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	f7f9 fc0c 	bl	8002cd8 <_lseek>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d102      	bne.n	80094ca <_lseek_r+0x1e>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	b103      	cbz	r3, 80094ca <_lseek_r+0x1e>
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	bd38      	pop	{r3, r4, r5, pc}
 80094cc:	200005fc 	.word	0x200005fc

080094d0 <_read_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	2200      	movs	r2, #0
 80094da:	4d05      	ldr	r5, [pc, #20]	; (80094f0 <_read_r+0x20>)
 80094dc:	602a      	str	r2, [r5, #0]
 80094de:	461a      	mov	r2, r3
 80094e0:	f7f9 fb9d 	bl	8002c1e <_read>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_read_r+0x1e>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_read_r+0x1e>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	200005fc 	.word	0x200005fc

080094f4 <_write_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4604      	mov	r4, r0
 80094f8:	4608      	mov	r0, r1
 80094fa:	4611      	mov	r1, r2
 80094fc:	2200      	movs	r2, #0
 80094fe:	4d05      	ldr	r5, [pc, #20]	; (8009514 <_write_r+0x20>)
 8009500:	602a      	str	r2, [r5, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	f7f9 fba8 	bl	8002c58 <_write>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d102      	bne.n	8009512 <_write_r+0x1e>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	b103      	cbz	r3, 8009512 <_write_r+0x1e>
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	200005fc 	.word	0x200005fc

08009518 <__errno>:
 8009518:	4b01      	ldr	r3, [pc, #4]	; (8009520 <__errno+0x8>)
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	200001d0 	.word	0x200001d0

08009524 <__libc_init_array>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	2600      	movs	r6, #0
 8009528:	4d0c      	ldr	r5, [pc, #48]	; (800955c <__libc_init_array+0x38>)
 800952a:	4c0d      	ldr	r4, [pc, #52]	; (8009560 <__libc_init_array+0x3c>)
 800952c:	1b64      	subs	r4, r4, r5
 800952e:	10a4      	asrs	r4, r4, #2
 8009530:	42a6      	cmp	r6, r4
 8009532:	d109      	bne.n	8009548 <__libc_init_array+0x24>
 8009534:	f002 fd2e 	bl	800bf94 <_init>
 8009538:	2600      	movs	r6, #0
 800953a:	4d0a      	ldr	r5, [pc, #40]	; (8009564 <__libc_init_array+0x40>)
 800953c:	4c0a      	ldr	r4, [pc, #40]	; (8009568 <__libc_init_array+0x44>)
 800953e:	1b64      	subs	r4, r4, r5
 8009540:	10a4      	asrs	r4, r4, #2
 8009542:	42a6      	cmp	r6, r4
 8009544:	d105      	bne.n	8009552 <__libc_init_array+0x2e>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	f855 3b04 	ldr.w	r3, [r5], #4
 800954c:	4798      	blx	r3
 800954e:	3601      	adds	r6, #1
 8009550:	e7ee      	b.n	8009530 <__libc_init_array+0xc>
 8009552:	f855 3b04 	ldr.w	r3, [r5], #4
 8009556:	4798      	blx	r3
 8009558:	3601      	adds	r6, #1
 800955a:	e7f2      	b.n	8009542 <__libc_init_array+0x1e>
 800955c:	0800c540 	.word	0x0800c540
 8009560:	0800c540 	.word	0x0800c540
 8009564:	0800c540 	.word	0x0800c540
 8009568:	0800c544 	.word	0x0800c544

0800956c <__retarget_lock_acquire_recursive>:
 800956c:	4770      	bx	lr

0800956e <__retarget_lock_release_recursive>:
 800956e:	4770      	bx	lr

08009570 <memchr>:
 8009570:	4603      	mov	r3, r0
 8009572:	b510      	push	{r4, lr}
 8009574:	b2c9      	uxtb	r1, r1
 8009576:	4402      	add	r2, r0
 8009578:	4293      	cmp	r3, r2
 800957a:	4618      	mov	r0, r3
 800957c:	d101      	bne.n	8009582 <memchr+0x12>
 800957e:	2000      	movs	r0, #0
 8009580:	e003      	b.n	800958a <memchr+0x1a>
 8009582:	7804      	ldrb	r4, [r0, #0]
 8009584:	3301      	adds	r3, #1
 8009586:	428c      	cmp	r4, r1
 8009588:	d1f6      	bne.n	8009578 <memchr+0x8>
 800958a:	bd10      	pop	{r4, pc}

0800958c <memcpy>:
 800958c:	440a      	add	r2, r1
 800958e:	4291      	cmp	r1, r2
 8009590:	f100 33ff 	add.w	r3, r0, #4294967295
 8009594:	d100      	bne.n	8009598 <memcpy+0xc>
 8009596:	4770      	bx	lr
 8009598:	b510      	push	{r4, lr}
 800959a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800959e:	4291      	cmp	r1, r2
 80095a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a4:	d1f9      	bne.n	800959a <memcpy+0xe>
 80095a6:	bd10      	pop	{r4, pc}

080095a8 <nan>:
 80095a8:	2000      	movs	r0, #0
 80095aa:	4901      	ldr	r1, [pc, #4]	; (80095b0 <nan+0x8>)
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	7ff80000 	.word	0x7ff80000

080095b4 <quorem>:
 80095b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	6903      	ldr	r3, [r0, #16]
 80095ba:	690c      	ldr	r4, [r1, #16]
 80095bc:	4607      	mov	r7, r0
 80095be:	42a3      	cmp	r3, r4
 80095c0:	db7f      	blt.n	80096c2 <quorem+0x10e>
 80095c2:	3c01      	subs	r4, #1
 80095c4:	f100 0514 	add.w	r5, r0, #20
 80095c8:	f101 0814 	add.w	r8, r1, #20
 80095cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80095d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095da:	3301      	adds	r3, #1
 80095dc:	429a      	cmp	r2, r3
 80095de:	fbb2 f6f3 	udiv	r6, r2, r3
 80095e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80095e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80095ea:	d331      	bcc.n	8009650 <quorem+0x9c>
 80095ec:	f04f 0e00 	mov.w	lr, #0
 80095f0:	4640      	mov	r0, r8
 80095f2:	46ac      	mov	ip, r5
 80095f4:	46f2      	mov	sl, lr
 80095f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80095fa:	b293      	uxth	r3, r2
 80095fc:	fb06 e303 	mla	r3, r6, r3, lr
 8009600:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009604:	0c1a      	lsrs	r2, r3, #16
 8009606:	b29b      	uxth	r3, r3
 8009608:	fb06 220e 	mla	r2, r6, lr, r2
 800960c:	ebaa 0303 	sub.w	r3, sl, r3
 8009610:	f8dc a000 	ldr.w	sl, [ip]
 8009614:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009618:	fa1f fa8a 	uxth.w	sl, sl
 800961c:	4453      	add	r3, sl
 800961e:	f8dc a000 	ldr.w	sl, [ip]
 8009622:	b292      	uxth	r2, r2
 8009624:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800962c:	b29b      	uxth	r3, r3
 800962e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009632:	4581      	cmp	r9, r0
 8009634:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009638:	f84c 3b04 	str.w	r3, [ip], #4
 800963c:	d2db      	bcs.n	80095f6 <quorem+0x42>
 800963e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009642:	b92b      	cbnz	r3, 8009650 <quorem+0x9c>
 8009644:	9b01      	ldr	r3, [sp, #4]
 8009646:	3b04      	subs	r3, #4
 8009648:	429d      	cmp	r5, r3
 800964a:	461a      	mov	r2, r3
 800964c:	d32d      	bcc.n	80096aa <quorem+0xf6>
 800964e:	613c      	str	r4, [r7, #16]
 8009650:	4638      	mov	r0, r7
 8009652:	f001 fd49 	bl	800b0e8 <__mcmp>
 8009656:	2800      	cmp	r0, #0
 8009658:	db23      	blt.n	80096a2 <quorem+0xee>
 800965a:	4629      	mov	r1, r5
 800965c:	2000      	movs	r0, #0
 800965e:	3601      	adds	r6, #1
 8009660:	f858 2b04 	ldr.w	r2, [r8], #4
 8009664:	f8d1 c000 	ldr.w	ip, [r1]
 8009668:	b293      	uxth	r3, r2
 800966a:	1ac3      	subs	r3, r0, r3
 800966c:	0c12      	lsrs	r2, r2, #16
 800966e:	fa1f f08c 	uxth.w	r0, ip
 8009672:	4403      	add	r3, r0
 8009674:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800967c:	b29b      	uxth	r3, r3
 800967e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009682:	45c1      	cmp	r9, r8
 8009684:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009688:	f841 3b04 	str.w	r3, [r1], #4
 800968c:	d2e8      	bcs.n	8009660 <quorem+0xac>
 800968e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009696:	b922      	cbnz	r2, 80096a2 <quorem+0xee>
 8009698:	3b04      	subs	r3, #4
 800969a:	429d      	cmp	r5, r3
 800969c:	461a      	mov	r2, r3
 800969e:	d30a      	bcc.n	80096b6 <quorem+0x102>
 80096a0:	613c      	str	r4, [r7, #16]
 80096a2:	4630      	mov	r0, r6
 80096a4:	b003      	add	sp, #12
 80096a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096aa:	6812      	ldr	r2, [r2, #0]
 80096ac:	3b04      	subs	r3, #4
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	d1cd      	bne.n	800964e <quorem+0x9a>
 80096b2:	3c01      	subs	r4, #1
 80096b4:	e7c8      	b.n	8009648 <quorem+0x94>
 80096b6:	6812      	ldr	r2, [r2, #0]
 80096b8:	3b04      	subs	r3, #4
 80096ba:	2a00      	cmp	r2, #0
 80096bc:	d1f0      	bne.n	80096a0 <quorem+0xec>
 80096be:	3c01      	subs	r4, #1
 80096c0:	e7eb      	b.n	800969a <quorem+0xe6>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e7ee      	b.n	80096a4 <quorem+0xf0>
	...

080096c8 <_dtoa_r>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	4616      	mov	r6, r2
 80096ce:	461f      	mov	r7, r3
 80096d0:	69c4      	ldr	r4, [r0, #28]
 80096d2:	b099      	sub	sp, #100	; 0x64
 80096d4:	4605      	mov	r5, r0
 80096d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80096da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80096de:	b974      	cbnz	r4, 80096fe <_dtoa_r+0x36>
 80096e0:	2010      	movs	r0, #16
 80096e2:	f001 f977 	bl	800a9d4 <malloc>
 80096e6:	4602      	mov	r2, r0
 80096e8:	61e8      	str	r0, [r5, #28]
 80096ea:	b920      	cbnz	r0, 80096f6 <_dtoa_r+0x2e>
 80096ec:	21ef      	movs	r1, #239	; 0xef
 80096ee:	4bac      	ldr	r3, [pc, #688]	; (80099a0 <_dtoa_r+0x2d8>)
 80096f0:	48ac      	ldr	r0, [pc, #688]	; (80099a4 <_dtoa_r+0x2dc>)
 80096f2:	f002 f95d 	bl	800b9b0 <__assert_func>
 80096f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096fa:	6004      	str	r4, [r0, #0]
 80096fc:	60c4      	str	r4, [r0, #12]
 80096fe:	69eb      	ldr	r3, [r5, #28]
 8009700:	6819      	ldr	r1, [r3, #0]
 8009702:	b151      	cbz	r1, 800971a <_dtoa_r+0x52>
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	2301      	movs	r3, #1
 8009708:	4093      	lsls	r3, r2
 800970a:	604a      	str	r2, [r1, #4]
 800970c:	608b      	str	r3, [r1, #8]
 800970e:	4628      	mov	r0, r5
 8009710:	f001 fa66 	bl	800abe0 <_Bfree>
 8009714:	2200      	movs	r2, #0
 8009716:	69eb      	ldr	r3, [r5, #28]
 8009718:	601a      	str	r2, [r3, #0]
 800971a:	1e3b      	subs	r3, r7, #0
 800971c:	bfaf      	iteee	ge
 800971e:	2300      	movge	r3, #0
 8009720:	2201      	movlt	r2, #1
 8009722:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009726:	9305      	strlt	r3, [sp, #20]
 8009728:	bfa8      	it	ge
 800972a:	f8c8 3000 	strge.w	r3, [r8]
 800972e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009732:	4b9d      	ldr	r3, [pc, #628]	; (80099a8 <_dtoa_r+0x2e0>)
 8009734:	bfb8      	it	lt
 8009736:	f8c8 2000 	strlt.w	r2, [r8]
 800973a:	ea33 0309 	bics.w	r3, r3, r9
 800973e:	d119      	bne.n	8009774 <_dtoa_r+0xac>
 8009740:	f242 730f 	movw	r3, #9999	; 0x270f
 8009744:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800974c:	4333      	orrs	r3, r6
 800974e:	f000 8589 	beq.w	800a264 <_dtoa_r+0xb9c>
 8009752:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009754:	b953      	cbnz	r3, 800976c <_dtoa_r+0xa4>
 8009756:	4b95      	ldr	r3, [pc, #596]	; (80099ac <_dtoa_r+0x2e4>)
 8009758:	e023      	b.n	80097a2 <_dtoa_r+0xda>
 800975a:	4b95      	ldr	r3, [pc, #596]	; (80099b0 <_dtoa_r+0x2e8>)
 800975c:	9303      	str	r3, [sp, #12]
 800975e:	3308      	adds	r3, #8
 8009760:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	9803      	ldr	r0, [sp, #12]
 8009766:	b019      	add	sp, #100	; 0x64
 8009768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976c:	4b8f      	ldr	r3, [pc, #572]	; (80099ac <_dtoa_r+0x2e4>)
 800976e:	9303      	str	r3, [sp, #12]
 8009770:	3303      	adds	r3, #3
 8009772:	e7f5      	b.n	8009760 <_dtoa_r+0x98>
 8009774:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009778:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800977c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009780:	2200      	movs	r2, #0
 8009782:	2300      	movs	r3, #0
 8009784:	f7f7 f91a 	bl	80009bc <__aeabi_dcmpeq>
 8009788:	4680      	mov	r8, r0
 800978a:	b160      	cbz	r0, 80097a6 <_dtoa_r+0xde>
 800978c:	2301      	movs	r3, #1
 800978e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 8562 	beq.w	800a25e <_dtoa_r+0xb96>
 800979a:	4b86      	ldr	r3, [pc, #536]	; (80099b4 <_dtoa_r+0x2ec>)
 800979c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	9303      	str	r3, [sp, #12]
 80097a4:	e7de      	b.n	8009764 <_dtoa_r+0x9c>
 80097a6:	ab16      	add	r3, sp, #88	; 0x58
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	ab17      	add	r3, sp, #92	; 0x5c
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4628      	mov	r0, r5
 80097b0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097b4:	f001 fda8 	bl	800b308 <__d2b>
 80097b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80097bc:	4682      	mov	sl, r0
 80097be:	2c00      	cmp	r4, #0
 80097c0:	d07e      	beq.n	80098c0 <_dtoa_r+0x1f8>
 80097c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80097cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80097d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097d8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80097dc:	4619      	mov	r1, r3
 80097de:	2200      	movs	r2, #0
 80097e0:	4b75      	ldr	r3, [pc, #468]	; (80099b8 <_dtoa_r+0x2f0>)
 80097e2:	f7f6 fccb 	bl	800017c <__aeabi_dsub>
 80097e6:	a368      	add	r3, pc, #416	; (adr r3, 8009988 <_dtoa_r+0x2c0>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	f7f6 fe7e 	bl	80004ec <__aeabi_dmul>
 80097f0:	a367      	add	r3, pc, #412	; (adr r3, 8009990 <_dtoa_r+0x2c8>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 fcc3 	bl	8000180 <__adddf3>
 80097fa:	4606      	mov	r6, r0
 80097fc:	4620      	mov	r0, r4
 80097fe:	460f      	mov	r7, r1
 8009800:	f7f6 fe0a 	bl	8000418 <__aeabi_i2d>
 8009804:	a364      	add	r3, pc, #400	; (adr r3, 8009998 <_dtoa_r+0x2d0>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f7f6 fe6f 	bl	80004ec <__aeabi_dmul>
 800980e:	4602      	mov	r2, r0
 8009810:	460b      	mov	r3, r1
 8009812:	4630      	mov	r0, r6
 8009814:	4639      	mov	r1, r7
 8009816:	f7f6 fcb3 	bl	8000180 <__adddf3>
 800981a:	4606      	mov	r6, r0
 800981c:	460f      	mov	r7, r1
 800981e:	f7f7 f915 	bl	8000a4c <__aeabi_d2iz>
 8009822:	2200      	movs	r2, #0
 8009824:	4683      	mov	fp, r0
 8009826:	2300      	movs	r3, #0
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	f7f7 f8d0 	bl	80009d0 <__aeabi_dcmplt>
 8009830:	b148      	cbz	r0, 8009846 <_dtoa_r+0x17e>
 8009832:	4658      	mov	r0, fp
 8009834:	f7f6 fdf0 	bl	8000418 <__aeabi_i2d>
 8009838:	4632      	mov	r2, r6
 800983a:	463b      	mov	r3, r7
 800983c:	f7f7 f8be 	bl	80009bc <__aeabi_dcmpeq>
 8009840:	b908      	cbnz	r0, 8009846 <_dtoa_r+0x17e>
 8009842:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009846:	f1bb 0f16 	cmp.w	fp, #22
 800984a:	d857      	bhi.n	80098fc <_dtoa_r+0x234>
 800984c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009850:	4b5a      	ldr	r3, [pc, #360]	; (80099bc <_dtoa_r+0x2f4>)
 8009852:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	f7f7 f8b9 	bl	80009d0 <__aeabi_dcmplt>
 800985e:	2800      	cmp	r0, #0
 8009860:	d04e      	beq.n	8009900 <_dtoa_r+0x238>
 8009862:	2300      	movs	r3, #0
 8009864:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009868:	930f      	str	r3, [sp, #60]	; 0x3c
 800986a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800986c:	1b1b      	subs	r3, r3, r4
 800986e:	1e5a      	subs	r2, r3, #1
 8009870:	bf46      	itte	mi
 8009872:	f1c3 0901 	rsbmi	r9, r3, #1
 8009876:	2300      	movmi	r3, #0
 8009878:	f04f 0900 	movpl.w	r9, #0
 800987c:	9209      	str	r2, [sp, #36]	; 0x24
 800987e:	bf48      	it	mi
 8009880:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009882:	f1bb 0f00 	cmp.w	fp, #0
 8009886:	db3d      	blt.n	8009904 <_dtoa_r+0x23c>
 8009888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800988a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800988e:	445b      	add	r3, fp
 8009890:	9309      	str	r3, [sp, #36]	; 0x24
 8009892:	2300      	movs	r3, #0
 8009894:	930a      	str	r3, [sp, #40]	; 0x28
 8009896:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009898:	2b09      	cmp	r3, #9
 800989a:	d867      	bhi.n	800996c <_dtoa_r+0x2a4>
 800989c:	2b05      	cmp	r3, #5
 800989e:	bfc4      	itt	gt
 80098a0:	3b04      	subgt	r3, #4
 80098a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80098a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098a6:	bfc8      	it	gt
 80098a8:	2400      	movgt	r4, #0
 80098aa:	f1a3 0302 	sub.w	r3, r3, #2
 80098ae:	bfd8      	it	le
 80098b0:	2401      	movle	r4, #1
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	f200 8086 	bhi.w	80099c4 <_dtoa_r+0x2fc>
 80098b8:	e8df f003 	tbb	[pc, r3]
 80098bc:	5637392c 	.word	0x5637392c
 80098c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80098c4:	441c      	add	r4, r3
 80098c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80098ca:	2b20      	cmp	r3, #32
 80098cc:	bfc1      	itttt	gt
 80098ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80098d2:	fa09 f903 	lslgt.w	r9, r9, r3
 80098d6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80098da:	fa26 f303 	lsrgt.w	r3, r6, r3
 80098de:	bfd6      	itet	le
 80098e0:	f1c3 0320 	rsble	r3, r3, #32
 80098e4:	ea49 0003 	orrgt.w	r0, r9, r3
 80098e8:	fa06 f003 	lslle.w	r0, r6, r3
 80098ec:	f7f6 fd84 	bl	80003f8 <__aeabi_ui2d>
 80098f0:	2201      	movs	r2, #1
 80098f2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80098f6:	3c01      	subs	r4, #1
 80098f8:	9213      	str	r2, [sp, #76]	; 0x4c
 80098fa:	e76f      	b.n	80097dc <_dtoa_r+0x114>
 80098fc:	2301      	movs	r3, #1
 80098fe:	e7b3      	b.n	8009868 <_dtoa_r+0x1a0>
 8009900:	900f      	str	r0, [sp, #60]	; 0x3c
 8009902:	e7b2      	b.n	800986a <_dtoa_r+0x1a2>
 8009904:	f1cb 0300 	rsb	r3, fp, #0
 8009908:	930a      	str	r3, [sp, #40]	; 0x28
 800990a:	2300      	movs	r3, #0
 800990c:	eba9 090b 	sub.w	r9, r9, fp
 8009910:	930e      	str	r3, [sp, #56]	; 0x38
 8009912:	e7c0      	b.n	8009896 <_dtoa_r+0x1ce>
 8009914:	2300      	movs	r3, #0
 8009916:	930b      	str	r3, [sp, #44]	; 0x2c
 8009918:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800991a:	2b00      	cmp	r3, #0
 800991c:	dc55      	bgt.n	80099ca <_dtoa_r+0x302>
 800991e:	2301      	movs	r3, #1
 8009920:	461a      	mov	r2, r3
 8009922:	9306      	str	r3, [sp, #24]
 8009924:	9308      	str	r3, [sp, #32]
 8009926:	9223      	str	r2, [sp, #140]	; 0x8c
 8009928:	e00b      	b.n	8009942 <_dtoa_r+0x27a>
 800992a:	2301      	movs	r3, #1
 800992c:	e7f3      	b.n	8009916 <_dtoa_r+0x24e>
 800992e:	2300      	movs	r3, #0
 8009930:	930b      	str	r3, [sp, #44]	; 0x2c
 8009932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009934:	445b      	add	r3, fp
 8009936:	9306      	str	r3, [sp, #24]
 8009938:	3301      	adds	r3, #1
 800993a:	2b01      	cmp	r3, #1
 800993c:	9308      	str	r3, [sp, #32]
 800993e:	bfb8      	it	lt
 8009940:	2301      	movlt	r3, #1
 8009942:	2100      	movs	r1, #0
 8009944:	2204      	movs	r2, #4
 8009946:	69e8      	ldr	r0, [r5, #28]
 8009948:	f102 0614 	add.w	r6, r2, #20
 800994c:	429e      	cmp	r6, r3
 800994e:	d940      	bls.n	80099d2 <_dtoa_r+0x30a>
 8009950:	6041      	str	r1, [r0, #4]
 8009952:	4628      	mov	r0, r5
 8009954:	f001 f904 	bl	800ab60 <_Balloc>
 8009958:	9003      	str	r0, [sp, #12]
 800995a:	2800      	cmp	r0, #0
 800995c:	d13c      	bne.n	80099d8 <_dtoa_r+0x310>
 800995e:	4602      	mov	r2, r0
 8009960:	f240 11af 	movw	r1, #431	; 0x1af
 8009964:	4b16      	ldr	r3, [pc, #88]	; (80099c0 <_dtoa_r+0x2f8>)
 8009966:	e6c3      	b.n	80096f0 <_dtoa_r+0x28>
 8009968:	2301      	movs	r3, #1
 800996a:	e7e1      	b.n	8009930 <_dtoa_r+0x268>
 800996c:	2401      	movs	r4, #1
 800996e:	2300      	movs	r3, #0
 8009970:	940b      	str	r4, [sp, #44]	; 0x2c
 8009972:	9322      	str	r3, [sp, #136]	; 0x88
 8009974:	f04f 33ff 	mov.w	r3, #4294967295
 8009978:	2200      	movs	r2, #0
 800997a:	9306      	str	r3, [sp, #24]
 800997c:	9308      	str	r3, [sp, #32]
 800997e:	2312      	movs	r3, #18
 8009980:	e7d1      	b.n	8009926 <_dtoa_r+0x25e>
 8009982:	bf00      	nop
 8009984:	f3af 8000 	nop.w
 8009988:	636f4361 	.word	0x636f4361
 800998c:	3fd287a7 	.word	0x3fd287a7
 8009990:	8b60c8b3 	.word	0x8b60c8b3
 8009994:	3fc68a28 	.word	0x3fc68a28
 8009998:	509f79fb 	.word	0x509f79fb
 800999c:	3fd34413 	.word	0x3fd34413
 80099a0:	0800c242 	.word	0x0800c242
 80099a4:	0800c259 	.word	0x0800c259
 80099a8:	7ff00000 	.word	0x7ff00000
 80099ac:	0800c23e 	.word	0x0800c23e
 80099b0:	0800c235 	.word	0x0800c235
 80099b4:	0800c20a 	.word	0x0800c20a
 80099b8:	3ff80000 	.word	0x3ff80000
 80099bc:	0800c3a8 	.word	0x0800c3a8
 80099c0:	0800c2b1 	.word	0x0800c2b1
 80099c4:	2301      	movs	r3, #1
 80099c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80099c8:	e7d4      	b.n	8009974 <_dtoa_r+0x2ac>
 80099ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80099cc:	9306      	str	r3, [sp, #24]
 80099ce:	9308      	str	r3, [sp, #32]
 80099d0:	e7b7      	b.n	8009942 <_dtoa_r+0x27a>
 80099d2:	3101      	adds	r1, #1
 80099d4:	0052      	lsls	r2, r2, #1
 80099d6:	e7b7      	b.n	8009948 <_dtoa_r+0x280>
 80099d8:	69eb      	ldr	r3, [r5, #28]
 80099da:	9a03      	ldr	r2, [sp, #12]
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	9b08      	ldr	r3, [sp, #32]
 80099e0:	2b0e      	cmp	r3, #14
 80099e2:	f200 80a8 	bhi.w	8009b36 <_dtoa_r+0x46e>
 80099e6:	2c00      	cmp	r4, #0
 80099e8:	f000 80a5 	beq.w	8009b36 <_dtoa_r+0x46e>
 80099ec:	f1bb 0f00 	cmp.w	fp, #0
 80099f0:	dd34      	ble.n	8009a5c <_dtoa_r+0x394>
 80099f2:	4b9a      	ldr	r3, [pc, #616]	; (8009c5c <_dtoa_r+0x594>)
 80099f4:	f00b 020f 	and.w	r2, fp, #15
 80099f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009a04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009a08:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009a0c:	d016      	beq.n	8009a3c <_dtoa_r+0x374>
 8009a0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a12:	4b93      	ldr	r3, [pc, #588]	; (8009c60 <_dtoa_r+0x598>)
 8009a14:	2703      	movs	r7, #3
 8009a16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a1a:	f7f6 fe91 	bl	8000740 <__aeabi_ddiv>
 8009a1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a22:	f004 040f 	and.w	r4, r4, #15
 8009a26:	4e8e      	ldr	r6, [pc, #568]	; (8009c60 <_dtoa_r+0x598>)
 8009a28:	b954      	cbnz	r4, 8009a40 <_dtoa_r+0x378>
 8009a2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009a2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a32:	f7f6 fe85 	bl	8000740 <__aeabi_ddiv>
 8009a36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a3a:	e029      	b.n	8009a90 <_dtoa_r+0x3c8>
 8009a3c:	2702      	movs	r7, #2
 8009a3e:	e7f2      	b.n	8009a26 <_dtoa_r+0x35e>
 8009a40:	07e1      	lsls	r1, r4, #31
 8009a42:	d508      	bpl.n	8009a56 <_dtoa_r+0x38e>
 8009a44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a4c:	f7f6 fd4e 	bl	80004ec <__aeabi_dmul>
 8009a50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009a54:	3701      	adds	r7, #1
 8009a56:	1064      	asrs	r4, r4, #1
 8009a58:	3608      	adds	r6, #8
 8009a5a:	e7e5      	b.n	8009a28 <_dtoa_r+0x360>
 8009a5c:	f000 80a5 	beq.w	8009baa <_dtoa_r+0x4e2>
 8009a60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a64:	f1cb 0400 	rsb	r4, fp, #0
 8009a68:	4b7c      	ldr	r3, [pc, #496]	; (8009c5c <_dtoa_r+0x594>)
 8009a6a:	f004 020f 	and.w	r2, r4, #15
 8009a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fd39 	bl	80004ec <__aeabi_dmul>
 8009a7a:	2702      	movs	r7, #2
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a82:	4e77      	ldr	r6, [pc, #476]	; (8009c60 <_dtoa_r+0x598>)
 8009a84:	1124      	asrs	r4, r4, #4
 8009a86:	2c00      	cmp	r4, #0
 8009a88:	f040 8084 	bne.w	8009b94 <_dtoa_r+0x4cc>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1d2      	bne.n	8009a36 <_dtoa_r+0x36e>
 8009a90:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009a94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8087 	beq.w	8009bae <_dtoa_r+0x4e6>
 8009aa0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4b6f      	ldr	r3, [pc, #444]	; (8009c64 <_dtoa_r+0x59c>)
 8009aa8:	f7f6 ff92 	bl	80009d0 <__aeabi_dcmplt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d07e      	beq.n	8009bae <_dtoa_r+0x4e6>
 8009ab0:	9b08      	ldr	r3, [sp, #32]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d07b      	beq.n	8009bae <_dtoa_r+0x4e6>
 8009ab6:	9b06      	ldr	r3, [sp, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	dd38      	ble.n	8009b2e <_dtoa_r+0x466>
 8009abc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4b69      	ldr	r3, [pc, #420]	; (8009c68 <_dtoa_r+0x5a0>)
 8009ac4:	f7f6 fd12 	bl	80004ec <__aeabi_dmul>
 8009ac8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009acc:	9c06      	ldr	r4, [sp, #24]
 8009ace:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009ad2:	3701      	adds	r7, #1
 8009ad4:	4638      	mov	r0, r7
 8009ad6:	f7f6 fc9f 	bl	8000418 <__aeabi_i2d>
 8009ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ade:	f7f6 fd05 	bl	80004ec <__aeabi_dmul>
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	4b61      	ldr	r3, [pc, #388]	; (8009c6c <_dtoa_r+0x5a4>)
 8009ae6:	f7f6 fb4b 	bl	8000180 <__adddf3>
 8009aea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009aee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009af2:	9611      	str	r6, [sp, #68]	; 0x44
 8009af4:	2c00      	cmp	r4, #0
 8009af6:	d15d      	bne.n	8009bb4 <_dtoa_r+0x4ec>
 8009af8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009afc:	2200      	movs	r2, #0
 8009afe:	4b5c      	ldr	r3, [pc, #368]	; (8009c70 <_dtoa_r+0x5a8>)
 8009b00:	f7f6 fb3c 	bl	800017c <__aeabi_dsub>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b0c:	4633      	mov	r3, r6
 8009b0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b10:	f7f6 ff7c 	bl	8000a0c <__aeabi_dcmpgt>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	f040 8295 	bne.w	800a044 <_dtoa_r+0x97c>
 8009b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009b24:	f7f6 ff54 	bl	80009d0 <__aeabi_dcmplt>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	f040 8289 	bne.w	800a040 <_dtoa_r+0x978>
 8009b2e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009b32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009b36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f2c0 8151 	blt.w	8009de0 <_dtoa_r+0x718>
 8009b3e:	f1bb 0f0e 	cmp.w	fp, #14
 8009b42:	f300 814d 	bgt.w	8009de0 <_dtoa_r+0x718>
 8009b46:	4b45      	ldr	r3, [pc, #276]	; (8009c5c <_dtoa_r+0x594>)
 8009b48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b50:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009b54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	f280 80da 	bge.w	8009d10 <_dtoa_r+0x648>
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f300 80d6 	bgt.w	8009d10 <_dtoa_r+0x648>
 8009b64:	f040 826b 	bne.w	800a03e <_dtoa_r+0x976>
 8009b68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4b40      	ldr	r3, [pc, #256]	; (8009c70 <_dtoa_r+0x5a8>)
 8009b70:	f7f6 fcbc 	bl	80004ec <__aeabi_dmul>
 8009b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b78:	f7f6 ff3e 	bl	80009f8 <__aeabi_dcmpge>
 8009b7c:	9c08      	ldr	r4, [sp, #32]
 8009b7e:	4626      	mov	r6, r4
 8009b80:	2800      	cmp	r0, #0
 8009b82:	f040 8241 	bne.w	800a008 <_dtoa_r+0x940>
 8009b86:	2331      	movs	r3, #49	; 0x31
 8009b88:	9f03      	ldr	r7, [sp, #12]
 8009b8a:	f10b 0b01 	add.w	fp, fp, #1
 8009b8e:	f807 3b01 	strb.w	r3, [r7], #1
 8009b92:	e23d      	b.n	800a010 <_dtoa_r+0x948>
 8009b94:	07e2      	lsls	r2, r4, #31
 8009b96:	d505      	bpl.n	8009ba4 <_dtoa_r+0x4dc>
 8009b98:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b9c:	f7f6 fca6 	bl	80004ec <__aeabi_dmul>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	3701      	adds	r7, #1
 8009ba4:	1064      	asrs	r4, r4, #1
 8009ba6:	3608      	adds	r6, #8
 8009ba8:	e76d      	b.n	8009a86 <_dtoa_r+0x3be>
 8009baa:	2702      	movs	r7, #2
 8009bac:	e770      	b.n	8009a90 <_dtoa_r+0x3c8>
 8009bae:	46d8      	mov	r8, fp
 8009bb0:	9c08      	ldr	r4, [sp, #32]
 8009bb2:	e78f      	b.n	8009ad4 <_dtoa_r+0x40c>
 8009bb4:	9903      	ldr	r1, [sp, #12]
 8009bb6:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <_dtoa_r+0x594>)
 8009bb8:	4421      	add	r1, r4
 8009bba:	9112      	str	r1, [sp, #72]	; 0x48
 8009bbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bc2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009bc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009bca:	2900      	cmp	r1, #0
 8009bcc:	d054      	beq.n	8009c78 <_dtoa_r+0x5b0>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	4928      	ldr	r1, [pc, #160]	; (8009c74 <_dtoa_r+0x5ac>)
 8009bd2:	f7f6 fdb5 	bl	8000740 <__aeabi_ddiv>
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	4632      	mov	r2, r6
 8009bda:	f7f6 facf 	bl	800017c <__aeabi_dsub>
 8009bde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009be2:	9f03      	ldr	r7, [sp, #12]
 8009be4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009be8:	f7f6 ff30 	bl	8000a4c <__aeabi_d2iz>
 8009bec:	4604      	mov	r4, r0
 8009bee:	f7f6 fc13 	bl	8000418 <__aeabi_i2d>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bfa:	f7f6 fabf 	bl	800017c <__aeabi_dsub>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	3430      	adds	r4, #48	; 0x30
 8009c04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c0c:	f807 4b01 	strb.w	r4, [r7], #1
 8009c10:	f7f6 fede 	bl	80009d0 <__aeabi_dcmplt>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d173      	bne.n	8009d00 <_dtoa_r+0x638>
 8009c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	4911      	ldr	r1, [pc, #68]	; (8009c64 <_dtoa_r+0x59c>)
 8009c20:	f7f6 faac 	bl	800017c <__aeabi_dsub>
 8009c24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c28:	f7f6 fed2 	bl	80009d0 <__aeabi_dcmplt>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f040 80b6 	bne.w	8009d9e <_dtoa_r+0x6d6>
 8009c32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c34:	429f      	cmp	r7, r3
 8009c36:	f43f af7a 	beq.w	8009b2e <_dtoa_r+0x466>
 8009c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <_dtoa_r+0x5a0>)
 8009c42:	f7f6 fc53 	bl	80004ec <__aeabi_dmul>
 8009c46:	2200      	movs	r2, #0
 8009c48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c50:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <_dtoa_r+0x5a0>)
 8009c52:	f7f6 fc4b 	bl	80004ec <__aeabi_dmul>
 8009c56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c5a:	e7c3      	b.n	8009be4 <_dtoa_r+0x51c>
 8009c5c:	0800c3a8 	.word	0x0800c3a8
 8009c60:	0800c380 	.word	0x0800c380
 8009c64:	3ff00000 	.word	0x3ff00000
 8009c68:	40240000 	.word	0x40240000
 8009c6c:	401c0000 	.word	0x401c0000
 8009c70:	40140000 	.word	0x40140000
 8009c74:	3fe00000 	.word	0x3fe00000
 8009c78:	4630      	mov	r0, r6
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	f7f6 fc36 	bl	80004ec <__aeabi_dmul>
 8009c80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009c82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c86:	9c03      	ldr	r4, [sp, #12]
 8009c88:	9314      	str	r3, [sp, #80]	; 0x50
 8009c8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c8e:	f7f6 fedd 	bl	8000a4c <__aeabi_d2iz>
 8009c92:	9015      	str	r0, [sp, #84]	; 0x54
 8009c94:	f7f6 fbc0 	bl	8000418 <__aeabi_i2d>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ca0:	f7f6 fa6c 	bl	800017c <__aeabi_dsub>
 8009ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ca6:	4606      	mov	r6, r0
 8009ca8:	3330      	adds	r3, #48	; 0x30
 8009caa:	f804 3b01 	strb.w	r3, [r4], #1
 8009cae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cb0:	460f      	mov	r7, r1
 8009cb2:	429c      	cmp	r4, r3
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	d124      	bne.n	8009d04 <_dtoa_r+0x63c>
 8009cba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009cbe:	4baf      	ldr	r3, [pc, #700]	; (8009f7c <_dtoa_r+0x8b4>)
 8009cc0:	f7f6 fa5e 	bl	8000180 <__adddf3>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 fe9e 	bl	8000a0c <__aeabi_dcmpgt>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d163      	bne.n	8009d9c <_dtoa_r+0x6d4>
 8009cd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009cd8:	2000      	movs	r0, #0
 8009cda:	49a8      	ldr	r1, [pc, #672]	; (8009f7c <_dtoa_r+0x8b4>)
 8009cdc:	f7f6 fa4e 	bl	800017c <__aeabi_dsub>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	f7f6 fe72 	bl	80009d0 <__aeabi_dcmplt>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f43f af1e 	beq.w	8009b2e <_dtoa_r+0x466>
 8009cf2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009cf4:	1e7b      	subs	r3, r7, #1
 8009cf6:	9314      	str	r3, [sp, #80]	; 0x50
 8009cf8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009cfc:	2b30      	cmp	r3, #48	; 0x30
 8009cfe:	d0f8      	beq.n	8009cf2 <_dtoa_r+0x62a>
 8009d00:	46c3      	mov	fp, r8
 8009d02:	e03b      	b.n	8009d7c <_dtoa_r+0x6b4>
 8009d04:	4b9e      	ldr	r3, [pc, #632]	; (8009f80 <_dtoa_r+0x8b8>)
 8009d06:	f7f6 fbf1 	bl	80004ec <__aeabi_dmul>
 8009d0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d0e:	e7bc      	b.n	8009c8a <_dtoa_r+0x5c2>
 8009d10:	9f03      	ldr	r7, [sp, #12]
 8009d12:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009d16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	f7f6 fd0f 	bl	8000740 <__aeabi_ddiv>
 8009d22:	f7f6 fe93 	bl	8000a4c <__aeabi_d2iz>
 8009d26:	4604      	mov	r4, r0
 8009d28:	f7f6 fb76 	bl	8000418 <__aeabi_i2d>
 8009d2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d30:	f7f6 fbdc 	bl	80004ec <__aeabi_dmul>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	f7f6 fa1e 	bl	800017c <__aeabi_dsub>
 8009d40:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009d44:	f807 6b01 	strb.w	r6, [r7], #1
 8009d48:	9e03      	ldr	r6, [sp, #12]
 8009d4a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009d4e:	1bbe      	subs	r6, r7, r6
 8009d50:	45b4      	cmp	ip, r6
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	d136      	bne.n	8009dc6 <_dtoa_r+0x6fe>
 8009d58:	f7f6 fa12 	bl	8000180 <__adddf3>
 8009d5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d60:	4680      	mov	r8, r0
 8009d62:	4689      	mov	r9, r1
 8009d64:	f7f6 fe52 	bl	8000a0c <__aeabi_dcmpgt>
 8009d68:	bb58      	cbnz	r0, 8009dc2 <_dtoa_r+0x6fa>
 8009d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 fe23 	bl	80009bc <__aeabi_dcmpeq>
 8009d76:	b108      	cbz	r0, 8009d7c <_dtoa_r+0x6b4>
 8009d78:	07e3      	lsls	r3, r4, #31
 8009d7a:	d422      	bmi.n	8009dc2 <_dtoa_r+0x6fa>
 8009d7c:	4651      	mov	r1, sl
 8009d7e:	4628      	mov	r0, r5
 8009d80:	f000 ff2e 	bl	800abe0 <_Bfree>
 8009d84:	2300      	movs	r3, #0
 8009d86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d88:	703b      	strb	r3, [r7, #0]
 8009d8a:	f10b 0301 	add.w	r3, fp, #1
 8009d8e:	6013      	str	r3, [r2, #0]
 8009d90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f43f ace6 	beq.w	8009764 <_dtoa_r+0x9c>
 8009d98:	601f      	str	r7, [r3, #0]
 8009d9a:	e4e3      	b.n	8009764 <_dtoa_r+0x9c>
 8009d9c:	4627      	mov	r7, r4
 8009d9e:	463b      	mov	r3, r7
 8009da0:	461f      	mov	r7, r3
 8009da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009da6:	2a39      	cmp	r2, #57	; 0x39
 8009da8:	d107      	bne.n	8009dba <_dtoa_r+0x6f2>
 8009daa:	9a03      	ldr	r2, [sp, #12]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d1f7      	bne.n	8009da0 <_dtoa_r+0x6d8>
 8009db0:	2230      	movs	r2, #48	; 0x30
 8009db2:	9903      	ldr	r1, [sp, #12]
 8009db4:	f108 0801 	add.w	r8, r8, #1
 8009db8:	700a      	strb	r2, [r1, #0]
 8009dba:	781a      	ldrb	r2, [r3, #0]
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	701a      	strb	r2, [r3, #0]
 8009dc0:	e79e      	b.n	8009d00 <_dtoa_r+0x638>
 8009dc2:	46d8      	mov	r8, fp
 8009dc4:	e7eb      	b.n	8009d9e <_dtoa_r+0x6d6>
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	4b6d      	ldr	r3, [pc, #436]	; (8009f80 <_dtoa_r+0x8b8>)
 8009dca:	f7f6 fb8f 	bl	80004ec <__aeabi_dmul>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4680      	mov	r8, r0
 8009dd4:	4689      	mov	r9, r1
 8009dd6:	f7f6 fdf1 	bl	80009bc <__aeabi_dcmpeq>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d09b      	beq.n	8009d16 <_dtoa_r+0x64e>
 8009dde:	e7cd      	b.n	8009d7c <_dtoa_r+0x6b4>
 8009de0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	f000 80c4 	beq.w	8009f70 <_dtoa_r+0x8a8>
 8009de8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009dea:	2a01      	cmp	r2, #1
 8009dec:	f300 80a8 	bgt.w	8009f40 <_dtoa_r+0x878>
 8009df0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	f000 80a0 	beq.w	8009f38 <_dtoa_r+0x870>
 8009df8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009dfc:	464f      	mov	r7, r9
 8009dfe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e02:	2101      	movs	r1, #1
 8009e04:	441a      	add	r2, r3
 8009e06:	4628      	mov	r0, r5
 8009e08:	4499      	add	r9, r3
 8009e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e0c:	f000 ffe8 	bl	800ade0 <__i2b>
 8009e10:	4606      	mov	r6, r0
 8009e12:	b15f      	cbz	r7, 8009e2c <_dtoa_r+0x764>
 8009e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	dd08      	ble.n	8009e2c <_dtoa_r+0x764>
 8009e1a:	42bb      	cmp	r3, r7
 8009e1c:	bfa8      	it	ge
 8009e1e:	463b      	movge	r3, r7
 8009e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e22:	eba9 0903 	sub.w	r9, r9, r3
 8009e26:	1aff      	subs	r7, r7, r3
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e2e:	b1f3      	cbz	r3, 8009e6e <_dtoa_r+0x7a6>
 8009e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 80a0 	beq.w	8009f78 <_dtoa_r+0x8b0>
 8009e38:	2c00      	cmp	r4, #0
 8009e3a:	dd10      	ble.n	8009e5e <_dtoa_r+0x796>
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f001 f88b 	bl	800af5c <__pow5mult>
 8009e46:	4652      	mov	r2, sl
 8009e48:	4601      	mov	r1, r0
 8009e4a:	4606      	mov	r6, r0
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f000 ffdd 	bl	800ae0c <__multiply>
 8009e52:	4680      	mov	r8, r0
 8009e54:	4651      	mov	r1, sl
 8009e56:	4628      	mov	r0, r5
 8009e58:	f000 fec2 	bl	800abe0 <_Bfree>
 8009e5c:	46c2      	mov	sl, r8
 8009e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e60:	1b1a      	subs	r2, r3, r4
 8009e62:	d004      	beq.n	8009e6e <_dtoa_r+0x7a6>
 8009e64:	4651      	mov	r1, sl
 8009e66:	4628      	mov	r0, r5
 8009e68:	f001 f878 	bl	800af5c <__pow5mult>
 8009e6c:	4682      	mov	sl, r0
 8009e6e:	2101      	movs	r1, #1
 8009e70:	4628      	mov	r0, r5
 8009e72:	f000 ffb5 	bl	800ade0 <__i2b>
 8009e76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e78:	4604      	mov	r4, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f340 8082 	ble.w	8009f84 <_dtoa_r+0x8bc>
 8009e80:	461a      	mov	r2, r3
 8009e82:	4601      	mov	r1, r0
 8009e84:	4628      	mov	r0, r5
 8009e86:	f001 f869 	bl	800af5c <__pow5mult>
 8009e8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	dd7b      	ble.n	8009f8a <_dtoa_r+0x8c2>
 8009e92:	f04f 0800 	mov.w	r8, #0
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e9c:	6918      	ldr	r0, [r3, #16]
 8009e9e:	f000 ff51 	bl	800ad44 <__hi0bits>
 8009ea2:	f1c0 0020 	rsb	r0, r0, #32
 8009ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ea8:	4418      	add	r0, r3
 8009eaa:	f010 001f 	ands.w	r0, r0, #31
 8009eae:	f000 8092 	beq.w	8009fd6 <_dtoa_r+0x90e>
 8009eb2:	f1c0 0320 	rsb	r3, r0, #32
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	f340 8085 	ble.w	8009fc6 <_dtoa_r+0x8fe>
 8009ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ebe:	f1c0 001c 	rsb	r0, r0, #28
 8009ec2:	4403      	add	r3, r0
 8009ec4:	4481      	add	r9, r0
 8009ec6:	4407      	add	r7, r0
 8009ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eca:	f1b9 0f00 	cmp.w	r9, #0
 8009ece:	dd05      	ble.n	8009edc <_dtoa_r+0x814>
 8009ed0:	4651      	mov	r1, sl
 8009ed2:	464a      	mov	r2, r9
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f001 f89b 	bl	800b010 <__lshift>
 8009eda:	4682      	mov	sl, r0
 8009edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	dd05      	ble.n	8009eee <_dtoa_r+0x826>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f001 f892 	bl	800b010 <__lshift>
 8009eec:	4604      	mov	r4, r0
 8009eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d072      	beq.n	8009fda <_dtoa_r+0x912>
 8009ef4:	4621      	mov	r1, r4
 8009ef6:	4650      	mov	r0, sl
 8009ef8:	f001 f8f6 	bl	800b0e8 <__mcmp>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	da6c      	bge.n	8009fda <_dtoa_r+0x912>
 8009f00:	2300      	movs	r3, #0
 8009f02:	4651      	mov	r1, sl
 8009f04:	220a      	movs	r2, #10
 8009f06:	4628      	mov	r0, r5
 8009f08:	f000 fe8c 	bl	800ac24 <__multadd>
 8009f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f0e:	4682      	mov	sl, r0
 8009f10:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 81ac 	beq.w	800a272 <_dtoa_r+0xbaa>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	4631      	mov	r1, r6
 8009f1e:	220a      	movs	r2, #10
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fe7f 	bl	800ac24 <__multadd>
 8009f26:	9b06      	ldr	r3, [sp, #24]
 8009f28:	4606      	mov	r6, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f300 8093 	bgt.w	800a056 <_dtoa_r+0x98e>
 8009f30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	dc59      	bgt.n	8009fea <_dtoa_r+0x922>
 8009f36:	e08e      	b.n	800a056 <_dtoa_r+0x98e>
 8009f38:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009f3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f3e:	e75d      	b.n	8009dfc <_dtoa_r+0x734>
 8009f40:	9b08      	ldr	r3, [sp, #32]
 8009f42:	1e5c      	subs	r4, r3, #1
 8009f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f46:	42a3      	cmp	r3, r4
 8009f48:	bfbf      	itttt	lt
 8009f4a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f4c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009f4e:	1ae3      	sublt	r3, r4, r3
 8009f50:	18d2      	addlt	r2, r2, r3
 8009f52:	bfa8      	it	ge
 8009f54:	1b1c      	subge	r4, r3, r4
 8009f56:	9b08      	ldr	r3, [sp, #32]
 8009f58:	bfbe      	ittt	lt
 8009f5a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009f5c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8009f5e:	2400      	movlt	r4, #0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bfb5      	itete	lt
 8009f64:	eba9 0703 	sublt.w	r7, r9, r3
 8009f68:	464f      	movge	r7, r9
 8009f6a:	2300      	movlt	r3, #0
 8009f6c:	9b08      	ldrge	r3, [sp, #32]
 8009f6e:	e747      	b.n	8009e00 <_dtoa_r+0x738>
 8009f70:	464f      	mov	r7, r9
 8009f72:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f74:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009f76:	e74c      	b.n	8009e12 <_dtoa_r+0x74a>
 8009f78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f7a:	e773      	b.n	8009e64 <_dtoa_r+0x79c>
 8009f7c:	3fe00000 	.word	0x3fe00000
 8009f80:	40240000 	.word	0x40240000
 8009f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	dc18      	bgt.n	8009fbc <_dtoa_r+0x8f4>
 8009f8a:	9b04      	ldr	r3, [sp, #16]
 8009f8c:	b9b3      	cbnz	r3, 8009fbc <_dtoa_r+0x8f4>
 8009f8e:	9b05      	ldr	r3, [sp, #20]
 8009f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f94:	b993      	cbnz	r3, 8009fbc <_dtoa_r+0x8f4>
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f9c:	0d1b      	lsrs	r3, r3, #20
 8009f9e:	051b      	lsls	r3, r3, #20
 8009fa0:	b17b      	cbz	r3, 8009fc2 <_dtoa_r+0x8fa>
 8009fa2:	f04f 0801 	mov.w	r8, #1
 8009fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fa8:	f109 0901 	add.w	r9, r9, #1
 8009fac:	3301      	adds	r3, #1
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f47f af6f 	bne.w	8009e96 <_dtoa_r+0x7ce>
 8009fb8:	2001      	movs	r0, #1
 8009fba:	e774      	b.n	8009ea6 <_dtoa_r+0x7de>
 8009fbc:	f04f 0800 	mov.w	r8, #0
 8009fc0:	e7f6      	b.n	8009fb0 <_dtoa_r+0x8e8>
 8009fc2:	4698      	mov	r8, r3
 8009fc4:	e7f4      	b.n	8009fb0 <_dtoa_r+0x8e8>
 8009fc6:	d080      	beq.n	8009eca <_dtoa_r+0x802>
 8009fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fca:	331c      	adds	r3, #28
 8009fcc:	441a      	add	r2, r3
 8009fce:	4499      	add	r9, r3
 8009fd0:	441f      	add	r7, r3
 8009fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fd4:	e779      	b.n	8009eca <_dtoa_r+0x802>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	e7f6      	b.n	8009fc8 <_dtoa_r+0x900>
 8009fda:	9b08      	ldr	r3, [sp, #32]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	dc34      	bgt.n	800a04a <_dtoa_r+0x982>
 8009fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	dd31      	ble.n	800a04a <_dtoa_r+0x982>
 8009fe6:	9b08      	ldr	r3, [sp, #32]
 8009fe8:	9306      	str	r3, [sp, #24]
 8009fea:	9b06      	ldr	r3, [sp, #24]
 8009fec:	b963      	cbnz	r3, 800a008 <_dtoa_r+0x940>
 8009fee:	4621      	mov	r1, r4
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 fe16 	bl	800ac24 <__multadd>
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4650      	mov	r0, sl
 8009ffe:	f001 f873 	bl	800b0e8 <__mcmp>
 800a002:	2800      	cmp	r0, #0
 800a004:	f73f adbf 	bgt.w	8009b86 <_dtoa_r+0x4be>
 800a008:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a00a:	9f03      	ldr	r7, [sp, #12]
 800a00c:	ea6f 0b03 	mvn.w	fp, r3
 800a010:	f04f 0800 	mov.w	r8, #0
 800a014:	4621      	mov	r1, r4
 800a016:	4628      	mov	r0, r5
 800a018:	f000 fde2 	bl	800abe0 <_Bfree>
 800a01c:	2e00      	cmp	r6, #0
 800a01e:	f43f aead 	beq.w	8009d7c <_dtoa_r+0x6b4>
 800a022:	f1b8 0f00 	cmp.w	r8, #0
 800a026:	d005      	beq.n	800a034 <_dtoa_r+0x96c>
 800a028:	45b0      	cmp	r8, r6
 800a02a:	d003      	beq.n	800a034 <_dtoa_r+0x96c>
 800a02c:	4641      	mov	r1, r8
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 fdd6 	bl	800abe0 <_Bfree>
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	f000 fdd2 	bl	800abe0 <_Bfree>
 800a03c:	e69e      	b.n	8009d7c <_dtoa_r+0x6b4>
 800a03e:	2400      	movs	r4, #0
 800a040:	4626      	mov	r6, r4
 800a042:	e7e1      	b.n	800a008 <_dtoa_r+0x940>
 800a044:	46c3      	mov	fp, r8
 800a046:	4626      	mov	r6, r4
 800a048:	e59d      	b.n	8009b86 <_dtoa_r+0x4be>
 800a04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 80c8 	beq.w	800a1e2 <_dtoa_r+0xb1a>
 800a052:	9b08      	ldr	r3, [sp, #32]
 800a054:	9306      	str	r3, [sp, #24]
 800a056:	2f00      	cmp	r7, #0
 800a058:	dd05      	ble.n	800a066 <_dtoa_r+0x99e>
 800a05a:	4631      	mov	r1, r6
 800a05c:	463a      	mov	r2, r7
 800a05e:	4628      	mov	r0, r5
 800a060:	f000 ffd6 	bl	800b010 <__lshift>
 800a064:	4606      	mov	r6, r0
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	d05b      	beq.n	800a124 <_dtoa_r+0xa5c>
 800a06c:	4628      	mov	r0, r5
 800a06e:	6871      	ldr	r1, [r6, #4]
 800a070:	f000 fd76 	bl	800ab60 <_Balloc>
 800a074:	4607      	mov	r7, r0
 800a076:	b928      	cbnz	r0, 800a084 <_dtoa_r+0x9bc>
 800a078:	4602      	mov	r2, r0
 800a07a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a07e:	4b81      	ldr	r3, [pc, #516]	; (800a284 <_dtoa_r+0xbbc>)
 800a080:	f7ff bb36 	b.w	80096f0 <_dtoa_r+0x28>
 800a084:	6932      	ldr	r2, [r6, #16]
 800a086:	f106 010c 	add.w	r1, r6, #12
 800a08a:	3202      	adds	r2, #2
 800a08c:	0092      	lsls	r2, r2, #2
 800a08e:	300c      	adds	r0, #12
 800a090:	f7ff fa7c 	bl	800958c <memcpy>
 800a094:	2201      	movs	r2, #1
 800a096:	4639      	mov	r1, r7
 800a098:	4628      	mov	r0, r5
 800a09a:	f000 ffb9 	bl	800b010 <__lshift>
 800a09e:	46b0      	mov	r8, r6
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	9a03      	ldr	r2, [sp, #12]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	9308      	str	r3, [sp, #32]
 800a0aa:	9b06      	ldr	r3, [sp, #24]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0b0:	9b04      	ldr	r3, [sp, #16]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0b8:	9b08      	ldr	r3, [sp, #32]
 800a0ba:	4621      	mov	r1, r4
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	4650      	mov	r0, sl
 800a0c0:	9304      	str	r3, [sp, #16]
 800a0c2:	f7ff fa77 	bl	80095b4 <quorem>
 800a0c6:	4641      	mov	r1, r8
 800a0c8:	9006      	str	r0, [sp, #24]
 800a0ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a0ce:	4650      	mov	r0, sl
 800a0d0:	f001 f80a 	bl	800b0e8 <__mcmp>
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	9009      	str	r0, [sp, #36]	; 0x24
 800a0d8:	4621      	mov	r1, r4
 800a0da:	4628      	mov	r0, r5
 800a0dc:	f001 f820 	bl	800b120 <__mdiff>
 800a0e0:	68c2      	ldr	r2, [r0, #12]
 800a0e2:	4607      	mov	r7, r0
 800a0e4:	bb02      	cbnz	r2, 800a128 <_dtoa_r+0xa60>
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	4650      	mov	r0, sl
 800a0ea:	f000 fffd 	bl	800b0e8 <__mcmp>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	4639      	mov	r1, r7
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	920c      	str	r2, [sp, #48]	; 0x30
 800a0f6:	f000 fd73 	bl	800abe0 <_Bfree>
 800a0fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a0fe:	9f08      	ldr	r7, [sp, #32]
 800a100:	ea43 0102 	orr.w	r1, r3, r2
 800a104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a106:	4319      	orrs	r1, r3
 800a108:	d110      	bne.n	800a12c <_dtoa_r+0xa64>
 800a10a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a10e:	d029      	beq.n	800a164 <_dtoa_r+0xa9c>
 800a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	dd02      	ble.n	800a11c <_dtoa_r+0xa54>
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a11c:	9b04      	ldr	r3, [sp, #16]
 800a11e:	f883 9000 	strb.w	r9, [r3]
 800a122:	e777      	b.n	800a014 <_dtoa_r+0x94c>
 800a124:	4630      	mov	r0, r6
 800a126:	e7ba      	b.n	800a09e <_dtoa_r+0x9d6>
 800a128:	2201      	movs	r2, #1
 800a12a:	e7e1      	b.n	800a0f0 <_dtoa_r+0xa28>
 800a12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	db04      	blt.n	800a13c <_dtoa_r+0xa74>
 800a132:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a134:	430b      	orrs	r3, r1
 800a136:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a138:	430b      	orrs	r3, r1
 800a13a:	d120      	bne.n	800a17e <_dtoa_r+0xab6>
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	dded      	ble.n	800a11c <_dtoa_r+0xa54>
 800a140:	4651      	mov	r1, sl
 800a142:	2201      	movs	r2, #1
 800a144:	4628      	mov	r0, r5
 800a146:	f000 ff63 	bl	800b010 <__lshift>
 800a14a:	4621      	mov	r1, r4
 800a14c:	4682      	mov	sl, r0
 800a14e:	f000 ffcb 	bl	800b0e8 <__mcmp>
 800a152:	2800      	cmp	r0, #0
 800a154:	dc03      	bgt.n	800a15e <_dtoa_r+0xa96>
 800a156:	d1e1      	bne.n	800a11c <_dtoa_r+0xa54>
 800a158:	f019 0f01 	tst.w	r9, #1
 800a15c:	d0de      	beq.n	800a11c <_dtoa_r+0xa54>
 800a15e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a162:	d1d8      	bne.n	800a116 <_dtoa_r+0xa4e>
 800a164:	2339      	movs	r3, #57	; 0x39
 800a166:	9a04      	ldr	r2, [sp, #16]
 800a168:	7013      	strb	r3, [r2, #0]
 800a16a:	463b      	mov	r3, r7
 800a16c:	461f      	mov	r7, r3
 800a16e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a172:	3b01      	subs	r3, #1
 800a174:	2a39      	cmp	r2, #57	; 0x39
 800a176:	d06b      	beq.n	800a250 <_dtoa_r+0xb88>
 800a178:	3201      	adds	r2, #1
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	e74a      	b.n	800a014 <_dtoa_r+0x94c>
 800a17e:	2a00      	cmp	r2, #0
 800a180:	dd07      	ble.n	800a192 <_dtoa_r+0xaca>
 800a182:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a186:	d0ed      	beq.n	800a164 <_dtoa_r+0xa9c>
 800a188:	9a04      	ldr	r2, [sp, #16]
 800a18a:	f109 0301 	add.w	r3, r9, #1
 800a18e:	7013      	strb	r3, [r2, #0]
 800a190:	e740      	b.n	800a014 <_dtoa_r+0x94c>
 800a192:	9b08      	ldr	r3, [sp, #32]
 800a194:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a196:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d042      	beq.n	800a224 <_dtoa_r+0xb5c>
 800a19e:	4651      	mov	r1, sl
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	220a      	movs	r2, #10
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	f000 fd3d 	bl	800ac24 <__multadd>
 800a1aa:	45b0      	cmp	r8, r6
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	f04f 0300 	mov.w	r3, #0
 800a1b2:	f04f 020a 	mov.w	r2, #10
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	4628      	mov	r0, r5
 800a1ba:	d107      	bne.n	800a1cc <_dtoa_r+0xb04>
 800a1bc:	f000 fd32 	bl	800ac24 <__multadd>
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	9b08      	ldr	r3, [sp, #32]
 800a1c6:	3301      	adds	r3, #1
 800a1c8:	9308      	str	r3, [sp, #32]
 800a1ca:	e775      	b.n	800a0b8 <_dtoa_r+0x9f0>
 800a1cc:	f000 fd2a 	bl	800ac24 <__multadd>
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	220a      	movs	r2, #10
 800a1d8:	4628      	mov	r0, r5
 800a1da:	f000 fd23 	bl	800ac24 <__multadd>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	e7f0      	b.n	800a1c4 <_dtoa_r+0xafc>
 800a1e2:	9b08      	ldr	r3, [sp, #32]
 800a1e4:	9306      	str	r3, [sp, #24]
 800a1e6:	9f03      	ldr	r7, [sp, #12]
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	f7ff f9e2 	bl	80095b4 <quorem>
 800a1f0:	9b03      	ldr	r3, [sp, #12]
 800a1f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a1f6:	f807 9b01 	strb.w	r9, [r7], #1
 800a1fa:	1afa      	subs	r2, r7, r3
 800a1fc:	9b06      	ldr	r3, [sp, #24]
 800a1fe:	4293      	cmp	r3, r2
 800a200:	dd07      	ble.n	800a212 <_dtoa_r+0xb4a>
 800a202:	4651      	mov	r1, sl
 800a204:	2300      	movs	r3, #0
 800a206:	220a      	movs	r2, #10
 800a208:	4628      	mov	r0, r5
 800a20a:	f000 fd0b 	bl	800ac24 <__multadd>
 800a20e:	4682      	mov	sl, r0
 800a210:	e7ea      	b.n	800a1e8 <_dtoa_r+0xb20>
 800a212:	9b06      	ldr	r3, [sp, #24]
 800a214:	f04f 0800 	mov.w	r8, #0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	bfcc      	ite	gt
 800a21c:	461f      	movgt	r7, r3
 800a21e:	2701      	movle	r7, #1
 800a220:	9b03      	ldr	r3, [sp, #12]
 800a222:	441f      	add	r7, r3
 800a224:	4651      	mov	r1, sl
 800a226:	2201      	movs	r2, #1
 800a228:	4628      	mov	r0, r5
 800a22a:	f000 fef1 	bl	800b010 <__lshift>
 800a22e:	4621      	mov	r1, r4
 800a230:	4682      	mov	sl, r0
 800a232:	f000 ff59 	bl	800b0e8 <__mcmp>
 800a236:	2800      	cmp	r0, #0
 800a238:	dc97      	bgt.n	800a16a <_dtoa_r+0xaa2>
 800a23a:	d102      	bne.n	800a242 <_dtoa_r+0xb7a>
 800a23c:	f019 0f01 	tst.w	r9, #1
 800a240:	d193      	bne.n	800a16a <_dtoa_r+0xaa2>
 800a242:	463b      	mov	r3, r7
 800a244:	461f      	mov	r7, r3
 800a246:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a24a:	2a30      	cmp	r2, #48	; 0x30
 800a24c:	d0fa      	beq.n	800a244 <_dtoa_r+0xb7c>
 800a24e:	e6e1      	b.n	800a014 <_dtoa_r+0x94c>
 800a250:	9a03      	ldr	r2, [sp, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d18a      	bne.n	800a16c <_dtoa_r+0xaa4>
 800a256:	2331      	movs	r3, #49	; 0x31
 800a258:	f10b 0b01 	add.w	fp, fp, #1
 800a25c:	e797      	b.n	800a18e <_dtoa_r+0xac6>
 800a25e:	4b0a      	ldr	r3, [pc, #40]	; (800a288 <_dtoa_r+0xbc0>)
 800a260:	f7ff ba9f 	b.w	80097a2 <_dtoa_r+0xda>
 800a264:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a266:	2b00      	cmp	r3, #0
 800a268:	f47f aa77 	bne.w	800975a <_dtoa_r+0x92>
 800a26c:	4b07      	ldr	r3, [pc, #28]	; (800a28c <_dtoa_r+0xbc4>)
 800a26e:	f7ff ba98 	b.w	80097a2 <_dtoa_r+0xda>
 800a272:	9b06      	ldr	r3, [sp, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	dcb6      	bgt.n	800a1e6 <_dtoa_r+0xb1e>
 800a278:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	f73f aeb5 	bgt.w	8009fea <_dtoa_r+0x922>
 800a280:	e7b1      	b.n	800a1e6 <_dtoa_r+0xb1e>
 800a282:	bf00      	nop
 800a284:	0800c2b1 	.word	0x0800c2b1
 800a288:	0800c209 	.word	0x0800c209
 800a28c:	0800c235 	.word	0x0800c235

0800a290 <_free_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4605      	mov	r5, r0
 800a294:	2900      	cmp	r1, #0
 800a296:	d040      	beq.n	800a31a <_free_r+0x8a>
 800a298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a29c:	1f0c      	subs	r4, r1, #4
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	bfb8      	it	lt
 800a2a2:	18e4      	addlt	r4, r4, r3
 800a2a4:	f000 fc50 	bl	800ab48 <__malloc_lock>
 800a2a8:	4a1c      	ldr	r2, [pc, #112]	; (800a31c <_free_r+0x8c>)
 800a2aa:	6813      	ldr	r3, [r2, #0]
 800a2ac:	b933      	cbnz	r3, 800a2bc <_free_r+0x2c>
 800a2ae:	6063      	str	r3, [r4, #4]
 800a2b0:	6014      	str	r4, [r2, #0]
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b8:	f000 bc4c 	b.w	800ab54 <__malloc_unlock>
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	d908      	bls.n	800a2d2 <_free_r+0x42>
 800a2c0:	6820      	ldr	r0, [r4, #0]
 800a2c2:	1821      	adds	r1, r4, r0
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	bf01      	itttt	eq
 800a2c8:	6819      	ldreq	r1, [r3, #0]
 800a2ca:	685b      	ldreq	r3, [r3, #4]
 800a2cc:	1809      	addeq	r1, r1, r0
 800a2ce:	6021      	streq	r1, [r4, #0]
 800a2d0:	e7ed      	b.n	800a2ae <_free_r+0x1e>
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	b10b      	cbz	r3, 800a2dc <_free_r+0x4c>
 800a2d8:	42a3      	cmp	r3, r4
 800a2da:	d9fa      	bls.n	800a2d2 <_free_r+0x42>
 800a2dc:	6811      	ldr	r1, [r2, #0]
 800a2de:	1850      	adds	r0, r2, r1
 800a2e0:	42a0      	cmp	r0, r4
 800a2e2:	d10b      	bne.n	800a2fc <_free_r+0x6c>
 800a2e4:	6820      	ldr	r0, [r4, #0]
 800a2e6:	4401      	add	r1, r0
 800a2e8:	1850      	adds	r0, r2, r1
 800a2ea:	4283      	cmp	r3, r0
 800a2ec:	6011      	str	r1, [r2, #0]
 800a2ee:	d1e0      	bne.n	800a2b2 <_free_r+0x22>
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	4408      	add	r0, r1
 800a2f6:	6010      	str	r0, [r2, #0]
 800a2f8:	6053      	str	r3, [r2, #4]
 800a2fa:	e7da      	b.n	800a2b2 <_free_r+0x22>
 800a2fc:	d902      	bls.n	800a304 <_free_r+0x74>
 800a2fe:	230c      	movs	r3, #12
 800a300:	602b      	str	r3, [r5, #0]
 800a302:	e7d6      	b.n	800a2b2 <_free_r+0x22>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	1821      	adds	r1, r4, r0
 800a308:	428b      	cmp	r3, r1
 800a30a:	bf01      	itttt	eq
 800a30c:	6819      	ldreq	r1, [r3, #0]
 800a30e:	685b      	ldreq	r3, [r3, #4]
 800a310:	1809      	addeq	r1, r1, r0
 800a312:	6021      	streq	r1, [r4, #0]
 800a314:	6063      	str	r3, [r4, #4]
 800a316:	6054      	str	r4, [r2, #4]
 800a318:	e7cb      	b.n	800a2b2 <_free_r+0x22>
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	20000604 	.word	0x20000604

0800a320 <rshift>:
 800a320:	6903      	ldr	r3, [r0, #16]
 800a322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a326:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a32a:	f100 0414 	add.w	r4, r0, #20
 800a32e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a332:	dd46      	ble.n	800a3c2 <rshift+0xa2>
 800a334:	f011 011f 	ands.w	r1, r1, #31
 800a338:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a33c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a340:	d10c      	bne.n	800a35c <rshift+0x3c>
 800a342:	4629      	mov	r1, r5
 800a344:	f100 0710 	add.w	r7, r0, #16
 800a348:	42b1      	cmp	r1, r6
 800a34a:	d335      	bcc.n	800a3b8 <rshift+0x98>
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	1eea      	subs	r2, r5, #3
 800a352:	4296      	cmp	r6, r2
 800a354:	bf38      	it	cc
 800a356:	2300      	movcc	r3, #0
 800a358:	4423      	add	r3, r4
 800a35a:	e015      	b.n	800a388 <rshift+0x68>
 800a35c:	46a1      	mov	r9, r4
 800a35e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a362:	f1c1 0820 	rsb	r8, r1, #32
 800a366:	40cf      	lsrs	r7, r1
 800a368:	f105 0e04 	add.w	lr, r5, #4
 800a36c:	4576      	cmp	r6, lr
 800a36e:	46f4      	mov	ip, lr
 800a370:	d816      	bhi.n	800a3a0 <rshift+0x80>
 800a372:	1a9a      	subs	r2, r3, r2
 800a374:	0092      	lsls	r2, r2, #2
 800a376:	3a04      	subs	r2, #4
 800a378:	3501      	adds	r5, #1
 800a37a:	42ae      	cmp	r6, r5
 800a37c:	bf38      	it	cc
 800a37e:	2200      	movcc	r2, #0
 800a380:	18a3      	adds	r3, r4, r2
 800a382:	50a7      	str	r7, [r4, r2]
 800a384:	b107      	cbz	r7, 800a388 <rshift+0x68>
 800a386:	3304      	adds	r3, #4
 800a388:	42a3      	cmp	r3, r4
 800a38a:	eba3 0204 	sub.w	r2, r3, r4
 800a38e:	bf08      	it	eq
 800a390:	2300      	moveq	r3, #0
 800a392:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a396:	6102      	str	r2, [r0, #16]
 800a398:	bf08      	it	eq
 800a39a:	6143      	streq	r3, [r0, #20]
 800a39c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3a0:	f8dc c000 	ldr.w	ip, [ip]
 800a3a4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3a8:	ea4c 0707 	orr.w	r7, ip, r7
 800a3ac:	f849 7b04 	str.w	r7, [r9], #4
 800a3b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3b4:	40cf      	lsrs	r7, r1
 800a3b6:	e7d9      	b.n	800a36c <rshift+0x4c>
 800a3b8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3bc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3c0:	e7c2      	b.n	800a348 <rshift+0x28>
 800a3c2:	4623      	mov	r3, r4
 800a3c4:	e7e0      	b.n	800a388 <rshift+0x68>

0800a3c6 <__hexdig_fun>:
 800a3c6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3ca:	2b09      	cmp	r3, #9
 800a3cc:	d802      	bhi.n	800a3d4 <__hexdig_fun+0xe>
 800a3ce:	3820      	subs	r0, #32
 800a3d0:	b2c0      	uxtb	r0, r0
 800a3d2:	4770      	bx	lr
 800a3d4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3d8:	2b05      	cmp	r3, #5
 800a3da:	d801      	bhi.n	800a3e0 <__hexdig_fun+0x1a>
 800a3dc:	3847      	subs	r0, #71	; 0x47
 800a3de:	e7f7      	b.n	800a3d0 <__hexdig_fun+0xa>
 800a3e0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3e4:	2b05      	cmp	r3, #5
 800a3e6:	d801      	bhi.n	800a3ec <__hexdig_fun+0x26>
 800a3e8:	3827      	subs	r0, #39	; 0x27
 800a3ea:	e7f1      	b.n	800a3d0 <__hexdig_fun+0xa>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	4770      	bx	lr

0800a3f0 <__gethex>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	4681      	mov	r9, r0
 800a3f6:	468a      	mov	sl, r1
 800a3f8:	4617      	mov	r7, r2
 800a3fa:	680a      	ldr	r2, [r1, #0]
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	f102 0b02 	add.w	fp, r2, #2
 800a402:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a406:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a40a:	9302      	str	r3, [sp, #8]
 800a40c:	32fe      	adds	r2, #254	; 0xfe
 800a40e:	eb02 030b 	add.w	r3, r2, fp
 800a412:	46d8      	mov	r8, fp
 800a414:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a418:	9301      	str	r3, [sp, #4]
 800a41a:	2830      	cmp	r0, #48	; 0x30
 800a41c:	d0f7      	beq.n	800a40e <__gethex+0x1e>
 800a41e:	f7ff ffd2 	bl	800a3c6 <__hexdig_fun>
 800a422:	4604      	mov	r4, r0
 800a424:	2800      	cmp	r0, #0
 800a426:	d138      	bne.n	800a49a <__gethex+0xaa>
 800a428:	2201      	movs	r2, #1
 800a42a:	4640      	mov	r0, r8
 800a42c:	49a7      	ldr	r1, [pc, #668]	; (800a6cc <__gethex+0x2dc>)
 800a42e:	f7ff f817 	bl	8009460 <strncmp>
 800a432:	4606      	mov	r6, r0
 800a434:	2800      	cmp	r0, #0
 800a436:	d169      	bne.n	800a50c <__gethex+0x11c>
 800a438:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a43c:	465d      	mov	r5, fp
 800a43e:	f7ff ffc2 	bl	800a3c6 <__hexdig_fun>
 800a442:	2800      	cmp	r0, #0
 800a444:	d064      	beq.n	800a510 <__gethex+0x120>
 800a446:	465a      	mov	r2, fp
 800a448:	7810      	ldrb	r0, [r2, #0]
 800a44a:	4690      	mov	r8, r2
 800a44c:	2830      	cmp	r0, #48	; 0x30
 800a44e:	f102 0201 	add.w	r2, r2, #1
 800a452:	d0f9      	beq.n	800a448 <__gethex+0x58>
 800a454:	f7ff ffb7 	bl	800a3c6 <__hexdig_fun>
 800a458:	2301      	movs	r3, #1
 800a45a:	fab0 f480 	clz	r4, r0
 800a45e:	465e      	mov	r6, fp
 800a460:	0964      	lsrs	r4, r4, #5
 800a462:	9301      	str	r3, [sp, #4]
 800a464:	4642      	mov	r2, r8
 800a466:	4615      	mov	r5, r2
 800a468:	7828      	ldrb	r0, [r5, #0]
 800a46a:	3201      	adds	r2, #1
 800a46c:	f7ff ffab 	bl	800a3c6 <__hexdig_fun>
 800a470:	2800      	cmp	r0, #0
 800a472:	d1f8      	bne.n	800a466 <__gethex+0x76>
 800a474:	2201      	movs	r2, #1
 800a476:	4628      	mov	r0, r5
 800a478:	4994      	ldr	r1, [pc, #592]	; (800a6cc <__gethex+0x2dc>)
 800a47a:	f7fe fff1 	bl	8009460 <strncmp>
 800a47e:	b978      	cbnz	r0, 800a4a0 <__gethex+0xb0>
 800a480:	b946      	cbnz	r6, 800a494 <__gethex+0xa4>
 800a482:	1c6e      	adds	r6, r5, #1
 800a484:	4632      	mov	r2, r6
 800a486:	4615      	mov	r5, r2
 800a488:	7828      	ldrb	r0, [r5, #0]
 800a48a:	3201      	adds	r2, #1
 800a48c:	f7ff ff9b 	bl	800a3c6 <__hexdig_fun>
 800a490:	2800      	cmp	r0, #0
 800a492:	d1f8      	bne.n	800a486 <__gethex+0x96>
 800a494:	1b73      	subs	r3, r6, r5
 800a496:	009e      	lsls	r6, r3, #2
 800a498:	e004      	b.n	800a4a4 <__gethex+0xb4>
 800a49a:	2400      	movs	r4, #0
 800a49c:	4626      	mov	r6, r4
 800a49e:	e7e1      	b.n	800a464 <__gethex+0x74>
 800a4a0:	2e00      	cmp	r6, #0
 800a4a2:	d1f7      	bne.n	800a494 <__gethex+0xa4>
 800a4a4:	782b      	ldrb	r3, [r5, #0]
 800a4a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4aa:	2b50      	cmp	r3, #80	; 0x50
 800a4ac:	d13d      	bne.n	800a52a <__gethex+0x13a>
 800a4ae:	786b      	ldrb	r3, [r5, #1]
 800a4b0:	2b2b      	cmp	r3, #43	; 0x2b
 800a4b2:	d02f      	beq.n	800a514 <__gethex+0x124>
 800a4b4:	2b2d      	cmp	r3, #45	; 0x2d
 800a4b6:	d031      	beq.n	800a51c <__gethex+0x12c>
 800a4b8:	f04f 0b00 	mov.w	fp, #0
 800a4bc:	1c69      	adds	r1, r5, #1
 800a4be:	7808      	ldrb	r0, [r1, #0]
 800a4c0:	f7ff ff81 	bl	800a3c6 <__hexdig_fun>
 800a4c4:	1e42      	subs	r2, r0, #1
 800a4c6:	b2d2      	uxtb	r2, r2
 800a4c8:	2a18      	cmp	r2, #24
 800a4ca:	d82e      	bhi.n	800a52a <__gethex+0x13a>
 800a4cc:	f1a0 0210 	sub.w	r2, r0, #16
 800a4d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4d4:	f7ff ff77 	bl	800a3c6 <__hexdig_fun>
 800a4d8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a4dc:	fa5f fc8c 	uxtb.w	ip, ip
 800a4e0:	f1bc 0f18 	cmp.w	ip, #24
 800a4e4:	d91d      	bls.n	800a522 <__gethex+0x132>
 800a4e6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ea:	d000      	beq.n	800a4ee <__gethex+0xfe>
 800a4ec:	4252      	negs	r2, r2
 800a4ee:	4416      	add	r6, r2
 800a4f0:	f8ca 1000 	str.w	r1, [sl]
 800a4f4:	b1dc      	cbz	r4, 800a52e <__gethex+0x13e>
 800a4f6:	9b01      	ldr	r3, [sp, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bf14      	ite	ne
 800a4fc:	f04f 0800 	movne.w	r8, #0
 800a500:	f04f 0806 	moveq.w	r8, #6
 800a504:	4640      	mov	r0, r8
 800a506:	b005      	add	sp, #20
 800a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50c:	4645      	mov	r5, r8
 800a50e:	4626      	mov	r6, r4
 800a510:	2401      	movs	r4, #1
 800a512:	e7c7      	b.n	800a4a4 <__gethex+0xb4>
 800a514:	f04f 0b00 	mov.w	fp, #0
 800a518:	1ca9      	adds	r1, r5, #2
 800a51a:	e7d0      	b.n	800a4be <__gethex+0xce>
 800a51c:	f04f 0b01 	mov.w	fp, #1
 800a520:	e7fa      	b.n	800a518 <__gethex+0x128>
 800a522:	230a      	movs	r3, #10
 800a524:	fb03 0002 	mla	r0, r3, r2, r0
 800a528:	e7d0      	b.n	800a4cc <__gethex+0xdc>
 800a52a:	4629      	mov	r1, r5
 800a52c:	e7e0      	b.n	800a4f0 <__gethex+0x100>
 800a52e:	4621      	mov	r1, r4
 800a530:	eba5 0308 	sub.w	r3, r5, r8
 800a534:	3b01      	subs	r3, #1
 800a536:	2b07      	cmp	r3, #7
 800a538:	dc0a      	bgt.n	800a550 <__gethex+0x160>
 800a53a:	4648      	mov	r0, r9
 800a53c:	f000 fb10 	bl	800ab60 <_Balloc>
 800a540:	4604      	mov	r4, r0
 800a542:	b940      	cbnz	r0, 800a556 <__gethex+0x166>
 800a544:	4602      	mov	r2, r0
 800a546:	21e4      	movs	r1, #228	; 0xe4
 800a548:	4b61      	ldr	r3, [pc, #388]	; (800a6d0 <__gethex+0x2e0>)
 800a54a:	4862      	ldr	r0, [pc, #392]	; (800a6d4 <__gethex+0x2e4>)
 800a54c:	f001 fa30 	bl	800b9b0 <__assert_func>
 800a550:	3101      	adds	r1, #1
 800a552:	105b      	asrs	r3, r3, #1
 800a554:	e7ef      	b.n	800a536 <__gethex+0x146>
 800a556:	2300      	movs	r3, #0
 800a558:	469b      	mov	fp, r3
 800a55a:	f100 0a14 	add.w	sl, r0, #20
 800a55e:	f8cd a004 	str.w	sl, [sp, #4]
 800a562:	45a8      	cmp	r8, r5
 800a564:	d344      	bcc.n	800a5f0 <__gethex+0x200>
 800a566:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a56a:	4658      	mov	r0, fp
 800a56c:	f848 bb04 	str.w	fp, [r8], #4
 800a570:	eba8 080a 	sub.w	r8, r8, sl
 800a574:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800a578:	6122      	str	r2, [r4, #16]
 800a57a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800a57e:	f000 fbe1 	bl	800ad44 <__hi0bits>
 800a582:	683d      	ldr	r5, [r7, #0]
 800a584:	eba8 0800 	sub.w	r8, r8, r0
 800a588:	45a8      	cmp	r8, r5
 800a58a:	dd59      	ble.n	800a640 <__gethex+0x250>
 800a58c:	eba8 0805 	sub.w	r8, r8, r5
 800a590:	4641      	mov	r1, r8
 800a592:	4620      	mov	r0, r4
 800a594:	f000 ff5f 	bl	800b456 <__any_on>
 800a598:	4683      	mov	fp, r0
 800a59a:	b1b8      	cbz	r0, 800a5cc <__gethex+0x1dc>
 800a59c:	f04f 0b01 	mov.w	fp, #1
 800a5a0:	f108 33ff 	add.w	r3, r8, #4294967295
 800a5a4:	1159      	asrs	r1, r3, #5
 800a5a6:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a5aa:	f003 021f 	and.w	r2, r3, #31
 800a5ae:	fa0b f202 	lsl.w	r2, fp, r2
 800a5b2:	420a      	tst	r2, r1
 800a5b4:	d00a      	beq.n	800a5cc <__gethex+0x1dc>
 800a5b6:	455b      	cmp	r3, fp
 800a5b8:	dd06      	ble.n	800a5c8 <__gethex+0x1d8>
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f1a8 0102 	sub.w	r1, r8, #2
 800a5c0:	f000 ff49 	bl	800b456 <__any_on>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d138      	bne.n	800a63a <__gethex+0x24a>
 800a5c8:	f04f 0b02 	mov.w	fp, #2
 800a5cc:	4641      	mov	r1, r8
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7ff fea6 	bl	800a320 <rshift>
 800a5d4:	4446      	add	r6, r8
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	42b3      	cmp	r3, r6
 800a5da:	da41      	bge.n	800a660 <__gethex+0x270>
 800a5dc:	4621      	mov	r1, r4
 800a5de:	4648      	mov	r0, r9
 800a5e0:	f000 fafe 	bl	800abe0 <_Bfree>
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	e789      	b.n	800a504 <__gethex+0x114>
 800a5f0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a5f4:	2a2e      	cmp	r2, #46	; 0x2e
 800a5f6:	d014      	beq.n	800a622 <__gethex+0x232>
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	d106      	bne.n	800a60a <__gethex+0x21a>
 800a5fc:	9b01      	ldr	r3, [sp, #4]
 800a5fe:	f843 bb04 	str.w	fp, [r3], #4
 800a602:	f04f 0b00 	mov.w	fp, #0
 800a606:	9301      	str	r3, [sp, #4]
 800a608:	465b      	mov	r3, fp
 800a60a:	7828      	ldrb	r0, [r5, #0]
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	f7ff feda 	bl	800a3c6 <__hexdig_fun>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	f000 000f 	and.w	r0, r0, #15
 800a618:	4098      	lsls	r0, r3
 800a61a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a61e:	3304      	adds	r3, #4
 800a620:	e79f      	b.n	800a562 <__gethex+0x172>
 800a622:	45a8      	cmp	r8, r5
 800a624:	d8e8      	bhi.n	800a5f8 <__gethex+0x208>
 800a626:	2201      	movs	r2, #1
 800a628:	4628      	mov	r0, r5
 800a62a:	4928      	ldr	r1, [pc, #160]	; (800a6cc <__gethex+0x2dc>)
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	f7fe ff17 	bl	8009460 <strncmp>
 800a632:	9b03      	ldr	r3, [sp, #12]
 800a634:	2800      	cmp	r0, #0
 800a636:	d1df      	bne.n	800a5f8 <__gethex+0x208>
 800a638:	e793      	b.n	800a562 <__gethex+0x172>
 800a63a:	f04f 0b03 	mov.w	fp, #3
 800a63e:	e7c5      	b.n	800a5cc <__gethex+0x1dc>
 800a640:	da0b      	bge.n	800a65a <__gethex+0x26a>
 800a642:	eba5 0808 	sub.w	r8, r5, r8
 800a646:	4621      	mov	r1, r4
 800a648:	4642      	mov	r2, r8
 800a64a:	4648      	mov	r0, r9
 800a64c:	f000 fce0 	bl	800b010 <__lshift>
 800a650:	4604      	mov	r4, r0
 800a652:	eba6 0608 	sub.w	r6, r6, r8
 800a656:	f100 0a14 	add.w	sl, r0, #20
 800a65a:	f04f 0b00 	mov.w	fp, #0
 800a65e:	e7ba      	b.n	800a5d6 <__gethex+0x1e6>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	42b3      	cmp	r3, r6
 800a664:	dd74      	ble.n	800a750 <__gethex+0x360>
 800a666:	1b9e      	subs	r6, r3, r6
 800a668:	42b5      	cmp	r5, r6
 800a66a:	dc35      	bgt.n	800a6d8 <__gethex+0x2e8>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d023      	beq.n	800a6ba <__gethex+0x2ca>
 800a672:	2b03      	cmp	r3, #3
 800a674:	d025      	beq.n	800a6c2 <__gethex+0x2d2>
 800a676:	2b01      	cmp	r3, #1
 800a678:	d115      	bne.n	800a6a6 <__gethex+0x2b6>
 800a67a:	42b5      	cmp	r5, r6
 800a67c:	d113      	bne.n	800a6a6 <__gethex+0x2b6>
 800a67e:	2d01      	cmp	r5, #1
 800a680:	d10b      	bne.n	800a69a <__gethex+0x2aa>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	9a02      	ldr	r2, [sp, #8]
 800a686:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	2301      	movs	r3, #1
 800a68e:	6123      	str	r3, [r4, #16]
 800a690:	f8ca 3000 	str.w	r3, [sl]
 800a694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a696:	601c      	str	r4, [r3, #0]
 800a698:	e734      	b.n	800a504 <__gethex+0x114>
 800a69a:	4620      	mov	r0, r4
 800a69c:	1e69      	subs	r1, r5, #1
 800a69e:	f000 feda 	bl	800b456 <__any_on>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d1ed      	bne.n	800a682 <__gethex+0x292>
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4648      	mov	r0, r9
 800a6aa:	f000 fa99 	bl	800abe0 <_Bfree>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6b2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a6b6:	6013      	str	r3, [r2, #0]
 800a6b8:	e724      	b.n	800a504 <__gethex+0x114>
 800a6ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1f2      	bne.n	800a6a6 <__gethex+0x2b6>
 800a6c0:	e7df      	b.n	800a682 <__gethex+0x292>
 800a6c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d1dc      	bne.n	800a682 <__gethex+0x292>
 800a6c8:	e7ed      	b.n	800a6a6 <__gethex+0x2b6>
 800a6ca:	bf00      	nop
 800a6cc:	0800c0a2 	.word	0x0800c0a2
 800a6d0:	0800c2b1 	.word	0x0800c2b1
 800a6d4:	0800c2c2 	.word	0x0800c2c2
 800a6d8:	f106 38ff 	add.w	r8, r6, #4294967295
 800a6dc:	f1bb 0f00 	cmp.w	fp, #0
 800a6e0:	d133      	bne.n	800a74a <__gethex+0x35a>
 800a6e2:	f1b8 0f00 	cmp.w	r8, #0
 800a6e6:	d004      	beq.n	800a6f2 <__gethex+0x302>
 800a6e8:	4641      	mov	r1, r8
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f000 feb3 	bl	800b456 <__any_on>
 800a6f0:	4683      	mov	fp, r0
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a6f8:	f008 081f 	and.w	r8, r8, #31
 800a6fc:	fa03 f308 	lsl.w	r3, r3, r8
 800a700:	f04f 0802 	mov.w	r8, #2
 800a704:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a708:	4631      	mov	r1, r6
 800a70a:	4213      	tst	r3, r2
 800a70c:	4620      	mov	r0, r4
 800a70e:	bf18      	it	ne
 800a710:	f04b 0b02 	orrne.w	fp, fp, #2
 800a714:	1bad      	subs	r5, r5, r6
 800a716:	f7ff fe03 	bl	800a320 <rshift>
 800a71a:	687e      	ldr	r6, [r7, #4]
 800a71c:	f1bb 0f00 	cmp.w	fp, #0
 800a720:	d04a      	beq.n	800a7b8 <__gethex+0x3c8>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d016      	beq.n	800a756 <__gethex+0x366>
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d018      	beq.n	800a75e <__gethex+0x36e>
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d109      	bne.n	800a744 <__gethex+0x354>
 800a730:	f01b 0f02 	tst.w	fp, #2
 800a734:	d006      	beq.n	800a744 <__gethex+0x354>
 800a736:	f8da 3000 	ldr.w	r3, [sl]
 800a73a:	ea4b 0b03 	orr.w	fp, fp, r3
 800a73e:	f01b 0f01 	tst.w	fp, #1
 800a742:	d10f      	bne.n	800a764 <__gethex+0x374>
 800a744:	f048 0810 	orr.w	r8, r8, #16
 800a748:	e036      	b.n	800a7b8 <__gethex+0x3c8>
 800a74a:	f04f 0b01 	mov.w	fp, #1
 800a74e:	e7d0      	b.n	800a6f2 <__gethex+0x302>
 800a750:	f04f 0801 	mov.w	r8, #1
 800a754:	e7e2      	b.n	800a71c <__gethex+0x32c>
 800a756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a758:	f1c3 0301 	rsb	r3, r3, #1
 800a75c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a75e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d0ef      	beq.n	800a744 <__gethex+0x354>
 800a764:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a768:	f104 0214 	add.w	r2, r4, #20
 800a76c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	2300      	movs	r3, #0
 800a774:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a778:	4694      	mov	ip, r2
 800a77a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a77e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a782:	d01e      	beq.n	800a7c2 <__gethex+0x3d2>
 800a784:	3101      	adds	r1, #1
 800a786:	f8cc 1000 	str.w	r1, [ip]
 800a78a:	f1b8 0f02 	cmp.w	r8, #2
 800a78e:	f104 0214 	add.w	r2, r4, #20
 800a792:	d13d      	bne.n	800a810 <__gethex+0x420>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	3b01      	subs	r3, #1
 800a798:	42ab      	cmp	r3, r5
 800a79a:	d10b      	bne.n	800a7b4 <__gethex+0x3c4>
 800a79c:	2301      	movs	r3, #1
 800a79e:	1169      	asrs	r1, r5, #5
 800a7a0:	f005 051f 	and.w	r5, r5, #31
 800a7a4:	fa03 f505 	lsl.w	r5, r3, r5
 800a7a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7ac:	421d      	tst	r5, r3
 800a7ae:	bf18      	it	ne
 800a7b0:	f04f 0801 	movne.w	r8, #1
 800a7b4:	f048 0820 	orr.w	r8, r8, #32
 800a7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ba:	601c      	str	r4, [r3, #0]
 800a7bc:	9b02      	ldr	r3, [sp, #8]
 800a7be:	601e      	str	r6, [r3, #0]
 800a7c0:	e6a0      	b.n	800a504 <__gethex+0x114>
 800a7c2:	4290      	cmp	r0, r2
 800a7c4:	f842 3c04 	str.w	r3, [r2, #-4]
 800a7c8:	d8d6      	bhi.n	800a778 <__gethex+0x388>
 800a7ca:	68a2      	ldr	r2, [r4, #8]
 800a7cc:	4593      	cmp	fp, r2
 800a7ce:	db17      	blt.n	800a800 <__gethex+0x410>
 800a7d0:	6861      	ldr	r1, [r4, #4]
 800a7d2:	4648      	mov	r0, r9
 800a7d4:	3101      	adds	r1, #1
 800a7d6:	f000 f9c3 	bl	800ab60 <_Balloc>
 800a7da:	4682      	mov	sl, r0
 800a7dc:	b918      	cbnz	r0, 800a7e6 <__gethex+0x3f6>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	2184      	movs	r1, #132	; 0x84
 800a7e2:	4b1a      	ldr	r3, [pc, #104]	; (800a84c <__gethex+0x45c>)
 800a7e4:	e6b1      	b.n	800a54a <__gethex+0x15a>
 800a7e6:	6922      	ldr	r2, [r4, #16]
 800a7e8:	f104 010c 	add.w	r1, r4, #12
 800a7ec:	3202      	adds	r2, #2
 800a7ee:	0092      	lsls	r2, r2, #2
 800a7f0:	300c      	adds	r0, #12
 800a7f2:	f7fe fecb 	bl	800958c <memcpy>
 800a7f6:	4621      	mov	r1, r4
 800a7f8:	4648      	mov	r0, r9
 800a7fa:	f000 f9f1 	bl	800abe0 <_Bfree>
 800a7fe:	4654      	mov	r4, sl
 800a800:	6922      	ldr	r2, [r4, #16]
 800a802:	1c51      	adds	r1, r2, #1
 800a804:	6121      	str	r1, [r4, #16]
 800a806:	2101      	movs	r1, #1
 800a808:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a80c:	6151      	str	r1, [r2, #20]
 800a80e:	e7bc      	b.n	800a78a <__gethex+0x39a>
 800a810:	6921      	ldr	r1, [r4, #16]
 800a812:	4559      	cmp	r1, fp
 800a814:	dd0b      	ble.n	800a82e <__gethex+0x43e>
 800a816:	2101      	movs	r1, #1
 800a818:	4620      	mov	r0, r4
 800a81a:	f7ff fd81 	bl	800a320 <rshift>
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	3601      	adds	r6, #1
 800a822:	42b3      	cmp	r3, r6
 800a824:	f6ff aeda 	blt.w	800a5dc <__gethex+0x1ec>
 800a828:	f04f 0801 	mov.w	r8, #1
 800a82c:	e7c2      	b.n	800a7b4 <__gethex+0x3c4>
 800a82e:	f015 051f 	ands.w	r5, r5, #31
 800a832:	d0f9      	beq.n	800a828 <__gethex+0x438>
 800a834:	9b01      	ldr	r3, [sp, #4]
 800a836:	f1c5 0520 	rsb	r5, r5, #32
 800a83a:	441a      	add	r2, r3
 800a83c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a840:	f000 fa80 	bl	800ad44 <__hi0bits>
 800a844:	42a8      	cmp	r0, r5
 800a846:	dbe6      	blt.n	800a816 <__gethex+0x426>
 800a848:	e7ee      	b.n	800a828 <__gethex+0x438>
 800a84a:	bf00      	nop
 800a84c:	0800c2b1 	.word	0x0800c2b1

0800a850 <L_shift>:
 800a850:	f1c2 0208 	rsb	r2, r2, #8
 800a854:	0092      	lsls	r2, r2, #2
 800a856:	b570      	push	{r4, r5, r6, lr}
 800a858:	f1c2 0620 	rsb	r6, r2, #32
 800a85c:	6843      	ldr	r3, [r0, #4]
 800a85e:	6804      	ldr	r4, [r0, #0]
 800a860:	fa03 f506 	lsl.w	r5, r3, r6
 800a864:	432c      	orrs	r4, r5
 800a866:	40d3      	lsrs	r3, r2
 800a868:	6004      	str	r4, [r0, #0]
 800a86a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a86e:	4288      	cmp	r0, r1
 800a870:	d3f4      	bcc.n	800a85c <L_shift+0xc>
 800a872:	bd70      	pop	{r4, r5, r6, pc}

0800a874 <__match>:
 800a874:	b530      	push	{r4, r5, lr}
 800a876:	6803      	ldr	r3, [r0, #0]
 800a878:	3301      	adds	r3, #1
 800a87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a87e:	b914      	cbnz	r4, 800a886 <__match+0x12>
 800a880:	6003      	str	r3, [r0, #0]
 800a882:	2001      	movs	r0, #1
 800a884:	bd30      	pop	{r4, r5, pc}
 800a886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a88a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a88e:	2d19      	cmp	r5, #25
 800a890:	bf98      	it	ls
 800a892:	3220      	addls	r2, #32
 800a894:	42a2      	cmp	r2, r4
 800a896:	d0f0      	beq.n	800a87a <__match+0x6>
 800a898:	2000      	movs	r0, #0
 800a89a:	e7f3      	b.n	800a884 <__match+0x10>

0800a89c <__hexnan>:
 800a89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a0:	2500      	movs	r5, #0
 800a8a2:	680b      	ldr	r3, [r1, #0]
 800a8a4:	4682      	mov	sl, r0
 800a8a6:	115e      	asrs	r6, r3, #5
 800a8a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a8ac:	f013 031f 	ands.w	r3, r3, #31
 800a8b0:	bf18      	it	ne
 800a8b2:	3604      	addne	r6, #4
 800a8b4:	1f37      	subs	r7, r6, #4
 800a8b6:	4690      	mov	r8, r2
 800a8b8:	46b9      	mov	r9, r7
 800a8ba:	463c      	mov	r4, r7
 800a8bc:	46ab      	mov	fp, r5
 800a8be:	b087      	sub	sp, #28
 800a8c0:	6801      	ldr	r1, [r0, #0]
 800a8c2:	9301      	str	r3, [sp, #4]
 800a8c4:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8c8:	9502      	str	r5, [sp, #8]
 800a8ca:	784a      	ldrb	r2, [r1, #1]
 800a8cc:	1c4b      	adds	r3, r1, #1
 800a8ce:	9303      	str	r3, [sp, #12]
 800a8d0:	b342      	cbz	r2, 800a924 <__hexnan+0x88>
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	9105      	str	r1, [sp, #20]
 800a8d6:	9204      	str	r2, [sp, #16]
 800a8d8:	f7ff fd75 	bl	800a3c6 <__hexdig_fun>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d14f      	bne.n	800a980 <__hexnan+0xe4>
 800a8e0:	9a04      	ldr	r2, [sp, #16]
 800a8e2:	9905      	ldr	r1, [sp, #20]
 800a8e4:	2a20      	cmp	r2, #32
 800a8e6:	d818      	bhi.n	800a91a <__hexnan+0x7e>
 800a8e8:	9b02      	ldr	r3, [sp, #8]
 800a8ea:	459b      	cmp	fp, r3
 800a8ec:	dd13      	ble.n	800a916 <__hexnan+0x7a>
 800a8ee:	454c      	cmp	r4, r9
 800a8f0:	d206      	bcs.n	800a900 <__hexnan+0x64>
 800a8f2:	2d07      	cmp	r5, #7
 800a8f4:	dc04      	bgt.n	800a900 <__hexnan+0x64>
 800a8f6:	462a      	mov	r2, r5
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7ff ffa8 	bl	800a850 <L_shift>
 800a900:	4544      	cmp	r4, r8
 800a902:	d950      	bls.n	800a9a6 <__hexnan+0x10a>
 800a904:	2300      	movs	r3, #0
 800a906:	f1a4 0904 	sub.w	r9, r4, #4
 800a90a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a90e:	461d      	mov	r5, r3
 800a910:	464c      	mov	r4, r9
 800a912:	f8cd b008 	str.w	fp, [sp, #8]
 800a916:	9903      	ldr	r1, [sp, #12]
 800a918:	e7d7      	b.n	800a8ca <__hexnan+0x2e>
 800a91a:	2a29      	cmp	r2, #41	; 0x29
 800a91c:	d155      	bne.n	800a9ca <__hexnan+0x12e>
 800a91e:	3102      	adds	r1, #2
 800a920:	f8ca 1000 	str.w	r1, [sl]
 800a924:	f1bb 0f00 	cmp.w	fp, #0
 800a928:	d04f      	beq.n	800a9ca <__hexnan+0x12e>
 800a92a:	454c      	cmp	r4, r9
 800a92c:	d206      	bcs.n	800a93c <__hexnan+0xa0>
 800a92e:	2d07      	cmp	r5, #7
 800a930:	dc04      	bgt.n	800a93c <__hexnan+0xa0>
 800a932:	462a      	mov	r2, r5
 800a934:	4649      	mov	r1, r9
 800a936:	4620      	mov	r0, r4
 800a938:	f7ff ff8a 	bl	800a850 <L_shift>
 800a93c:	4544      	cmp	r4, r8
 800a93e:	d934      	bls.n	800a9aa <__hexnan+0x10e>
 800a940:	4623      	mov	r3, r4
 800a942:	f1a8 0204 	sub.w	r2, r8, #4
 800a946:	f853 1b04 	ldr.w	r1, [r3], #4
 800a94a:	429f      	cmp	r7, r3
 800a94c:	f842 1f04 	str.w	r1, [r2, #4]!
 800a950:	d2f9      	bcs.n	800a946 <__hexnan+0xaa>
 800a952:	1b3b      	subs	r3, r7, r4
 800a954:	f023 0303 	bic.w	r3, r3, #3
 800a958:	3304      	adds	r3, #4
 800a95a:	3e03      	subs	r6, #3
 800a95c:	3401      	adds	r4, #1
 800a95e:	42a6      	cmp	r6, r4
 800a960:	bf38      	it	cc
 800a962:	2304      	movcc	r3, #4
 800a964:	2200      	movs	r2, #0
 800a966:	4443      	add	r3, r8
 800a968:	f843 2b04 	str.w	r2, [r3], #4
 800a96c:	429f      	cmp	r7, r3
 800a96e:	d2fb      	bcs.n	800a968 <__hexnan+0xcc>
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	b91b      	cbnz	r3, 800a97c <__hexnan+0xe0>
 800a974:	4547      	cmp	r7, r8
 800a976:	d126      	bne.n	800a9c6 <__hexnan+0x12a>
 800a978:	2301      	movs	r3, #1
 800a97a:	603b      	str	r3, [r7, #0]
 800a97c:	2005      	movs	r0, #5
 800a97e:	e025      	b.n	800a9cc <__hexnan+0x130>
 800a980:	3501      	adds	r5, #1
 800a982:	2d08      	cmp	r5, #8
 800a984:	f10b 0b01 	add.w	fp, fp, #1
 800a988:	dd06      	ble.n	800a998 <__hexnan+0xfc>
 800a98a:	4544      	cmp	r4, r8
 800a98c:	d9c3      	bls.n	800a916 <__hexnan+0x7a>
 800a98e:	2300      	movs	r3, #0
 800a990:	2501      	movs	r5, #1
 800a992:	f844 3c04 	str.w	r3, [r4, #-4]
 800a996:	3c04      	subs	r4, #4
 800a998:	6822      	ldr	r2, [r4, #0]
 800a99a:	f000 000f 	and.w	r0, r0, #15
 800a99e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a9a2:	6020      	str	r0, [r4, #0]
 800a9a4:	e7b7      	b.n	800a916 <__hexnan+0x7a>
 800a9a6:	2508      	movs	r5, #8
 800a9a8:	e7b5      	b.n	800a916 <__hexnan+0x7a>
 800a9aa:	9b01      	ldr	r3, [sp, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0df      	beq.n	800a970 <__hexnan+0xd4>
 800a9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9b4:	f1c3 0320 	rsb	r3, r3, #32
 800a9b8:	40da      	lsrs	r2, r3
 800a9ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a9c4:	e7d4      	b.n	800a970 <__hexnan+0xd4>
 800a9c6:	3f04      	subs	r7, #4
 800a9c8:	e7d2      	b.n	800a970 <__hexnan+0xd4>
 800a9ca:	2004      	movs	r0, #4
 800a9cc:	b007      	add	sp, #28
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a9d4 <malloc>:
 800a9d4:	4b02      	ldr	r3, [pc, #8]	; (800a9e0 <malloc+0xc>)
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	f000 b823 	b.w	800aa24 <_malloc_r>
 800a9de:	bf00      	nop
 800a9e0:	200001d0 	.word	0x200001d0

0800a9e4 <sbrk_aligned>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	4e0e      	ldr	r6, [pc, #56]	; (800aa20 <sbrk_aligned+0x3c>)
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	6831      	ldr	r1, [r6, #0]
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	b911      	cbnz	r1, 800a9f6 <sbrk_aligned+0x12>
 800a9f0:	f000 ffce 	bl	800b990 <_sbrk_r>
 800a9f4:	6030      	str	r0, [r6, #0]
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	f000 ffc9 	bl	800b990 <_sbrk_r>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	d00a      	beq.n	800aa18 <sbrk_aligned+0x34>
 800aa02:	1cc4      	adds	r4, r0, #3
 800aa04:	f024 0403 	bic.w	r4, r4, #3
 800aa08:	42a0      	cmp	r0, r4
 800aa0a:	d007      	beq.n	800aa1c <sbrk_aligned+0x38>
 800aa0c:	1a21      	subs	r1, r4, r0
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f000 ffbe 	bl	800b990 <_sbrk_r>
 800aa14:	3001      	adds	r0, #1
 800aa16:	d101      	bne.n	800aa1c <sbrk_aligned+0x38>
 800aa18:	f04f 34ff 	mov.w	r4, #4294967295
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	bd70      	pop	{r4, r5, r6, pc}
 800aa20:	20000608 	.word	0x20000608

0800aa24 <_malloc_r>:
 800aa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa28:	1ccd      	adds	r5, r1, #3
 800aa2a:	f025 0503 	bic.w	r5, r5, #3
 800aa2e:	3508      	adds	r5, #8
 800aa30:	2d0c      	cmp	r5, #12
 800aa32:	bf38      	it	cc
 800aa34:	250c      	movcc	r5, #12
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	4607      	mov	r7, r0
 800aa3a:	db01      	blt.n	800aa40 <_malloc_r+0x1c>
 800aa3c:	42a9      	cmp	r1, r5
 800aa3e:	d905      	bls.n	800aa4c <_malloc_r+0x28>
 800aa40:	230c      	movs	r3, #12
 800aa42:	2600      	movs	r6, #0
 800aa44:	603b      	str	r3, [r7, #0]
 800aa46:	4630      	mov	r0, r6
 800aa48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab20 <_malloc_r+0xfc>
 800aa50:	f000 f87a 	bl	800ab48 <__malloc_lock>
 800aa54:	f8d8 3000 	ldr.w	r3, [r8]
 800aa58:	461c      	mov	r4, r3
 800aa5a:	bb5c      	cbnz	r4, 800aab4 <_malloc_r+0x90>
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	4638      	mov	r0, r7
 800aa60:	f7ff ffc0 	bl	800a9e4 <sbrk_aligned>
 800aa64:	1c43      	adds	r3, r0, #1
 800aa66:	4604      	mov	r4, r0
 800aa68:	d155      	bne.n	800ab16 <_malloc_r+0xf2>
 800aa6a:	f8d8 4000 	ldr.w	r4, [r8]
 800aa6e:	4626      	mov	r6, r4
 800aa70:	2e00      	cmp	r6, #0
 800aa72:	d145      	bne.n	800ab00 <_malloc_r+0xdc>
 800aa74:	2c00      	cmp	r4, #0
 800aa76:	d048      	beq.n	800ab0a <_malloc_r+0xe6>
 800aa78:	6823      	ldr	r3, [r4, #0]
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	eb04 0903 	add.w	r9, r4, r3
 800aa82:	f000 ff85 	bl	800b990 <_sbrk_r>
 800aa86:	4581      	cmp	r9, r0
 800aa88:	d13f      	bne.n	800ab0a <_malloc_r+0xe6>
 800aa8a:	6821      	ldr	r1, [r4, #0]
 800aa8c:	4638      	mov	r0, r7
 800aa8e:	1a6d      	subs	r5, r5, r1
 800aa90:	4629      	mov	r1, r5
 800aa92:	f7ff ffa7 	bl	800a9e4 <sbrk_aligned>
 800aa96:	3001      	adds	r0, #1
 800aa98:	d037      	beq.n	800ab0a <_malloc_r+0xe6>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	442b      	add	r3, r5
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d038      	beq.n	800ab1a <_malloc_r+0xf6>
 800aaa8:	685a      	ldr	r2, [r3, #4]
 800aaaa:	42a2      	cmp	r2, r4
 800aaac:	d12b      	bne.n	800ab06 <_malloc_r+0xe2>
 800aaae:	2200      	movs	r2, #0
 800aab0:	605a      	str	r2, [r3, #4]
 800aab2:	e00f      	b.n	800aad4 <_malloc_r+0xb0>
 800aab4:	6822      	ldr	r2, [r4, #0]
 800aab6:	1b52      	subs	r2, r2, r5
 800aab8:	d41f      	bmi.n	800aafa <_malloc_r+0xd6>
 800aaba:	2a0b      	cmp	r2, #11
 800aabc:	d917      	bls.n	800aaee <_malloc_r+0xca>
 800aabe:	1961      	adds	r1, r4, r5
 800aac0:	42a3      	cmp	r3, r4
 800aac2:	6025      	str	r5, [r4, #0]
 800aac4:	bf18      	it	ne
 800aac6:	6059      	strne	r1, [r3, #4]
 800aac8:	6863      	ldr	r3, [r4, #4]
 800aaca:	bf08      	it	eq
 800aacc:	f8c8 1000 	streq.w	r1, [r8]
 800aad0:	5162      	str	r2, [r4, r5]
 800aad2:	604b      	str	r3, [r1, #4]
 800aad4:	4638      	mov	r0, r7
 800aad6:	f104 060b 	add.w	r6, r4, #11
 800aada:	f000 f83b 	bl	800ab54 <__malloc_unlock>
 800aade:	f026 0607 	bic.w	r6, r6, #7
 800aae2:	1d23      	adds	r3, r4, #4
 800aae4:	1af2      	subs	r2, r6, r3
 800aae6:	d0ae      	beq.n	800aa46 <_malloc_r+0x22>
 800aae8:	1b9b      	subs	r3, r3, r6
 800aaea:	50a3      	str	r3, [r4, r2]
 800aaec:	e7ab      	b.n	800aa46 <_malloc_r+0x22>
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	6862      	ldr	r2, [r4, #4]
 800aaf2:	d1dd      	bne.n	800aab0 <_malloc_r+0x8c>
 800aaf4:	f8c8 2000 	str.w	r2, [r8]
 800aaf8:	e7ec      	b.n	800aad4 <_malloc_r+0xb0>
 800aafa:	4623      	mov	r3, r4
 800aafc:	6864      	ldr	r4, [r4, #4]
 800aafe:	e7ac      	b.n	800aa5a <_malloc_r+0x36>
 800ab00:	4634      	mov	r4, r6
 800ab02:	6876      	ldr	r6, [r6, #4]
 800ab04:	e7b4      	b.n	800aa70 <_malloc_r+0x4c>
 800ab06:	4613      	mov	r3, r2
 800ab08:	e7cc      	b.n	800aaa4 <_malloc_r+0x80>
 800ab0a:	230c      	movs	r3, #12
 800ab0c:	4638      	mov	r0, r7
 800ab0e:	603b      	str	r3, [r7, #0]
 800ab10:	f000 f820 	bl	800ab54 <__malloc_unlock>
 800ab14:	e797      	b.n	800aa46 <_malloc_r+0x22>
 800ab16:	6025      	str	r5, [r4, #0]
 800ab18:	e7dc      	b.n	800aad4 <_malloc_r+0xb0>
 800ab1a:	605b      	str	r3, [r3, #4]
 800ab1c:	deff      	udf	#255	; 0xff
 800ab1e:	bf00      	nop
 800ab20:	20000604 	.word	0x20000604

0800ab24 <__ascii_mbtowc>:
 800ab24:	b082      	sub	sp, #8
 800ab26:	b901      	cbnz	r1, 800ab2a <__ascii_mbtowc+0x6>
 800ab28:	a901      	add	r1, sp, #4
 800ab2a:	b142      	cbz	r2, 800ab3e <__ascii_mbtowc+0x1a>
 800ab2c:	b14b      	cbz	r3, 800ab42 <__ascii_mbtowc+0x1e>
 800ab2e:	7813      	ldrb	r3, [r2, #0]
 800ab30:	600b      	str	r3, [r1, #0]
 800ab32:	7812      	ldrb	r2, [r2, #0]
 800ab34:	1e10      	subs	r0, r2, #0
 800ab36:	bf18      	it	ne
 800ab38:	2001      	movne	r0, #1
 800ab3a:	b002      	add	sp, #8
 800ab3c:	4770      	bx	lr
 800ab3e:	4610      	mov	r0, r2
 800ab40:	e7fb      	b.n	800ab3a <__ascii_mbtowc+0x16>
 800ab42:	f06f 0001 	mvn.w	r0, #1
 800ab46:	e7f8      	b.n	800ab3a <__ascii_mbtowc+0x16>

0800ab48 <__malloc_lock>:
 800ab48:	4801      	ldr	r0, [pc, #4]	; (800ab50 <__malloc_lock+0x8>)
 800ab4a:	f7fe bd0f 	b.w	800956c <__retarget_lock_acquire_recursive>
 800ab4e:	bf00      	nop
 800ab50:	20000600 	.word	0x20000600

0800ab54 <__malloc_unlock>:
 800ab54:	4801      	ldr	r0, [pc, #4]	; (800ab5c <__malloc_unlock+0x8>)
 800ab56:	f7fe bd0a 	b.w	800956e <__retarget_lock_release_recursive>
 800ab5a:	bf00      	nop
 800ab5c:	20000600 	.word	0x20000600

0800ab60 <_Balloc>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	69c6      	ldr	r6, [r0, #28]
 800ab64:	4604      	mov	r4, r0
 800ab66:	460d      	mov	r5, r1
 800ab68:	b976      	cbnz	r6, 800ab88 <_Balloc+0x28>
 800ab6a:	2010      	movs	r0, #16
 800ab6c:	f7ff ff32 	bl	800a9d4 <malloc>
 800ab70:	4602      	mov	r2, r0
 800ab72:	61e0      	str	r0, [r4, #28]
 800ab74:	b920      	cbnz	r0, 800ab80 <_Balloc+0x20>
 800ab76:	216b      	movs	r1, #107	; 0x6b
 800ab78:	4b17      	ldr	r3, [pc, #92]	; (800abd8 <_Balloc+0x78>)
 800ab7a:	4818      	ldr	r0, [pc, #96]	; (800abdc <_Balloc+0x7c>)
 800ab7c:	f000 ff18 	bl	800b9b0 <__assert_func>
 800ab80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab84:	6006      	str	r6, [r0, #0]
 800ab86:	60c6      	str	r6, [r0, #12]
 800ab88:	69e6      	ldr	r6, [r4, #28]
 800ab8a:	68f3      	ldr	r3, [r6, #12]
 800ab8c:	b183      	cbz	r3, 800abb0 <_Balloc+0x50>
 800ab8e:	69e3      	ldr	r3, [r4, #28]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab96:	b9b8      	cbnz	r0, 800abc8 <_Balloc+0x68>
 800ab98:	2101      	movs	r1, #1
 800ab9a:	fa01 f605 	lsl.w	r6, r1, r5
 800ab9e:	1d72      	adds	r2, r6, #5
 800aba0:	4620      	mov	r0, r4
 800aba2:	0092      	lsls	r2, r2, #2
 800aba4:	f000 ff22 	bl	800b9ec <_calloc_r>
 800aba8:	b160      	cbz	r0, 800abc4 <_Balloc+0x64>
 800abaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abae:	e00e      	b.n	800abce <_Balloc+0x6e>
 800abb0:	2221      	movs	r2, #33	; 0x21
 800abb2:	2104      	movs	r1, #4
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 ff19 	bl	800b9ec <_calloc_r>
 800abba:	69e3      	ldr	r3, [r4, #28]
 800abbc:	60f0      	str	r0, [r6, #12]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1e4      	bne.n	800ab8e <_Balloc+0x2e>
 800abc4:	2000      	movs	r0, #0
 800abc6:	bd70      	pop	{r4, r5, r6, pc}
 800abc8:	6802      	ldr	r2, [r0, #0]
 800abca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abce:	2300      	movs	r3, #0
 800abd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abd4:	e7f7      	b.n	800abc6 <_Balloc+0x66>
 800abd6:	bf00      	nop
 800abd8:	0800c242 	.word	0x0800c242
 800abdc:	0800c322 	.word	0x0800c322

0800abe0 <_Bfree>:
 800abe0:	b570      	push	{r4, r5, r6, lr}
 800abe2:	69c6      	ldr	r6, [r0, #28]
 800abe4:	4605      	mov	r5, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	b976      	cbnz	r6, 800ac08 <_Bfree+0x28>
 800abea:	2010      	movs	r0, #16
 800abec:	f7ff fef2 	bl	800a9d4 <malloc>
 800abf0:	4602      	mov	r2, r0
 800abf2:	61e8      	str	r0, [r5, #28]
 800abf4:	b920      	cbnz	r0, 800ac00 <_Bfree+0x20>
 800abf6:	218f      	movs	r1, #143	; 0x8f
 800abf8:	4b08      	ldr	r3, [pc, #32]	; (800ac1c <_Bfree+0x3c>)
 800abfa:	4809      	ldr	r0, [pc, #36]	; (800ac20 <_Bfree+0x40>)
 800abfc:	f000 fed8 	bl	800b9b0 <__assert_func>
 800ac00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac04:	6006      	str	r6, [r0, #0]
 800ac06:	60c6      	str	r6, [r0, #12]
 800ac08:	b13c      	cbz	r4, 800ac1a <_Bfree+0x3a>
 800ac0a:	69eb      	ldr	r3, [r5, #28]
 800ac0c:	6862      	ldr	r2, [r4, #4]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac14:	6021      	str	r1, [r4, #0]
 800ac16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	0800c242 	.word	0x0800c242
 800ac20:	0800c322 	.word	0x0800c322

0800ac24 <__multadd>:
 800ac24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac28:	4607      	mov	r7, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	461e      	mov	r6, r3
 800ac2e:	2000      	movs	r0, #0
 800ac30:	690d      	ldr	r5, [r1, #16]
 800ac32:	f101 0c14 	add.w	ip, r1, #20
 800ac36:	f8dc 3000 	ldr.w	r3, [ip]
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	b299      	uxth	r1, r3
 800ac3e:	fb02 6101 	mla	r1, r2, r1, r6
 800ac42:	0c1e      	lsrs	r6, r3, #16
 800ac44:	0c0b      	lsrs	r3, r1, #16
 800ac46:	fb02 3306 	mla	r3, r2, r6, r3
 800ac4a:	b289      	uxth	r1, r1
 800ac4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac50:	4285      	cmp	r5, r0
 800ac52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac56:	f84c 1b04 	str.w	r1, [ip], #4
 800ac5a:	dcec      	bgt.n	800ac36 <__multadd+0x12>
 800ac5c:	b30e      	cbz	r6, 800aca2 <__multadd+0x7e>
 800ac5e:	68a3      	ldr	r3, [r4, #8]
 800ac60:	42ab      	cmp	r3, r5
 800ac62:	dc19      	bgt.n	800ac98 <__multadd+0x74>
 800ac64:	6861      	ldr	r1, [r4, #4]
 800ac66:	4638      	mov	r0, r7
 800ac68:	3101      	adds	r1, #1
 800ac6a:	f7ff ff79 	bl	800ab60 <_Balloc>
 800ac6e:	4680      	mov	r8, r0
 800ac70:	b928      	cbnz	r0, 800ac7e <__multadd+0x5a>
 800ac72:	4602      	mov	r2, r0
 800ac74:	21ba      	movs	r1, #186	; 0xba
 800ac76:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <__multadd+0x84>)
 800ac78:	480c      	ldr	r0, [pc, #48]	; (800acac <__multadd+0x88>)
 800ac7a:	f000 fe99 	bl	800b9b0 <__assert_func>
 800ac7e:	6922      	ldr	r2, [r4, #16]
 800ac80:	f104 010c 	add.w	r1, r4, #12
 800ac84:	3202      	adds	r2, #2
 800ac86:	0092      	lsls	r2, r2, #2
 800ac88:	300c      	adds	r0, #12
 800ac8a:	f7fe fc7f 	bl	800958c <memcpy>
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7ff ffa5 	bl	800abe0 <_Bfree>
 800ac96:	4644      	mov	r4, r8
 800ac98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac9c:	3501      	adds	r5, #1
 800ac9e:	615e      	str	r6, [r3, #20]
 800aca0:	6125      	str	r5, [r4, #16]
 800aca2:	4620      	mov	r0, r4
 800aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca8:	0800c2b1 	.word	0x0800c2b1
 800acac:	0800c322 	.word	0x0800c322

0800acb0 <__s2b>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4615      	mov	r5, r2
 800acb6:	2209      	movs	r2, #9
 800acb8:	461f      	mov	r7, r3
 800acba:	3308      	adds	r3, #8
 800acbc:	460c      	mov	r4, r1
 800acbe:	fb93 f3f2 	sdiv	r3, r3, r2
 800acc2:	4606      	mov	r6, r0
 800acc4:	2201      	movs	r2, #1
 800acc6:	2100      	movs	r1, #0
 800acc8:	429a      	cmp	r2, r3
 800acca:	db09      	blt.n	800ace0 <__s2b+0x30>
 800accc:	4630      	mov	r0, r6
 800acce:	f7ff ff47 	bl	800ab60 <_Balloc>
 800acd2:	b940      	cbnz	r0, 800ace6 <__s2b+0x36>
 800acd4:	4602      	mov	r2, r0
 800acd6:	21d3      	movs	r1, #211	; 0xd3
 800acd8:	4b18      	ldr	r3, [pc, #96]	; (800ad3c <__s2b+0x8c>)
 800acda:	4819      	ldr	r0, [pc, #100]	; (800ad40 <__s2b+0x90>)
 800acdc:	f000 fe68 	bl	800b9b0 <__assert_func>
 800ace0:	0052      	lsls	r2, r2, #1
 800ace2:	3101      	adds	r1, #1
 800ace4:	e7f0      	b.n	800acc8 <__s2b+0x18>
 800ace6:	9b08      	ldr	r3, [sp, #32]
 800ace8:	2d09      	cmp	r5, #9
 800acea:	6143      	str	r3, [r0, #20]
 800acec:	f04f 0301 	mov.w	r3, #1
 800acf0:	6103      	str	r3, [r0, #16]
 800acf2:	dd16      	ble.n	800ad22 <__s2b+0x72>
 800acf4:	f104 0909 	add.w	r9, r4, #9
 800acf8:	46c8      	mov	r8, r9
 800acfa:	442c      	add	r4, r5
 800acfc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ad00:	4601      	mov	r1, r0
 800ad02:	220a      	movs	r2, #10
 800ad04:	4630      	mov	r0, r6
 800ad06:	3b30      	subs	r3, #48	; 0x30
 800ad08:	f7ff ff8c 	bl	800ac24 <__multadd>
 800ad0c:	45a0      	cmp	r8, r4
 800ad0e:	d1f5      	bne.n	800acfc <__s2b+0x4c>
 800ad10:	f1a5 0408 	sub.w	r4, r5, #8
 800ad14:	444c      	add	r4, r9
 800ad16:	1b2d      	subs	r5, r5, r4
 800ad18:	1963      	adds	r3, r4, r5
 800ad1a:	42bb      	cmp	r3, r7
 800ad1c:	db04      	blt.n	800ad28 <__s2b+0x78>
 800ad1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad22:	2509      	movs	r5, #9
 800ad24:	340a      	adds	r4, #10
 800ad26:	e7f6      	b.n	800ad16 <__s2b+0x66>
 800ad28:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	220a      	movs	r2, #10
 800ad30:	4630      	mov	r0, r6
 800ad32:	3b30      	subs	r3, #48	; 0x30
 800ad34:	f7ff ff76 	bl	800ac24 <__multadd>
 800ad38:	e7ee      	b.n	800ad18 <__s2b+0x68>
 800ad3a:	bf00      	nop
 800ad3c:	0800c2b1 	.word	0x0800c2b1
 800ad40:	0800c322 	.word	0x0800c322

0800ad44 <__hi0bits>:
 800ad44:	0c02      	lsrs	r2, r0, #16
 800ad46:	0412      	lsls	r2, r2, #16
 800ad48:	4603      	mov	r3, r0
 800ad4a:	b9ca      	cbnz	r2, 800ad80 <__hi0bits+0x3c>
 800ad4c:	0403      	lsls	r3, r0, #16
 800ad4e:	2010      	movs	r0, #16
 800ad50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad54:	bf04      	itt	eq
 800ad56:	021b      	lsleq	r3, r3, #8
 800ad58:	3008      	addeq	r0, #8
 800ad5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad5e:	bf04      	itt	eq
 800ad60:	011b      	lsleq	r3, r3, #4
 800ad62:	3004      	addeq	r0, #4
 800ad64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad68:	bf04      	itt	eq
 800ad6a:	009b      	lsleq	r3, r3, #2
 800ad6c:	3002      	addeq	r0, #2
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	db05      	blt.n	800ad7e <__hi0bits+0x3a>
 800ad72:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ad76:	f100 0001 	add.w	r0, r0, #1
 800ad7a:	bf08      	it	eq
 800ad7c:	2020      	moveq	r0, #32
 800ad7e:	4770      	bx	lr
 800ad80:	2000      	movs	r0, #0
 800ad82:	e7e5      	b.n	800ad50 <__hi0bits+0xc>

0800ad84 <__lo0bits>:
 800ad84:	6803      	ldr	r3, [r0, #0]
 800ad86:	4602      	mov	r2, r0
 800ad88:	f013 0007 	ands.w	r0, r3, #7
 800ad8c:	d00b      	beq.n	800ada6 <__lo0bits+0x22>
 800ad8e:	07d9      	lsls	r1, r3, #31
 800ad90:	d421      	bmi.n	800add6 <__lo0bits+0x52>
 800ad92:	0798      	lsls	r0, r3, #30
 800ad94:	bf49      	itett	mi
 800ad96:	085b      	lsrmi	r3, r3, #1
 800ad98:	089b      	lsrpl	r3, r3, #2
 800ad9a:	2001      	movmi	r0, #1
 800ad9c:	6013      	strmi	r3, [r2, #0]
 800ad9e:	bf5c      	itt	pl
 800ada0:	2002      	movpl	r0, #2
 800ada2:	6013      	strpl	r3, [r2, #0]
 800ada4:	4770      	bx	lr
 800ada6:	b299      	uxth	r1, r3
 800ada8:	b909      	cbnz	r1, 800adae <__lo0bits+0x2a>
 800adaa:	2010      	movs	r0, #16
 800adac:	0c1b      	lsrs	r3, r3, #16
 800adae:	b2d9      	uxtb	r1, r3
 800adb0:	b909      	cbnz	r1, 800adb6 <__lo0bits+0x32>
 800adb2:	3008      	adds	r0, #8
 800adb4:	0a1b      	lsrs	r3, r3, #8
 800adb6:	0719      	lsls	r1, r3, #28
 800adb8:	bf04      	itt	eq
 800adba:	091b      	lsreq	r3, r3, #4
 800adbc:	3004      	addeq	r0, #4
 800adbe:	0799      	lsls	r1, r3, #30
 800adc0:	bf04      	itt	eq
 800adc2:	089b      	lsreq	r3, r3, #2
 800adc4:	3002      	addeq	r0, #2
 800adc6:	07d9      	lsls	r1, r3, #31
 800adc8:	d403      	bmi.n	800add2 <__lo0bits+0x4e>
 800adca:	085b      	lsrs	r3, r3, #1
 800adcc:	f100 0001 	add.w	r0, r0, #1
 800add0:	d003      	beq.n	800adda <__lo0bits+0x56>
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	4770      	bx	lr
 800add6:	2000      	movs	r0, #0
 800add8:	4770      	bx	lr
 800adda:	2020      	movs	r0, #32
 800addc:	4770      	bx	lr
	...

0800ade0 <__i2b>:
 800ade0:	b510      	push	{r4, lr}
 800ade2:	460c      	mov	r4, r1
 800ade4:	2101      	movs	r1, #1
 800ade6:	f7ff febb 	bl	800ab60 <_Balloc>
 800adea:	4602      	mov	r2, r0
 800adec:	b928      	cbnz	r0, 800adfa <__i2b+0x1a>
 800adee:	f240 1145 	movw	r1, #325	; 0x145
 800adf2:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <__i2b+0x24>)
 800adf4:	4804      	ldr	r0, [pc, #16]	; (800ae08 <__i2b+0x28>)
 800adf6:	f000 fddb 	bl	800b9b0 <__assert_func>
 800adfa:	2301      	movs	r3, #1
 800adfc:	6144      	str	r4, [r0, #20]
 800adfe:	6103      	str	r3, [r0, #16]
 800ae00:	bd10      	pop	{r4, pc}
 800ae02:	bf00      	nop
 800ae04:	0800c2b1 	.word	0x0800c2b1
 800ae08:	0800c322 	.word	0x0800c322

0800ae0c <__multiply>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4691      	mov	r9, r2
 800ae12:	690a      	ldr	r2, [r1, #16]
 800ae14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae18:	460c      	mov	r4, r1
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	bfbe      	ittt	lt
 800ae1e:	460b      	movlt	r3, r1
 800ae20:	464c      	movlt	r4, r9
 800ae22:	4699      	movlt	r9, r3
 800ae24:	6927      	ldr	r7, [r4, #16]
 800ae26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	6861      	ldr	r1, [r4, #4]
 800ae2e:	eb07 060a 	add.w	r6, r7, sl
 800ae32:	42b3      	cmp	r3, r6
 800ae34:	b085      	sub	sp, #20
 800ae36:	bfb8      	it	lt
 800ae38:	3101      	addlt	r1, #1
 800ae3a:	f7ff fe91 	bl	800ab60 <_Balloc>
 800ae3e:	b930      	cbnz	r0, 800ae4e <__multiply+0x42>
 800ae40:	4602      	mov	r2, r0
 800ae42:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ae46:	4b43      	ldr	r3, [pc, #268]	; (800af54 <__multiply+0x148>)
 800ae48:	4843      	ldr	r0, [pc, #268]	; (800af58 <__multiply+0x14c>)
 800ae4a:	f000 fdb1 	bl	800b9b0 <__assert_func>
 800ae4e:	f100 0514 	add.w	r5, r0, #20
 800ae52:	462b      	mov	r3, r5
 800ae54:	2200      	movs	r2, #0
 800ae56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae5a:	4543      	cmp	r3, r8
 800ae5c:	d321      	bcc.n	800aea2 <__multiply+0x96>
 800ae5e:	f104 0314 	add.w	r3, r4, #20
 800ae62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae66:	f109 0314 	add.w	r3, r9, #20
 800ae6a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae6e:	9202      	str	r2, [sp, #8]
 800ae70:	1b3a      	subs	r2, r7, r4
 800ae72:	3a15      	subs	r2, #21
 800ae74:	f022 0203 	bic.w	r2, r2, #3
 800ae78:	3204      	adds	r2, #4
 800ae7a:	f104 0115 	add.w	r1, r4, #21
 800ae7e:	428f      	cmp	r7, r1
 800ae80:	bf38      	it	cc
 800ae82:	2204      	movcc	r2, #4
 800ae84:	9201      	str	r2, [sp, #4]
 800ae86:	9a02      	ldr	r2, [sp, #8]
 800ae88:	9303      	str	r3, [sp, #12]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d80c      	bhi.n	800aea8 <__multiply+0x9c>
 800ae8e:	2e00      	cmp	r6, #0
 800ae90:	dd03      	ble.n	800ae9a <__multiply+0x8e>
 800ae92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d05a      	beq.n	800af50 <__multiply+0x144>
 800ae9a:	6106      	str	r6, [r0, #16]
 800ae9c:	b005      	add	sp, #20
 800ae9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea2:	f843 2b04 	str.w	r2, [r3], #4
 800aea6:	e7d8      	b.n	800ae5a <__multiply+0x4e>
 800aea8:	f8b3 a000 	ldrh.w	sl, [r3]
 800aeac:	f1ba 0f00 	cmp.w	sl, #0
 800aeb0:	d023      	beq.n	800aefa <__multiply+0xee>
 800aeb2:	46a9      	mov	r9, r5
 800aeb4:	f04f 0c00 	mov.w	ip, #0
 800aeb8:	f104 0e14 	add.w	lr, r4, #20
 800aebc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aec0:	f8d9 1000 	ldr.w	r1, [r9]
 800aec4:	fa1f fb82 	uxth.w	fp, r2
 800aec8:	b289      	uxth	r1, r1
 800aeca:	fb0a 110b 	mla	r1, sl, fp, r1
 800aece:	4461      	add	r1, ip
 800aed0:	f8d9 c000 	ldr.w	ip, [r9]
 800aed4:	0c12      	lsrs	r2, r2, #16
 800aed6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800aeda:	fb0a c202 	mla	r2, sl, r2, ip
 800aede:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aee2:	b289      	uxth	r1, r1
 800aee4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aee8:	4577      	cmp	r7, lr
 800aeea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeee:	f849 1b04 	str.w	r1, [r9], #4
 800aef2:	d8e3      	bhi.n	800aebc <__multiply+0xb0>
 800aef4:	9a01      	ldr	r2, [sp, #4]
 800aef6:	f845 c002 	str.w	ip, [r5, r2]
 800aefa:	9a03      	ldr	r2, [sp, #12]
 800aefc:	3304      	adds	r3, #4
 800aefe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af02:	f1b9 0f00 	cmp.w	r9, #0
 800af06:	d021      	beq.n	800af4c <__multiply+0x140>
 800af08:	46ae      	mov	lr, r5
 800af0a:	f04f 0a00 	mov.w	sl, #0
 800af0e:	6829      	ldr	r1, [r5, #0]
 800af10:	f104 0c14 	add.w	ip, r4, #20
 800af14:	f8bc b000 	ldrh.w	fp, [ip]
 800af18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af1c:	b289      	uxth	r1, r1
 800af1e:	fb09 220b 	mla	r2, r9, fp, r2
 800af22:	4452      	add	r2, sl
 800af24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af28:	f84e 1b04 	str.w	r1, [lr], #4
 800af2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af34:	f8be 1000 	ldrh.w	r1, [lr]
 800af38:	4567      	cmp	r7, ip
 800af3a:	fb09 110a 	mla	r1, r9, sl, r1
 800af3e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800af42:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af46:	d8e5      	bhi.n	800af14 <__multiply+0x108>
 800af48:	9a01      	ldr	r2, [sp, #4]
 800af4a:	50a9      	str	r1, [r5, r2]
 800af4c:	3504      	adds	r5, #4
 800af4e:	e79a      	b.n	800ae86 <__multiply+0x7a>
 800af50:	3e01      	subs	r6, #1
 800af52:	e79c      	b.n	800ae8e <__multiply+0x82>
 800af54:	0800c2b1 	.word	0x0800c2b1
 800af58:	0800c322 	.word	0x0800c322

0800af5c <__pow5mult>:
 800af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af60:	4615      	mov	r5, r2
 800af62:	f012 0203 	ands.w	r2, r2, #3
 800af66:	4606      	mov	r6, r0
 800af68:	460f      	mov	r7, r1
 800af6a:	d007      	beq.n	800af7c <__pow5mult+0x20>
 800af6c:	4c25      	ldr	r4, [pc, #148]	; (800b004 <__pow5mult+0xa8>)
 800af6e:	3a01      	subs	r2, #1
 800af70:	2300      	movs	r3, #0
 800af72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af76:	f7ff fe55 	bl	800ac24 <__multadd>
 800af7a:	4607      	mov	r7, r0
 800af7c:	10ad      	asrs	r5, r5, #2
 800af7e:	d03d      	beq.n	800affc <__pow5mult+0xa0>
 800af80:	69f4      	ldr	r4, [r6, #28]
 800af82:	b97c      	cbnz	r4, 800afa4 <__pow5mult+0x48>
 800af84:	2010      	movs	r0, #16
 800af86:	f7ff fd25 	bl	800a9d4 <malloc>
 800af8a:	4602      	mov	r2, r0
 800af8c:	61f0      	str	r0, [r6, #28]
 800af8e:	b928      	cbnz	r0, 800af9c <__pow5mult+0x40>
 800af90:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af94:	4b1c      	ldr	r3, [pc, #112]	; (800b008 <__pow5mult+0xac>)
 800af96:	481d      	ldr	r0, [pc, #116]	; (800b00c <__pow5mult+0xb0>)
 800af98:	f000 fd0a 	bl	800b9b0 <__assert_func>
 800af9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800afa0:	6004      	str	r4, [r0, #0]
 800afa2:	60c4      	str	r4, [r0, #12]
 800afa4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800afa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800afac:	b94c      	cbnz	r4, 800afc2 <__pow5mult+0x66>
 800afae:	f240 2171 	movw	r1, #625	; 0x271
 800afb2:	4630      	mov	r0, r6
 800afb4:	f7ff ff14 	bl	800ade0 <__i2b>
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	f8c8 0008 	str.w	r0, [r8, #8]
 800afc0:	6003      	str	r3, [r0, #0]
 800afc2:	f04f 0900 	mov.w	r9, #0
 800afc6:	07eb      	lsls	r3, r5, #31
 800afc8:	d50a      	bpl.n	800afe0 <__pow5mult+0x84>
 800afca:	4639      	mov	r1, r7
 800afcc:	4622      	mov	r2, r4
 800afce:	4630      	mov	r0, r6
 800afd0:	f7ff ff1c 	bl	800ae0c <__multiply>
 800afd4:	4680      	mov	r8, r0
 800afd6:	4639      	mov	r1, r7
 800afd8:	4630      	mov	r0, r6
 800afda:	f7ff fe01 	bl	800abe0 <_Bfree>
 800afde:	4647      	mov	r7, r8
 800afe0:	106d      	asrs	r5, r5, #1
 800afe2:	d00b      	beq.n	800affc <__pow5mult+0xa0>
 800afe4:	6820      	ldr	r0, [r4, #0]
 800afe6:	b938      	cbnz	r0, 800aff8 <__pow5mult+0x9c>
 800afe8:	4622      	mov	r2, r4
 800afea:	4621      	mov	r1, r4
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff ff0d 	bl	800ae0c <__multiply>
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	f8c0 9000 	str.w	r9, [r0]
 800aff8:	4604      	mov	r4, r0
 800affa:	e7e4      	b.n	800afc6 <__pow5mult+0x6a>
 800affc:	4638      	mov	r0, r7
 800affe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b002:	bf00      	nop
 800b004:	0800c470 	.word	0x0800c470
 800b008:	0800c242 	.word	0x0800c242
 800b00c:	0800c322 	.word	0x0800c322

0800b010 <__lshift>:
 800b010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b014:	460c      	mov	r4, r1
 800b016:	4607      	mov	r7, r0
 800b018:	4691      	mov	r9, r2
 800b01a:	6923      	ldr	r3, [r4, #16]
 800b01c:	6849      	ldr	r1, [r1, #4]
 800b01e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b028:	f108 0601 	add.w	r6, r8, #1
 800b02c:	42b3      	cmp	r3, r6
 800b02e:	db0b      	blt.n	800b048 <__lshift+0x38>
 800b030:	4638      	mov	r0, r7
 800b032:	f7ff fd95 	bl	800ab60 <_Balloc>
 800b036:	4605      	mov	r5, r0
 800b038:	b948      	cbnz	r0, 800b04e <__lshift+0x3e>
 800b03a:	4602      	mov	r2, r0
 800b03c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b040:	4b27      	ldr	r3, [pc, #156]	; (800b0e0 <__lshift+0xd0>)
 800b042:	4828      	ldr	r0, [pc, #160]	; (800b0e4 <__lshift+0xd4>)
 800b044:	f000 fcb4 	bl	800b9b0 <__assert_func>
 800b048:	3101      	adds	r1, #1
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	e7ee      	b.n	800b02c <__lshift+0x1c>
 800b04e:	2300      	movs	r3, #0
 800b050:	f100 0114 	add.w	r1, r0, #20
 800b054:	f100 0210 	add.w	r2, r0, #16
 800b058:	4618      	mov	r0, r3
 800b05a:	4553      	cmp	r3, sl
 800b05c:	db33      	blt.n	800b0c6 <__lshift+0xb6>
 800b05e:	6920      	ldr	r0, [r4, #16]
 800b060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b064:	f104 0314 	add.w	r3, r4, #20
 800b068:	f019 091f 	ands.w	r9, r9, #31
 800b06c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b070:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b074:	d02b      	beq.n	800b0ce <__lshift+0xbe>
 800b076:	468a      	mov	sl, r1
 800b078:	2200      	movs	r2, #0
 800b07a:	f1c9 0e20 	rsb	lr, r9, #32
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	fa00 f009 	lsl.w	r0, r0, r9
 800b084:	4310      	orrs	r0, r2
 800b086:	f84a 0b04 	str.w	r0, [sl], #4
 800b08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b08e:	459c      	cmp	ip, r3
 800b090:	fa22 f20e 	lsr.w	r2, r2, lr
 800b094:	d8f3      	bhi.n	800b07e <__lshift+0x6e>
 800b096:	ebac 0304 	sub.w	r3, ip, r4
 800b09a:	3b15      	subs	r3, #21
 800b09c:	f023 0303 	bic.w	r3, r3, #3
 800b0a0:	3304      	adds	r3, #4
 800b0a2:	f104 0015 	add.w	r0, r4, #21
 800b0a6:	4584      	cmp	ip, r0
 800b0a8:	bf38      	it	cc
 800b0aa:	2304      	movcc	r3, #4
 800b0ac:	50ca      	str	r2, [r1, r3]
 800b0ae:	b10a      	cbz	r2, 800b0b4 <__lshift+0xa4>
 800b0b0:	f108 0602 	add.w	r6, r8, #2
 800b0b4:	3e01      	subs	r6, #1
 800b0b6:	4638      	mov	r0, r7
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	612e      	str	r6, [r5, #16]
 800b0bc:	f7ff fd90 	bl	800abe0 <_Bfree>
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	e7c5      	b.n	800b05a <__lshift+0x4a>
 800b0ce:	3904      	subs	r1, #4
 800b0d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0d4:	459c      	cmp	ip, r3
 800b0d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0da:	d8f9      	bhi.n	800b0d0 <__lshift+0xc0>
 800b0dc:	e7ea      	b.n	800b0b4 <__lshift+0xa4>
 800b0de:	bf00      	nop
 800b0e0:	0800c2b1 	.word	0x0800c2b1
 800b0e4:	0800c322 	.word	0x0800c322

0800b0e8 <__mcmp>:
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	690a      	ldr	r2, [r1, #16]
 800b0ec:	6900      	ldr	r0, [r0, #16]
 800b0ee:	b530      	push	{r4, r5, lr}
 800b0f0:	1a80      	subs	r0, r0, r2
 800b0f2:	d10d      	bne.n	800b110 <__mcmp+0x28>
 800b0f4:	3314      	adds	r3, #20
 800b0f6:	3114      	adds	r1, #20
 800b0f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b100:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b104:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b108:	4295      	cmp	r5, r2
 800b10a:	d002      	beq.n	800b112 <__mcmp+0x2a>
 800b10c:	d304      	bcc.n	800b118 <__mcmp+0x30>
 800b10e:	2001      	movs	r0, #1
 800b110:	bd30      	pop	{r4, r5, pc}
 800b112:	42a3      	cmp	r3, r4
 800b114:	d3f4      	bcc.n	800b100 <__mcmp+0x18>
 800b116:	e7fb      	b.n	800b110 <__mcmp+0x28>
 800b118:	f04f 30ff 	mov.w	r0, #4294967295
 800b11c:	e7f8      	b.n	800b110 <__mcmp+0x28>
	...

0800b120 <__mdiff>:
 800b120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b124:	460d      	mov	r5, r1
 800b126:	4607      	mov	r7, r0
 800b128:	4611      	mov	r1, r2
 800b12a:	4628      	mov	r0, r5
 800b12c:	4614      	mov	r4, r2
 800b12e:	f7ff ffdb 	bl	800b0e8 <__mcmp>
 800b132:	1e06      	subs	r6, r0, #0
 800b134:	d111      	bne.n	800b15a <__mdiff+0x3a>
 800b136:	4631      	mov	r1, r6
 800b138:	4638      	mov	r0, r7
 800b13a:	f7ff fd11 	bl	800ab60 <_Balloc>
 800b13e:	4602      	mov	r2, r0
 800b140:	b928      	cbnz	r0, 800b14e <__mdiff+0x2e>
 800b142:	f240 2137 	movw	r1, #567	; 0x237
 800b146:	4b3a      	ldr	r3, [pc, #232]	; (800b230 <__mdiff+0x110>)
 800b148:	483a      	ldr	r0, [pc, #232]	; (800b234 <__mdiff+0x114>)
 800b14a:	f000 fc31 	bl	800b9b0 <__assert_func>
 800b14e:	2301      	movs	r3, #1
 800b150:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b154:	4610      	mov	r0, r2
 800b156:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15a:	bfa4      	itt	ge
 800b15c:	4623      	movge	r3, r4
 800b15e:	462c      	movge	r4, r5
 800b160:	4638      	mov	r0, r7
 800b162:	6861      	ldr	r1, [r4, #4]
 800b164:	bfa6      	itte	ge
 800b166:	461d      	movge	r5, r3
 800b168:	2600      	movge	r6, #0
 800b16a:	2601      	movlt	r6, #1
 800b16c:	f7ff fcf8 	bl	800ab60 <_Balloc>
 800b170:	4602      	mov	r2, r0
 800b172:	b918      	cbnz	r0, 800b17c <__mdiff+0x5c>
 800b174:	f240 2145 	movw	r1, #581	; 0x245
 800b178:	4b2d      	ldr	r3, [pc, #180]	; (800b230 <__mdiff+0x110>)
 800b17a:	e7e5      	b.n	800b148 <__mdiff+0x28>
 800b17c:	f102 0814 	add.w	r8, r2, #20
 800b180:	46c2      	mov	sl, r8
 800b182:	f04f 0c00 	mov.w	ip, #0
 800b186:	6927      	ldr	r7, [r4, #16]
 800b188:	60c6      	str	r6, [r0, #12]
 800b18a:	692e      	ldr	r6, [r5, #16]
 800b18c:	f104 0014 	add.w	r0, r4, #20
 800b190:	f105 0914 	add.w	r9, r5, #20
 800b194:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b198:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b19c:	3410      	adds	r4, #16
 800b19e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b1a2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b1a6:	fa1f f18b 	uxth.w	r1, fp
 800b1aa:	4461      	add	r1, ip
 800b1ac:	fa1f fc83 	uxth.w	ip, r3
 800b1b0:	0c1b      	lsrs	r3, r3, #16
 800b1b2:	eba1 010c 	sub.w	r1, r1, ip
 800b1b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b1ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b1be:	b289      	uxth	r1, r1
 800b1c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b1c4:	454e      	cmp	r6, r9
 800b1c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b1ca:	f84a 1b04 	str.w	r1, [sl], #4
 800b1ce:	d8e6      	bhi.n	800b19e <__mdiff+0x7e>
 800b1d0:	1b73      	subs	r3, r6, r5
 800b1d2:	3b15      	subs	r3, #21
 800b1d4:	f023 0303 	bic.w	r3, r3, #3
 800b1d8:	3515      	adds	r5, #21
 800b1da:	3304      	adds	r3, #4
 800b1dc:	42ae      	cmp	r6, r5
 800b1de:	bf38      	it	cc
 800b1e0:	2304      	movcc	r3, #4
 800b1e2:	4418      	add	r0, r3
 800b1e4:	4443      	add	r3, r8
 800b1e6:	461e      	mov	r6, r3
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	4575      	cmp	r5, lr
 800b1ec:	d30e      	bcc.n	800b20c <__mdiff+0xec>
 800b1ee:	f10e 0103 	add.w	r1, lr, #3
 800b1f2:	1a09      	subs	r1, r1, r0
 800b1f4:	f021 0103 	bic.w	r1, r1, #3
 800b1f8:	3803      	subs	r0, #3
 800b1fa:	4586      	cmp	lr, r0
 800b1fc:	bf38      	it	cc
 800b1fe:	2100      	movcc	r1, #0
 800b200:	440b      	add	r3, r1
 800b202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b206:	b189      	cbz	r1, 800b22c <__mdiff+0x10c>
 800b208:	6117      	str	r7, [r2, #16]
 800b20a:	e7a3      	b.n	800b154 <__mdiff+0x34>
 800b20c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b210:	fa1f f188 	uxth.w	r1, r8
 800b214:	4461      	add	r1, ip
 800b216:	140c      	asrs	r4, r1, #16
 800b218:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b21c:	b289      	uxth	r1, r1
 800b21e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b222:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b226:	f846 1b04 	str.w	r1, [r6], #4
 800b22a:	e7de      	b.n	800b1ea <__mdiff+0xca>
 800b22c:	3f01      	subs	r7, #1
 800b22e:	e7e8      	b.n	800b202 <__mdiff+0xe2>
 800b230:	0800c2b1 	.word	0x0800c2b1
 800b234:	0800c322 	.word	0x0800c322

0800b238 <__ulp>:
 800b238:	4b0e      	ldr	r3, [pc, #56]	; (800b274 <__ulp+0x3c>)
 800b23a:	400b      	ands	r3, r1
 800b23c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b240:	2b00      	cmp	r3, #0
 800b242:	dc08      	bgt.n	800b256 <__ulp+0x1e>
 800b244:	425b      	negs	r3, r3
 800b246:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b24a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b24e:	da04      	bge.n	800b25a <__ulp+0x22>
 800b250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b254:	4113      	asrs	r3, r2
 800b256:	2200      	movs	r2, #0
 800b258:	e008      	b.n	800b26c <__ulp+0x34>
 800b25a:	f1a2 0314 	sub.w	r3, r2, #20
 800b25e:	2b1e      	cmp	r3, #30
 800b260:	bfd6      	itet	le
 800b262:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b266:	2201      	movgt	r2, #1
 800b268:	40da      	lsrle	r2, r3
 800b26a:	2300      	movs	r3, #0
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	7ff00000 	.word	0x7ff00000

0800b278 <__b2d>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	6905      	ldr	r5, [r0, #16]
 800b27c:	f100 0714 	add.w	r7, r0, #20
 800b280:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b284:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b288:	1f2e      	subs	r6, r5, #4
 800b28a:	4620      	mov	r0, r4
 800b28c:	f7ff fd5a 	bl	800ad44 <__hi0bits>
 800b290:	f1c0 0220 	rsb	r2, r0, #32
 800b294:	280a      	cmp	r0, #10
 800b296:	4603      	mov	r3, r0
 800b298:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b304 <__b2d+0x8c>
 800b29c:	600a      	str	r2, [r1, #0]
 800b29e:	dc12      	bgt.n	800b2c6 <__b2d+0x4e>
 800b2a0:	f1c0 0e0b 	rsb	lr, r0, #11
 800b2a4:	fa24 f20e 	lsr.w	r2, r4, lr
 800b2a8:	42b7      	cmp	r7, r6
 800b2aa:	ea42 010c 	orr.w	r1, r2, ip
 800b2ae:	bf2c      	ite	cs
 800b2b0:	2200      	movcs	r2, #0
 800b2b2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b2b6:	3315      	adds	r3, #21
 800b2b8:	fa04 f303 	lsl.w	r3, r4, r3
 800b2bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2c0:	431a      	orrs	r2, r3
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2c6:	42b7      	cmp	r7, r6
 800b2c8:	bf2e      	itee	cs
 800b2ca:	2200      	movcs	r2, #0
 800b2cc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b2d0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2d4:	3b0b      	subs	r3, #11
 800b2d6:	d012      	beq.n	800b2fe <__b2d+0x86>
 800b2d8:	f1c3 0520 	rsb	r5, r3, #32
 800b2dc:	fa22 f105 	lsr.w	r1, r2, r5
 800b2e0:	409c      	lsls	r4, r3
 800b2e2:	430c      	orrs	r4, r1
 800b2e4:	42be      	cmp	r6, r7
 800b2e6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b2ea:	bf94      	ite	ls
 800b2ec:	2400      	movls	r4, #0
 800b2ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2f2:	409a      	lsls	r2, r3
 800b2f4:	40ec      	lsrs	r4, r5
 800b2f6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b2fa:	4322      	orrs	r2, r4
 800b2fc:	e7e1      	b.n	800b2c2 <__b2d+0x4a>
 800b2fe:	ea44 010c 	orr.w	r1, r4, ip
 800b302:	e7de      	b.n	800b2c2 <__b2d+0x4a>
 800b304:	3ff00000 	.word	0x3ff00000

0800b308 <__d2b>:
 800b308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b30a:	2101      	movs	r1, #1
 800b30c:	4617      	mov	r7, r2
 800b30e:	461c      	mov	r4, r3
 800b310:	9e08      	ldr	r6, [sp, #32]
 800b312:	f7ff fc25 	bl	800ab60 <_Balloc>
 800b316:	4605      	mov	r5, r0
 800b318:	b930      	cbnz	r0, 800b328 <__d2b+0x20>
 800b31a:	4602      	mov	r2, r0
 800b31c:	f240 310f 	movw	r1, #783	; 0x30f
 800b320:	4b22      	ldr	r3, [pc, #136]	; (800b3ac <__d2b+0xa4>)
 800b322:	4823      	ldr	r0, [pc, #140]	; (800b3b0 <__d2b+0xa8>)
 800b324:	f000 fb44 	bl	800b9b0 <__assert_func>
 800b328:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b32c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b330:	bb24      	cbnz	r4, 800b37c <__d2b+0x74>
 800b332:	2f00      	cmp	r7, #0
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	d026      	beq.n	800b386 <__d2b+0x7e>
 800b338:	4668      	mov	r0, sp
 800b33a:	9700      	str	r7, [sp, #0]
 800b33c:	f7ff fd22 	bl	800ad84 <__lo0bits>
 800b340:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b344:	b1e8      	cbz	r0, 800b382 <__d2b+0x7a>
 800b346:	f1c0 0320 	rsb	r3, r0, #32
 800b34a:	fa02 f303 	lsl.w	r3, r2, r3
 800b34e:	430b      	orrs	r3, r1
 800b350:	40c2      	lsrs	r2, r0
 800b352:	616b      	str	r3, [r5, #20]
 800b354:	9201      	str	r2, [sp, #4]
 800b356:	9b01      	ldr	r3, [sp, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bf14      	ite	ne
 800b35c:	2102      	movne	r1, #2
 800b35e:	2101      	moveq	r1, #1
 800b360:	61ab      	str	r3, [r5, #24]
 800b362:	6129      	str	r1, [r5, #16]
 800b364:	b1bc      	cbz	r4, 800b396 <__d2b+0x8e>
 800b366:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b36a:	4404      	add	r4, r0
 800b36c:	6034      	str	r4, [r6, #0]
 800b36e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b374:	6018      	str	r0, [r3, #0]
 800b376:	4628      	mov	r0, r5
 800b378:	b003      	add	sp, #12
 800b37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b37c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b380:	e7d7      	b.n	800b332 <__d2b+0x2a>
 800b382:	6169      	str	r1, [r5, #20]
 800b384:	e7e7      	b.n	800b356 <__d2b+0x4e>
 800b386:	a801      	add	r0, sp, #4
 800b388:	f7ff fcfc 	bl	800ad84 <__lo0bits>
 800b38c:	9b01      	ldr	r3, [sp, #4]
 800b38e:	2101      	movs	r1, #1
 800b390:	616b      	str	r3, [r5, #20]
 800b392:	3020      	adds	r0, #32
 800b394:	e7e5      	b.n	800b362 <__d2b+0x5a>
 800b396:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b39a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b39e:	6030      	str	r0, [r6, #0]
 800b3a0:	6918      	ldr	r0, [r3, #16]
 800b3a2:	f7ff fccf 	bl	800ad44 <__hi0bits>
 800b3a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b3aa:	e7e2      	b.n	800b372 <__d2b+0x6a>
 800b3ac:	0800c2b1 	.word	0x0800c2b1
 800b3b0:	0800c322 	.word	0x0800c322

0800b3b4 <__ratio>:
 800b3b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b8:	4688      	mov	r8, r1
 800b3ba:	4669      	mov	r1, sp
 800b3bc:	4681      	mov	r9, r0
 800b3be:	f7ff ff5b 	bl	800b278 <__b2d>
 800b3c2:	460f      	mov	r7, r1
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	4640      	mov	r0, r8
 800b3ca:	a901      	add	r1, sp, #4
 800b3cc:	f7ff ff54 	bl	800b278 <__b2d>
 800b3d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3d4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b3d8:	468b      	mov	fp, r1
 800b3da:	eba3 0c02 	sub.w	ip, r3, r2
 800b3de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b3e2:	1a9b      	subs	r3, r3, r2
 800b3e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	bfd5      	itete	le
 800b3ec:	460a      	movle	r2, r1
 800b3ee:	462a      	movgt	r2, r5
 800b3f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3f4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3f8:	bfd8      	it	le
 800b3fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b3fe:	465b      	mov	r3, fp
 800b400:	4602      	mov	r2, r0
 800b402:	4639      	mov	r1, r7
 800b404:	4620      	mov	r0, r4
 800b406:	f7f5 f99b 	bl	8000740 <__aeabi_ddiv>
 800b40a:	b003      	add	sp, #12
 800b40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b410 <__copybits>:
 800b410:	3901      	subs	r1, #1
 800b412:	b570      	push	{r4, r5, r6, lr}
 800b414:	1149      	asrs	r1, r1, #5
 800b416:	6914      	ldr	r4, [r2, #16]
 800b418:	3101      	adds	r1, #1
 800b41a:	f102 0314 	add.w	r3, r2, #20
 800b41e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b422:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b426:	1f05      	subs	r5, r0, #4
 800b428:	42a3      	cmp	r3, r4
 800b42a:	d30c      	bcc.n	800b446 <__copybits+0x36>
 800b42c:	1aa3      	subs	r3, r4, r2
 800b42e:	3b11      	subs	r3, #17
 800b430:	f023 0303 	bic.w	r3, r3, #3
 800b434:	3211      	adds	r2, #17
 800b436:	42a2      	cmp	r2, r4
 800b438:	bf88      	it	hi
 800b43a:	2300      	movhi	r3, #0
 800b43c:	4418      	add	r0, r3
 800b43e:	2300      	movs	r3, #0
 800b440:	4288      	cmp	r0, r1
 800b442:	d305      	bcc.n	800b450 <__copybits+0x40>
 800b444:	bd70      	pop	{r4, r5, r6, pc}
 800b446:	f853 6b04 	ldr.w	r6, [r3], #4
 800b44a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b44e:	e7eb      	b.n	800b428 <__copybits+0x18>
 800b450:	f840 3b04 	str.w	r3, [r0], #4
 800b454:	e7f4      	b.n	800b440 <__copybits+0x30>

0800b456 <__any_on>:
 800b456:	f100 0214 	add.w	r2, r0, #20
 800b45a:	6900      	ldr	r0, [r0, #16]
 800b45c:	114b      	asrs	r3, r1, #5
 800b45e:	4298      	cmp	r0, r3
 800b460:	b510      	push	{r4, lr}
 800b462:	db11      	blt.n	800b488 <__any_on+0x32>
 800b464:	dd0a      	ble.n	800b47c <__any_on+0x26>
 800b466:	f011 011f 	ands.w	r1, r1, #31
 800b46a:	d007      	beq.n	800b47c <__any_on+0x26>
 800b46c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b470:	fa24 f001 	lsr.w	r0, r4, r1
 800b474:	fa00 f101 	lsl.w	r1, r0, r1
 800b478:	428c      	cmp	r4, r1
 800b47a:	d10b      	bne.n	800b494 <__any_on+0x3e>
 800b47c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b480:	4293      	cmp	r3, r2
 800b482:	d803      	bhi.n	800b48c <__any_on+0x36>
 800b484:	2000      	movs	r0, #0
 800b486:	bd10      	pop	{r4, pc}
 800b488:	4603      	mov	r3, r0
 800b48a:	e7f7      	b.n	800b47c <__any_on+0x26>
 800b48c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b490:	2900      	cmp	r1, #0
 800b492:	d0f5      	beq.n	800b480 <__any_on+0x2a>
 800b494:	2001      	movs	r0, #1
 800b496:	e7f6      	b.n	800b486 <__any_on+0x30>

0800b498 <__ascii_wctomb>:
 800b498:	4603      	mov	r3, r0
 800b49a:	4608      	mov	r0, r1
 800b49c:	b141      	cbz	r1, 800b4b0 <__ascii_wctomb+0x18>
 800b49e:	2aff      	cmp	r2, #255	; 0xff
 800b4a0:	d904      	bls.n	800b4ac <__ascii_wctomb+0x14>
 800b4a2:	228a      	movs	r2, #138	; 0x8a
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	4770      	bx	lr
 800b4ac:	2001      	movs	r0, #1
 800b4ae:	700a      	strb	r2, [r1, #0]
 800b4b0:	4770      	bx	lr

0800b4b2 <__sfputc_r>:
 800b4b2:	6893      	ldr	r3, [r2, #8]
 800b4b4:	b410      	push	{r4}
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	6093      	str	r3, [r2, #8]
 800b4bc:	da07      	bge.n	800b4ce <__sfputc_r+0x1c>
 800b4be:	6994      	ldr	r4, [r2, #24]
 800b4c0:	42a3      	cmp	r3, r4
 800b4c2:	db01      	blt.n	800b4c8 <__sfputc_r+0x16>
 800b4c4:	290a      	cmp	r1, #10
 800b4c6:	d102      	bne.n	800b4ce <__sfputc_r+0x1c>
 800b4c8:	bc10      	pop	{r4}
 800b4ca:	f7fd bf2c 	b.w	8009326 <__swbuf_r>
 800b4ce:	6813      	ldr	r3, [r2, #0]
 800b4d0:	1c58      	adds	r0, r3, #1
 800b4d2:	6010      	str	r0, [r2, #0]
 800b4d4:	7019      	strb	r1, [r3, #0]
 800b4d6:	4608      	mov	r0, r1
 800b4d8:	bc10      	pop	{r4}
 800b4da:	4770      	bx	lr

0800b4dc <__sfputs_r>:
 800b4dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460f      	mov	r7, r1
 800b4e2:	4614      	mov	r4, r2
 800b4e4:	18d5      	adds	r5, r2, r3
 800b4e6:	42ac      	cmp	r4, r5
 800b4e8:	d101      	bne.n	800b4ee <__sfputs_r+0x12>
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e007      	b.n	800b4fe <__sfputs_r+0x22>
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f6:	f7ff ffdc 	bl	800b4b2 <__sfputc_r>
 800b4fa:	1c43      	adds	r3, r0, #1
 800b4fc:	d1f3      	bne.n	800b4e6 <__sfputs_r+0xa>
 800b4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b500 <_vfiprintf_r>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	460d      	mov	r5, r1
 800b506:	4614      	mov	r4, r2
 800b508:	4698      	mov	r8, r3
 800b50a:	4606      	mov	r6, r0
 800b50c:	b09d      	sub	sp, #116	; 0x74
 800b50e:	b118      	cbz	r0, 800b518 <_vfiprintf_r+0x18>
 800b510:	6a03      	ldr	r3, [r0, #32]
 800b512:	b90b      	cbnz	r3, 800b518 <_vfiprintf_r+0x18>
 800b514:	f7fd fe20 	bl	8009158 <__sinit>
 800b518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b51a:	07d9      	lsls	r1, r3, #31
 800b51c:	d405      	bmi.n	800b52a <_vfiprintf_r+0x2a>
 800b51e:	89ab      	ldrh	r3, [r5, #12]
 800b520:	059a      	lsls	r2, r3, #22
 800b522:	d402      	bmi.n	800b52a <_vfiprintf_r+0x2a>
 800b524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b526:	f7fe f821 	bl	800956c <__retarget_lock_acquire_recursive>
 800b52a:	89ab      	ldrh	r3, [r5, #12]
 800b52c:	071b      	lsls	r3, r3, #28
 800b52e:	d501      	bpl.n	800b534 <_vfiprintf_r+0x34>
 800b530:	692b      	ldr	r3, [r5, #16]
 800b532:	b99b      	cbnz	r3, 800b55c <_vfiprintf_r+0x5c>
 800b534:	4629      	mov	r1, r5
 800b536:	4630      	mov	r0, r6
 800b538:	f7fd ff32 	bl	80093a0 <__swsetup_r>
 800b53c:	b170      	cbz	r0, 800b55c <_vfiprintf_r+0x5c>
 800b53e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b540:	07dc      	lsls	r4, r3, #31
 800b542:	d504      	bpl.n	800b54e <_vfiprintf_r+0x4e>
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	b01d      	add	sp, #116	; 0x74
 800b54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54e:	89ab      	ldrh	r3, [r5, #12]
 800b550:	0598      	lsls	r0, r3, #22
 800b552:	d4f7      	bmi.n	800b544 <_vfiprintf_r+0x44>
 800b554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b556:	f7fe f80a 	bl	800956e <__retarget_lock_release_recursive>
 800b55a:	e7f3      	b.n	800b544 <_vfiprintf_r+0x44>
 800b55c:	2300      	movs	r3, #0
 800b55e:	9309      	str	r3, [sp, #36]	; 0x24
 800b560:	2320      	movs	r3, #32
 800b562:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b566:	2330      	movs	r3, #48	; 0x30
 800b568:	f04f 0901 	mov.w	r9, #1
 800b56c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b570:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b720 <_vfiprintf_r+0x220>
 800b574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b578:	4623      	mov	r3, r4
 800b57a:	469a      	mov	sl, r3
 800b57c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b580:	b10a      	cbz	r2, 800b586 <_vfiprintf_r+0x86>
 800b582:	2a25      	cmp	r2, #37	; 0x25
 800b584:	d1f9      	bne.n	800b57a <_vfiprintf_r+0x7a>
 800b586:	ebba 0b04 	subs.w	fp, sl, r4
 800b58a:	d00b      	beq.n	800b5a4 <_vfiprintf_r+0xa4>
 800b58c:	465b      	mov	r3, fp
 800b58e:	4622      	mov	r2, r4
 800b590:	4629      	mov	r1, r5
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ffa2 	bl	800b4dc <__sfputs_r>
 800b598:	3001      	adds	r0, #1
 800b59a:	f000 80a9 	beq.w	800b6f0 <_vfiprintf_r+0x1f0>
 800b59e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5a0:	445a      	add	r2, fp
 800b5a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b5a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 80a1 	beq.w	800b6f0 <_vfiprintf_r+0x1f0>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5b8:	f10a 0a01 	add.w	sl, sl, #1
 800b5bc:	9304      	str	r3, [sp, #16]
 800b5be:	9307      	str	r3, [sp, #28]
 800b5c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5c4:	931a      	str	r3, [sp, #104]	; 0x68
 800b5c6:	4654      	mov	r4, sl
 800b5c8:	2205      	movs	r2, #5
 800b5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ce:	4854      	ldr	r0, [pc, #336]	; (800b720 <_vfiprintf_r+0x220>)
 800b5d0:	f7fd ffce 	bl	8009570 <memchr>
 800b5d4:	9a04      	ldr	r2, [sp, #16]
 800b5d6:	b9d8      	cbnz	r0, 800b610 <_vfiprintf_r+0x110>
 800b5d8:	06d1      	lsls	r1, r2, #27
 800b5da:	bf44      	itt	mi
 800b5dc:	2320      	movmi	r3, #32
 800b5de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5e2:	0713      	lsls	r3, r2, #28
 800b5e4:	bf44      	itt	mi
 800b5e6:	232b      	movmi	r3, #43	; 0x2b
 800b5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b5f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5f2:	d015      	beq.n	800b620 <_vfiprintf_r+0x120>
 800b5f4:	4654      	mov	r4, sl
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f04f 0c0a 	mov.w	ip, #10
 800b5fc:	9a07      	ldr	r2, [sp, #28]
 800b5fe:	4621      	mov	r1, r4
 800b600:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b604:	3b30      	subs	r3, #48	; 0x30
 800b606:	2b09      	cmp	r3, #9
 800b608:	d94d      	bls.n	800b6a6 <_vfiprintf_r+0x1a6>
 800b60a:	b1b0      	cbz	r0, 800b63a <_vfiprintf_r+0x13a>
 800b60c:	9207      	str	r2, [sp, #28]
 800b60e:	e014      	b.n	800b63a <_vfiprintf_r+0x13a>
 800b610:	eba0 0308 	sub.w	r3, r0, r8
 800b614:	fa09 f303 	lsl.w	r3, r9, r3
 800b618:	4313      	orrs	r3, r2
 800b61a:	46a2      	mov	sl, r4
 800b61c:	9304      	str	r3, [sp, #16]
 800b61e:	e7d2      	b.n	800b5c6 <_vfiprintf_r+0xc6>
 800b620:	9b03      	ldr	r3, [sp, #12]
 800b622:	1d19      	adds	r1, r3, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	9103      	str	r1, [sp, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfbb      	ittet	lt
 800b62c:	425b      	neglt	r3, r3
 800b62e:	f042 0202 	orrlt.w	r2, r2, #2
 800b632:	9307      	strge	r3, [sp, #28]
 800b634:	9307      	strlt	r3, [sp, #28]
 800b636:	bfb8      	it	lt
 800b638:	9204      	strlt	r2, [sp, #16]
 800b63a:	7823      	ldrb	r3, [r4, #0]
 800b63c:	2b2e      	cmp	r3, #46	; 0x2e
 800b63e:	d10c      	bne.n	800b65a <_vfiprintf_r+0x15a>
 800b640:	7863      	ldrb	r3, [r4, #1]
 800b642:	2b2a      	cmp	r3, #42	; 0x2a
 800b644:	d134      	bne.n	800b6b0 <_vfiprintf_r+0x1b0>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	3402      	adds	r4, #2
 800b64a:	1d1a      	adds	r2, r3, #4
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	9203      	str	r2, [sp, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	bfb8      	it	lt
 800b654:	f04f 33ff 	movlt.w	r3, #4294967295
 800b658:	9305      	str	r3, [sp, #20]
 800b65a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b724 <_vfiprintf_r+0x224>
 800b65e:	2203      	movs	r2, #3
 800b660:	4650      	mov	r0, sl
 800b662:	7821      	ldrb	r1, [r4, #0]
 800b664:	f7fd ff84 	bl	8009570 <memchr>
 800b668:	b138      	cbz	r0, 800b67a <_vfiprintf_r+0x17a>
 800b66a:	2240      	movs	r2, #64	; 0x40
 800b66c:	9b04      	ldr	r3, [sp, #16]
 800b66e:	eba0 000a 	sub.w	r0, r0, sl
 800b672:	4082      	lsls	r2, r0
 800b674:	4313      	orrs	r3, r2
 800b676:	3401      	adds	r4, #1
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b67e:	2206      	movs	r2, #6
 800b680:	4829      	ldr	r0, [pc, #164]	; (800b728 <_vfiprintf_r+0x228>)
 800b682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b686:	f7fd ff73 	bl	8009570 <memchr>
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d03f      	beq.n	800b70e <_vfiprintf_r+0x20e>
 800b68e:	4b27      	ldr	r3, [pc, #156]	; (800b72c <_vfiprintf_r+0x22c>)
 800b690:	bb1b      	cbnz	r3, 800b6da <_vfiprintf_r+0x1da>
 800b692:	9b03      	ldr	r3, [sp, #12]
 800b694:	3307      	adds	r3, #7
 800b696:	f023 0307 	bic.w	r3, r3, #7
 800b69a:	3308      	adds	r3, #8
 800b69c:	9303      	str	r3, [sp, #12]
 800b69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a0:	443b      	add	r3, r7
 800b6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a4:	e768      	b.n	800b578 <_vfiprintf_r+0x78>
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	2001      	movs	r0, #1
 800b6aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ae:	e7a6      	b.n	800b5fe <_vfiprintf_r+0xfe>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	f04f 0c0a 	mov.w	ip, #10
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	3401      	adds	r4, #1
 800b6ba:	9305      	str	r3, [sp, #20]
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6c2:	3a30      	subs	r2, #48	; 0x30
 800b6c4:	2a09      	cmp	r2, #9
 800b6c6:	d903      	bls.n	800b6d0 <_vfiprintf_r+0x1d0>
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0c6      	beq.n	800b65a <_vfiprintf_r+0x15a>
 800b6cc:	9105      	str	r1, [sp, #20]
 800b6ce:	e7c4      	b.n	800b65a <_vfiprintf_r+0x15a>
 800b6d0:	4604      	mov	r4, r0
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6d8:	e7f0      	b.n	800b6bc <_vfiprintf_r+0x1bc>
 800b6da:	ab03      	add	r3, sp, #12
 800b6dc:	9300      	str	r3, [sp, #0]
 800b6de:	462a      	mov	r2, r5
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	4b13      	ldr	r3, [pc, #76]	; (800b730 <_vfiprintf_r+0x230>)
 800b6e4:	a904      	add	r1, sp, #16
 800b6e6:	f7fd f8fb 	bl	80088e0 <_printf_float>
 800b6ea:	4607      	mov	r7, r0
 800b6ec:	1c78      	adds	r0, r7, #1
 800b6ee:	d1d6      	bne.n	800b69e <_vfiprintf_r+0x19e>
 800b6f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6f2:	07d9      	lsls	r1, r3, #31
 800b6f4:	d405      	bmi.n	800b702 <_vfiprintf_r+0x202>
 800b6f6:	89ab      	ldrh	r3, [r5, #12]
 800b6f8:	059a      	lsls	r2, r3, #22
 800b6fa:	d402      	bmi.n	800b702 <_vfiprintf_r+0x202>
 800b6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6fe:	f7fd ff36 	bl	800956e <__retarget_lock_release_recursive>
 800b702:	89ab      	ldrh	r3, [r5, #12]
 800b704:	065b      	lsls	r3, r3, #25
 800b706:	f53f af1d 	bmi.w	800b544 <_vfiprintf_r+0x44>
 800b70a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b70c:	e71c      	b.n	800b548 <_vfiprintf_r+0x48>
 800b70e:	ab03      	add	r3, sp, #12
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	462a      	mov	r2, r5
 800b714:	4630      	mov	r0, r6
 800b716:	4b06      	ldr	r3, [pc, #24]	; (800b730 <_vfiprintf_r+0x230>)
 800b718:	a904      	add	r1, sp, #16
 800b71a:	f7fd fb81 	bl	8008e20 <_printf_i>
 800b71e:	e7e4      	b.n	800b6ea <_vfiprintf_r+0x1ea>
 800b720:	0800c47c 	.word	0x0800c47c
 800b724:	0800c482 	.word	0x0800c482
 800b728:	0800c486 	.word	0x0800c486
 800b72c:	080088e1 	.word	0x080088e1
 800b730:	0800b4dd 	.word	0x0800b4dd

0800b734 <__sflush_r>:
 800b734:	898a      	ldrh	r2, [r1, #12]
 800b736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b738:	4605      	mov	r5, r0
 800b73a:	0710      	lsls	r0, r2, #28
 800b73c:	460c      	mov	r4, r1
 800b73e:	d457      	bmi.n	800b7f0 <__sflush_r+0xbc>
 800b740:	684b      	ldr	r3, [r1, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	dc04      	bgt.n	800b750 <__sflush_r+0x1c>
 800b746:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b748:	2b00      	cmp	r3, #0
 800b74a:	dc01      	bgt.n	800b750 <__sflush_r+0x1c>
 800b74c:	2000      	movs	r0, #0
 800b74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b750:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b752:	2e00      	cmp	r6, #0
 800b754:	d0fa      	beq.n	800b74c <__sflush_r+0x18>
 800b756:	2300      	movs	r3, #0
 800b758:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b75c:	682f      	ldr	r7, [r5, #0]
 800b75e:	6a21      	ldr	r1, [r4, #32]
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	d032      	beq.n	800b7ca <__sflush_r+0x96>
 800b764:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	075a      	lsls	r2, r3, #29
 800b76a:	d505      	bpl.n	800b778 <__sflush_r+0x44>
 800b76c:	6863      	ldr	r3, [r4, #4]
 800b76e:	1ac0      	subs	r0, r0, r3
 800b770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b772:	b10b      	cbz	r3, 800b778 <__sflush_r+0x44>
 800b774:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b776:	1ac0      	subs	r0, r0, r3
 800b778:	2300      	movs	r3, #0
 800b77a:	4602      	mov	r2, r0
 800b77c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b77e:	4628      	mov	r0, r5
 800b780:	6a21      	ldr	r1, [r4, #32]
 800b782:	47b0      	blx	r6
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	d106      	bne.n	800b798 <__sflush_r+0x64>
 800b78a:	6829      	ldr	r1, [r5, #0]
 800b78c:	291d      	cmp	r1, #29
 800b78e:	d82b      	bhi.n	800b7e8 <__sflush_r+0xb4>
 800b790:	4a28      	ldr	r2, [pc, #160]	; (800b834 <__sflush_r+0x100>)
 800b792:	410a      	asrs	r2, r1
 800b794:	07d6      	lsls	r6, r2, #31
 800b796:	d427      	bmi.n	800b7e8 <__sflush_r+0xb4>
 800b798:	2200      	movs	r2, #0
 800b79a:	6062      	str	r2, [r4, #4]
 800b79c:	6922      	ldr	r2, [r4, #16]
 800b79e:	04d9      	lsls	r1, r3, #19
 800b7a0:	6022      	str	r2, [r4, #0]
 800b7a2:	d504      	bpl.n	800b7ae <__sflush_r+0x7a>
 800b7a4:	1c42      	adds	r2, r0, #1
 800b7a6:	d101      	bne.n	800b7ac <__sflush_r+0x78>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b903      	cbnz	r3, 800b7ae <__sflush_r+0x7a>
 800b7ac:	6560      	str	r0, [r4, #84]	; 0x54
 800b7ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7b0:	602f      	str	r7, [r5, #0]
 800b7b2:	2900      	cmp	r1, #0
 800b7b4:	d0ca      	beq.n	800b74c <__sflush_r+0x18>
 800b7b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7ba:	4299      	cmp	r1, r3
 800b7bc:	d002      	beq.n	800b7c4 <__sflush_r+0x90>
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f7fe fd66 	bl	800a290 <_free_r>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b7c8:	e7c1      	b.n	800b74e <__sflush_r+0x1a>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	47b0      	blx	r6
 800b7d0:	1c41      	adds	r1, r0, #1
 800b7d2:	d1c8      	bne.n	800b766 <__sflush_r+0x32>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d0c5      	beq.n	800b766 <__sflush_r+0x32>
 800b7da:	2b1d      	cmp	r3, #29
 800b7dc:	d001      	beq.n	800b7e2 <__sflush_r+0xae>
 800b7de:	2b16      	cmp	r3, #22
 800b7e0:	d101      	bne.n	800b7e6 <__sflush_r+0xb2>
 800b7e2:	602f      	str	r7, [r5, #0]
 800b7e4:	e7b2      	b.n	800b74c <__sflush_r+0x18>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ec:	81a3      	strh	r3, [r4, #12]
 800b7ee:	e7ae      	b.n	800b74e <__sflush_r+0x1a>
 800b7f0:	690f      	ldr	r7, [r1, #16]
 800b7f2:	2f00      	cmp	r7, #0
 800b7f4:	d0aa      	beq.n	800b74c <__sflush_r+0x18>
 800b7f6:	0793      	lsls	r3, r2, #30
 800b7f8:	bf18      	it	ne
 800b7fa:	2300      	movne	r3, #0
 800b7fc:	680e      	ldr	r6, [r1, #0]
 800b7fe:	bf08      	it	eq
 800b800:	694b      	ldreq	r3, [r1, #20]
 800b802:	1bf6      	subs	r6, r6, r7
 800b804:	600f      	str	r7, [r1, #0]
 800b806:	608b      	str	r3, [r1, #8]
 800b808:	2e00      	cmp	r6, #0
 800b80a:	dd9f      	ble.n	800b74c <__sflush_r+0x18>
 800b80c:	4633      	mov	r3, r6
 800b80e:	463a      	mov	r2, r7
 800b810:	4628      	mov	r0, r5
 800b812:	6a21      	ldr	r1, [r4, #32]
 800b814:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b818:	47e0      	blx	ip
 800b81a:	2800      	cmp	r0, #0
 800b81c:	dc06      	bgt.n	800b82c <__sflush_r+0xf8>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f04f 30ff 	mov.w	r0, #4294967295
 800b824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	e790      	b.n	800b74e <__sflush_r+0x1a>
 800b82c:	4407      	add	r7, r0
 800b82e:	1a36      	subs	r6, r6, r0
 800b830:	e7ea      	b.n	800b808 <__sflush_r+0xd4>
 800b832:	bf00      	nop
 800b834:	dfbffffe 	.word	0xdfbffffe

0800b838 <_fflush_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	690b      	ldr	r3, [r1, #16]
 800b83c:	4605      	mov	r5, r0
 800b83e:	460c      	mov	r4, r1
 800b840:	b913      	cbnz	r3, 800b848 <_fflush_r+0x10>
 800b842:	2500      	movs	r5, #0
 800b844:	4628      	mov	r0, r5
 800b846:	bd38      	pop	{r3, r4, r5, pc}
 800b848:	b118      	cbz	r0, 800b852 <_fflush_r+0x1a>
 800b84a:	6a03      	ldr	r3, [r0, #32]
 800b84c:	b90b      	cbnz	r3, 800b852 <_fflush_r+0x1a>
 800b84e:	f7fd fc83 	bl	8009158 <__sinit>
 800b852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0f3      	beq.n	800b842 <_fflush_r+0xa>
 800b85a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b85c:	07d0      	lsls	r0, r2, #31
 800b85e:	d404      	bmi.n	800b86a <_fflush_r+0x32>
 800b860:	0599      	lsls	r1, r3, #22
 800b862:	d402      	bmi.n	800b86a <_fflush_r+0x32>
 800b864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b866:	f7fd fe81 	bl	800956c <__retarget_lock_acquire_recursive>
 800b86a:	4628      	mov	r0, r5
 800b86c:	4621      	mov	r1, r4
 800b86e:	f7ff ff61 	bl	800b734 <__sflush_r>
 800b872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b874:	4605      	mov	r5, r0
 800b876:	07da      	lsls	r2, r3, #31
 800b878:	d4e4      	bmi.n	800b844 <_fflush_r+0xc>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	059b      	lsls	r3, r3, #22
 800b87e:	d4e1      	bmi.n	800b844 <_fflush_r+0xc>
 800b880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b882:	f7fd fe74 	bl	800956e <__retarget_lock_release_recursive>
 800b886:	e7dd      	b.n	800b844 <_fflush_r+0xc>

0800b888 <__swhatbuf_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	460c      	mov	r4, r1
 800b88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b890:	4615      	mov	r5, r2
 800b892:	2900      	cmp	r1, #0
 800b894:	461e      	mov	r6, r3
 800b896:	b096      	sub	sp, #88	; 0x58
 800b898:	da0c      	bge.n	800b8b4 <__swhatbuf_r+0x2c>
 800b89a:	89a3      	ldrh	r3, [r4, #12]
 800b89c:	2100      	movs	r1, #0
 800b89e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8a2:	bf0c      	ite	eq
 800b8a4:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8a8:	2340      	movne	r3, #64	; 0x40
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	6031      	str	r1, [r6, #0]
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	b016      	add	sp, #88	; 0x58
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	466a      	mov	r2, sp
 800b8b6:	f000 f849 	bl	800b94c <_fstat_r>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	dbed      	blt.n	800b89a <__swhatbuf_r+0x12>
 800b8be:	9901      	ldr	r1, [sp, #4]
 800b8c0:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b8c4:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b8c8:	4259      	negs	r1, r3
 800b8ca:	4159      	adcs	r1, r3
 800b8cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8d0:	e7eb      	b.n	800b8aa <__swhatbuf_r+0x22>

0800b8d2 <__smakebuf_r>:
 800b8d2:	898b      	ldrh	r3, [r1, #12]
 800b8d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8d6:	079d      	lsls	r5, r3, #30
 800b8d8:	4606      	mov	r6, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	d507      	bpl.n	800b8ee <__smakebuf_r+0x1c>
 800b8de:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	6123      	str	r3, [r4, #16]
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	6163      	str	r3, [r4, #20]
 800b8ea:	b002      	add	sp, #8
 800b8ec:	bd70      	pop	{r4, r5, r6, pc}
 800b8ee:	466a      	mov	r2, sp
 800b8f0:	ab01      	add	r3, sp, #4
 800b8f2:	f7ff ffc9 	bl	800b888 <__swhatbuf_r>
 800b8f6:	9900      	ldr	r1, [sp, #0]
 800b8f8:	4605      	mov	r5, r0
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	f7ff f892 	bl	800aa24 <_malloc_r>
 800b900:	b948      	cbnz	r0, 800b916 <__smakebuf_r+0x44>
 800b902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b906:	059a      	lsls	r2, r3, #22
 800b908:	d4ef      	bmi.n	800b8ea <__smakebuf_r+0x18>
 800b90a:	f023 0303 	bic.w	r3, r3, #3
 800b90e:	f043 0302 	orr.w	r3, r3, #2
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	e7e3      	b.n	800b8de <__smakebuf_r+0xc>
 800b916:	89a3      	ldrh	r3, [r4, #12]
 800b918:	6020      	str	r0, [r4, #0]
 800b91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b91e:	81a3      	strh	r3, [r4, #12]
 800b920:	9b00      	ldr	r3, [sp, #0]
 800b922:	6120      	str	r0, [r4, #16]
 800b924:	6163      	str	r3, [r4, #20]
 800b926:	9b01      	ldr	r3, [sp, #4]
 800b928:	b15b      	cbz	r3, 800b942 <__smakebuf_r+0x70>
 800b92a:	4630      	mov	r0, r6
 800b92c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b930:	f000 f81e 	bl	800b970 <_isatty_r>
 800b934:	b128      	cbz	r0, 800b942 <__smakebuf_r+0x70>
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	f043 0301 	orr.w	r3, r3, #1
 800b940:	81a3      	strh	r3, [r4, #12]
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	431d      	orrs	r5, r3
 800b946:	81a5      	strh	r5, [r4, #12]
 800b948:	e7cf      	b.n	800b8ea <__smakebuf_r+0x18>
	...

0800b94c <_fstat_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	2300      	movs	r3, #0
 800b950:	4d06      	ldr	r5, [pc, #24]	; (800b96c <_fstat_r+0x20>)
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	4611      	mov	r1, r2
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f7f7 f9a4 	bl	8002ca6 <_fstat>
 800b95e:	1c43      	adds	r3, r0, #1
 800b960:	d102      	bne.n	800b968 <_fstat_r+0x1c>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	b103      	cbz	r3, 800b968 <_fstat_r+0x1c>
 800b966:	6023      	str	r3, [r4, #0]
 800b968:	bd38      	pop	{r3, r4, r5, pc}
 800b96a:	bf00      	nop
 800b96c:	200005fc 	.word	0x200005fc

0800b970 <_isatty_r>:
 800b970:	b538      	push	{r3, r4, r5, lr}
 800b972:	2300      	movs	r3, #0
 800b974:	4d05      	ldr	r5, [pc, #20]	; (800b98c <_isatty_r+0x1c>)
 800b976:	4604      	mov	r4, r0
 800b978:	4608      	mov	r0, r1
 800b97a:	602b      	str	r3, [r5, #0]
 800b97c:	f7f7 f9a2 	bl	8002cc4 <_isatty>
 800b980:	1c43      	adds	r3, r0, #1
 800b982:	d102      	bne.n	800b98a <_isatty_r+0x1a>
 800b984:	682b      	ldr	r3, [r5, #0]
 800b986:	b103      	cbz	r3, 800b98a <_isatty_r+0x1a>
 800b988:	6023      	str	r3, [r4, #0]
 800b98a:	bd38      	pop	{r3, r4, r5, pc}
 800b98c:	200005fc 	.word	0x200005fc

0800b990 <_sbrk_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	2300      	movs	r3, #0
 800b994:	4d05      	ldr	r5, [pc, #20]	; (800b9ac <_sbrk_r+0x1c>)
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	602b      	str	r3, [r5, #0]
 800b99c:	f7f7 f9a8 	bl	8002cf0 <_sbrk>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_sbrk_r+0x1a>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_sbrk_r+0x1a>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	200005fc 	.word	0x200005fc

0800b9b0 <__assert_func>:
 800b9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9b2:	4614      	mov	r4, r2
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	4b09      	ldr	r3, [pc, #36]	; (800b9dc <__assert_func+0x2c>)
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68d8      	ldr	r0, [r3, #12]
 800b9be:	b14c      	cbz	r4, 800b9d4 <__assert_func+0x24>
 800b9c0:	4b07      	ldr	r3, [pc, #28]	; (800b9e0 <__assert_func+0x30>)
 800b9c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9c6:	9100      	str	r1, [sp, #0]
 800b9c8:	462b      	mov	r3, r5
 800b9ca:	4906      	ldr	r1, [pc, #24]	; (800b9e4 <__assert_func+0x34>)
 800b9cc:	f000 f822 	bl	800ba14 <fiprintf>
 800b9d0:	f000 f832 	bl	800ba38 <abort>
 800b9d4:	4b04      	ldr	r3, [pc, #16]	; (800b9e8 <__assert_func+0x38>)
 800b9d6:	461c      	mov	r4, r3
 800b9d8:	e7f3      	b.n	800b9c2 <__assert_func+0x12>
 800b9da:	bf00      	nop
 800b9dc:	200001d0 	.word	0x200001d0
 800b9e0:	0800c48d 	.word	0x0800c48d
 800b9e4:	0800c49a 	.word	0x0800c49a
 800b9e8:	0800c4c8 	.word	0x0800c4c8

0800b9ec <_calloc_r>:
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	fba1 5402 	umull	r5, r4, r1, r2
 800b9f2:	b934      	cbnz	r4, 800ba02 <_calloc_r+0x16>
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	f7ff f815 	bl	800aa24 <_malloc_r>
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	b928      	cbnz	r0, 800ba0a <_calloc_r+0x1e>
 800b9fe:	4630      	mov	r0, r6
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	220c      	movs	r2, #12
 800ba04:	2600      	movs	r6, #0
 800ba06:	6002      	str	r2, [r0, #0]
 800ba08:	e7f9      	b.n	800b9fe <_calloc_r+0x12>
 800ba0a:	462a      	mov	r2, r5
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	f7fd fd1f 	bl	8009450 <memset>
 800ba12:	e7f4      	b.n	800b9fe <_calloc_r+0x12>

0800ba14 <fiprintf>:
 800ba14:	b40e      	push	{r1, r2, r3}
 800ba16:	b503      	push	{r0, r1, lr}
 800ba18:	4601      	mov	r1, r0
 800ba1a:	ab03      	add	r3, sp, #12
 800ba1c:	4805      	ldr	r0, [pc, #20]	; (800ba34 <fiprintf+0x20>)
 800ba1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba22:	6800      	ldr	r0, [r0, #0]
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	f7ff fd6b 	bl	800b500 <_vfiprintf_r>
 800ba2a:	b002      	add	sp, #8
 800ba2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba30:	b003      	add	sp, #12
 800ba32:	4770      	bx	lr
 800ba34:	200001d0 	.word	0x200001d0

0800ba38 <abort>:
 800ba38:	2006      	movs	r0, #6
 800ba3a:	b508      	push	{r3, lr}
 800ba3c:	f000 f82c 	bl	800ba98 <raise>
 800ba40:	2001      	movs	r0, #1
 800ba42:	f7f7 f8e2 	bl	8002c0a <_exit>

0800ba46 <_raise_r>:
 800ba46:	291f      	cmp	r1, #31
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	d904      	bls.n	800ba5a <_raise_r+0x14>
 800ba50:	2316      	movs	r3, #22
 800ba52:	6003      	str	r3, [r0, #0]
 800ba54:	f04f 30ff 	mov.w	r0, #4294967295
 800ba58:	bd38      	pop	{r3, r4, r5, pc}
 800ba5a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba5c:	b112      	cbz	r2, 800ba64 <_raise_r+0x1e>
 800ba5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba62:	b94b      	cbnz	r3, 800ba78 <_raise_r+0x32>
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 f831 	bl	800bacc <_getpid_r>
 800ba6a:	462a      	mov	r2, r5
 800ba6c:	4601      	mov	r1, r0
 800ba6e:	4620      	mov	r0, r4
 800ba70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba74:	f000 b818 	b.w	800baa8 <_kill_r>
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d00a      	beq.n	800ba92 <_raise_r+0x4c>
 800ba7c:	1c59      	adds	r1, r3, #1
 800ba7e:	d103      	bne.n	800ba88 <_raise_r+0x42>
 800ba80:	2316      	movs	r3, #22
 800ba82:	6003      	str	r3, [r0, #0]
 800ba84:	2001      	movs	r0, #1
 800ba86:	e7e7      	b.n	800ba58 <_raise_r+0x12>
 800ba88:	2400      	movs	r4, #0
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba90:	4798      	blx	r3
 800ba92:	2000      	movs	r0, #0
 800ba94:	e7e0      	b.n	800ba58 <_raise_r+0x12>
	...

0800ba98 <raise>:
 800ba98:	4b02      	ldr	r3, [pc, #8]	; (800baa4 <raise+0xc>)
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	f7ff bfd2 	b.w	800ba46 <_raise_r>
 800baa2:	bf00      	nop
 800baa4:	200001d0 	.word	0x200001d0

0800baa8 <_kill_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	2300      	movs	r3, #0
 800baac:	4d06      	ldr	r5, [pc, #24]	; (800bac8 <_kill_r+0x20>)
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	4611      	mov	r1, r2
 800bab4:	602b      	str	r3, [r5, #0]
 800bab6:	f7f7 f898 	bl	8002bea <_kill>
 800baba:	1c43      	adds	r3, r0, #1
 800babc:	d102      	bne.n	800bac4 <_kill_r+0x1c>
 800babe:	682b      	ldr	r3, [r5, #0]
 800bac0:	b103      	cbz	r3, 800bac4 <_kill_r+0x1c>
 800bac2:	6023      	str	r3, [r4, #0]
 800bac4:	bd38      	pop	{r3, r4, r5, pc}
 800bac6:	bf00      	nop
 800bac8:	200005fc 	.word	0x200005fc

0800bacc <_getpid_r>:
 800bacc:	f7f7 b886 	b.w	8002bdc <_getpid>

0800bad0 <atan2>:
 800bad0:	f000 b802 	b.w	800bad8 <__ieee754_atan2>
 800bad4:	0000      	movs	r0, r0
	...

0800bad8 <__ieee754_atan2>:
 800bad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	4617      	mov	r7, r2
 800bade:	4692      	mov	sl, r2
 800bae0:	4699      	mov	r9, r3
 800bae2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bae6:	427b      	negs	r3, r7
 800bae8:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800bc68 <__ieee754_atan2+0x190>
 800baec:	433b      	orrs	r3, r7
 800baee:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800baf2:	4543      	cmp	r3, r8
 800baf4:	4604      	mov	r4, r0
 800baf6:	460d      	mov	r5, r1
 800baf8:	d809      	bhi.n	800bb0e <__ieee754_atan2+0x36>
 800bafa:	4246      	negs	r6, r0
 800bafc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bb00:	4306      	orrs	r6, r0
 800bb02:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800bb06:	4546      	cmp	r6, r8
 800bb08:	468e      	mov	lr, r1
 800bb0a:	4683      	mov	fp, r0
 800bb0c:	d908      	bls.n	800bb20 <__ieee754_atan2+0x48>
 800bb0e:	4652      	mov	r2, sl
 800bb10:	464b      	mov	r3, r9
 800bb12:	4620      	mov	r0, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	f7f4 fb33 	bl	8000180 <__adddf3>
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	460d      	mov	r5, r1
 800bb1e:	e019      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bb20:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800bb24:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800bb28:	433e      	orrs	r6, r7
 800bb2a:	d103      	bne.n	800bb34 <__ieee754_atan2+0x5c>
 800bb2c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb30:	f000 b8a2 	b.w	800bc78 <atan>
 800bb34:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800bb38:	f006 0602 	and.w	r6, r6, #2
 800bb3c:	ea53 0b0b 	orrs.w	fp, r3, fp
 800bb40:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800bb44:	d10a      	bne.n	800bb5c <__ieee754_atan2+0x84>
 800bb46:	2e02      	cmp	r6, #2
 800bb48:	d067      	beq.n	800bc1a <__ieee754_atan2+0x142>
 800bb4a:	2e03      	cmp	r6, #3
 800bb4c:	d102      	bne.n	800bb54 <__ieee754_atan2+0x7c>
 800bb4e:	a53a      	add	r5, pc, #232	; (adr r5, 800bc38 <__ieee754_atan2+0x160>)
 800bb50:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5c:	4317      	orrs	r7, r2
 800bb5e:	d106      	bne.n	800bb6e <__ieee754_atan2+0x96>
 800bb60:	f1be 0f00 	cmp.w	lr, #0
 800bb64:	da64      	bge.n	800bc30 <__ieee754_atan2+0x158>
 800bb66:	a536      	add	r5, pc, #216	; (adr r5, 800bc40 <__ieee754_atan2+0x168>)
 800bb68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bb6c:	e7f2      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bb6e:	4542      	cmp	r2, r8
 800bb70:	d10f      	bne.n	800bb92 <__ieee754_atan2+0xba>
 800bb72:	4293      	cmp	r3, r2
 800bb74:	f106 36ff 	add.w	r6, r6, #4294967295
 800bb78:	d107      	bne.n	800bb8a <__ieee754_atan2+0xb2>
 800bb7a:	2e02      	cmp	r6, #2
 800bb7c:	d851      	bhi.n	800bc22 <__ieee754_atan2+0x14a>
 800bb7e:	4b3b      	ldr	r3, [pc, #236]	; (800bc6c <__ieee754_atan2+0x194>)
 800bb80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb84:	e9d3 4500 	ldrd	r4, r5, [r3]
 800bb88:	e7e4      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bb8a:	2e02      	cmp	r6, #2
 800bb8c:	d84d      	bhi.n	800bc2a <__ieee754_atan2+0x152>
 800bb8e:	4b38      	ldr	r3, [pc, #224]	; (800bc70 <__ieee754_atan2+0x198>)
 800bb90:	e7f6      	b.n	800bb80 <__ieee754_atan2+0xa8>
 800bb92:	4543      	cmp	r3, r8
 800bb94:	d0e4      	beq.n	800bb60 <__ieee754_atan2+0x88>
 800bb96:	1a9b      	subs	r3, r3, r2
 800bb98:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bb9c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bba0:	da21      	bge.n	800bbe6 <__ieee754_atan2+0x10e>
 800bba2:	f1b9 0f00 	cmp.w	r9, #0
 800bba6:	da01      	bge.n	800bbac <__ieee754_atan2+0xd4>
 800bba8:	323c      	adds	r2, #60	; 0x3c
 800bbaa:	db20      	blt.n	800bbee <__ieee754_atan2+0x116>
 800bbac:	4652      	mov	r2, sl
 800bbae:	464b      	mov	r3, r9
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	f7f4 fdc4 	bl	8000740 <__aeabi_ddiv>
 800bbb8:	f000 f9e8 	bl	800bf8c <fabs>
 800bbbc:	f000 f85c 	bl	800bc78 <atan>
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	2e01      	cmp	r6, #1
 800bbc6:	d015      	beq.n	800bbf4 <__ieee754_atan2+0x11c>
 800bbc8:	2e02      	cmp	r6, #2
 800bbca:	d017      	beq.n	800bbfc <__ieee754_atan2+0x124>
 800bbcc:	2e00      	cmp	r6, #0
 800bbce:	d0c1      	beq.n	800bb54 <__ieee754_atan2+0x7c>
 800bbd0:	a31d      	add	r3, pc, #116	; (adr r3, 800bc48 <__ieee754_atan2+0x170>)
 800bbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4629      	mov	r1, r5
 800bbda:	f7f4 facf 	bl	800017c <__aeabi_dsub>
 800bbde:	a31c      	add	r3, pc, #112	; (adr r3, 800bc50 <__ieee754_atan2+0x178>)
 800bbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe4:	e016      	b.n	800bc14 <__ieee754_atan2+0x13c>
 800bbe6:	a51c      	add	r5, pc, #112	; (adr r5, 800bc58 <__ieee754_atan2+0x180>)
 800bbe8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bbec:	e7ea      	b.n	800bbc4 <__ieee754_atan2+0xec>
 800bbee:	2400      	movs	r4, #0
 800bbf0:	2500      	movs	r5, #0
 800bbf2:	e7e7      	b.n	800bbc4 <__ieee754_atan2+0xec>
 800bbf4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800bbf8:	461d      	mov	r5, r3
 800bbfa:	e7ab      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bbfc:	a312      	add	r3, pc, #72	; (adr r3, 800bc48 <__ieee754_atan2+0x170>)
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	4620      	mov	r0, r4
 800bc04:	4629      	mov	r1, r5
 800bc06:	f7f4 fab9 	bl	800017c <__aeabi_dsub>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	a110      	add	r1, pc, #64	; (adr r1, 800bc50 <__ieee754_atan2+0x178>)
 800bc10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc14:	f7f4 fab2 	bl	800017c <__aeabi_dsub>
 800bc18:	e77f      	b.n	800bb1a <__ieee754_atan2+0x42>
 800bc1a:	a50d      	add	r5, pc, #52	; (adr r5, 800bc50 <__ieee754_atan2+0x178>)
 800bc1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc20:	e798      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bc22:	a50f      	add	r5, pc, #60	; (adr r5, 800bc60 <__ieee754_atan2+0x188>)
 800bc24:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc28:	e794      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bc2a:	2400      	movs	r4, #0
 800bc2c:	2500      	movs	r5, #0
 800bc2e:	e791      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bc30:	a509      	add	r5, pc, #36	; (adr r5, 800bc58 <__ieee754_atan2+0x180>)
 800bc32:	e9d5 4500 	ldrd	r4, r5, [r5]
 800bc36:	e78d      	b.n	800bb54 <__ieee754_atan2+0x7c>
 800bc38:	54442d18 	.word	0x54442d18
 800bc3c:	c00921fb 	.word	0xc00921fb
 800bc40:	54442d18 	.word	0x54442d18
 800bc44:	bff921fb 	.word	0xbff921fb
 800bc48:	33145c07 	.word	0x33145c07
 800bc4c:	3ca1a626 	.word	0x3ca1a626
 800bc50:	54442d18 	.word	0x54442d18
 800bc54:	400921fb 	.word	0x400921fb
 800bc58:	54442d18 	.word	0x54442d18
 800bc5c:	3ff921fb 	.word	0x3ff921fb
 800bc60:	54442d18 	.word	0x54442d18
 800bc64:	3fe921fb 	.word	0x3fe921fb
 800bc68:	7ff00000 	.word	0x7ff00000
 800bc6c:	0800c4d0 	.word	0x0800c4d0
 800bc70:	0800c4e8 	.word	0x0800c4e8
 800bc74:	00000000 	.word	0x00000000

0800bc78 <atan>:
 800bc78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	4bb6      	ldr	r3, [pc, #728]	; (800bf58 <atan+0x2e0>)
 800bc7e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bc82:	429e      	cmp	r6, r3
 800bc84:	4604      	mov	r4, r0
 800bc86:	460d      	mov	r5, r1
 800bc88:	468b      	mov	fp, r1
 800bc8a:	dd17      	ble.n	800bcbc <atan+0x44>
 800bc8c:	4bb3      	ldr	r3, [pc, #716]	; (800bf5c <atan+0x2e4>)
 800bc8e:	429e      	cmp	r6, r3
 800bc90:	dc01      	bgt.n	800bc96 <atan+0x1e>
 800bc92:	d109      	bne.n	800bca8 <atan+0x30>
 800bc94:	b140      	cbz	r0, 800bca8 <atan+0x30>
 800bc96:	4622      	mov	r2, r4
 800bc98:	462b      	mov	r3, r5
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	f7f4 fa6f 	bl	8000180 <__adddf3>
 800bca2:	4604      	mov	r4, r0
 800bca4:	460d      	mov	r5, r1
 800bca6:	e005      	b.n	800bcb4 <atan+0x3c>
 800bca8:	f1bb 0f00 	cmp.w	fp, #0
 800bcac:	4cac      	ldr	r4, [pc, #688]	; (800bf60 <atan+0x2e8>)
 800bcae:	f300 8121 	bgt.w	800bef4 <atan+0x27c>
 800bcb2:	4dac      	ldr	r5, [pc, #688]	; (800bf64 <atan+0x2ec>)
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbc:	4baa      	ldr	r3, [pc, #680]	; (800bf68 <atan+0x2f0>)
 800bcbe:	429e      	cmp	r6, r3
 800bcc0:	dc11      	bgt.n	800bce6 <atan+0x6e>
 800bcc2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bcc6:	429e      	cmp	r6, r3
 800bcc8:	dc0a      	bgt.n	800bce0 <atan+0x68>
 800bcca:	a38b      	add	r3, pc, #556	; (adr r3, 800bef8 <atan+0x280>)
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	f7f4 fa56 	bl	8000180 <__adddf3>
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4ba5      	ldr	r3, [pc, #660]	; (800bf6c <atan+0x2f4>)
 800bcd8:	f7f4 fe98 	bl	8000a0c <__aeabi_dcmpgt>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d1e9      	bne.n	800bcb4 <atan+0x3c>
 800bce0:	f04f 3aff 	mov.w	sl, #4294967295
 800bce4:	e027      	b.n	800bd36 <atan+0xbe>
 800bce6:	f000 f951 	bl	800bf8c <fabs>
 800bcea:	4ba1      	ldr	r3, [pc, #644]	; (800bf70 <atan+0x2f8>)
 800bcec:	4604      	mov	r4, r0
 800bcee:	429e      	cmp	r6, r3
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	f300 80b8 	bgt.w	800be66 <atan+0x1ee>
 800bcf6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bcfa:	429e      	cmp	r6, r3
 800bcfc:	f300 809c 	bgt.w	800be38 <atan+0x1c0>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	f7f4 fa3c 	bl	8000180 <__adddf3>
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4b98      	ldr	r3, [pc, #608]	; (800bf6c <atan+0x2f4>)
 800bd0c:	f7f4 fa36 	bl	800017c <__aeabi_dsub>
 800bd10:	2200      	movs	r2, #0
 800bd12:	4606      	mov	r6, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	f7f4 fa2f 	bl	8000180 <__adddf3>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	f7f4 fd09 	bl	8000740 <__aeabi_ddiv>
 800bd2e:	f04f 0a00 	mov.w	sl, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	460d      	mov	r5, r1
 800bd36:	4622      	mov	r2, r4
 800bd38:	462b      	mov	r3, r5
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 fbd5 	bl	80004ec <__aeabi_dmul>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4680      	mov	r8, r0
 800bd48:	4689      	mov	r9, r1
 800bd4a:	f7f4 fbcf 	bl	80004ec <__aeabi_dmul>
 800bd4e:	a36c      	add	r3, pc, #432	; (adr r3, 800bf00 <atan+0x288>)
 800bd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd54:	4606      	mov	r6, r0
 800bd56:	460f      	mov	r7, r1
 800bd58:	f7f4 fbc8 	bl	80004ec <__aeabi_dmul>
 800bd5c:	a36a      	add	r3, pc, #424	; (adr r3, 800bf08 <atan+0x290>)
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	f7f4 fa0d 	bl	8000180 <__adddf3>
 800bd66:	4632      	mov	r2, r6
 800bd68:	463b      	mov	r3, r7
 800bd6a:	f7f4 fbbf 	bl	80004ec <__aeabi_dmul>
 800bd6e:	a368      	add	r3, pc, #416	; (adr r3, 800bf10 <atan+0x298>)
 800bd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd74:	f7f4 fa04 	bl	8000180 <__adddf3>
 800bd78:	4632      	mov	r2, r6
 800bd7a:	463b      	mov	r3, r7
 800bd7c:	f7f4 fbb6 	bl	80004ec <__aeabi_dmul>
 800bd80:	a365      	add	r3, pc, #404	; (adr r3, 800bf18 <atan+0x2a0>)
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 f9fb 	bl	8000180 <__adddf3>
 800bd8a:	4632      	mov	r2, r6
 800bd8c:	463b      	mov	r3, r7
 800bd8e:	f7f4 fbad 	bl	80004ec <__aeabi_dmul>
 800bd92:	a363      	add	r3, pc, #396	; (adr r3, 800bf20 <atan+0x2a8>)
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	f7f4 f9f2 	bl	8000180 <__adddf3>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	463b      	mov	r3, r7
 800bda0:	f7f4 fba4 	bl	80004ec <__aeabi_dmul>
 800bda4:	a360      	add	r3, pc, #384	; (adr r3, 800bf28 <atan+0x2b0>)
 800bda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdaa:	f7f4 f9e9 	bl	8000180 <__adddf3>
 800bdae:	4642      	mov	r2, r8
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	f7f4 fb9b 	bl	80004ec <__aeabi_dmul>
 800bdb6:	a35e      	add	r3, pc, #376	; (adr r3, 800bf30 <atan+0x2b8>)
 800bdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbc:	4680      	mov	r8, r0
 800bdbe:	4689      	mov	r9, r1
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	f7f4 fb92 	bl	80004ec <__aeabi_dmul>
 800bdc8:	a35b      	add	r3, pc, #364	; (adr r3, 800bf38 <atan+0x2c0>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f7f4 f9d5 	bl	800017c <__aeabi_dsub>
 800bdd2:	4632      	mov	r2, r6
 800bdd4:	463b      	mov	r3, r7
 800bdd6:	f7f4 fb89 	bl	80004ec <__aeabi_dmul>
 800bdda:	a359      	add	r3, pc, #356	; (adr r3, 800bf40 <atan+0x2c8>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	f7f4 f9cc 	bl	800017c <__aeabi_dsub>
 800bde4:	4632      	mov	r2, r6
 800bde6:	463b      	mov	r3, r7
 800bde8:	f7f4 fb80 	bl	80004ec <__aeabi_dmul>
 800bdec:	a356      	add	r3, pc, #344	; (adr r3, 800bf48 <atan+0x2d0>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f7f4 f9c3 	bl	800017c <__aeabi_dsub>
 800bdf6:	4632      	mov	r2, r6
 800bdf8:	463b      	mov	r3, r7
 800bdfa:	f7f4 fb77 	bl	80004ec <__aeabi_dmul>
 800bdfe:	a354      	add	r3, pc, #336	; (adr r3, 800bf50 <atan+0x2d8>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	f7f4 f9ba 	bl	800017c <__aeabi_dsub>
 800be08:	4632      	mov	r2, r6
 800be0a:	463b      	mov	r3, r7
 800be0c:	f7f4 fb6e 	bl	80004ec <__aeabi_dmul>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4640      	mov	r0, r8
 800be16:	4649      	mov	r1, r9
 800be18:	f7f4 f9b2 	bl	8000180 <__adddf3>
 800be1c:	4622      	mov	r2, r4
 800be1e:	462b      	mov	r3, r5
 800be20:	f7f4 fb64 	bl	80004ec <__aeabi_dmul>
 800be24:	f1ba 3fff 	cmp.w	sl, #4294967295
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	d144      	bne.n	800beb8 <atan+0x240>
 800be2e:	4620      	mov	r0, r4
 800be30:	4629      	mov	r1, r5
 800be32:	f7f4 f9a3 	bl	800017c <__aeabi_dsub>
 800be36:	e734      	b.n	800bca2 <atan+0x2a>
 800be38:	2200      	movs	r2, #0
 800be3a:	4b4c      	ldr	r3, [pc, #304]	; (800bf6c <atan+0x2f4>)
 800be3c:	f7f4 f99e 	bl	800017c <__aeabi_dsub>
 800be40:	2200      	movs	r2, #0
 800be42:	4606      	mov	r6, r0
 800be44:	460f      	mov	r7, r1
 800be46:	4620      	mov	r0, r4
 800be48:	4629      	mov	r1, r5
 800be4a:	4b48      	ldr	r3, [pc, #288]	; (800bf6c <atan+0x2f4>)
 800be4c:	f7f4 f998 	bl	8000180 <__adddf3>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4630      	mov	r0, r6
 800be56:	4639      	mov	r1, r7
 800be58:	f7f4 fc72 	bl	8000740 <__aeabi_ddiv>
 800be5c:	f04f 0a01 	mov.w	sl, #1
 800be60:	4604      	mov	r4, r0
 800be62:	460d      	mov	r5, r1
 800be64:	e767      	b.n	800bd36 <atan+0xbe>
 800be66:	4b43      	ldr	r3, [pc, #268]	; (800bf74 <atan+0x2fc>)
 800be68:	429e      	cmp	r6, r3
 800be6a:	da1a      	bge.n	800bea2 <atan+0x22a>
 800be6c:	2200      	movs	r2, #0
 800be6e:	4b42      	ldr	r3, [pc, #264]	; (800bf78 <atan+0x300>)
 800be70:	f7f4 f984 	bl	800017c <__aeabi_dsub>
 800be74:	2200      	movs	r2, #0
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	4620      	mov	r0, r4
 800be7c:	4629      	mov	r1, r5
 800be7e:	4b3e      	ldr	r3, [pc, #248]	; (800bf78 <atan+0x300>)
 800be80:	f7f4 fb34 	bl	80004ec <__aeabi_dmul>
 800be84:	2200      	movs	r2, #0
 800be86:	4b39      	ldr	r3, [pc, #228]	; (800bf6c <atan+0x2f4>)
 800be88:	f7f4 f97a 	bl	8000180 <__adddf3>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4630      	mov	r0, r6
 800be92:	4639      	mov	r1, r7
 800be94:	f7f4 fc54 	bl	8000740 <__aeabi_ddiv>
 800be98:	f04f 0a02 	mov.w	sl, #2
 800be9c:	4604      	mov	r4, r0
 800be9e:	460d      	mov	r5, r1
 800bea0:	e749      	b.n	800bd36 <atan+0xbe>
 800bea2:	4602      	mov	r2, r0
 800bea4:	460b      	mov	r3, r1
 800bea6:	2000      	movs	r0, #0
 800bea8:	4934      	ldr	r1, [pc, #208]	; (800bf7c <atan+0x304>)
 800beaa:	f7f4 fc49 	bl	8000740 <__aeabi_ddiv>
 800beae:	f04f 0a03 	mov.w	sl, #3
 800beb2:	4604      	mov	r4, r0
 800beb4:	460d      	mov	r5, r1
 800beb6:	e73e      	b.n	800bd36 <atan+0xbe>
 800beb8:	4b31      	ldr	r3, [pc, #196]	; (800bf80 <atan+0x308>)
 800beba:	4e32      	ldr	r6, [pc, #200]	; (800bf84 <atan+0x30c>)
 800bebc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 f95a 	bl	800017c <__aeabi_dsub>
 800bec8:	4622      	mov	r2, r4
 800beca:	462b      	mov	r3, r5
 800becc:	f7f4 f956 	bl	800017c <__aeabi_dsub>
 800bed0:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bedc:	f7f4 f94e 	bl	800017c <__aeabi_dsub>
 800bee0:	f1bb 0f00 	cmp.w	fp, #0
 800bee4:	4604      	mov	r4, r0
 800bee6:	460d      	mov	r5, r1
 800bee8:	f6bf aee4 	bge.w	800bcb4 <atan+0x3c>
 800beec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bef0:	461d      	mov	r5, r3
 800bef2:	e6df      	b.n	800bcb4 <atan+0x3c>
 800bef4:	4d24      	ldr	r5, [pc, #144]	; (800bf88 <atan+0x310>)
 800bef6:	e6dd      	b.n	800bcb4 <atan+0x3c>
 800bef8:	8800759c 	.word	0x8800759c
 800befc:	7e37e43c 	.word	0x7e37e43c
 800bf00:	e322da11 	.word	0xe322da11
 800bf04:	3f90ad3a 	.word	0x3f90ad3a
 800bf08:	24760deb 	.word	0x24760deb
 800bf0c:	3fa97b4b 	.word	0x3fa97b4b
 800bf10:	a0d03d51 	.word	0xa0d03d51
 800bf14:	3fb10d66 	.word	0x3fb10d66
 800bf18:	c54c206e 	.word	0xc54c206e
 800bf1c:	3fb745cd 	.word	0x3fb745cd
 800bf20:	920083ff 	.word	0x920083ff
 800bf24:	3fc24924 	.word	0x3fc24924
 800bf28:	5555550d 	.word	0x5555550d
 800bf2c:	3fd55555 	.word	0x3fd55555
 800bf30:	2c6a6c2f 	.word	0x2c6a6c2f
 800bf34:	bfa2b444 	.word	0xbfa2b444
 800bf38:	52defd9a 	.word	0x52defd9a
 800bf3c:	3fadde2d 	.word	0x3fadde2d
 800bf40:	af749a6d 	.word	0xaf749a6d
 800bf44:	3fb3b0f2 	.word	0x3fb3b0f2
 800bf48:	fe231671 	.word	0xfe231671
 800bf4c:	3fbc71c6 	.word	0x3fbc71c6
 800bf50:	9998ebc4 	.word	0x9998ebc4
 800bf54:	3fc99999 	.word	0x3fc99999
 800bf58:	440fffff 	.word	0x440fffff
 800bf5c:	7ff00000 	.word	0x7ff00000
 800bf60:	54442d18 	.word	0x54442d18
 800bf64:	bff921fb 	.word	0xbff921fb
 800bf68:	3fdbffff 	.word	0x3fdbffff
 800bf6c:	3ff00000 	.word	0x3ff00000
 800bf70:	3ff2ffff 	.word	0x3ff2ffff
 800bf74:	40038000 	.word	0x40038000
 800bf78:	3ff80000 	.word	0x3ff80000
 800bf7c:	bff00000 	.word	0xbff00000
 800bf80:	0800c520 	.word	0x0800c520
 800bf84:	0800c500 	.word	0x0800c500
 800bf88:	3ff921fb 	.word	0x3ff921fb

0800bf8c <fabs>:
 800bf8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf90:	4619      	mov	r1, r3
 800bf92:	4770      	bx	lr

0800bf94 <_init>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	bf00      	nop
 800bf98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf9a:	bc08      	pop	{r3}
 800bf9c:	469e      	mov	lr, r3
 800bf9e:	4770      	bx	lr

0800bfa0 <_fini>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr
