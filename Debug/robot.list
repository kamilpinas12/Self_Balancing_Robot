
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b04c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800b160  0800b160  0001b160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b828  0800b828  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b828  0800b828  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b828  0800b828  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b828  0800b828  0001b828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b82c  0800b82c  0001b82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  200001d8  0800ba08  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba8  0800ba08  00020ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4ba  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ae7  00000000  00000000  0003f6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000b00c  00000000  00000000  000441e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010d0  00000000  00000000  0004f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011e4  00000000  00000000  000502c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c055  00000000  00000000  000514ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000232e8  00000000  00000000  0006d501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00095220  00000000  00000000  000907e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a3c  00000000  00000000  00125a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0012a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b144 	.word	0x0800b144

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b144 	.word	0x0800b144

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dea:	2afd      	cmp	r2, #253	; 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	; 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	; 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	; 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_f2iz>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800112c:	d30f      	bcc.n	800114e <__aeabi_f2iz+0x2a>
 800112e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001132:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001136:	d90d      	bls.n	8001154 <__aeabi_f2iz+0x30>
 8001138:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800113c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001140:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001144:	fa23 f002 	lsr.w	r0, r3, r2
 8001148:	bf18      	it	ne
 800114a:	4240      	negne	r0, r0
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr
 8001154:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001158:	d101      	bne.n	800115e <__aeabi_f2iz+0x3a>
 800115a:	0242      	lsls	r2, r0, #9
 800115c:	d105      	bne.n	800116a <__aeabi_f2iz+0x46>
 800115e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001162:	bf08      	it	eq
 8001164:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr

08001170 <__aeabi_d2lz>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4605      	mov	r5, r0
 8001174:	460c      	mov	r4, r1
 8001176:	2200      	movs	r2, #0
 8001178:	2300      	movs	r3, #0
 800117a:	4628      	mov	r0, r5
 800117c:	4621      	mov	r1, r4
 800117e:	f7ff fc27 	bl	80009d0 <__aeabi_dcmplt>
 8001182:	b928      	cbnz	r0, 8001190 <__aeabi_d2lz+0x20>
 8001184:	4628      	mov	r0, r5
 8001186:	4621      	mov	r1, r4
 8001188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800118c:	f000 b80a 	b.w	80011a4 <__aeabi_d2ulz>
 8001190:	4628      	mov	r0, r5
 8001192:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001196:	f000 f805 	bl	80011a4 <__aeabi_d2ulz>
 800119a:	4240      	negs	r0, r0
 800119c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011a0:	bd38      	pop	{r3, r4, r5, pc}
 80011a2:	bf00      	nop

080011a4 <__aeabi_d2ulz>:
 80011a4:	b5d0      	push	{r4, r6, r7, lr}
 80011a6:	2200      	movs	r2, #0
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <__aeabi_d2ulz+0x34>)
 80011aa:	4606      	mov	r6, r0
 80011ac:	460f      	mov	r7, r1
 80011ae:	f7ff f99d 	bl	80004ec <__aeabi_dmul>
 80011b2:	f7ff fc73 	bl	8000a9c <__aeabi_d2uiz>
 80011b6:	4604      	mov	r4, r0
 80011b8:	f7ff f91e 	bl	80003f8 <__aeabi_ui2d>
 80011bc:	2200      	movs	r2, #0
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <__aeabi_d2ulz+0x38>)
 80011c0:	f7ff f994 	bl	80004ec <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4630      	mov	r0, r6
 80011ca:	4639      	mov	r1, r7
 80011cc:	f7fe ffd6 	bl	800017c <__aeabi_dsub>
 80011d0:	f7ff fc64 	bl	8000a9c <__aeabi_d2uiz>
 80011d4:	4621      	mov	r1, r4
 80011d6:	bdd0      	pop	{r4, r6, r7, pc}
 80011d8:	3df00000 	.word	0x3df00000
 80011dc:	41f00000 	.word	0x41f00000

080011e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e2:	4811      	ldr	r0, [pc, #68]	; (8001228 <MX_ADC1_Init+0x48>)
 80011e4:	4a11      	ldr	r2, [pc, #68]	; (800122c <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80011e8:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 80011ea:	6002      	str	r2, [r0, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 80011f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80011f4:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f6:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f8:	7303      	strb	r3, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fa:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011fe:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001200:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001202:	f002 f98f 	bl	8003524 <HAL_ADC_Init>
 8001206:	b108      	cbz	r0, 800120c <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 8001208:	f000 fa52 	bl	80016b0 <Error_Handler>

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800120c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	4806      	ldr	r0, [pc, #24]	; (8001228 <MX_ADC1_Init+0x48>)
 8001210:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001212:	e9cd 4401 	strd	r4, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001216:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001218:	f002 f83e 	bl	8003298 <HAL_ADC_ConfigChannel>
 800121c:	b108      	cbz	r0, 8001222 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 800121e:	f000 fa47 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001222:	b004      	add	sp, #16
 8001224:	bd10      	pop	{r4, pc}
 8001226:	bf00      	nop
 8001228:	200001f4 	.word	0x200001f4
 800122c:	40012400 	.word	0x40012400

08001230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001230:	b510      	push	{r4, lr}
 8001232:	4604      	mov	r4, r0
 8001234:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	2210      	movs	r2, #16
 8001238:	2100      	movs	r1, #0
 800123a:	a802      	add	r0, sp, #8
 800123c:	f007 f82e 	bl	800829c <memset>
  if(adcHandle->Instance==ADC1)
 8001240:	6822      	ldr	r2, [r4, #0]
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_ADC_MspInit+0x64>)
 8001244:	429a      	cmp	r2, r3
 8001246:	d123      	bne.n	8001290 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001248:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800124c:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BATTERY_VOLTAGE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001254:	619a      	str	r2, [r3, #24]
 8001256:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001258:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800125a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800125e:	9200      	str	r2, [sp, #0]
 8001260:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	f042 0204 	orr.w	r2, r2, #4
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126c:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800127c:	f002 fba6 	bl	80039cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8001280:	2012      	movs	r0, #18
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	f002 f9df 	bl	8003648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800128a:	2012      	movs	r0, #18
 800128c:	f002 fa0c 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001290:	b006      	add	sp, #24
 8001292:	bd10      	pop	{r4, pc}
 8001294:	40012400 	.word	0x40012400
 8001298:	40010800 	.word	0x40010800

0800129c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_DMA_Init+0x4c>)
{
 800129e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a0:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80012a2:	2103      	movs	r1, #3
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a4:	f042 0201 	orr.w	r2, r2, #1
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80012ac:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80012b4:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80012b8:	f002 f9c6 	bl	8003648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80012bc:	200e      	movs	r0, #14
 80012be:	f002 f9f3 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2103      	movs	r1, #3
 80012c6:	200f      	movs	r0, #15
 80012c8:	f002 f9be 	bl	8003648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012cc:	200f      	movs	r0, #15
 80012ce:	f002 f9eb 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2101      	movs	r1, #1
 80012d6:	2011      	movs	r0, #17
 80012d8:	f002 f9b6 	bl	8003648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012dc:	2011      	movs	r0, #17

}
 80012de:	b003      	add	sp, #12
 80012e0:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012e4:	f002 b9e0 	b.w	80036a8 <HAL_NVIC_EnableIRQ>
 80012e8:	40021000 	.word	0x40021000

080012ec <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	2210      	movs	r2, #16
{
 80012ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012f2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	eb0d 0002 	add.w	r0, sp, r2
 80012f8:	2100      	movs	r1, #0
 80012fa:	f006 ffcf 	bl	800829c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <MX_GPIO_Init+0xe4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001300:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80013d4 <MX_GPIO_Init+0xe8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001304:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001306:	4d34      	ldr	r5, [pc, #208]	; (80013d8 <MX_GPIO_Init+0xec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001308:	f042 0210 	orr.w	r2, r2, #16
 800130c:	619a      	str	r2, [r3, #24]
 800130e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001310:	4648      	mov	r0, r9
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	f002 0210 	and.w	r2, r2, #16
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800131c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001320:	f042 0220 	orr.w	r2, r2, #32
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8001328:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80013dc <MX_GPIO_Init+0xf0>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	f002 0220 	and.w	r2, r2, #32
 8001330:	9201      	str	r2, [sp, #4]
 8001332:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001338:	f042 0204 	orr.w	r2, r2, #4
 800133c:	619a      	str	r2, [r3, #24]
 800133e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	f002 0204 	and.w	r2, r2, #4
 8001346:	9202      	str	r2, [sp, #8]
 8001348:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	619a      	str	r2, [r3, #24]
 8001354:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	9303      	str	r3, [sp, #12]
 800135e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001360:	f002 fc0e 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001364:	4628      	mov	r0, r5
 8001366:	2200      	movs	r2, #0
 8001368:	2108      	movs	r1, #8
 800136a:	f002 fc09 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800136e:	4628      	mov	r0, r5
 8001370:	2201      	movs	r2, #1
 8001372:	2180      	movs	r1, #128	; 0x80
 8001374:	f002 fc04 	bl	8003b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	4640      	mov	r0, r8
 800137c:	2102      	movs	r1, #2
 800137e:	f002 fbff 	bl	8003b80 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001386:	4648      	mov	r0, r9
 8001388:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001392:	f002 fb1b 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 8001396:	2388      	movs	r3, #136	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	4628      	mov	r0, r5
 800139a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f002 fb12 	bl	80039cc <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 80013a8:	4640      	mov	r0, r8
 80013aa:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	e9cd 4606 	strd	r4, r6, [sp, #24]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f002 fb0a 	bl	80039cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLUE_STATE_Pin;
 80013b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 80013bc:	4628      	mov	r0, r5
 80013be:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f002 fb01 	bl	80039cc <HAL_GPIO_Init>

}
 80013ca:	b009      	add	sp, #36	; 0x24
 80013cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40010800 	.word	0x40010800
 80013dc:	40010c00 	.word	0x40010c00

080013e0 <saturation>:
extern robot_typedef robot;
extern uint8_t encoder_data_buffer[2];



void saturation(float min, float max, float* val){
 80013e0:	b570      	push	{r4, r5, r6, lr}
 80013e2:	4605      	mov	r5, r0
	if(*val > max) *val = max;
 80013e4:	6810      	ldr	r0, [r2, #0]
void saturation(float min, float max, float* val){
 80013e6:	460e      	mov	r6, r1
 80013e8:	4614      	mov	r4, r2
	if(*val > max) *val = max;
 80013ea:	f7ff fe91 	bl	8001110 <__aeabi_fcmpgt>
 80013ee:	b100      	cbz	r0, 80013f2 <saturation+0x12>
 80013f0:	6026      	str	r6, [r4, #0]
	if(*val < min) *val = min;
 80013f2:	4629      	mov	r1, r5
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	f7ff fe6d 	bl	80010d4 <__aeabi_fcmplt>
 80013fa:	b100      	cbz	r0, 80013fe <saturation+0x1e>
 80013fc:	6025      	str	r5, [r4, #0]
}
 80013fe:	bd70      	pop	{r4, r5, r6, pc}

08001400 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001400:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <MX_I2C1_Init+0x34>)
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <MX_I2C1_Init+0x38>)
 8001408:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800140c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001412:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001416:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001420:	f002 fdba 	bl	8003f98 <HAL_I2C_Init>
 8001424:	b118      	cbz	r0, 800142e <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800142a:	f000 b941 	b.w	80016b0 <Error_Handler>
}
 800142e:	bd08      	pop	{r3, pc}
 8001430:	20000268 	.word	0x20000268
 8001434:	40005400 	.word	0x40005400
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800143c:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800143e:	480b      	ldr	r0, [pc, #44]	; (800146c <MX_I2C2_Init+0x30>)
  hi2c2.Init.ClockSpeed = 100000;
 8001440:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <MX_I2C2_Init+0x34>)
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_I2C2_Init+0x38>)
 8001444:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001448:	2300      	movs	r3, #0
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.OwnAddress1 = 0;
 800144e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001452:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001456:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800145a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800145c:	f002 fd9c 	bl	8003f98 <HAL_I2C_Init>
 8001460:	b118      	cbz	r0, 800146a <MX_I2C2_Init+0x2e>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001462:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001466:	f000 b923 	b.w	80016b0 <Error_Handler>
}
 800146a:	bd08      	pop	{r3, pc}
 800146c:	200002bc 	.word	0x200002bc
 8001470:	40005800 	.word	0x40005800
 8001474:	000186a0 	.word	0x000186a0

08001478 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	2210      	movs	r2, #16
{
 800147a:	b530      	push	{r4, r5, lr}
 800147c:	4605      	mov	r5, r0
 800147e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	eb0d 0002 	add.w	r0, sp, r2
 8001484:	2100      	movs	r1, #0
 8001486:	f006 ff09 	bl	800829c <memset>
  if(i2cHandle->Instance==I2C1)
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_I2C_MspInit+0xd4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d132      	bne.n	80014f8 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	4c2f      	ldr	r4, [pc, #188]	; (8001550 <HAL_I2C_MspInit+0xd8>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	21c0      	movs	r1, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	482e      	ldr	r0, [pc, #184]	; (8001554 <HAL_I2C_MspInit+0xdc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	f043 0308 	orr.w	r3, r3, #8
 800149e:	61a3      	str	r3, [r4, #24]
 80014a0:	69a3      	ldr	r3, [r4, #24]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014aa:	2312      	movs	r3, #18
 80014ac:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f002 fa89 	bl	80039cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ba:	69e3      	ldr	r3, [r4, #28]
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014bc:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014c2:	61e3      	str	r3, [r4, #28]
 80014c4:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014c6:	4824      	ldr	r0, [pc, #144]	; (8001558 <HAL_I2C_MspInit+0xe0>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	2300      	movs	r3, #0
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80014d2:	4c22      	ldr	r4, [pc, #136]	; (800155c <HAL_I2C_MspInit+0xe4>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d4:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80014d8:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014da:	e9c4 2303 	strd	r2, r3, [r4, #12]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80014de:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e2:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014e4:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80014e6:	f002 f901 	bl	80036ec <HAL_DMA_Init>
 80014ea:	b108      	cbz	r0, 80014f0 <HAL_I2C_MspInit+0x78>
    {
      Error_Handler();
 80014ec:	f000 f8e0 	bl	80016b0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80014f0:	63ac      	str	r4, [r5, #56]	; 0x38
 80014f2:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014f4:	b009      	add	sp, #36	; 0x24
 80014f6:	bd30      	pop	{r4, r5, pc}
  else if(i2cHandle->Instance==I2C2)
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <HAL_I2C_MspInit+0xe8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d1fa      	bne.n	80014f4 <HAL_I2C_MspInit+0x7c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	4c14      	ldr	r4, [pc, #80]	; (8001550 <HAL_I2C_MspInit+0xd8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001500:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001506:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	61a3      	str	r3, [r4, #24]
 800150e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	4810      	ldr	r0, [pc, #64]	; (8001554 <HAL_I2C_MspInit+0xdc>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151a:	2312      	movs	r3, #18
 800151c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001520:	2303      	movs	r3, #3
 8001522:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001524:	f002 fa52 	bl	80039cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152a:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800152c:	4611      	mov	r1, r2
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001532:	61e3      	str	r3, [r4, #28]
 8001534:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001536:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153c:	9303      	str	r3, [sp, #12]
 800153e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001540:	f002 f882 	bl	8003648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001544:	2021      	movs	r0, #33	; 0x21
 8001546:	f002 f8af 	bl	80036a8 <HAL_NVIC_EnableIRQ>
}
 800154a:	e7d3      	b.n	80014f4 <HAL_I2C_MspInit+0x7c>
 800154c:	40005400 	.word	0x40005400
 8001550:	40021000 	.word	0x40021000
 8001554:	40010c00 	.word	0x40010c00
 8001558:	40020080 	.word	0x40020080
 800155c:	20000224 	.word	0x20000224
 8001560:	40005800 	.word	0x40005800

08001564 <filter_init>:
#include "low_pass_filter.h"


filter_typedef filter_init(float alpha){
	filter_typedef f = {alpha, 0, 1};
	return f;
 8001564:	2200      	movs	r2, #0
 8001566:	6042      	str	r2, [r0, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	6001      	str	r1, [r0, #0]
 800156c:	7202      	strb	r2, [r0, #8]
}
 800156e:	4770      	bx	lr

08001570 <filter>:


float filter(filter_typedef* filter, float new_value){
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(filter->reset){
 8001572:	7a03      	ldrb	r3, [r0, #8]
float filter(filter_typedef* filter, float new_value){
 8001574:	4605      	mov	r5, r0
 8001576:	460c      	mov	r4, r1
	if(filter->reset){
 8001578:	b123      	cbz	r3, 8001584 <filter+0x14>
		filter->reset = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	7203      	strb	r3, [r0, #8]
	else{
		float filtered_value = (filter->alpha) * new_value + (1 - filter->alpha) * filter->prev_value;
		filter->prev_value = filtered_value;
		return filtered_value;
	}
}
 800157e:	4620      	mov	r0, r4
		filter->prev_value = new_value;
 8001580:	606c      	str	r4, [r5, #4]
}
 8001582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		float filtered_value = (filter->alpha) * new_value + (1 - filter->alpha) * filter->prev_value;
 8001584:	6807      	ldr	r7, [r0, #0]
 8001586:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800158a:	4639      	mov	r1, r7
 800158c:	f7ff fafa 	bl	8000b84 <__aeabi_fsub>
 8001590:	6869      	ldr	r1, [r5, #4]
 8001592:	f7ff fc01 	bl	8000d98 <__aeabi_fmul>
 8001596:	4621      	mov	r1, r4
 8001598:	4606      	mov	r6, r0
 800159a:	4638      	mov	r0, r7
 800159c:	f7ff fbfc 	bl	8000d98 <__aeabi_fmul>
 80015a0:	4601      	mov	r1, r0
 80015a2:	4630      	mov	r0, r6
 80015a4:	f7ff faf0 	bl	8000b88 <__addsf3>
 80015a8:	4604      	mov	r4, r0
		return filtered_value;
 80015aa:	e7e8      	b.n	800157e <filter+0xe>

080015ac <reset_filter>:


void reset_filter(filter_typedef* filter){
	filter->reset = 1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	7203      	strb	r3, [r0, #8]
}
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN PFP */



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	4603      	mov	r3, r0
 80015b6:	b507      	push	{r0, r1, r2, lr}
	if(htim == stepper1.htim){
 80015b8:	4814      	ldr	r0, [pc, #80]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80015ba:	6802      	ldr	r2, [r0, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d104      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_I2C_Mem_Read_IT(&hi2c2, 0x6C, 0x0C, 1, encoder_data_buffer, 2);
	}
	else if(htim == &htim1){
		HAL_ADC_Start_IT(&hadc1);
	}
}
 80015c0:	b003      	add	sp, #12
 80015c2:	f85d eb04 	ldr.w	lr, [sp], #4
		stepper_update(&stepper2);
 80015c6:	f000 bf7e 	b.w	80024c6 <stepper_update>
	else if(htim == stepper2.htim){
 80015ca:	4811      	ldr	r0, [pc, #68]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80015cc:	6802      	ldr	r2, [r0, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d0f6      	beq.n	80015c0 <HAL_TIM_PeriodElapsedCallback+0xc>
	else if (htim == &htim4){
 80015d2:	4a10      	ldr	r2, [pc, #64]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d110      	bne.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x46>
		mpu_get_data_x_angle_DMA(robot.mpu);
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	f000 fb0e 	bl	8001bfc <mpu_get_data_x_angle_DMA>
		HAL_I2C_Mem_Read_IT(&hi2c2, 0x6C, 0x0C, 1, encoder_data_buffer, 2);
 80015e0:	2302      	movs	r3, #2
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	216c      	movs	r1, #108	; 0x6c
 80015ec:	2301      	movs	r3, #1
 80015ee:	480c      	ldr	r0, [pc, #48]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80015f0:	f002 ff4e 	bl	8004490 <HAL_I2C_Mem_Read_IT>
}
 80015f4:	b003      	add	sp, #12
 80015f6:	f85d fb04 	ldr.w	pc, [sp], #4
	else if(htim == &htim1){
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d1f9      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x40>
		HAL_ADC_Start_IT(&hadc1);
 8001600:	4809      	ldr	r0, [pc, #36]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x74>)
}
 8001602:	b003      	add	sp, #12
 8001604:	f85d eb04 	ldr.w	lr, [sp], #4
		HAL_ADC_Start_IT(&hadc1);
 8001608:	f001 bf00 	b.w	800340c <HAL_ADC_Start_IT>
 800160c:	20000314 	.word	0x20000314
 8001610:	20000340 	.word	0x20000340
 8001614:	20000940 	.word	0x20000940
 8001618:	20000814 	.word	0x20000814
 800161c:	20000310 	.word	0x20000310
 8001620:	200002bc 	.word	0x200002bc
 8001624:	20000868 	.word	0x20000868
 8001628:	200001f4 	.word	0x200001f4
 800162c:	00000000 	.word	0x00000000

08001630 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
	if(hadc == &hadc1){
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <HAL_ADC_ConvCpltCallback+0x70>)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001632:	b510      	push	{r4, lr}
	if(hadc == &hadc1){
 8001634:	4283      	cmp	r3, r0
 8001636:	d12a      	bne.n	800168e <HAL_ADC_ConvCpltCallback+0x5e>
		robot.battery_voltage = HAL_ADC_GetValue(&hadc1) * 0.0045934;
 8001638:	f001 fdb8 	bl	80031ac <HAL_ADC_GetValue>
 800163c:	f7fe fedc 	bl	80003f8 <__aeabi_ui2d>
 8001640:	a313      	add	r3, pc, #76	; (adr r3, 8001690 <HAL_ADC_ConvCpltCallback+0x60>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe ff51 	bl	80004ec <__aeabi_dmul>
 800164a:	f7ff fa47 	bl	8000adc <__aeabi_d2f>
 800164e:	4c15      	ldr	r4, [pc, #84]	; (80016a4 <HAL_ADC_ConvCpltCallback+0x74>)
 8001650:	6160      	str	r0, [r4, #20]
		if(robot.battery_voltage < 10.8){
 8001652:	f7fe fef3 	bl	800043c <__aeabi_f2d>
 8001656:	a310      	add	r3, pc, #64	; (adr r3, 8001698 <HAL_ADC_ConvCpltCallback+0x68>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f9b8 	bl	80009d0 <__aeabi_dcmplt>
 8001660:	b168      	cbz	r0, 800167e <HAL_ADC_ConvCpltCallback+0x4e>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001666:	4810      	ldr	r0, [pc, #64]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x78>)
 8001668:	f002 fa8f 	bl	8003b8a <HAL_GPIO_TogglePin>
			if(robot.battery_voltage < 10.5){
 800166c:	490f      	ldr	r1, [pc, #60]	; (80016ac <HAL_ADC_ConvCpltCallback+0x7c>)
 800166e:	6960      	ldr	r0, [r4, #20]
 8001670:	f7ff fd30 	bl	80010d4 <__aeabi_fcmplt>
 8001674:	b158      	cbz	r0, 800168e <HAL_ADC_ConvCpltCallback+0x5e>
		else{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
		}

	}
}
 8001676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				robot_stop();
 800167a:	f000 bc2d 	b.w	8001ed8 <robot_stop>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800167e:	2201      	movs	r2, #1
}
 8001680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001688:	4807      	ldr	r0, [pc, #28]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x78>)
 800168a:	f002 ba79 	b.w	8003b80 <HAL_GPIO_WritePin>
}
 800168e:	bd10      	pop	{r4, pc}
 8001690:	6c706ba3 	.word	0x6c706ba3
 8001694:	3f72d087 	.word	0x3f72d087
 8001698:	9999999a 	.word	0x9999999a
 800169c:	40259999 	.word	0x40259999
 80016a0:	200001f4 	.word	0x200001f4
 80016a4:	20000814 	.word	0x20000814
 80016a8:	40011000 	.word	0x40011000
 80016ac:	41280000 	.word	0x41280000

080016b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  robot_stop();
 80016b2:	f000 fc11 	bl	8001ed8 <robot_stop>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b6:	b672      	cpsid	i

  __disable_irq();
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <Error_Handler+0x8>

080016ba <SystemClock_Config>:
{
 80016ba:	b510      	push	{r4, lr}
 80016bc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	2214      	movs	r2, #20
 80016c0:	2100      	movs	r1, #0
 80016c2:	a80c      	add	r0, sp, #48	; 0x30
 80016c4:	f006 fdea 	bl	800829c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c8:	2214      	movs	r2, #20
 80016ca:	2100      	movs	r1, #0
 80016cc:	eb0d 0002 	add.w	r0, sp, r2
 80016d0:	f006 fde4 	bl	800829c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	2210      	movs	r2, #16
 80016d6:	2100      	movs	r1, #0
 80016d8:	a801      	add	r0, sp, #4
 80016da:	f006 fddf 	bl	800829c <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e6:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016f6:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f8:	f003 fe7a 	bl	80053f0 <HAL_RCC_OscConfig>
 80016fc:	b108      	cbz	r0, 8001702 <SystemClock_Config+0x48>
    Error_Handler();
 80016fe:	f7ff ffd7 	bl	80016b0 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001704:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001708:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170e:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001712:	4621      	mov	r1, r4
 8001714:	a805      	add	r0, sp, #20
 8001716:	f004 f82d 	bl	8005774 <HAL_RCC_ClockConfig>
 800171a:	2800      	cmp	r0, #0
 800171c:	d1ef      	bne.n	80016fe <SystemClock_Config+0x44>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800171e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001722:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001724:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001726:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001728:	f004 f8e0 	bl	80058ec <HAL_RCCEx_PeriphCLKConfig>
 800172c:	2800      	cmp	r0, #0
 800172e:	d1e6      	bne.n	80016fe <SystemClock_Config+0x44>
}
 8001730:	b014      	add	sp, #80	; 0x50
 8001732:	bd10      	pop	{r4, pc}
 8001734:	0000      	movs	r0, r0
	...

08001738 <main>:
{
 8001738:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800173c:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
  HAL_Init();
 8001740:	f001 fcfe 	bl	8003140 <HAL_Init>
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001744:	f241 7870 	movw	r8, #6000	; 0x1770
  SystemClock_Config();
 8001748:	f7ff ffb7 	bl	80016ba <SystemClock_Config>
  MX_GPIO_Init();
 800174c:	f7ff fdce 	bl	80012ec <MX_GPIO_Init>
  MX_DMA_Init();
 8001750:	f7ff fda4 	bl	800129c <MX_DMA_Init>
  MX_I2C1_Init();
 8001754:	f7ff fe54 	bl	8001400 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001758:	f001 f8a4 	bl	80028a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800175c:	f001 f8f2 	bl	8002944 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001760:	f001 fa8e 	bl	8002c80 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001764:	f7ff fe6a 	bl	800143c <MX_I2C2_Init>
  MX_TIM4_Init();
 8001768:	f000 ffce 	bl	8002708 <MX_TIM4_Init>
  MX_ADC1_Init();
 800176c:	f7ff fd38 	bl	80011e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001770:	f000 ff94 	bl	800269c <MX_TIM1_Init>
  stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
 8001778:	2580      	movs	r5, #128	; 0x80
 800177a:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800177e:	2308      	movs	r3, #8
 8001780:	4c77      	ldr	r4, [pc, #476]	; (8001960 <main+0x228>)
 8001782:	4f78      	ldr	r7, [pc, #480]	; (8001964 <main+0x22c>)
 8001784:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	4623      	mov	r3, r4
 800178c:	4638      	mov	r0, r7
 800178e:	4976      	ldr	r1, [pc, #472]	; (8001968 <main+0x230>)
 8001790:	9500      	str	r5, [sp, #0]
 8001792:	f000 fe67 	bl	8002464 <stepper_init>
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001796:	2301      	movs	r3, #1
 8001798:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800179c:	f04f 0802 	mov.w	r8, #2
 80017a0:	4b72      	ldr	r3, [pc, #456]	; (800196c <main+0x234>)
 80017a2:	4e73      	ldr	r6, [pc, #460]	; (8001970 <main+0x238>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	4630      	mov	r0, r6
 80017a8:	e9cd 3801 	strd	r3, r8, [sp, #4]
 80017ac:	4971      	ldr	r1, [pc, #452]	; (8001974 <main+0x23c>)
 80017ae:	4623      	mov	r3, r4
 80017b0:	9500      	str	r5, [sp, #0]
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 80017b2:	ac36      	add	r4, sp, #216	; 0xd8
  stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 80017b4:	f000 fe56 	bl	8002464 <stepper_init>
  mpu6050_typedef mpu = mpu_init(&hi2c1, 0xD0);
 80017b8:	22d0      	movs	r2, #208	; 0xd0
 80017ba:	4620      	mov	r0, r4
 80017bc:	496e      	ldr	r1, [pc, #440]	; (8001978 <main+0x240>)
 80017be:	f000 f994 	bl	8001aea <mpu_init>
  if(mpu_who_am_i(&mpu) != HAL_OK){
 80017c2:	4620      	mov	r0, r4
 80017c4:	f000 f989 	bl	8001ada <mpu_who_am_i>
 80017c8:	4605      	mov	r5, r0
 80017ca:	b198      	cbz	r0, 80017f4 <main+0xbc>
		  printf("Error while connecting to mpu 6050\n");
 80017cc:	4e6b      	ldr	r6, [pc, #428]	; (800197c <main+0x244>)
		  mpu = mpu_init(&hi2c1, 0xD0);
 80017ce:	4d6a      	ldr	r5, [pc, #424]	; (8001978 <main+0x240>)
		  printf("Error while connecting to mpu 6050\n");
 80017d0:	4630      	mov	r0, r6
 80017d2:	f006 fc4f 	bl	8008074 <puts>
		  mpu = mpu_init(&hi2c1, 0xD0);
 80017d6:	4629      	mov	r1, r5
 80017d8:	a80a      	add	r0, sp, #40	; 0x28
 80017da:	22d0      	movs	r2, #208	; 0xd0
 80017dc:	f000 f985 	bl	8001aea <mpu_init>
 80017e0:	2250      	movs	r2, #80	; 0x50
 80017e2:	4620      	mov	r0, r4
 80017e4:	a90a      	add	r1, sp, #40	; 0x28
 80017e6:	f006 fdff 	bl	80083e8 <memcpy>
		  HAL_Delay(1000);
 80017ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ee:	f001 fccb 	bl	8003188 <HAL_Delay>
	  while(1){
 80017f2:	e7ed      	b.n	80017d0 <main+0x98>
  set_gyro_scale(&mpu, range_250);
 80017f4:	4601      	mov	r1, r0
 80017f6:	4620      	mov	r0, r4
 80017f8:	f000 f90e 	bl	8001a18 <set_gyro_scale>
  set_accelerometer_scale(&mpu, range_2g);
 80017fc:	4629      	mov	r1, r5
 80017fe:	4620      	mov	r0, r4
 8001800:	f000 f932 	bl	8001a68 <set_accelerometer_scale>
  mpu_low_pass_filter(&mpu, Acc94Hz_Gyro98Hz);
 8001804:	4641      	mov	r1, r8
 8001806:	4620      	mov	r0, r4
 8001808:	f000 f956 	bl	8001ab8 <mpu_low_pass_filter>
  HAL_Delay(800);
 800180c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001810:	f001 fcba 	bl	8003188 <HAL_Delay>
  mpu_gyro_calibration(&mpu);
 8001814:	4620      	mov	r0, r4
 8001816:	f000 fa01 	bl	8001c1c <mpu_gyro_calibration>
  user_function_typedef user_function_array[] = {
 800181a:	f44f 7290 	mov.w	r2, #288	; 0x120
 800181e:	4958      	ldr	r1, [pc, #352]	; (8001980 <main+0x248>)
 8001820:	a84a      	add	r0, sp, #296	; 0x128
 8001822:	f006 fde1 	bl	80083e8 <memcpy>
  uart_interface_init(&uart_interface, &huart1, &hdma_usart1_rx, user_function_array, sizeof(user_function_array) / sizeof(user_function_typedef));
 8001826:	230c      	movs	r3, #12
  pid_typedef angle_pid = pid_init(480, 6, 1200);
 8001828:	f10d 0878 	add.w	r8, sp, #120	; 0x78
  uart_interface_init(&uart_interface, &huart1, &hdma_usart1_rx, user_function_array, sizeof(user_function_array) / sizeof(user_function_typedef));
 800182c:	4a55      	ldr	r2, [pc, #340]	; (8001984 <main+0x24c>)
 800182e:	4956      	ldr	r1, [pc, #344]	; (8001988 <main+0x250>)
 8001830:	4856      	ldr	r0, [pc, #344]	; (800198c <main+0x254>)
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	ab4a      	add	r3, sp, #296	; 0x128
 8001836:	f001 f8d5 	bl	80029e4 <uart_interface_init>
  pid_typedef pos_pid = pid_init(0.007, 0.0000045, 0.1);
 800183a:	f10d 0998 	add.w	r9, sp, #152	; 0x98
  pid_typedef angle_pid = pid_init(480, 6, 1200);
 800183e:	4640      	mov	r0, r8
 8001840:	4b53      	ldr	r3, [pc, #332]	; (8001990 <main+0x258>)
 8001842:	4a54      	ldr	r2, [pc, #336]	; (8001994 <main+0x25c>)
 8001844:	4954      	ldr	r1, [pc, #336]	; (8001998 <main+0x260>)
 8001846:	f000 faf3 	bl	8001e30 <pid_init>
  pid_typedef target_speed_pid = pid_init(0.008, 0, 5);
 800184a:	ad2e      	add	r5, sp, #184	; 0xb8
  pid_typedef pos_pid = pid_init(0.007, 0.0000045, 0.1);
 800184c:	4648      	mov	r0, r9
 800184e:	4b53      	ldr	r3, [pc, #332]	; (800199c <main+0x264>)
 8001850:	4a53      	ldr	r2, [pc, #332]	; (80019a0 <main+0x268>)
 8001852:	4954      	ldr	r1, [pc, #336]	; (80019a4 <main+0x26c>)
 8001854:	f000 faec 	bl	8001e30 <pid_init>
  robot.stepper1 = &stepper1;
 8001858:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80019a8 <main+0x270>
  pid_typedef target_speed_pid = pid_init(0.008, 0, 5);
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <main+0x274>)
 800185e:	2200      	movs	r2, #0
 8001860:	4953      	ldr	r1, [pc, #332]	; (80019b0 <main+0x278>)
 8001862:	4628      	mov	r0, r5
 8001864:	f000 fae4 	bl	8001e30 <pid_init>
  start_uart_interface(&uart_interface);
 8001868:	4848      	ldr	r0, [pc, #288]	; (800198c <main+0x254>)
  robot.stepper2 = &stepper2;
 800186a:	e9ca 7601 	strd	r7, r6, [sl, #4]
	  else if(fabs(robot.mpu->x_angle) > 0.7 && robot.control_on){
 800186e:	a738      	add	r7, pc, #224	; (adr r7, 8001950 <main+0x218>)
 8001870:	e9d7 6700 	ldrd	r6, r7, [r7]
  robot.angle_pid = &angle_pid;
 8001874:	e9ca 890a 	strd	r8, r9, [sl, #40]	; 0x28
	  if(fabsf(robot.mpu->x_angle) < 0.01 && !robot.control_on){
 8001878:	f20f 09dc 	addw	r9, pc, #220	; 0xdc
 800187c:	e9d9 8900 	ldrd	r8, r9, [r9]
  robot.mpu = &mpu;
 8001880:	f8ca 4000 	str.w	r4, [sl]
  robot.target_speed_pid = &target_speed_pid;
 8001884:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
  start_uart_interface(&uart_interface);
 8001888:	f001 f8c4 	bl	8002a14 <start_uart_interface>
  HAL_TIM_Base_Start_IT(&htim4);
 800188c:	4849      	ldr	r0, [pc, #292]	; (80019b4 <main+0x27c>)
 800188e:	f004 f91b 	bl	8005ac8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001892:	4849      	ldr	r0, [pc, #292]	; (80019b8 <main+0x280>)
	pos_filter = filter_init(0.1);
 8001894:	ac06      	add	r4, sp, #24
  HAL_TIM_Base_Start_IT(&htim1);
 8001896:	f004 f917 	bl	8005ac8 <HAL_TIM_Base_Start_IT>
	pos_filter = filter_init(0.1);
 800189a:	4d48      	ldr	r5, [pc, #288]	; (80019bc <main+0x284>)
  HAL_Delay(50);
 800189c:	2032      	movs	r0, #50	; 0x32
 800189e:	f001 fc73 	bl	8003188 <HAL_Delay>
	pos_filter = filter_init(0.1);
 80018a2:	4620      	mov	r0, r4
 80018a4:	493d      	ldr	r1, [pc, #244]	; (800199c <main+0x264>)
 80018a6:	f7ff fe5d 	bl	8001564 <filter_init>
 80018aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	speed_filter = filter_init(0.05);
 80018b2:	4d43      	ldr	r5, [pc, #268]	; (80019c0 <main+0x288>)
 80018b4:	4620      	mov	r0, r4
 80018b6:	4943      	ldr	r1, [pc, #268]	; (80019c4 <main+0x28c>)
 80018b8:	f7ff fe54 	bl	8001564 <filter_init>
 80018bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018c0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	target_angle_filter = filter_init(0.05);
 80018c4:	4d40      	ldr	r5, [pc, #256]	; (80019c8 <main+0x290>)
 80018c6:	4620      	mov	r0, r4
 80018c8:	493e      	ldr	r1, [pc, #248]	; (80019c4 <main+0x28c>)
 80018ca:	f7ff fe4b 	bl	8001564 <filter_init>
 80018ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	robot_start();
 80018d6:	f000 fac3 	bl	8001e60 <robot_start>
	  start_uart_interface(&uart_interface);
 80018da:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800198c <main+0x254>
 80018de:	4658      	mov	r0, fp
 80018e0:	f001 f898 	bl	8002a14 <start_uart_interface>
	  if(fabsf(robot.mpu->x_angle) < 0.01 && !robot.control_on){
 80018e4:	f8da 3000 	ldr.w	r3, [sl]
 80018e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80018ea:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80018ee:	f7fe fda5 	bl	800043c <__aeabi_f2d>
 80018f2:	4642      	mov	r2, r8
 80018f4:	464b      	mov	r3, r9
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	f7ff f869 	bl	80009d0 <__aeabi_dcmplt>
 80018fe:	b178      	cbz	r0, 8001920 <main+0x1e8>
 8001900:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 8001904:	b9db      	cbnz	r3, 800193e <main+0x206>
		  robot_start();
 8001906:	f000 faab 	bl	8001e60 <robot_start>
	  if(uart_interface.command_received_flag){
 800190a:	f89b 3286 	ldrb.w	r3, [fp, #646]	; 0x286
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0e5      	beq.n	80018de <main+0x1a6>
		  execute_received_command(&uart_interface);
 8001912:	4658      	mov	r0, fp
 8001914:	f001 f910 	bl	8002b38 <execute_received_command>
		  start_uart_interface(&uart_interface);
 8001918:	4658      	mov	r0, fp
 800191a:	f001 f87b 	bl	8002a14 <start_uart_interface>
 800191e:	e7de      	b.n	80018de <main+0x1a6>
	  else if(fabs(robot.mpu->x_angle) > 0.7 && robot.control_on){
 8001920:	4632      	mov	r2, r6
 8001922:	463b      	mov	r3, r7
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7ff f870 	bl	8000a0c <__aeabi_dcmpgt>
 800192c:	2800      	cmp	r0, #0
 800192e:	d0ec      	beq.n	800190a <main+0x1d2>
 8001930:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0e8      	beq.n	800190a <main+0x1d2>
		  robot_stop();
 8001938:	f000 face 	bl	8001ed8 <robot_stop>
 800193c:	e7e5      	b.n	800190a <main+0x1d2>
	  else if(fabs(robot.mpu->x_angle) > 0.7 && robot.control_on){
 800193e:	4632      	mov	r2, r6
 8001940:	463b      	mov	r3, r7
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7ff f861 	bl	8000a0c <__aeabi_dcmpgt>
 800194a:	2800      	cmp	r0, #0
 800194c:	d0dd      	beq.n	800190a <main+0x1d2>
 800194e:	e7f3      	b.n	8001938 <main+0x200>
 8001950:	66666666 	.word	0x66666666
 8001954:	3fe66666 	.word	0x3fe66666
 8001958:	47ae147b 	.word	0x47ae147b
 800195c:	3f847ae1 	.word	0x3f847ae1
 8001960:	40010800 	.word	0x40010800
 8001964:	20000314 	.word	0x20000314
 8001968:	200008b0 	.word	0x200008b0
 800196c:	40010c00 	.word	0x40010c00
 8001970:	20000340 	.word	0x20000340
 8001974:	200008f8 	.word	0x200008f8
 8001978:	20000268 	.word	0x20000268
 800197c:	0800b280 	.word	0x0800b280
 8001980:	0800b160 	.word	0x0800b160
 8001984:	20000988 	.word	0x20000988
 8001988:	20000a10 	.word	0x20000a10
 800198c:	2000036c 	.word	0x2000036c
 8001990:	44960000 	.word	0x44960000
 8001994:	40c00000 	.word	0x40c00000
 8001998:	43f00000 	.word	0x43f00000
 800199c:	3dcccccd 	.word	0x3dcccccd
 80019a0:	3696feb5 	.word	0x3696feb5
 80019a4:	3be56042 	.word	0x3be56042
 80019a8:	20000814 	.word	0x20000814
 80019ac:	40a00000 	.word	0x40a00000
 80019b0:	3c03126f 	.word	0x3c03126f
 80019b4:	20000940 	.word	0x20000940
 80019b8:	20000868 	.word	0x20000868
 80019bc:	20000808 	.word	0x20000808
 80019c0:	2000084c 	.word	0x2000084c
 80019c4:	3d4ccccd 	.word	0x3d4ccccd
 80019c8:	20000858 	.word	0x20000858

080019cc <mpu_read_reg>:
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
}


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 80019cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80019ce:	460a      	mov	r2, r1
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 80019d0:	2301      	movs	r3, #1
 80019d2:	f04f 31ff 	mov.w	r1, #4294967295
 80019d6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80019da:	f10d 0117 	add.w	r1, sp, #23
 80019de:	9100      	str	r1, [sp, #0]
 80019e0:	7901      	ldrb	r1, [r0, #4]
 80019e2:	6800      	ldr	r0, [r0, #0]
 80019e4:	f002 fc10 	bl	8004208 <HAL_I2C_Mem_Read>
	return tmp;
}
 80019e8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80019ec:	b007      	add	sp, #28
 80019ee:	f85d fb04 	ldr.w	pc, [sp], #4

080019f2 <mpu_write_reg>:
{
 80019f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 80019f4:	2301      	movs	r3, #1
{
 80019f6:	f88d 2017 	strb.w	r2, [sp, #23]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 80019fa:	f04f 32ff 	mov.w	r2, #4294967295
 80019fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001a02:	f10d 0217 	add.w	r2, sp, #23
 8001a06:	9200      	str	r2, [sp, #0]
 8001a08:	460a      	mov	r2, r1
 8001a0a:	7901      	ldrb	r1, [r0, #4]
 8001a0c:	6800      	ldr	r0, [r0, #0]
 8001a0e:	f002 fb6b 	bl	80040e8 <HAL_I2C_Mem_Write>
}
 8001a12:	b007      	add	sp, #28
 8001a14:	f85d fb04 	ldr.w	pc, [sp], #4

08001a18 <set_gyro_scale>:
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
}


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 8001a18:	b538      	push	{r3, r4, r5, lr}
 8001a1a:	460d      	mov	r5, r1
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 8001a1c:	211b      	movs	r1, #27
{
 8001a1e:	4604      	mov	r4, r0
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 8001a20:	f7ff ffd4 	bl	80019cc <mpu_read_reg>
	tmp &= ~(3 << 3);
	tmp |= (range & 0x3) << 3;
 8001a24:	00eb      	lsls	r3, r5, #3
	tmp &= ~(3 << 3);
 8001a26:	f000 02e7 	and.w	r2, r0, #231	; 0xe7
	tmp |= (range & 0x3) << 3;
 8001a2a:	f003 0318 	and.w	r3, r3, #24
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 8001a2e:	211b      	movs	r1, #27
 8001a30:	4620      	mov	r0, r4
 8001a32:	431a      	orrs	r2, r3
 8001a34:	f7ff ffdd 	bl	80019f2 <mpu_write_reg>

	switch (range){
 8001a38:	2d03      	cmp	r5, #3
 8001a3a:	d805      	bhi.n	8001a48 <set_gyro_scale+0x30>
 8001a3c:	e8df f005 	tbb	[pc, r5]
 8001a40:	09070502 	.word	0x09070502
	case range_250:
		mpu->gyro_scale = 0.007633;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <set_gyro_scale+0x40>)
		break;
	case range_1000:
		mpu->gyro_scale = 0.030487;
		break;
	case range_2000:
		mpu->gyro_scale = 0.060975;
 8001a46:	60a3      	str	r3, [r4, #8]
		break;
	default:
		break;
	}
}
 8001a48:	bd38      	pop	{r3, r4, r5, pc}
		mpu->gyro_scale = 0.015267;
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <set_gyro_scale+0x44>)
 8001a4c:	e7fb      	b.n	8001a46 <set_gyro_scale+0x2e>
		mpu->gyro_scale = 0.030487;
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <set_gyro_scale+0x48>)
 8001a50:	e7f9      	b.n	8001a46 <set_gyro_scale+0x2e>
		mpu->gyro_scale = 0.060975;
 8001a52:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <set_gyro_scale+0x4c>)
 8001a54:	e7f7      	b.n	8001a46 <set_gyro_scale+0x2e>
 8001a56:	bf00      	nop
 8001a58:	3bfa1e3f 	.word	0x3bfa1e3f
 8001a5c:	3c7a2270 	.word	0x3c7a2270
 8001a60:	3cf9bfdf 	.word	0x3cf9bfdf
 8001a64:	3d79c0ec 	.word	0x3d79c0ec

08001a68 <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	460d      	mov	r5, r1
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8001a6c:	211c      	movs	r1, #28
{
 8001a6e:	4604      	mov	r4, r0
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8001a70:	f7ff ffac 	bl	80019cc <mpu_read_reg>
	tmp &= ~(3 << 3);
	tmp |= (range & 0x3) << 3;
 8001a74:	00eb      	lsls	r3, r5, #3
	tmp &= ~(3 << 3);
 8001a76:	f000 02e7 	and.w	r2, r0, #231	; 0xe7
	tmp |= (range & 0x3) << 3;
 8001a7a:	f003 0318 	and.w	r3, r3, #24
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 8001a7e:	211c      	movs	r1, #28
 8001a80:	4620      	mov	r0, r4
 8001a82:	431a      	orrs	r2, r3
 8001a84:	f7ff ffb5 	bl	80019f2 <mpu_write_reg>

	switch (range)
 8001a88:	2d03      	cmp	r5, #3
 8001a8a:	d805      	bhi.n	8001a98 <set_accelerometer_scale+0x30>
 8001a8c:	e8df f005 	tbb	[pc, r5]
 8001a90:	09070502 	.word	0x09070502
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <set_accelerometer_scale+0x40>)
		break;
	case range_8g:
		mpu->acc_scale = 0.000244;
		break;
	case range_16g:
		mpu->acc_scale = 0.0004882;
 8001a96:	60e3      	str	r3, [r4, #12]
		break;
	default:
		break;
	}
}
 8001a98:	bd38      	pop	{r3, r4, r5, pc}
		mpu->acc_scale = 0.000122;
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <set_accelerometer_scale+0x44>)
 8001a9c:	e7fb      	b.n	8001a96 <set_accelerometer_scale+0x2e>
		mpu->acc_scale = 0.000244;
 8001a9e:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <set_accelerometer_scale+0x48>)
 8001aa0:	e7f9      	b.n	8001a96 <set_accelerometer_scale+0x2e>
		mpu->acc_scale = 0.0004882;
 8001aa2:	4b04      	ldr	r3, [pc, #16]	; (8001ab4 <set_accelerometer_scale+0x4c>)
 8001aa4:	e7f7      	b.n	8001a96 <set_accelerometer_scale+0x2e>
 8001aa6:	bf00      	nop
 8001aa8:	387fda40 	.word	0x387fda40
 8001aac:	38ffda40 	.word	0x38ffda40
 8001ab0:	397fda40 	.word	0x397fda40
 8001ab4:	39fff518 	.word	0x39fff518

08001ab8 <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 8001ab8:	b538      	push	{r3, r4, r5, lr}
 8001aba:	460c      	mov	r4, r1
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 8001abc:	211a      	movs	r1, #26
{
 8001abe:	4605      	mov	r5, r0
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 8001ac0:	f7ff ff84 	bl	80019cc <mpu_read_reg>
	tmp &= ~ 7;
	tmp |= filter & 0x7;
 8001ac4:	f004 0407 	and.w	r4, r4, #7
	tmp &= ~ 7;
 8001ac8:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
	mpu_write_reg(mpu, CONFIG, tmp);
 8001acc:	4322      	orrs	r2, r4
 8001ace:	4628      	mov	r0, r5
}
 8001ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	mpu_write_reg(mpu, CONFIG, tmp);
 8001ad4:	211a      	movs	r1, #26
 8001ad6:	f7ff bf8c 	b.w	80019f2 <mpu_write_reg>

08001ada <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8001ada:	2175      	movs	r1, #117	; 0x75
{
 8001adc:	b508      	push	{r3, lr}
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8001ade:	f7ff ff75 	bl	80019cc <mpu_read_reg>
		return HAL_OK;
	}
	else{
		return HAL_ERROR;
	}
}
 8001ae2:	3868      	subs	r0, #104	; 0x68
 8001ae4:	bf18      	it	ne
 8001ae6:	2001      	movne	r0, #1
 8001ae8:	bd08      	pop	{r3, pc}

08001aea <mpu_init>:

mpu6050_typedef mpu_init(I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 8001aea:	b510      	push	{r4, lr}
 8001aec:	b094      	sub	sp, #80	; 0x50
 8001aee:	4604      	mov	r4, r0
	mpu6050_typedef mpu;
	mpu.hi2c = hi2c;
 8001af0:	9100      	str	r1, [sp, #0]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001af2:	4668      	mov	r0, sp
 8001af4:	216b      	movs	r1, #107	; 0x6b
	mpu.i2c_address = i2c_address;
 8001af6:	f88d 2004 	strb.w	r2, [sp, #4]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001afa:	f7ff ff67 	bl	80019cc <mpu_read_reg>
	tmp |= ((value & 0x1) << 7);
 8001afe:	f060 027f 	orn	r2, r0, #127	; 0x7f
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	216b      	movs	r1, #107	; 0x6b
 8001b06:	4668      	mov	r0, sp
 8001b08:	f7ff ff73 	bl	80019f2 <mpu_write_reg>


	mpu_reset(&mpu, 1);

	HAL_Delay(1000);
 8001b0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b10:	f001 fb3a 	bl	8003188 <HAL_Delay>
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001b14:	216b      	movs	r1, #107	; 0x6b
 8001b16:	4668      	mov	r0, sp
 8001b18:	f7ff ff58 	bl	80019cc <mpu_read_reg>
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001b1c:	216b      	movs	r1, #107	; 0x6b
 8001b1e:	f000 02bf 	and.w	r2, r0, #191	; 0xbf
 8001b22:	4668      	mov	r0, sp
 8001b24:	f7ff ff65 	bl	80019f2 <mpu_write_reg>

	mpu_sleep_mode(&mpu, 0);

	set_gyro_scale(&mpu, range_250);
 8001b28:	4668      	mov	r0, sp
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f7ff ff74 	bl	8001a18 <set_gyro_scale>
	set_accelerometer_scale(&mpu, range_2g);
 8001b30:	2100      	movs	r1, #0
 8001b32:	4668      	mov	r0, sp
 8001b34:	f7ff ff98 	bl	8001a68 <set_accelerometer_scale>

	mpu.gx_bias = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9304      	str	r3, [sp, #16]
	mpu.gy_bias = 0;
 8001b3c:	9305      	str	r3, [sp, #20]
	mpu.gz_bias = 0;
 8001b3e:	9306      	str	r3, [sp, #24]
	mpu.lst_update_x_angle = HAL_GetTick();
 8001b40:	f001 fb1c 	bl	800317c <HAL_GetTick>



	return mpu;
 8001b44:	2250      	movs	r2, #80	; 0x50
	mpu.lst_update_x_angle = HAL_GetTick();
 8001b46:	900f      	str	r0, [sp, #60]	; 0x3c
	return mpu;
 8001b48:	4669      	mov	r1, sp
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f006 fc4c 	bl	80083e8 <memcpy>
}
 8001b50:	4620      	mov	r0, r4
 8001b52:	b014      	add	sp, #80	; 0x50
 8001b54:	bd10      	pop	{r4, pc}

08001b56 <mpu_get_all_data>:


void mpu_get_all_data(mpu6050_typedef *mpu)
{
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY); // get all the data
 8001b56:	230e      	movs	r3, #14
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
{
 8001b5c:	b530      	push	{r4, r5, lr}
 8001b5e:	4604      	mov	r4, r0
 8001b60:	b089      	sub	sp, #36	; 0x24
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY); // get all the data
 8001b62:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001b66:	ab04      	add	r3, sp, #16
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	223b      	movs	r2, #59	; 0x3b
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	7901      	ldrb	r1, [r0, #4]
 8001b70:	6800      	ldr	r0, [r0, #0]
 8001b72:	f002 fb49 	bl	8004208 <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 8001b76:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8001b7a:	68e5      	ldr	r5, [r4, #12]
 8001b7c:	bac0      	revsh	r0, r0
 8001b7e:	f7ff f8b7 	bl	8000cf0 <__aeabi_i2f>
 8001b82:	4629      	mov	r1, r5
 8001b84:	f7ff f908 	bl	8000d98 <__aeabi_fmul>
 8001b88:	61e0      	str	r0, [r4, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 8001b8a:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8001b8e:	bac0      	revsh	r0, r0
 8001b90:	f7ff f8ae 	bl	8000cf0 <__aeabi_i2f>
 8001b94:	4629      	mov	r1, r5
 8001b96:	f7ff f8ff 	bl	8000d98 <__aeabi_fmul>
 8001b9a:	6220      	str	r0, [r4, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 8001b9c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8001ba0:	bac0      	revsh	r0, r0
 8001ba2:	f7ff f8a5 	bl	8000cf0 <__aeabi_i2f>
 8001ba6:	4629      	mov	r1, r5
 8001ba8:	f7ff f8f6 	bl	8000d98 <__aeabi_fmul>
 8001bac:	6260      	str	r0, [r4, #36]	; 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 8001bae:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8001bb2:	68a5      	ldr	r5, [r4, #8]
 8001bb4:	bac0      	revsh	r0, r0
 8001bb6:	f7ff f89b 	bl	8000cf0 <__aeabi_i2f>
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7ff f8ec 	bl	8000d98 <__aeabi_fmul>
 8001bc0:	6921      	ldr	r1, [r4, #16]
 8001bc2:	f7fe ffdf 	bl	8000b84 <__aeabi_fsub>
 8001bc6:	62a0      	str	r0, [r4, #40]	; 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 8001bc8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8001bcc:	bac0      	revsh	r0, r0
 8001bce:	f7ff f88f 	bl	8000cf0 <__aeabi_i2f>
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7ff f8e0 	bl	8000d98 <__aeabi_fmul>
 8001bd8:	6961      	ldr	r1, [r4, #20]
 8001bda:	f7fe ffd3 	bl	8000b84 <__aeabi_fsub>
 8001bde:	62e0      	str	r0, [r4, #44]	; 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 8001be0:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8001be4:	bac0      	revsh	r0, r0
 8001be6:	f7ff f883 	bl	8000cf0 <__aeabi_i2f>
 8001bea:	4629      	mov	r1, r5
 8001bec:	f7ff f8d4 	bl	8000d98 <__aeabi_fmul>
 8001bf0:	69a1      	ldr	r1, [r4, #24]
 8001bf2:	f7fe ffc7 	bl	8000b84 <__aeabi_fsub>
 8001bf6:	6320      	str	r0, [r4, #48]	; 0x30
}
 8001bf8:	b009      	add	sp, #36	; 0x24
 8001bfa:	bd30      	pop	{r4, r5, pc}

08001bfc <mpu_get_data_x_angle_DMA>:

}


void mpu_get_data_x_angle_DMA(mpu6050_typedef* mpu){
	HAL_I2C_Mem_Read_DMA(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, I2C_DMA_buffer, 12);
 8001bfc:	230c      	movs	r3, #12
void mpu_get_data_x_angle_DMA(mpu6050_typedef* mpu){
 8001bfe:	b507      	push	{r0, r1, r2, lr}
	HAL_I2C_Mem_Read_DMA(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, I2C_DMA_buffer, 12);
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <mpu_get_data_x_angle_DMA+0x1c>)
 8001c04:	223b      	movs	r2, #59	; 0x3b
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	7901      	ldrb	r1, [r0, #4]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	6800      	ldr	r0, [r0, #0]
 8001c0e:	f002 fca3 	bl	8004558 <HAL_I2C_Mem_Read_DMA>
}
 8001c12:	b003      	add	sp, #12
 8001c14:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c18:	200007fc 	.word	0x200007fc

08001c1c <mpu_gyro_calibration>:


void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 8001c1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
	uint8_t counter = 100;
	float gx_sum = 0;
	float gy_sum = 0;
	float gz_sum = 0;
 8001c20:	2500      	movs	r5, #0
{
 8001c22:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c2a:	483b      	ldr	r0, [pc, #236]	; (8001d18 <mpu_gyro_calibration+0xfc>)
 8001c2c:	f001 ffa8 	bl	8003b80 <HAL_GPIO_WritePin>

	for(int i = 0; i < counter; i++)
 8001c30:	f04f 0800 	mov.w	r8, #0
	float gy_sum = 0;
 8001c34:	462e      	mov	r6, r5
	float gx_sum = 0;
 8001c36:	462f      	mov	r7, r5
	{
		mpu_get_all_data(mpu);
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 8001c38:	f04f 4982 	mov.w	r9, #1090519040	; 0x41000000
		mpu_get_all_data(mpu);
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff ff8a 	bl	8001b56 <mpu_get_all_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 8001c42:	f8d4 b028 	ldr.w	fp, [r4, #40]	; 0x28
 8001c46:	4649      	mov	r1, r9
 8001c48:	f02b 4000 	bic.w	r0, fp, #2147483648	; 0x80000000
 8001c4c:	f7ff fa60 	bl	8001110 <__aeabi_fcmpgt>
 8001c50:	b988      	cbnz	r0, 8001c76 <mpu_gyro_calibration+0x5a>
 8001c52:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8001c56:	4649      	mov	r1, r9
 8001c58:	f02a 4000 	bic.w	r0, sl, #2147483648	; 0x80000000
 8001c5c:	f7ff fa58 	bl	8001110 <__aeabi_fcmpgt>
 8001c60:	b948      	cbnz	r0, 8001c76 <mpu_gyro_calibration+0x5a>
 8001c62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c64:	4649      	mov	r1, r9
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	9b01      	ldr	r3, [sp, #4]
 8001c6a:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8001c6e:	f7ff fa4f 	bl	8001110 <__aeabi_fcmpgt>
 8001c72:	2800      	cmp	r0, #0
 8001c74:	d03d      	beq.n	8001cf2 <mpu_gyro_calibration+0xd6>
			i = 0;
			gx_sum = 0;
			gy_sum = 0;
			gz_sum = 0;
 8001c76:	2500      	movs	r5, #0
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7e:	4826      	ldr	r0, [pc, #152]	; (8001d18 <mpu_gyro_calibration+0xfc>)
 8001c80:	f001 ff7e 	bl	8003b80 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8001c84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c88:	f001 fa7e 	bl	8003188 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c92:	4821      	ldr	r0, [pc, #132]	; (8001d18 <mpu_gyro_calibration+0xfc>)
 8001c94:	f001 ff74 	bl	8003b80 <HAL_GPIO_WritePin>
			i = 0;
 8001c98:	f04f 0800 	mov.w	r8, #0
			gy_sum = 0;
 8001c9c:	462e      	mov	r6, r5
			gx_sum = 0;
 8001c9e:	462f      	mov	r7, r5
	for(int i = 0; i < counter; i++)
 8001ca0:	f108 0801 	add.w	r8, r8, #1
 8001ca4:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 8001ca8:	d1c8      	bne.n	8001c3c <mpu_gyro_calibration+0x20>
		gz_sum += mpu->gz;

		HAL_Delay(4);
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 8001caa:	4638      	mov	r0, r7
 8001cac:	491b      	ldr	r1, [pc, #108]	; (8001d1c <mpu_gyro_calibration+0x100>)
 8001cae:	f7ff f927 	bl	8000f00 <__aeabi_fdiv>
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	6920      	ldr	r0, [r4, #16]
 8001cb6:	f7fe ff67 	bl	8000b88 <__addsf3>
	mpu->gy_bias += gy_sum / counter;
 8001cba:	4918      	ldr	r1, [pc, #96]	; (8001d1c <mpu_gyro_calibration+0x100>)
	mpu->gx_bias += gx_sum / counter;
 8001cbc:	6120      	str	r0, [r4, #16]
	mpu->gy_bias += gy_sum / counter;
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	f7ff f91e 	bl	8000f00 <__aeabi_fdiv>
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	6960      	ldr	r0, [r4, #20]
 8001cc8:	f7fe ff5e 	bl	8000b88 <__addsf3>
	mpu->gz_bias += gz_sum / counter;
 8001ccc:	4913      	ldr	r1, [pc, #76]	; (8001d1c <mpu_gyro_calibration+0x100>)
	mpu->gy_bias += gy_sum / counter;
 8001cce:	6160      	str	r0, [r4, #20]
	mpu->gz_bias += gz_sum / counter;
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f7ff f915 	bl	8000f00 <__aeabi_fdiv>
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	69a0      	ldr	r0, [r4, #24]
 8001cda:	f7fe ff55 	bl	8000b88 <__addsf3>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	mpu->gz_bias += gz_sum / counter;
 8001ce4:	61a0      	str	r0, [r4, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <mpu_gyro_calibration+0xfc>)
}
 8001ce8:	b003      	add	sp, #12
 8001cea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001cee:	f001 bf47 	b.w	8003b80 <HAL_GPIO_WritePin>
		gx_sum += mpu->gx;
 8001cf2:	4659      	mov	r1, fp
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	f7fe ff47 	bl	8000b88 <__addsf3>
		gy_sum += mpu->gy;
 8001cfa:	4651      	mov	r1, sl
		gx_sum += mpu->gx;
 8001cfc:	4607      	mov	r7, r0
		gy_sum += mpu->gy;
 8001cfe:	4630      	mov	r0, r6
 8001d00:	f7fe ff42 	bl	8000b88 <__addsf3>
		gz_sum += mpu->gz;
 8001d04:	9901      	ldr	r1, [sp, #4]
		gy_sum += mpu->gy;
 8001d06:	4606      	mov	r6, r0
		gz_sum += mpu->gz;
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7fe ff3d 	bl	8000b88 <__addsf3>
 8001d0e:	4605      	mov	r5, r0
		HAL_Delay(4);
 8001d10:	2004      	movs	r0, #4
 8001d12:	f001 fa39 	bl	8003188 <HAL_Delay>
 8001d16:	e7c3      	b.n	8001ca0 <mpu_gyro_calibration+0x84>
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	42c80000 	.word	0x42c80000

08001d20 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 8001d20:	b5d0      	push	{r4, r6, r7, lr}
 8001d22:	4604      	mov	r4, r0
	return atan2(mpu->ax, mpu->az) + M_PI/2;
 8001d24:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001d26:	f7fe fb89 	bl	800043c <__aeabi_f2d>
 8001d2a:	4606      	mov	r6, r0
 8001d2c:	460f      	mov	r7, r1
 8001d2e:	69e0      	ldr	r0, [r4, #28]
 8001d30:	f7fe fb84 	bl	800043c <__aeabi_f2d>
 8001d34:	4632      	mov	r2, r6
 8001d36:	463b      	mov	r3, r7
 8001d38:	f008 ffa4 	bl	800ac84 <atan2>
 8001d3c:	a304      	add	r3, pc, #16	; (adr r3, 8001d50 <mpu_get_acc_x_angle+0x30>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fa1d 	bl	8000180 <__adddf3>
 8001d46:	f7fe fec9 	bl	8000adc <__aeabi_d2f>
}
 8001d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8001d4c:	f3af 8000 	nop.w
 8001d50:	54442d18 	.word	0x54442d18
 8001d54:	3ff921fb 	.word	0x3ff921fb

08001d58 <mpu_calc_x_angle>:


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	4604      	mov	r4, r0
	float delta = (HAL_GetTick() - mpu->lst_update_x_angle) / 1000.0;
 8001d5c:	f001 fa0e 	bl	800317c <HAL_GetTick>
 8001d60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001d62:	1ac0      	subs	r0, r0, r3
 8001d64:	f7fe fb48 	bl	80003f8 <__aeabi_ui2d>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <mpu_calc_x_angle+0xd0>)
 8001d6c:	f7fe fce8 	bl	8000740 <__aeabi_ddiv>
 8001d70:	f7fe feb4 	bl	8000adc <__aeabi_d2f>
 8001d74:	4605      	mov	r5, r0
	mpu->lst_update_x_angle = HAL_GetTick();
 8001d76:	f001 fa01 	bl	800317c <HAL_GetTick>
 8001d7a:	63e0      	str	r0, [r4, #60]	; 0x3c
	if(delta > 0.01)
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	f7fe fb5d 	bl	800043c <__aeabi_f2d>
 8001d82:	a323      	add	r3, pc, #140	; (adr r3, 8001e10 <mpu_calc_x_angle+0xb8>)
 8001d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d88:	4606      	mov	r6, r0
 8001d8a:	460f      	mov	r7, r1
 8001d8c:	f7fe fe3e 	bl	8000a0c <__aeabi_dcmpgt>
 8001d90:	b138      	cbz	r0, 8001da2 <mpu_calc_x_angle+0x4a>
	{
		mpu->x_angle = mpu_get_acc_x_angle(mpu);
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7ff ffc4 	bl	8001d20 <mpu_get_acc_x_angle>
 8001d98:	6360      	str	r0, [r4, #52]	; 0x34
		mpu->lst_update_x_angle = HAL_GetTick();
 8001d9a:	f001 f9ef 	bl	800317c <HAL_GetTick>
 8001d9e:	63e0      	str	r0, [r4, #60]	; 0x3c
	{
		//complementary filter
		float alpha = 0.003;
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
	}
}
 8001da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mpu->x_angle = alpha * mpu_get_acc_x_angle(mpu) + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * delta));
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff ffbc 	bl	8001d20 <mpu_get_acc_x_angle>
 8001da8:	4605      	mov	r5, r0
 8001daa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001dac:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8001db0:	f7fe fb44 	bl	800043c <__aeabi_f2d>
 8001db4:	a318      	add	r3, pc, #96	; (adr r3, 8001e18 <mpu_calc_x_angle+0xc0>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	f7fe fb97 	bl	80004ec <__aeabi_dmul>
 8001dbe:	4632      	mov	r2, r6
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	f7fe fb93 	bl	80004ec <__aeabi_dmul>
 8001dc6:	4606      	mov	r6, r0
 8001dc8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001dca:	460f      	mov	r7, r1
 8001dcc:	f7fe fb36 	bl	800043c <__aeabi_f2d>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	4639      	mov	r1, r7
 8001dd8:	f7fe f9d2 	bl	8000180 <__adddf3>
 8001ddc:	a310      	add	r3, pc, #64	; (adr r3, 8001e20 <mpu_calc_x_angle+0xc8>)
 8001dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de2:	f7fe fb83 	bl	80004ec <__aeabi_dmul>
 8001de6:	4606      	mov	r6, r0
 8001de8:	460f      	mov	r7, r1
 8001dea:	4628      	mov	r0, r5
 8001dec:	490f      	ldr	r1, [pc, #60]	; (8001e2c <mpu_calc_x_angle+0xd4>)
 8001dee:	f7fe ffd3 	bl	8000d98 <__aeabi_fmul>
 8001df2:	f7fe fb23 	bl	800043c <__aeabi_f2d>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	4639      	mov	r1, r7
 8001dfe:	f7fe f9bf 	bl	8000180 <__adddf3>
 8001e02:	f7fe fe6b 	bl	8000adc <__aeabi_d2f>
 8001e06:	6360      	str	r0, [r4, #52]	; 0x34
}
 8001e08:	e7ca      	b.n	8001da0 <mpu_calc_x_angle+0x48>
 8001e0a:	bf00      	nop
 8001e0c:	f3af 8000 	nop.w
 8001e10:	47ae147b 	.word	0x47ae147b
 8001e14:	3f847ae1 	.word	0x3f847ae1
 8001e18:	22d4405f 	.word	0x22d4405f
 8001e1c:	3f91df47 	.word	0x3f91df47
 8001e20:	80000000 	.word	0x80000000
 8001e24:	3fefe76c 	.word	0x3fefe76c
 8001e28:	408f4000 	.word	0x408f4000
 8001e2c:	3b449ba6 	.word	0x3b449ba6

08001e30 <pid_init>:



pid_typedef pid_init(float kp, float ki, float kd){
	pid_typedef pid = {kp, ki, kd, 0, 0, 0, 0, 1};
	return pid;
 8001e30:	6083      	str	r3, [r0, #8]
 8001e32:	2300      	movs	r3, #0
 8001e34:	60c3      	str	r3, [r0, #12]
 8001e36:	6103      	str	r3, [r0, #16]
 8001e38:	6143      	str	r3, [r0, #20]
 8001e3a:	6183      	str	r3, [r0, #24]
 8001e3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
pid_typedef pid_init(float kp, float ki, float kd){
 8001e40:	b510      	push	{r4, lr}
	return pid;
 8001e42:	6001      	str	r1, [r0, #0]
 8001e44:	6042      	str	r2, [r0, #4]
 8001e46:	61c3      	str	r3, [r0, #28]
}
 8001e48:	bd10      	pop	{r4, pc}

08001e4a <pid_reset>:


void pid_reset(pid_typedef* pid){
	pid->i = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60c3      	str	r3, [r0, #12]
	pid->prev_error = 0;
 8001e4e:	6143      	str	r3, [r0, #20]
	pid->prev_measurement = 0;
 8001e50:	61c3      	str	r3, [r0, #28]
}
 8001e52:	4770      	bx	lr

08001e54 <pid_step>:


void pid_step(pid_typedef* pid){
	pid->prev_error = pid->error;
 8001e54:	6903      	ldr	r3, [r0, #16]
 8001e56:	6143      	str	r3, [r0, #20]
	pid->prev_measurement = pid->measurement;
 8001e58:	6983      	ldr	r3, [r0, #24]
 8001e5a:	61c3      	str	r3, [r0, #28]
}
 8001e5c:	4770      	bx	lr
	...

08001e60 <robot_start>:





void robot_start(){  // init function called before start of control loop
 8001e60:	b538      	push	{r3, r4, r5, lr}

	stepper_enable(robot.stepper1, 1);
	stepper_enable(robot.stepper2, 1);
	stepper_set_speed(robot.stepper1, 0);
 8001e62:	2500      	movs	r5, #0
	stepper_enable(robot.stepper1, 1);
 8001e64:	4c18      	ldr	r4, [pc, #96]	; (8001ec8 <robot_start+0x68>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	6860      	ldr	r0, [r4, #4]
 8001e6a:	f000 faea 	bl	8002442 <stepper_enable>
	stepper_enable(robot.stepper2, 1);
 8001e6e:	2101      	movs	r1, #1
 8001e70:	68a0      	ldr	r0, [r4, #8]
 8001e72:	f000 fae6 	bl	8002442 <stepper_enable>
	stepper_set_speed(robot.stepper1, 0);
 8001e76:	4629      	mov	r1, r5
 8001e78:	6860      	ldr	r0, [r4, #4]
 8001e7a:	f000 fa1d 	bl	80022b8 <stepper_set_speed>
	stepper_set_speed(robot.stepper2, 0);
 8001e7e:	4629      	mov	r1, r5
 8001e80:	68a0      	ldr	r0, [r4, #8]
 8001e82:	f000 fa19 	bl	80022b8 <stepper_set_speed>

	robot.stepper1->step_counter = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	6862      	ldr	r2, [r4, #4]
	robot.prev_pos = 0;



	// regulators reset
	pid_reset(robot.pos_pid);
 8001e8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	robot.stepper1->step_counter = 0;
 8001e8c:	6193      	str	r3, [r2, #24]
	robot.stepper2->step_counter = 0;
 8001e8e:	68a2      	ldr	r2, [r4, #8]
	robot.pos = 0;
 8001e90:	60e3      	str	r3, [r4, #12]
	robot.stepper2->step_counter = 0;
 8001e92:	6193      	str	r3, [r2, #24]
	robot.angle = 0;
 8001e94:	6125      	str	r5, [r4, #16]
	robot.set_position = 0;
 8001e96:	6223      	str	r3, [r4, #32]
	robot.prev_pos = 0;
 8001e98:	61e3      	str	r3, [r4, #28]
	robot.set_angle = 0;
 8001e9a:	6265      	str	r5, [r4, #36]	; 0x24
	pid_reset(robot.pos_pid);
 8001e9c:	f7ff ffd5 	bl	8001e4a <pid_reset>
	pid_reset(robot.angle_pid);
 8001ea0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ea2:	f7ff ffd2 	bl	8001e4a <pid_reset>
	pid_reset(robot.target_speed_pid);
 8001ea6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001ea8:	f7ff ffcf 	bl	8001e4a <pid_reset>

	reset_filter(&pos_filter);
 8001eac:	4807      	ldr	r0, [pc, #28]	; (8001ecc <robot_start+0x6c>)
 8001eae:	f7ff fb7d 	bl	80015ac <reset_filter>
	reset_filter(&speed_filter);
 8001eb2:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <robot_start+0x70>)
 8001eb4:	f7ff fb7a 	bl	80015ac <reset_filter>
	reset_filter(&target_angle_filter);
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <robot_start+0x74>)
 8001eba:	f7ff fb77 	bl	80015ac <reset_filter>


	robot.control_on = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001ec4:	bd38      	pop	{r3, r4, r5, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000814 	.word	0x20000814
 8001ecc:	20000808 	.word	0x20000808
 8001ed0:	2000084c 	.word	0x2000084c
 8001ed4:	20000858 	.word	0x20000858

08001ed8 <robot_stop>:


void robot_stop(){  // fuction called afterr control loop if for example robot fall ( stop the motors,  reset regulators)
 8001ed8:	b538      	push	{r3, r4, r5, lr}

	stepper_enable(robot.stepper1, 0);
	stepper_enable(robot.stepper2, 0);
	stepper_set_speed(robot.stepper1, 0);
 8001eda:	2500      	movs	r5, #0
	stepper_enable(robot.stepper1, 0);
 8001edc:	4c0a      	ldr	r4, [pc, #40]	; (8001f08 <robot_stop+0x30>)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	6860      	ldr	r0, [r4, #4]
 8001ee2:	f000 faae 	bl	8002442 <stepper_enable>
	stepper_enable(robot.stepper2, 0);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	68a0      	ldr	r0, [r4, #8]
 8001eea:	f000 faaa 	bl	8002442 <stepper_enable>
	stepper_set_speed(robot.stepper1, 0);
 8001eee:	4629      	mov	r1, r5
 8001ef0:	6860      	ldr	r0, [r4, #4]
 8001ef2:	f000 f9e1 	bl	80022b8 <stepper_set_speed>
	stepper_set_speed(robot.stepper2, 0);
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	68a0      	ldr	r0, [r4, #8]
 8001efa:	f000 f9dd 	bl	80022b8 <stepper_set_speed>

	robot.control_on = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8001f04:	bd38      	pop	{r3, r4, r5, pc}
 8001f06:	bf00      	nop
 8001f08:	20000814 	.word	0x20000814
 8001f0c:	00000000 	.word	0x00000000

08001f10 <control_loop>:
//static float angle_log[SIZE];
//static float pid_log[SIZE];
//static uint16_t counter;
//

void control_loop(){
 8001f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

				// target speed PID
	robot.pos = (robot.stepper2->step_counter + robot.stepper1->step_counter)/2;
 8001f14:	4caa      	ldr	r4, [pc, #680]	; (80021c0 <control_loop+0x2b0>)
void control_loop(){
 8001f16:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
	robot.pos = (robot.stepper2->step_counter + robot.stepper1->step_counter)/2;
 8001f1a:	68a3      	ldr	r3, [r4, #8]
	robot.target_speed_pid->measurement = robot.pos;
 8001f1c:	6b26      	ldr	r6, [r4, #48]	; 0x30
	robot.pos = (robot.stepper2->step_counter + robot.stepper1->step_counter)/2;
 8001f1e:	699d      	ldr	r5, [r3, #24]
 8001f20:	6863      	ldr	r3, [r4, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	441d      	add	r5, r3
 8001f26:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001f2a:	106d      	asrs	r5, r5, #1
	robot.target_speed_pid->measurement = robot.pos;
 8001f2c:	4628      	mov	r0, r5
	robot.pos = (robot.stepper2->step_counter + robot.stepper1->step_counter)/2;
 8001f2e:	60e5      	str	r5, [r4, #12]
	robot.target_speed_pid->measurement = robot.pos;
 8001f30:	f7fe fede 	bl	8000cf0 <__aeabi_i2f>
 8001f34:	61b0      	str	r0, [r6, #24]
	float error = robot.set_position - robot.pos;
 8001f36:	6a20      	ldr	r0, [r4, #32]
	saturation(-2500, 2500, &error);
	robot.target_speed_pid->error = filter(&pos_filter, error);
	float speed = filter(&speed_filter, (robot.target_speed_pid->measurement - robot.target_speed_pid->prev_measurement) / time_delta_ms);
 8001f38:	4ea2      	ldr	r6, [pc, #648]	; (80021c4 <control_loop+0x2b4>)
	float error = robot.set_position - robot.pos;
 8001f3a:	1b40      	subs	r0, r0, r5
 8001f3c:	f7fe fed8 	bl	8000cf0 <__aeabi_i2f>
	saturation(-2500, 2500, &error);
 8001f40:	aa07      	add	r2, sp, #28
 8001f42:	49a1      	ldr	r1, [pc, #644]	; (80021c8 <control_loop+0x2b8>)
	float error = robot.set_position - robot.pos;
 8001f44:	9007      	str	r0, [sp, #28]
	saturation(-2500, 2500, &error);
 8001f46:	48a1      	ldr	r0, [pc, #644]	; (80021cc <control_loop+0x2bc>)
 8001f48:	f7ff fa4a 	bl	80013e0 <saturation>
	robot.target_speed_pid->error = filter(&pos_filter, error);
 8001f4c:	9907      	ldr	r1, [sp, #28]
 8001f4e:	48a0      	ldr	r0, [pc, #640]	; (80021d0 <control_loop+0x2c0>)
 8001f50:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001f52:	f7ff fb0d 	bl	8001570 <filter>
	float speed = filter(&speed_filter, (robot.target_speed_pid->measurement - robot.target_speed_pid->prev_measurement) / time_delta_ms);
 8001f56:	6b23      	ldr	r3, [r4, #48]	; 0x30
	robot.target_speed_pid->error = filter(&pos_filter, error);
 8001f58:	6128      	str	r0, [r5, #16]
	float speed = filter(&speed_filter, (robot.target_speed_pid->measurement - robot.target_speed_pid->prev_measurement) / time_delta_ms);
 8001f5a:	69d9      	ldr	r1, [r3, #28]
 8001f5c:	6998      	ldr	r0, [r3, #24]
 8001f5e:	f7fe fe11 	bl	8000b84 <__aeabi_fsub>
 8001f62:	6831      	ldr	r1, [r6, #0]
 8001f64:	f7fe ffcc 	bl	8000f00 <__aeabi_fdiv>
 8001f68:	4601      	mov	r1, r0
 8001f6a:	489a      	ldr	r0, [pc, #616]	; (80021d4 <control_loop+0x2c4>)
 8001f6c:	f7ff fb00 	bl	8001570 <filter>


	// P
	float p = robot.target_speed_pid->error * robot.target_speed_pid->kp;
 8001f70:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
	float speed = filter(&speed_filter, (robot.target_speed_pid->measurement - robot.target_speed_pid->prev_measurement) / time_delta_ms);
 8001f74:	4607      	mov	r7, r0
	float p = robot.target_speed_pid->error * robot.target_speed_pid->kp;
 8001f76:	f8d8 1000 	ldr.w	r1, [r8]
 8001f7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8001f7e:	f7fe ff0b 	bl	8000d98 <__aeabi_fmul>

	// D
	float d = robot.target_speed_pid->kd * (-speed);
 8001f82:	f8d8 1008 	ldr.w	r1, [r8, #8]
	float p = robot.target_speed_pid->error * robot.target_speed_pid->kp;
 8001f86:	4605      	mov	r5, r0
	float d = robot.target_speed_pid->kd * (-speed);
 8001f88:	f107 4000 	add.w	r0, r7, #2147483648	; 0x80000000
 8001f8c:	f7fe ff04 	bl	8000d98 <__aeabi_fmul>
 8001f90:	4601      	mov	r1, r0

	float target_speed = p + d;
 8001f92:	4628      	mov	r0, r5
 8001f94:	f7fe fdf8 	bl	8000b88 <__addsf3>
	saturation(-40, 40, &target_speed);
 8001f98:	aa08      	add	r2, sp, #32
 8001f9a:	498f      	ldr	r1, [pc, #572]	; (80021d8 <control_loop+0x2c8>)
	float target_speed = p + d;
 8001f9c:	9008      	str	r0, [sp, #32]
	saturation(-40, 40, &target_speed);
 8001f9e:	488f      	ldr	r0, [pc, #572]	; (80021dc <control_loop+0x2cc>)
 8001fa0:	f7ff fa1e 	bl	80013e0 <saturation>


				// pos PID

	robot.pos_pid->error = target_speed - speed;
 8001fa4:	4639      	mov	r1, r7
 8001fa6:	9808      	ldr	r0, [sp, #32]
 8001fa8:	f7fe fdec 	bl	8000b84 <__aeabi_fsub>
 8001fac:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8001fae:	4680      	mov	r8, r0
	robot.pos_pid->measurement = speed;

	// pos P
	float p_pos = robot.pos_pid->error * robot.pos_pid->kp;
 8001fb0:	6829      	ldr	r1, [r5, #0]
	robot.pos_pid->measurement = speed;
 8001fb2:	61af      	str	r7, [r5, #24]
	robot.pos_pid->error = target_speed - speed;
 8001fb4:	6128      	str	r0, [r5, #16]
	float p_pos = robot.pos_pid->error * robot.pos_pid->kp;
 8001fb6:	f7fe feef 	bl	8000d98 <__aeabi_fmul>
	//
	// pos I
	robot.pos_pid->i += 0.5 * (robot.pos_pid->error + robot.pos_pid->prev_error) * robot.pos_pid->ki * time_delta_ms;
 8001fba:	6969      	ldr	r1, [r5, #20]
	float p_pos = robot.pos_pid->error * robot.pos_pid->kp;
 8001fbc:	4607      	mov	r7, r0
	robot.pos_pid->i += 0.5 * (robot.pos_pid->error + robot.pos_pid->prev_error) * robot.pos_pid->ki * time_delta_ms;
 8001fbe:	4640      	mov	r0, r8
 8001fc0:	f7fe fde2 	bl	8000b88 <__addsf3>
 8001fc4:	f7fe fa3a 	bl	800043c <__aeabi_f2d>
 8001fc8:	2200      	movs	r2, #0
 8001fca:	4b85      	ldr	r3, [pc, #532]	; (80021e0 <control_loop+0x2d0>)
 8001fcc:	f7fe fa8e 	bl	80004ec <__aeabi_dmul>
 8001fd0:	4680      	mov	r8, r0
 8001fd2:	6868      	ldr	r0, [r5, #4]
 8001fd4:	4689      	mov	r9, r1
 8001fd6:	f7fe fa31 	bl	800043c <__aeabi_f2d>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4640      	mov	r0, r8
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	f7fe fa83 	bl	80004ec <__aeabi_dmul>
 8001fe6:	4680      	mov	r8, r0
 8001fe8:	6830      	ldr	r0, [r6, #0]
 8001fea:	4689      	mov	r9, r1
 8001fec:	f7fe fa26 	bl	800043c <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4640      	mov	r0, r8
 8001ff6:	4649      	mov	r1, r9
 8001ff8:	f7fe fa78 	bl	80004ec <__aeabi_dmul>
 8001ffc:	4680      	mov	r8, r0
 8001ffe:	68e8      	ldr	r0, [r5, #12]
 8002000:	4689      	mov	r9, r1
 8002002:	f7fe fa1b 	bl	800043c <__aeabi_f2d>
 8002006:	460b      	mov	r3, r1
 8002008:	4602      	mov	r2, r0
 800200a:	4649      	mov	r1, r9
 800200c:	4640      	mov	r0, r8
 800200e:	f7fe f8b7 	bl	8000180 <__adddf3>
 8002012:	f7fe fd63 	bl	8000adc <__aeabi_d2f>
 8002016:	462a      	mov	r2, r5
	saturation(-0.55, 0.55, &robot.pos_pid->i);
 8002018:	4972      	ldr	r1, [pc, #456]	; (80021e4 <control_loop+0x2d4>)
	robot.pos_pid->i += 0.5 * (robot.pos_pid->error + robot.pos_pid->prev_error) * robot.pos_pid->ki * time_delta_ms;
 800201a:	f842 0f0c 	str.w	r0, [r2, #12]!
	saturation(-0.55, 0.55, &robot.pos_pid->i);
 800201e:	4872      	ldr	r0, [pc, #456]	; (80021e8 <control_loop+0x2d8>)
 8002020:	f7ff f9de 	bl	80013e0 <saturation>

	// pos D
	float d_pos = robot.pos_pid->kd * (robot.pos_pid->measurement - robot.pos_pid->prev_measurement) / time_delta_ms;
 8002024:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8002026:	69e9      	ldr	r1, [r5, #28]
 8002028:	69a8      	ldr	r0, [r5, #24]
 800202a:	f7fe fdab 	bl	8000b84 <__aeabi_fsub>
 800202e:	68a9      	ldr	r1, [r5, #8]
 8002030:	f7fe feb2 	bl	8000d98 <__aeabi_fmul>
 8002034:	6831      	ldr	r1, [r6, #0]
 8002036:	f7fe ff63 	bl	8000f00 <__aeabi_fdiv>
	saturation(-0.15, 0.15, &d_pos);
 800203a:	aa09      	add	r2, sp, #36	; 0x24
 800203c:	496b      	ldr	r1, [pc, #428]	; (80021ec <control_loop+0x2dc>)
	float d_pos = robot.pos_pid->kd * (robot.pos_pid->measurement - robot.pos_pid->prev_measurement) / time_delta_ms;
 800203e:	9009      	str	r0, [sp, #36]	; 0x24
	saturation(-0.15, 0.15, &d_pos);
 8002040:	486b      	ldr	r0, [pc, #428]	; (80021f0 <control_loop+0x2e0>)
 8002042:	f7ff f9cd 	bl	80013e0 <saturation>


	float target_angle = p_pos + robot.pos_pid->i + d_pos;
 8002046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002048:	4638      	mov	r0, r7
 800204a:	68d9      	ldr	r1, [r3, #12]
 800204c:	f7fe fd9c 	bl	8000b88 <__addsf3>
 8002050:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002052:	f7fe fd99 	bl	8000b88 <__addsf3>
	saturation(-0.2, 0.2, &target_angle);
 8002056:	aa0a      	add	r2, sp, #40	; 0x28
 8002058:	4966      	ldr	r1, [pc, #408]	; (80021f4 <control_loop+0x2e4>)
	float target_angle = p_pos + robot.pos_pid->i + d_pos;
 800205a:	900a      	str	r0, [sp, #40]	; 0x28
	saturation(-0.2, 0.2, &target_angle);
 800205c:	4866      	ldr	r0, [pc, #408]	; (80021f8 <control_loop+0x2e8>)
 800205e:	f7ff f9bf 	bl	80013e0 <saturation>


				// angle PID
	float target_angle_filtered = -filter(&target_angle_filter, target_angle);
 8002062:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002064:	4865      	ldr	r0, [pc, #404]	; (80021fc <control_loop+0x2ec>)
 8002066:	f7ff fa83 	bl	8001570 <filter>
	robot.angle_pid->error = target_angle_filtered -robot.mpu->x_angle - 0.065;
 800206a:	6823      	ldr	r3, [r4, #0]
	float target_angle_filtered = -filter(&target_angle_filter, target_angle);
 800206c:	f100 4700 	add.w	r7, r0, #2147483648	; 0x80000000
	robot.angle_pid->error = target_angle_filtered -robot.mpu->x_angle - 0.065;
 8002070:	f8d3 9034 	ldr.w	r9, [r3, #52]	; 0x34
 8002074:	4638      	mov	r0, r7
 8002076:	4649      	mov	r1, r9
 8002078:	f7fe fd84 	bl	8000b84 <__aeabi_fsub>
 800207c:	f7fe f9de 	bl	800043c <__aeabi_f2d>
 8002080:	a34b      	add	r3, pc, #300	; (adr r3, 80021b0 <control_loop+0x2a0>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe f879 	bl	800017c <__aeabi_dsub>
 800208a:	f7fe fd27 	bl	8000adc <__aeabi_d2f>
 800208e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	robot.angle_pid->measurement = -robot.mpu->x_angle;
 8002090:	f109 4900 	add.w	r9, r9, #2147483648	; 0x80000000


	// P angle
	float angle_p = robot.angle_pid->error * robot.angle_pid->kp;
 8002094:	6829      	ldr	r1, [r5, #0]
	robot.angle_pid->measurement = -robot.mpu->x_angle;
 8002096:	f8c5 9018 	str.w	r9, [r5, #24]
	robot.angle_pid->error = target_angle_filtered -robot.mpu->x_angle - 0.065;
 800209a:	6128      	str	r0, [r5, #16]
 800209c:	4680      	mov	r8, r0
	float angle_p = robot.angle_pid->error * robot.angle_pid->kp;
 800209e:	f7fe fe7b 	bl	8000d98 <__aeabi_fmul>

	// I angle
	robot.angle_pid->i += ((robot.angle_pid->error + robot.angle_pid->prev_error) * time_delta_ms * robot.angle_pid->ki) / 2;
 80020a2:	6969      	ldr	r1, [r5, #20]
	float angle_p = robot.angle_pid->error * robot.angle_pid->kp;
 80020a4:	4681      	mov	r9, r0
	robot.angle_pid->i += ((robot.angle_pid->error + robot.angle_pid->prev_error) * time_delta_ms * robot.angle_pid->ki) / 2;
 80020a6:	4640      	mov	r0, r8
 80020a8:	f7fe fd6e 	bl	8000b88 <__addsf3>
 80020ac:	6831      	ldr	r1, [r6, #0]
 80020ae:	f7fe fe73 	bl	8000d98 <__aeabi_fmul>
 80020b2:	6869      	ldr	r1, [r5, #4]
 80020b4:	f7fe fe70 	bl	8000d98 <__aeabi_fmul>
 80020b8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80020bc:	f7fe fe6c 	bl	8000d98 <__aeabi_fmul>
 80020c0:	4601      	mov	r1, r0
 80020c2:	68e8      	ldr	r0, [r5, #12]
 80020c4:	f7fe fd60 	bl	8000b88 <__addsf3>
 80020c8:	462a      	mov	r2, r5
	saturation(-60, 60, &(robot.angle_pid->i));
 80020ca:	494d      	ldr	r1, [pc, #308]	; (8002200 <control_loop+0x2f0>)
	robot.angle_pid->i += ((robot.angle_pid->error + robot.angle_pid->prev_error) * time_delta_ms * robot.angle_pid->ki) / 2;
 80020cc:	f842 0f0c 	str.w	r0, [r2, #12]!
	saturation(-60, 60, &(robot.angle_pid->i));
 80020d0:	484c      	ldr	r0, [pc, #304]	; (8002204 <control_loop+0x2f4>)
 80020d2:	f7ff f985 	bl	80013e0 <saturation>

	// D angle
	float angle_d = robot.angle_pid->kd * (robot.angle_pid->measurement - robot.angle_pid->prev_measurement)/time_delta_ms;
 80020d6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80020d8:	69e9      	ldr	r1, [r5, #28]
 80020da:	69a8      	ldr	r0, [r5, #24]
 80020dc:	f7fe fd52 	bl	8000b84 <__aeabi_fsub>
 80020e0:	68a9      	ldr	r1, [r5, #8]
 80020e2:	f7fe fe59 	bl	8000d98 <__aeabi_fmul>
 80020e6:	6831      	ldr	r1, [r6, #0]
 80020e8:	f7fe ff0a 	bl	8000f00 <__aeabi_fdiv>

	float pid = angle_p + robot.angle_pid->i + angle_d;
 80020ec:	68e9      	ldr	r1, [r5, #12]
	float angle_d = robot.angle_pid->kd * (robot.angle_pid->measurement - robot.angle_pid->prev_measurement)/time_delta_ms;
 80020ee:	4606      	mov	r6, r0
	float pid = angle_p + robot.angle_pid->i + angle_d;
 80020f0:	4648      	mov	r0, r9
 80020f2:	f7fe fd49 	bl	8000b88 <__addsf3>
 80020f6:	4601      	mov	r1, r0
 80020f8:	4630      	mov	r0, r6
 80020fa:	f7fe fd45 	bl	8000b88 <__addsf3>


	// rotation error
	float robot_angle = (360.0 * 20)/(2*3.14*15.5 * 1600.0) * (robot.stepper2->step_counter - robot.stepper1->step_counter);
 80020fe:	68a3      	ldr	r3, [r4, #8]
	float pid = angle_p + robot.angle_pid->i + angle_d;
 8002100:	4605      	mov	r5, r0
	float robot_angle = (360.0 * 20)/(2*3.14*15.5 * 1600.0) * (robot.stepper2->step_counter - robot.stepper1->step_counter);
 8002102:	6998      	ldr	r0, [r3, #24]
 8002104:	6863      	ldr	r3, [r4, #4]
 8002106:	699b      	ldr	r3, [r3, #24]

	float rotation_speed = (robot.set_angle - robot_angle) * 5;
 8002108:	6a66      	ldr	r6, [r4, #36]	; 0x24
	float robot_angle = (360.0 * 20)/(2*3.14*15.5 * 1600.0) * (robot.stepper2->step_counter - robot.stepper1->step_counter);
 800210a:	1ac0      	subs	r0, r0, r3
 800210c:	f7fe f984 	bl	8000418 <__aeabi_i2d>
 8002110:	a329      	add	r3, pc, #164	; (adr r3, 80021b8 <control_loop+0x2a8>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe f9e9 	bl	80004ec <__aeabi_dmul>
 800211a:	f7fe fcdf 	bl	8000adc <__aeabi_d2f>
 800211e:	4601      	mov	r1, r0
	float rotation_speed = (robot.set_angle - robot_angle) * 5;
 8002120:	4630      	mov	r0, r6
 8002122:	f7fe fd2f 	bl	8000b84 <__aeabi_fsub>
 8002126:	4938      	ldr	r1, [pc, #224]	; (8002208 <control_loop+0x2f8>)
 8002128:	f7fe fe36 	bl	8000d98 <__aeabi_fmul>
	saturation(-50, 50, &rotation_speed);
 800212c:	aa0b      	add	r2, sp, #44	; 0x2c
 800212e:	4937      	ldr	r1, [pc, #220]	; (800220c <control_loop+0x2fc>)
	float rotation_speed = (robot.set_angle - robot_angle) * 5;
 8002130:	900b      	str	r0, [sp, #44]	; 0x2c
	saturation(-50, 50, &rotation_speed);
 8002132:	4837      	ldr	r0, [pc, #220]	; (8002210 <control_loop+0x300>)
 8002134:	f7ff f954 	bl	80013e0 <saturation>


	stepper_set_speed(robot.stepper1, pid - rotation_speed);
 8002138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800213a:	4628      	mov	r0, r5
 800213c:	f7fe fd22 	bl	8000b84 <__aeabi_fsub>
 8002140:	4601      	mov	r1, r0
 8002142:	6860      	ldr	r0, [r4, #4]
 8002144:	f000 f8b8 	bl	80022b8 <stepper_set_speed>
	stepper_set_speed(robot.stepper2, pid + rotation_speed);
 8002148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800214a:	4628      	mov	r0, r5
 800214c:	f7fe fd1c 	bl	8000b88 <__addsf3>
 8002150:	4601      	mov	r1, r0
 8002152:	68a0      	ldr	r0, [r4, #8]
 8002154:	f000 f8b0 	bl	80022b8 <stepper_set_speed>
//		}
//
//	}


	pid_step(robot.pos_pid);
 8002158:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800215a:	f7ff fe7b 	bl	8001e54 <pid_step>
	pid_step(robot.angle_pid);
 800215e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002160:	f7ff fe78 	bl	8001e54 <pid_step>
	pid_step(robot.target_speed_pid);
 8002164:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002166:	f7ff fe75 	bl	8001e54 <pid_step>


	if(robot.send_data){
 800216a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800216e:	b1db      	cbz	r3, 80021a8 <control_loop+0x298>
		uint8_t buffer[BUFFER_SIZE_TX];
		//uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f, %.3f, %ld\r\n", robot.mpu->x_angle, mpu_get_acc_x_angle(robot.mpu), robot.mpu->gy, robot.encoder_angle);
		//uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f, %.3f\r\n", robot.mpu->x_angle, robot.target_speed_pid->error, target_angle_filtered, p_pos, robot.pos_pid->i, d_pos, speed, target_speed, p, d);
		uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "%.3f, %.3f, %.3f\r\n", robot.target_speed_pid->error, target_speed, target_angle_filtered);
 8002170:	4638      	mov	r0, r7
 8002172:	f7fe f963 	bl	800043c <__aeabi_f2d>
 8002176:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800217a:	9808      	ldr	r0, [sp, #32]
 800217c:	f7fe f95e 	bl	800043c <__aeabi_f2d>
 8002180:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002186:	6918      	ldr	r0, [r3, #16]
 8002188:	f7fe f958 	bl	800043c <__aeabi_f2d>
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <control_loop+0x304>)
 800218e:	e9cd 0100 	strd	r0, r1, [sp]
 8002192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002196:	a80c      	add	r0, sp, #48	; 0x30
 8002198:	f005 ff74 	bl	8008084 <sniprintf>
		uart_send(&uart_interface, buffer, size, 0);
 800219c:	2300      	movs	r3, #0
 800219e:	b282      	uxth	r2, r0
 80021a0:	a90c      	add	r1, sp, #48	; 0x30
 80021a2:	481d      	ldr	r0, [pc, #116]	; (8002218 <control_loop+0x308>)
 80021a4:	f000 fc3b 	bl	8002a1e <uart_send>
	}
}
 80021a8:	f50d 7d0d 	add.w	sp, sp, #564	; 0x234
 80021ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80021b0:	0a3d70a4 	.word	0x0a3d70a4
 80021b4:	3fb0a3d7 	.word	0x3fb0a3d7
 80021b8:	aba1882e 	.word	0xaba1882e
 80021bc:	3fa7ab6b 	.word	0x3fa7ab6b
 80021c0:	20000814 	.word	0x20000814
 80021c4:	20000000 	.word	0x20000000
 80021c8:	451c4000 	.word	0x451c4000
 80021cc:	c51c4000 	.word	0xc51c4000
 80021d0:	20000808 	.word	0x20000808
 80021d4:	2000084c 	.word	0x2000084c
 80021d8:	42200000 	.word	0x42200000
 80021dc:	c2200000 	.word	0xc2200000
 80021e0:	3fe00000 	.word	0x3fe00000
 80021e4:	3f0ccccd 	.word	0x3f0ccccd
 80021e8:	bf0ccccd 	.word	0xbf0ccccd
 80021ec:	3e19999a 	.word	0x3e19999a
 80021f0:	be19999a 	.word	0xbe19999a
 80021f4:	3e4ccccd 	.word	0x3e4ccccd
 80021f8:	be4ccccd 	.word	0xbe4ccccd
 80021fc:	20000858 	.word	0x20000858
 8002200:	42700000 	.word	0x42700000
 8002204:	c2700000 	.word	0xc2700000
 8002208:	40a00000 	.word	0x40a00000
 800220c:	42480000 	.word	0x42480000
 8002210:	c2480000 	.word	0xc2480000
 8002214:	0800b2a3 	.word	0x0800b2a3
 8002218:	2000036c 	.word	0x2000036c

0800221c <HAL_I2C_MemRxCpltCallback>:




void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){   // DMA transfer complete mpu + encoder
 800221c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(hi2c == robot.mpu->hi2c){
 800221e:	4e16      	ldr	r6, [pc, #88]	; (8002278 <HAL_I2C_MemRxCpltCallback+0x5c>)
 8002220:	6834      	ldr	r4, [r6, #0]
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	4283      	cmp	r3, r0
 8002226:	d126      	bne.n	8002276 <HAL_I2C_MemRxCpltCallback+0x5a>
		robot.mpu->ax = (int16_t)((int16_t)I2C_DMA_buffer[0] << 8 | I2C_DMA_buffer[1]) * robot.mpu->acc_scale;
 8002228:	4d14      	ldr	r5, [pc, #80]	; (800227c <HAL_I2C_MemRxCpltCallback+0x60>)
 800222a:	68e7      	ldr	r7, [r4, #12]
 800222c:	8828      	ldrh	r0, [r5, #0]
 800222e:	bac0      	revsh	r0, r0
 8002230:	f7fe fd5e 	bl	8000cf0 <__aeabi_i2f>
 8002234:	4639      	mov	r1, r7
 8002236:	f7fe fdaf 	bl	8000d98 <__aeabi_fmul>
 800223a:	61e0      	str	r0, [r4, #28]
		robot.mpu->az = (int16_t)((int16_t)I2C_DMA_buffer[4] << 8 | I2C_DMA_buffer[5]) * robot.mpu->acc_scale;
 800223c:	88a8      	ldrh	r0, [r5, #4]
 800223e:	bac0      	revsh	r0, r0
 8002240:	f7fe fd56 	bl	8000cf0 <__aeabi_i2f>
 8002244:	4639      	mov	r1, r7
 8002246:	f7fe fda7 	bl	8000d98 <__aeabi_fmul>
 800224a:	6260      	str	r0, [r4, #36]	; 0x24
		robot.mpu->gy = ((int16_t)((int16_t)I2C_DMA_buffer[10] << 8 | I2C_DMA_buffer[11]) * robot.mpu->gyro_scale) - robot.mpu->gy_bias;
 800224c:	8968      	ldrh	r0, [r5, #10]
 800224e:	bac0      	revsh	r0, r0
 8002250:	f7fe fd4e 	bl	8000cf0 <__aeabi_i2f>
 8002254:	68a1      	ldr	r1, [r4, #8]
 8002256:	f7fe fd9f 	bl	8000d98 <__aeabi_fmul>
 800225a:	6961      	ldr	r1, [r4, #20]
 800225c:	f7fe fc92 	bl	8000b84 <__aeabi_fsub>
 8002260:	62e0      	str	r0, [r4, #44]	; 0x2c
		mpu_calc_x_angle(robot.mpu);
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff fd78 	bl	8001d58 <mpu_calc_x_angle>
		if(robot.control_on){
 8002268:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 800226c:	b11b      	cbz	r3, 8002276 <HAL_I2C_MemRxCpltCallback+0x5a>
	}
	else if (hi2c == &hi2c2){  // encoder
		//calculate_encoder_angle();
	}

}
 800226e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			control_loop();
 8002272:	f7ff be4d 	b.w	8001f10 <control_loop>
}
 8002276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002278:	20000814 	.word	0x20000814
 800227c:	200007fc 	.word	0x200007fc

08002280 <set_dir>:


extern volatile uint8_t spin_duration_ms;


static void set_dir(stepper_typedef *stepper, int8_t dir){
 8002280:	b510      	push	{r4, lr}
 8002282:	4604      	mov	r4, r0
	if(stepper->dir_polarity * dir == 1){
 8002284:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 8002288:	6900      	ldr	r0, [r0, #16]
	if(stepper->dir_polarity * dir == 1){
 800228a:	b252      	sxtb	r2, r2
 800228c:	434a      	muls	r2, r1
 800228e:	2a01      	cmp	r2, #1
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 8002290:	8aa1      	ldrh	r1, [r4, #20]
	if(stepper->dir_polarity * dir == 1){
 8002292:	d108      	bne.n	80022a6 <set_dir+0x26>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 8002294:	b289      	uxth	r1, r1
 8002296:	f001 fc73 	bl	8003b80 <HAL_GPIO_WritePin>
		stepper->dir = stepper->dir_polarity;
 800229a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -stepper->dir_polarity;
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	}
}
 80022a4:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	b289      	uxth	r1, r1
 80022aa:	f001 fc69 	bl	8003b80 <HAL_GPIO_WritePin>
		stepper->dir = -stepper->dir_polarity;
 80022ae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80022b2:	425b      	negs	r3, r3
 80022b4:	e7f3      	b.n	800229e <set_dir+0x1e>
	...

080022b8 <stepper_set_speed>:
}



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 80022b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022ba:	4604      	mov	r4, r0
 80022bc:	9101      	str	r1, [sp, #4]
	saturation(-100, 100, &speed);
 80022be:	4852      	ldr	r0, [pc, #328]	; (8002408 <stepper_set_speed+0x150>)
 80022c0:	4952      	ldr	r1, [pc, #328]	; (800240c <stepper_set_speed+0x154>)
 80022c2:	aa01      	add	r2, sp, #4
 80022c4:	f7ff f88c 	bl	80013e0 <saturation>

	stepper->speed = speed;
 80022c8:	9d01      	ldr	r5, [sp, #4]

	if(speed == 0){
 80022ca:	2100      	movs	r1, #0
 80022cc:	4628      	mov	r0, r5
	stepper->speed = speed;
 80022ce:	6265      	str	r5, [r4, #36]	; 0x24
	if(speed == 0){
 80022d0:	f7fe fef6 	bl	80010c0 <__aeabi_fcmpeq>
 80022d4:	b1f0      	cbz	r0, 8002314 <stepper_set_speed+0x5c>
		stepper->on_off = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	7723      	strb	r3, [r4, #28]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 80022da:	6862      	ldr	r2, [r4, #4]
 80022dc:	b95a      	cbnz	r2, 80022f6 <stepper_set_speed+0x3e>
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ec:	62d3      	str	r3, [r2, #44]	; 0x2c
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	60d3      	str	r3, [r2, #12]
		if(speed > 0) set_dir(stepper, 1);
		else set_dir(stepper, -1);

	}

}
 80022f2:	b003      	add	sp, #12
 80022f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 80022f6:	6862      	ldr	r2, [r4, #4]
 80022f8:	2a04      	cmp	r2, #4
 80022fa:	d103      	bne.n	8002304 <stepper_set_speed+0x4c>
 80022fc:	6822      	ldr	r2, [r4, #0]
 80022fe:	6812      	ldr	r2, [r2, #0]
 8002300:	6393      	str	r3, [r2, #56]	; 0x38
 8002302:	e7ef      	b.n	80022e4 <stepper_set_speed+0x2c>
 8002304:	6862      	ldr	r2, [r4, #4]
 8002306:	2a08      	cmp	r2, #8
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	bf0c      	ite	eq
 800230e:	63d3      	streq	r3, [r2, #60]	; 0x3c
 8002310:	6413      	strne	r3, [r2, #64]	; 0x40
 8002312:	e7e7      	b.n	80022e4 <stepper_set_speed+0x2c>
		stepper->on_off = 1;
 8002314:	2301      	movs	r3, #1
 8002316:	7723      	strb	r3, [r4, #28]
		speed = stepper->max_speed * (speed / 100.0);
 8002318:	8ae0      	ldrh	r0, [r4, #22]
 800231a:	b280      	uxth	r0, r0
 800231c:	f7fe f87c 	bl	8000418 <__aeabi_i2d>
 8002320:	4606      	mov	r6, r0
 8002322:	4628      	mov	r0, r5
 8002324:	460f      	mov	r7, r1
 8002326:	f7fe f889 	bl	800043c <__aeabi_f2d>
 800232a:	2200      	movs	r2, #0
 800232c:	4b38      	ldr	r3, [pc, #224]	; (8002410 <stepper_set_speed+0x158>)
 800232e:	f7fe fa07 	bl	8000740 <__aeabi_ddiv>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4630      	mov	r0, r6
 8002338:	4639      	mov	r1, r7
 800233a:	f7fe f8d7 	bl	80004ec <__aeabi_dmul>
 800233e:	f7fe fbcd 	bl	8000adc <__aeabi_d2f>
 8002342:	4605      	mov	r5, r0
 8002344:	9001      	str	r0, [sp, #4]
		if(speed > stepper->max_speed) speed = stepper->max_speed;
 8002346:	8ae0      	ldrh	r0, [r4, #22]
 8002348:	b280      	uxth	r0, r0
 800234a:	f7fe fcd1 	bl	8000cf0 <__aeabi_i2f>
 800234e:	4601      	mov	r1, r0
 8002350:	4628      	mov	r0, r5
 8002352:	f7fe fedd 	bl	8001110 <__aeabi_fcmpgt>
 8002356:	b120      	cbz	r0, 8002362 <stepper_set_speed+0xaa>
 8002358:	8ae0      	ldrh	r0, [r4, #22]
 800235a:	b280      	uxth	r0, r0
 800235c:	f7fe fcc4 	bl	8000ce8 <__aeabi_ui2f>
 8002360:	9001      	str	r0, [sp, #4]
		if(speed < -stepper->max_speed) speed = -stepper->max_speed;
 8002362:	8ae0      	ldrh	r0, [r4, #22]
 8002364:	b280      	uxth	r0, r0
 8002366:	4240      	negs	r0, r0
 8002368:	f7fe fcc2 	bl	8000cf0 <__aeabi_i2f>
 800236c:	9901      	ldr	r1, [sp, #4]
 800236e:	f7fe fecf 	bl	8001110 <__aeabi_fcmpgt>
 8002372:	b128      	cbz	r0, 8002380 <stepper_set_speed+0xc8>
 8002374:	8ae0      	ldrh	r0, [r4, #22]
 8002376:	b280      	uxth	r0, r0
 8002378:	4240      	negs	r0, r0
 800237a:	f7fe fcb9 	bl	8000cf0 <__aeabi_i2f>
 800237e:	9001      	str	r0, [sp, #4]
		if(speed > 0 && speed < 16) speed = 16;
 8002380:	9e01      	ldr	r6, [sp, #4]
 8002382:	2100      	movs	r1, #0
 8002384:	4630      	mov	r0, r6
 8002386:	f7fe fec3 	bl	8001110 <__aeabi_fcmpgt>
 800238a:	b138      	cbz	r0, 800239c <stepper_set_speed+0xe4>
 800238c:	f04f 4583 	mov.w	r5, #1098907648	; 0x41800000
 8002390:	4630      	mov	r0, r6
 8002392:	4629      	mov	r1, r5
 8002394:	f7fe fe9e 	bl	80010d4 <__aeabi_fcmplt>
 8002398:	b100      	cbz	r0, 800239c <stepper_set_speed+0xe4>
 800239a:	9501      	str	r5, [sp, #4]
		if(speed < 0 && speed >-16) speed = -16;
 800239c:	9e01      	ldr	r6, [sp, #4]
 800239e:	2100      	movs	r1, #0
 80023a0:	4630      	mov	r0, r6
 80023a2:	f7fe fe97 	bl	80010d4 <__aeabi_fcmplt>
 80023a6:	b130      	cbz	r0, 80023b6 <stepper_set_speed+0xfe>
 80023a8:	4d1a      	ldr	r5, [pc, #104]	; (8002414 <stepper_set_speed+0x15c>)
 80023aa:	4630      	mov	r0, r6
 80023ac:	4629      	mov	r1, r5
 80023ae:	f7fe feaf 	bl	8001110 <__aeabi_fcmpgt>
 80023b2:	b100      	cbz	r0, 80023b6 <stepper_set_speed+0xfe>
 80023b4:	9501      	str	r5, [sp, #4]
		uint16_t counter = (1.0/abs(speed)) * SEC2uSEC;
 80023b6:	9d01      	ldr	r5, [sp, #4]
 80023b8:	4628      	mov	r0, r5
 80023ba:	f7fe feb3 	bl	8001124 <__aeabi_f2iz>
 80023be:	2800      	cmp	r0, #0
 80023c0:	bfb8      	it	lt
 80023c2:	4240      	neglt	r0, r0
 80023c4:	f7fe f828 	bl	8000418 <__aeabi_i2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	2000      	movs	r0, #0
 80023ce:	4912      	ldr	r1, [pc, #72]	; (8002418 <stepper_set_speed+0x160>)
 80023d0:	f7fe f9b6 	bl	8000740 <__aeabi_ddiv>
 80023d4:	a30a      	add	r3, pc, #40	; (adr r3, 8002400 <stepper_set_speed+0x148>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	f7fe f887 	bl	80004ec <__aeabi_dmul>
 80023de:	f7fe fb5d 	bl	8000a9c <__aeabi_d2uiz>
		stepper->new_counter = counter;
 80023e2:	b280      	uxth	r0, r0
 80023e4:	6220      	str	r0, [r4, #32]
		if(speed > 0) set_dir(stepper, 1);
 80023e6:	2100      	movs	r1, #0
 80023e8:	4628      	mov	r0, r5
 80023ea:	f7fe fe91 	bl	8001110 <__aeabi_fcmpgt>
 80023ee:	b120      	cbz	r0, 80023fa <stepper_set_speed+0x142>
 80023f0:	2101      	movs	r1, #1
		else set_dir(stepper, -1);
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff ff44 	bl	8002280 <set_dir>
}
 80023f8:	e77b      	b.n	80022f2 <stepper_set_speed+0x3a>
		else set_dir(stepper, -1);
 80023fa:	f04f 31ff 	mov.w	r1, #4294967295
 80023fe:	e7f8      	b.n	80023f2 <stepper_set_speed+0x13a>
 8002400:	00000000 	.word	0x00000000
 8002404:	412e8480 	.word	0x412e8480
 8002408:	c2c80000 	.word	0xc2c80000
 800240c:	42c80000 	.word	0x42c80000
 8002410:	40590000 	.word	0x40590000
 8002414:	c1800000 	.word	0xc1800000
 8002418:	3ff00000 	.word	0x3ff00000

0800241c <stepper_enable.part.0>:
void stepper_enable(stepper_typedef *stepper, bool en)
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4604      	mov	r4, r0
		stepper_set_speed(stepper, 0);
 8002420:	2500      	movs	r5, #0
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 8002422:	6880      	ldr	r0, [r0, #8]
 8002424:	89a1      	ldrh	r1, [r4, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	b289      	uxth	r1, r1
 800242a:	f001 fba9 	bl	8003b80 <HAL_GPIO_WritePin>
		stepper_set_speed(stepper, 0);
 800242e:	4629      	mov	r1, r5
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff ff41 	bl	80022b8 <stepper_set_speed>
		stepper->enable = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
		stepper->on_off = 0;
 800243c:	7723      	strb	r3, [r4, #28]
		stepper->speed = 0;
 800243e:	6265      	str	r5, [r4, #36]	; 0x24
}
 8002440:	bd38      	pop	{r3, r4, r5, pc}

08002442 <stepper_enable>:
{
 8002442:	b510      	push	{r4, lr}
 8002444:	4604      	mov	r4, r0
	if(en){
 8002446:	b149      	cbz	r1, 800245c <stepper_enable+0x1a>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 8002448:	6880      	ldr	r0, [r0, #8]
 800244a:	89a1      	ldrh	r1, [r4, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	b289      	uxth	r1, r1
 8002450:	f001 fb96 	bl	8003b80 <HAL_GPIO_WritePin>
		stepper->enable = 1;
 8002454:	2301      	movs	r3, #1
 8002456:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 800245a:	bd10      	pop	{r4, pc}
 800245c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002460:	f7ff bfdc 	b.w	800241c <stepper_enable.part.0>

08002464 <stepper_init>:
{
 8002464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002466:	460d      	mov	r5, r1
 8002468:	4616      	mov	r6, r2
	stepper->htim = htim;
 800246a:	6005      	str	r5, [r0, #0]
{
 800246c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	stepper->Channel = Channel;
 8002470:	6046      	str	r6, [r0, #4]
	stepper->EN_Port = EN_Port;
 8002472:	6083      	str	r3, [r0, #8]
	stepper->DIR_Port = DIR_Port;
 8002474:	9b07      	ldr	r3, [sp, #28]
	stepper->EN_Pin = EN_Pin;
 8002476:	8187      	strh	r7, [r0, #12]
	stepper->DIR_Port = DIR_Port;
 8002478:	6103      	str	r3, [r0, #16]
	stepper->step_counter = 0;
 800247a:	2300      	movs	r3, #0
{
 800247c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8002480:	4604      	mov	r4, r0
	stepper->DIR_Pin = DIR_Pin;
 8002482:	8281      	strh	r1, [r0, #20]
	stepper->step_counter = 0;
 8002484:	6183      	str	r3, [r0, #24]
	stepper->on_off = 0;
 8002486:	7703      	strb	r3, [r0, #28]
	stepper-> new_counter = 65000;
 8002488:	f64f 53e8 	movw	r3, #65000	; 0xfde8
	stepper_set_speed(stepper, 0);
 800248c:	2700      	movs	r7, #0
{
 800248e:	f99d 2028 	ldrsb.w	r2, [sp, #40]	; 0x28
	stepper-> new_counter = 65000;
 8002492:	6203      	str	r3, [r0, #32]
	stepper->max_speed = max_speed;
 8002494:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
	stepper->dir_polarity = dir_polarity;
 8002498:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
	set_dir(stepper, 1);
 800249c:	2101      	movs	r1, #1
	stepper->max_speed = max_speed;
 800249e:	82c3      	strh	r3, [r0, #22]
	set_dir(stepper, 1);
 80024a0:	f7ff feee 	bl	8002280 <set_dir>
	if(en){
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff ffb9 	bl	800241c <stepper_enable.part.0>
	stepper_set_speed(stepper, 0);
 80024aa:	4639      	mov	r1, r7
 80024ac:	4620      	mov	r0, r4
 80024ae:	f7ff ff03 	bl	80022b8 <stepper_set_speed>
	HAL_TIM_Base_Start_IT(htim);
 80024b2:	4628      	mov	r0, r5
	stepper->speed = 0;
 80024b4:	6267      	str	r7, [r4, #36]	; 0x24
	HAL_TIM_Base_Start_IT(htim);
 80024b6:	f003 fb07 	bl	8005ac8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 80024ba:	4631      	mov	r1, r6
 80024bc:	4628      	mov	r0, r5
}
 80024be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_PWM_Start(htim, Channel);
 80024c2:	f003 bde3 	b.w	800608c <HAL_TIM_PWM_Start>

080024c6 <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
	if(stepper->on_off){
 80024c6:	7f03      	ldrb	r3, [r0, #28]
 80024c8:	b32b      	cbz	r3, 8002516 <stepper_update+0x50>
		stepper->step_counter += stepper->dir;
 80024ca:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 80024ce:	6982      	ldr	r2, [r0, #24]
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	4413      	add	r3, r2
 80024d4:	6183      	str	r3, [r0, #24]

		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 80024d6:	6a02      	ldr	r2, [r0, #32]
 80024d8:	6803      	ldr	r3, [r0, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80024de:	6a02      	ldr	r2, [r0, #32]
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 100);
 80024e4:	6843      	ldr	r3, [r0, #4]
 80024e6:	b923      	cbnz	r3, 80024f2 <stepper_update+0x2c>
 80024e8:	2264      	movs	r2, #100	; 0x64
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	635a      	str	r2, [r3, #52]	; 0x34
 80024f0:	4770      	bx	lr
 80024f2:	6843      	ldr	r3, [r0, #4]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d104      	bne.n	8002502 <stepper_update+0x3c>
 80024f8:	2264      	movs	r2, #100	; 0x64
 80024fa:	6803      	ldr	r3, [r0, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002500:	4770      	bx	lr
 8002502:	6843      	ldr	r3, [r0, #4]
 8002504:	6802      	ldr	r2, [r0, #0]
 8002506:	2b08      	cmp	r3, #8
 8002508:	6812      	ldr	r2, [r2, #0]
 800250a:	f04f 0364 	mov.w	r3, #100	; 0x64
 800250e:	d101      	bne.n	8002514 <stepper_update+0x4e>
 8002510:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002512:	4770      	bx	lr
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
	}
}
 8002516:	4770      	bx	lr

08002518 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_MspInit+0x3c>)
{
 800251a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800251c:	699a      	ldr	r2, [r3, #24]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	619a      	str	r2, [r3, #24]
 8002524:	699a      	ldr	r2, [r3, #24]
 8002526:	f002 0201 	and.w	r2, r2, #1
 800252a:	9200      	str	r2, [sp, #0]
 800252c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002534:	61da      	str	r2, [r3, #28]
 8002536:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002542:	6853      	ldr	r3, [r2, #4]
 8002544:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800254c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254e:	b002      	add	sp, #8
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	40010000 	.word	0x40010000

0800255c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800255c:	e7fe      	b.n	800255c <NMI_Handler>

0800255e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <HardFault_Handler>

08002560 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <MemManage_Handler>

08002562 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <BusFault_Handler>

08002564 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <UsageFault_Handler>

08002566 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	4770      	bx	lr

08002568 <DebugMon_Handler>:
 8002568:	4770      	bx	lr

0800256a <PendSV_Handler>:
 800256a:	4770      	bx	lr

0800256c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 bdfa 	b.w	8003164 <HAL_IncTick>

08002570 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002570:	4801      	ldr	r0, [pc, #4]	; (8002578 <DMA1_Channel4_IRQHandler+0x8>)
 8002572:	f001 b993 	b.w	800389c <HAL_DMA_IRQHandler>
 8002576:	bf00      	nop
 8002578:	200009cc 	.word	0x200009cc

0800257c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800257c:	4801      	ldr	r0, [pc, #4]	; (8002584 <DMA1_Channel5_IRQHandler+0x8>)
 800257e:	f001 b98d 	b.w	800389c <HAL_DMA_IRQHandler>
 8002582:	bf00      	nop
 8002584:	20000988 	.word	0x20000988

08002588 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002588:	4801      	ldr	r0, [pc, #4]	; (8002590 <DMA1_Channel7_IRQHandler+0x8>)
 800258a:	f001 b987 	b.w	800389c <HAL_DMA_IRQHandler>
 800258e:	bf00      	nop
 8002590:	20000224 	.word	0x20000224

08002594 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002594:	4801      	ldr	r0, [pc, #4]	; (800259c <ADC1_2_IRQHandler+0x8>)
 8002596:	f000 be0d 	b.w	80031b4 <HAL_ADC_IRQHandler>
 800259a:	bf00      	nop
 800259c:	200001f4 	.word	0x200001f4

080025a0 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025a0:	4801      	ldr	r0, [pc, #4]	; (80025a8 <TIM1_UP_IRQHandler+0x8>)
 80025a2:	f003 bac0 	b.w	8005b26 <HAL_TIM_IRQHandler>
 80025a6:	bf00      	nop
 80025a8:	20000868 	.word	0x20000868

080025ac <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025ac:	4801      	ldr	r0, [pc, #4]	; (80025b4 <TIM2_IRQHandler+0x8>)
 80025ae:	f003 baba 	b.w	8005b26 <HAL_TIM_IRQHandler>
 80025b2:	bf00      	nop
 80025b4:	200008b0 	.word	0x200008b0

080025b8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025b8:	4801      	ldr	r0, [pc, #4]	; (80025c0 <TIM3_IRQHandler+0x8>)
 80025ba:	f003 bab4 	b.w	8005b26 <HAL_TIM_IRQHandler>
 80025be:	bf00      	nop
 80025c0:	200008f8 	.word	0x200008f8

080025c4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025c4:	4801      	ldr	r0, [pc, #4]	; (80025cc <TIM4_IRQHandler+0x8>)
 80025c6:	f003 baae 	b.w	8005b26 <HAL_TIM_IRQHandler>
 80025ca:	bf00      	nop
 80025cc:	20000940 	.word	0x20000940

080025d0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80025d0:	4801      	ldr	r0, [pc, #4]	; (80025d8 <I2C2_EV_IRQHandler+0x8>)
 80025d2:	f002 bab7 	b.w	8004b44 <HAL_I2C_EV_IRQHandler>
 80025d6:	bf00      	nop
 80025d8:	200002bc 	.word	0x200002bc

080025dc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025dc:	4801      	ldr	r0, [pc, #4]	; (80025e4 <USART1_IRQHandler+0x8>)
 80025de:	f003 bf73 	b.w	80064c8 <HAL_UART_IRQHandler>
 80025e2:	bf00      	nop
 80025e4:	20000a10 	.word	0x20000a10

080025e8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80025e8:	2001      	movs	r0, #1
 80025ea:	4770      	bx	lr

080025ec <_kill>:

int _kill(int pid, int sig)
{
 80025ec:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ee:	f005 feb9 	bl	8008364 <__errno>
 80025f2:	2316      	movs	r3, #22
 80025f4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80025f6:	f04f 30ff 	mov.w	r0, #4294967295
 80025fa:	bd08      	pop	{r3, pc}

080025fc <_exit>:

void _exit (int status)
{
 80025fc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80025fe:	f005 feb1 	bl	8008364 <__errno>
 8002602:	2316      	movs	r3, #22
 8002604:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8002606:	e7fe      	b.n	8002606 <_exit+0xa>

08002608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002608:	b570      	push	{r4, r5, r6, lr}
 800260a:	460d      	mov	r5, r1
 800260c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	460e      	mov	r6, r1
 8002610:	1b73      	subs	r3, r6, r5
 8002612:	429c      	cmp	r4, r3
 8002614:	dc01      	bgt.n	800261a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8002616:	4620      	mov	r0, r4
 8002618:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800261a:	f3af 8000 	nop.w
 800261e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	e7f5      	b.n	8002610 <_read+0x8>

08002624 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002624:	b570      	push	{r4, r5, r6, lr}
 8002626:	460d      	mov	r5, r1
 8002628:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	460e      	mov	r6, r1
 800262c:	1b73      	subs	r3, r6, r5
 800262e:	429c      	cmp	r4, r3
 8002630:	dc01      	bgt.n	8002636 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8002632:	4620      	mov	r0, r4
 8002634:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8002636:	f816 0b01 	ldrb.w	r0, [r6], #1
 800263a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	e7f5      	b.n	800262c <_write+0x8>

08002640 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002640:	f04f 30ff 	mov.w	r0, #4294967295
 8002644:	4770      	bx	lr

08002646 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 800264a:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 800264c:	604b      	str	r3, [r1, #4]
}
 800264e:	4770      	bx	lr

08002650 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002650:	2001      	movs	r0, #1
 8002652:	4770      	bx	lr

08002654 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002654:	2000      	movs	r0, #0
 8002656:	4770      	bx	lr

08002658 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <_sbrk+0x30>)
{
 800265a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800265c:	6811      	ldr	r1, [r2, #0]
{
 800265e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002660:	b909      	cbnz	r1, 8002666 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8002662:	490a      	ldr	r1, [pc, #40]	; (800268c <_sbrk+0x34>)
 8002664:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002666:	6810      	ldr	r0, [r2, #0]
 8002668:	4909      	ldr	r1, [pc, #36]	; (8002690 <_sbrk+0x38>)
 800266a:	4c0a      	ldr	r4, [pc, #40]	; (8002694 <_sbrk+0x3c>)
 800266c:	4403      	add	r3, r0
 800266e:	1b09      	subs	r1, r1, r4
 8002670:	428b      	cmp	r3, r1
 8002672:	d906      	bls.n	8002682 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8002674:	f005 fe76 	bl	8008364 <__errno>
 8002678:	230c      	movs	r3, #12
 800267a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800267c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002680:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8002682:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8002684:	e7fc      	b.n	8002680 <_sbrk+0x28>
 8002686:	bf00      	nop
 8002688:	20000864 	.word	0x20000864
 800268c:	20000ba8 	.word	0x20000ba8
 8002690:	20005000 	.word	0x20005000
 8002694:	00000400 	.word	0x00000400

08002698 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	4770      	bx	lr
	...

0800269c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800269c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269e:	2210      	movs	r2, #16
 80026a0:	2100      	movs	r1, #0
 80026a2:	a802      	add	r0, sp, #8
 80026a4:	f005 fdfa 	bl	800829c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 7199;
 80026a8:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim1.Instance = TIM1;
 80026ac:	4814      	ldr	r0, [pc, #80]	; (8002700 <MX_TIM1_Init+0x64>)
  htim1.Init.Prescaler = 7199;
 80026ae:	4915      	ldr	r1, [pc, #84]	; (8002704 <MX_TIM1_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b0:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 7199;
 80026b2:	e9c0 1200 	strd	r1, r2, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 9999;
 80026b6:	f242 720f 	movw	r2, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ba:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026be:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c6:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80026c8:	f003 fb02 	bl	8005cd0 <HAL_TIM_Base_Init>
 80026cc:	b108      	cbz	r0, 80026d2 <MX_TIM1_Init+0x36>
  {
    Error_Handler();
 80026ce:	f7fe ffef 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026d6:	480a      	ldr	r0, [pc, #40]	; (8002700 <MX_TIM1_Init+0x64>)
 80026d8:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026da:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80026dc:	f003 fbdf 	bl	8005e9e <HAL_TIM_ConfigClockSource>
 80026e0:	b108      	cbz	r0, 80026e6 <MX_TIM1_Init+0x4a>
  {
    Error_Handler();
 80026e2:	f7fe ffe5 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026e6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026e8:	4669      	mov	r1, sp
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_TIM1_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ec:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026f0:	f003 fcce 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 80026f4:	b108      	cbz	r0, 80026fa <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80026f6:	f7fe ffdb 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026fa:	b007      	add	sp, #28
 80026fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002700:	20000868 	.word	0x20000868
 8002704:	40012c00 	.word	0x40012c00

08002708 <MX_TIM4_Init>:
  HAL_TIM_MspPostInit(&htim3);

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002708:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800270a:	2210      	movs	r2, #16
 800270c:	2100      	movs	r1, #0
 800270e:	a802      	add	r0, sp, #8
 8002710:	f005 fdc4 	bl	800829c <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 7199;
 8002714:	f641 421f 	movw	r2, #7199	; 0x1c1f
  htim4.Instance = TIM4;
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <MX_TIM4_Init+0x60>)
  htim4.Init.Prescaler = 7199;
 800271a:	4914      	ldr	r1, [pc, #80]	; (800276c <MX_TIM4_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271c:	2300      	movs	r3, #0
  htim4.Init.Prescaler = 7199;
 800271e:	e9c0 1200 	strd	r1, r2, [r0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 39;
 8002722:	2227      	movs	r2, #39	; 0x27
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002724:	e9cd 3300 	strd	r3, r3, [sp]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002728:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	6083      	str	r3, [r0, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002730:	f003 face 	bl	8005cd0 <HAL_TIM_Base_Init>
 8002734:	b108      	cbz	r0, 800273a <MX_TIM4_Init+0x32>
  {
    Error_Handler();
 8002736:	f7fe ffbb 	bl	80016b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800273a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800273e:	480a      	ldr	r0, [pc, #40]	; (8002768 <MX_TIM4_Init+0x60>)
 8002740:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002742:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002744:	f003 fbab 	bl	8005e9e <HAL_TIM_ConfigClockSource>
 8002748:	b108      	cbz	r0, 800274e <MX_TIM4_Init+0x46>
  {
    Error_Handler();
 800274a:	f7fe ffb1 	bl	80016b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002750:	4669      	mov	r1, sp
 8002752:	4805      	ldr	r0, [pc, #20]	; (8002768 <MX_TIM4_Init+0x60>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002754:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002758:	f003 fc9a 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 800275c:	b108      	cbz	r0, 8002762 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800275e:	f7fe ffa7 	bl	80016b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002762:	b007      	add	sp, #28
 8002764:	f85d fb04 	ldr.w	pc, [sp], #4
 8002768:	20000940 	.word	0x20000940
 800276c:	40000800 	.word	0x40000800

08002770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002770:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002772:	6803      	ldr	r3, [r0, #0]
 8002774:	4a2b      	ldr	r2, [pc, #172]	; (8002824 <HAL_TIM_Base_MspInit+0xb4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d114      	bne.n	80027a4 <HAL_TIM_Base_MspInit+0x34>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277a:	4b2b      	ldr	r3, [pc, #172]	; (8002828 <HAL_TIM_Base_MspInit+0xb8>)

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800277c:	2019      	movs	r0, #25
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002784:	619a      	str	r2, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002788:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800278a:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 800278c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002794:	f000 ff58 	bl	8003648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002798:	2019      	movs	r0, #25
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800279a:	b005      	add	sp, #20
 800279c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027a0:	f000 bf82 	b.w	80036a8 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM2)
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a8:	d111      	bne.n	80027ce <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027aa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80027ae:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027b0:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027b8:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ba:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027bc:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027c6:	f000 ff3f 	bl	8003648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027ca:	201c      	movs	r0, #28
 80027cc:	e7e5      	b.n	800279a <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM3)
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_TIM_Base_MspInit+0xbc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d110      	bne.n	80027f6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_TIM_Base_MspInit+0xb8>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027d6:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	f042 0202 	orr.w	r2, r2, #2
 80027de:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027e2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027e4:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	9302      	str	r3, [sp, #8]
 80027ec:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027ee:	f000 ff2b 	bl	8003648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027f2:	201d      	movs	r0, #29
 80027f4:	e7d1      	b.n	800279a <HAL_TIM_Base_MspInit+0x2a>
  else if(tim_baseHandle->Instance==TIM4)
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <HAL_TIM_Base_MspInit+0xc0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d110      	bne.n	800281e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027fc:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <HAL_TIM_Base_MspInit+0xb8>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80027fe:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	f042 0204 	orr.w	r2, r2, #4
 8002806:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002808:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 800280a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800280c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	9303      	str	r3, [sp, #12]
 8002814:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002816:	f000 ff17 	bl	8003648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800281a:	201e      	movs	r0, #30
 800281c:	e7bd      	b.n	800279a <HAL_TIM_Base_MspInit+0x2a>
}
 800281e:	b005      	add	sp, #20
 8002820:	f85d fb04 	ldr.w	pc, [sp], #4
 8002824:	40012c00 	.word	0x40012c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800

08002834 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002834:	b510      	push	{r4, lr}
 8002836:	4604      	mov	r4, r0
 8002838:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283a:	2210      	movs	r2, #16
 800283c:	2100      	movs	r1, #0
 800283e:	a802      	add	r0, sp, #8
 8002840:	f005 fd2c 	bl	800829c <memset>
  if(timHandle->Instance==TIM2)
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d115      	bne.n	8002878 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	f042 0204 	orr.w	r2, r2, #4
 8002856:	619a      	str	r2, [r3, #24]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	9b00      	ldr	r3, [sp, #0]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 8002862:	2301      	movs	r3, #1

    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 8002864:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8002868:	480b      	ldr	r0, [pc, #44]	; (8002898 <HAL_TIM_MspPostInit+0x64>)
 800286a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8002870:	f001 f8ac 	bl	80039cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002874:	b006      	add	sp, #24
 8002876:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 8002878:	4a08      	ldr	r2, [pc, #32]	; (800289c <HAL_TIM_MspPostInit+0x68>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d1fa      	bne.n	8002874 <HAL_TIM_MspPostInit+0x40>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_TIM_MspPostInit+0x6c>)
 8002880:	699a      	ldr	r2, [r3, #24]
 8002882:	f042 0204 	orr.w	r2, r2, #4
 8002886:	619a      	str	r2, [r3, #24]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	e7e6      	b.n	8002864 <HAL_TIM_MspPostInit+0x30>
 8002896:	bf00      	nop
 8002898:	40010800 	.word	0x40010800
 800289c:	40000400 	.word	0x40000400
 80028a0:	40021000 	.word	0x40021000

080028a4 <MX_TIM2_Init>:
{
 80028a4:	b510      	push	{r4, lr}
 80028a6:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028a8:	2210      	movs	r2, #16
 80028aa:	2100      	movs	r1, #0
 80028ac:	a803      	add	r0, sp, #12
 80028ae:	f005 fcf5 	bl	800829c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b2:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028b4:	221c      	movs	r2, #28
 80028b6:	4621      	mov	r1, r4
 80028b8:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028c0:	f005 fcec 	bl	800829c <memset>
  htim2.Init.Prescaler = 71;
 80028c4:	2347      	movs	r3, #71	; 0x47
 80028c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 80028ca:	481d      	ldr	r0, [pc, #116]	; (8002940 <MX_TIM2_Init+0x9c>)
  htim2.Init.Prescaler = 71;
 80028cc:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.Period = 65535;
 80028d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028d6:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028da:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028dc:	f003 f9f8 	bl	8005cd0 <HAL_TIM_Base_Init>
 80028e0:	b108      	cbz	r0, 80028e6 <MX_TIM2_Init+0x42>
    Error_Handler();
 80028e2:	f7fe fee5 	bl	80016b0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028ea:	4815      	ldr	r0, [pc, #84]	; (8002940 <MX_TIM2_Init+0x9c>)
 80028ec:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ee:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028f0:	f003 fad5 	bl	8005e9e <HAL_TIM_ConfigClockSource>
 80028f4:	b108      	cbz	r0, 80028fa <MX_TIM2_Init+0x56>
    Error_Handler();
 80028f6:	f7fe fedb 	bl	80016b0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028fa:	4811      	ldr	r0, [pc, #68]	; (8002940 <MX_TIM2_Init+0x9c>)
 80028fc:	f003 fa14 	bl	8005d28 <HAL_TIM_PWM_Init>
 8002900:	b108      	cbz	r0, 8002906 <MX_TIM2_Init+0x62>
    Error_Handler();
 8002902:	f7fe fed5 	bl	80016b0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002906:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <MX_TIM2_Init+0x9c>)
 800290a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800290c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002910:	f003 fbbe 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 8002914:	b108      	cbz	r0, 800291a <MX_TIM2_Init+0x76>
    Error_Handler();
 8002916:	f7fe fecb 	bl	80016b0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800291a:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800291c:	2200      	movs	r2, #0
 800291e:	4808      	ldr	r0, [pc, #32]	; (8002940 <MX_TIM2_Init+0x9c>)
 8002920:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 8002922:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002926:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002928:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800292a:	f003 fa55 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 800292e:	b108      	cbz	r0, 8002934 <MX_TIM2_Init+0x90>
    Error_Handler();
 8002930:	f7fe febe 	bl	80016b0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim2);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <MX_TIM2_Init+0x9c>)
 8002936:	f7ff ff7d 	bl	8002834 <HAL_TIM_MspPostInit>
}
 800293a:	b00e      	add	sp, #56	; 0x38
 800293c:	bd10      	pop	{r4, pc}
 800293e:	bf00      	nop
 8002940:	200008b0 	.word	0x200008b0

08002944 <MX_TIM3_Init>:
{
 8002944:	b510      	push	{r4, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002948:	2210      	movs	r2, #16
 800294a:	2100      	movs	r1, #0
 800294c:	a803      	add	r0, sp, #12
 800294e:	f005 fca5 	bl	800829c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002952:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002954:	221c      	movs	r2, #28
 8002956:	4621      	mov	r1, r4
 8002958:	eb0d 0002 	add.w	r0, sp, r2
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	e9cd 4401 	strd	r4, r4, [sp, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002960:	f005 fc9c 	bl	800829c <memset>
  htim3.Init.Prescaler = 71;
 8002964:	2347      	movs	r3, #71	; 0x47
  htim3.Instance = TIM3;
 8002966:	481d      	ldr	r0, [pc, #116]	; (80029dc <MX_TIM3_Init+0x98>)
  htim3.Init.Prescaler = 71;
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <MX_TIM3_Init+0x9c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296a:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 71;
 800296c:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.Period = 65535;
 8002970:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002974:	6184      	str	r4, [r0, #24]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002976:	e9c0 3403 	strd	r3, r4, [r0, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800297a:	f003 f9a9 	bl	8005cd0 <HAL_TIM_Base_Init>
 800297e:	b108      	cbz	r0, 8002984 <MX_TIM3_Init+0x40>
    Error_Handler();
 8002980:	f7fe fe96 	bl	80016b0 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002988:	4814      	ldr	r0, [pc, #80]	; (80029dc <MX_TIM3_Init+0x98>)
 800298a:	a903      	add	r1, sp, #12
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800298c:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800298e:	f003 fa86 	bl	8005e9e <HAL_TIM_ConfigClockSource>
 8002992:	b108      	cbz	r0, 8002998 <MX_TIM3_Init+0x54>
    Error_Handler();
 8002994:	f7fe fe8c 	bl	80016b0 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002998:	4810      	ldr	r0, [pc, #64]	; (80029dc <MX_TIM3_Init+0x98>)
 800299a:	f003 f9c5 	bl	8005d28 <HAL_TIM_PWM_Init>
 800299e:	b108      	cbz	r0, 80029a4 <MX_TIM3_Init+0x60>
    Error_Handler();
 80029a0:	f7fe fe86 	bl	80016b0 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a4:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029a6:	480d      	ldr	r0, [pc, #52]	; (80029dc <MX_TIM3_Init+0x98>)
 80029a8:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029aa:	e9cd 4401 	strd	r4, r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029ae:	f003 fb6f 	bl	8006090 <HAL_TIMEx_MasterConfigSynchronization>
 80029b2:	b108      	cbz	r0, 80029b8 <MX_TIM3_Init+0x74>
    Error_Handler();
 80029b4:	f7fe fe7c 	bl	80016b0 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029b8:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029ba:	2200      	movs	r2, #0
 80029bc:	4807      	ldr	r0, [pc, #28]	; (80029dc <MX_TIM3_Init+0x98>)
 80029be:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = 0;
 80029c0:	e9cd 3407 	strd	r3, r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c4:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029c6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029c8:	f003 fa06 	bl	8005dd8 <HAL_TIM_PWM_ConfigChannel>
 80029cc:	b108      	cbz	r0, 80029d2 <MX_TIM3_Init+0x8e>
    Error_Handler();
 80029ce:	f7fe fe6f 	bl	80016b0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 80029d2:	4802      	ldr	r0, [pc, #8]	; (80029dc <MX_TIM3_Init+0x98>)
 80029d4:	f7ff ff2e 	bl	8002834 <HAL_TIM_MspPostInit>
}
 80029d8:	b00e      	add	sp, #56	; 0x38
 80029da:	bd10      	pop	{r4, pc}
 80029dc:	200008f8 	.word	0x200008f8
 80029e0:	40000400 	.word	0x40000400

080029e4 <uart_interface_init>:
extern uart_interface_typedef uart_interface;



void uart_interface_init(uart_interface_typedef* uart_int, UART_HandleTypeDef *huart, DMA_HandleTypeDef* hdma_usart_rx,
		user_function_typedef* functions_array, uint8_t num_functions){
 80029e4:	b510      	push	{r4, lr}

	__HAL_DMA_DISABLE_IT(hdma_usart_rx, DMA_IT_HT); //disable half transfer DMA interrupt
 80029e6:	6814      	ldr	r4, [r2, #0]
 80029e8:	6822      	ldr	r2, [r4, #0]
 80029ea:	f022 0204 	bic.w	r2, r2, #4
 80029ee:	6022      	str	r2, [r4, #0]

	uart_int->huart = huart;
	uart_int->received_command_size = 0;
	uart_int->command_received_flag = 0;
	uart_int->functions_array = functions_array;
 80029f0:	f8c0 3288 	str.w	r3, [r0, #648]	; 0x288
	uart_int->num_functions = num_functions;
 80029f4:	f89d 3008 	ldrb.w	r3, [sp, #8]
	uart_int->received_command_size = 0;
 80029f8:	2200      	movs	r2, #0
	uart_int->num_functions = num_functions;
 80029fa:	f880 328c 	strb.w	r3, [r0, #652]	; 0x28c
	uart_int->uart_tx_ready = 1;
 80029fe:	2301      	movs	r3, #1
	uart_int->command_received_flag = 0;
 8002a00:	f880 2286 	strb.w	r2, [r0, #646]	; 0x286
	uart_int->huart = huart;
 8002a04:	6001      	str	r1, [r0, #0]
	uart_int->uart_tx_ready = 1;
 8002a06:	f880 3287 	strb.w	r3, [r0, #647]	; 0x287
	uart_int->received_command_size = 0;
 8002a0a:	f8a0 2284 	strh.w	r2, [r0, #644]	; 0x284
	uart_int->queue_empty = 1;
 8002a0e:	f880 348e 	strb.w	r3, [r0, #1166]	; 0x48e


}
 8002a12:	bd10      	pop	{r4, pc}

08002a14 <start_uart_interface>:


void start_uart_interface(uart_interface_typedef* uart_int){
	HAL_UARTEx_ReceiveToIdle_DMA(uart_int->huart, uart_int->receive_buffer, BUFFER_SIZE_RX);
 8002a14:	1d01      	adds	r1, r0, #4
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	6800      	ldr	r0, [r0, #0]
 8002a1a:	f003 beeb 	b.w	80067f4 <HAL_UARTEx_ReceiveToIdle_DMA>

08002a1e <uart_send>:
}


void uart_send(uart_interface_typedef* uart_int, uint8_t* buffer, uint16_t size, bool add_to_queue){
	if(size < BUFFER_SIZE_TX){
 8002a1e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
void uart_send(uart_interface_typedef* uart_int, uint8_t* buffer, uint16_t size, bool add_to_queue){
 8002a22:	b570      	push	{r4, r5, r6, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	4615      	mov	r5, r2
	if(size < BUFFER_SIZE_TX){
 8002a28:	d220      	bcs.n	8002a6c <uart_send+0x4e>
		if(uart_int->uart_tx_ready){
 8002a2a:	f890 0287 	ldrb.w	r0, [r0, #647]	; 0x287
 8002a2e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8002a32:	b170      	cbz	r0, 8002a52 <uart_send+0x34>
			uart_int->uart_tx_ready = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f884 3287 	strb.w	r3, [r4, #647]	; 0x287
			memcpy(uart_int->transmit_buffer, buffer, size);
 8002a3a:	f104 0384 	add.w	r3, r4, #132	; 0x84
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f005 fcd2 	bl	80083e8 <memcpy>
			HAL_UART_Transmit_DMA(uart_int->huart, uart_int->transmit_buffer, size);
 8002a44:	462a      	mov	r2, r5
 8002a46:	4601      	mov	r1, r0
 8002a48:	6820      	ldr	r0, [r4, #0]
			memcpy(uart_int->queue, buffer, size);
			uart_int->queue_data_size = size;
			uart_int->queue_empty = 0;
		}
	}
}
 8002a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_UART_Transmit_DMA(uart_int->huart, uart_int->transmit_buffer, size);
 8002a4e:	f003 bbe7 	b.w	8006220 <HAL_UART_Transmit_DMA>
		else if(add_to_queue && uart_int->queue_empty){
 8002a52:	b15b      	cbz	r3, 8002a6c <uart_send+0x4e>
 8002a54:	f894 348e 	ldrb.w	r3, [r4, #1166]	; 0x48e
 8002a58:	b143      	cbz	r3, 8002a6c <uart_send+0x4e>
			memcpy(uart_int->queue, buffer, size);
 8002a5a:	f204 208d 	addw	r0, r4, #653	; 0x28d
			uart_int->queue_data_size = size;
 8002a5e:	b2ed      	uxtb	r5, r5
			memcpy(uart_int->queue, buffer, size);
 8002a60:	f005 fcc2 	bl	80083e8 <memcpy>
			uart_int->queue_data_size = size;
 8002a64:	f884 548d 	strb.w	r5, [r4, #1165]	; 0x48d
			uart_int->queue_empty = 0;
 8002a68:	f884 648e 	strb.w	r6, [r4, #1166]	; 0x48e
}
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a70 <HAL_UARTEx_RxEventCallback>:
/*
 * command received interrupt
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
    if(huart->Instance == uart_interface.huart->Instance)
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_UARTEx_RxEventCallback+0x18>)
 8002a72:	6800      	ldr	r0, [r0, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	4290      	cmp	r0, r2
    {
    	uart_interface.command_received_flag = 1;
 8002a7a:	bf02      	ittt	eq
 8002a7c:	2201      	moveq	r2, #1
    	uart_interface.received_command_size = Size;
 8002a7e:	f8a3 1284 	strheq.w	r1, [r3, #644]	; 0x284
    	uart_interface.command_received_flag = 1;
 8002a82:	f883 2286 	strbeq.w	r2, [r3, #646]	; 0x286

    }
}
 8002a86:	4770      	bx	lr
 8002a88:	2000036c 	.word	0x2000036c

08002a8c <HAL_UART_TxCpltCallback>:

/*
 * transnmit completed, if there is element in queue buffer send it, otherwise set uart transmit to ready
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002a8c:	b570      	push	{r4, r5, r6, lr}
	if(huart->Instance == uart_interface.huart->Instance){
 8002a8e:	4c12      	ldr	r4, [pc, #72]	; (8002ad8 <HAL_UART_TxCpltCallback+0x4c>)
 8002a90:	6802      	ldr	r2, [r0, #0]
 8002a92:	6825      	ldr	r5, [r4, #0]
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d118      	bne.n	8002acc <HAL_UART_TxCpltCallback+0x40>
		if(uart_interface.queue_empty == 0){
 8002a9a:	f894 348e 	ldrb.w	r3, [r4, #1166]	; 0x48e
 8002a9e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
 8002aa2:	b9a3      	cbnz	r3, 8002ace <HAL_UART_TxCpltCallback+0x42>
			memcpy(uart_interface.transmit_buffer, uart_interface.queue, uart_interface.queue_data_size);
 8002aa4:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
 8002aa8:	f204 218d 	addw	r1, r4, #653	; 0x28d
 8002aac:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8002ab0:	f005 fc9a 	bl	80083e8 <memcpy>
			HAL_UART_Transmit_DMA(uart_interface.huart, uart_interface.transmit_buffer, uart_interface.queue_data_size);
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f894 248d 	ldrb.w	r2, [r4, #1165]	; 0x48d
 8002aba:	f104 0184 	add.w	r1, r4, #132	; 0x84
 8002abe:	f003 fbaf 	bl	8006220 <HAL_UART_Transmit_DMA>
			uart_interface.queue_empty = 1;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f884 348e 	strb.w	r3, [r4, #1166]	; 0x48e
			uart_interface.uart_tx_ready = 0;
 8002ac8:	f884 6287 	strb.w	r6, [r4, #647]	; 0x287
		}
		else{
			uart_interface.uart_tx_ready = 1;
		}
	}
}
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
			uart_interface.uart_tx_ready = 1;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f884 3287 	strb.w	r3, [r4, #647]	; 0x287
}
 8002ad4:	e7fa      	b.n	8002acc <HAL_UART_TxCpltCallback+0x40>
 8002ad6:	bf00      	nop
 8002ad8:	2000036c 	.word	0x2000036c

08002adc <help>:

/*
 * send "help" command to stm, stm will transmit avaible commands and number of arguments for each command
 */

void help(uart_interface_typedef* uart_int){
 8002adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t offset = 0;
	uint8_t buffer[BUFFER_SIZE_TX];
	for (int i = 0; i < uart_int->num_functions; i++) {
 8002ae0:	2600      	movs	r6, #0
void help(uart_interface_typedef* uart_int){
 8002ae2:	4605      	mov	r5, r0
	uint8_t offset = 0;
 8002ae4:	4634      	mov	r4, r6
		int16_t written = snprintf((char*)(buffer + offset), BUFFER_SIZE_TX - offset,
							   "%s - num_args: %d\n",
							   uart_int->functions_array[i].function_code,
 8002ae6:	2718      	movs	r7, #24
		int16_t written = snprintf((char*)(buffer + offset), BUFFER_SIZE_TX - offset,
 8002ae8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8002b34 <help+0x58>
void help(uart_interface_typedef* uart_int){
 8002aec:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
	for (int i = 0; i < uart_int->num_functions; i++) {
 8002af0:	f895 328c 	ldrb.w	r3, [r5, #652]	; 0x28c
 8002af4:	42b3      	cmp	r3, r6
 8002af6:	dd0f      	ble.n	8002b18 <help+0x3c>
							   uart_int->functions_array[i].function_code,
 8002af8:	f8d5 3288 	ldr.w	r3, [r5, #648]	; 0x288
		int16_t written = snprintf((char*)(buffer + offset), BUFFER_SIZE_TX - offset,
 8002afc:	a802      	add	r0, sp, #8
							   uart_int->functions_array[i].function_code,
 8002afe:	fb07 3306 	mla	r3, r7, r6, r3
		int16_t written = snprintf((char*)(buffer + offset), BUFFER_SIZE_TX - offset,
 8002b02:	7d1a      	ldrb	r2, [r3, #20]
 8002b04:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
 8002b08:	9200      	str	r2, [sp, #0]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	4420      	add	r0, r4
 8002b10:	f005 fab8 	bl	8008084 <sniprintf>
							   uart_int->functions_array[i].num_args);

		if (written < 0 || offset >= BUFFER_SIZE_TX){
 8002b14:	0403      	lsls	r3, r0, #16
 8002b16:	d509      	bpl.n	8002b2c <help+0x50>
			break;
		}

		offset += written;
	}
	uart_send(uart_int, buffer, offset, 1);
 8002b18:	2301      	movs	r3, #1
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	a902      	add	r1, sp, #8
 8002b20:	f7ff ff7d 	bl	8002a1e <uart_send>
}
 8002b24:	f50d 7d02 	add.w	sp, sp, #520	; 0x208
 8002b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += written;
 8002b2c:	1823      	adds	r3, r4, r0
 8002b2e:	b2dc      	uxtb	r4, r3
	for (int i = 0; i < uart_int->num_functions; i++) {
 8002b30:	3601      	adds	r6, #1
 8002b32:	e7dd      	b.n	8002af0 <help+0x14>
 8002b34:	0800b2ce 	.word	0x0800b2ce

08002b38 <execute_received_command>:
int8_t execute_received_command(uart_interface_typedef* uart_int){
 8002b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(!uart_int->command_received_flag) return 0;
 8002b3c:	f890 2286 	ldrb.w	r2, [r0, #646]	; 0x286
int8_t execute_received_command(uart_interface_typedef* uart_int){
 8002b40:	4605      	mov	r5, r0
 8002b42:	2300      	movs	r3, #0
 8002b44:	b09c      	sub	sp, #112	; 0x70
	if(!uart_int->command_received_flag) return 0;
 8002b46:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8002b4a:	b3aa      	cbz	r2, 8002bb8 <execute_received_command+0x80>
	uart_int->command_received_flag = 0;
 8002b4c:	466c      	mov	r4, sp
 8002b4e:	4626      	mov	r6, r4
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8002b50:	f8b5 7284 	ldrh.w	r7, [r5, #644]	; 0x284
 8002b54:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8002c74 <execute_received_command+0x13c>
	uart_int->command_received_flag = 0;
 8002b58:	f885 3286 	strb.w	r3, [r5, #646]	; 0x286
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8002b5c:	f105 0c03 	add.w	ip, r5, #3
 8002b60:	429f      	cmp	r7, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	dc03      	bgt.n	8002b6e <execute_received_command+0x36>
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d101      	bne.n	8002b6e <execute_received_command+0x36>
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	e014      	b.n	8002b98 <execute_received_command+0x60>
		char elem = uart_int->receive_buffer[i];
 8002b6e:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
 8002b72:	3201      	adds	r2, #1
 8002b74:	b2d2      	uxtb	r2, r2
		if(elem == '\0' || elem == '\r' || elem == '\n' || elem == '('){
 8002b76:	f1b8 0f00 	cmp.w	r8, #0
 8002b7a:	d008      	beq.n	8002b8e <execute_received_command+0x56>
 8002b7c:	f1a8 010a 	sub.w	r1, r8, #10
 8002b80:	b2c9      	uxtb	r1, r1
 8002b82:	291e      	cmp	r1, #30
 8002b84:	d81b      	bhi.n	8002bbe <execute_received_command+0x86>
 8002b86:	fa2e f101 	lsr.w	r1, lr, r1
 8002b8a:	07c9      	lsls	r1, r1, #31
 8002b8c:	d517      	bpl.n	8002bbe <execute_received_command+0x86>
			function_code[i] = '\0';
 8002b8e:	2100      	movs	r1, #0
 8002b90:	3370      	adds	r3, #112	; 0x70
 8002b92:	446b      	add	r3, sp
 8002b94:	f803 1c70 	strb.w	r1, [r3, #-112]
	uint8_t arg_counter = 0;
 8002b98:	2400      	movs	r4, #0
	for(int i = idx; i < uart_int->received_command_size; i++)
 8002b9a:	4613      	mov	r3, r2
	uint8_t arg_len = 0;
 8002b9c:	4621      	mov	r1, r4
			args[arg_counter][arg_len] = elem;
 8002b9e:	f04f 0c0c 	mov.w	ip, #12
			no_args = 0;
 8002ba2:	46a0      	mov	r8, r4
		if(elem == '\0' || elem == '\r' || elem == '\n') return -1; //error, commands ends with ')'
 8002ba4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002c78 <execute_received_command+0x140>
		char elem = uart_int->receive_buffer[i];
 8002ba8:	f105 0e04 	add.w	lr, r5, #4
	for(int i = idx; i < uart_int->received_command_size; i++)
 8002bac:	429f      	cmp	r7, r3
 8002bae:	dd1a      	ble.n	8002be6 <execute_received_command+0xae>
		if(arg_counter >= MAX_NUM_ARGS || arg_len >= ARG_MAX_LENGTH) return -1; //error, to many argumenst/to long argument
 8002bb0:	2c08      	cmp	r4, #8
 8002bb2:	d108      	bne.n	8002bc6 <execute_received_command+0x8e>
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002bb8:	b01c      	add	sp, #112	; 0x70
 8002bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		else function_code[i] = elem;
 8002bbe:	f804 8b01 	strb.w	r8, [r4], #1
	for(int i = 0; i < uart_int->received_command_size || i < FUNCTION_CODE_MAX_LENGTH; i++){
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	e7cc      	b.n	8002b60 <execute_received_command+0x28>
		if(arg_counter >= MAX_NUM_ARGS || arg_len >= ARG_MAX_LENGTH) return -1; //error, to many argumenst/to long argument
 8002bc6:	290c      	cmp	r1, #12
 8002bc8:	d0f4      	beq.n	8002bb4 <execute_received_command+0x7c>
		char elem = uart_int->receive_buffer[i];
 8002bca:	f81e 2003 	ldrb.w	r2, [lr, r3]
		if(elem == '\0' || elem == '\r' || elem == '\n') return -1; //error, commands ends with ')'
 8002bce:	2a0d      	cmp	r2, #13
 8002bd0:	d929      	bls.n	8002c26 <execute_received_command+0xee>
		else if(elem == ')'){
 8002bd2:	2a29      	cmp	r2, #41	; 0x29
 8002bd4:	d135      	bne.n	8002c42 <execute_received_command+0x10a>
			args[arg_counter][arg_len] = '\0';
 8002bd6:	230c      	movs	r3, #12
 8002bd8:	aa1c      	add	r2, sp, #112	; 0x70
 8002bda:	fb03 2304 	mla	r3, r3, r4, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	440b      	add	r3, r1
 8002be2:	f803 2c60 	strb.w	r2, [r3, #-96]
	if(!no_args) arg_counter++;
 8002be6:	b908      	cbnz	r0, 8002bec <execute_received_command+0xb4>
 8002be8:	3401      	adds	r4, #1
 8002bea:	b2e4      	uxtb	r4, r4
	if(strcmp(function_code, "help") == 0){
 8002bec:	4630      	mov	r0, r6
 8002bee:	4923      	ldr	r1, [pc, #140]	; (8002c7c <execute_received_command+0x144>)
 8002bf0:	f7fd faae 	bl	8000150 <strcmp>
 8002bf4:	b3a8      	cbz	r0, 8002c62 <execute_received_command+0x12a>
	for(int i = 0; i < uart_int->num_functions; i++){
 8002bf6:	f04f 0800 	mov.w	r8, #0
		if(strcmp(function_code, uart_int->functions_array[i].function_code) == 0){
 8002bfa:	f04f 0a18 	mov.w	sl, #24
	for(int i = 0; i < uart_int->num_functions; i++){
 8002bfe:	f895 928c 	ldrb.w	r9, [r5, #652]	; 0x28c
 8002c02:	45c1      	cmp	r9, r8
 8002c04:	ddd6      	ble.n	8002bb4 <execute_received_command+0x7c>
		if(strcmp(function_code, uart_int->functions_array[i].function_code) == 0){
 8002c06:	f8d5 7288 	ldr.w	r7, [r5, #648]	; 0x288
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	fb0a 7708 	mla	r7, sl, r8, r7
 8002c10:	1d39      	adds	r1, r7, #4
 8002c12:	f7fd fa9d 	bl	8000150 <strcmp>
 8002c16:	bb48      	cbnz	r0, 8002c6c <execute_received_command+0x134>
			if(uart_int->functions_array[i].num_args == arg_counter){
 8002c18:	7d3b      	ldrb	r3, [r7, #20]
 8002c1a:	42a3      	cmp	r3, r4
 8002c1c:	d1ca      	bne.n	8002bb4 <execute_received_command+0x7c>
				(*uart_int->functions_array[i].function_pointer)(args);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	a804      	add	r0, sp, #16
 8002c22:	4798      	blx	r3
 8002c24:	e020      	b.n	8002c68 <execute_received_command+0x130>
		if(elem == '\0' || elem == '\r' || elem == '\n') return -1; //error, commands ends with ')'
 8002c26:	fa49 f002 	asr.w	r0, r9, r2
 8002c2a:	07c0      	lsls	r0, r0, #31
 8002c2c:	d5c2      	bpl.n	8002bb4 <execute_received_command+0x7c>
			args[arg_counter][arg_len] = elem;
 8002c2e:	a81c      	add	r0, sp, #112	; 0x70
 8002c30:	fb0c 0004 	mla	r0, ip, r4, r0
 8002c34:	4408      	add	r0, r1
			arg_len ++;
 8002c36:	3101      	adds	r1, #1
			args[arg_counter][arg_len] = elem;
 8002c38:	f800 2c60 	strb.w	r2, [r0, #-96]
			arg_len ++;
 8002c3c:	b2c9      	uxtb	r1, r1
			no_args = 0;
 8002c3e:	2000      	movs	r0, #0
 8002c40:	e00a      	b.n	8002c58 <execute_received_command+0x120>
		else if(elem == ','){
 8002c42:	2a2c      	cmp	r2, #44	; 0x2c
 8002c44:	d10a      	bne.n	8002c5c <execute_received_command+0x124>
			args[arg_counter][arg_len] = '\0';
 8002c46:	aa1c      	add	r2, sp, #112	; 0x70
 8002c48:	fb0c 2204 	mla	r2, ip, r4, r2
 8002c4c:	440a      	add	r2, r1
			arg_len = 0;
 8002c4e:	2100      	movs	r1, #0
			arg_counter++;
 8002c50:	3401      	adds	r4, #1
			args[arg_counter][arg_len] = '\0';
 8002c52:	f802 8c60 	strb.w	r8, [r2, #-96]
			arg_counter++;
 8002c56:	b2e4      	uxtb	r4, r4
	for(int i = idx; i < uart_int->received_command_size; i++)
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e7a7      	b.n	8002bac <execute_received_command+0x74>
		else if(elem == ' '){
 8002c5c:	2a20      	cmp	r2, #32
 8002c5e:	d0fb      	beq.n	8002c58 <execute_received_command+0x120>
 8002c60:	e7e5      	b.n	8002c2e <execute_received_command+0xf6>
		help(uart_int);
 8002c62:	4628      	mov	r0, r5
 8002c64:	f7ff ff3a 	bl	8002adc <help>
				return 1;
 8002c68:	2001      	movs	r0, #1
 8002c6a:	e7a5      	b.n	8002bb8 <execute_received_command+0x80>
	for(int i = 0; i < uart_int->num_functions; i++){
 8002c6c:	f108 0801 	add.w	r8, r8, #1
 8002c70:	e7c7      	b.n	8002c02 <execute_received_command+0xca>
 8002c72:	bf00      	nop
 8002c74:	40000009 	.word	0x40000009
 8002c78:	ffffdbfe 	.word	0xffffdbfe
 8002c7c:	0800b2e1 	.word	0x0800b2e1

08002c80 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c80:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 19200;
 8002c82:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
  huart1.Instance = USART1;
 8002c86:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 19200;
 8002c88:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <MX_USART1_UART_Init+0x34>)
 8002c8a:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8e:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c90:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c92:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c96:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c9a:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c9c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9e:	f003 fa8f 	bl	80061c0 <HAL_UART_Init>
 8002ca2:	b118      	cbz	r0, 8002cac <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ca4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002ca8:	f7fe bd02 	b.w	80016b0 <Error_Handler>
}
 8002cac:	bd08      	pop	{r3, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000a10 	.word	0x20000a10
 8002cb4:	40013800 	.word	0x40013800

08002cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	4606      	mov	r6, r0
 8002cbc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	a802      	add	r0, sp, #8
 8002cc4:	f005 faea 	bl	800829c <memset>
  if(uartHandle->Instance==USART1)
 8002cc8:	6832      	ldr	r2, [r6, #0]
 8002cca:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <HAL_UART_MspInit+0xd0>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d158      	bne.n	8002d82 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cd0:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002cd4:	699a      	ldr	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cde:	619a      	str	r2, [r3, #24]
 8002ce0:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	482a      	ldr	r0, [pc, #168]	; (8002d8c <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ce4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002ce8:	9200      	str	r2, [sp, #0]
 8002cea:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cec:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cee:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf0:	f042 0204 	orr.w	r2, r2, #4
 8002cf4:	619a      	str	r2, [r3, #24]
 8002cf6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002cf8:	4c25      	ldr	r4, [pc, #148]	; (8002d90 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d02:	2302      	movs	r3, #2
 8002d04:	e9cd 1302 	strd	r1, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d08:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0e:	f000 fe5d 	bl	80039cc <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	481d      	ldr	r0, [pc, #116]	; (8002d8c <HAL_UART_MspInit+0xd4>)
 8002d18:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1a:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	f000 fe54 	bl	80039cc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_UART_MspInit+0xdc>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d26:	4620      	mov	r0, r4
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d28:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d2c:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d2e:	e9c4 5505 	strd	r5, r5, [r4, #20]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d32:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d36:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d38:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d3a:	f000 fcd7 	bl	80036ec <HAL_DMA_Init>
 8002d3e:	b108      	cbz	r0, 8002d44 <HAL_UART_MspInit+0x8c>
    {
      Error_Handler();
 8002d40:	f7fe fcb6 	bl	80016b0 <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d44:	2310      	movs	r3, #16
 8002d46:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d48:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002d4a:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002d4c:	4c13      	ldr	r4, [pc, #76]	; (8002d9c <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d4e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d56:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d58:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d5c:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d60:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d64:	f000 fcc2 	bl	80036ec <HAL_DMA_Init>
 8002d68:	b108      	cbz	r0, 8002d6e <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 8002d6a:	f7fe fca1 	bl	80016b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002d6e:	2025      	movs	r0, #37	; 0x25
 8002d70:	2200      	movs	r2, #0
 8002d72:	2103      	movs	r1, #3
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002d74:	63b4      	str	r4, [r6, #56]	; 0x38
 8002d76:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8002d78:	f000 fc66 	bl	8003648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d7c:	2025      	movs	r0, #37	; 0x25
 8002d7e:	f000 fc93 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d82:	b006      	add	sp, #24
 8002d84:	bd70      	pop	{r4, r5, r6, pc}
 8002d86:	bf00      	nop
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	40010800 	.word	0x40010800
 8002d90:	20000988 	.word	0x20000988
 8002d94:	40020058 	.word	0x40020058
 8002d98:	40020044 	.word	0x40020044
 8002d9c:	200009cc 	.word	0x200009cc

08002da0 <led>:
extern robot_typedef robot;




void led(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002da0:	b510      	push	{r4, lr}
	if(strcmp(args[0], "1") == 0){
 8002da2:	490e      	ldr	r1, [pc, #56]	; (8002ddc <led+0x3c>)
void led(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002da4:	4604      	mov	r4, r0
	if(strcmp(args[0], "1") == 0){
 8002da6:	f7fd f9d3 	bl	8000150 <strcmp>
 8002daa:	4602      	mov	r2, r0
 8002dac:	b920      	cbnz	r0, 8002db8 <led+0x18>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002dae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002db2:	480b      	ldr	r0, [pc, #44]	; (8002de0 <led+0x40>)
 8002db4:	f000 fee4 	bl	8003b80 <HAL_GPIO_WritePin>
	}
	if(strcmp(args[0], "0") == 0){
 8002db8:	4620      	mov	r0, r4
 8002dba:	490a      	ldr	r1, [pc, #40]	; (8002de4 <led+0x44>)
 8002dbc:	f7fd f9c8 	bl	8000150 <strcmp>
 8002dc0:	b950      	cbnz	r0, 8002dd8 <led+0x38>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
	}
}
 8002dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002dc6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd0:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8002dd4:	f000 bed4 	b.w	8003b80 <HAL_GPIO_WritePin>
}
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	bf00      	nop
 8002ddc:	0800b2e6 	.word	0x0800b2e6
 8002de0:	40011000 	.word	0x40011000
 8002de4:	0800b2a1 	.word	0x0800b2a1

08002de8 <comunication_test>:

void comunication_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002de8:	b500      	push	{lr}
 8002dea:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
	uint8_t buffer[BUFFER_SIZE_TX];
	uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "Command received!!!\n");
 8002dee:	4668      	mov	r0, sp
 8002df0:	4906      	ldr	r1, [pc, #24]	; (8002e0c <comunication_test+0x24>)
 8002df2:	f005 fae3 	bl	80083bc <strcpy>
	uart_send(&uart_interface, buffer, size, 1);
 8002df6:	2301      	movs	r3, #1
 8002df8:	2214      	movs	r2, #20
 8002dfa:	4669      	mov	r1, sp
 8002dfc:	4804      	ldr	r0, [pc, #16]	; (8002e10 <comunication_test+0x28>)
 8002dfe:	f7ff fe0e 	bl	8002a1e <uart_send>

}
 8002e02:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 8002e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e0a:	bf00      	nop
 8002e0c:	0800b2e8 	.word	0x0800b2e8
 8002e10:	2000036c 	.word	0x2000036c

08002e14 <motor_test>:


void motor_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002e14:	b570      	push	{r4, r5, r6, lr}
	if(robot.control_on) return;
 8002e16:	4e1c      	ldr	r6, [pc, #112]	; (8002e88 <motor_test+0x74>)
void motor_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002e18:	4605      	mov	r5, r0
	if(robot.control_on) return;
 8002e1a:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
void motor_test(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002e1e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
	if(robot.control_on) return;
 8002e22:	bb73      	cbnz	r3, 8002e82 <motor_test+0x6e>
	float speed = atof(args[1]);
 8002e24:	300c      	adds	r0, #12
 8002e26:	f003 fd10 	bl	800684a <atof>
 8002e2a:	f7fd fe57 	bl	8000adc <__aeabi_d2f>
	if(strcmp(args[0], "1") == 0){
 8002e2e:	4917      	ldr	r1, [pc, #92]	; (8002e8c <motor_test+0x78>)
	float speed = atof(args[1]);
 8002e30:	4604      	mov	r4, r0
	if(strcmp(args[0], "1") == 0){
 8002e32:	4628      	mov	r0, r5
 8002e34:	f7fd f98c 	bl	8000150 <strcmp>
 8002e38:	b938      	cbnz	r0, 8002e4a <motor_test+0x36>
		stepper_set_speed(robot.stepper1, speed);
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	6870      	ldr	r0, [r6, #4]
	else{
		uint8_t buffer[BUFFER_SIZE_TX];
		uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "Select motor '1' or '2' or both '0'\n");
		uart_send(&uart_interface, buffer, size, 1);
	}
}
 8002e3e:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8002e42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		stepper_set_speed(robot.stepper2, speed);
 8002e46:	f7ff ba37 	b.w	80022b8 <stepper_set_speed>
	else if(strcmp(args[0], "2") == 0){
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	4910      	ldr	r1, [pc, #64]	; (8002e90 <motor_test+0x7c>)
 8002e4e:	f7fd f97f 	bl	8000150 <strcmp>
 8002e52:	b910      	cbnz	r0, 8002e5a <motor_test+0x46>
		stepper_set_speed(robot.stepper2, speed);
 8002e54:	4621      	mov	r1, r4
 8002e56:	68b0      	ldr	r0, [r6, #8]
 8002e58:	e7f1      	b.n	8002e3e <motor_test+0x2a>
	else if(strcmp(args[0], "0") == 0){
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	490d      	ldr	r1, [pc, #52]	; (8002e94 <motor_test+0x80>)
 8002e5e:	f7fd f977 	bl	8000150 <strcmp>
 8002e62:	b920      	cbnz	r0, 8002e6e <motor_test+0x5a>
		stepper_set_speed(robot.stepper1, speed);
 8002e64:	4621      	mov	r1, r4
 8002e66:	6870      	ldr	r0, [r6, #4]
 8002e68:	f7ff fa26 	bl	80022b8 <stepper_set_speed>
 8002e6c:	e7f2      	b.n	8002e54 <motor_test+0x40>
		uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "Select motor '1' or '2' or both '0'\n");
 8002e6e:	490a      	ldr	r1, [pc, #40]	; (8002e98 <motor_test+0x84>)
 8002e70:	4668      	mov	r0, sp
 8002e72:	f005 faa3 	bl	80083bc <strcpy>
		uart_send(&uart_interface, buffer, size, 1);
 8002e76:	2301      	movs	r3, #1
 8002e78:	2224      	movs	r2, #36	; 0x24
 8002e7a:	4669      	mov	r1, sp
 8002e7c:	4807      	ldr	r0, [pc, #28]	; (8002e9c <motor_test+0x88>)
 8002e7e:	f7ff fdce 	bl	8002a1e <uart_send>
}
 8002e82:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8002e86:	bd70      	pop	{r4, r5, r6, pc}
 8002e88:	20000814 	.word	0x20000814
 8002e8c:	0800b2e6 	.word	0x0800b2e6
 8002e90:	0800b2fd 	.word	0x0800b2fd
 8002e94:	0800b2a1 	.word	0x0800b2a1
 8002e98:	0800b2ff 	.word	0x0800b2ff
 8002e9c:	2000036c 	.word	0x2000036c

08002ea0 <motor_enable>:


void motor_enable(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002ea0:	b570      	push	{r4, r5, r6, lr}
	if(robot.control_on) return;
 8002ea2:	4d15      	ldr	r5, [pc, #84]	; (8002ef8 <motor_enable+0x58>)
void motor_enable(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002ea4:	4606      	mov	r6, r0
	if(robot.control_on) return;
 8002ea6:	f895 4034 	ldrb.w	r4, [r5, #52]	; 0x34
void motor_enable(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002eaa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
	if(robot.control_on) return;
 8002eae:	bb04      	cbnz	r4, 8002ef2 <motor_enable+0x52>
	bool enable = 0;
	if(strcmp(args[0], "1") == 0) enable = 1;
 8002eb0:	4912      	ldr	r1, [pc, #72]	; (8002efc <motor_enable+0x5c>)
 8002eb2:	f7fd f94d 	bl	8000150 <strcmp>
 8002eb6:	b1d0      	cbz	r0, 8002eee <motor_enable+0x4e>
	else if (strcmp(args[0], "0") == 0) enable = 0;
 8002eb8:	4630      	mov	r0, r6
 8002eba:	4911      	ldr	r1, [pc, #68]	; (8002f00 <motor_enable+0x60>)
 8002ebc:	f7fd f948 	bl	8000150 <strcmp>
 8002ec0:	b148      	cbz	r0, 8002ed6 <motor_enable+0x36>
	else{
		uint8_t buffer[BUFFER_SIZE_TX];
		uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "enable must be '0' or '1'\n");
 8002ec2:	4910      	ldr	r1, [pc, #64]	; (8002f04 <motor_enable+0x64>)
 8002ec4:	4668      	mov	r0, sp
 8002ec6:	f005 fa79 	bl	80083bc <strcpy>
		uart_send(&uart_interface, buffer, size, 1);
 8002eca:	2301      	movs	r3, #1
 8002ecc:	221a      	movs	r2, #26
 8002ece:	4669      	mov	r1, sp
 8002ed0:	480d      	ldr	r0, [pc, #52]	; (8002f08 <motor_enable+0x68>)
 8002ed2:	f7ff fda4 	bl	8002a1e <uart_send>
	}
	stepper_enable(robot.stepper1, enable);
 8002ed6:	4621      	mov	r1, r4
 8002ed8:	6868      	ldr	r0, [r5, #4]
 8002eda:	f7ff fab2 	bl	8002442 <stepper_enable>
	stepper_enable(robot.stepper2, enable);
 8002ede:	4621      	mov	r1, r4
 8002ee0:	68a8      	ldr	r0, [r5, #8]

}
 8002ee2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8002ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	stepper_enable(robot.stepper2, enable);
 8002eea:	f7ff baaa 	b.w	8002442 <stepper_enable>
	if(strcmp(args[0], "1") == 0) enable = 1;
 8002eee:	2401      	movs	r4, #1
 8002ef0:	e7f1      	b.n	8002ed6 <motor_enable+0x36>
}
 8002ef2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
 8002ef8:	20000814 	.word	0x20000814
 8002efc:	0800b2e6 	.word	0x0800b2e6
 8002f00:	0800b2a1 	.word	0x0800b2a1
 8002f04:	0800b324 	.word	0x0800b324
 8002f08:	2000036c 	.word	0x2000036c

08002f0c <controler_start>:


void controler_start(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
	robot.control_on = 1;
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4b02      	ldr	r3, [pc, #8]	; (8002f18 <controler_start+0xc>)
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000814 	.word	0x20000814

08002f1c <controler_stop>:


void controler_stop(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
	robot.control_on = 0;
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <controler_stop+0xc>)
 8002f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000814 	.word	0x20000814

08002f2c <send_data>:


void send_data(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002f2c:	b510      	push	{r4, lr}
	if(strcmp(args[0], "0") == 0){
 8002f2e:	490a      	ldr	r1, [pc, #40]	; (8002f58 <send_data+0x2c>)
void send_data(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002f30:	4604      	mov	r4, r0
	if(strcmp(args[0], "0") == 0){
 8002f32:	f7fd f90d 	bl	8000150 <strcmp>
 8002f36:	b918      	cbnz	r0, 8002f40 <send_data+0x14>
		robot.send_data = 0;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <send_data+0x30>)
 8002f3a:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
	}
	else if(strcmp(args[0], "1") == 0){
		robot.send_data = 1;
	}

}
 8002f3e:	bd10      	pop	{r4, pc}
	else if(strcmp(args[0], "1") == 0){
 8002f40:	4620      	mov	r0, r4
 8002f42:	4907      	ldr	r1, [pc, #28]	; (8002f60 <send_data+0x34>)
 8002f44:	f7fd f904 	bl	8000150 <strcmp>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d1f8      	bne.n	8002f3e <send_data+0x12>
		robot.send_data = 1;
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <send_data+0x30>)
 8002f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8002f54:	e7f3      	b.n	8002f3e <send_data+0x12>
 8002f56:	bf00      	nop
 8002f58:	0800b2a1 	.word	0x0800b2a1
 8002f5c:	20000814 	.word	0x20000814
 8002f60:	0800b2e6 	.word	0x0800b2e6

08002f64 <battery_voltage>:


void battery_voltage(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002f64:	b510      	push	{r4, lr}
	uint8_t buffer[BUFFER_SIZE_TX];
	float b = robot.battery_voltage * 50 -530;
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <battery_voltage+0x48>)
void battery_voltage(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002f68:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
	float b = robot.battery_voltage * 50 -530;
 8002f6c:	695c      	ldr	r4, [r3, #20]
 8002f6e:	4910      	ldr	r1, [pc, #64]	; (8002fb0 <battery_voltage+0x4c>)
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7fd ff11 	bl	8000d98 <__aeabi_fmul>
 8002f76:	490f      	ldr	r1, [pc, #60]	; (8002fb4 <battery_voltage+0x50>)
 8002f78:	f7fd fe04 	bl	8000b84 <__aeabi_fsub>
	uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "Battery voltage: %.2f [V]  (%.1f%%)\r\n", robot.battery_voltage, b);
 8002f7c:	f7fd fa5e 	bl	800043c <__aeabi_f2d>
 8002f80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f84:	4620      	mov	r0, r4
 8002f86:	f7fd fa59 	bl	800043c <__aeabi_f2d>
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <battery_voltage+0x54>)
 8002f8c:	e9cd 0100 	strd	r0, r1, [sp]
 8002f90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f94:	a804      	add	r0, sp, #16
 8002f96:	f005 f875 	bl	8008084 <sniprintf>
	uart_send(&uart_interface, buffer, size, 1);
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	b282      	uxth	r2, r0
 8002f9e:	a904      	add	r1, sp, #16
 8002fa0:	4806      	ldr	r0, [pc, #24]	; (8002fbc <battery_voltage+0x58>)
 8002fa2:	f7ff fd3c 	bl	8002a1e <uart_send>
}
 8002fa6:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	20000814 	.word	0x20000814
 8002fb0:	42480000 	.word	0x42480000
 8002fb4:	44048000 	.word	0x44048000
 8002fb8:	0800b33f 	.word	0x0800b33f
 8002fbc:	2000036c 	.word	0x2000036c

08002fc0 <set_position>:


void set_position(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002fc0:	b510      	push	{r4, lr}

	if(strcmp(args[0], "0") == 0){
 8002fc2:	490d      	ldr	r1, [pc, #52]	; (8002ff8 <set_position+0x38>)
void set_position(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8002fc4:	4604      	mov	r4, r0
	if(strcmp(args[0], "0") == 0){
 8002fc6:	f7fd f8c3 	bl	8000150 <strcmp>
 8002fca:	b910      	cbnz	r0, 8002fd2 <set_position+0x12>
		robot.set_position = 0;
	}
	else{
		int32_t val = atoi(args[0]);
		if(val == 0) return;
		robot.set_position = val * CM_TO_STEP;
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <set_position+0x3c>)
 8002fce:	6218      	str	r0, [r3, #32]
	}
}
 8002fd0:	bd10      	pop	{r4, pc}
		int32_t val = atoi(args[0]);
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f003 fc3c 	bl	8006850 <atoi>
		if(val == 0) return;
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d0f9      	beq.n	8002fd0 <set_position+0x10>
		robot.set_position = val * CM_TO_STEP;
 8002fdc:	f7fd fa1c 	bl	8000418 <__aeabi_i2d>
 8002fe0:	a303      	add	r3, pc, #12	; (adr r3, 8002ff0 <set_position+0x30>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fa81 	bl	80004ec <__aeabi_dmul>
 8002fea:	f7fd fd2f 	bl	8000a4c <__aeabi_d2iz>
 8002fee:	e7ed      	b.n	8002fcc <set_position+0xc>
 8002ff0:	ed916873 	.word	0xed916873
 8002ff4:	4052c77c 	.word	0x4052c77c
 8002ff8:	0800b2a1 	.word	0x0800b2a1
 8002ffc:	20000814 	.word	0x20000814

08003000 <rotate_deg>:
//	spin_duration_ms = atoi(args[0]);
//	spin_value = atoi(args[1]);
//}


void rotate_deg(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003000:	b538      	push	{r3, r4, r5, lr}
	robot.set_angle += atoi(args[0]) % 360;
 8003002:	f003 fc25 	bl	8006850 <atoi>
 8003006:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800300a:	fb90 f2f3 	sdiv	r2, r0, r3
 800300e:	4c05      	ldr	r4, [pc, #20]	; (8003024 <rotate_deg+0x24>)
 8003010:	fb02 0013 	mls	r0, r2, r3, r0
 8003014:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003016:	f7fd fe6b 	bl	8000cf0 <__aeabi_i2f>
 800301a:	4629      	mov	r1, r5
 800301c:	f7fd fdb4 	bl	8000b88 <__addsf3>
 8003020:	6260      	str	r0, [r4, #36]	; 0x24
}
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	20000814 	.word	0x20000814

08003028 <get_angle>:



void get_angle(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003028:	b500      	push	{lr}
	uint8_t buffer[BUFFER_SIZE_TX];
	uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "angle: %.3f rad\r\n", robot.mpu->x_angle);
 800302a:	4b0c      	ldr	r3, [pc, #48]	; (800305c <get_angle+0x34>)
void get_angle(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 800302c:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
	uint16_t size = snprintf((char*)buffer, BUFFER_SIZE_TX, "angle: %.3f rad\r\n", robot.mpu->x_angle);
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003034:	f7fd fa02 	bl	800043c <__aeabi_f2d>
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <get_angle+0x38>)
 800303a:	e9cd 0100 	strd	r0, r1, [sp]
 800303e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003042:	a802      	add	r0, sp, #8
 8003044:	f005 f81e 	bl	8008084 <sniprintf>
	uart_send(&uart_interface, buffer, size, 1);
 8003048:	2301      	movs	r3, #1
 800304a:	b282      	uxth	r2, r0
 800304c:	a902      	add	r1, sp, #8
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <get_angle+0x3c>)
 8003050:	f7ff fce5 	bl	8002a1e <uart_send>
}
 8003054:	f50d 7d03 	add.w	sp, sp, #524	; 0x20c
 8003058:	f85d fb04 	ldr.w	pc, [sp], #4
 800305c:	20000814 	.word	0x20000814
 8003060:	0800b365 	.word	0x0800b365
 8003064:	2000036c 	.word	0x2000036c

08003068 <move>:


void move(char args[MAX_NUM_ARGS][ARG_MAX_LENGTH]){
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	robot.set_position += atoi(args[0])* CM_TO_STEP;
 800306a:	f003 fbf1 	bl	8006850 <atoi>
 800306e:	f7fd f9d3 	bl	8000418 <__aeabi_i2d>
 8003072:	a30b      	add	r3, pc, #44	; (adr r3, 80030a0 <move+0x38>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd fa38 	bl	80004ec <__aeabi_dmul>
 800307c:	4e0a      	ldr	r6, [pc, #40]	; (80030a8 <move+0x40>)
 800307e:	4604      	mov	r4, r0
 8003080:	6a37      	ldr	r7, [r6, #32]
 8003082:	460d      	mov	r5, r1
 8003084:	4638      	mov	r0, r7
 8003086:	f7fd f9c7 	bl	8000418 <__aeabi_i2d>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4620      	mov	r0, r4
 8003090:	4629      	mov	r1, r5
 8003092:	f7fd f875 	bl	8000180 <__adddf3>
 8003096:	f7fd fcd9 	bl	8000a4c <__aeabi_d2iz>
 800309a:	6230      	str	r0, [r6, #32]
}
 800309c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800309e:	bf00      	nop
 80030a0:	ed916873 	.word	0xed916873
 80030a4:	4052c77c 	.word	0x4052c77c
 80030a8:	20000814 	.word	0x20000814

080030ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030ac:	f7ff faf4 	bl	8002698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030b0:	480b      	ldr	r0, [pc, #44]	; (80030e0 <LoopFillZerobss+0xe>)
   ldr r1, =_edata
 80030b2:	490c      	ldr	r1, [pc, #48]	; (80030e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80030b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b8:	e002      	b.n	80030c0 <LoopCopyDataInit>

080030ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030be:	3304      	adds	r3, #4

080030c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c4:	d3f9      	bcc.n	80030ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c6:	4a09      	ldr	r2, [pc, #36]	; (80030ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80030c8:	4c09      	ldr	r4, [pc, #36]	; (80030f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030cc:	e001      	b.n	80030d2 <LoopFillZerobss>

080030ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d0:	3204      	adds	r2, #4

080030d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d4:	d3fb      	bcc.n	80030ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030d6:	f005 f94b 	bl	8008370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030da:	f7fe fb2d 	bl	8001738 <main>
  bx lr
 80030de:	4770      	bx	lr
  ldr r0, =_sdata
 80030e0:	20000000 	.word	0x20000000
   ldr r1, =_edata
 80030e4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80030e8:	0800b830 	.word	0x0800b830
  ldr r2, =_sbss
 80030ec:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80030f0:	20000ba8 	.word	0x20000ba8

080030f4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030f4:	e7fe      	b.n	80030f4 <CAN1_RX1_IRQHandler>
	...

080030f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030f8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_InitTick+0x3c>)
{
 80030fc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003104:	fbb3 f3f2 	udiv	r3, r3, r2
 8003108:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_InitTick+0x40>)
 800310a:	6810      	ldr	r0, [r2, #0]
 800310c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003110:	f000 fad8 	bl	80036c4 <HAL_SYSTICK_Config>
 8003114:	4604      	mov	r4, r0
 8003116:	b958      	cbnz	r0, 8003130 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003118:	2d0f      	cmp	r5, #15
 800311a:	d809      	bhi.n	8003130 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	4602      	mov	r2, r0
 800311e:	4629      	mov	r1, r5
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 fa90 	bl	8003648 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4620      	mov	r0, r4
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <HAL_InitTick+0x44>)
 800312c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800312e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003130:	2001      	movs	r0, #1
 8003132:	e7fc      	b.n	800312e <HAL_InitTick+0x36>
 8003134:	20000008 	.word	0x20000008
 8003138:	20000004 	.word	0x20000004
 800313c:	2000000c 	.word	0x2000000c

08003140 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_Init+0x20>)
{
 8003142:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003144:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003146:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314e:	f000 fa69 	bl	8003624 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003152:	2001      	movs	r0, #1
 8003154:	f7ff ffd0 	bl	80030f8 <HAL_InitTick>
  HAL_MspInit();
 8003158:	f7ff f9de 	bl	8002518 <HAL_MspInit>
}
 800315c:	2000      	movs	r0, #0
 800315e:	bd08      	pop	{r3, pc}
 8003160:	40022000 	.word	0x40022000

08003164 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003164:	4a03      	ldr	r2, [pc, #12]	; (8003174 <HAL_IncTick+0x10>)
 8003166:	4b04      	ldr	r3, [pc, #16]	; (8003178 <HAL_IncTick+0x14>)
 8003168:	6811      	ldr	r1, [r2, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	440b      	add	r3, r1
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20000a58 	.word	0x20000a58
 8003178:	20000008 	.word	0x20000008

0800317c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800317c:	4b01      	ldr	r3, [pc, #4]	; (8003184 <HAL_GetTick+0x8>)
 800317e:	6818      	ldr	r0, [r3, #0]
}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000a58 	.word	0x20000a58

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff fff6 	bl	800317c <HAL_GetTick>
 8003190:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003192:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003194:	bf1e      	ittt	ne
 8003196:	4b04      	ldrne	r3, [pc, #16]	; (80031a8 <HAL_Delay+0x20>)
 8003198:	781b      	ldrbne	r3, [r3, #0]
 800319a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800319c:	f7ff ffee 	bl	800317c <HAL_GetTick>
 80031a0:	1b43      	subs	r3, r0, r5
 80031a2:	42a3      	cmp	r3, r4
 80031a4:	d3fa      	bcc.n	800319c <HAL_Delay+0x14>
  {
  }
}
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	20000008 	.word	0x20000008

080031ac <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80031ac:	6803      	ldr	r3, [r0, #0]
 80031ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80031b0:	4770      	bx	lr

080031b2 <HAL_ADC_LevelOutOfWindowCallback>:
 80031b2:	4770      	bx	lr

080031b4 <HAL_ADC_IRQHandler>:
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
  uint32_t tmp_sr = hadc->Instance->SR;
 80031b4:	6803      	ldr	r3, [r0, #0]
{
 80031b6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80031b8:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80031ba:	685e      	ldr	r6, [r3, #4]
{
 80031bc:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80031be:	06b0      	lsls	r0, r6, #26
 80031c0:	d526      	bpl.n	8003210 <HAL_ADC_IRQHandler+0x5c>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80031c2:	07a9      	lsls	r1, r5, #30
 80031c4:	d524      	bpl.n	8003210 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031c8:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031ca:	bf5e      	ittt	pl
 80031cc:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80031ce:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80031d2:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80031da:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80031de:	d110      	bne.n	8003202 <HAL_ADC_IRQHandler+0x4e>
 80031e0:	7b22      	ldrb	r2, [r4, #12]
 80031e2:	b972      	cbnz	r2, 8003202 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	f022 0220 	bic.w	r2, r2, #32
 80031ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f2:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80031f6:	04d8      	lsls	r0, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f8:	bf5e      	ittt	pl
 80031fa:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80031fc:	f043 0301 	orrpl.w	r3, r3, #1
 8003200:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003202:	4620      	mov	r0, r4
 8003204:	f7fe fa14 	bl	8001630 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003208:	f06f 0212 	mvn.w	r2, #18
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003210:	0631      	lsls	r1, r6, #24
 8003212:	d530      	bpl.n	8003276 <HAL_ADC_IRQHandler+0xc2>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003214:	076a      	lsls	r2, r5, #29
 8003216:	d52e      	bpl.n	8003276 <HAL_ADC_IRQHandler+0xc2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800321a:	06db      	lsls	r3, r3, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800321c:	bf5e      	ittt	pl
 800321e:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8003220:	f443 5300 	orrpl.w	r3, r3, #8192	; 0x2000
 8003224:	62a3      	strpl	r3, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800322e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8003232:	d00a      	beq.n	800324a <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003234:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003236:	0550      	lsls	r0, r2, #21
 8003238:	d416      	bmi.n	8003268 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003240:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003244:	d110      	bne.n	8003268 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003246:	7b22      	ldrb	r2, [r4, #12]
 8003248:	b972      	cbnz	r2, 8003268 <HAL_ADC_IRQHandler+0xb4>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003250:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003258:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800325a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800325c:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325e:	bf5e      	ittt	pl
 8003260:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8003262:	f043 0301 	orrpl.w	r3, r3, #1
 8003266:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003268:	4620      	mov	r0, r4
 800326a:	f000 f9d9 	bl	8003620 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800326e:	f06f 020c 	mvn.w	r2, #12
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003276:	0672      	lsls	r2, r6, #25
 8003278:	d50c      	bpl.n	8003294 <HAL_ADC_IRQHandler+0xe0>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800327a:	07eb      	lsls	r3, r5, #31
 800327c:	d50a      	bpl.n	8003294 <HAL_ADC_IRQHandler+0xe0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800327e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003280:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003288:	f7ff ff93 	bl	80031b2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800328c:	f06f 0201 	mvn.w	r2, #1
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003294:	bd70      	pop	{r4, r5, r6, pc}
	...

08003298 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8003298:	2300      	movs	r3, #0
{ 
 800329a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800329c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800329e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80032a2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d06c      	beq.n	8003382 <HAL_ADC_ConfigChannel+0xea>
 80032a8:	2301      	movs	r3, #1
 80032aa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ae:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032b0:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 80032b2:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032b4:	6808      	ldr	r0, [r1, #0]
 80032b6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 80032ba:	d822      	bhi.n	8003302 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032bc:	261f      	movs	r6, #31
 80032be:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80032c0:	3b05      	subs	r3, #5
 80032c2:	409e      	lsls	r6, r3
 80032c4:	ea25 0506 	bic.w	r5, r5, r6
 80032c8:	fa00 f303 	lsl.w	r3, r0, r3
 80032cc:	432b      	orrs	r3, r5
 80032ce:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032d0:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032d2:	688b      	ldr	r3, [r1, #8]
 80032d4:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80032d8:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032dc:	d929      	bls.n	8003332 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032de:	68d6      	ldr	r6, [r2, #12]
 80032e0:	3d1e      	subs	r5, #30
 80032e2:	40a9      	lsls	r1, r5
 80032e4:	ea26 0101 	bic.w	r1, r6, r1
 80032e8:	40ab      	lsls	r3, r5
 80032ea:	430b      	orrs	r3, r1
 80032ec:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80032ee:	f1a0 0310 	sub.w	r3, r0, #16
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d925      	bls.n	8003342 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f6:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f8:	2300      	movs	r3, #0
 80032fa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80032fe:	b002      	add	sp, #8
 8003300:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8003302:	2d0c      	cmp	r5, #12
 8003304:	f04f 051f 	mov.w	r5, #31
 8003308:	d809      	bhi.n	800331e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800330a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800330c:	3b23      	subs	r3, #35	; 0x23
 800330e:	409d      	lsls	r5, r3
 8003310:	ea26 0505 	bic.w	r5, r6, r5
 8003314:	fa00 f303 	lsl.w	r3, r0, r3
 8003318:	432b      	orrs	r3, r5
 800331a:	6313      	str	r3, [r2, #48]	; 0x30
 800331c:	e7d8      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800331e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8003320:	3b41      	subs	r3, #65	; 0x41
 8003322:	409d      	lsls	r5, r3
 8003324:	ea26 0505 	bic.w	r5, r6, r5
 8003328:	fa00 f303 	lsl.w	r3, r0, r3
 800332c:	432b      	orrs	r3, r5
 800332e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003330:	e7ce      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003332:	6910      	ldr	r0, [r2, #16]
 8003334:	40a9      	lsls	r1, r5
 8003336:	ea20 0101 	bic.w	r1, r0, r1
 800333a:	40ab      	lsls	r3, r5
 800333c:	430b      	orrs	r3, r1
 800333e:	6113      	str	r3, [r2, #16]
 8003340:	e7d9      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_ADC_ConfigChannel+0xf0>)
 8003344:	429a      	cmp	r2, r3
 8003346:	d116      	bne.n	8003376 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003348:	6893      	ldr	r3, [r2, #8]
 800334a:	021b      	lsls	r3, r3, #8
 800334c:	d4d3      	bmi.n	80032f6 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800334e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003350:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003352:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003356:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003358:	d1cd      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_ADC_ConfigChannel+0xf4>)
 800335c:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HAL_ADC_ConfigChannel+0xf8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	fbb3 f3f2 	udiv	r3, r3, r2
 8003364:	220a      	movs	r2, #10
 8003366:	4353      	muls	r3, r2
            wait_loop_index--;
 8003368:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800336a:	9b01      	ldr	r3, [sp, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0c2      	beq.n	80032f6 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	3b01      	subs	r3, #1
 8003374:	e7f8      	b.n	8003368 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003378:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337a:	f043 0320 	orr.w	r3, r3, #32
 800337e:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8003380:	e7ba      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8003382:	2002      	movs	r0, #2
 8003384:	e7bb      	b.n	80032fe <HAL_ADC_ConfigChannel+0x66>
 8003386:	bf00      	nop
 8003388:	40012400 	.word	0x40012400
 800338c:	20000004 	.word	0x20000004
 8003390:	000f4240 	.word	0x000f4240

08003394 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8003394:	2300      	movs	r3, #0
{
 8003396:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8003398:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800339a:	6803      	ldr	r3, [r0, #0]
{
 800339c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	07d2      	lsls	r2, r2, #31
 80033a2:	d502      	bpl.n	80033aa <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033a4:	2000      	movs	r0, #0
}
 80033a6:	b003      	add	sp, #12
 80033a8:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <ADC_Enable+0x70>)
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <ADC_Enable+0x74>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80033bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80033be:	9b01      	ldr	r3, [sp, #4]
 80033c0:	b9e3      	cbnz	r3, 80033fc <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80033c2:	f7ff fedb 	bl	800317c <HAL_GetTick>
 80033c6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033c8:	6823      	ldr	r3, [r4, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	07db      	lsls	r3, r3, #31
 80033ce:	d4e9      	bmi.n	80033a4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d0:	f7ff fed4 	bl	800317c <HAL_GetTick>
 80033d4:	1b40      	subs	r0, r0, r5
 80033d6:	2802      	cmp	r0, #2
 80033d8:	d9f6      	bls.n	80033c8 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80033da:	6823      	ldr	r3, [r4, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f013 0301 	ands.w	r3, r3, #1
 80033e2:	d1f1      	bne.n	80033c8 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          return HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e8:	f042 0210 	orr.w	r2, r2, #16
 80033ec:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 80033f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80033fa:	e7d4      	b.n	80033a6 <ADC_Enable+0x12>
      wait_loop_index--;
 80033fc:	9b01      	ldr	r3, [sp, #4]
 80033fe:	3b01      	subs	r3, #1
 8003400:	e7dc      	b.n	80033bc <ADC_Enable+0x28>
 8003402:	bf00      	nop
 8003404:	20000004 	.word	0x20000004
 8003408:	000f4240 	.word	0x000f4240

0800340c <HAL_ADC_Start_IT>:
{
 800340c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800340e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8003412:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003414:	2b01      	cmp	r3, #1
 8003416:	d058      	beq.n	80034ca <HAL_ADC_Start_IT+0xbe>
 8003418:	2301      	movs	r3, #1
 800341a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800341e:	f7ff ffb9 	bl	8003394 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8003422:	2800      	cmp	r0, #0
 8003424:	d14d      	bne.n	80034c2 <HAL_ADC_Start_IT+0xb6>
    ADC_STATE_CLR_SET(hadc->State,
 8003426:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003428:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <HAL_ADC_Start_IT+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 800342a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003436:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	4293      	cmp	r3, r2
 800343c:	d104      	bne.n	8003448 <HAL_ADC_Start_IT+0x3c>
 800343e:	4925      	ldr	r1, [pc, #148]	; (80034d4 <HAL_ADC_Start_IT+0xc8>)
 8003440:	684a      	ldr	r2, [r1, #4]
 8003442:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8003446:	d132      	bne.n	80034ae <HAL_ADC_Start_IT+0xa2>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003448:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800344a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800344e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003450:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003452:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003454:	bf41      	itttt	mi
 8003456:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8003458:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800345c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8003460:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003462:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003468:	bf1c      	itt	ne
 800346a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800346c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8003470:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8003472:	2200      	movs	r2, #0
 8003474:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003478:	f06f 0202 	mvn.w	r2, #2
 800347c:	601a      	str	r2, [r3, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	f042 0220 	orr.w	r2, r2, #32
 8003484:	605a      	str	r2, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800348c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8003490:	d113      	bne.n	80034ba <HAL_ADC_Start_IT+0xae>
 8003492:	4a0f      	ldr	r2, [pc, #60]	; (80034d0 <HAL_ADC_Start_IT+0xc4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_Start_IT+0x98>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003498:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800349c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800349e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80034a2:	d10a      	bne.n	80034ba <HAL_ADC_Start_IT+0xae>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80034b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034b4:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80034b6:	684a      	ldr	r2, [r1, #4]
 80034b8:	e7cb      	b.n	8003452 <HAL_ADC_Start_IT+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80034c0:	e7f3      	b.n	80034aa <HAL_ADC_Start_IT+0x9e>
    __HAL_UNLOCK(hadc);
 80034c2:	2300      	movs	r3, #0
 80034c4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80034c8:	e7f0      	b.n	80034ac <HAL_ADC_Start_IT+0xa0>
  __HAL_LOCK(hadc);
 80034ca:	2002      	movs	r0, #2
 80034cc:	e7ee      	b.n	80034ac <HAL_ADC_Start_IT+0xa0>
 80034ce:	bf00      	nop
 80034d0:	40012800 	.word	0x40012800
 80034d4:	40012400 	.word	0x40012400

080034d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034d8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034da:	6803      	ldr	r3, [r0, #0]
{
 80034dc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	07d1      	lsls	r1, r2, #31
 80034e2:	d401      	bmi.n	80034e8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034e4:	2000      	movs	r0, #0
}
 80034e6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80034f0:	f7ff fe44 	bl	800317c <HAL_GetTick>
 80034f4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	07db      	lsls	r3, r3, #31
 80034fc:	d5f2      	bpl.n	80034e4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034fe:	f7ff fe3d 	bl	800317c <HAL_GetTick>
 8003502:	1b40      	subs	r0, r0, r5
 8003504:	2802      	cmp	r0, #2
 8003506:	d9f6      	bls.n	80034f6 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003508:	6823      	ldr	r3, [r4, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	07da      	lsls	r2, r3, #31
 800350e:	d5f2      	bpl.n	80034f6 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003510:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8003512:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003514:	f043 0310 	orr.w	r3, r3, #16
 8003518:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8003522:	e7e0      	b.n	80034e6 <ADC_ConversionStop_Disable+0xe>

08003524 <HAL_ADC_Init>:
{
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8003526:	4604      	mov	r4, r0
 8003528:	2800      	cmp	r0, #0
 800352a:	d06d      	beq.n	8003608 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800352c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800352e:	b923      	cbnz	r3, 800353a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8003530:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8003532:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8003536:	f7fd fe7b 	bl	8001230 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800353a:	4620      	mov	r0, r4
 800353c:	f7ff ffcc 	bl	80034d8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003540:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003542:	f013 0310 	ands.w	r3, r3, #16
 8003546:	d161      	bne.n	800360c <HAL_ADC_Init+0xe8>
 8003548:	2800      	cmp	r0, #0
 800354a:	d15f      	bne.n	800360c <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 800354c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800354e:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8003550:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003554:	f022 0202 	bic.w	r2, r2, #2
 8003558:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800355c:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800355e:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8003560:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003562:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003564:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003566:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800356a:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800356e:	d036      	beq.n	80035de <HAL_ADC_Init+0xba>
 8003570:	1e77      	subs	r7, r6, #1
 8003572:	427d      	negs	r5, r7
 8003574:	417d      	adcs	r5, r7
 8003576:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003578:	7d27      	ldrb	r7, [r4, #20]
 800357a:	2f01      	cmp	r7, #1
 800357c:	d106      	bne.n	800358c <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800357e:	bb82      	cbnz	r2, 80035e2 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003580:	69a2      	ldr	r2, [r4, #24]
 8003582:	3a01      	subs	r2, #1
 8003584:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8003588:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800358c:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800358e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8003592:	6857      	ldr	r7, [r2, #4]
 8003594:	f427 4769 	bic.w	r7, r7, #59648	; 0xe900
 8003598:	ea45 0507 	orr.w	r5, r5, r7
 800359c:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800359e:	6897      	ldr	r7, [r2, #8]
 80035a0:	4d1d      	ldr	r5, [pc, #116]	; (8003618 <HAL_ADC_Init+0xf4>)
 80035a2:	ea05 0507 	and.w	r5, r5, r7
 80035a6:	ea45 0501 	orr.w	r5, r5, r1
 80035aa:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80035ac:	d001      	beq.n	80035b2 <HAL_ADC_Init+0x8e>
 80035ae:	2e01      	cmp	r6, #1
 80035b0:	d102      	bne.n	80035b8 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80035b8:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80035ba:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80035be:	432b      	orrs	r3, r5
 80035c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_ADC_Init+0xf8>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	4299      	cmp	r1, r3
 80035ca:	d113      	bne.n	80035f4 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 80035cc:	2300      	movs	r3, #0
 80035ce:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80035d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80035dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80035de:	4635      	mov	r5, r6
 80035e0:	e7ca      	b.n	8003578 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80035e4:	f042 0220 	orr.w	r2, r2, #32
 80035e8:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80035ec:	f042 0201 	orr.w	r2, r2, #1
 80035f0:	62e2      	str	r2, [r4, #44]	; 0x2c
 80035f2:	e7cb      	b.n	800358c <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 80035f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80035f6:	f023 0312 	bic.w	r3, r3, #18
 80035fa:	f043 0310 	orr.w	r3, r3, #16
 80035fe:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003600:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8003608:	2001      	movs	r0, #1
 800360a:	e7e7      	b.n	80035dc <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8003614:	e7f8      	b.n	8003608 <HAL_ADC_Init+0xe4>
 8003616:	bf00      	nop
 8003618:	ffe1f7fd 	.word	0xffe1f7fd
 800361c:	ff1f0efe 	.word	0xff1f0efe

08003620 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003620:	4770      	bx	lr
	...

08003624 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003624:	4907      	ldr	r1, [pc, #28]	; (8003644 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003626:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003628:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800362a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003632:	0412      	lsls	r2, r2, #16
 8003634:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800363c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003640:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800364a:	b530      	push	{r4, r5, lr}
 800364c:	68dc      	ldr	r4, [r3, #12]
 800364e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003652:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	2b04      	cmp	r3, #4
 800365a:	bf28      	it	cs
 800365c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003664:	bf94      	ite	ls
 8003666:	2400      	movls	r4, #0
 8003668:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800366a:	fa05 f303 	lsl.w	r3, r5, r3
 800366e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003672:	40a5      	lsls	r5, r4
 8003674:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800367a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	bfac      	ite	ge
 8003682:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003686:	4a07      	ldrlt	r2, [pc, #28]	; (80036a4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003688:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800368c:	b2db      	uxtb	r3, r3
 800368e:	bfab      	itete	ge
 8003690:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003694:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800369e:	bd30      	pop	{r4, r5, pc}
 80036a0:	e000ed00 	.word	0xe000ed00
 80036a4:	e000ed14 	.word	0xe000ed14

080036a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80036a8:	2800      	cmp	r0, #0
 80036aa:	db07      	blt.n	80036bc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ac:	2301      	movs	r3, #1
 80036ae:	0941      	lsrs	r1, r0, #5
 80036b0:	4a03      	ldr	r2, [pc, #12]	; (80036c0 <HAL_NVIC_EnableIRQ+0x18>)
 80036b2:	f000 001f 	and.w	r0, r0, #31
 80036b6:	4083      	lsls	r3, r0
 80036b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	e000e100 	.word	0xe000e100

080036c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c4:	3801      	subs	r0, #1
 80036c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80036ca:	d20b      	bcs.n	80036e4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d0:	21f0      	movs	r1, #240	; 0xf0
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036d4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036da:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036dc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036de:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80036e4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036ec:	4603      	mov	r3, r0
{
 80036ee:	b510      	push	{r4, lr}
  if(hdma == NULL)
 80036f0:	b340      	cbz	r0, 8003744 <HAL_DMA_Init+0x58>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036f2:	2114      	movs	r1, #20
 80036f4:	6800      	ldr	r0, [r0, #0]
 80036f6:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_DMA_Init+0x5c>)
 80036f8:	4402      	add	r2, r0
 80036fa:	fbb2 f2f1 	udiv	r2, r2, r1
 80036fe:	0092      	lsls	r2, r2, #2
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <HAL_DMA_Init+0x60>)
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800370c:	e9d3 2401 	ldrd	r2, r4, [r3, #4]
 8003710:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003712:	68dc      	ldr	r4, [r3, #12]
  tmp = hdma->Instance->CCR;
 8003714:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	4322      	orrs	r2, r4
 8003718:	691c      	ldr	r4, [r3, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800371a:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003720:	695c      	ldr	r4, [r3, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003722:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003726:	4322      	orrs	r2, r4
 8003728:	699c      	ldr	r4, [r3, #24]
 800372a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800372c:	69dc      	ldr	r4, [r3, #28]
 800372e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8003730:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003732:	6002      	str	r2, [r0, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003734:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003736:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003738:	6398      	str	r0, [r3, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800373a:	f883 0020 	strb.w	r0, [r3, #32]
  hdma->State = HAL_DMA_STATE_READY;
 800373e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
}
 8003742:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003744:	2001      	movs	r0, #1
 8003746:	e7fc      	b.n	8003742 <HAL_DMA_Init+0x56>
 8003748:	bffdfff8 	.word	0xbffdfff8
 800374c:	40020000 	.word	0x40020000

08003750 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003754:	f890 0020 	ldrb.w	r0, [r0, #32]
 8003758:	2801      	cmp	r0, #1
 800375a:	d036      	beq.n	80037ca <HAL_DMA_Start_IT+0x7a>
 800375c:	2001      	movs	r0, #1
 800375e:	f885 0020 	strb.w	r0, [r5, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003762:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
 8003766:	2400      	movs	r4, #0
 8003768:	2801      	cmp	r0, #1
 800376a:	b2c6      	uxtb	r6, r0
 800376c:	f04f 0002 	mov.w	r0, #2
 8003770:	d128      	bne.n	80037c4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003772:	f885 0021 	strb.w	r0, [r5, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003776:	63ac      	str	r4, [r5, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003778:	682c      	ldr	r4, [r5, #0]
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	f020 0001 	bic.w	r0, r0, #1
 8003780:	6020      	str	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003782:	e9d5 700f 	ldrd	r7, r0, [r5, #60]	; 0x3c
 8003786:	fa06 f000 	lsl.w	r0, r6, r0
 800378a:	6078      	str	r0, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800378c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800378e:	686b      	ldr	r3, [r5, #4]
 8003790:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8003792:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003794:	bf0b      	itete	eq
 8003796:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003798:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800379a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800379c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800379e:	b14b      	cbz	r3, 80037b4 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037a8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	f043 0301 	orr.w	r3, r3, #1
 80037b0:	6023      	str	r3, [r4, #0]
}
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	f023 0304 	bic.w	r3, r3, #4
 80037ba:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	f043 030a 	orr.w	r3, r3, #10
 80037c2:	e7f0      	b.n	80037a6 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma); 
 80037c4:	f885 4020 	strb.w	r4, [r5, #32]
    status = HAL_BUSY;
 80037c8:	e7f3      	b.n	80037b2 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 80037ca:	2002      	movs	r0, #2
 80037cc:	e7f1      	b.n	80037b2 <HAL_DMA_Start_IT+0x62>

080037ce <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037ce:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80037d2:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037d4:	2a02      	cmp	r2, #2
 80037d6:	d006      	beq.n	80037e6 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d8:	2204      	movs	r2, #4
 80037da:	6382      	str	r2, [r0, #56]	; 0x38
    return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]
}
 80037e4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e6:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037e8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ea:	6811      	ldr	r1, [r2, #0]
 80037ec:	f021 010e 	bic.w	r1, r1, #14
 80037f0:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80037f2:	6811      	ldr	r1, [r2, #0]
 80037f4:	f021 0101 	bic.w	r1, r1, #1
 80037f8:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037fa:	2101      	movs	r1, #1
 80037fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	6042      	str	r2, [r0, #4]
  return status; 
 8003804:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003806:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
  return status; 
 800380a:	e7e8      	b.n	80037de <HAL_DMA_Abort+0x10>

0800380c <HAL_DMA_Abort_IT>:
{  
 800380c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800380e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003812:	2b02      	cmp	r3, #2
 8003814:	d003      	beq.n	800381e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003816:	2304      	movs	r3, #4
 8003818:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800381a:	2001      	movs	r0, #1
}
 800381c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800381e:	6803      	ldr	r3, [r0, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	f022 020e 	bic.w	r2, r2, #14
 8003826:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003830:	4a18      	ldr	r2, [pc, #96]	; (8003894 <HAL_DMA_Abort_IT+0x88>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01f      	beq.n	8003876 <HAL_DMA_Abort_IT+0x6a>
 8003836:	3214      	adds	r2, #20
 8003838:	4293      	cmp	r3, r2
 800383a:	d01e      	beq.n	800387a <HAL_DMA_Abort_IT+0x6e>
 800383c:	3214      	adds	r2, #20
 800383e:	4293      	cmp	r3, r2
 8003840:	d01d      	beq.n	800387e <HAL_DMA_Abort_IT+0x72>
 8003842:	3214      	adds	r2, #20
 8003844:	4293      	cmp	r3, r2
 8003846:	d01d      	beq.n	8003884 <HAL_DMA_Abort_IT+0x78>
 8003848:	3214      	adds	r2, #20
 800384a:	4293      	cmp	r3, r2
 800384c:	d01d      	beq.n	800388a <HAL_DMA_Abort_IT+0x7e>
 800384e:	3214      	adds	r2, #20
 8003850:	4293      	cmp	r3, r2
 8003852:	bf0c      	ite	eq
 8003854:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003858:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800385c:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800385e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003860:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003862:	2301      	movs	r3, #1
 8003864:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8003868:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800386a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800386e:	b17b      	cbz	r3, 8003890 <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 8003870:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	4620      	mov	r0, r4
 8003874:	e7d2      	b.n	800381c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003876:	2301      	movs	r3, #1
 8003878:	e7f0      	b.n	800385c <HAL_DMA_Abort_IT+0x50>
 800387a:	2310      	movs	r3, #16
 800387c:	e7ee      	b.n	800385c <HAL_DMA_Abort_IT+0x50>
 800387e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003882:	e7eb      	b.n	800385c <HAL_DMA_Abort_IT+0x50>
 8003884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003888:	e7e8      	b.n	800385c <HAL_DMA_Abort_IT+0x50>
 800388a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388e:	e7e5      	b.n	800385c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	4618      	mov	r0, r3
 8003892:	e7c3      	b.n	800381c <HAL_DMA_Abort_IT+0x10>
 8003894:	40020008 	.word	0x40020008
 8003898:	40020000 	.word	0x40020000

0800389c <HAL_DMA_IRQHandler>:
{
 800389c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800389e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038a0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80038a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038a4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80038a6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80038a8:	4095      	lsls	r5, r2
 80038aa:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80038ac:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80038ae:	d032      	beq.n	8003916 <HAL_DMA_IRQHandler+0x7a>
 80038b0:	074d      	lsls	r5, r1, #29
 80038b2:	d530      	bpl.n	8003916 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b8:	bf5e      	ittt	pl
 80038ba:	681a      	ldrpl	r2, [r3, #0]
 80038bc:	f022 0204 	bicpl.w	r2, r2, #4
 80038c0:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038c2:	4a3e      	ldr	r2, [pc, #248]	; (80039bc <HAL_DMA_IRQHandler+0x120>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d019      	beq.n	80038fc <HAL_DMA_IRQHandler+0x60>
 80038c8:	3214      	adds	r2, #20
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d018      	beq.n	8003900 <HAL_DMA_IRQHandler+0x64>
 80038ce:	3214      	adds	r2, #20
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d017      	beq.n	8003904 <HAL_DMA_IRQHandler+0x68>
 80038d4:	3214      	adds	r2, #20
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d017      	beq.n	800390a <HAL_DMA_IRQHandler+0x6e>
 80038da:	3214      	adds	r2, #20
 80038dc:	4293      	cmp	r3, r2
 80038de:	d017      	beq.n	8003910 <HAL_DMA_IRQHandler+0x74>
 80038e0:	3214      	adds	r2, #20
 80038e2:	4293      	cmp	r3, r2
 80038e4:	bf0c      	ite	eq
 80038e6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80038ea:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80038ee:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_DMA_IRQHandler+0x124>)
 80038f0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80038f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d05e      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x11a>
}
 80038f8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80038fa:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80038fc:	2304      	movs	r3, #4
 80038fe:	e7f6      	b.n	80038ee <HAL_DMA_IRQHandler+0x52>
 8003900:	2340      	movs	r3, #64	; 0x40
 8003902:	e7f4      	b.n	80038ee <HAL_DMA_IRQHandler+0x52>
 8003904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003908:	e7f1      	b.n	80038ee <HAL_DMA_IRQHandler+0x52>
 800390a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800390e:	e7ee      	b.n	80038ee <HAL_DMA_IRQHandler+0x52>
 8003910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003914:	e7eb      	b.n	80038ee <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003916:	2502      	movs	r5, #2
 8003918:	4095      	lsls	r5, r2
 800391a:	4225      	tst	r5, r4
 800391c:	d035      	beq.n	800398a <HAL_DMA_IRQHandler+0xee>
 800391e:	078d      	lsls	r5, r1, #30
 8003920:	d533      	bpl.n	800398a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	0694      	lsls	r4, r2, #26
 8003926:	d406      	bmi.n	8003936 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	f022 020a 	bic.w	r2, r2, #10
 800392e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003930:	2201      	movs	r2, #1
 8003932:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003936:	4a21      	ldr	r2, [pc, #132]	; (80039bc <HAL_DMA_IRQHandler+0x120>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d019      	beq.n	8003970 <HAL_DMA_IRQHandler+0xd4>
 800393c:	3214      	adds	r2, #20
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_IRQHandler+0xd8>
 8003942:	3214      	adds	r2, #20
 8003944:	4293      	cmp	r3, r2
 8003946:	d017      	beq.n	8003978 <HAL_DMA_IRQHandler+0xdc>
 8003948:	3214      	adds	r2, #20
 800394a:	4293      	cmp	r3, r2
 800394c:	d017      	beq.n	800397e <HAL_DMA_IRQHandler+0xe2>
 800394e:	3214      	adds	r2, #20
 8003950:	4293      	cmp	r3, r2
 8003952:	d017      	beq.n	8003984 <HAL_DMA_IRQHandler+0xe8>
 8003954:	3214      	adds	r2, #20
 8003956:	4293      	cmp	r3, r2
 8003958:	bf0c      	ite	eq
 800395a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800395e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8003962:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <HAL_DMA_IRQHandler+0x124>)
 8003964:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003966:	2300      	movs	r3, #0
 8003968:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800396c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800396e:	e7c1      	b.n	80038f4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003970:	2302      	movs	r3, #2
 8003972:	e7f6      	b.n	8003962 <HAL_DMA_IRQHandler+0xc6>
 8003974:	2320      	movs	r3, #32
 8003976:	e7f4      	b.n	8003962 <HAL_DMA_IRQHandler+0xc6>
 8003978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800397c:	e7f1      	b.n	8003962 <HAL_DMA_IRQHandler+0xc6>
 800397e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003982:	e7ee      	b.n	8003962 <HAL_DMA_IRQHandler+0xc6>
 8003984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003988:	e7eb      	b.n	8003962 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800398a:	2508      	movs	r5, #8
 800398c:	4095      	lsls	r5, r2
 800398e:	4225      	tst	r5, r4
 8003990:	d011      	beq.n	80039b6 <HAL_DMA_IRQHandler+0x11a>
 8003992:	0709      	lsls	r1, r1, #28
 8003994:	d50f      	bpl.n	80039b6 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003996:	6819      	ldr	r1, [r3, #0]
 8003998:	f021 010e 	bic.w	r1, r1, #14
 800399c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800399e:	2301      	movs	r3, #1
 80039a0:	fa03 f202 	lsl.w	r2, r3, r2
 80039a4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039a6:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80039a8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80039ac:	2300      	movs	r3, #0
 80039ae:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80039b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80039b4:	e79e      	b.n	80038f4 <HAL_DMA_IRQHandler+0x58>
}
 80039b6:	bc70      	pop	{r4, r5, r6}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40020008 	.word	0x40020008
 80039c0:	40020000 	.word	0x40020000

080039c4 <HAL_DMA_GetState>:
  return hdma->State;
 80039c4:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
}
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039d0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80039d2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039d4:	4f64      	ldr	r7, [pc, #400]	; (8003b68 <HAL_GPIO_Init+0x19c>)
 80039d6:	4b65      	ldr	r3, [pc, #404]	; (8003b6c <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 80039d8:	f8df c194 	ldr.w	ip, [pc, #404]	; 8003b70 <HAL_GPIO_Init+0x1a4>
 80039dc:	f8df e194 	ldr.w	lr, [pc, #404]	; 8003b74 <HAL_GPIO_Init+0x1a8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039e0:	680d      	ldr	r5, [r1, #0]
 80039e2:	fa35 f406 	lsrs.w	r4, r5, r6
 80039e6:	d102      	bne.n	80039ee <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80039e8:	b003      	add	sp, #12
 80039ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80039ee:	f04f 0801 	mov.w	r8, #1
 80039f2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039f6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80039fa:	ea38 0505 	bics.w	r5, r8, r5
 80039fe:	d17a      	bne.n	8003af6 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 8003a00:	684d      	ldr	r5, [r1, #4]
 8003a02:	2d03      	cmp	r5, #3
 8003a04:	d807      	bhi.n	8003a16 <HAL_GPIO_Init+0x4a>
 8003a06:	3d01      	subs	r5, #1
 8003a08:	2d02      	cmp	r5, #2
 8003a0a:	f200 8087 	bhi.w	8003b1c <HAL_GPIO_Init+0x150>
 8003a0e:	e8df f005 	tbb	[pc, r5]
 8003a12:	9a95      	.short	0x9a95
 8003a14:	a0          	.byte	0xa0
 8003a15:	00          	.byte	0x00
 8003a16:	2d12      	cmp	r5, #18
 8003a18:	f000 8098 	beq.w	8003b4c <HAL_GPIO_Init+0x180>
 8003a1c:	d86d      	bhi.n	8003afa <HAL_GPIO_Init+0x12e>
 8003a1e:	2d11      	cmp	r5, #17
 8003a20:	f000 808e 	beq.w	8003b40 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a24:	2cff      	cmp	r4, #255	; 0xff
 8003a26:	bf98      	it	ls
 8003a28:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a2a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a2e:	bf88      	it	hi
 8003a30:	f100 0a04 	addhi.w	sl, r0, #4
 8003a34:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a38:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a3c:	bf88      	it	hi
 8003a3e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a40:	fa09 fb05 	lsl.w	fp, r9, r5
 8003a44:	ea28 080b 	bic.w	r8, r8, fp
 8003a48:	fa02 f505 	lsl.w	r5, r2, r5
 8003a4c:	ea48 0505 	orr.w	r5, r8, r5
 8003a50:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a54:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003a58:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003a5c:	d04b      	beq.n	8003af6 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a5e:	69bd      	ldr	r5, [r7, #24]
 8003a60:	f026 0803 	bic.w	r8, r6, #3
 8003a64:	f045 0501 	orr.w	r5, r5, #1
 8003a68:	61bd      	str	r5, [r7, #24]
 8003a6a:	69bd      	ldr	r5, [r7, #24]
 8003a6c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003a70:	f005 0501 	and.w	r5, r5, #1
 8003a74:	9501      	str	r5, [sp, #4]
 8003a76:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a7a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a7e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003a84:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a88:	fa09 f90b 	lsl.w	r9, r9, fp
 8003a8c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a90:	4d39      	ldr	r5, [pc, #228]	; (8003b78 <HAL_GPIO_Init+0x1ac>)
 8003a92:	42a8      	cmp	r0, r5
 8003a94:	d061      	beq.n	8003b5a <HAL_GPIO_Init+0x18e>
 8003a96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a9a:	42a8      	cmp	r0, r5
 8003a9c:	d05f      	beq.n	8003b5e <HAL_GPIO_Init+0x192>
 8003a9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003aa2:	42a8      	cmp	r0, r5
 8003aa4:	d05d      	beq.n	8003b62 <HAL_GPIO_Init+0x196>
 8003aa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003aaa:	42a8      	cmp	r0, r5
 8003aac:	bf0c      	ite	eq
 8003aae:	2503      	moveq	r5, #3
 8003ab0:	2504      	movne	r5, #4
 8003ab2:	fa05 f50b 	lsl.w	r5, r5, fp
 8003ab6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003aba:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003abe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ac0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ac4:	bf14      	ite	ne
 8003ac6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ac8:	43a5      	biceq	r5, r4
 8003aca:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003acc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ace:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ad2:	bf14      	ite	ne
 8003ad4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003ad6:	43a5      	biceq	r5, r4
 8003ad8:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8003ada:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003adc:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003ae0:	bf14      	ite	ne
 8003ae2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ae4:	43a5      	biceq	r5, r4
 8003ae6:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8003ae8:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003aea:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8003aee:	bf14      	ite	ne
 8003af0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003af2:	43a5      	biceq	r5, r4
 8003af4:	601d      	str	r5, [r3, #0]
	position++;
 8003af6:	3601      	adds	r6, #1
 8003af8:	e772      	b.n	80039e0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8003afa:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8003b7c <HAL_GPIO_Init+0x1b0>
 8003afe:	454d      	cmp	r5, r9
 8003b00:	d00c      	beq.n	8003b1c <HAL_GPIO_Init+0x150>
 8003b02:	d817      	bhi.n	8003b34 <HAL_GPIO_Init+0x168>
 8003b04:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003b08:	454d      	cmp	r5, r9
 8003b0a:	d007      	beq.n	8003b1c <HAL_GPIO_Init+0x150>
 8003b0c:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8003b10:	454d      	cmp	r5, r9
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x150>
 8003b14:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003b18:	454d      	cmp	r5, r9
 8003b1a:	d183      	bne.n	8003a24 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b1c:	688a      	ldr	r2, [r1, #8]
 8003b1e:	b1d2      	cbz	r2, 8003b56 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b20:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8003b22:	bf08      	it	eq
 8003b24:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b28:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8003b2c:	bf18      	it	ne
 8003b2e:	f8c0 8014 	strne.w	r8, [r0, #20]
 8003b32:	e777      	b.n	8003a24 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003b34:	4565      	cmp	r5, ip
 8003b36:	d0f1      	beq.n	8003b1c <HAL_GPIO_Init+0x150>
 8003b38:	4575      	cmp	r5, lr
 8003b3a:	e7ee      	b.n	8003b1a <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b3c:	68ca      	ldr	r2, [r1, #12]
          break;
 8003b3e:	e771      	b.n	8003a24 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b40:	68ca      	ldr	r2, [r1, #12]
 8003b42:	3204      	adds	r2, #4
          break;
 8003b44:	e76e      	b.n	8003a24 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b46:	68ca      	ldr	r2, [r1, #12]
 8003b48:	3208      	adds	r2, #8
          break;
 8003b4a:	e76b      	b.n	8003a24 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b4c:	68ca      	ldr	r2, [r1, #12]
 8003b4e:	320c      	adds	r2, #12
          break;
 8003b50:	e768      	b.n	8003a24 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003b52:	2200      	movs	r2, #0
 8003b54:	e766      	b.n	8003a24 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b56:	2204      	movs	r2, #4
 8003b58:	e764      	b.n	8003a24 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b5a:	2500      	movs	r5, #0
 8003b5c:	e7a9      	b.n	8003ab2 <HAL_GPIO_Init+0xe6>
 8003b5e:	2501      	movs	r5, #1
 8003b60:	e7a7      	b.n	8003ab2 <HAL_GPIO_Init+0xe6>
 8003b62:	2502      	movs	r5, #2
 8003b64:	e7a5      	b.n	8003ab2 <HAL_GPIO_Init+0xe6>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40010400 	.word	0x40010400
 8003b70:	10310000 	.word	0x10310000
 8003b74:	10320000 	.word	0x10320000
 8003b78:	40010800 	.word	0x40010800
 8003b7c:	10220000 	.word	0x10220000

08003b80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b80:	b10a      	cbz	r2, 8003b86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b82:	6101      	str	r1, [r0, #16]
  }
}
 8003b84:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003b86:	0409      	lsls	r1, r1, #16
 8003b88:	e7fb      	b.n	8003b82 <HAL_GPIO_WritePin+0x2>

08003b8a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b8a:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b8c:	ea01 0203 	and.w	r2, r1, r3
 8003b90:	ea21 0103 	bic.w	r1, r1, r3
 8003b94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003b98:	6101      	str	r1, [r0, #16]
}
 8003b9a:	4770      	bx	lr

08003b9c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b9c:	6801      	ldr	r1, [r0, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	694b      	ldr	r3, [r1, #20]
 8003ba2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003ba6:	d010      	beq.n	8003bca <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003bac:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bae:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bb0:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bba:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	4770      	bx	lr
  }
  return HAL_OK;
 8003bca:	4618      	mov	r0, r3
}
 8003bcc:	4770      	bx	lr

08003bce <I2C_WaitOnFlagUntilTimeout>:
{
 8003bce:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	460f      	mov	r7, r1
 8003bd6:	4691      	mov	r9, r2
 8003bd8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bda:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003bde:	6833      	ldr	r3, [r6, #0]
 8003be0:	f1ba 0f01 	cmp.w	sl, #1
 8003be4:	bf0c      	ite	eq
 8003be6:	695c      	ldreq	r4, [r3, #20]
 8003be8:	699c      	ldrne	r4, [r3, #24]
 8003bea:	ea27 0404 	bic.w	r4, r7, r4
 8003bee:	b2a4      	uxth	r4, r4
 8003bf0:	fab4 f484 	clz	r4, r4
 8003bf4:	0964      	lsrs	r4, r4, #5
 8003bf6:	45a1      	cmp	r9, r4
 8003bf8:	d001      	beq.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	e025      	b.n	8003c4a <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8003bfe:	1c6a      	adds	r2, r5, #1
 8003c00:	d0ee      	beq.n	8003be0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7ff fabb 	bl	800317c <HAL_GetTick>
 8003c06:	9b08      	ldr	r3, [sp, #32]
 8003c08:	1ac0      	subs	r0, r0, r3
 8003c0a:	42a8      	cmp	r0, r5
 8003c0c:	d801      	bhi.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	d1e5      	bne.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c12:	6833      	ldr	r3, [r6, #0]
 8003c14:	f1ba 0f01 	cmp.w	sl, #1
 8003c18:	bf0c      	ite	eq
 8003c1a:	695b      	ldreq	r3, [r3, #20]
 8003c1c:	699b      	ldrne	r3, [r3, #24]
 8003c1e:	ea27 0303 	bic.w	r3, r7, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	fab3 f383 	clz	r3, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	4599      	cmp	r9, r3
 8003c2c:	d1d7      	bne.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c2e:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c30:	2220      	movs	r2, #32
          return HAL_ERROR;
 8003c32:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c34:	6333      	str	r3, [r6, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c36:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c3a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c3e:	6c32      	ldr	r2, [r6, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003c40:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c44:	f042 0220 	orr.w	r2, r2, #32
 8003c48:	6432      	str	r2, [r6, #64]	; 0x40
}
 8003c4a:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c52:	4604      	mov	r4, r0
 8003c54:	460f      	mov	r7, r1
 8003c56:	4616      	mov	r6, r2
 8003c58:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c5a:	6825      	ldr	r5, [r4, #0]
 8003c5c:	6968      	ldr	r0, [r5, #20]
 8003c5e:	ea27 0000 	bic.w	r0, r7, r0
 8003c62:	b280      	uxth	r0, r0
 8003c64:	b1b8      	cbz	r0, 8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c66:	696b      	ldr	r3, [r5, #20]
 8003c68:	055a      	lsls	r2, r3, #21
 8003c6a:	d516      	bpl.n	8003c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6c:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c6e:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c74:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c76:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003c7a:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c80:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c84:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c88:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c8a:	f042 0204 	orr.w	r2, r2, #4
          return HAL_ERROR;
 8003c8e:	2001      	movs	r0, #1
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c90:	6422      	str	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003c92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003c9a:	1c73      	adds	r3, r6, #1
 8003c9c:	d0de      	beq.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7ff fa6d 	bl	800317c <HAL_GetTick>
 8003ca2:	eba0 0008 	sub.w	r0, r0, r8
 8003ca6:	42b0      	cmp	r0, r6
 8003ca8:	d801      	bhi.n	8003cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003caa:	2e00      	cmp	r6, #0
 8003cac:	d1d5      	bne.n	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	ea27 0202 	bic.w	r2, r7, r2
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	d0ce      	beq.n	8003c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbc:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cbe:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc0:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cc2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	e7dd      	b.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003cd2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003cd2:	b570      	push	{r4, r5, r6, lr}
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	460d      	mov	r5, r1
 8003cd8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	061b      	lsls	r3, r3, #24
 8003ce0:	d501      	bpl.n	8003ce6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003ce2:	2000      	movs	r0, #0
}
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	f7ff ff58 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 8003cec:	b9c8      	cbnz	r0, 8003d22 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	1c6a      	adds	r2, r5, #1
 8003cf0:	d0f3      	beq.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf2:	f7ff fa43 	bl	800317c <HAL_GetTick>
 8003cf6:	1b80      	subs	r0, r0, r6
 8003cf8:	42a8      	cmp	r0, r5
 8003cfa:	d801      	bhi.n	8003d00 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	d1ec      	bne.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003d08:	d1e7      	bne.n	8003cda <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d0a:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0c:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d16:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003d18:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1c:	f042 0220 	orr.w	r2, r2, #32
 8003d20:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003d22:	2001      	movs	r0, #1
 8003d24:	e7de      	b.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08003d28 <I2C_RequestMemoryWrite>:
{
 8003d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d2c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2e:	6802      	ldr	r2, [r0, #0]
{
 8003d30:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d32:	6813      	ldr	r3, [r2, #0]
{
 8003d34:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d3a:	6013      	str	r3, [r2, #0]
{
 8003d3c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003d40:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d42:	463b      	mov	r3, r7
 8003d44:	2200      	movs	r2, #0
 8003d46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d4a:	f8cd 8000 	str.w	r8, [sp]
{
 8003d4e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d50:	f7ff ff3d 	bl	8003bce <I2C_WaitOnFlagUntilTimeout>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	b138      	cbz	r0, 8003d68 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	05db      	lsls	r3, r3, #23
 8003d5c:	d502      	bpl.n	8003d64 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d62:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003d64:	2003      	movs	r0, #3
 8003d66:	e00a      	b.n	8003d7e <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d68:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003d6c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d6e:	463a      	mov	r2, r7
 8003d70:	4643      	mov	r3, r8
 8003d72:	4620      	mov	r0, r4
 8003d74:	4917      	ldr	r1, [pc, #92]	; (8003dd4 <I2C_RequestMemoryWrite+0xac>)
 8003d76:	f7ff ff6a 	bl	8003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d7a:	b118      	cbz	r0, 8003d84 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
}
 8003d7e:	b005      	add	sp, #20
 8003d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	9003      	str	r0, [sp, #12]
 8003d88:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d8a:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d8c:	9203      	str	r2, [sp, #12]
 8003d8e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d90:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d94:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d98:	f7ff ff9b 	bl	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	b140      	cbz	r0, 8003db0 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da0:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da2:	bf01      	itttt	eq
 8003da4:	6822      	ldreq	r2, [r4, #0]
 8003da6:	6813      	ldreq	r3, [r2, #0]
 8003da8:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003dac:	6013      	streq	r3, [r2, #0]
 8003dae:	e7e5      	b.n	8003d7c <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db0:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003db6:	d102      	bne.n	8003dbe <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003db8:	b2ed      	uxtb	r5, r5
 8003dba:	611d      	str	r5, [r3, #16]
 8003dbc:	e7df      	b.n	8003d7e <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dbe:	0a2a      	lsrs	r2, r5, #8
 8003dc0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc2:	4639      	mov	r1, r7
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f7ff ff83 	bl	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d1e6      	bne.n	8003d9e <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	e7f1      	b.n	8003db8 <I2C_RequestMemoryWrite+0x90>
 8003dd4:	00010002 	.word	0x00010002

08003dd8 <I2C_RequestMemoryRead>:
{
 8003dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ddc:	469a      	mov	sl, r3
 8003dde:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	6803      	ldr	r3, [r0, #0]
{
 8003de4:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	681a      	ldr	r2, [r3, #0]
{
 8003de8:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dee:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df0:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003df2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dfa:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8cd 8000 	str.w	r8, [sp]
{
 8003e04:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e06:	f7ff fee2 	bl	8003bce <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	b148      	cbz	r0, 8003e22 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0e:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e10:	05db      	lsls	r3, r3, #23
 8003e12:	d502      	bpl.n	8003e1a <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e18:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003e1a:	2003      	movs	r0, #3
}
 8003e1c:	b004      	add	sp, #16
 8003e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e22:	fa5f f986 	uxtb.w	r9, r6
 8003e26:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003e2a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e2c:	463a      	mov	r2, r7
 8003e2e:	4643      	mov	r3, r8
 8003e30:	4620      	mov	r0, r4
 8003e32:	4929      	ldr	r1, [pc, #164]	; (8003ed8 <I2C_RequestMemoryRead+0x100>)
 8003e34:	f7ff ff0b 	bl	8003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e38:	b108      	cbz	r0, 8003e3e <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8003e3a:	2001      	movs	r0, #1
 8003e3c:	e7ee      	b.n	8003e1c <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	9003      	str	r0, [sp, #12]
 8003e42:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e44:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e46:	9203      	str	r2, [sp, #12]
 8003e48:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4a:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4e:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	f7ff ff3e 	bl	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e56:	b140      	cbz	r0, 8003e6a <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e5a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	bf01      	itttt	eq
 8003e5e:	6822      	ldreq	r2, [r4, #0]
 8003e60:	6813      	ldreq	r3, [r2, #0]
 8003e62:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003e66:	6013      	streq	r3, [r2, #0]
 8003e68:	e7e7      	b.n	8003e3a <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e6a:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e70:	d11a      	bne.n	8003ea8 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e72:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e74:	4642      	mov	r2, r8
 8003e76:	4639      	mov	r1, r7
 8003e78:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7a:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7c:	f7ff ff29 	bl	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e80:	4602      	mov	r2, r0
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d1e8      	bne.n	8003e58 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e86:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e88:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8a:	680b      	ldr	r3, [r1, #0]
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e90:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e92:	463b      	mov	r3, r7
 8003e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e98:	f8cd 8000 	str.w	r8, [sp]
 8003e9c:	f7ff fe97 	bl	8003bce <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	6822      	ldr	r2, [r4, #0]
 8003ea2:	b160      	cbz	r0, 8003ebe <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	6813      	ldr	r3, [r2, #0]
 8003ea6:	e7b3      	b.n	8003e10 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ea8:	0a2a      	lsrs	r2, r5, #8
 8003eaa:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eac:	4639      	mov	r1, r7
 8003eae:	4642      	mov	r2, r8
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7ff ff0e 	bl	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d1ce      	bne.n	8003e58 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	e7d9      	b.n	8003e72 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ebe:	f049 0301 	orr.w	r3, r9, #1
 8003ec2:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	4643      	mov	r3, r8
 8003ec8:	463a      	mov	r2, r7
 8003eca:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <I2C_RequestMemoryRead+0x100>)
 8003ecc:	f7ff febf 	bl	8003c4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003ed0:	3800      	subs	r0, #0
 8003ed2:	bf18      	it	ne
 8003ed4:	2001      	movne	r0, #1
 8003ed6:	e7a1      	b.n	8003e1c <I2C_RequestMemoryRead+0x44>
 8003ed8:	00010002 	.word	0x00010002

08003edc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	4604      	mov	r4, r0
 8003ee0:	460d      	mov	r5, r1
 8003ee2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ee4:	6823      	ldr	r3, [r4, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	075b      	lsls	r3, r3, #29
 8003eea:	d501      	bpl.n	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003eec:	2000      	movs	r0, #0
}
 8003eee:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f7ff fe53 	bl	8003b9c <I2C_IsAcknowledgeFailed>
 8003ef6:	b9c8      	cbnz	r0, 8003f2c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003ef8:	1c6a      	adds	r2, r5, #1
 8003efa:	d0f3      	beq.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efc:	f7ff f93e 	bl	800317c <HAL_GetTick>
 8003f00:	1b80      	subs	r0, r0, r6
 8003f02:	42a8      	cmp	r0, r5
 8003f04:	d801      	bhi.n	8003f0a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003f06:	2d00      	cmp	r5, #0
 8003f08:	d1ec      	bne.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f013 0304 	ands.w	r3, r3, #4
 8003f12:	d1e7      	bne.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f14:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f16:	6323      	str	r3, [r4, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f18:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f20:	6c22      	ldr	r2, [r4, #64]	; 0x40
          __HAL_UNLOCK(hi2c);
 8003f22:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f26:	f042 0220 	orr.w	r2, r2, #32
 8003f2a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	e7de      	b.n	8003eee <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003f30 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003f30:	b570      	push	{r4, r5, r6, lr}
 8003f32:	4604      	mov	r4, r0
 8003f34:	460d      	mov	r5, r1
 8003f36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f38:	6821      	ldr	r1, [r4, #0]
 8003f3a:	694b      	ldr	r3, [r1, #20]
 8003f3c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f40:	d001      	beq.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003f42:	2000      	movs	r0, #0
 8003f44:	e010      	b.n	8003f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f46:	694a      	ldr	r2, [r1, #20]
 8003f48:	06d2      	lsls	r2, r2, #27
 8003f4a:	d50e      	bpl.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f4c:	f06f 0210 	mvn.w	r2, #16
 8003f50:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f52:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f54:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f56:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003f60:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f62:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f64:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7ff f907 	bl	800317c <HAL_GetTick>
 8003f6e:	1b80      	subs	r0, r0, r6
 8003f70:	42a8      	cmp	r0, r5
 8003f72:	d801      	bhi.n	8003f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	d1df      	bne.n	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003f80:	d1da      	bne.n	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f82:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f84:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f86:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f90:	f042 0220 	orr.w	r2, r2, #32
 8003f94:	e7e4      	b.n	8003f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08003f98 <HAL_I2C_Init>:
{
 8003f98:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	b908      	cbnz	r0, 8003fa2 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003f9e:	2001      	movs	r0, #1
}
 8003fa0:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fa2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fa6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003faa:	b91b      	cbnz	r3, 8003fb4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003fac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003fb0:	f7fd fa62 	bl	8001478 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb4:	2324      	movs	r3, #36	; 0x24
 8003fb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	f022 0201 	bic.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f001 fc6a 	bl	80058ac <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fd8:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_I2C_Init+0x140>)
 8003fda:	6865      	ldr	r5, [r4, #4]
 8003fdc:	429d      	cmp	r5, r3
 8003fde:	bf94      	ite	ls
 8003fe0:	4b3e      	ldrls	r3, [pc, #248]	; (80040dc <HAL_I2C_Init+0x144>)
 8003fe2:	4b3f      	ldrhi	r3, [pc, #252]	; (80040e0 <HAL_I2C_Init+0x148>)
 8003fe4:	4298      	cmp	r0, r3
 8003fe6:	bf8c      	ite	hi
 8003fe8:	2300      	movhi	r3, #0
 8003fea:	2301      	movls	r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1d6      	bne.n	8003f9e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ff0:	4e39      	ldr	r6, [pc, #228]	; (80040d8 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003ff2:	4b3c      	ldr	r3, [pc, #240]	; (80040e4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ff4:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ffa:	bf88      	it	hi
 8003ffc:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	6851      	ldr	r1, [r2, #4]
 8004004:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004008:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800400c:	bf82      	ittt	hi
 800400e:	4373      	mulhi	r3, r6
 8004010:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8004014:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004018:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800401a:	6a11      	ldr	r1, [r2, #32]
 800401c:	3301      	adds	r3, #1
 800401e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004022:	430b      	orrs	r3, r1
 8004024:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004026:	69d1      	ldr	r1, [r2, #28]
 8004028:	1e43      	subs	r3, r0, #1
 800402a:	482b      	ldr	r0, [pc, #172]	; (80040d8 <HAL_I2C_Init+0x140>)
 800402c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004030:	4285      	cmp	r5, r0
 8004032:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004036:	d832      	bhi.n	800409e <HAL_I2C_Init+0x106>
 8004038:	006d      	lsls	r5, r5, #1
 800403a:	fbb3 f3f5 	udiv	r3, r3, r5
 800403e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8004042:	3301      	adds	r3, #1
 8004044:	4203      	tst	r3, r0
 8004046:	d042      	beq.n	80040ce <HAL_I2C_Init+0x136>
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	4319      	orrs	r1, r3
 800404e:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004050:	6811      	ldr	r1, [r2, #0]
 8004052:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004056:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800405a:	4303      	orrs	r3, r0
 800405c:	430b      	orrs	r3, r1
 800405e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004060:	6891      	ldr	r1, [r2, #8]
 8004062:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004066:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800406a:	4303      	orrs	r3, r0
 800406c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004070:	430b      	orrs	r3, r1
 8004072:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004074:	68d1      	ldr	r1, [r2, #12]
 8004076:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800407a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800407e:	4303      	orrs	r3, r0
 8004080:	430b      	orrs	r3, r1
 8004082:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004084:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004086:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800408e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004090:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004092:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800409c:	e780      	b.n	8003fa0 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800409e:	68a0      	ldr	r0, [r4, #8]
 80040a0:	b950      	cbnz	r0, 80040b8 <HAL_I2C_Init+0x120>
 80040a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040a6:	fbb3 f3f5 	udiv	r3, r3, r5
 80040aa:	3301      	adds	r3, #1
 80040ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b0:	b17b      	cbz	r3, 80040d2 <HAL_I2C_Init+0x13a>
 80040b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b6:	e7c9      	b.n	800404c <HAL_I2C_Init+0xb4>
 80040b8:	2019      	movs	r0, #25
 80040ba:	4368      	muls	r0, r5
 80040bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80040c0:	3301      	adds	r3, #1
 80040c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c6:	b123      	cbz	r3, 80040d2 <HAL_I2C_Init+0x13a>
 80040c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040cc:	e7be      	b.n	800404c <HAL_I2C_Init+0xb4>
 80040ce:	2304      	movs	r3, #4
 80040d0:	e7bc      	b.n	800404c <HAL_I2C_Init+0xb4>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e7ba      	b.n	800404c <HAL_I2C_Init+0xb4>
 80040d6:	bf00      	nop
 80040d8:	000186a0 	.word	0x000186a0
 80040dc:	001e847f 	.word	0x001e847f
 80040e0:	003d08ff 	.word	0x003d08ff
 80040e4:	000f4240 	.word	0x000f4240

080040e8 <HAL_I2C_Mem_Write>:
{
 80040e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80040ec:	4604      	mov	r4, r0
 80040ee:	4699      	mov	r9, r3
 80040f0:	460f      	mov	r7, r1
 80040f2:	4690      	mov	r8, r2
 80040f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80040f6:	f7ff f841 	bl	800317c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80040fe:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004100:	2b20      	cmp	r3, #32
 8004102:	d003      	beq.n	800410c <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8004104:	2002      	movs	r0, #2
}
 8004106:	b003      	add	sp, #12
 8004108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410c:	9000      	str	r0, [sp, #0]
 800410e:	2319      	movs	r3, #25
 8004110:	2201      	movs	r2, #1
 8004112:	4620      	mov	r0, r4
 8004114:	493a      	ldr	r1, [pc, #232]	; (8004200 <HAL_I2C_Mem_Write+0x118>)
 8004116:	f7ff fd5a 	bl	8003bce <I2C_WaitOnFlagUntilTimeout>
 800411a:	2800      	cmp	r0, #0
 800411c:	d1f2      	bne.n	8004104 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800411e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004122:	2b01      	cmp	r3, #1
 8004124:	d0ee      	beq.n	8004104 <HAL_I2C_Mem_Write+0x1c>
 8004126:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004128:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800412a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800412e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004130:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004132:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8004134:	bf58      	it	pl
 8004136:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004138:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800413a:	bf5c      	itt	pl
 800413c:	f043 0301 	orrpl.w	r3, r3, #1
 8004140:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004142:	6803      	ldr	r3, [r0, #0]
 8004144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004148:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800414a:	2321      	movs	r3, #33	; 0x21
 800414c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004150:	2340      	movs	r3, #64	; 0x40
 8004152:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004156:	2300      	movs	r3, #0
 8004158:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800415a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800415c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800415e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004160:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004164:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8004168:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800416a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800416c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416e:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_I2C_Mem_Write+0x11c>)
 8004170:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004172:	464b      	mov	r3, r9
 8004174:	f7ff fdd8 	bl	8003d28 <I2C_RequestMemoryWrite>
 8004178:	2800      	cmp	r0, #0
 800417a:	d02a      	beq.n	80041d2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 800417c:	2001      	movs	r0, #1
 800417e:	e7c2      	b.n	8004106 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004180:	f7ff fda7 	bl	8003cd2 <I2C_WaitOnTXEFlagUntilTimeout>
 8004184:	b140      	cbz	r0, 8004198 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004188:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	bf01      	itttt	eq
 800418c:	6822      	ldreq	r2, [r4, #0]
 800418e:	6813      	ldreq	r3, [r2, #0]
 8004190:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8004194:	6013      	streq	r3, [r2, #0]
 8004196:	e7f1      	b.n	800417c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004198:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800419a:	6827      	ldr	r7, [r4, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	f812 1b01 	ldrb.w	r1, [r2], #1
 80041a2:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80041a4:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80041a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80041a8:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80041aa:	3a01      	subs	r2, #1
 80041ac:	b292      	uxth	r2, r2
 80041ae:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b0:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80041b2:	1e48      	subs	r0, r1, #1
 80041b4:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b6:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80041b8:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ba:	d50a      	bpl.n	80041d2 <HAL_I2C_Mem_Write+0xea>
 80041bc:	b148      	cbz	r0, 80041d2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041be:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 80041c0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80041c4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80041c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80041c8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80041ce:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80041d0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80041d2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d4:	462a      	mov	r2, r5
 80041d6:	4631      	mov	r1, r6
 80041d8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1d0      	bne.n	8004180 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041de:	f7ff fe7d 	bl	8003edc <I2C_WaitOnBTFFlagUntilTimeout>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d1cf      	bne.n	8004186 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e6:	6822      	ldr	r2, [r4, #0]
 80041e8:	6813      	ldr	r3, [r2, #0]
 80041ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ee:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80041f0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80041f2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80041fe:	e782      	b.n	8004106 <HAL_I2C_Mem_Write+0x1e>
 8004200:	00100002 	.word	0x00100002
 8004204:	ffff0000 	.word	0xffff0000

08004208 <HAL_I2C_Mem_Read>:
{
 8004208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800420c:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 800420e:	2300      	movs	r3, #0
{
 8004210:	4604      	mov	r4, r0
 8004212:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8004214:	9303      	str	r3, [sp, #12]
{
 8004216:	460d      	mov	r5, r1
 8004218:	4690      	mov	r8, r2
 800421a:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7fe ffae 	bl	800317c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004220:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8004224:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004226:	2b20      	cmp	r3, #32
 8004228:	d004      	beq.n	8004234 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 800422a:	2502      	movs	r5, #2
}
 800422c:	4628      	mov	r0, r5
 800422e:	b009      	add	sp, #36	; 0x24
 8004230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004234:	9000      	str	r0, [sp, #0]
 8004236:	2319      	movs	r3, #25
 8004238:	2201      	movs	r2, #1
 800423a:	4620      	mov	r0, r4
 800423c:	4990      	ldr	r1, [pc, #576]	; (8004480 <HAL_I2C_Mem_Read+0x278>)
 800423e:	f7ff fcc6 	bl	8003bce <I2C_WaitOnFlagUntilTimeout>
 8004242:	2800      	cmp	r0, #0
 8004244:	d1f1      	bne.n	800422a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8004246:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d0ed      	beq.n	800422a <HAL_I2C_Mem_Read+0x22>
 800424e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004250:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8004252:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004256:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004258:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800425a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800425c:	bf58      	it	pl
 800425e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004260:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8004262:	bf5c      	itt	pl
 8004264:	f043 0301 	orrpl.w	r3, r3, #1
 8004268:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800426a:	6803      	ldr	r3, [r0, #0]
 800426c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004270:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004272:	2322      	movs	r3, #34	; 0x22
 8004274:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004278:	2340      	movs	r3, #64	; 0x40
 800427a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800427e:	2300      	movs	r3, #0
 8004280:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004282:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004284:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8004286:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004288:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800428c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8004290:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004292:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004294:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004296:	4b7b      	ldr	r3, [pc, #492]	; (8004484 <HAL_I2C_Mem_Read+0x27c>)
 8004298:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800429a:	464b      	mov	r3, r9
 800429c:	f7ff fd9c 	bl	8003dd8 <I2C_RequestMemoryRead>
 80042a0:	4605      	mov	r5, r0
 80042a2:	b108      	cbz	r0, 80042a8 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 80042a4:	2501      	movs	r5, #1
 80042a6:	e7c1      	b.n	800422c <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 80042a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042aa:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80042ac:	b9c2      	cbnz	r2, 80042e0 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ae:	9004      	str	r0, [sp, #16]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	9204      	str	r2, [sp, #16]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	9204      	str	r2, [sp, #16]
 80042b8:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c0:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8004488 <HAL_I2C_Mem_Read+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042c6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800448c <HAL_I2C_Mem_Read+0x284>
    while (hi2c->XferSize > 0U)
 80042ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d137      	bne.n	8004340 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80042d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80042d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80042de:	e7a5      	b.n	800422c <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 80042e0:	2a01      	cmp	r2, #1
 80042e2:	d111      	bne.n	8004308 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	9005      	str	r0, [sp, #20]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	9205      	str	r2, [sp, #20]
 80042f6:	699a      	ldr	r2, [r3, #24]
 80042f8:	9205      	str	r2, [sp, #20]
 80042fa:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004304:	b662      	cpsie	i
}
 8004306:	e7dc      	b.n	80042c2 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8004308:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430a:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 800430c:	d10e      	bne.n	800432c <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800430e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004312:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004314:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	9006      	str	r0, [sp, #24]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	9206      	str	r2, [sp, #24]
 800431e:	699a      	ldr	r2, [r3, #24]
 8004320:	9206      	str	r2, [sp, #24]
 8004322:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800432a:	e7ea      	b.n	8004302 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800432c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	9007      	str	r0, [sp, #28]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	9207      	str	r2, [sp, #28]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	9307      	str	r3, [sp, #28]
 800433c:	9b07      	ldr	r3, [sp, #28]
 800433e:	e7c0      	b.n	80042c2 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8004340:	2b03      	cmp	r3, #3
 8004342:	d878      	bhi.n	8004436 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8004344:	2b01      	cmp	r3, #1
 8004346:	d115      	bne.n	8004374 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004348:	4632      	mov	r2, r6
 800434a:	4639      	mov	r1, r7
 800434c:	4620      	mov	r0, r4
 800434e:	f7ff fdef 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004352:	2800      	cmp	r0, #0
 8004354:	d1a6      	bne.n	80042a4 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800435c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800435e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004360:	3301      	adds	r3, #1
 8004362:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004364:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004366:	3b01      	subs	r3, #1
 8004368:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800436a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800436c:	3b01      	subs	r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004372:	e7aa      	b.n	80042ca <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8004374:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	463b      	mov	r3, r7
 800437c:	4641      	mov	r1, r8
 800437e:	4620      	mov	r0, r4
 8004380:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8004382:	d118      	bne.n	80043b6 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004384:	f7ff fc23 	bl	8003bce <I2C_WaitOnFlagUntilTimeout>
 8004388:	2800      	cmp	r0, #0
 800438a:	d18b      	bne.n	80042a4 <HAL_I2C_Mem_Read+0x9c>
 800438c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004396:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004398:	691a      	ldr	r2, [r3, #16]
 800439a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800439c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800439e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043a0:	3301      	adds	r3, #1
 80043a2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80043a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80043aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043b2:	b662      	cpsie	i
 80043b4:	e7cf      	b.n	8004356 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043b6:	f7ff fc0a 	bl	8003bce <I2C_WaitOnFlagUntilTimeout>
 80043ba:	2800      	cmp	r0, #0
 80043bc:	f47f af72 	bne.w	80042a4 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c0:	6822      	ldr	r2, [r4, #0]
 80043c2:	6813      	ldr	r3, [r2, #0]
 80043c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043ca:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043cc:	f246 11a8 	movw	r1, #25000	; 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d0:	6823      	ldr	r3, [r4, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043d6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80043d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043da:	1c53      	adds	r3, r2, #1
 80043dc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80043de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80043e0:	3b01      	subs	r3, #1
 80043e2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80043e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80043ec:	f8d9 3000 	ldr.w	r3, [r9]
 80043f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80043f4:	2123      	movs	r1, #35	; 0x23
 80043f6:	434b      	muls	r3, r1
 80043f8:	9303      	str	r3, [sp, #12]
            count--;
 80043fa:	9b03      	ldr	r3, [sp, #12]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	b96b      	cbnz	r3, 8004420 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8004404:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004406:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004408:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004410:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004412:	f042 0220 	orr.w	r2, r2, #32
 8004416:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004418:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 800441a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800441e:	e741      	b.n	80042a4 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	6959      	ldr	r1, [r3, #20]
 8004424:	0749      	lsls	r1, r1, #29
 8004426:	d5e8      	bpl.n	80043fa <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800442e:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	7053      	strb	r3, [r2, #1]
 8004434:	e7b3      	b.n	800439e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004436:	4632      	mov	r2, r6
 8004438:	4639      	mov	r1, r7
 800443a:	4620      	mov	r0, r4
 800443c:	f7ff fd78 	bl	8003f30 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004440:	2800      	cmp	r0, #0
 8004442:	f47f af2f 	bne.w	80042a4 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800444c:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800444e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8004450:	6a61      	ldr	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004452:	3a01      	subs	r2, #1
 8004454:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004456:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 8004458:	8562      	strh	r2, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800445a:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 800445c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800445e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004460:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004466:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8004468:	8523      	strh	r3, [r4, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800446a:	f57f af2e 	bpl.w	80042ca <HAL_I2C_Mem_Read+0xc2>
          if (hi2c->XferSize == 3U)
 800446e:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004470:	bf02      	ittt	eq
 8004472:	6813      	ldreq	r3, [r2, #0]
 8004474:	f423 6380 	biceq.w	r3, r3, #1024	; 0x400
 8004478:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447a:	6913      	ldr	r3, [r2, #16]
 800447c:	704b      	strb	r3, [r1, #1]
 800447e:	e76e      	b.n	800435e <HAL_I2C_Mem_Read+0x156>
 8004480:	00100002 	.word	0x00100002
 8004484:	ffff0000 	.word	0xffff0000
 8004488:	00010004 	.word	0x00010004
 800448c:	20000004 	.word	0x20000004

08004490 <HAL_I2C_Mem_Read_IT>:
{
 8004490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004492:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004494:	2000      	movs	r0, #0
 8004496:	9001      	str	r0, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004498:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 800449c:	2820      	cmp	r0, #32
 800449e:	d002      	beq.n	80044a6 <HAL_I2C_Mem_Read_IT+0x16>
        return HAL_BUSY;
 80044a0:	2002      	movs	r0, #2
}
 80044a2:	b003      	add	sp, #12
 80044a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80044a6:	f246 15a8 	movw	r5, #25000	; 0x61a8
 80044aa:	4829      	ldr	r0, [pc, #164]	; (8004550 <HAL_I2C_Mem_Read_IT+0xc0>)
 80044ac:	6800      	ldr	r0, [r0, #0]
 80044ae:	fbb0 f0f5 	udiv	r0, r0, r5
 80044b2:	2519      	movs	r5, #25
 80044b4:	4368      	muls	r0, r5
 80044b6:	9001      	str	r0, [sp, #4]
      count--;
 80044b8:	9801      	ldr	r0, [sp, #4]
 80044ba:	3801      	subs	r0, #1
 80044bc:	9001      	str	r0, [sp, #4]
      if (count == 0U)
 80044be:	9801      	ldr	r0, [sp, #4]
 80044c0:	b950      	cbnz	r0, 80044d8 <HAL_I2C_Mem_Read_IT+0x48>
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c4:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044d0:	f043 0320 	orr.w	r3, r3, #32
 80044d4:	6423      	str	r3, [r4, #64]	; 0x40
 80044d6:	e7e3      	b.n	80044a0 <HAL_I2C_Mem_Read_IT+0x10>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80044d8:	6825      	ldr	r5, [r4, #0]
 80044da:	69a8      	ldr	r0, [r5, #24]
 80044dc:	0786      	lsls	r6, r0, #30
 80044de:	d4eb      	bmi.n	80044b8 <HAL_I2C_Mem_Read_IT+0x28>
    __HAL_LOCK(hi2c);
 80044e0:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80044e4:	2801      	cmp	r0, #1
 80044e6:	d0db      	beq.n	80044a0 <HAL_I2C_Mem_Read_IT+0x10>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e8:	6828      	ldr	r0, [r5, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ea:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ec:	07c0      	lsls	r0, r0, #31
      __HAL_I2C_ENABLE(hi2c);
 80044ee:	bf58      	it	pl
 80044f0:	6828      	ldrpl	r0, [r5, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f2:	4f18      	ldr	r7, [pc, #96]	; (8004554 <HAL_I2C_Mem_Read_IT+0xc4>)
      __HAL_I2C_ENABLE(hi2c);
 80044f4:	bf5c      	itt	pl
 80044f6:	f040 0001 	orrpl.w	r0, r0, #1
 80044fa:	6028      	strpl	r0, [r5, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044fc:	6828      	ldr	r0, [r5, #0]
 80044fe:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 8004502:	6028      	str	r0, [r5, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004504:	2022      	movs	r0, #34	; 0x22
 8004506:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800450a:	2040      	movs	r0, #64	; 0x40
 800450c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 8004510:	9808      	ldr	r0, [sp, #32]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004512:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004514:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004516:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800451a:	8560      	strh	r0, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800451c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800451e:	62e7      	str	r7, [r4, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004520:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004522:	64a2      	str	r2, [r4, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004524:	64e3      	str	r3, [r4, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004526:	6526      	str	r6, [r4, #80]	; 0x50
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004528:	682b      	ldr	r3, [r5, #0]
    hi2c->XferSize    = hi2c->XferCount;
 800452a:	b280      	uxth	r0, r0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->XferSize    = hi2c->XferCount;
 8004530:	8520      	strh	r0, [r4, #40]	; 0x28
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	602b      	str	r3, [r5, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	602b      	str	r3, [r5, #0]
    __HAL_UNLOCK(hi2c);
 800453c:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    if (hi2c->XferSize > 0U)
 8004540:	2800      	cmp	r0, #0
 8004542:	d0ae      	beq.n	80044a2 <HAL_I2C_Mem_Read_IT+0x12>
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004544:	686b      	ldr	r3, [r5, #4]
    return HAL_OK;
 8004546:	4630      	mov	r0, r6
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004548:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800454c:	606b      	str	r3, [r5, #4]
 800454e:	e7a8      	b.n	80044a2 <HAL_I2C_Mem_Read_IT+0x12>
 8004550:	20000004 	.word	0x20000004
 8004554:	ffff0000 	.word	0xffff0000

08004558 <HAL_I2C_Mem_Read_DMA>:
{
 8004558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	4604      	mov	r4, r0
 8004560:	4699      	mov	r9, r3
 8004562:	460f      	mov	r7, r1
 8004564:	4690      	mov	r8, r2
 8004566:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8004568:	f7fe fe08 	bl	800317c <HAL_GetTick>
  __IO uint32_t count = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004570:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8004574:	4682      	mov	sl, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004576:	2b20      	cmp	r3, #32
 8004578:	d003      	beq.n	8004582 <HAL_I2C_Mem_Read_DMA+0x2a>
        return HAL_BUSY;
 800457a:	2002      	movs	r0, #2
}
 800457c:	b006      	add	sp, #24
 800457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004582:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004586:	4b63      	ldr	r3, [pc, #396]	; (8004714 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	fbb3 f3f2 	udiv	r3, r3, r2
 800458e:	2219      	movs	r2, #25
 8004590:	4353      	muls	r3, r2
 8004592:	9303      	str	r3, [sp, #12]
      count--;
 8004594:	9b03      	ldr	r3, [sp, #12]
 8004596:	3b01      	subs	r3, #1
 8004598:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 800459a:	9b03      	ldr	r3, [sp, #12]
 800459c:	b94b      	cbnz	r3, 80045b2 <HAL_I2C_Mem_Read_DMA+0x5a>
        hi2c->State               = HAL_I2C_STATE_READY;
 800459e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045a0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ac:	4313      	orrs	r3, r2
 80045ae:	6423      	str	r3, [r4, #64]	; 0x40
 80045b0:	e7e3      	b.n	800457a <HAL_I2C_Mem_Read_DMA+0x22>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80045b2:	6821      	ldr	r1, [r4, #0]
 80045b4:	698b      	ldr	r3, [r1, #24]
 80045b6:	079a      	lsls	r2, r3, #30
 80045b8:	d4ec      	bmi.n	8004594 <HAL_I2C_Mem_Read_DMA+0x3c>
    __HAL_LOCK(hi2c);
 80045ba:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d0db      	beq.n	800457a <HAL_I2C_Mem_Read_DMA+0x22>
 80045c2:	2301      	movs	r3, #1
 80045c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045c8:	680b      	ldr	r3, [r1, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ca:	2600      	movs	r6, #0
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045cc:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80045ce:	bf58      	it	pl
 80045d0:	680b      	ldrpl	r3, [r1, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045d2:	4a51      	ldr	r2, [pc, #324]	; (8004718 <HAL_I2C_Mem_Read_DMA+0x1c0>)
      __HAL_I2C_ENABLE(hi2c);
 80045d4:	bf5c      	itt	pl
 80045d6:	f043 0301 	orrpl.w	r3, r3, #1
 80045da:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045dc:	680b      	ldr	r3, [r1, #0]
 80045de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045e2:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045e4:	2322      	movs	r3, #34	; 0x22
 80045e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045ea:	2340      	movs	r3, #64	; 0x40
 80045ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->XferCount   = Size;
 80045f0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f4:	6426      	str	r6, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80045f6:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80045fa:	6265      	str	r5, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80045fc:	b29b      	uxth	r3, r3
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045fe:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8004600:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->Devaddress  = DevAddress;
 8004602:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004604:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004608:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800460c:	6526      	str	r6, [r4, #80]	; 0x50
    if (hi2c->XferSize > 0U)
 800460e:	2b00      	cmp	r3, #0
 8004610:	d062      	beq.n	80046d8 <HAL_I2C_Mem_Read_DMA+0x180>
      if (hi2c->hdmarx != NULL)
 8004612:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004614:	b340      	cbz	r0, 8004668 <HAL_I2C_Mem_Read_DMA+0x110>
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004616:	4a41      	ldr	r2, [pc, #260]	; (800471c <HAL_I2C_Mem_Read_DMA+0x1c4>)
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004618:	6346      	str	r6, [r0, #52]	; 0x34
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800461a:	6282      	str	r2, [r0, #40]	; 0x28
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800461c:	4a40      	ldr	r2, [pc, #256]	; (8004720 <HAL_I2C_Mem_Read_DMA+0x1c8>)
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800461e:	3110      	adds	r1, #16
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004620:	e9c0 620b 	strd	r6, r2, [r0, #44]	; 0x2c
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004624:	462a      	mov	r2, r5
 8004626:	f7ff f893 	bl	8003750 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 800462a:	4605      	mov	r5, r0
 800462c:	2800      	cmp	r0, #0
 800462e:	d147      	bne.n	80046c0 <HAL_I2C_Mem_Read_DMA+0x168>
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004630:	2323      	movs	r3, #35	; 0x23
 8004632:	4642      	mov	r2, r8
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	4639      	mov	r1, r7
 8004638:	464b      	mov	r3, r9
 800463a:	4620      	mov	r0, r4
 800463c:	f8cd a004 	str.w	sl, [sp, #4]
 8004640:	f7ff fbca 	bl	8003dd8 <I2C_RequestMemoryRead>
 8004644:	b1e8      	cbz	r0, 8004682 <HAL_I2C_Mem_Read_DMA+0x12a>
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004646:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004648:	f7ff f8e0 	bl	800380c <HAL_DMA_Abort_IT>
          hi2c->hdmarx->XferCpltCallback = NULL;
 800464c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800464e:	629d      	str	r5, [r3, #40]	; 0x28
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004658:	601a      	str	r2, [r3, #0]
          hi2c->XferCount = 0U;
 800465a:	8565      	strh	r5, [r4, #42]	; 0x2a
          __HAL_I2C_DISABLE(hi2c);
 800465c:	681a      	ldr	r2, [r3, #0]
          hi2c->XferSize = 0U;
 800465e:	8525      	strh	r5, [r4, #40]	; 0x28
          __HAL_I2C_DISABLE(hi2c);
 8004660:	f022 0201 	bic.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004666:	e00a      	b.n	800467e <HAL_I2C_Mem_Read_DMA+0x126>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004668:	2320      	movs	r3, #32
 800466a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800466e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004672:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004674:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467c:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800467e:	2001      	movs	r0, #1
 8004680:	e77c      	b.n	800457c <HAL_I2C_Mem_Read_DMA+0x24>
        if (hi2c->XferSize == 1U)
 8004682:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004684:	6823      	ldr	r3, [r4, #0]
        if (hi2c->XferSize == 1U)
 8004686:	2a01      	cmp	r2, #1
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004688:	bf0b      	itete	eq
 800468a:	681a      	ldreq	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800468c:	685a      	ldrne	r2, [r3, #4]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468e:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004692:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004696:	bf0c      	ite	eq
 8004698:	601a      	streq	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800469a:	605a      	strne	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469c:	2200      	movs	r2, #0
 800469e:	9204      	str	r2, [sp, #16]
 80046a0:	6959      	ldr	r1, [r3, #20]
 80046a2:	9104      	str	r1, [sp, #16]
 80046a4:	6999      	ldr	r1, [r3, #24]
        __HAL_UNLOCK(hi2c);
 80046a6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046aa:	9104      	str	r1, [sp, #16]
 80046ac:	9904      	ldr	r1, [sp, #16]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b4:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	e75d      	b.n	800457c <HAL_I2C_Mem_Read_DMA+0x24>
        hi2c->State     = HAL_I2C_STATE_READY;
 80046c0:	2320      	movs	r3, #32
 80046c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80046c6:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80046ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80046cc:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80046d6:	e7d2      	b.n	800467e <HAL_I2C_Mem_Read_DMA+0x126>
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80046d8:	2323      	movs	r3, #35	; 0x23
 80046da:	4642      	mov	r2, r8
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	4639      	mov	r1, r7
 80046e0:	464b      	mov	r3, r9
 80046e2:	4620      	mov	r0, r4
 80046e4:	f8cd a004 	str.w	sl, [sp, #4]
 80046e8:	f7ff fb76 	bl	8003dd8 <I2C_RequestMemoryRead>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d1c6      	bne.n	800467e <HAL_I2C_Mem_Read_DMA+0x126>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	9005      	str	r0, [sp, #20]
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	9205      	str	r2, [sp, #20]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	9205      	str	r2, [sp, #20]
 80046fc:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004704:	601a      	str	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8004706:	2320      	movs	r3, #32
      __HAL_UNLOCK(hi2c);
 8004708:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hi2c->State = HAL_I2C_STATE_READY;
 800470c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8004710:	e734      	b.n	800457c <HAL_I2C_Mem_Read_DMA+0x24>
 8004712:	bf00      	nop
 8004714:	20000004 	.word	0x20000004
 8004718:	ffff0000 	.word	0xffff0000
 800471c:	0800481f 	.word	0x0800481f
 8004720:	080047e5 	.word	0x080047e5

08004724 <HAL_I2C_MasterTxCpltCallback>:
 8004724:	4770      	bx	lr

08004726 <HAL_I2C_MasterRxCpltCallback>:
 8004726:	4770      	bx	lr

08004728 <HAL_I2C_SlaveTxCpltCallback>:
 8004728:	4770      	bx	lr

0800472a <HAL_I2C_SlaveRxCpltCallback>:
 800472a:	4770      	bx	lr

0800472c <HAL_I2C_AddrCallback>:
}
 800472c:	4770      	bx	lr

0800472e <HAL_I2C_ListenCpltCallback>:
 800472e:	4770      	bx	lr

08004730 <HAL_I2C_MemTxCpltCallback>:
 8004730:	4770      	bx	lr

08004732 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004732:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8004736:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8004738:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800473a:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 800473c:	b983      	cbnz	r3, 8004760 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800473e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004740:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004742:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004744:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004746:	d105      	bne.n	8004754 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004748:	b2db      	uxtb	r3, r3
 800474a:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 800474c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800474e:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8004750:	6503      	str	r3, [r0, #80]	; 0x50
}
 8004752:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004754:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004758:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 800475a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800475c:	3301      	adds	r3, #1
 800475e:	e7f7      	b.n	8004750 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8004760:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004762:	2b01      	cmp	r3, #1
 8004764:	d103      	bne.n	800476e <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004766:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004768:	6802      	ldr	r2, [r0, #0]
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e7f4      	b.n	8004758 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 800476e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004770:	2b02      	cmp	r3, #2
 8004772:	d12f      	bne.n	80047d4 <I2C_MemoryTransmit_TXE_BTF+0xa2>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004774:	2a22      	cmp	r2, #34	; 0x22
 8004776:	d105      	bne.n	8004784 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004778:	6802      	ldr	r2, [r0, #0]
 800477a:	6813      	ldr	r3, [r2, #0]
 800477c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004780:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 8004782:	e7ea      	b.n	800475a <I2C_MemoryTransmit_TXE_BTF+0x28>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004784:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	b163      	cbz	r3, 80047a4 <I2C_MemoryTransmit_TXE_BTF+0x72>
 800478a:	2a21      	cmp	r2, #33	; 0x21
 800478c:	d10a      	bne.n	80047a4 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800478e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004790:	6802      	ldr	r2, [r0, #0]
 8004792:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004796:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 8004798:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 800479a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800479c:	3b01      	subs	r3, #1
 800479e:	b29b      	uxth	r3, r3
 80047a0:	8543      	strh	r3, [r0, #42]	; 0x2a
 80047a2:	e7d6      	b.n	8004752 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047a4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1d2      	bne.n	8004752 <I2C_MemoryTransmit_TXE_BTF+0x20>
 80047ac:	2a21      	cmp	r2, #33	; 0x21
 80047ae:	d1d0      	bne.n	8004752 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047b0:	6802      	ldr	r2, [r0, #0]
 80047b2:	6851      	ldr	r1, [r2, #4]
 80047b4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80047b8:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ba:	6811      	ldr	r1, [r2, #0]
 80047bc:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80047c0:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80047c4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047ce:	f7ff ffaf 	bl	8004730 <HAL_I2C_MemTxCpltCallback>
 80047d2:	e7be      	b.n	8004752 <I2C_MemoryTransmit_TXE_BTF+0x20>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80047d4:	6803      	ldr	r3, [r0, #0]
 80047d6:	695a      	ldr	r2, [r3, #20]
 80047d8:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 80047da:	bf44      	itt	mi
 80047dc:	2200      	movmi	r2, #0
 80047de:	611a      	strmi	r2, [r3, #16]
}
 80047e0:	e7b7      	b.n	8004752 <I2C_MemoryTransmit_TXE_BTF+0x20>

080047e2 <HAL_I2C_ErrorCallback>:
 80047e2:	4770      	bx	lr

080047e4 <I2C_DMAError>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80047e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80047e6:	b508      	push	{r3, lr}
  if (hi2c->hdmatx != NULL)
 80047e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047ea:	b10b      	cbz	r3, 80047f0 <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80047ec:	2200      	movs	r2, #0
 80047ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80047f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80047f2:	b10b      	cbz	r3, 80047f8 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80047f4:	2200      	movs	r2, #0
 80047f6:	629a      	str	r2, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f8:	6802      	ldr	r2, [r0, #0]
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004800:	6013      	str	r3, [r2, #0]
  hi2c->XferCount       = 0U;
 8004802:	2300      	movs	r3, #0
  hi2c->State           = HAL_I2C_STATE_READY;
 8004804:	2220      	movs	r2, #32
  hi2c->XferCount       = 0U;
 8004806:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8004808:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800480c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8004810:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004812:	f043 0310 	orr.w	r3, r3, #16
 8004816:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_I2C_ErrorCallback(hi2c);
 8004818:	f7ff ffe3 	bl	80047e2 <HAL_I2C_ErrorCallback>
}
 800481c:	bd08      	pop	{r3, pc}

0800481e <I2C_DMAXferCplt>:
{
 800481e:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004820:	6a44      	ldr	r4, [r0, #36]	; 0x24
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004822:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004824:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004828:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800482c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800482e:	685d      	ldr	r5, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004830:	b2c9      	uxtb	r1, r1
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004832:	f425 7540 	bic.w	r5, r5, #768	; 0x300
 8004836:	605d      	str	r5, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8004838:	6b65      	ldr	r5, [r4, #52]	; 0x34
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800483a:	b2c0      	uxtb	r0, r0
  if (hi2c->hdmatx != NULL)
 800483c:	b10d      	cbz	r5, 8004842 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 800483e:	2600      	movs	r6, #0
 8004840:	62ae      	str	r6, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8004842:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8004844:	b10d      	cbz	r5, 800484a <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004846:	2600      	movs	r6, #0
 8004848:	62ae      	str	r6, [r5, #40]	; 0x28
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800484a:	f001 0521 	and.w	r5, r1, #33	; 0x21
 800484e:	2d21      	cmp	r5, #33	; 0x21
 8004850:	d005      	beq.n	800485e <I2C_DMAXferCplt+0x40>
 8004852:	f001 0522 	and.w	r5, r1, #34	; 0x22
 8004856:	2d22      	cmp	r5, #34	; 0x22
 8004858:	d123      	bne.n	80048a2 <I2C_DMAXferCplt+0x84>
 800485a:	2820      	cmp	r0, #32
 800485c:	d121      	bne.n	80048a2 <I2C_DMAXferCplt+0x84>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800485e:	685a      	ldr	r2, [r3, #4]
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004860:	2929      	cmp	r1, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004866:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800486e:	d10d      	bne.n	800488c <I2C_DMAXferCplt+0x6e>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004870:	2321      	movs	r3, #33	; 0x21
 8004872:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004874:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004876:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004878:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800487c:	f7ff ff54 	bl	8004728 <HAL_I2C_SlaveTxCpltCallback>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	6853      	ldr	r3, [r2, #4]
 8004884:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004888:	6053      	str	r3, [r2, #4]
}
 800488a:	bd70      	pop	{r4, r5, r6, pc}
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800488c:	292a      	cmp	r1, #42	; 0x2a
 800488e:	d1f7      	bne.n	8004880 <I2C_DMAXferCplt+0x62>
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004890:	2322      	movs	r3, #34	; 0x22
 8004892:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004894:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004896:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004898:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800489c:	f7ff ff45 	bl	800472a <HAL_I2C_SlaveRxCpltCallback>
 80048a0:	e7ee      	b.n	8004880 <I2C_DMAXferCplt+0x62>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80048a2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d0ef      	beq.n	800488a <I2C_DMAXferCplt+0x6c>
    if (hi2c->XferCount == (uint16_t)1)
 80048aa:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80048ac:	b289      	uxth	r1, r1
 80048ae:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b0:	bf02      	ittt	eq
 80048b2:	6819      	ldreq	r1, [r3, #0]
 80048b4:	f421 6180 	biceq.w	r1, r1, #1024	; 0x400
 80048b8:	6019      	streq	r1, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048ba:	6859      	ldr	r1, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048bc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048c0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80048c4:	6059      	str	r1, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80048c6:	d006      	beq.n	80048d6 <I2C_DMAXferCplt+0xb8>
 80048c8:	2a08      	cmp	r2, #8
 80048ca:	d004      	beq.n	80048d6 <I2C_DMAXferCplt+0xb8>
 80048cc:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 80048d0:	d001      	beq.n	80048d6 <I2C_DMAXferCplt+0xb8>
 80048d2:	2a20      	cmp	r2, #32
 80048d4:	d103      	bne.n	80048de <I2C_DMAXferCplt+0xc0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d6:	6819      	ldr	r1, [r3, #0]
 80048d8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80048dc:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048de:	6859      	ldr	r1, [r3, #4]
 80048e0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80048e4:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80048ec:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f4:	b11b      	cbz	r3, 80048fe <I2C_DMAXferCplt+0xe0>
      HAL_I2C_ErrorCallback(hi2c);
 80048f6:	4620      	mov	r0, r4
 80048f8:	f7ff ff73 	bl	80047e2 <HAL_I2C_ErrorCallback>
 80048fc:	e7c5      	b.n	800488a <I2C_DMAXferCplt+0x6c>
      hi2c->State = HAL_I2C_STATE_READY;
 80048fe:	2120      	movs	r1, #32
 8004900:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004904:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800490c:	2940      	cmp	r1, #64	; 0x40
 800490e:	d104      	bne.n	800491a <I2C_DMAXferCplt+0xfc>
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004910:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8004912:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004914:	f7fd fc82 	bl	800221c <HAL_I2C_MemRxCpltCallback>
 8004918:	e7b7      	b.n	800488a <I2C_DMAXferCplt+0x6c>
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800491a:	2a08      	cmp	r2, #8
 800491c:	d001      	beq.n	8004922 <I2C_DMAXferCplt+0x104>
 800491e:	2a20      	cmp	r2, #32
 8004920:	d105      	bne.n	800492e <I2C_DMAXferCplt+0x110>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004922:	2300      	movs	r3, #0
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004924:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004926:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004928:	f7ff fefd 	bl	8004726 <HAL_I2C_MasterRxCpltCallback>
}
 800492c:	e7ad      	b.n	800488a <I2C_DMAXferCplt+0x6c>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800492e:	2312      	movs	r3, #18
 8004930:	e7f8      	b.n	8004924 <I2C_DMAXferCplt+0x106>

08004932 <HAL_I2C_AbortCpltCallback>:
 8004932:	4770      	bx	lr

08004934 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8004934:	2300      	movs	r3, #0
{
 8004936:	b537      	push	{r0, r1, r2, r4, r5, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004938:	f246 11a8 	movw	r1, #25000	; 0x61a8
  __IO uint32_t count = 0U;
 800493c:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800493e:	4b2c      	ldr	r3, [pc, #176]	; (80049f0 <I2C_DMAAbort+0xbc>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004940:	6a40      	ldr	r0, [r0, #36]	; 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004942:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004944:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004948:	fbb3 f3f1 	udiv	r3, r3, r1
 800494c:	2123      	movs	r1, #35	; 0x23
 800494e:	434b      	muls	r3, r1
 8004950:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004952:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004954:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 8004956:	9901      	ldr	r1, [sp, #4]
 8004958:	bb41      	cbnz	r1, 80049ac <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800495a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800495c:	f041 0120 	orr.w	r1, r1, #32
 8004960:	6401      	str	r1, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8004962:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004964:	b10c      	cbz	r4, 800496a <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004966:	2100      	movs	r1, #0
 8004968:	62a1      	str	r1, [r4, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 800496a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800496c:	b109      	cbz	r1, 8004972 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800496e:	2500      	movs	r5, #0
 8004970:	628d      	str	r5, [r1, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004972:	681d      	ldr	r5, [r3, #0]
 8004974:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8004978:	601d      	str	r5, [r3, #0]
  hi2c->XferCount = 0U;
 800497a:	2500      	movs	r5, #0
 800497c:	8545      	strh	r5, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800497e:	b104      	cbz	r4, 8004982 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004980:	6365      	str	r5, [r4, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8004982:	b101      	cbz	r1, 8004986 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004984:	634d      	str	r5, [r1, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	f021 0101 	bic.w	r1, r1, #1
 800498c:	6019      	str	r1, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800498e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8004992:	2960      	cmp	r1, #96	; 0x60
 8004994:	d111      	bne.n	80049ba <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004996:	2320      	movs	r3, #32
 8004998:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800499c:	2300      	movs	r3, #0
 800499e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049a2:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80049a4:	f7ff ffc5 	bl	8004932 <HAL_I2C_AbortCpltCallback>
}
 80049a8:	b003      	add	sp, #12
 80049aa:	bd30      	pop	{r4, r5, pc}
    count--;
 80049ac:	9901      	ldr	r1, [sp, #4]
 80049ae:	3901      	subs	r1, #1
 80049b0:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80049b2:	6819      	ldr	r1, [r3, #0]
 80049b4:	0589      	lsls	r1, r1, #22
 80049b6:	d4ce      	bmi.n	8004956 <I2C_DMAAbort+0x22>
 80049b8:	e7d3      	b.n	8004962 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ba:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80049be:	2a28      	cmp	r2, #40	; 0x28
 80049c0:	d10e      	bne.n	80049e0 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	f041 0101 	orr.w	r1, r1, #1
 80049c8:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ca:	6819      	ldr	r1, [r3, #0]
 80049cc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80049d0:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 80049da:	f7ff ff02 	bl	80047e2 <HAL_I2C_ErrorCallback>
}
 80049de:	e7e3      	b.n	80049a8 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	2320      	movs	r3, #32
 80049e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80049ec:	e7f5      	b.n	80049da <I2C_DMAAbort+0xa6>
 80049ee:	bf00      	nop
 80049f0:	20000004 	.word	0x20000004

080049f4 <I2C_ITError>:
{
 80049f4:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049f6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80049fa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 80049fe:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a00:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a02:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a04:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a06:	6803      	ldr	r3, [r0, #0]
 8004a08:	d001      	beq.n	8004a0e <I2C_ITError+0x1a>
 8004a0a:	2940      	cmp	r1, #64	; 0x40
 8004a0c:	d113      	bne.n	8004a36 <I2C_ITError+0x42>
 8004a0e:	2a22      	cmp	r2, #34	; 0x22
 8004a10:	d111      	bne.n	8004a36 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004a18:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a1a:	6859      	ldr	r1, [r3, #4]
 8004a1c:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 8004a20:	d106      	bne.n	8004a30 <I2C_ITError+0x3c>
 8004a22:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	bf1e      	ittt	ne
 8004a26:	2220      	movne	r2, #32
 8004a28:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a30:	2200      	movs	r2, #0
 8004a32:	6322      	str	r2, [r4, #48]	; 0x30
 8004a34:	e007      	b.n	8004a46 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a36:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8004a3a:	2928      	cmp	r1, #40	; 0x28
 8004a3c:	d1ed      	bne.n	8004a1a <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a3e:	2200      	movs	r2, #0
 8004a40:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a42:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8004a4c:	d04f      	beq.n	8004aee <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a4e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a50:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a56:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a58:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	4b37      	ldr	r3, [pc, #220]	; (8004b3c <I2C_ITError+0x148>)
 8004a60:	d02b      	beq.n	8004aba <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a62:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a64:	f7fe fed2 	bl	800380c <HAL_DMA_Abort_IT>
 8004a68:	b150      	cbz	r0, 8004a80 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8004a6a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a6c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8004a6e:	6813      	ldr	r3, [r2, #0]
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	2320      	movs	r3, #32
 8004a78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a7e:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8004a80:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004a82:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a84:	bf1f      	itttt	ne
 8004a86:	6822      	ldrne	r2, [r4, #0]
 8004a88:	6853      	ldrne	r3, [r2, #4]
 8004a8a:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 8004a8e:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8004a90:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a94:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8004a96:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a98:	0752      	lsls	r2, r2, #29
 8004a9a:	d50d      	bpl.n	8004ab8 <I2C_ITError+0xc4>
 8004a9c:	2b28      	cmp	r3, #40	; 0x28
 8004a9e:	d10b      	bne.n	8004ab8 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aa0:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8004aa2:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004aa4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aa6:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8004aa8:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aaa:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004aac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ab0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004ab4:	f7ff fe3b 	bl	800472e <HAL_I2C_ListenCpltCallback>
}
 8004ab8:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004aba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004abc:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004abe:	f7fe fea5 	bl	800380c <HAL_DMA_Abort_IT>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0dc      	beq.n	8004a80 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	0651      	lsls	r1, r2, #25
 8004acc:	d505      	bpl.n	8004ada <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004ada:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004adc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8004ade:	6813      	ldr	r3, [r2, #0]
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	2320      	movs	r3, #32
 8004ae8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004aec:	e7c6      	b.n	8004a7c <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004aee:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8004af2:	2960      	cmp	r1, #96	; 0x60
 8004af4:	d115      	bne.n	8004b22 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	2120      	movs	r1, #32
 8004af8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004afc:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	0652      	lsls	r2, r2, #25
 8004b02:	d505      	bpl.n	8004b10 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b08:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004b10:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b12:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8004b14:	6813      	ldr	r3, [r2, #0]
 8004b16:	f023 0301 	bic.w	r3, r3, #1
 8004b1a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b1c:	f7ff ff09 	bl	8004932 <HAL_I2C_AbortCpltCallback>
 8004b20:	e7ae      	b.n	8004a80 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	0650      	lsls	r0, r2, #25
 8004b26:	d505      	bpl.n	8004b34 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b2c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004b2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b30:	3301      	adds	r3, #1
 8004b32:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8004b34:	4620      	mov	r0, r4
 8004b36:	f7ff fe54 	bl	80047e2 <HAL_I2C_ErrorCallback>
 8004b3a:	e7a1      	b.n	8004a80 <I2C_ITError+0x8c>
 8004b3c:	08004935 	.word	0x08004935
 8004b40:	ffff0000 	.word	0xffff0000

08004b44 <HAL_I2C_EV_IRQHandler>:
{
 8004b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b46:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b48:	6803      	ldr	r3, [r0, #0]
{
 8004b4a:	b08f      	sub	sp, #60	; 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b4c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b4e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b50:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b54:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b58:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b5a:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b5c:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b5e:	d002      	beq.n	8004b66 <HAL_I2C_EV_IRQHandler+0x22>
 8004b60:	2d40      	cmp	r5, #64	; 0x40
 8004b62:	f040 82e3 	bne.w	800512c <HAL_I2C_EV_IRQHandler+0x5e8>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b66:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004b68:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004b6a:	f010 0f01 	tst.w	r0, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_I2C_EV_IRQHandler+0x3c>
 8004b70:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8004b74:	d002      	beq.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8004b76:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8004b7a:	d151      	bne.n	8004c20 <HAL_I2C_EV_IRQHandler+0xdc>
}
 8004b7c:	b00f      	add	sp, #60	; 0x3c
 8004b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b80:	0596      	lsls	r6, r2, #22
 8004b82:	d54d      	bpl.n	8004c20 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004b86:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004b8c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004b8e:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b90:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004b94:	2a40      	cmp	r2, #64	; 0x40
 8004b96:	d111      	bne.n	8004bbc <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8004b98:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004b9a:	b952      	cbnz	r2, 8004bb2 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004b9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ba2:	611a      	str	r2, [r3, #16]
 8004ba4:	e7ea      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ba8:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8004bac:	d1f0      	bne.n	8004b90 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004bae:	2208      	movs	r2, #8
 8004bb0:	e7ed      	b.n	8004b8e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004bb4:	f042 0201 	orr.w	r2, r2, #1
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	e7f2      	b.n	8004ba2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bbc:	6922      	ldr	r2, [r4, #16]
 8004bbe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8004bc2:	d11a      	bne.n	8004bfa <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bc4:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004bc8:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bca:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bcc:	d111      	bne.n	8004bf2 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004bd2:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004bd6:	b10a      	cbz	r2, 8004bdc <HAL_I2C_EV_IRQHandler+0x98>
 8004bd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004bda:	b92a      	cbnz	r2, 8004be8 <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bde:	2a00      	cmp	r2, #0
 8004be0:	d0cc      	beq.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8004be2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	d0c9      	beq.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bee:	605a      	str	r2, [r3, #4]
 8004bf0:	e7c4      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	e7eb      	b.n	8004bd2 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 8004bfa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004bfc:	b932      	cbnz	r2, 8004c0c <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004c00:	11d2      	asrs	r2, r2, #7
 8004c02:	f002 0206 	and.w	r2, r2, #6
 8004c06:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8004c0a:	e7ca      	b.n	8004ba2 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8004c0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004c0e:	2a01      	cmp	r2, #1
 8004c10:	d1b4      	bne.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c12:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004c14:	11d2      	asrs	r2, r2, #7
 8004c16:	f002 0206 	and.w	r2, r2, #6
 8004c1a:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8004c1e:	e7c0      	b.n	8004ba2 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c20:	0706      	lsls	r6, r0, #28
 8004c22:	d503      	bpl.n	8004c2c <HAL_I2C_EV_IRQHandler+0xe8>
 8004c24:	0596      	lsls	r6, r2, #22
 8004c26:	d501      	bpl.n	8004c2c <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c28:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004c2a:	e7e4      	b.n	8004bf6 <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c2c:	0786      	lsls	r6, r0, #30
 8004c2e:	f140 80f0 	bpl.w	8004e12 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004c32:	0596      	lsls	r6, r2, #22
 8004c34:	f140 80ed 	bpl.w	8004e12 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c38:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004c3e:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c40:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c44:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c46:	2822      	cmp	r0, #34	; 0x22
 8004c48:	f040 80db 	bne.w	8004e02 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004c4c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004c4e:	b940      	cbnz	r0, 8004c62 <HAL_I2C_EV_IRQHandler+0x11e>
 8004c50:	2940      	cmp	r1, #64	; 0x40
 8004c52:	d106      	bne.n	8004c62 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c54:	9000      	str	r0, [sp, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	9200      	str	r2, [sp, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	9b00      	ldr	r3, [sp, #0]
 8004c60:	e78c      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004c62:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004c64:	b989      	cbnz	r1, 8004c8a <HAL_I2C_EV_IRQHandler+0x146>
 8004c66:	6920      	ldr	r0, [r4, #16]
 8004c68:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8004c6c:	d10d      	bne.n	8004c8a <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c6e:	9101      	str	r1, [sp, #4]
 8004c70:	695a      	ldr	r2, [r3, #20]
 8004c72:	9201      	str	r2, [sp, #4]
 8004c74:	699a      	ldr	r2, [r3, #24]
 8004c76:	9201      	str	r2, [sp, #4]
 8004c78:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c80:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004c82:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004c84:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8004c86:	6523      	str	r3, [r4, #80]	; 0x50
 8004c88:	e778      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8004c8a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004c8c:	b289      	uxth	r1, r1
 8004c8e:	b951      	cbnz	r1, 8004ca6 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c90:	9102      	str	r1, [sp, #8]
 8004c92:	695a      	ldr	r2, [r3, #20]
 8004c94:	9202      	str	r2, [sp, #8]
 8004c96:	699a      	ldr	r2, [r3, #24]
 8004c98:	9202      	str	r2, [sp, #8]
 8004c9a:	9a02      	ldr	r2, [sp, #8]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	e019      	b.n	8004cda <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 8004ca6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004ca8:	b289      	uxth	r1, r1
 8004caa:	2901      	cmp	r1, #1
 8004cac:	d149      	bne.n	8004d42 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004cae:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004cb2:	d11b      	bne.n	8004cec <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8004cc2:	d00c      	beq.n	8004cde <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cca:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ccc:	2200      	movs	r2, #0
 8004cce:	9203      	str	r2, [sp, #12]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	9203      	str	r2, [sp, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	9303      	str	r3, [sp, #12]
 8004cd8:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e7d3      	b.n	8004c86 <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	9204      	str	r2, [sp, #16]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	9204      	str	r2, [sp, #16]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	9204      	str	r2, [sp, #16]
 8004ce8:	9a04      	ldr	r2, [sp, #16]
 8004cea:	e7d7      	b.n	8004c9c <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cec:	2a08      	cmp	r2, #8
 8004cee:	d01c      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0x1e6>
 8004cf0:	2a20      	cmp	r2, #32
 8004cf2:	d01a      	beq.n	8004d2a <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cf4:	2d12      	cmp	r5, #18
 8004cf6:	d10d      	bne.n	8004d14 <HAL_I2C_EV_IRQHandler+0x1d0>
 8004cf8:	2a01      	cmp	r2, #1
 8004cfa:	d116      	bne.n	8004d2a <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d04:	2200      	movs	r2, #0
 8004d06:	9205      	str	r2, [sp, #20]
 8004d08:	695a      	ldr	r2, [r3, #20]
 8004d0a:	9205      	str	r2, [sp, #20]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	9b05      	ldr	r3, [sp, #20]
 8004d12:	e7e2      	b.n	8004cda <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d14:	2a10      	cmp	r2, #16
 8004d16:	d8f1      	bhi.n	8004cfc <HAL_I2C_EV_IRQHandler+0x1b8>
 8004d18:	4986      	ldr	r1, [pc, #536]	; (8004f34 <HAL_I2C_EV_IRQHandler+0x3f0>)
 8004d1a:	fa21 f202 	lsr.w	r2, r1, r2
 8004d1e:	07d7      	lsls	r7, r2, #31
 8004d20:	d5ec      	bpl.n	8004cfc <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d28:	e7eb      	b.n	8004d02 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d30:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d32:	2200      	movs	r2, #0
 8004d34:	9206      	str	r2, [sp, #24]
 8004d36:	695a      	ldr	r2, [r3, #20]
 8004d38:	9206      	str	r2, [sp, #24]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	9206      	str	r2, [sp, #24]
 8004d3e:	9a06      	ldr	r2, [sp, #24]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	e7ac      	b.n	8004c9c <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8004d42:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004d44:	b289      	uxth	r1, r1
 8004d46:	2902      	cmp	r1, #2
 8004d48:	d138      	bne.n	8004dbc <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d4a:	2a10      	cmp	r2, #16
 8004d4c:	d803      	bhi.n	8004d56 <HAL_I2C_EV_IRQHandler+0x212>
 8004d4e:	4979      	ldr	r1, [pc, #484]	; (8004f34 <HAL_I2C_EV_IRQHandler+0x3f0>)
 8004d50:	40d1      	lsrs	r1, r2
 8004d52:	07ce      	lsls	r6, r1, #31
 8004d54:	d418      	bmi.n	8004d88 <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d56:	6819      	ldr	r1, [r3, #0]
 8004d58:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004d5c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	9107      	str	r1, [sp, #28]
 8004d62:	6959      	ldr	r1, [r3, #20]
 8004d64:	9107      	str	r1, [sp, #28]
 8004d66:	6999      	ldr	r1, [r3, #24]
 8004d68:	9107      	str	r1, [sp, #28]
 8004d6a:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6c:	6819      	ldr	r1, [r3, #0]
 8004d6e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004d72:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	050d      	lsls	r5, r1, #20
 8004d78:	d5af      	bpl.n	8004cda <HAL_I2C_EV_IRQHandler+0x196>
 8004d7a:	2a20      	cmp	r2, #32
 8004d7c:	d81b      	bhi.n	8004db6 <HAL_I2C_EV_IRQHandler+0x272>
 8004d7e:	2a07      	cmp	r2, #7
 8004d80:	d80e      	bhi.n	8004da0 <HAL_I2C_EV_IRQHandler+0x25c>
 8004d82:	2a01      	cmp	r2, #1
 8004d84:	d1a9      	bne.n	8004cda <HAL_I2C_EV_IRQHandler+0x196>
 8004d86:	e011      	b.n	8004dac <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d88:	6819      	ldr	r1, [r3, #0]
 8004d8a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004d8e:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d90:	2100      	movs	r1, #0
 8004d92:	9108      	str	r1, [sp, #32]
 8004d94:	6959      	ldr	r1, [r3, #20]
 8004d96:	9108      	str	r1, [sp, #32]
 8004d98:	6999      	ldr	r1, [r3, #24]
 8004d9a:	9108      	str	r1, [sp, #32]
 8004d9c:	9908      	ldr	r1, [sp, #32]
 8004d9e:	e7e9      	b.n	8004d74 <HAL_I2C_EV_IRQHandler+0x230>
 8004da0:	f1a2 0108 	sub.w	r1, r2, #8
 8004da4:	4a64      	ldr	r2, [pc, #400]	; (8004f38 <HAL_I2C_EV_IRQHandler+0x3f4>)
 8004da6:	40ca      	lsrs	r2, r1
 8004da8:	07d0      	lsls	r0, r2, #31
 8004daa:	d596      	bpl.n	8004cda <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004db2:	605a      	str	r2, [r3, #4]
 8004db4:	e791      	b.n	8004cda <HAL_I2C_EV_IRQHandler+0x196>
 8004db6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004dba:	e7e3      	b.n	8004d84 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004dc2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004dc4:	6859      	ldr	r1, [r3, #4]
 8004dc6:	0509      	lsls	r1, r1, #20
 8004dc8:	d505      	bpl.n	8004dd6 <HAL_I2C_EV_IRQHandler+0x292>
 8004dca:	2a20      	cmp	r2, #32
 8004dcc:	d816      	bhi.n	8004dfc <HAL_I2C_EV_IRQHandler+0x2b8>
 8004dce:	2a07      	cmp	r2, #7
 8004dd0:	d809      	bhi.n	8004de6 <HAL_I2C_EV_IRQHandler+0x2a2>
 8004dd2:	2a01      	cmp	r2, #1
 8004dd4:	d00d      	beq.n	8004df2 <HAL_I2C_EV_IRQHandler+0x2ae>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	9209      	str	r2, [sp, #36]	; 0x24
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	9309      	str	r3, [sp, #36]	; 0x24
 8004de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de4:	e779      	b.n	8004cda <HAL_I2C_EV_IRQHandler+0x196>
 8004de6:	f1a2 0108 	sub.w	r1, r2, #8
 8004dea:	4a53      	ldr	r2, [pc, #332]	; (8004f38 <HAL_I2C_EV_IRQHandler+0x3f4>)
 8004dec:	40ca      	lsrs	r2, r1
 8004dee:	07d2      	lsls	r2, r2, #31
 8004df0:	d5f1      	bpl.n	8004dd6 <HAL_I2C_EV_IRQHandler+0x292>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	e7ec      	b.n	8004dd6 <HAL_I2C_EV_IRQHandler+0x292>
 8004dfc:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8004e00:	e7e8      	b.n	8004dd4 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2200      	movs	r2, #0
 8004e04:	920a      	str	r2, [sp, #40]	; 0x28
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	920a      	str	r2, [sp, #40]	; 0x28
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e10:	e6b4      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e12:	077f      	lsls	r7, r7, #29
 8004e14:	f140 8092 	bpl.w	8004f3c <HAL_I2C_EV_IRQHandler+0x3f8>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e18:	685e      	ldr	r6, [r3, #4]
 8004e1a:	0536      	lsls	r6, r6, #20
 8004e1c:	f53f aeae 	bmi.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e20:	0607      	lsls	r7, r0, #24
 8004e22:	f000 0604 	and.w	r6, r0, #4
 8004e26:	d53e      	bpl.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x362>
 8004e28:	0550      	lsls	r0, r2, #21
 8004e2a:	d53c      	bpl.n	8004ea6 <HAL_I2C_EV_IRQHandler+0x362>
 8004e2c:	2e00      	cmp	r6, #0
 8004e2e:	d13d      	bne.n	8004eac <HAL_I2C_EV_IRQHandler+0x368>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e30:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e34:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e36:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e3a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e3c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e3e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e40:	b9c5      	cbnz	r5, 8004e74 <HAL_I2C_EV_IRQHandler+0x330>
 8004e42:	2a21      	cmp	r2, #33	; 0x21
 8004e44:	d118      	bne.n	8004e78 <HAL_I2C_EV_IRQHandler+0x334>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e46:	2808      	cmp	r0, #8
 8004e48:	d058      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x3b8>
 8004e4a:	2820      	cmp	r0, #32
 8004e4c:	d056      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x3b8>
 8004e4e:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8004e52:	d053      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x3b8>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e5a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e5c:	2311      	movs	r3, #17
 8004e5e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	2320      	movs	r3, #32
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e68:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8004e6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e6e:	f7ff fc59 	bl	8004724 <HAL_I2C_MasterTxCpltCallback>
 8004e72:	e683      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e74:	2a21      	cmp	r2, #33	; 0x21
 8004e76:	d005      	beq.n	8004e84 <HAL_I2C_EV_IRQHandler+0x340>
 8004e78:	2940      	cmp	r1, #64	; 0x40
 8004e7a:	f47f ae7f 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e7e:	2a22      	cmp	r2, #34	; 0x22
 8004e80:	f47f ae7c 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8004e84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004e86:	b292      	uxth	r2, r2
 8004e88:	b91a      	cbnz	r2, 8004e92 <HAL_I2C_EV_IRQHandler+0x34e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	e6ad      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e92:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004e96:	2a40      	cmp	r2, #64	; 0x40
 8004e98:	d116      	bne.n	8004ec8 <HAL_I2C_EV_IRQHandler+0x384>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e9a:	4620      	mov	r0, r4
}
 8004e9c:	b00f      	add	sp, #60	; 0x3c
 8004e9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ea2:	f7ff bc46 	b.w	8004732 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ea6:	2e00      	cmp	r6, #0
 8004ea8:	f43f ae68 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8004eac:	0597      	lsls	r7, r2, #22
 8004eae:	f57f ae65 	bpl.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004eb2:	2921      	cmp	r1, #33	; 0x21
 8004eb4:	d139      	bne.n	8004f2a <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004eb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004eb8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004ebc:	2a21      	cmp	r2, #33	; 0x21
 8004ebe:	f47f ae5d 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8004ec2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004ec4:	b292      	uxth	r2, r2
 8004ec6:	b14a      	cbz	r2, 8004edc <HAL_I2C_EV_IRQHandler+0x398>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ec8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004eca:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004ece:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8004ed0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004ed2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8004eda:	e64f      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004edc:	2908      	cmp	r1, #8
 8004ede:	d00d      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x3b8>
 8004ee0:	2920      	cmp	r1, #32
 8004ee2:	d00b      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x3b8>
 8004ee4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8004ee8:	d008      	beq.n	8004efc <HAL_I2C_EV_IRQHandler+0x3b8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eea:	6859      	ldr	r1, [r3, #4]
 8004eec:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8004ef0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ef2:	2311      	movs	r3, #17
 8004ef4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ef6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8004efa:	e7b4      	b.n	8004e66 <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004efc:	685a      	ldr	r2, [r3, #4]
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004efe:	4620      	mov	r0, r4
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f04:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f0e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004f10:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f12:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f18:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f20:	2a40      	cmp	r2, #64	; 0x40
 8004f22:	d1a4      	bne.n	8004e6e <HAL_I2C_EV_IRQHandler+0x32a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f24:	f7ff fc04 	bl	8004730 <HAL_I2C_MemTxCpltCallback>
 8004f28:	e628      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004f2a:	2d40      	cmp	r5, #64	; 0x40
 8004f2c:	f47f ae26 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8004f30:	e7b3      	b.n	8004e9a <HAL_I2C_EV_IRQHandler+0x356>
 8004f32:	bf00      	nop
 8004f34:	00010014 	.word	0x00010014
 8004f38:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	050e      	lsls	r6, r1, #20
 8004f40:	f53f ae1c 	bmi.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f44:	0645      	lsls	r5, r0, #25
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f46:	f000 0104 	and.w	r1, r0, #4
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f4a:	f140 8086 	bpl.w	800505a <HAL_I2C_EV_IRQHandler+0x516>
 8004f4e:	0550      	lsls	r0, r2, #21
 8004f50:	f140 8083 	bpl.w	800505a <HAL_I2C_EV_IRQHandler+0x516>
 8004f54:	2900      	cmp	r1, #0
 8004f56:	f040 8083 	bne.w	8005060 <HAL_I2C_EV_IRQHandler+0x51c>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f5a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004f5e:	2a22      	cmp	r2, #34	; 0x22
 8004f60:	f47f ae0c 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 8004f64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    tmp = hi2c->XferCount;
 8004f66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004f68:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8004f6a:	2a03      	cmp	r2, #3
 8004f6c:	d914      	bls.n	8004f98 <HAL_I2C_EV_IRQHandler+0x454>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f72:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f76:	3301      	adds	r3, #1
 8004f78:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004f7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004f82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	f47f adf8 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f8c:	6822      	ldr	r2, [r4, #0]
 8004f8e:	6853      	ldr	r3, [r2, #4]
 8004f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f94:	6053      	str	r3, [r2, #4]
 8004f96:	e5f1      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f98:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8004f9a:	2d02      	cmp	r5, #2
 8004f9c:	f43f af75 	beq.w	8004e8a <HAL_I2C_EV_IRQHandler+0x346>
 8004fa0:	2a01      	cmp	r2, #1
 8004fa2:	f63f af72 	bhi.w	8004e8a <HAL_I2C_EV_IRQHandler+0x346>
  __IO uint32_t count = 0U;
 8004fa6:	910b      	str	r1, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fa8:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004fac:	4a78      	ldr	r2, [pc, #480]	; (8005190 <HAL_I2C_EV_IRQHandler+0x64c>)
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	fbb2 f2f1 	udiv	r2, r2, r1
 8004fb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004fb8:	920b      	str	r2, [sp, #44]	; 0x2c
    count--;
 8004fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004fbc:	3a01      	subs	r2, #1
 8004fbe:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 8004fc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fc2:	b9d1      	cbnz	r1, 8004ffa <HAL_I2C_EV_IRQHandler+0x4b6>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8004fc6:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc8:	f042 0220 	orr.w	r2, r2, #32
 8004fcc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fd4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fda:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fde:	3301      	adds	r3, #1
 8004fe0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004fe2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	2320      	movs	r3, #32
 8004fec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ff4:	f7ff fbf5 	bl	80047e2 <HAL_I2C_ErrorCallback>
 8004ff8:	e5c0      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8005000:	d1db      	bne.n	8004fba <HAL_I2C_EV_IRQHandler+0x476>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005008:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800500a:	6859      	ldr	r1, [r3, #4]
 800500c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8005010:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	6919      	ldr	r1, [r3, #16]
 8005014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005016:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8005018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800501a:	3301      	adds	r3, #1
 800501c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800501e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005020:	3b01      	subs	r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005026:	2320      	movs	r3, #32
 8005028:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800502c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005030:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005034:	2b40      	cmp	r3, #64	; 0x40
 8005036:	d104      	bne.n	8005042 <HAL_I2C_EV_IRQHandler+0x4fe>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005038:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800503a:	4620      	mov	r0, r4
 800503c:	f7fd f8ee 	bl	800221c <HAL_I2C_MemRxCpltCallback>
 8005040:	e59c      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005042:	2808      	cmp	r0, #8
 8005044:	d001      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0x506>
 8005046:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005048:	d101      	bne.n	800504e <HAL_I2C_EV_IRQHandler+0x50a>
        hi2c->PreviousState = I2C_STATE_NONE;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <HAL_I2C_EV_IRQHandler+0x50c>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800504e:	2312      	movs	r3, #18
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005050:	4620      	mov	r0, r4
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005052:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005054:	f7ff fb67 	bl	8004726 <HAL_I2C_MasterRxCpltCallback>
 8005058:	e590      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800505a:	2900      	cmp	r1, #0
 800505c:	f43f ad8e 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8005060:	0592      	lsls	r2, r2, #22
 8005062:	f57f ad8b 	bpl.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8005068:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800506a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  if (hi2c->XferCount == 4U)
 800506c:	b280      	uxth	r0, r0
 800506e:	2804      	cmp	r0, #4
 8005070:	d109      	bne.n	8005086 <HAL_I2C_EV_IRQHandler+0x542>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005078:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800507e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005080:	3301      	adds	r3, #1
 8005082:	6263      	str	r3, [r4, #36]	; 0x24
 8005084:	e725      	b.n	8004ed2 <HAL_I2C_EV_IRQHandler+0x38e>
  else if (hi2c->XferCount == 3U)
 8005086:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8005088:	b280      	uxth	r0, r0
 800508a:	2803      	cmp	r0, #3
 800508c:	d10c      	bne.n	80050a8 <HAL_I2C_EV_IRQHandler+0x564>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800508e:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005090:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005092:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8005096:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005098:	d0ef      	beq.n	800507a <HAL_I2C_EV_IRQHandler+0x536>
 800509a:	2a02      	cmp	r2, #2
 800509c:	d0ed      	beq.n	800507a <HAL_I2C_EV_IRQHandler+0x536>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a6:	e7e8      	b.n	800507a <HAL_I2C_EV_IRQHandler+0x536>
  else if (hi2c->XferCount == 2U)
 80050a8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 80050aa:	b280      	uxth	r0, r0
 80050ac:	2802      	cmp	r0, #2
 80050ae:	d1e4      	bne.n	800507a <HAL_I2C_EV_IRQHandler+0x536>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80050b0:	2a04      	cmp	r2, #4
 80050b2:	d033      	beq.n	800511c <HAL_I2C_EV_IRQHandler+0x5d8>
 80050b4:	d807      	bhi.n	80050c6 <HAL_I2C_EV_IRQHandler+0x582>
 80050b6:	2a01      	cmp	r2, #1
 80050b8:	d007      	beq.n	80050ca <HAL_I2C_EV_IRQHandler+0x586>
 80050ba:	2a02      	cmp	r2, #2
 80050bc:	d02e      	beq.n	800511c <HAL_I2C_EV_IRQHandler+0x5d8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80050c4:	e004      	b.n	80050d0 <HAL_I2C_EV_IRQHandler+0x58c>
 80050c6:	2a10      	cmp	r2, #16
 80050c8:	d1f9      	bne.n	80050be <HAL_I2C_EV_IRQHandler+0x57a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d0:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80050d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050d8:	1c4b      	adds	r3, r1, #1
 80050da:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80050dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 80050ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050ec:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 80050ee:	3301      	adds	r3, #1
 80050f0:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80050f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050fa:	684b      	ldr	r3, [r1, #4]
 80050fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005100:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	2320      	movs	r3, #32
 8005104:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005108:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800510c:	2b40      	cmp	r3, #64	; 0x40
 800510e:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005112:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005116:	d105      	bne.n	8005124 <HAL_I2C_EV_IRQHandler+0x5e0>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005118:	6323      	str	r3, [r4, #48]	; 0x30
 800511a:	e78e      	b.n	800503a <HAL_I2C_EV_IRQHandler+0x4f6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8005122:	e7d5      	b.n	80050d0 <HAL_I2C_EV_IRQHandler+0x58c>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005124:	2a08      	cmp	r2, #8
 8005126:	d090      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0x506>
 8005128:	2a20      	cmp	r2, #32
 800512a:	e78d      	b.n	8005048 <HAL_I2C_EV_IRQHandler+0x504>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800512c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800512e:	b310      	cbz	r0, 8005176 <HAL_I2C_EV_IRQHandler+0x632>
  uint32_t sr2itflags               = 0U;
 8005130:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005132:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005134:	0787      	lsls	r7, r0, #30
 8005136:	d52d      	bpl.n	8005194 <HAL_I2C_EV_IRQHandler+0x650>
 8005138:	0596      	lsls	r6, r2, #22
 800513a:	d52b      	bpl.n	8005194 <HAL_I2C_EV_IRQHandler+0x650>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800513c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800513e:	b102      	cbz	r2, 8005142 <HAL_I2C_EV_IRQHandler+0x5fe>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005140:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005142:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005146:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800514a:	2a28      	cmp	r2, #40	; 0x28
 800514c:	d116      	bne.n	800517c <HAL_I2C_EV_IRQHandler+0x638>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800514e:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005150:	062f      	lsls	r7, r5, #24
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005156:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 8005158:	f04f 0300 	mov.w	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800515c:	f085 0104 	eor.w	r1, r5, #4
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005160:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005162:	bf54      	ite	pl
 8005164:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005166:	8b22      	ldrhmi	r2, [r4, #24]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005168:	f3c1 0180 	ubfx	r1, r1, #2, #1
    __HAL_UNLOCK(hi2c);
 800516c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005170:	f7ff fadc 	bl	800472c <HAL_I2C_AddrCallback>
 8005174:	e502      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005176:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005178:	6958      	ldr	r0, [r3, #20]
 800517a:	e7db      	b.n	8005134 <HAL_I2C_EV_IRQHandler+0x5f0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517c:	2200      	movs	r2, #0
 800517e:	920c      	str	r2, [sp, #48]	; 0x30
 8005180:	6959      	ldr	r1, [r3, #20]
 8005182:	910c      	str	r1, [sp, #48]	; 0x30
 8005184:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 8005186:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518a:	930c      	str	r3, [sp, #48]	; 0x30
 800518c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800518e:	e4f5      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8005190:	20000004 	.word	0x20000004
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005194:	06c6      	lsls	r6, r0, #27
 8005196:	f140 80b1 	bpl.w	80052fc <HAL_I2C_EV_IRQHandler+0x7b8>
 800519a:	0595      	lsls	r5, r2, #22
 800519c:	f140 80ae 	bpl.w	80052fc <HAL_I2C_EV_IRQHandler+0x7b8>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a0:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a4:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051a6:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ac:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051ae:	2200      	movs	r2, #0
 80051b0:	920d      	str	r2, [sp, #52]	; 0x34
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	920d      	str	r2, [sp, #52]	; 0x34
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	f042 0201 	orr.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c6:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	0510      	lsls	r0, r2, #20
 80051cc:	d520      	bpl.n	8005210 <HAL_I2C_EV_IRQHandler+0x6cc>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051ce:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 80051d2:	2a22      	cmp	r2, #34	; 0x22
 80051d4:	d14a      	bne.n	800526c <HAL_I2C_EV_IRQHandler+0x728>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80051d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80051d8:	6802      	ldr	r2, [r0, #0]
 80051da:	6852      	ldr	r2, [r2, #4]
 80051dc:	b292      	uxth	r2, r2
 80051de:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80051e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80051e2:	b292      	uxth	r2, r2
 80051e4:	b11a      	cbz	r2, 80051ee <HAL_I2C_EV_IRQHandler+0x6aa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051e8:	f042 0204 	orr.w	r2, r2, #4
 80051ec:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f4:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051f6:	f7fe fbe5 	bl	80039c4 <HAL_DMA_GetState>
 80051fa:	2801      	cmp	r0, #1
 80051fc:	d008      	beq.n	8005210 <HAL_I2C_EV_IRQHandler+0x6cc>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80051fe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005200:	4b79      	ldr	r3, [pc, #484]	; (80053e8 <HAL_I2C_EV_IRQHandler+0x8a4>)
 8005202:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005204:	f7fe fb02 	bl	800380c <HAL_DMA_Abort_IT>
 8005208:	b110      	cbz	r0, 8005210 <HAL_I2C_EV_IRQHandler+0x6cc>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800520a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800520c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800520e:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8005210:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	b313      	cbz	r3, 800525c <HAL_I2C_EV_IRQHandler+0x718>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	695a      	ldr	r2, [r3, #20]
 800521a:	0751      	lsls	r1, r2, #29
 800521c:	d509      	bpl.n	8005232 <HAL_I2C_EV_IRQHandler+0x6ee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005222:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005224:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005226:	3301      	adds	r3, #1
 8005228:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800522a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800522c:	3b01      	subs	r3, #1
 800522e:	b29b      	uxth	r3, r3
 8005230:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	0652      	lsls	r2, r2, #25
 8005238:	d509      	bpl.n	800524e <HAL_I2C_EV_IRQHandler+0x70a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800523e:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005242:	3301      	adds	r3, #1
 8005244:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005246:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005248:	3b01      	subs	r3, #1
 800524a:	b29b      	uxth	r3, r3
 800524c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800524e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005250:	b29b      	uxth	r3, r3
 8005252:	b11b      	cbz	r3, 800525c <HAL_I2C_EV_IRQHandler+0x718>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005254:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005256:	f043 0304 	orr.w	r3, r3, #4
 800525a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800525c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800525e:	b313      	cbz	r3, 80052a6 <HAL_I2C_EV_IRQHandler+0x762>
    I2C_ITError(hi2c);
 8005260:	4620      	mov	r0, r4
}
 8005262:	b00f      	add	sp, #60	; 0x3c
 8005264:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8005268:	f7ff bbc4 	b.w	80049f4 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800526c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800526e:	6802      	ldr	r2, [r0, #0]
 8005270:	6852      	ldr	r2, [r2, #4]
 8005272:	b292      	uxth	r2, r2
 8005274:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8005276:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005278:	b292      	uxth	r2, r2
 800527a:	b11a      	cbz	r2, 8005284 <HAL_I2C_EV_IRQHandler+0x740>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800527c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800527e:	f042 0204 	orr.w	r2, r2, #4
 8005282:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800528a:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800528c:	f7fe fb9a 	bl	80039c4 <HAL_DMA_GetState>
 8005290:	2801      	cmp	r0, #1
 8005292:	d0bd      	beq.n	8005210 <HAL_I2C_EV_IRQHandler+0x6cc>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005294:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005296:	4b54      	ldr	r3, [pc, #336]	; (80053e8 <HAL_I2C_EV_IRQHandler+0x8a4>)
 8005298:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800529a:	f7fe fab7 	bl	800380c <HAL_DMA_Abort_IT>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d0b6      	beq.n	8005210 <HAL_I2C_EV_IRQHandler+0x6cc>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052a2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80052a4:	e7b2      	b.n	800520c <HAL_I2C_EV_IRQHandler+0x6c8>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80052a6:	2d2a      	cmp	r5, #42	; 0x2a
 80052a8:	d106      	bne.n	80052b8 <HAL_I2C_EV_IRQHandler+0x774>
      hi2c->PreviousState = I2C_STATE_NONE;
 80052aa:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052ac:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052ae:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80052b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052b4:	f7ff fa39 	bl	800472a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80052b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80052bc:	2b28      	cmp	r3, #40	; 0x28
 80052be:	d10c      	bne.n	80052da <HAL_I2C_EV_IRQHandler+0x796>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c0:	4b4a      	ldr	r3, [pc, #296]	; (80053ec <HAL_I2C_EV_IRQHandler+0x8a8>)
      hi2c->State = HAL_I2C_STATE_READY;
 80052c2:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c4:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052c6:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 80052c8:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80052ca:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052d4:	f7ff fa2b 	bl	800472e <HAL_I2C_ListenCpltCallback>
 80052d8:	e450      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052dc:	2b22      	cmp	r3, #34	; 0x22
 80052de:	d002      	beq.n	80052e6 <HAL_I2C_EV_IRQHandler+0x7a2>
 80052e0:	2d22      	cmp	r5, #34	; 0x22
 80052e2:	f47f ac4b 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052e6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80052e8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80052ea:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7ff fa18 	bl	800472a <HAL_I2C_SlaveRxCpltCallback>
 80052fa:	e43f      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80052fc:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
 8005300:	2921      	cmp	r1, #33	; 0x21
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005302:	f000 0504 	and.w	r5, r0, #4
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005306:	d135      	bne.n	8005374 <HAL_I2C_EV_IRQHandler+0x830>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005308:	0607      	lsls	r7, r0, #24
 800530a:	d527      	bpl.n	800535c <HAL_I2C_EV_IRQHandler+0x818>
 800530c:	0556      	lsls	r6, r2, #21
 800530e:	d525      	bpl.n	800535c <HAL_I2C_EV_IRQHandler+0x818>
 8005310:	bb3d      	cbnz	r5, 8005362 <HAL_I2C_EV_IRQHandler+0x81e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005312:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8005316:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005318:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 800531a:	b292      	uxth	r2, r2
 800531c:	2a00      	cmp	r2, #0
 800531e:	f43f ac2d 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005322:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005324:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005328:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800532a:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800532c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800532e:	3a01      	subs	r2, #1
 8005330:	b292      	uxth	r2, r2
 8005332:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005334:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005336:	b292      	uxth	r2, r2
 8005338:	2a00      	cmp	r2, #0
 800533a:	f47f ac1f 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 800533e:	2829      	cmp	r0, #41	; 0x29
 8005340:	f47f ac1c 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005344:	685a      	ldr	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005346:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800534c:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800534e:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005350:	6321      	str	r1, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005352:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005356:	f7ff f9e7 	bl	8004728 <HAL_I2C_SlaveTxCpltCallback>
 800535a:	e40f      	b.n	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800535c:	2d00      	cmp	r5, #0
 800535e:	f43f ac0d 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8005362:	0595      	lsls	r5, r2, #22
 8005364:	f57f ac0a 	bpl.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8005368:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800536a:	b292      	uxth	r2, r2
 800536c:	2a00      	cmp	r2, #0
 800536e:	f43f ac05 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 8005372:	e5a9      	b.n	8004ec8 <HAL_I2C_EV_IRQHandler+0x384>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005374:	0640      	lsls	r0, r0, #25
 8005376:	d527      	bpl.n	80053c8 <HAL_I2C_EV_IRQHandler+0x884>
 8005378:	0551      	lsls	r1, r2, #21
 800537a:	d525      	bpl.n	80053c8 <HAL_I2C_EV_IRQHandler+0x884>
 800537c:	bb3d      	cbnz	r5, 80053ce <HAL_I2C_EV_IRQHandler+0x88a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800537e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8005382:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005384:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8005386:	b289      	uxth	r1, r1
 8005388:	2900      	cmp	r1, #0
 800538a:	f43f abf7 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538e:	6919      	ldr	r1, [r3, #16]
 8005390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005392:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8005394:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005396:	3301      	adds	r3, #1
 8005398:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800539a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800539c:	3b01      	subs	r3, #1
 800539e:	b29b      	uxth	r3, r3
 80053a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f47f abe8 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 80053ac:	2a2a      	cmp	r2, #42	; 0x2a
 80053ae:	f47f abe5 	bne.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	6853      	ldr	r3, [r2, #4]
 80053b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053ba:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053bc:	2322      	movs	r3, #34	; 0x22
 80053be:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053c0:	2328      	movs	r3, #40	; 0x28
 80053c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80053c6:	e795      	b.n	80052f4 <HAL_I2C_EV_IRQHandler+0x7b0>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053c8:	2d00      	cmp	r5, #0
 80053ca:	f43f abd7 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
 80053ce:	0592      	lsls	r2, r2, #22
 80053d0:	f57f abd4 	bpl.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80053d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80053d6:	b292      	uxth	r2, r2
 80053d8:	2a00      	cmp	r2, #0
 80053da:	f43f abcf 	beq.w	8004b7c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e64b      	b.n	800507e <HAL_I2C_EV_IRQHandler+0x53a>
 80053e6:	bf00      	nop
 80053e8:	08004935 	.word	0x08004935
 80053ec:	ffff0000 	.word	0xffff0000

080053f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f4:	4605      	mov	r5, r0
 80053f6:	b338      	cbz	r0, 8005448 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f8:	6803      	ldr	r3, [r0, #0]
 80053fa:	07db      	lsls	r3, r3, #31
 80053fc:	d410      	bmi.n	8005420 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fe:	682b      	ldr	r3, [r5, #0]
 8005400:	079f      	lsls	r7, r3, #30
 8005402:	d45e      	bmi.n	80054c2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	0719      	lsls	r1, r3, #28
 8005408:	f100 8095 	bmi.w	8005536 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	075a      	lsls	r2, r3, #29
 8005410:	f100 80c1 	bmi.w	8005596 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005414:	69e8      	ldr	r0, [r5, #28]
 8005416:	2800      	cmp	r0, #0
 8005418:	f040 812c 	bne.w	8005674 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 800541c:	2000      	movs	r0, #0
 800541e:	e029      	b.n	8005474 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005420:	4c90      	ldr	r4, [pc, #576]	; (8005664 <HAL_RCC_OscConfig+0x274>)
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b04      	cmp	r3, #4
 800542a:	d007      	beq.n	800543c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800542c:	6863      	ldr	r3, [r4, #4]
 800542e:	f003 030c 	and.w	r3, r3, #12
 8005432:	2b08      	cmp	r3, #8
 8005434:	d10a      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
 8005436:	6863      	ldr	r3, [r4, #4]
 8005438:	03de      	lsls	r6, r3, #15
 800543a:	d507      	bpl.n	800544c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	039c      	lsls	r4, r3, #14
 8005440:	d5dd      	bpl.n	80053fe <HAL_RCC_OscConfig+0xe>
 8005442:	686b      	ldr	r3, [r5, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1da      	bne.n	80053fe <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8005448:	2001      	movs	r0, #1
 800544a:	e013      	b.n	8005474 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800544c:	686b      	ldr	r3, [r5, #4]
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005452:	d112      	bne.n	800547a <HAL_RCC_OscConfig+0x8a>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800545c:	f7fd fe8e 	bl	800317c <HAL_GetTick>
 8005460:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	0398      	lsls	r0, r3, #14
 8005466:	d4ca      	bmi.n	80053fe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005468:	f7fd fe88 	bl	800317c <HAL_GetTick>
 800546c:	1b80      	subs	r0, r0, r6
 800546e:	2864      	cmp	r0, #100	; 0x64
 8005470:	d9f7      	bls.n	8005462 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8005472:	2003      	movs	r0, #3
}
 8005474:	b002      	add	sp, #8
 8005476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800547a:	b99b      	cbnz	r3, 80054a4 <HAL_RCC_OscConfig+0xb4>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800548c:	f7fd fe76 	bl	800317c <HAL_GetTick>
 8005490:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	0399      	lsls	r1, r3, #14
 8005496:	d5b2      	bpl.n	80053fe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005498:	f7fd fe70 	bl	800317c <HAL_GetTick>
 800549c:	1b80      	subs	r0, r0, r6
 800549e:	2864      	cmp	r0, #100	; 0x64
 80054a0:	d9f7      	bls.n	8005492 <HAL_RCC_OscConfig+0xa2>
 80054a2:	e7e6      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	d103      	bne.n	80054b4 <HAL_RCC_OscConfig+0xc4>
 80054ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	e7cf      	b.n	8005454 <HAL_RCC_OscConfig+0x64>
 80054b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054c0:	e7cb      	b.n	800545a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054c2:	4c68      	ldr	r4, [pc, #416]	; (8005664 <HAL_RCC_OscConfig+0x274>)
 80054c4:	6863      	ldr	r3, [r4, #4]
 80054c6:	f013 0f0c 	tst.w	r3, #12
 80054ca:	d007      	beq.n	80054dc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d110      	bne.n	80054f8 <HAL_RCC_OscConfig+0x108>
 80054d6:	6863      	ldr	r3, [r4, #4]
 80054d8:	03da      	lsls	r2, r3, #15
 80054da:	d40d      	bmi.n	80054f8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	079b      	lsls	r3, r3, #30
 80054e0:	d502      	bpl.n	80054e8 <HAL_RCC_OscConfig+0xf8>
 80054e2:	692b      	ldr	r3, [r5, #16]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d1af      	bne.n	8005448 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	696a      	ldr	r2, [r5, #20]
 80054ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80054f0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	e785      	b.n	8005404 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054f8:	692a      	ldr	r2, [r5, #16]
 80054fa:	4b5b      	ldr	r3, [pc, #364]	; (8005668 <HAL_RCC_OscConfig+0x278>)
 80054fc:	b16a      	cbz	r2, 800551a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005502:	f7fd fe3b 	bl	800317c <HAL_GetTick>
 8005506:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	079f      	lsls	r7, r3, #30
 800550c:	d4ec      	bmi.n	80054e8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800550e:	f7fd fe35 	bl	800317c <HAL_GetTick>
 8005512:	1b80      	subs	r0, r0, r6
 8005514:	2802      	cmp	r0, #2
 8005516:	d9f7      	bls.n	8005508 <HAL_RCC_OscConfig+0x118>
 8005518:	e7ab      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800551a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800551c:	f7fd fe2e 	bl	800317c <HAL_GetTick>
 8005520:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	0798      	lsls	r0, r3, #30
 8005526:	f57f af6d 	bpl.w	8005404 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552a:	f7fd fe27 	bl	800317c <HAL_GetTick>
 800552e:	1b80      	subs	r0, r0, r6
 8005530:	2802      	cmp	r0, #2
 8005532:	d9f6      	bls.n	8005522 <HAL_RCC_OscConfig+0x132>
 8005534:	e79d      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005536:	69aa      	ldr	r2, [r5, #24]
 8005538:	4e4a      	ldr	r6, [pc, #296]	; (8005664 <HAL_RCC_OscConfig+0x274>)
 800553a:	4b4b      	ldr	r3, [pc, #300]	; (8005668 <HAL_RCC_OscConfig+0x278>)
 800553c:	b1e2      	cbz	r2, 8005578 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800553e:	2201      	movs	r2, #1
 8005540:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8005544:	f7fd fe1a 	bl	800317c <HAL_GetTick>
 8005548:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800554a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800554c:	079b      	lsls	r3, r3, #30
 800554e:	d50d      	bpl.n	800556c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005550:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005554:	4b45      	ldr	r3, [pc, #276]	; (800566c <HAL_RCC_OscConfig+0x27c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	fbb3 f3f2 	udiv	r3, r3, r2
 800555c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800555e:	bf00      	nop
  }
  while (Delay --);
 8005560:	9b01      	ldr	r3, [sp, #4]
 8005562:	1e5a      	subs	r2, r3, #1
 8005564:	9201      	str	r2, [sp, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f9      	bne.n	800555e <HAL_RCC_OscConfig+0x16e>
 800556a:	e74f      	b.n	800540c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800556c:	f7fd fe06 	bl	800317c <HAL_GetTick>
 8005570:	1b00      	subs	r0, r0, r4
 8005572:	2802      	cmp	r0, #2
 8005574:	d9e9      	bls.n	800554a <HAL_RCC_OscConfig+0x15a>
 8005576:	e77c      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8005578:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800557c:	f7fd fdfe 	bl	800317c <HAL_GetTick>
 8005580:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005582:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005584:	079f      	lsls	r7, r3, #30
 8005586:	f57f af41 	bpl.w	800540c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800558a:	f7fd fdf7 	bl	800317c <HAL_GetTick>
 800558e:	1b00      	subs	r0, r0, r4
 8005590:	2802      	cmp	r0, #2
 8005592:	d9f6      	bls.n	8005582 <HAL_RCC_OscConfig+0x192>
 8005594:	e76d      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005596:	4c33      	ldr	r4, [pc, #204]	; (8005664 <HAL_RCC_OscConfig+0x274>)
 8005598:	69e3      	ldr	r3, [r4, #28]
 800559a:	00d8      	lsls	r0, r3, #3
 800559c:	d424      	bmi.n	80055e8 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800559e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a0:	69e3      	ldr	r3, [r4, #28]
 80055a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a6:	61e3      	str	r3, [r4, #28]
 80055a8:	69e3      	ldr	r3, [r4, #28]
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b2:	4e2f      	ldr	r6, [pc, #188]	; (8005670 <HAL_RCC_OscConfig+0x280>)
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	05d9      	lsls	r1, r3, #23
 80055b8:	d518      	bpl.n	80055ec <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ba:	68eb      	ldr	r3, [r5, #12]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d126      	bne.n	800560e <HAL_RCC_OscConfig+0x21e>
 80055c0:	6a23      	ldr	r3, [r4, #32]
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80055c8:	f7fd fdd8 	bl	800317c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80055d0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d2:	6a23      	ldr	r3, [r4, #32]
 80055d4:	079b      	lsls	r3, r3, #30
 80055d6:	d53f      	bpl.n	8005658 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80055d8:	2f00      	cmp	r7, #0
 80055da:	f43f af1b 	beq.w	8005414 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80055de:	69e3      	ldr	r3, [r4, #28]
 80055e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055e4:	61e3      	str	r3, [r4, #28]
 80055e6:	e715      	b.n	8005414 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80055e8:	2700      	movs	r7, #0
 80055ea:	e7e2      	b.n	80055b2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ec:	6833      	ldr	r3, [r6, #0]
 80055ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80055f4:	f7fd fdc2 	bl	800317c <HAL_GetTick>
 80055f8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	6833      	ldr	r3, [r6, #0]
 80055fc:	05da      	lsls	r2, r3, #23
 80055fe:	d4dc      	bmi.n	80055ba <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005600:	f7fd fdbc 	bl	800317c <HAL_GetTick>
 8005604:	eba0 0008 	sub.w	r0, r0, r8
 8005608:	2864      	cmp	r0, #100	; 0x64
 800560a:	d9f6      	bls.n	80055fa <HAL_RCC_OscConfig+0x20a>
 800560c:	e731      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800560e:	b9ab      	cbnz	r3, 800563c <HAL_RCC_OscConfig+0x24c>
 8005610:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005612:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	6223      	str	r3, [r4, #32]
 800561c:	6a23      	ldr	r3, [r4, #32]
 800561e:	f023 0304 	bic.w	r3, r3, #4
 8005622:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005624:	f7fd fdaa 	bl	800317c <HAL_GetTick>
 8005628:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800562a:	6a23      	ldr	r3, [r4, #32]
 800562c:	0798      	lsls	r0, r3, #30
 800562e:	d5d3      	bpl.n	80055d8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005630:	f7fd fda4 	bl	800317c <HAL_GetTick>
 8005634:	1b80      	subs	r0, r0, r6
 8005636:	4540      	cmp	r0, r8
 8005638:	d9f7      	bls.n	800562a <HAL_RCC_OscConfig+0x23a>
 800563a:	e71a      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563c:	2b05      	cmp	r3, #5
 800563e:	6a23      	ldr	r3, [r4, #32]
 8005640:	d103      	bne.n	800564a <HAL_RCC_OscConfig+0x25a>
 8005642:	f043 0304 	orr.w	r3, r3, #4
 8005646:	6223      	str	r3, [r4, #32]
 8005648:	e7ba      	b.n	80055c0 <HAL_RCC_OscConfig+0x1d0>
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	6223      	str	r3, [r4, #32]
 8005650:	6a23      	ldr	r3, [r4, #32]
 8005652:	f023 0304 	bic.w	r3, r3, #4
 8005656:	e7b6      	b.n	80055c6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005658:	f7fd fd90 	bl	800317c <HAL_GetTick>
 800565c:	1b80      	subs	r0, r0, r6
 800565e:	4540      	cmp	r0, r8
 8005660:	d9b7      	bls.n	80055d2 <HAL_RCC_OscConfig+0x1e2>
 8005662:	e706      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
 8005664:	40021000 	.word	0x40021000
 8005668:	42420000 	.word	0x42420000
 800566c:	20000004 	.word	0x20000004
 8005670:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005674:	4c2a      	ldr	r4, [pc, #168]	; (8005720 <HAL_RCC_OscConfig+0x330>)
 8005676:	6863      	ldr	r3, [r4, #4]
 8005678:	f003 030c 	and.w	r3, r3, #12
 800567c:	2b08      	cmp	r3, #8
 800567e:	d03e      	beq.n	80056fe <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005680:	2200      	movs	r2, #0
 8005682:	4b28      	ldr	r3, [pc, #160]	; (8005724 <HAL_RCC_OscConfig+0x334>)
 8005684:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005686:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005688:	d12c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800568a:	f7fd fd77 	bl	800317c <HAL_GetTick>
 800568e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	0199      	lsls	r1, r3, #6
 8005694:	d420      	bmi.n	80056d8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005696:	6a2b      	ldr	r3, [r5, #32]
 8005698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800569c:	d105      	bne.n	80056aa <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800569e:	6862      	ldr	r2, [r4, #4]
 80056a0:	68a9      	ldr	r1, [r5, #8]
 80056a2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80056a6:	430a      	orrs	r2, r1
 80056a8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056aa:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80056ac:	6862      	ldr	r2, [r4, #4]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80056b4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80056b6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056b8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <HAL_RCC_OscConfig+0x334>)
 80056bc:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80056be:	f7fd fd5d 	bl	800317c <HAL_GetTick>
 80056c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056c4:	6823      	ldr	r3, [r4, #0]
 80056c6:	019a      	lsls	r2, r3, #6
 80056c8:	f53f aea8 	bmi.w	800541c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fd fd56 	bl	800317c <HAL_GetTick>
 80056d0:	1b40      	subs	r0, r0, r5
 80056d2:	2802      	cmp	r0, #2
 80056d4:	d9f6      	bls.n	80056c4 <HAL_RCC_OscConfig+0x2d4>
 80056d6:	e6cc      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d8:	f7fd fd50 	bl	800317c <HAL_GetTick>
 80056dc:	1b80      	subs	r0, r0, r6
 80056de:	2802      	cmp	r0, #2
 80056e0:	d9d6      	bls.n	8005690 <HAL_RCC_OscConfig+0x2a0>
 80056e2:	e6c6      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80056e4:	f7fd fd4a 	bl	800317c <HAL_GetTick>
 80056e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	019b      	lsls	r3, r3, #6
 80056ee:	f57f ae95 	bpl.w	800541c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f2:	f7fd fd43 	bl	800317c <HAL_GetTick>
 80056f6:	1b40      	subs	r0, r0, r5
 80056f8:	2802      	cmp	r0, #2
 80056fa:	d9f6      	bls.n	80056ea <HAL_RCC_OscConfig+0x2fa>
 80056fc:	e6b9      	b.n	8005472 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056fe:	2801      	cmp	r0, #1
 8005700:	f43f aeb8 	beq.w	8005474 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8005704:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005706:	6a2a      	ldr	r2, [r5, #32]
 8005708:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800570c:	4291      	cmp	r1, r2
 800570e:	f47f ae9b 	bne.w	8005448 <HAL_RCC_OscConfig+0x58>
 8005712:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005714:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005718:	4293      	cmp	r3, r2
 800571a:	f43f ae7f 	beq.w	800541c <HAL_RCC_OscConfig+0x2c>
 800571e:	e693      	b.n	8005448 <HAL_RCC_OscConfig+0x58>
 8005720:	40021000 	.word	0x40021000
 8005724:	42420000 	.word	0x42420000

08005728 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005728:	4a0d      	ldr	r2, [pc, #52]	; (8005760 <HAL_RCC_GetSysClockFreq+0x38>)
 800572a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800572c:	f003 010c 	and.w	r1, r3, #12
 8005730:	2908      	cmp	r1, #8
 8005732:	d112      	bne.n	800575a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005734:	480b      	ldr	r0, [pc, #44]	; (8005764 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005736:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800573a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800573c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800573e:	d509      	bpl.n	8005754 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005740:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005742:	4a09      	ldr	r2, [pc, #36]	; (8005768 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005744:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005748:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800574a:	4a08      	ldr	r2, [pc, #32]	; (800576c <HAL_RCC_GetSysClockFreq+0x44>)
 800574c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800574e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005752:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <HAL_RCC_GetSysClockFreq+0x48>)
 8005756:	4358      	muls	r0, r3
 8005758:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800575a:	4803      	ldr	r0, [pc, #12]	; (8005768 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40021000 	.word	0x40021000
 8005764:	0800b377 	.word	0x0800b377
 8005768:	007a1200 	.word	0x007a1200
 800576c:	0800b387 	.word	0x0800b387
 8005770:	003d0900 	.word	0x003d0900

08005774 <HAL_RCC_ClockConfig>:
{
 8005774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005778:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800577a:	4604      	mov	r4, r0
 800577c:	b910      	cbnz	r0, 8005784 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800577e:	2001      	movs	r0, #1
}
 8005780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005784:	4a44      	ldr	r2, [pc, #272]	; (8005898 <HAL_RCC_ClockConfig+0x124>)
 8005786:	6813      	ldr	r3, [r2, #0]
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	428b      	cmp	r3, r1
 800578e:	d328      	bcc.n	80057e2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005790:	6821      	ldr	r1, [r4, #0]
 8005792:	078e      	lsls	r6, r1, #30
 8005794:	d430      	bmi.n	80057f8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005796:	07ca      	lsls	r2, r1, #31
 8005798:	d443      	bmi.n	8005822 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800579a:	4a3f      	ldr	r2, [pc, #252]	; (8005898 <HAL_RCC_ClockConfig+0x124>)
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	f003 0307 	and.w	r3, r3, #7
 80057a2:	42ab      	cmp	r3, r5
 80057a4:	d865      	bhi.n	8005872 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a6:	6822      	ldr	r2, [r4, #0]
 80057a8:	4d3c      	ldr	r5, [pc, #240]	; (800589c <HAL_RCC_ClockConfig+0x128>)
 80057aa:	f012 0f04 	tst.w	r2, #4
 80057ae:	d16c      	bne.n	800588a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057b0:	0713      	lsls	r3, r2, #28
 80057b2:	d506      	bpl.n	80057c2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057b4:	686b      	ldr	r3, [r5, #4]
 80057b6:	6922      	ldr	r2, [r4, #16]
 80057b8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80057bc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80057c0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057c2:	f7ff ffb1 	bl	8005728 <HAL_RCC_GetSysClockFreq>
 80057c6:	686b      	ldr	r3, [r5, #4]
 80057c8:	4a35      	ldr	r2, [pc, #212]	; (80058a0 <HAL_RCC_ClockConfig+0x12c>)
 80057ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80057ce:	5cd3      	ldrb	r3, [r2, r3]
 80057d0:	40d8      	lsrs	r0, r3
 80057d2:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <HAL_RCC_ClockConfig+0x130>)
 80057d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80057d6:	4b34      	ldr	r3, [pc, #208]	; (80058a8 <HAL_RCC_ClockConfig+0x134>)
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	f7fd fc8d 	bl	80030f8 <HAL_InitTick>
  return HAL_OK;
 80057de:	2000      	movs	r0, #0
 80057e0:	e7ce      	b.n	8005780 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057e2:	6813      	ldr	r3, [r2, #0]
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ec:	6813      	ldr	r3, [r2, #0]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	428b      	cmp	r3, r1
 80057f4:	d1c3      	bne.n	800577e <HAL_RCC_ClockConfig+0xa>
 80057f6:	e7cb      	b.n	8005790 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	4b28      	ldr	r3, [pc, #160]	; (800589c <HAL_RCC_ClockConfig+0x128>)
 80057fa:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057fe:	bf1e      	ittt	ne
 8005800:	685a      	ldrne	r2, [r3, #4]
 8005802:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005806:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005808:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800580a:	bf42      	ittt	mi
 800580c:	685a      	ldrmi	r2, [r3, #4]
 800580e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8005812:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	68a0      	ldr	r0, [r4, #8]
 8005818:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800581c:	4302      	orrs	r2, r0
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	e7b9      	b.n	8005796 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	4e1d      	ldr	r6, [pc, #116]	; (800589c <HAL_RCC_ClockConfig+0x128>)
 8005826:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005828:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800582a:	d11a      	bne.n	8005862 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005830:	d0a5      	beq.n	800577e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005832:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005834:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005838:	f023 0303 	bic.w	r3, r3, #3
 800583c:	4313      	orrs	r3, r2
 800583e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005840:	f7fd fc9c 	bl	800317c <HAL_GetTick>
 8005844:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	6873      	ldr	r3, [r6, #4]
 8005848:	6862      	ldr	r2, [r4, #4]
 800584a:	f003 030c 	and.w	r3, r3, #12
 800584e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005852:	d0a2      	beq.n	800579a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005854:	f7fd fc92 	bl	800317c <HAL_GetTick>
 8005858:	1bc0      	subs	r0, r0, r7
 800585a:	4540      	cmp	r0, r8
 800585c:	d9f3      	bls.n	8005846 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800585e:	2003      	movs	r0, #3
 8005860:	e78e      	b.n	8005780 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005862:	2a02      	cmp	r2, #2
 8005864:	d102      	bne.n	800586c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005866:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800586a:	e7e1      	b.n	8005830 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800586c:	f013 0f02 	tst.w	r3, #2
 8005870:	e7de      	b.n	8005830 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005872:	6813      	ldr	r3, [r2, #0]
 8005874:	f023 0307 	bic.w	r3, r3, #7
 8005878:	432b      	orrs	r3, r5
 800587a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800587c:	6813      	ldr	r3, [r2, #0]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	42ab      	cmp	r3, r5
 8005884:	f47f af7b 	bne.w	800577e <HAL_RCC_ClockConfig+0xa>
 8005888:	e78d      	b.n	80057a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800588a:	686b      	ldr	r3, [r5, #4]
 800588c:	68e1      	ldr	r1, [r4, #12]
 800588e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005892:	430b      	orrs	r3, r1
 8005894:	606b      	str	r3, [r5, #4]
 8005896:	e78b      	b.n	80057b0 <HAL_RCC_ClockConfig+0x3c>
 8005898:	40022000 	.word	0x40022000
 800589c:	40021000 	.word	0x40021000
 80058a0:	0800b2b6 	.word	0x0800b2b6
 80058a4:	20000004 	.word	0x20000004
 80058a8:	2000000c 	.word	0x2000000c

080058ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80058ae:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80058b6:	5cd3      	ldrb	r3, [r2, r3]
 80058b8:	4a03      	ldr	r2, [pc, #12]	; (80058c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80058ba:	6810      	ldr	r0, [r2, #0]
}
 80058bc:	40d8      	lsrs	r0, r3
 80058be:	4770      	bx	lr
 80058c0:	40021000 	.word	0x40021000
 80058c4:	0800b2c6 	.word	0x0800b2c6
 80058c8:	20000004 	.word	0x20000004

080058cc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	4a03      	ldr	r2, [pc, #12]	; (80058e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80058da:	6810      	ldr	r0, [r2, #0]
}
 80058dc:	40d8      	lsrs	r0, r3
 80058de:	4770      	bx	lr
 80058e0:	40021000 	.word	0x40021000
 80058e4:	0800b2c6 	.word	0x0800b2c6
 80058e8:	20000004 	.word	0x20000004

080058ec <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058ec:	6803      	ldr	r3, [r0, #0]
{
 80058ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058f2:	07d9      	lsls	r1, r3, #31
{
 80058f4:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058f6:	d521      	bpl.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f8:	4c36      	ldr	r4, [pc, #216]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058fa:	69e3      	ldr	r3, [r4, #28]
 80058fc:	00da      	lsls	r2, r3, #3
 80058fe:	d433      	bmi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8005900:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	69e3      	ldr	r3, [r4, #28]
 8005904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005908:	61e3      	str	r3, [r4, #28]
 800590a:	69e3      	ldr	r3, [r4, #28]
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005914:	4f30      	ldr	r7, [pc, #192]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	05db      	lsls	r3, r3, #23
 800591a:	d527      	bpl.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x80>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800591c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800591e:	686a      	ldr	r2, [r5, #4]
 8005920:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005924:	d136      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005926:	6a23      	ldr	r3, [r4, #32]
 8005928:	686a      	ldr	r2, [r5, #4]
 800592a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592e:	4313      	orrs	r3, r2
 8005930:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005932:	b11e      	cbz	r6, 800593c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005934:	69e3      	ldr	r3, [r4, #28]
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800593a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800593c:	6828      	ldr	r0, [r5, #0]
 800593e:	0783      	lsls	r3, r0, #30
 8005940:	d506      	bpl.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005942:	4924      	ldr	r1, [pc, #144]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005944:	68ab      	ldr	r3, [r5, #8]
 8005946:	684a      	ldr	r2, [r1, #4]
 8005948:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800594c:	431a      	orrs	r2, r3
 800594e:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005950:	f010 0010 	ands.w	r0, r0, #16
 8005954:	d01b      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005956:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005958:	68e9      	ldr	r1, [r5, #12]
 800595a:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800595c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800595e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005962:	430b      	orrs	r3, r1
 8005964:	6053      	str	r3, [r2, #4]
 8005966:	e012      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus pwrclkchanged = RESET;
 8005968:	2600      	movs	r6, #0
 800596a:	e7d3      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005972:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005974:	f7fd fc02 	bl	800317c <HAL_GetTick>
 8005978:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	05d8      	lsls	r0, r3, #23
 800597e:	d4cd      	bmi.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005980:	f7fd fbfc 	bl	800317c <HAL_GetTick>
 8005984:	eba0 0008 	sub.w	r0, r0, r8
 8005988:	2864      	cmp	r0, #100	; 0x64
 800598a:	d9f6      	bls.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x8e>
          return HAL_TIMEOUT;
 800598c:	2003      	movs	r0, #3
}
 800598e:	b002      	add	sp, #8
 8005990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005994:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005998:	429a      	cmp	r2, r3
 800599a:	d0c4      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 800599c:	2001      	movs	r0, #1
 800599e:	4a0f      	ldr	r2, [pc, #60]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80059a2:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059a6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059ac:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      RCC->BDCR = temp_reg;
 80059b0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80059b2:	07d9      	lsls	r1, r3, #31
 80059b4:	d5b7      	bpl.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80059b6:	f7fd fbe1 	bl	800317c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ba:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80059be:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059c0:	6a23      	ldr	r3, [r4, #32]
 80059c2:	079a      	lsls	r2, r3, #30
 80059c4:	d4af      	bmi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059c6:	f7fd fbd9 	bl	800317c <HAL_GetTick>
 80059ca:	1bc0      	subs	r0, r0, r7
 80059cc:	4540      	cmp	r0, r8
 80059ce:	d9f7      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059d0:	e7dc      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40007000 	.word	0x40007000
 80059dc:	42420000 	.word	0x42420000

080059e0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e2:	6a02      	ldr	r2, [r0, #32]
{
 80059e4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059e6:	f022 0201 	bic.w	r2, r2, #1
 80059ea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ee:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80059f6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059f8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80059fa:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80059fe:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a00:	4d0a      	ldr	r5, [pc, #40]	; (8005a2c <TIM_OC1_SetConfig+0x4c>)
 8005a02:	42a8      	cmp	r0, r5
 8005a04:	d10b      	bne.n	8005a1e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a06:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a08:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005a0c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a0e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a12:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005a16:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a18:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a1c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a20:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a22:	684a      	ldr	r2, [r1, #4]
 8005a24:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a26:	6203      	str	r3, [r0, #32]
}
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00

08005a30 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a30:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a32:	6a02      	ldr	r2, [r0, #32]
{
 8005a34:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a3a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a3e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005a46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a48:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005a4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a52:	4d0b      	ldr	r5, [pc, #44]	; (8005a80 <TIM_OC3_SetConfig+0x50>)
 8005a54:	42a8      	cmp	r0, r5
 8005a56:	d10d      	bne.n	8005a74 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a58:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a62:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a66:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005a6a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a70:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a76:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a78:	684a      	ldr	r2, [r1, #4]
 8005a7a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7c:	6203      	str	r3, [r0, #32]
}
 8005a7e:	bd70      	pop	{r4, r5, r6, pc}
 8005a80:	40012c00 	.word	0x40012c00

08005a84 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a84:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a86:	6a02      	ldr	r2, [r0, #32]
{
 8005a88:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a8e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a92:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a96:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a9e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aa4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa8:	4d06      	ldr	r5, [pc, #24]	; (8005ac4 <TIM_OC4_SetConfig+0x40>)
 8005aaa:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aac:	bf02      	ittt	eq
 8005aae:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ab0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ab4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aba:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005abc:	684a      	ldr	r2, [r1, #4]
 8005abe:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac0:	6203      	str	r3, [r0, #32]
}
 8005ac2:	bd30      	pop	{r4, r5, pc}
 8005ac4:	40012c00 	.word	0x40012c00

08005ac8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005ac8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d120      	bne.n	8005b12 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ad6:	6803      	ldr	r3, [r0, #0]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae0:	4a0d      	ldr	r2, [pc, #52]	; (8005b18 <HAL_TIM_Base_Start_IT+0x50>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d00a      	beq.n	8005afc <HAL_TIM_Base_Start_IT+0x34>
 8005ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aea:	d007      	beq.n	8005afc <HAL_TIM_Base_Start_IT+0x34>
 8005aec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d003      	beq.n	8005afc <HAL_TIM_Base_Start_IT+0x34>
 8005af4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afc:	689a      	ldr	r2, [r3, #8]
 8005afe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b02:	2a06      	cmp	r2, #6
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005b0e:	2000      	movs	r0, #0
}
 8005b10:	4770      	bx	lr
    return HAL_ERROR;
 8005b12:	2001      	movs	r0, #1
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40012c00 	.word	0x40012c00

08005b1c <HAL_TIM_PWM_MspInit>:
 8005b1c:	4770      	bx	lr

08005b1e <HAL_TIM_OC_DelayElapsedCallback>:
 8005b1e:	4770      	bx	lr

08005b20 <HAL_TIM_IC_CaptureCallback>:
 8005b20:	4770      	bx	lr

08005b22 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_TriggerCallback>:
 8005b24:	4770      	bx	lr

08005b26 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8005b26:	6803      	ldr	r3, [r0, #0]
{
 8005b28:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005b2a:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b2c:	691e      	ldr	r6, [r3, #16]
{
 8005b2e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b30:	07b1      	lsls	r1, r6, #30
 8005b32:	d50d      	bpl.n	8005b50 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b34:	07aa      	lsls	r2, r5, #30
 8005b36:	d50b      	bpl.n	8005b50 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b38:	f06f 0202 	mvn.w	r2, #2
 8005b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3e:	2201      	movs	r2, #1
 8005b40:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	079b      	lsls	r3, r3, #30
 8005b46:	d069      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xf6>
          HAL_TIM_IC_CaptureCallback(htim);
 8005b48:	f7ff ffea 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b50:	0771      	lsls	r1, r6, #29
 8005b52:	d510      	bpl.n	8005b76 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b54:	076a      	lsls	r2, r5, #29
 8005b56:	d50e      	bpl.n	8005b76 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b58:	f06f 0204 	mvn.w	r2, #4
 8005b5c:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b62:	2202      	movs	r2, #2
 8005b64:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005b6c:	d05c      	beq.n	8005c28 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	f7ff ffd7 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	2300      	movs	r3, #0
 8005b74:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b76:	0733      	lsls	r3, r6, #28
 8005b78:	d50f      	bpl.n	8005b9a <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b7a:	0728      	lsls	r0, r5, #28
 8005b7c:	d50d      	bpl.n	8005b9a <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b7e:	f06f 0208 	mvn.w	r2, #8
 8005b82:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8005b84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b88:	2204      	movs	r2, #4
 8005b8a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	0799      	lsls	r1, r3, #30
 8005b90:	d050      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x10e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	f7ff ffc5 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b96:	2300      	movs	r3, #0
 8005b98:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b9a:	06f2      	lsls	r2, r6, #27
 8005b9c:	d510      	bpl.n	8005bc0 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b9e:	06eb      	lsls	r3, r5, #27
 8005ba0:	d50e      	bpl.n	8005bc0 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ba2:	f06f 0210 	mvn.w	r2, #16
 8005ba6:	6823      	ldr	r3, [r4, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bac:	2208      	movs	r2, #8
 8005bae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005bb6:	d043      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb8:	f7ff ffb2 	bl	8005b20 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bc0:	07f0      	lsls	r0, r6, #31
 8005bc2:	d508      	bpl.n	8005bd6 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bc4:	07e9      	lsls	r1, r5, #31
 8005bc6:	d506      	bpl.n	8005bd6 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bc8:	f06f 0201 	mvn.w	r2, #1
 8005bcc:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005bd0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bd2:	f7fb fcef 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005bd6:	0632      	lsls	r2, r6, #24
 8005bd8:	d508      	bpl.n	8005bec <HAL_TIM_IRQHandler+0xc6>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bda:	062b      	lsls	r3, r5, #24
 8005bdc:	d506      	bpl.n	8005bec <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005bde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005be2:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_BreakCallback(htim);
 8005be4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005be6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005be8:	f000 fa81 	bl	80060ee <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bec:	0670      	lsls	r0, r6, #25
 8005bee:	d508      	bpl.n	8005c02 <HAL_TIM_IRQHandler+0xdc>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bf0:	0669      	lsls	r1, r5, #25
 8005bf2:	d506      	bpl.n	8005c02 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bf8:	6823      	ldr	r3, [r4, #0]
      HAL_TIM_TriggerCallback(htim);
 8005bfa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bfc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005bfe:	f7ff ff91 	bl	8005b24 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c02:	06b2      	lsls	r2, r6, #26
 8005c04:	d522      	bpl.n	8005c4c <HAL_TIM_IRQHandler+0x126>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c06:	06ab      	lsls	r3, r5, #26
 8005c08:	d520      	bpl.n	8005c4c <HAL_TIM_IRQHandler+0x126>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c0a:	f06f 0220 	mvn.w	r2, #32
 8005c0e:	6823      	ldr	r3, [r4, #0]
      HAL_TIMEx_CommutCallback(htim);
 8005c10:	4620      	mov	r0, r4
}
 8005c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005c18:	f000 ba68 	b.w	80060ec <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1c:	f7ff ff7f 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7ff ff7e 	bl	8005b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8005c26:	e791      	b.n	8005b4c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c28:	f7ff ff79 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff ff78 	bl	8005b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8005c32:	e79e      	b.n	8005b72 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c34:	f7ff ff73 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7ff ff72 	bl	8005b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8005c3e:	e7aa      	b.n	8005b96 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c40:	f7ff ff6d 	bl	8005b1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	4620      	mov	r0, r4
 8005c46:	f7ff ff6c 	bl	8005b22 <HAL_TIM_PWM_PulseFinishedCallback>
 8005c4a:	e7b7      	b.n	8005bbc <HAL_TIM_IRQHandler+0x96>
}
 8005c4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c50 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c50:	4a1e      	ldr	r2, [pc, #120]	; (8005ccc <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8005c52:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c54:	4290      	cmp	r0, r2
 8005c56:	d00a      	beq.n	8005c6e <TIM_Base_SetConfig+0x1e>
 8005c58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c5c:	d007      	beq.n	8005c6e <TIM_Base_SetConfig+0x1e>
 8005c5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c62:	4290      	cmp	r0, r2
 8005c64:	d003      	beq.n	8005c6e <TIM_Base_SetConfig+0x1e>
 8005c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c6a:	4290      	cmp	r0, r2
 8005c6c:	d115      	bne.n	8005c9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8005c6e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c74:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	4a15      	ldr	r2, [pc, #84]	; (8005ccc <TIM_Base_SetConfig+0x7c>)
 8005c78:	4290      	cmp	r0, r2
 8005c7a:	d00a      	beq.n	8005c92 <TIM_Base_SetConfig+0x42>
 8005c7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c80:	d007      	beq.n	8005c92 <TIM_Base_SetConfig+0x42>
 8005c82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c86:	4290      	cmp	r0, r2
 8005c88:	d003      	beq.n	8005c92 <TIM_Base_SetConfig+0x42>
 8005c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c8e:	4290      	cmp	r0, r2
 8005c90:	d103      	bne.n	8005c9a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c92:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c98:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c9a:	694a      	ldr	r2, [r1, #20]
 8005c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005ca2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca4:	688b      	ldr	r3, [r1, #8]
 8005ca6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ca8:	680b      	ldr	r3, [r1, #0]
 8005caa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cac:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <TIM_Base_SetConfig+0x7c>)
 8005cae:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb0:	bf04      	itt	eq
 8005cb2:	690b      	ldreq	r3, [r1, #16]
 8005cb4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cba:	6903      	ldr	r3, [r0, #16]
 8005cbc:	07db      	lsls	r3, r3, #31
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cbe:	bf42      	ittt	mi
 8005cc0:	6903      	ldrmi	r3, [r0, #16]
 8005cc2:	f023 0301 	bicmi.w	r3, r3, #1
 8005cc6:	6103      	strmi	r3, [r0, #16]
}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40012c00 	.word	0x40012c00

08005cd0 <HAL_TIM_Base_Init>:
{
 8005cd0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	b330      	cbz	r0, 8005d24 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005cd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005cda:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cde:	b91b      	cbnz	r3, 8005ce8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005ce0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005ce4:	f7fc fd44 	bl	8002770 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf0:	1d21      	adds	r1, r4, #4
 8005cf2:	f7ff ffad 	bl	8005c50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf6:	2301      	movs	r3, #1
  return HAL_OK;
 8005cf8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cfa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005d22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d24:	2001      	movs	r0, #1
 8005d26:	e7fc      	b.n	8005d22 <HAL_TIM_Base_Init+0x52>

08005d28 <HAL_TIM_PWM_Init>:
{
 8005d28:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	b330      	cbz	r0, 8005d7c <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d36:	b91b      	cbnz	r3, 8005d40 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005d38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005d3c:	f7ff feee 	bl	8005b1c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d42:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005d44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d48:	1d21      	adds	r1, r4, #4
 8005d4a:	f7ff ff81 	bl	8005c50 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d4e:	2301      	movs	r3, #1
  return HAL_OK;
 8005d50:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d52:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d5a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d5e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d62:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005d76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005d7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d7c:	2001      	movs	r0, #1
 8005d7e:	e7fc      	b.n	8005d7a <HAL_TIM_PWM_Init+0x52>

08005d80 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8005d80:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d82:	6a02      	ldr	r2, [r0, #32]
{
 8005d84:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d86:	f022 0210 	bic.w	r2, r2, #16
 8005d8a:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005d8c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d8e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d90:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d92:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d96:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d9a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005d9c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005da0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da4:	4d0b      	ldr	r5, [pc, #44]	; (8005dd4 <TIM_OC2_SetConfig+0x54>)
 8005da6:	42a8      	cmp	r0, r5
 8005da8:	d10d      	bne.n	8005dc6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005daa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005db4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005dbc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dc2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005dc6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005dc8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005dca:	684a      	ldr	r2, [r1, #4]
 8005dcc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005dce:	6203      	str	r3, [r0, #32]
}
 8005dd0:	bd70      	pop	{r4, r5, r6, pc}
 8005dd2:	bf00      	nop
 8005dd4:	40012c00 	.word	0x40012c00

08005dd8 <HAL_TIM_PWM_ConfigChannel>:
{
 8005dd8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005dda:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005dde:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d050      	beq.n	8005e86 <HAL_TIM_PWM_ConfigChannel+0xae>
 8005de4:	2301      	movs	r3, #1
  switch (Channel)
 8005de6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005de8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005dec:	d03b      	beq.n	8005e66 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8005dee:	d807      	bhi.n	8005e00 <HAL_TIM_PWM_ConfigChannel+0x28>
 8005df0:	b1c2      	cbz	r2, 8005e24 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8005df2:	2a04      	cmp	r2, #4
 8005df4:	d027      	beq.n	8005e46 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8005df6:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8005dfe:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8005e00:	2a0c      	cmp	r2, #12
 8005e02:	d1f8      	bne.n	8005df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e04:	6800      	ldr	r0, [r0, #0]
 8005e06:	f7ff fe3d 	bl	8005a84 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e0a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e0c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e12:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e14:	69c3      	ldr	r3, [r0, #28]
 8005e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e1a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e1c:	69c3      	ldr	r3, [r0, #28]
 8005e1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e22:	e02e      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e24:	6800      	ldr	r0, [r0, #0]
 8005e26:	f7ff fddb 	bl	80059e0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e2a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e2c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e2e:	f043 0308 	orr.w	r3, r3, #8
 8005e32:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e34:	6983      	ldr	r3, [r0, #24]
 8005e36:	f023 0304 	bic.w	r3, r3, #4
 8005e3a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e3c:	6983      	ldr	r3, [r0, #24]
 8005e3e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e40:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2000      	movs	r0, #0
      break;
 8005e44:	e7d8      	b.n	8005df8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e46:	6800      	ldr	r0, [r0, #0]
 8005e48:	f7ff ff9a 	bl	8005d80 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e4c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e4e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e54:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e56:	6983      	ldr	r3, [r0, #24]
 8005e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e5c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e5e:	6983      	ldr	r3, [r0, #24]
 8005e60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005e64:	e7ec      	b.n	8005e40 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e66:	6800      	ldr	r0, [r0, #0]
 8005e68:	f7ff fde2 	bl	8005a30 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e6c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e6e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e70:	f043 0308 	orr.w	r3, r3, #8
 8005e74:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e76:	69c3      	ldr	r3, [r0, #28]
 8005e78:	f023 0304 	bic.w	r3, r3, #4
 8005e7c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e7e:	69c3      	ldr	r3, [r0, #28]
 8005e80:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e82:	61c3      	str	r3, [r0, #28]
 8005e84:	e7dd      	b.n	8005e42 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8005e86:	2002      	movs	r0, #2
 8005e88:	e7b9      	b.n	8005dfe <HAL_TIM_PWM_ConfigChannel+0x26>

08005e8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e8a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e8c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e8e:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e90:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e94:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005e98:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e9a:	6082      	str	r2, [r0, #8]
}
 8005e9c:	bd10      	pop	{r4, pc}

08005e9e <HAL_TIM_ConfigClockSource>:
{
 8005e9e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005ea4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	f04f 0002 	mov.w	r0, #2
 8005eac:	f000 808e 	beq.w	8005fcc <HAL_TIM_ConfigClockSource+0x12e>
 8005eb0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005eb6:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005eb8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005ebc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005ec6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005ec8:	680b      	ldr	r3, [r1, #0]
 8005eca:	2b60      	cmp	r3, #96	; 0x60
 8005ecc:	d04f      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0xd0>
 8005ece:	d832      	bhi.n	8005f36 <HAL_TIM_ConfigClockSource+0x98>
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d064      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x100>
 8005ed4:	d816      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x66>
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d00d      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x58>
 8005eda:	d80a      	bhi.n	8005ef2 <HAL_TIM_ConfigClockSource+0x54>
 8005edc:	f033 0110 	bics.w	r1, r3, #16
 8005ee0:	d009      	beq.n	8005ef6 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005eee:	4610      	mov	r0, r2
 8005ef0:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8005ef2:	2b30      	cmp	r3, #48	; 0x30
 8005ef4:	d1f5      	bne.n	8005ee2 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8005ef6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ef8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f043 0307 	orr.w	r3, r3, #7
 8005f02:	e028      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8005f04:	2b50      	cmp	r3, #80	; 0x50
 8005f06:	d1ec      	bne.n	8005ee2 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 8005f08:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005f0a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005f0c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0e:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f10:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f14:	f023 0301 	bic.w	r3, r3, #1
 8005f18:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005f1c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f22:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005f26:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005f28:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005f2a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f30:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005f34:	e00f      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3a:	d00d      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0xba>
 8005f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f40:	d00c      	beq.n	8005f5c <HAL_TIM_ConfigClockSource+0xbe>
 8005f42:	2b70      	cmp	r3, #112	; 0x70
 8005f44:	d1cd      	bne.n	8005ee2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005f46:	68cb      	ldr	r3, [r1, #12]
 8005f48:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005f4c:	f7ff ff9d 	bl	8005e8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f50:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f52:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8005f56:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f58:	2200      	movs	r2, #0
 8005f5a:	e7c2      	b.n	8005ee2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	68cb      	ldr	r3, [r1, #12]
 8005f5e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005f62:	f7ff ff92 	bl	8005e8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f66:	6883      	ldr	r3, [r0, #8]
 8005f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f6c:	e7f3      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 8005f6e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f70:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8005f72:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f74:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 8005f78:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7a:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7c:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f82:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f86:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005f8e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005f90:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005f92:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f98:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005f9c:	e7db      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 8005f9e:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8005fa0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005fa2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fa4:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fa6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fb0:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005fb2:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005fbc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005fbe:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005fc0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fc6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005fca:	e7c4      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8005fcc:	4602      	mov	r2, r0
 8005fce:	e78e      	b.n	8005eee <HAL_TIM_ConfigClockSource+0x50>

08005fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fd0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fd6:	f001 011f 	and.w	r1, r1, #31
 8005fda:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005fdc:	ea23 0304 	bic.w	r3, r3, r4
 8005fe0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe2:	6a03      	ldr	r3, [r0, #32]
 8005fe4:	408a      	lsls	r2, r1
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	6202      	str	r2, [r0, #32]
}
 8005fea:	bd10      	pop	{r4, pc}

08005fec <HAL_TIM_OC_Start>:
{
 8005fec:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fee:	b929      	cbnz	r1, 8005ffc <HAL_TIM_OC_Start+0x10>
 8005ff0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d021      	beq.n	800603c <HAL_TIM_OC_Start+0x50>
    return HAL_ERROR;
 8005ff8:	2001      	movs	r0, #1
}
 8005ffa:	bd08      	pop	{r3, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ffc:	2904      	cmp	r1, #4
 8005ffe:	d107      	bne.n	8006010 <HAL_TIM_OC_Start+0x24>
 8006000:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006004:	2b01      	cmp	r3, #1
 8006006:	d1f7      	bne.n	8005ff8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006008:	2302      	movs	r3, #2
 800600a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800600e:	e018      	b.n	8006042 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006010:	2908      	cmp	r1, #8
 8006012:	d107      	bne.n	8006024 <HAL_TIM_OC_Start+0x38>
 8006014:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006018:	2b01      	cmp	r3, #1
 800601a:	d1ed      	bne.n	8005ff8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800601c:	2302      	movs	r3, #2
 800601e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006022:	e00e      	b.n	8006042 <HAL_TIM_OC_Start+0x56>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006024:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006028:	2b01      	cmp	r3, #1
 800602a:	d1e5      	bne.n	8005ff8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800602c:	2904      	cmp	r1, #4
 800602e:	d0eb      	beq.n	8006008 <HAL_TIM_OC_Start+0x1c>
 8006030:	2908      	cmp	r1, #8
 8006032:	d0f3      	beq.n	800601c <HAL_TIM_OC_Start+0x30>
 8006034:	2302      	movs	r3, #2
 8006036:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 800603a:	e002      	b.n	8006042 <HAL_TIM_OC_Start+0x56>
 800603c:	2302      	movs	r3, #2
 800603e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006042:	6800      	ldr	r0, [r0, #0]
 8006044:	2201      	movs	r2, #1
 8006046:	f7ff ffc3 	bl	8005fd0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <HAL_TIM_OC_Start+0x98>)
 800604c:	4298      	cmp	r0, r3
 800604e:	d10a      	bne.n	8006066 <HAL_TIM_OC_Start+0x7a>
    __HAL_TIM_MOE_ENABLE(htim);
 8006050:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006056:	6443      	str	r3, [r0, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006058:	6883      	ldr	r3, [r0, #8]
 800605a:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605e:	2b06      	cmp	r3, #6
 8006060:	d10b      	bne.n	800607a <HAL_TIM_OC_Start+0x8e>
  return HAL_OK;
 8006062:	2000      	movs	r0, #0
 8006064:	e7c9      	b.n	8005ffa <HAL_TIM_OC_Start+0xe>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006066:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800606a:	d0f5      	beq.n	8006058 <HAL_TIM_OC_Start+0x6c>
 800606c:	4b06      	ldr	r3, [pc, #24]	; (8006088 <HAL_TIM_OC_Start+0x9c>)
 800606e:	4298      	cmp	r0, r3
 8006070:	d0f2      	beq.n	8006058 <HAL_TIM_OC_Start+0x6c>
 8006072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006076:	4298      	cmp	r0, r3
 8006078:	d0ee      	beq.n	8006058 <HAL_TIM_OC_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 800607a:	6803      	ldr	r3, [r0, #0]
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	6003      	str	r3, [r0, #0]
 8006082:	e7ee      	b.n	8006062 <HAL_TIM_OC_Start+0x76>
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40000400 	.word	0x40000400

0800608c <HAL_TIM_PWM_Start>:
 800608c:	f7ff bfae 	b.w	8005fec <HAL_TIM_OC_Start>

08006090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006090:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006092:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006096:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8006098:	2b01      	cmp	r3, #1
 800609a:	f04f 0002 	mov.w	r0, #2
 800609e:	d022      	beq.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a0:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80060a2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80060a6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80060aa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ae:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80060b0:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b2:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b4:	4c0c      	ldr	r4, [pc, #48]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80060b6:	42a3      	cmp	r3, r4
 80060b8:	d00a      	beq.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060be:	d007      	beq.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80060c0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d003      	beq.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80060c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	d104      	bne.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060d6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060d8:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060da:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80060dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060de:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80060e2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80060e6:	bd30      	pop	{r4, r5, pc}
 80060e8:	40012c00 	.word	0x40012c00

080060ec <HAL_TIMEx_CommutCallback>:
 80060ec:	4770      	bx	lr

080060ee <HAL_TIMEx_BreakCallback>:
 80060ee:	4770      	bx	lr

080060f0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f0:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f2:	f102 030c 	add.w	r3, r2, #12
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	320c      	adds	r2, #12
 8006100:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8006104:	6802      	ldr	r2, [r0, #0]
 8006106:	2900      	cmp	r1, #0
 8006108:	d1f2      	bne.n	80060f0 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610a:	f102 0314 	add.w	r3, r2, #20
 800610e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	f102 0c14 	add.w	ip, r2, #20
 800611a:	e84c 3100 	strex	r1, r3, [ip]
 800611e:	2900      	cmp	r1, #0
 8006120:	d1f3      	bne.n	800610a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006122:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006124:	2b01      	cmp	r3, #1
 8006126:	d10b      	bne.n	8006140 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006128:	f102 030c 	add.w	r3, r2, #12
 800612c:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006130:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	f102 0c0c 	add.w	ip, r2, #12
 8006138:	e84c 3100 	strex	r1, r3, [ip]
 800613c:	2900      	cmp	r1, #0
 800613e:	d1f3      	bne.n	8006128 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006140:	2320      	movs	r3, #32
 8006142:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	2300      	movs	r3, #0
 8006148:	6303      	str	r3, [r0, #48]	; 0x30
}
 800614a:	4770      	bx	lr

0800614c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	b510      	push	{r4, lr}
 800614e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006150:	6803      	ldr	r3, [r0, #0]
 8006152:	68c1      	ldr	r1, [r0, #12]
 8006154:	691a      	ldr	r2, [r3, #16]
 8006156:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800615a:	430a      	orrs	r2, r1
 800615c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800615e:	6882      	ldr	r2, [r0, #8]
 8006160:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8006162:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006164:	4302      	orrs	r2, r0
 8006166:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006168:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800616c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006170:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8006172:	430a      	orrs	r2, r1
 8006174:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006176:	695a      	ldr	r2, [r3, #20]
 8006178:	69a1      	ldr	r1, [r4, #24]
 800617a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800617e:	430a      	orrs	r2, r1
 8006180:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006182:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <UART_SetConfig+0x70>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d115      	bne.n	80061b4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006188:	f7ff fba0 	bl	80058cc <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800618c:	2319      	movs	r3, #25
 800618e:	4343      	muls	r3, r0
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	6820      	ldr	r0, [r4, #0]
 8006194:	0092      	lsls	r2, r2, #2
 8006196:	fbb3 f3f2 	udiv	r3, r3, r2
 800619a:	2264      	movs	r2, #100	; 0x64
 800619c:	fbb3 f1f2 	udiv	r1, r3, r2
 80061a0:	fb02 3311 	mls	r3, r2, r1, r3
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	3332      	adds	r3, #50	; 0x32
 80061a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ac:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80061b0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80061b2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80061b4:	f7ff fb7a 	bl	80058ac <HAL_RCC_GetPCLK1Freq>
 80061b8:	e7e8      	b.n	800618c <UART_SetConfig+0x40>
 80061ba:	bf00      	nop
 80061bc:	40013800 	.word	0x40013800

080061c0 <HAL_UART_Init>:
{
 80061c0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80061c2:	4604      	mov	r4, r0
 80061c4:	b348      	cbz	r0, 800621a <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80061c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80061ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061ce:	b91b      	cbnz	r3, 80061d8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80061d0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 80061d4:	f7fc fd70 	bl	8002cb8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80061da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80061dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 80061e0:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80061e2:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80061e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80061ea:	f7ff ffaf 	bl	800614c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ee:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fa:	695a      	ldr	r2, [r3, #20]
 80061fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006200:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006208:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800620a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620c:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800620e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006212:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006216:	6360      	str	r0, [r4, #52]	; 0x34
}
 8006218:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800621a:	2001      	movs	r0, #1
 800621c:	e7fc      	b.n	8006218 <HAL_UART_Init+0x58>
	...

08006220 <HAL_UART_Transmit_DMA>:
{
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4604      	mov	r4, r0
 8006224:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006226:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800622a:	2a20      	cmp	r2, #32
 800622c:	d127      	bne.n	800627e <HAL_UART_Transmit_DMA+0x5e>
    if ((pData == NULL) || (Size == 0U))
 800622e:	b341      	cbz	r1, 8006282 <HAL_UART_Transmit_DMA+0x62>
 8006230:	b33b      	cbz	r3, 8006282 <HAL_UART_Transmit_DMA+0x62>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006232:	2200      	movs	r2, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006234:	2021      	movs	r0, #33	; 0x21
    huart->TxXferCount = Size;
 8006236:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006238:	4d13      	ldr	r5, [pc, #76]	; (8006288 <HAL_UART_Transmit_DMA+0x68>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	6462      	str	r2, [r4, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800623c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006240:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    huart->TxXferSize = Size;
 8006242:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8006244:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006246:	6285      	str	r5, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006248:	4d10      	ldr	r5, [pc, #64]	; (800628c <HAL_UART_Transmit_DMA+0x6c>)
 800624a:	62c5      	str	r5, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800624c:	4d10      	ldr	r5, [pc, #64]	; (8006290 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 800624e:	e9c0 520c 	strd	r5, r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006252:	6822      	ldr	r2, [r4, #0]
 8006254:	3204      	adds	r2, #4
 8006256:	f7fd fa7b 	bl	8003750 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800625a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006264:	f102 0314 	add.w	r3, r2, #20
 8006268:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800626c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	f102 0114 	add.w	r1, r2, #20
 8006274:	e841 3000 	strex	r0, r3, [r1]
 8006278:	2800      	cmp	r0, #0
 800627a:	d1f3      	bne.n	8006264 <HAL_UART_Transmit_DMA+0x44>
}
 800627c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800627e:	2002      	movs	r0, #2
 8006280:	e7fc      	b.n	800627c <HAL_UART_Transmit_DMA+0x5c>
      return HAL_ERROR;
 8006282:	2001      	movs	r0, #1
 8006284:	e7fa      	b.n	800627c <HAL_UART_Transmit_DMA+0x5c>
 8006286:	bf00      	nop
 8006288:	08006295 	.word	0x08006295
 800628c:	080062e3 	.word	0x080062e3
 8006290:	080062f3 	.word	0x080062f3

08006294 <UART_DMATransmitCplt>:
{
 8006294:	b508      	push	{r3, lr}
 8006296:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006298:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800629a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f013 0320 	ands.w	r3, r3, #32
 80062a2:	d11a      	bne.n	80062da <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 80062a4:	84c3      	strh	r3, [r0, #38]	; 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062a6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	f102 0314 	add.w	r3, r2, #20
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b4:	3214      	adds	r2, #20
 80062b6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80062ba:	6802      	ldr	r2, [r0, #0]
 80062bc:	2900      	cmp	r1, #0
 80062be:	d1f2      	bne.n	80062a6 <UART_DMATransmitCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	f102 030c 	add.w	r3, r2, #12
 80062c4:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062cc:	f102 000c 	add.w	r0, r2, #12
 80062d0:	e840 3100 	strex	r1, r3, [r0]
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d1f3      	bne.n	80062c0 <UART_DMATransmitCplt+0x2c>
}
 80062d8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80062da:	f7fc fbd7 	bl	8002a8c <HAL_UART_TxCpltCallback>
}
 80062de:	e7fb      	b.n	80062d8 <UART_DMATransmitCplt+0x44>

080062e0 <HAL_UART_TxHalfCpltCallback>:
 80062e0:	4770      	bx	lr

080062e2 <UART_DMATxHalfCplt>:
{
 80062e2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80062e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80062e6:	f7ff fffb 	bl	80062e0 <HAL_UART_TxHalfCpltCallback>
}
 80062ea:	bd08      	pop	{r3, pc}

080062ec <HAL_UART_RxCpltCallback>:
 80062ec:	4770      	bx	lr

080062ee <HAL_UART_RxHalfCpltCallback>:
 80062ee:	4770      	bx	lr

080062f0 <HAL_UART_ErrorCallback>:
 80062f0:	4770      	bx	lr

080062f2 <UART_DMAError>:
{
 80062f2:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062f6:	6803      	ldr	r3, [r0, #0]
 80062f8:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062fa:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80062fe:	2921      	cmp	r1, #33	; 0x21
 8006300:	d112      	bne.n	8006328 <UART_DMAError+0x36>
 8006302:	0612      	lsls	r2, r2, #24
 8006304:	d510      	bpl.n	8006328 <UART_DMAError+0x36>
    huart->TxXferCount = 0x00U;
 8006306:	2200      	movs	r2, #0
 8006308:	84c2      	strh	r2, [r0, #38]	; 0x26
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	f103 020c 	add.w	r2, r3, #12
 800630e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006312:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	f103 0c0c 	add.w	ip, r3, #12
 800631a:	e84c 2100 	strex	r1, r2, [ip]
 800631e:	2900      	cmp	r1, #0
 8006320:	d1f3      	bne.n	800630a <UART_DMAError+0x18>
  huart->gState = HAL_UART_STATE_READY;
 8006322:	2220      	movs	r2, #32
 8006324:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006328:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800632a:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 800632e:	2a22      	cmp	r2, #34	; 0x22
 8006330:	d105      	bne.n	800633e <UART_DMAError+0x4c>
 8006332:	065b      	lsls	r3, r3, #25
 8006334:	d503      	bpl.n	800633e <UART_DMAError+0x4c>
    huart->RxXferCount = 0x00U;
 8006336:	2300      	movs	r3, #0
 8006338:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800633a:	f7ff fed9 	bl	80060f0 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800633e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006340:	f043 0310 	orr.w	r3, r3, #16
 8006344:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_UART_ErrorCallback(huart);
 8006346:	f7ff ffd3 	bl	80062f0 <HAL_UART_ErrorCallback>
}
 800634a:	bd08      	pop	{r3, pc}

0800634c <UART_DMAAbortOnError>:
{
 800634c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800634e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006350:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8006352:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006354:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006356:	f7ff ffcb 	bl	80062f0 <HAL_UART_ErrorCallback>
}
 800635a:	bd08      	pop	{r3, pc}

0800635c <UART_DMARxHalfCplt>:
{
 800635c:	b508      	push	{r3, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800635e:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006360:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006362:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006364:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006366:	2b01      	cmp	r3, #1
 8006368:	d104      	bne.n	8006374 <UART_DMARxHalfCplt+0x18>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800636a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800636c:	0849      	lsrs	r1, r1, #1
 800636e:	f7fc fb7f 	bl	8002a70 <HAL_UARTEx_RxEventCallback>
}
 8006372:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8006374:	f7ff ffbb 	bl	80062ee <HAL_UART_RxHalfCpltCallback>
}
 8006378:	e7fb      	b.n	8006372 <UART_DMARxHalfCplt+0x16>

0800637a <UART_DMAReceiveCplt>:
{
 800637a:	b508      	push	{r3, lr}
 800637c:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800637e:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006380:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f013 0320 	ands.w	r3, r3, #32
 8006388:	d137      	bne.n	80063fa <UART_DMAReceiveCplt+0x80>
    huart->RxXferCount = 0U;
 800638a:	85c3      	strh	r3, [r0, #46]	; 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800638c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638e:	f102 030c 	add.w	r3, r2, #12
 8006392:	e853 3f00 	ldrex	r3, [r3]
 8006396:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	320c      	adds	r2, #12
 800639c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80063a0:	6803      	ldr	r3, [r0, #0]
 80063a2:	2900      	cmp	r1, #0
 80063a4:	d1f2      	bne.n	800638c <UART_DMAReceiveCplt+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	f103 0214 	add.w	r2, r3, #20
 80063aa:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	f103 0c14 	add.w	ip, r3, #20
 80063b6:	e84c 2100 	strex	r1, r2, [ip]
 80063ba:	2900      	cmp	r1, #0
 80063bc:	d1f3      	bne.n	80063a6 <UART_DMAReceiveCplt+0x2c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	f103 0214 	add.w	r2, r3, #20
 80063c2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	f103 0c14 	add.w	ip, r3, #20
 80063ce:	e84c 2100 	strex	r1, r2, [ip]
 80063d2:	2900      	cmp	r1, #0
 80063d4:	d1f3      	bne.n	80063be <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 80063d6:	2220      	movs	r2, #32
 80063d8:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063dc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80063de:	2a01      	cmp	r2, #1
 80063e0:	d10b      	bne.n	80063fa <UART_DMAReceiveCplt+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	f103 020c 	add.w	r2, r3, #12
 80063e6:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	f103 0c0c 	add.w	ip, r3, #12
 80063f2:	e84c 2100 	strex	r1, r2, [ip]
 80063f6:	2900      	cmp	r1, #0
 80063f8:	d1f3      	bne.n	80063e2 <UART_DMAReceiveCplt+0x68>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063fa:	2300      	movs	r3, #0
 80063fc:	6343      	str	r3, [r0, #52]	; 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006400:	2b01      	cmp	r3, #1
 8006402:	d103      	bne.n	800640c <UART_DMAReceiveCplt+0x92>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006404:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8006406:	f7fc fb33 	bl	8002a70 <HAL_UARTEx_RxEventCallback>
}
 800640a:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 800640c:	f7ff ff6e 	bl	80062ec <HAL_UART_RxCpltCallback>
}
 8006410:	e7fb      	b.n	800640a <UART_DMAReceiveCplt+0x90>

08006412 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006412:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8006416:	b507      	push	{r0, r1, r2, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006418:	2b22      	cmp	r3, #34	; 0x22
 800641a:	d142      	bne.n	80064a2 <UART_Receive_IT.isra.0+0x90>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800641c:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800641e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006420:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006424:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006426:	d13f      	bne.n	80064a8 <UART_Receive_IT.isra.0+0x96>
 8006428:	6901      	ldr	r1, [r0, #16]
 800642a:	2900      	cmp	r1, #0
 800642c:	d13f      	bne.n	80064ae <UART_Receive_IT.isra.0+0x9c>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800642e:	6852      	ldr	r2, [r2, #4]
 8006430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006434:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8006438:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800643a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800643c:	3b01      	subs	r3, #1
 800643e:	b29b      	uxth	r3, r3
 8006440:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8006442:	2b00      	cmp	r3, #0
 8006444:	d12d      	bne.n	80064a2 <UART_Receive_IT.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006446:	6802      	ldr	r2, [r0, #0]
 8006448:	68d1      	ldr	r1, [r2, #12]
 800644a:	f021 0120 	bic.w	r1, r1, #32
 800644e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006450:	68d1      	ldr	r1, [r2, #12]
 8006452:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8006456:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006458:	6951      	ldr	r1, [r2, #20]
 800645a:	f021 0101 	bic.w	r1, r1, #1
 800645e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8006460:	2220      	movs	r2, #32
 8006462:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006466:	6343      	str	r3, [r0, #52]	; 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800646a:	2a01      	cmp	r2, #1
 800646c:	6802      	ldr	r2, [r0, #0]
 800646e:	d128      	bne.n	80064c2 <UART_Receive_IT.isra.0+0xb0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	f102 030c 	add.w	r3, r2, #12
 8006476:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800647a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	f102 0c0c 	add.w	ip, r2, #12
 8006482:	e84c 3100 	strex	r1, r3, [ip]
 8006486:	2900      	cmp	r1, #0
 8006488:	d1f3      	bne.n	8006472 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	06db      	lsls	r3, r3, #27
 800648e:	d505      	bpl.n	800649c <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006490:	9101      	str	r1, [sp, #4]
 8006492:	6813      	ldr	r3, [r2, #0]
 8006494:	9301      	str	r3, [sp, #4]
 8006496:	6853      	ldr	r3, [r2, #4]
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800649c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800649e:	f7fc fae7 	bl	8002a70 <HAL_UARTEx_RxEventCallback>
}
 80064a2:	b003      	add	sp, #12
 80064a4:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064a8:	b939      	cbnz	r1, 80064ba <UART_Receive_IT.isra.0+0xa8>
 80064aa:	6901      	ldr	r1, [r0, #16]
 80064ac:	b929      	cbnz	r1, 80064ba <UART_Receive_IT.isra.0+0xa8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064ae:	6852      	ldr	r2, [r2, #4]
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80064b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80064b6:	3301      	adds	r3, #1
 80064b8:	e7be      	b.n	8006438 <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064ba:	6852      	ldr	r2, [r2, #4]
 80064bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064c0:	e7f7      	b.n	80064b2 <UART_Receive_IT.isra.0+0xa0>
        HAL_UART_RxCpltCallback(huart);
 80064c2:	f7ff ff13 	bl	80062ec <HAL_UART_RxCpltCallback>
 80064c6:	e7ec      	b.n	80064a2 <UART_Receive_IT.isra.0+0x90>

080064c8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064c8:	6803      	ldr	r3, [r0, #0]
{
 80064ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064cc:	681a      	ldr	r2, [r3, #0]
{
 80064ce:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80064d0:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064d2:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80064d6:	d108      	bne.n	80064ea <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d8:	0696      	lsls	r6, r2, #26
 80064da:	d568      	bpl.n	80065ae <HAL_UART_IRQHandler+0xe6>
 80064dc:	068d      	lsls	r5, r1, #26
 80064de:	d566      	bpl.n	80065ae <HAL_UART_IRQHandler+0xe6>
}
 80064e0:	b002      	add	sp, #8
 80064e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80064e6:	f7ff bf94 	b.w	8006412 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064ea:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064ee:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80064f2:	4305      	orrs	r5, r0
 80064f4:	d05b      	beq.n	80065ae <HAL_UART_IRQHandler+0xe6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064f6:	07d6      	lsls	r6, r2, #31
 80064f8:	d505      	bpl.n	8006506 <HAL_UART_IRQHandler+0x3e>
 80064fa:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064fc:	bf42      	ittt	mi
 80064fe:	6c63      	ldrmi	r3, [r4, #68]	; 0x44
 8006500:	f043 0301 	orrmi.w	r3, r3, #1
 8006504:	6463      	strmi	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006506:	0753      	lsls	r3, r2, #29
 8006508:	d504      	bpl.n	8006514 <HAL_UART_IRQHandler+0x4c>
 800650a:	b118      	cbz	r0, 8006514 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800650c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800650e:	f043 0302 	orr.w	r3, r3, #2
 8006512:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006514:	0796      	lsls	r6, r2, #30
 8006516:	d504      	bpl.n	8006522 <HAL_UART_IRQHandler+0x5a>
 8006518:	b118      	cbz	r0, 8006522 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800651a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800651c:	f043 0304 	orr.w	r3, r3, #4
 8006520:	6463      	str	r3, [r4, #68]	; 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006522:	0715      	lsls	r5, r2, #28
 8006524:	d507      	bpl.n	8006536 <HAL_UART_IRQHandler+0x6e>
 8006526:	f001 0320 	and.w	r3, r1, #32
 800652a:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800652c:	bf1e      	ittt	ne
 800652e:	6c63      	ldrne	r3, [r4, #68]	; 0x44
 8006530:	f043 0308 	orrne.w	r3, r3, #8
 8006534:	6463      	strne	r3, [r4, #68]	; 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006536:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006538:	2b00      	cmp	r3, #0
 800653a:	d032      	beq.n	80065a2 <HAL_UART_IRQHandler+0xda>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800653c:	0692      	lsls	r2, r2, #26
 800653e:	d504      	bpl.n	800654a <HAL_UART_IRQHandler+0x82>
 8006540:	068b      	lsls	r3, r1, #26
 8006542:	d502      	bpl.n	800654a <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8006544:	4620      	mov	r0, r4
 8006546:	f7ff ff64 	bl	8006412 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800654a:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800654c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800654e:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006550:	6c62      	ldr	r2, [r4, #68]	; 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006556:	f002 0208 	and.w	r2, r2, #8
 800655a:	ea53 0502 	orrs.w	r5, r3, r2
 800655e:	d022      	beq.n	80065a6 <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 8006560:	f7ff fdc6 	bl	80060f0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006564:	6973      	ldr	r3, [r6, #20]
 8006566:	065e      	lsls	r6, r3, #25
 8006568:	d518      	bpl.n	800659c <HAL_UART_IRQHandler+0xd4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800656a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	f102 0314 	add.w	r3, r2, #20
 8006570:	e853 3f00 	ldrex	r3, [r3]
 8006574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	3214      	adds	r2, #20
 800657a:	e842 3100 	strex	r1, r3, [r2]
 800657e:	2900      	cmp	r1, #0
 8006580:	d1f3      	bne.n	800656a <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 8006582:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006584:	b150      	cbz	r0, 800659c <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006586:	4b74      	ldr	r3, [pc, #464]	; (8006758 <HAL_UART_IRQHandler+0x290>)
 8006588:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658a:	f7fd f93f 	bl	800380c <HAL_DMA_Abort_IT>
 800658e:	b140      	cbz	r0, 80065a2 <HAL_UART_IRQHandler+0xda>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006590:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006592:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8006594:	b002      	add	sp, #8
 8006596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800659c:	4620      	mov	r0, r4
 800659e:	f7ff fea7 	bl	80062f0 <HAL_UART_ErrorCallback>
}
 80065a2:	b002      	add	sp, #8
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80065a6:	f7ff fea3 	bl	80062f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065aa:	6465      	str	r5, [r4, #68]	; 0x44
 80065ac:	e7f9      	b.n	80065a2 <HAL_UART_IRQHandler+0xda>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ae:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80065b0:	2801      	cmp	r0, #1
 80065b2:	f040 8094 	bne.w	80066de <HAL_UART_IRQHandler+0x216>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065b6:	06d5      	lsls	r5, r2, #27
 80065b8:	f140 8091 	bpl.w	80066de <HAL_UART_IRQHandler+0x216>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065bc:	06c8      	lsls	r0, r1, #27
 80065be:	f140 808e 	bpl.w	80066de <HAL_UART_IRQHandler+0x216>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065c2:	2200      	movs	r2, #0
 80065c4:	9201      	str	r2, [sp, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	9201      	str	r2, [sp, #4]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	9201      	str	r2, [sp, #4]
 80065ce:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	695a      	ldr	r2, [r3, #20]
 80065d2:	0652      	lsls	r2, r2, #25
 80065d4:	d54d      	bpl.n	8006672 <HAL_UART_IRQHandler+0x1aa>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065d6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80065d8:	680a      	ldr	r2, [r1, #0]
 80065da:	6852      	ldr	r2, [r2, #4]
 80065dc:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80065de:	2a00      	cmp	r2, #0
 80065e0:	d0df      	beq.n	80065a2 <HAL_UART_IRQHandler+0xda>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065e2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80065e4:	4290      	cmp	r0, r2
 80065e6:	d9dc      	bls.n	80065a2 <HAL_UART_IRQHandler+0xda>
        huart->RxXferCount = nb_remaining_rx_data;
 80065e8:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065ea:	698a      	ldr	r2, [r1, #24]
 80065ec:	2a20      	cmp	r2, #32
 80065ee:	d036      	beq.n	800665e <HAL_UART_IRQHandler+0x196>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	f103 020c 	add.w	r2, r3, #12
 80065f4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	f103 000c 	add.w	r0, r3, #12
 8006600:	e840 2100 	strex	r1, r2, [r0]
 8006604:	2900      	cmp	r1, #0
 8006606:	d1f3      	bne.n	80065f0 <HAL_UART_IRQHandler+0x128>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006608:	f103 0214 	add.w	r2, r3, #20
 800660c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006610:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	f103 0014 	add.w	r0, r3, #20
 8006618:	e840 2100 	strex	r1, r2, [r0]
 800661c:	2900      	cmp	r1, #0
 800661e:	d1f3      	bne.n	8006608 <HAL_UART_IRQHandler+0x140>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006620:	f103 0214 	add.w	r2, r3, #20
 8006624:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	f103 0014 	add.w	r0, r3, #20
 8006630:	e840 2100 	strex	r1, r2, [r0]
 8006634:	2900      	cmp	r1, #0
 8006636:	d1f3      	bne.n	8006620 <HAL_UART_IRQHandler+0x158>
          huart->RxState = HAL_UART_STATE_READY;
 8006638:	2220      	movs	r2, #32
 800663a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663e:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	f103 020c 	add.w	r2, r3, #12
 8006644:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006648:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	f103 000c 	add.w	r0, r3, #12
 8006650:	e840 2100 	strex	r1, r2, [r0]
 8006654:	2900      	cmp	r1, #0
 8006656:	d1f3      	bne.n	8006640 <HAL_UART_IRQHandler+0x178>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006658:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800665a:	f7fd f8b8 	bl	80037ce <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800665e:	2302      	movs	r3, #2
 8006660:	6363      	str	r3, [r4, #52]	; 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006662:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8006664:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8006666:	1ac9      	subs	r1, r1, r3
 8006668:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800666a:	4620      	mov	r0, r4
 800666c:	f7fc fa00 	bl	8002a70 <HAL_UARTEx_RxEventCallback>
 8006670:	e797      	b.n	80065a2 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006672:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8006674:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006676:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
      if ((huart->RxXferCount > 0U)
 8006678:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800667a:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800667c:	2800      	cmp	r0, #0
 800667e:	d090      	beq.n	80065a2 <HAL_UART_IRQHandler+0xda>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006680:	1a89      	subs	r1, r1, r2
 8006682:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8006684:	2900      	cmp	r1, #0
 8006686:	d08c      	beq.n	80065a2 <HAL_UART_IRQHandler+0xda>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	f103 020c 	add.w	r2, r3, #12
 800668c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006690:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	f103 050c 	add.w	r5, r3, #12
 8006698:	e845 2000 	strex	r0, r2, [r5]
 800669c:	2800      	cmp	r0, #0
 800669e:	d1f3      	bne.n	8006688 <HAL_UART_IRQHandler+0x1c0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	f103 0214 	add.w	r2, r3, #20
 80066a4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	f103 0514 	add.w	r5, r3, #20
 80066b0:	e845 2000 	strex	r0, r2, [r5]
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1f3      	bne.n	80066a0 <HAL_UART_IRQHandler+0x1d8>
        huart->RxState = HAL_UART_STATE_READY;
 80066b8:	2220      	movs	r2, #32
 80066ba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066be:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	f103 020c 	add.w	r2, r3, #12
 80066c4:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	f103 050c 	add.w	r5, r3, #12
 80066d0:	e845 2000 	strex	r0, r2, [r5]
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d1f3      	bne.n	80066c0 <HAL_UART_IRQHandler+0x1f8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80066d8:	2302      	movs	r3, #2
 80066da:	6363      	str	r3, [r4, #52]	; 0x34
 80066dc:	e7c5      	b.n	800666a <HAL_UART_IRQHandler+0x1a2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066de:	0616      	lsls	r6, r2, #24
 80066e0:	d528      	bpl.n	8006734 <HAL_UART_IRQHandler+0x26c>
 80066e2:	060d      	lsls	r5, r1, #24
 80066e4:	d526      	bpl.n	8006734 <HAL_UART_IRQHandler+0x26c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066e6:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80066ea:	2a21      	cmp	r2, #33	; 0x21
 80066ec:	f47f af59 	bne.w	80065a2 <HAL_UART_IRQHandler+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f0:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066f2:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80066f8:	d117      	bne.n	800672a <HAL_UART_IRQHandler+0x262>
 80066fa:	6921      	ldr	r1, [r4, #16]
 80066fc:	b9a9      	cbnz	r1, 800672a <HAL_UART_IRQHandler+0x262>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066fe:	f832 1b02 	ldrh.w	r1, [r2], #2
 8006702:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006706:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006708:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800670a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800670c:	3a01      	subs	r2, #1
 800670e:	b292      	uxth	r2, r2
 8006710:	84e2      	strh	r2, [r4, #38]	; 0x26
 8006712:	2a00      	cmp	r2, #0
 8006714:	f47f af45 	bne.w	80065a2 <HAL_UART_IRQHandler+0xda>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800671e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006726:	60da      	str	r2, [r3, #12]
 8006728:	e73b      	b.n	80065a2 <HAL_UART_IRQHandler+0xda>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800672a:	1c51      	adds	r1, r2, #1
 800672c:	6221      	str	r1, [r4, #32]
 800672e:	7812      	ldrb	r2, [r2, #0]
 8006730:	605a      	str	r2, [r3, #4]
 8006732:	e7ea      	b.n	800670a <HAL_UART_IRQHandler+0x242>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006734:	0650      	lsls	r0, r2, #25
 8006736:	f57f af34 	bpl.w	80065a2 <HAL_UART_IRQHandler+0xda>
 800673a:	064a      	lsls	r2, r1, #25
 800673c:	f57f af31 	bpl.w	80065a2 <HAL_UART_IRQHandler+0xda>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006740:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8006742:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006748:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800674a:	2320      	movs	r3, #32
 800674c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_UART_TxCpltCallback(huart);
 8006750:	f7fc f99c 	bl	8002a8c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8006754:	e725      	b.n	80065a2 <HAL_UART_IRQHandler+0xda>
 8006756:	bf00      	nop
 8006758:	0800634d 	.word	0x0800634d

0800675c <UART_Start_Receive_DMA>:
{
 800675c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800675e:	4613      	mov	r3, r2
  huart->RxXferSize = Size;
 8006760:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006762:	2500      	movs	r5, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006764:	2222      	movs	r2, #34	; 0x22
{
 8006766:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8006768:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676a:	6445      	str	r5, [r0, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800676c:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006770:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8006772:	4a1d      	ldr	r2, [pc, #116]	; (80067e8 <UART_Start_Receive_DMA+0x8c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006774:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006776:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006778:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <UART_Start_Receive_DMA+0x90>)
 800677a:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800677c:	4a1c      	ldr	r2, [pc, #112]	; (80067f0 <UART_Start_Receive_DMA+0x94>)
  huart->hdmarx->XferAbortCallback = NULL;
 800677e:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006782:	460a      	mov	r2, r1
 8006784:	1d31      	adds	r1, r6, #4
 8006786:	f7fc ffe3 	bl	8003750 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	9501      	str	r5, [sp, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	9201      	str	r2, [sp, #4]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9a01      	ldr	r2, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006798:	6922      	ldr	r2, [r4, #16]
 800679a:	b15a      	cbz	r2, 80067b4 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	f103 020c 	add.w	r2, r3, #12
 80067a0:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	f103 000c 	add.w	r0, r3, #12
 80067ac:	e840 2100 	strex	r1, r2, [r0]
 80067b0:	2900      	cmp	r1, #0
 80067b2:	d1f3      	bne.n	800679c <UART_Start_Receive_DMA+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	f103 0214 	add.w	r2, r3, #20
 80067b8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067bc:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	f103 0014 	add.w	r0, r3, #20
 80067c4:	e840 2100 	strex	r1, r2, [r0]
 80067c8:	2900      	cmp	r1, #0
 80067ca:	d1f3      	bne.n	80067b4 <UART_Start_Receive_DMA+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	f103 0214 	add.w	r2, r3, #20
 80067d0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	f103 0114 	add.w	r1, r3, #20
 80067dc:	e841 2000 	strex	r0, r2, [r1]
 80067e0:	2800      	cmp	r0, #0
 80067e2:	d1f3      	bne.n	80067cc <UART_Start_Receive_DMA+0x70>
}
 80067e4:	b002      	add	sp, #8
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	0800637b 	.word	0x0800637b
 80067ec:	0800635d 	.word	0x0800635d
 80067f0:	080062f3 	.word	0x080062f3

080067f4 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 80067f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80067f6:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
{
 80067fa:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fc:	2e20      	cmp	r6, #32
 80067fe:	d122      	bne.n	8006846 <HAL_UARTEx_ReceiveToIdle_DMA+0x52>
    if ((pData == NULL) || (Size == 0U))
 8006800:	b911      	cbnz	r1, 8006808 <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
      return HAL_ERROR;
 8006802:	2001      	movs	r0, #1
}
 8006804:	b002      	add	sp, #8
 8006806:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 8006808:	2a00      	cmp	r2, #0
 800680a:	d0fa      	beq.n	8006802 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800680c:	2301      	movs	r3, #1
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800680e:	2500      	movs	r5, #0
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006810:	6303      	str	r3, [r0, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006812:	6345      	str	r5, [r0, #52]	; 0x34
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006814:	f7ff ffa2 	bl	800675c <UART_Start_Receive_DMA>
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006818:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800681a:	2b01      	cmp	r3, #1
 800681c:	d1f1      	bne.n	8006802 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	9501      	str	r5, [sp, #4]
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	6853      	ldr	r3, [r2, #4]
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	9b01      	ldr	r3, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682c:	f102 030c 	add.w	r3, r2, #12
 8006830:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006834:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006838:	f102 040c 	add.w	r4, r2, #12
 800683c:	e844 3100 	strex	r1, r3, [r4]
 8006840:	2900      	cmp	r1, #0
 8006842:	d1f3      	bne.n	800682c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006844:	e7de      	b.n	8006804 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
    return HAL_BUSY;
 8006846:	2002      	movs	r0, #2
 8006848:	e7dc      	b.n	8006804 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>

0800684a <atof>:
 800684a:	2100      	movs	r1, #0
 800684c:	f000 be1c 	b.w	8007488 <strtod>

08006850 <atoi>:
 8006850:	220a      	movs	r2, #10
 8006852:	2100      	movs	r1, #0
 8006854:	f000 bea2 	b.w	800759c <strtol>

08006858 <sulp>:
 8006858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800685c:	460f      	mov	r7, r1
 800685e:	4690      	mov	r8, r2
 8006860:	f003 fc1a 	bl	800a098 <__ulp>
 8006864:	4604      	mov	r4, r0
 8006866:	460d      	mov	r5, r1
 8006868:	f1b8 0f00 	cmp.w	r8, #0
 800686c:	d011      	beq.n	8006892 <sulp+0x3a>
 800686e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006872:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006876:	2b00      	cmp	r3, #0
 8006878:	dd0b      	ble.n	8006892 <sulp+0x3a>
 800687a:	2400      	movs	r4, #0
 800687c:	051b      	lsls	r3, r3, #20
 800687e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006882:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006886:	4622      	mov	r2, r4
 8006888:	462b      	mov	r3, r5
 800688a:	f7f9 fe2f 	bl	80004ec <__aeabi_dmul>
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	4620      	mov	r0, r4
 8006894:	4629      	mov	r1, r5
 8006896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800689a:	0000      	movs	r0, r0
 800689c:	0000      	movs	r0, r0
	...

080068a0 <_strtod_l>:
 80068a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	b09f      	sub	sp, #124	; 0x7c
 80068a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80068a8:	2200      	movs	r2, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	921a      	str	r2, [sp, #104]	; 0x68
 80068ae:	460d      	mov	r5, r1
 80068b0:	f04f 0800 	mov.w	r8, #0
 80068b4:	f04f 0900 	mov.w	r9, #0
 80068b8:	460a      	mov	r2, r1
 80068ba:	9219      	str	r2, [sp, #100]	; 0x64
 80068bc:	7811      	ldrb	r1, [r2, #0]
 80068be:	292b      	cmp	r1, #43	; 0x2b
 80068c0:	d04a      	beq.n	8006958 <_strtod_l+0xb8>
 80068c2:	d838      	bhi.n	8006936 <_strtod_l+0x96>
 80068c4:	290d      	cmp	r1, #13
 80068c6:	d832      	bhi.n	800692e <_strtod_l+0x8e>
 80068c8:	2908      	cmp	r1, #8
 80068ca:	d832      	bhi.n	8006932 <_strtod_l+0x92>
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d03b      	beq.n	8006948 <_strtod_l+0xa8>
 80068d0:	2200      	movs	r2, #0
 80068d2:	920e      	str	r2, [sp, #56]	; 0x38
 80068d4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80068d6:	7832      	ldrb	r2, [r6, #0]
 80068d8:	2a30      	cmp	r2, #48	; 0x30
 80068da:	f040 80b2 	bne.w	8006a42 <_strtod_l+0x1a2>
 80068de:	7872      	ldrb	r2, [r6, #1]
 80068e0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80068e4:	2a58      	cmp	r2, #88	; 0x58
 80068e6:	d16e      	bne.n	80069c6 <_strtod_l+0x126>
 80068e8:	9302      	str	r3, [sp, #8]
 80068ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ec:	4620      	mov	r0, r4
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	ab1a      	add	r3, sp, #104	; 0x68
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4a8c      	ldr	r2, [pc, #560]	; (8006b28 <_strtod_l+0x288>)
 80068f6:	ab1b      	add	r3, sp, #108	; 0x6c
 80068f8:	a919      	add	r1, sp, #100	; 0x64
 80068fa:	f002 fca9 	bl	8009250 <__gethex>
 80068fe:	f010 070f 	ands.w	r7, r0, #15
 8006902:	4605      	mov	r5, r0
 8006904:	d005      	beq.n	8006912 <_strtod_l+0x72>
 8006906:	2f06      	cmp	r7, #6
 8006908:	d128      	bne.n	800695c <_strtod_l+0xbc>
 800690a:	2300      	movs	r3, #0
 800690c:	3601      	adds	r6, #1
 800690e:	9619      	str	r6, [sp, #100]	; 0x64
 8006910:	930e      	str	r3, [sp, #56]	; 0x38
 8006912:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006914:	2b00      	cmp	r3, #0
 8006916:	f040 85a0 	bne.w	800745a <_strtod_l+0xbba>
 800691a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800691c:	b1cb      	cbz	r3, 8006952 <_strtod_l+0xb2>
 800691e:	4642      	mov	r2, r8
 8006920:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006924:	4610      	mov	r0, r2
 8006926:	4619      	mov	r1, r3
 8006928:	b01f      	add	sp, #124	; 0x7c
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	2920      	cmp	r1, #32
 8006930:	d1ce      	bne.n	80068d0 <_strtod_l+0x30>
 8006932:	3201      	adds	r2, #1
 8006934:	e7c1      	b.n	80068ba <_strtod_l+0x1a>
 8006936:	292d      	cmp	r1, #45	; 0x2d
 8006938:	d1ca      	bne.n	80068d0 <_strtod_l+0x30>
 800693a:	2101      	movs	r1, #1
 800693c:	910e      	str	r1, [sp, #56]	; 0x38
 800693e:	1c51      	adds	r1, r2, #1
 8006940:	9119      	str	r1, [sp, #100]	; 0x64
 8006942:	7852      	ldrb	r2, [r2, #1]
 8006944:	2a00      	cmp	r2, #0
 8006946:	d1c5      	bne.n	80068d4 <_strtod_l+0x34>
 8006948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800694a:	9519      	str	r5, [sp, #100]	; 0x64
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 8582 	bne.w	8007456 <_strtod_l+0xbb6>
 8006952:	4642      	mov	r2, r8
 8006954:	464b      	mov	r3, r9
 8006956:	e7e5      	b.n	8006924 <_strtod_l+0x84>
 8006958:	2100      	movs	r1, #0
 800695a:	e7ef      	b.n	800693c <_strtod_l+0x9c>
 800695c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800695e:	b13a      	cbz	r2, 8006970 <_strtod_l+0xd0>
 8006960:	2135      	movs	r1, #53	; 0x35
 8006962:	a81c      	add	r0, sp, #112	; 0x70
 8006964:	f003 fc84 	bl	800a270 <__copybits>
 8006968:	4620      	mov	r0, r4
 800696a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800696c:	f003 f868 	bl	8009a40 <_Bfree>
 8006970:	3f01      	subs	r7, #1
 8006972:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006974:	2f04      	cmp	r7, #4
 8006976:	d806      	bhi.n	8006986 <_strtod_l+0xe6>
 8006978:	e8df f007 	tbb	[pc, r7]
 800697c:	201d0314 	.word	0x201d0314
 8006980:	14          	.byte	0x14
 8006981:	00          	.byte	0x00
 8006982:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006986:	05e9      	lsls	r1, r5, #23
 8006988:	bf48      	it	mi
 800698a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800698e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006992:	0d1b      	lsrs	r3, r3, #20
 8006994:	051b      	lsls	r3, r3, #20
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1bb      	bne.n	8006912 <_strtod_l+0x72>
 800699a:	f001 fce3 	bl	8008364 <__errno>
 800699e:	2322      	movs	r3, #34	; 0x22
 80069a0:	6003      	str	r3, [r0, #0]
 80069a2:	e7b6      	b.n	8006912 <_strtod_l+0x72>
 80069a4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80069a8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80069ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069b0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80069b4:	e7e7      	b.n	8006986 <_strtod_l+0xe6>
 80069b6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8006b2c <_strtod_l+0x28c>
 80069ba:	e7e4      	b.n	8006986 <_strtod_l+0xe6>
 80069bc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80069c0:	f04f 38ff 	mov.w	r8, #4294967295
 80069c4:	e7df      	b.n	8006986 <_strtod_l+0xe6>
 80069c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	9219      	str	r2, [sp, #100]	; 0x64
 80069cc:	785b      	ldrb	r3, [r3, #1]
 80069ce:	2b30      	cmp	r3, #48	; 0x30
 80069d0:	d0f9      	beq.n	80069c6 <_strtod_l+0x126>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d09d      	beq.n	8006912 <_strtod_l+0x72>
 80069d6:	2301      	movs	r3, #1
 80069d8:	f04f 0a00 	mov.w	sl, #0
 80069dc:	220a      	movs	r2, #10
 80069de:	46d3      	mov	fp, sl
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80069e4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80069e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ea:	9819      	ldr	r0, [sp, #100]	; 0x64
 80069ec:	7806      	ldrb	r6, [r0, #0]
 80069ee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80069f2:	b2d9      	uxtb	r1, r3
 80069f4:	2909      	cmp	r1, #9
 80069f6:	d926      	bls.n	8006a46 <_strtod_l+0x1a6>
 80069f8:	2201      	movs	r2, #1
 80069fa:	494d      	ldr	r1, [pc, #308]	; (8006b30 <_strtod_l+0x290>)
 80069fc:	f001 fc56 	bl	80082ac <strncmp>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d030      	beq.n	8006a66 <_strtod_l+0x1c6>
 8006a04:	2000      	movs	r0, #0
 8006a06:	4632      	mov	r2, r6
 8006a08:	4603      	mov	r3, r0
 8006a0a:	465e      	mov	r6, fp
 8006a0c:	9008      	str	r0, [sp, #32]
 8006a0e:	2a65      	cmp	r2, #101	; 0x65
 8006a10:	d001      	beq.n	8006a16 <_strtod_l+0x176>
 8006a12:	2a45      	cmp	r2, #69	; 0x45
 8006a14:	d113      	bne.n	8006a3e <_strtod_l+0x19e>
 8006a16:	b91e      	cbnz	r6, 8006a20 <_strtod_l+0x180>
 8006a18:	9a05      	ldr	r2, [sp, #20]
 8006a1a:	4302      	orrs	r2, r0
 8006a1c:	d094      	beq.n	8006948 <_strtod_l+0xa8>
 8006a1e:	2600      	movs	r6, #0
 8006a20:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006a22:	1c6a      	adds	r2, r5, #1
 8006a24:	9219      	str	r2, [sp, #100]	; 0x64
 8006a26:	786a      	ldrb	r2, [r5, #1]
 8006a28:	2a2b      	cmp	r2, #43	; 0x2b
 8006a2a:	d074      	beq.n	8006b16 <_strtod_l+0x276>
 8006a2c:	2a2d      	cmp	r2, #45	; 0x2d
 8006a2e:	d078      	beq.n	8006b22 <_strtod_l+0x282>
 8006a30:	f04f 0c00 	mov.w	ip, #0
 8006a34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006a38:	2909      	cmp	r1, #9
 8006a3a:	d97f      	bls.n	8006b3c <_strtod_l+0x29c>
 8006a3c:	9519      	str	r5, [sp, #100]	; 0x64
 8006a3e:	2700      	movs	r7, #0
 8006a40:	e09e      	b.n	8006b80 <_strtod_l+0x2e0>
 8006a42:	2300      	movs	r3, #0
 8006a44:	e7c8      	b.n	80069d8 <_strtod_l+0x138>
 8006a46:	f1bb 0f08 	cmp.w	fp, #8
 8006a4a:	bfd8      	it	le
 8006a4c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8006a4e:	f100 0001 	add.w	r0, r0, #1
 8006a52:	bfd6      	itet	le
 8006a54:	fb02 3301 	mlale	r3, r2, r1, r3
 8006a58:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006a5c:	930a      	strle	r3, [sp, #40]	; 0x28
 8006a5e:	f10b 0b01 	add.w	fp, fp, #1
 8006a62:	9019      	str	r0, [sp, #100]	; 0x64
 8006a64:	e7c1      	b.n	80069ea <_strtod_l+0x14a>
 8006a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	9219      	str	r2, [sp, #100]	; 0x64
 8006a6c:	785a      	ldrb	r2, [r3, #1]
 8006a6e:	f1bb 0f00 	cmp.w	fp, #0
 8006a72:	d037      	beq.n	8006ae4 <_strtod_l+0x244>
 8006a74:	465e      	mov	r6, fp
 8006a76:	9008      	str	r0, [sp, #32]
 8006a78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006a7c:	2b09      	cmp	r3, #9
 8006a7e:	d912      	bls.n	8006aa6 <_strtod_l+0x206>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e7c4      	b.n	8006a0e <_strtod_l+0x16e>
 8006a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006a86:	3001      	adds	r0, #1
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	9219      	str	r2, [sp, #100]	; 0x64
 8006a8c:	785a      	ldrb	r2, [r3, #1]
 8006a8e:	2a30      	cmp	r2, #48	; 0x30
 8006a90:	d0f8      	beq.n	8006a84 <_strtod_l+0x1e4>
 8006a92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	f200 84e4 	bhi.w	8007464 <_strtod_l+0xbc4>
 8006a9c:	9008      	str	r0, [sp, #32]
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006aa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aa6:	3a30      	subs	r2, #48	; 0x30
 8006aa8:	f100 0301 	add.w	r3, r0, #1
 8006aac:	d014      	beq.n	8006ad8 <_strtod_l+0x238>
 8006aae:	9908      	ldr	r1, [sp, #32]
 8006ab0:	eb00 0c06 	add.w	ip, r0, r6
 8006ab4:	4419      	add	r1, r3
 8006ab6:	9108      	str	r1, [sp, #32]
 8006ab8:	4633      	mov	r3, r6
 8006aba:	210a      	movs	r1, #10
 8006abc:	4563      	cmp	r3, ip
 8006abe:	d113      	bne.n	8006ae8 <_strtod_l+0x248>
 8006ac0:	1833      	adds	r3, r6, r0
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	f106 0601 	add.w	r6, r6, #1
 8006ac8:	4406      	add	r6, r0
 8006aca:	dc1a      	bgt.n	8006b02 <_strtod_l+0x262>
 8006acc:	230a      	movs	r3, #10
 8006ace:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ad0:	fb03 2301 	mla	r3, r3, r1, r2
 8006ad4:	930a      	str	r3, [sp, #40]	; 0x28
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006ada:	4618      	mov	r0, r3
 8006adc:	1c51      	adds	r1, r2, #1
 8006ade:	9119      	str	r1, [sp, #100]	; 0x64
 8006ae0:	7852      	ldrb	r2, [r2, #1]
 8006ae2:	e7c9      	b.n	8006a78 <_strtod_l+0x1d8>
 8006ae4:	4658      	mov	r0, fp
 8006ae6:	e7d2      	b.n	8006a8e <_strtod_l+0x1ee>
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	f103 0301 	add.w	r3, r3, #1
 8006aee:	dc03      	bgt.n	8006af8 <_strtod_l+0x258>
 8006af0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8006af2:	434f      	muls	r7, r1
 8006af4:	970a      	str	r7, [sp, #40]	; 0x28
 8006af6:	e7e1      	b.n	8006abc <_strtod_l+0x21c>
 8006af8:	2b10      	cmp	r3, #16
 8006afa:	bfd8      	it	le
 8006afc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006b00:	e7dc      	b.n	8006abc <_strtod_l+0x21c>
 8006b02:	2e10      	cmp	r6, #16
 8006b04:	bfdc      	itt	le
 8006b06:	230a      	movle	r3, #10
 8006b08:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006b0c:	e7e3      	b.n	8006ad6 <_strtod_l+0x236>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	9308      	str	r3, [sp, #32]
 8006b12:	2301      	movs	r3, #1
 8006b14:	e780      	b.n	8006a18 <_strtod_l+0x178>
 8006b16:	f04f 0c00 	mov.w	ip, #0
 8006b1a:	1caa      	adds	r2, r5, #2
 8006b1c:	9219      	str	r2, [sp, #100]	; 0x64
 8006b1e:	78aa      	ldrb	r2, [r5, #2]
 8006b20:	e788      	b.n	8006a34 <_strtod_l+0x194>
 8006b22:	f04f 0c01 	mov.w	ip, #1
 8006b26:	e7f8      	b.n	8006b1a <_strtod_l+0x27a>
 8006b28:	0800b38c 	.word	0x0800b38c
 8006b2c:	7ff00000 	.word	0x7ff00000
 8006b30:	0800b389 	.word	0x0800b389
 8006b34:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b36:	1c51      	adds	r1, r2, #1
 8006b38:	9119      	str	r1, [sp, #100]	; 0x64
 8006b3a:	7852      	ldrb	r2, [r2, #1]
 8006b3c:	2a30      	cmp	r2, #48	; 0x30
 8006b3e:	d0f9      	beq.n	8006b34 <_strtod_l+0x294>
 8006b40:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006b44:	2908      	cmp	r1, #8
 8006b46:	f63f af7a 	bhi.w	8006a3e <_strtod_l+0x19e>
 8006b4a:	3a30      	subs	r2, #48	; 0x30
 8006b4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006b4e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b50:	920c      	str	r2, [sp, #48]	; 0x30
 8006b52:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006b54:	1c57      	adds	r7, r2, #1
 8006b56:	9719      	str	r7, [sp, #100]	; 0x64
 8006b58:	7852      	ldrb	r2, [r2, #1]
 8006b5a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006b5e:	f1be 0f09 	cmp.w	lr, #9
 8006b62:	d938      	bls.n	8006bd6 <_strtod_l+0x336>
 8006b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b66:	1a7f      	subs	r7, r7, r1
 8006b68:	2f08      	cmp	r7, #8
 8006b6a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006b6e:	dc03      	bgt.n	8006b78 <_strtod_l+0x2d8>
 8006b70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b72:	428f      	cmp	r7, r1
 8006b74:	bfa8      	it	ge
 8006b76:	460f      	movge	r7, r1
 8006b78:	f1bc 0f00 	cmp.w	ip, #0
 8006b7c:	d000      	beq.n	8006b80 <_strtod_l+0x2e0>
 8006b7e:	427f      	negs	r7, r7
 8006b80:	2e00      	cmp	r6, #0
 8006b82:	d14f      	bne.n	8006c24 <_strtod_l+0x384>
 8006b84:	9905      	ldr	r1, [sp, #20]
 8006b86:	4301      	orrs	r1, r0
 8006b88:	f47f aec3 	bne.w	8006912 <_strtod_l+0x72>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f47f aedb 	bne.w	8006948 <_strtod_l+0xa8>
 8006b92:	2a69      	cmp	r2, #105	; 0x69
 8006b94:	d029      	beq.n	8006bea <_strtod_l+0x34a>
 8006b96:	dc26      	bgt.n	8006be6 <_strtod_l+0x346>
 8006b98:	2a49      	cmp	r2, #73	; 0x49
 8006b9a:	d026      	beq.n	8006bea <_strtod_l+0x34a>
 8006b9c:	2a4e      	cmp	r2, #78	; 0x4e
 8006b9e:	f47f aed3 	bne.w	8006948 <_strtod_l+0xa8>
 8006ba2:	499a      	ldr	r1, [pc, #616]	; (8006e0c <_strtod_l+0x56c>)
 8006ba4:	a819      	add	r0, sp, #100	; 0x64
 8006ba6:	f002 fd95 	bl	80096d4 <__match>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	f43f aecc 	beq.w	8006948 <_strtod_l+0xa8>
 8006bb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b28      	cmp	r3, #40	; 0x28
 8006bb6:	d12f      	bne.n	8006c18 <_strtod_l+0x378>
 8006bb8:	4995      	ldr	r1, [pc, #596]	; (8006e10 <_strtod_l+0x570>)
 8006bba:	aa1c      	add	r2, sp, #112	; 0x70
 8006bbc:	a819      	add	r0, sp, #100	; 0x64
 8006bbe:	f002 fd9d 	bl	80096fc <__hexnan>
 8006bc2:	2805      	cmp	r0, #5
 8006bc4:	d128      	bne.n	8006c18 <_strtod_l+0x378>
 8006bc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006bc8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006bcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006bd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006bd4:	e69d      	b.n	8006912 <_strtod_l+0x72>
 8006bd6:	210a      	movs	r1, #10
 8006bd8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006bda:	fb01 2107 	mla	r1, r1, r7, r2
 8006bde:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006be2:	9209      	str	r2, [sp, #36]	; 0x24
 8006be4:	e7b5      	b.n	8006b52 <_strtod_l+0x2b2>
 8006be6:	2a6e      	cmp	r2, #110	; 0x6e
 8006be8:	e7d9      	b.n	8006b9e <_strtod_l+0x2fe>
 8006bea:	498a      	ldr	r1, [pc, #552]	; (8006e14 <_strtod_l+0x574>)
 8006bec:	a819      	add	r0, sp, #100	; 0x64
 8006bee:	f002 fd71 	bl	80096d4 <__match>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	f43f aea8 	beq.w	8006948 <_strtod_l+0xa8>
 8006bf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006bfa:	4987      	ldr	r1, [pc, #540]	; (8006e18 <_strtod_l+0x578>)
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	a819      	add	r0, sp, #100	; 0x64
 8006c00:	9319      	str	r3, [sp, #100]	; 0x64
 8006c02:	f002 fd67 	bl	80096d4 <__match>
 8006c06:	b910      	cbnz	r0, 8006c0e <_strtod_l+0x36e>
 8006c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	9319      	str	r3, [sp, #100]	; 0x64
 8006c0e:	f04f 0800 	mov.w	r8, #0
 8006c12:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8006e1c <_strtod_l+0x57c>
 8006c16:	e67c      	b.n	8006912 <_strtod_l+0x72>
 8006c18:	4881      	ldr	r0, [pc, #516]	; (8006e20 <_strtod_l+0x580>)
 8006c1a:	f001 fbf3 	bl	8008404 <nan>
 8006c1e:	4680      	mov	r8, r0
 8006c20:	4689      	mov	r9, r1
 8006c22:	e676      	b.n	8006912 <_strtod_l+0x72>
 8006c24:	9b08      	ldr	r3, [sp, #32]
 8006c26:	f1bb 0f00 	cmp.w	fp, #0
 8006c2a:	bf08      	it	eq
 8006c2c:	46b3      	moveq	fp, r6
 8006c2e:	1afb      	subs	r3, r7, r3
 8006c30:	2e10      	cmp	r6, #16
 8006c32:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006c34:	4635      	mov	r5, r6
 8006c36:	9309      	str	r3, [sp, #36]	; 0x24
 8006c38:	bfa8      	it	ge
 8006c3a:	2510      	movge	r5, #16
 8006c3c:	f7f9 fbdc 	bl	80003f8 <__aeabi_ui2d>
 8006c40:	2e09      	cmp	r6, #9
 8006c42:	4680      	mov	r8, r0
 8006c44:	4689      	mov	r9, r1
 8006c46:	dd13      	ble.n	8006c70 <_strtod_l+0x3d0>
 8006c48:	4b76      	ldr	r3, [pc, #472]	; (8006e24 <_strtod_l+0x584>)
 8006c4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006c4e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006c52:	f7f9 fc4b 	bl	80004ec <__aeabi_dmul>
 8006c56:	4680      	mov	r8, r0
 8006c58:	4650      	mov	r0, sl
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	f7f9 fbcc 	bl	80003f8 <__aeabi_ui2d>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 fa8a 	bl	8000180 <__adddf3>
 8006c6c:	4680      	mov	r8, r0
 8006c6e:	4689      	mov	r9, r1
 8006c70:	2e0f      	cmp	r6, #15
 8006c72:	dc36      	bgt.n	8006ce2 <_strtod_l+0x442>
 8006c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f43f ae4b 	beq.w	8006912 <_strtod_l+0x72>
 8006c7c:	dd22      	ble.n	8006cc4 <_strtod_l+0x424>
 8006c7e:	2b16      	cmp	r3, #22
 8006c80:	dc09      	bgt.n	8006c96 <_strtod_l+0x3f6>
 8006c82:	4968      	ldr	r1, [pc, #416]	; (8006e24 <_strtod_l+0x584>)
 8006c84:	4642      	mov	r2, r8
 8006c86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c90:	f7f9 fc2c 	bl	80004ec <__aeabi_dmul>
 8006c94:	e7c3      	b.n	8006c1e <_strtod_l+0x37e>
 8006c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c98:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	db20      	blt.n	8006ce2 <_strtod_l+0x442>
 8006ca0:	4c60      	ldr	r4, [pc, #384]	; (8006e24 <_strtod_l+0x584>)
 8006ca2:	f1c6 060f 	rsb	r6, r6, #15
 8006ca6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006caa:	4642      	mov	r2, r8
 8006cac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cb0:	464b      	mov	r3, r9
 8006cb2:	f7f9 fc1b 	bl	80004ec <__aeabi_dmul>
 8006cb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb8:	1b9e      	subs	r6, r3, r6
 8006cba:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006cbe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006cc2:	e7e5      	b.n	8006c90 <_strtod_l+0x3f0>
 8006cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc6:	3316      	adds	r3, #22
 8006cc8:	db0b      	blt.n	8006ce2 <_strtod_l+0x442>
 8006cca:	9b08      	ldr	r3, [sp, #32]
 8006ccc:	4640      	mov	r0, r8
 8006cce:	1bdf      	subs	r7, r3, r7
 8006cd0:	4b54      	ldr	r3, [pc, #336]	; (8006e24 <_strtod_l+0x584>)
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cdc:	f7f9 fd30 	bl	8000740 <__aeabi_ddiv>
 8006ce0:	e79d      	b.n	8006c1e <_strtod_l+0x37e>
 8006ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce4:	1b75      	subs	r5, r6, r5
 8006ce6:	441d      	add	r5, r3
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	dd70      	ble.n	8006dce <_strtod_l+0x52e>
 8006cec:	f015 030f 	ands.w	r3, r5, #15
 8006cf0:	d00a      	beq.n	8006d08 <_strtod_l+0x468>
 8006cf2:	494c      	ldr	r1, [pc, #304]	; (8006e24 <_strtod_l+0x584>)
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006cfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cfe:	464b      	mov	r3, r9
 8006d00:	f7f9 fbf4 	bl	80004ec <__aeabi_dmul>
 8006d04:	4680      	mov	r8, r0
 8006d06:	4689      	mov	r9, r1
 8006d08:	f035 050f 	bics.w	r5, r5, #15
 8006d0c:	d04d      	beq.n	8006daa <_strtod_l+0x50a>
 8006d0e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006d12:	dd22      	ble.n	8006d5a <_strtod_l+0x4ba>
 8006d14:	2600      	movs	r6, #0
 8006d16:	46b3      	mov	fp, r6
 8006d18:	960b      	str	r6, [sp, #44]	; 0x2c
 8006d1a:	9608      	str	r6, [sp, #32]
 8006d1c:	2322      	movs	r3, #34	; 0x22
 8006d1e:	f04f 0800 	mov.w	r8, #0
 8006d22:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006e1c <_strtod_l+0x57c>
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f43f adf1 	beq.w	8006912 <_strtod_l+0x72>
 8006d30:	4620      	mov	r0, r4
 8006d32:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006d34:	f002 fe84 	bl	8009a40 <_Bfree>
 8006d38:	4620      	mov	r0, r4
 8006d3a:	9908      	ldr	r1, [sp, #32]
 8006d3c:	f002 fe80 	bl	8009a40 <_Bfree>
 8006d40:	4659      	mov	r1, fp
 8006d42:	4620      	mov	r0, r4
 8006d44:	f002 fe7c 	bl	8009a40 <_Bfree>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d4c:	f002 fe78 	bl	8009a40 <_Bfree>
 8006d50:	4631      	mov	r1, r6
 8006d52:	4620      	mov	r0, r4
 8006d54:	f002 fe74 	bl	8009a40 <_Bfree>
 8006d58:	e5db      	b.n	8006912 <_strtod_l+0x72>
 8006d5a:	4b33      	ldr	r3, [pc, #204]	; (8006e28 <_strtod_l+0x588>)
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	9305      	str	r3, [sp, #20]
 8006d60:	2300      	movs	r3, #0
 8006d62:	4649      	mov	r1, r9
 8006d64:	469a      	mov	sl, r3
 8006d66:	112d      	asrs	r5, r5, #4
 8006d68:	2d01      	cmp	r5, #1
 8006d6a:	dc21      	bgt.n	8006db0 <_strtod_l+0x510>
 8006d6c:	b10b      	cbz	r3, 8006d72 <_strtod_l+0x4d2>
 8006d6e:	4680      	mov	r8, r0
 8006d70:	4689      	mov	r9, r1
 8006d72:	492d      	ldr	r1, [pc, #180]	; (8006e28 <_strtod_l+0x588>)
 8006d74:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006d78:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d82:	464b      	mov	r3, r9
 8006d84:	f7f9 fbb2 	bl	80004ec <__aeabi_dmul>
 8006d88:	4b24      	ldr	r3, [pc, #144]	; (8006e1c <_strtod_l+0x57c>)
 8006d8a:	460a      	mov	r2, r1
 8006d8c:	400b      	ands	r3, r1
 8006d8e:	4927      	ldr	r1, [pc, #156]	; (8006e2c <_strtod_l+0x58c>)
 8006d90:	4680      	mov	r8, r0
 8006d92:	428b      	cmp	r3, r1
 8006d94:	d8be      	bhi.n	8006d14 <_strtod_l+0x474>
 8006d96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006d9a:	428b      	cmp	r3, r1
 8006d9c:	bf86      	itte	hi
 8006d9e:	f04f 38ff 	movhi.w	r8, #4294967295
 8006da2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8006e30 <_strtod_l+0x590>
 8006da6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006daa:	2300      	movs	r3, #0
 8006dac:	9305      	str	r3, [sp, #20]
 8006dae:	e07b      	b.n	8006ea8 <_strtod_l+0x608>
 8006db0:	07ea      	lsls	r2, r5, #31
 8006db2:	d505      	bpl.n	8006dc0 <_strtod_l+0x520>
 8006db4:	9b05      	ldr	r3, [sp, #20]
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	f7f9 fb97 	bl	80004ec <__aeabi_dmul>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	9a05      	ldr	r2, [sp, #20]
 8006dc2:	f10a 0a01 	add.w	sl, sl, #1
 8006dc6:	3208      	adds	r2, #8
 8006dc8:	106d      	asrs	r5, r5, #1
 8006dca:	9205      	str	r2, [sp, #20]
 8006dcc:	e7cc      	b.n	8006d68 <_strtod_l+0x4c8>
 8006dce:	d0ec      	beq.n	8006daa <_strtod_l+0x50a>
 8006dd0:	426d      	negs	r5, r5
 8006dd2:	f015 020f 	ands.w	r2, r5, #15
 8006dd6:	d00a      	beq.n	8006dee <_strtod_l+0x54e>
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <_strtod_l+0x584>)
 8006dda:	4640      	mov	r0, r8
 8006ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de0:	4649      	mov	r1, r9
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	f7f9 fcab 	bl	8000740 <__aeabi_ddiv>
 8006dea:	4680      	mov	r8, r0
 8006dec:	4689      	mov	r9, r1
 8006dee:	112d      	asrs	r5, r5, #4
 8006df0:	d0db      	beq.n	8006daa <_strtod_l+0x50a>
 8006df2:	2d1f      	cmp	r5, #31
 8006df4:	dd1e      	ble.n	8006e34 <_strtod_l+0x594>
 8006df6:	2600      	movs	r6, #0
 8006df8:	46b3      	mov	fp, r6
 8006dfa:	960b      	str	r6, [sp, #44]	; 0x2c
 8006dfc:	9608      	str	r6, [sp, #32]
 8006dfe:	2322      	movs	r3, #34	; 0x22
 8006e00:	f04f 0800 	mov.w	r8, #0
 8006e04:	f04f 0900 	mov.w	r9, #0
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	e78d      	b.n	8006d28 <_strtod_l+0x488>
 8006e0c:	0800b4ee 	.word	0x0800b4ee
 8006e10:	0800b3a0 	.word	0x0800b3a0
 8006e14:	0800b4e6 	.word	0x0800b4e6
 8006e18:	0800b51e 	.word	0x0800b51e
 8006e1c:	7ff00000 	.word	0x7ff00000
 8006e20:	0800b364 	.word	0x0800b364
 8006e24:	0800b690 	.word	0x0800b690
 8006e28:	0800b668 	.word	0x0800b668
 8006e2c:	7ca00000 	.word	0x7ca00000
 8006e30:	7fefffff 	.word	0x7fefffff
 8006e34:	f015 0310 	ands.w	r3, r5, #16
 8006e38:	bf18      	it	ne
 8006e3a:	236a      	movne	r3, #106	; 0x6a
 8006e3c:	4640      	mov	r0, r8
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	4649      	mov	r1, r9
 8006e42:	2300      	movs	r3, #0
 8006e44:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8007110 <_strtod_l+0x870>
 8006e48:	07ea      	lsls	r2, r5, #31
 8006e4a:	d504      	bpl.n	8006e56 <_strtod_l+0x5b6>
 8006e4c:	e9da 2300 	ldrd	r2, r3, [sl]
 8006e50:	f7f9 fb4c 	bl	80004ec <__aeabi_dmul>
 8006e54:	2301      	movs	r3, #1
 8006e56:	106d      	asrs	r5, r5, #1
 8006e58:	f10a 0a08 	add.w	sl, sl, #8
 8006e5c:	d1f4      	bne.n	8006e48 <_strtod_l+0x5a8>
 8006e5e:	b10b      	cbz	r3, 8006e64 <_strtod_l+0x5c4>
 8006e60:	4680      	mov	r8, r0
 8006e62:	4689      	mov	r9, r1
 8006e64:	9b05      	ldr	r3, [sp, #20]
 8006e66:	b1bb      	cbz	r3, 8006e98 <_strtod_l+0x5f8>
 8006e68:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006e6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	4649      	mov	r1, r9
 8006e74:	dd10      	ble.n	8006e98 <_strtod_l+0x5f8>
 8006e76:	2b1f      	cmp	r3, #31
 8006e78:	f340 8128 	ble.w	80070cc <_strtod_l+0x82c>
 8006e7c:	2b34      	cmp	r3, #52	; 0x34
 8006e7e:	bfd8      	it	le
 8006e80:	f04f 33ff 	movle.w	r3, #4294967295
 8006e84:	f04f 0800 	mov.w	r8, #0
 8006e88:	bfcf      	iteee	gt
 8006e8a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006e8e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006e92:	4093      	lslle	r3, r2
 8006e94:	ea03 0901 	andle.w	r9, r3, r1
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f7f9 fd8c 	bl	80009bc <__aeabi_dcmpeq>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d1a6      	bne.n	8006df6 <_strtod_l+0x556>
 8006ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eaa:	465a      	mov	r2, fp
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4633      	mov	r3, r6
 8006eb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006eb4:	f002 fe2c 	bl	8009b10 <__s2b>
 8006eb8:	900b      	str	r0, [sp, #44]	; 0x2c
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f43f af2a 	beq.w	8006d14 <_strtod_l+0x474>
 8006ec0:	2600      	movs	r6, #0
 8006ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec4:	9b08      	ldr	r3, [sp, #32]
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	eba3 0307 	sub.w	r3, r3, r7
 8006ecc:	bfa8      	it	ge
 8006ece:	2300      	movge	r3, #0
 8006ed0:	46b3      	mov	fp, r6
 8006ed2:	9312      	str	r3, [sp, #72]	; 0x48
 8006ed4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006ed8:	9316      	str	r3, [sp, #88]	; 0x58
 8006eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006edc:	4620      	mov	r0, r4
 8006ede:	6859      	ldr	r1, [r3, #4]
 8006ee0:	f002 fd6e 	bl	80099c0 <_Balloc>
 8006ee4:	9008      	str	r0, [sp, #32]
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f43f af18 	beq.w	8006d1c <_strtod_l+0x47c>
 8006eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eee:	300c      	adds	r0, #12
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	f103 010c 	add.w	r1, r3, #12
 8006ef6:	3202      	adds	r2, #2
 8006ef8:	0092      	lsls	r2, r2, #2
 8006efa:	f001 fa75 	bl	80083e8 <memcpy>
 8006efe:	ab1c      	add	r3, sp, #112	; 0x70
 8006f00:	9301      	str	r3, [sp, #4]
 8006f02:	ab1b      	add	r3, sp, #108	; 0x6c
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006f10:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8006f14:	f003 f928 	bl	800a168 <__d2b>
 8006f18:	901a      	str	r0, [sp, #104]	; 0x68
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f43f aefe 	beq.w	8006d1c <_strtod_l+0x47c>
 8006f20:	2101      	movs	r1, #1
 8006f22:	4620      	mov	r0, r4
 8006f24:	f002 fe8c 	bl	8009c40 <__i2b>
 8006f28:	4683      	mov	fp, r0
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	f43f aef6 	beq.w	8006d1c <_strtod_l+0x47c>
 8006f30:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8006f32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f34:	2f00      	cmp	r7, #0
 8006f36:	bfab      	itete	ge
 8006f38:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 8006f3a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006f3c:	eb07 0a03 	addge.w	sl, r7, r3
 8006f40:	1bdd      	sublt	r5, r3, r7
 8006f42:	9b05      	ldr	r3, [sp, #20]
 8006f44:	bfa8      	it	ge
 8006f46:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006f48:	eba7 0703 	sub.w	r7, r7, r3
 8006f4c:	4417      	add	r7, r2
 8006f4e:	4b71      	ldr	r3, [pc, #452]	; (8007114 <_strtod_l+0x874>)
 8006f50:	f107 37ff 	add.w	r7, r7, #4294967295
 8006f54:	bfb8      	it	lt
 8006f56:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 8006f5a:	429f      	cmp	r7, r3
 8006f5c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f60:	f280 80c7 	bge.w	80070f2 <_strtod_l+0x852>
 8006f64:	1bdb      	subs	r3, r3, r7
 8006f66:	2b1f      	cmp	r3, #31
 8006f68:	f04f 0101 	mov.w	r1, #1
 8006f6c:	eba2 0203 	sub.w	r2, r2, r3
 8006f70:	f300 80b3 	bgt.w	80070da <_strtod_l+0x83a>
 8006f74:	fa01 f303 	lsl.w	r3, r1, r3
 8006f78:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9310      	str	r3, [sp, #64]	; 0x40
 8006f7e:	eb0a 0702 	add.w	r7, sl, r2
 8006f82:	9b05      	ldr	r3, [sp, #20]
 8006f84:	45ba      	cmp	sl, r7
 8006f86:	4415      	add	r5, r2
 8006f88:	441d      	add	r5, r3
 8006f8a:	4653      	mov	r3, sl
 8006f8c:	bfa8      	it	ge
 8006f8e:	463b      	movge	r3, r7
 8006f90:	42ab      	cmp	r3, r5
 8006f92:	bfa8      	it	ge
 8006f94:	462b      	movge	r3, r5
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfc2      	ittt	gt
 8006f9a:	1aff      	subgt	r7, r7, r3
 8006f9c:	1aed      	subgt	r5, r5, r3
 8006f9e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006fa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	dd17      	ble.n	8006fd8 <_strtod_l+0x738>
 8006fa8:	4659      	mov	r1, fp
 8006faa:	461a      	mov	r2, r3
 8006fac:	4620      	mov	r0, r4
 8006fae:	f002 ff05 	bl	8009dbc <__pow5mult>
 8006fb2:	4683      	mov	fp, r0
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	f43f aeb1 	beq.w	8006d1c <_strtod_l+0x47c>
 8006fba:	4601      	mov	r1, r0
 8006fbc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f002 fe54 	bl	8009c6c <__multiply>
 8006fc4:	900a      	str	r0, [sp, #40]	; 0x28
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	f43f aea8 	beq.w	8006d1c <_strtod_l+0x47c>
 8006fcc:	4620      	mov	r0, r4
 8006fce:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006fd0:	f002 fd36 	bl	8009a40 <_Bfree>
 8006fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8006fd8:	2f00      	cmp	r7, #0
 8006fda:	f300 808f 	bgt.w	80070fc <_strtod_l+0x85c>
 8006fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	dd08      	ble.n	8006ff6 <_strtod_l+0x756>
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fe8:	9908      	ldr	r1, [sp, #32]
 8006fea:	f002 fee7 	bl	8009dbc <__pow5mult>
 8006fee:	9008      	str	r0, [sp, #32]
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	f43f ae93 	beq.w	8006d1c <_strtod_l+0x47c>
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	dd08      	ble.n	800700c <_strtod_l+0x76c>
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	9908      	ldr	r1, [sp, #32]
 8007000:	f002 ff36 	bl	8009e70 <__lshift>
 8007004:	9008      	str	r0, [sp, #32]
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f ae88 	beq.w	8006d1c <_strtod_l+0x47c>
 800700c:	f1ba 0f00 	cmp.w	sl, #0
 8007010:	dd08      	ble.n	8007024 <_strtod_l+0x784>
 8007012:	4659      	mov	r1, fp
 8007014:	4652      	mov	r2, sl
 8007016:	4620      	mov	r0, r4
 8007018:	f002 ff2a 	bl	8009e70 <__lshift>
 800701c:	4683      	mov	fp, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	f43f ae7c 	beq.w	8006d1c <_strtod_l+0x47c>
 8007024:	4620      	mov	r0, r4
 8007026:	9a08      	ldr	r2, [sp, #32]
 8007028:	991a      	ldr	r1, [sp, #104]	; 0x68
 800702a:	f002 ffa9 	bl	8009f80 <__mdiff>
 800702e:	4606      	mov	r6, r0
 8007030:	2800      	cmp	r0, #0
 8007032:	f43f ae73 	beq.w	8006d1c <_strtod_l+0x47c>
 8007036:	2500      	movs	r5, #0
 8007038:	68c3      	ldr	r3, [r0, #12]
 800703a:	4659      	mov	r1, fp
 800703c:	60c5      	str	r5, [r0, #12]
 800703e:	930a      	str	r3, [sp, #40]	; 0x28
 8007040:	f002 ff82 	bl	8009f48 <__mcmp>
 8007044:	42a8      	cmp	r0, r5
 8007046:	da6b      	bge.n	8007120 <_strtod_l+0x880>
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	ea53 0308 	orrs.w	r3, r3, r8
 800704e:	f040 808f 	bne.w	8007170 <_strtod_l+0x8d0>
 8007052:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007056:	2b00      	cmp	r3, #0
 8007058:	f040 808a 	bne.w	8007170 <_strtod_l+0x8d0>
 800705c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007060:	0d1b      	lsrs	r3, r3, #20
 8007062:	051b      	lsls	r3, r3, #20
 8007064:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007068:	f240 8082 	bls.w	8007170 <_strtod_l+0x8d0>
 800706c:	6973      	ldr	r3, [r6, #20]
 800706e:	b913      	cbnz	r3, 8007076 <_strtod_l+0x7d6>
 8007070:	6933      	ldr	r3, [r6, #16]
 8007072:	2b01      	cmp	r3, #1
 8007074:	dd7c      	ble.n	8007170 <_strtod_l+0x8d0>
 8007076:	4631      	mov	r1, r6
 8007078:	2201      	movs	r2, #1
 800707a:	4620      	mov	r0, r4
 800707c:	f002 fef8 	bl	8009e70 <__lshift>
 8007080:	4659      	mov	r1, fp
 8007082:	4606      	mov	r6, r0
 8007084:	f002 ff60 	bl	8009f48 <__mcmp>
 8007088:	2800      	cmp	r0, #0
 800708a:	dd71      	ble.n	8007170 <_strtod_l+0x8d0>
 800708c:	9905      	ldr	r1, [sp, #20]
 800708e:	464b      	mov	r3, r9
 8007090:	4a21      	ldr	r2, [pc, #132]	; (8007118 <_strtod_l+0x878>)
 8007092:	2900      	cmp	r1, #0
 8007094:	f000 808d 	beq.w	80071b2 <_strtod_l+0x912>
 8007098:	ea02 0109 	and.w	r1, r2, r9
 800709c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80070a0:	f300 8087 	bgt.w	80071b2 <_strtod_l+0x912>
 80070a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80070a8:	f77f aea9 	ble.w	8006dfe <_strtod_l+0x55e>
 80070ac:	4640      	mov	r0, r8
 80070ae:	4649      	mov	r1, r9
 80070b0:	4b1a      	ldr	r3, [pc, #104]	; (800711c <_strtod_l+0x87c>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	f7f9 fa1a 	bl	80004ec <__aeabi_dmul>
 80070b8:	4b17      	ldr	r3, [pc, #92]	; (8007118 <_strtod_l+0x878>)
 80070ba:	4680      	mov	r8, r0
 80070bc:	400b      	ands	r3, r1
 80070be:	4689      	mov	r9, r1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f47f ae35 	bne.w	8006d30 <_strtod_l+0x490>
 80070c6:	2322      	movs	r3, #34	; 0x22
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	e631      	b.n	8006d30 <_strtod_l+0x490>
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	fa02 f303 	lsl.w	r3, r2, r3
 80070d4:	ea03 0808 	and.w	r8, r3, r8
 80070d8:	e6de      	b.n	8006e98 <_strtod_l+0x5f8>
 80070da:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 80070de:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 80070e2:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 80070e6:	37e2      	adds	r7, #226	; 0xe2
 80070e8:	fa01 f307 	lsl.w	r3, r1, r7
 80070ec:	9310      	str	r3, [sp, #64]	; 0x40
 80070ee:	9113      	str	r1, [sp, #76]	; 0x4c
 80070f0:	e745      	b.n	8006f7e <_strtod_l+0x6de>
 80070f2:	2300      	movs	r3, #0
 80070f4:	9310      	str	r3, [sp, #64]	; 0x40
 80070f6:	2301      	movs	r3, #1
 80070f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80070fa:	e740      	b.n	8006f7e <_strtod_l+0x6de>
 80070fc:	463a      	mov	r2, r7
 80070fe:	4620      	mov	r0, r4
 8007100:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007102:	f002 feb5 	bl	8009e70 <__lshift>
 8007106:	901a      	str	r0, [sp, #104]	; 0x68
 8007108:	2800      	cmp	r0, #0
 800710a:	f47f af68 	bne.w	8006fde <_strtod_l+0x73e>
 800710e:	e605      	b.n	8006d1c <_strtod_l+0x47c>
 8007110:	0800b3b8 	.word	0x0800b3b8
 8007114:	fffffc02 	.word	0xfffffc02
 8007118:	7ff00000 	.word	0x7ff00000
 800711c:	39500000 	.word	0x39500000
 8007120:	46ca      	mov	sl, r9
 8007122:	d165      	bne.n	80071f0 <_strtod_l+0x950>
 8007124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800712a:	b352      	cbz	r2, 8007182 <_strtod_l+0x8e2>
 800712c:	4a9e      	ldr	r2, [pc, #632]	; (80073a8 <_strtod_l+0xb08>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d12a      	bne.n	8007188 <_strtod_l+0x8e8>
 8007132:	9b05      	ldr	r3, [sp, #20]
 8007134:	4641      	mov	r1, r8
 8007136:	b1fb      	cbz	r3, 8007178 <_strtod_l+0x8d8>
 8007138:	4b9c      	ldr	r3, [pc, #624]	; (80073ac <_strtod_l+0xb0c>)
 800713a:	f04f 32ff 	mov.w	r2, #4294967295
 800713e:	ea09 0303 	and.w	r3, r9, r3
 8007142:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007146:	d81a      	bhi.n	800717e <_strtod_l+0x8de>
 8007148:	0d1b      	lsrs	r3, r3, #20
 800714a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	4299      	cmp	r1, r3
 8007154:	d118      	bne.n	8007188 <_strtod_l+0x8e8>
 8007156:	4b96      	ldr	r3, [pc, #600]	; (80073b0 <_strtod_l+0xb10>)
 8007158:	459a      	cmp	sl, r3
 800715a:	d102      	bne.n	8007162 <_strtod_l+0x8c2>
 800715c:	3101      	adds	r1, #1
 800715e:	f43f addd 	beq.w	8006d1c <_strtod_l+0x47c>
 8007162:	f04f 0800 	mov.w	r8, #0
 8007166:	4b91      	ldr	r3, [pc, #580]	; (80073ac <_strtod_l+0xb0c>)
 8007168:	ea0a 0303 	and.w	r3, sl, r3
 800716c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007170:	9b05      	ldr	r3, [sp, #20]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d19a      	bne.n	80070ac <_strtod_l+0x80c>
 8007176:	e5db      	b.n	8006d30 <_strtod_l+0x490>
 8007178:	f04f 33ff 	mov.w	r3, #4294967295
 800717c:	e7e9      	b.n	8007152 <_strtod_l+0x8b2>
 800717e:	4613      	mov	r3, r2
 8007180:	e7e7      	b.n	8007152 <_strtod_l+0x8b2>
 8007182:	ea53 0308 	orrs.w	r3, r3, r8
 8007186:	d081      	beq.n	800708c <_strtod_l+0x7ec>
 8007188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800718a:	b1e3      	cbz	r3, 80071c6 <_strtod_l+0x926>
 800718c:	ea13 0f0a 	tst.w	r3, sl
 8007190:	d0ee      	beq.n	8007170 <_strtod_l+0x8d0>
 8007192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007194:	4640      	mov	r0, r8
 8007196:	4649      	mov	r1, r9
 8007198:	9a05      	ldr	r2, [sp, #20]
 800719a:	b1c3      	cbz	r3, 80071ce <_strtod_l+0x92e>
 800719c:	f7ff fb5c 	bl	8006858 <sulp>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071a6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071a8:	f7f8 ffea 	bl	8000180 <__adddf3>
 80071ac:	4680      	mov	r8, r0
 80071ae:	4689      	mov	r9, r1
 80071b0:	e7de      	b.n	8007170 <_strtod_l+0x8d0>
 80071b2:	4013      	ands	r3, r2
 80071b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80071b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80071bc:	f04f 38ff 	mov.w	r8, #4294967295
 80071c0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80071c4:	e7d4      	b.n	8007170 <_strtod_l+0x8d0>
 80071c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071c8:	ea13 0f08 	tst.w	r3, r8
 80071cc:	e7e0      	b.n	8007190 <_strtod_l+0x8f0>
 80071ce:	f7ff fb43 	bl	8006858 <sulp>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80071da:	f7f8 ffcf 	bl	800017c <__aeabi_dsub>
 80071de:	2200      	movs	r2, #0
 80071e0:	2300      	movs	r3, #0
 80071e2:	4680      	mov	r8, r0
 80071e4:	4689      	mov	r9, r1
 80071e6:	f7f9 fbe9 	bl	80009bc <__aeabi_dcmpeq>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d0c0      	beq.n	8007170 <_strtod_l+0x8d0>
 80071ee:	e606      	b.n	8006dfe <_strtod_l+0x55e>
 80071f0:	4659      	mov	r1, fp
 80071f2:	4630      	mov	r0, r6
 80071f4:	f003 f80e 	bl	800a214 <__ratio>
 80071f8:	4602      	mov	r2, r0
 80071fa:	460b      	mov	r3, r1
 80071fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007200:	2200      	movs	r2, #0
 8007202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007206:	f7f9 fbed 	bl	80009e4 <__aeabi_dcmple>
 800720a:	2800      	cmp	r0, #0
 800720c:	d06f      	beq.n	80072ee <_strtod_l+0xa4e>
 800720e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007210:	2b00      	cmp	r3, #0
 8007212:	d17c      	bne.n	800730e <_strtod_l+0xa6e>
 8007214:	f1b8 0f00 	cmp.w	r8, #0
 8007218:	d159      	bne.n	80072ce <_strtod_l+0xa2e>
 800721a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800721e:	2b00      	cmp	r3, #0
 8007220:	d17b      	bne.n	800731a <_strtod_l+0xa7a>
 8007222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007226:	2200      	movs	r2, #0
 8007228:	4b62      	ldr	r3, [pc, #392]	; (80073b4 <_strtod_l+0xb14>)
 800722a:	f7f9 fbd1 	bl	80009d0 <__aeabi_dcmplt>
 800722e:	2800      	cmp	r0, #0
 8007230:	d15a      	bne.n	80072e8 <_strtod_l+0xa48>
 8007232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007236:	2200      	movs	r2, #0
 8007238:	4b5f      	ldr	r3, [pc, #380]	; (80073b8 <_strtod_l+0xb18>)
 800723a:	f7f9 f957 	bl	80004ec <__aeabi_dmul>
 800723e:	4605      	mov	r5, r0
 8007240:	460f      	mov	r7, r1
 8007242:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007246:	9506      	str	r5, [sp, #24]
 8007248:	9307      	str	r3, [sp, #28]
 800724a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800724e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007252:	4b56      	ldr	r3, [pc, #344]	; (80073ac <_strtod_l+0xb0c>)
 8007254:	4a55      	ldr	r2, [pc, #340]	; (80073ac <_strtod_l+0xb0c>)
 8007256:	ea0a 0303 	and.w	r3, sl, r3
 800725a:	9313      	str	r3, [sp, #76]	; 0x4c
 800725c:	4b57      	ldr	r3, [pc, #348]	; (80073bc <_strtod_l+0xb1c>)
 800725e:	ea0a 0202 	and.w	r2, sl, r2
 8007262:	429a      	cmp	r2, r3
 8007264:	f040 80b0 	bne.w	80073c8 <_strtod_l+0xb28>
 8007268:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800726c:	4640      	mov	r0, r8
 800726e:	4649      	mov	r1, r9
 8007270:	f002 ff12 	bl	800a098 <__ulp>
 8007274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007278:	f7f9 f938 	bl	80004ec <__aeabi_dmul>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	f7f8 ff7e 	bl	8000180 <__adddf3>
 8007284:	f8df a124 	ldr.w	sl, [pc, #292]	; 80073ac <_strtod_l+0xb0c>
 8007288:	4a4d      	ldr	r2, [pc, #308]	; (80073c0 <_strtod_l+0xb20>)
 800728a:	ea01 0a0a 	and.w	sl, r1, sl
 800728e:	4592      	cmp	sl, r2
 8007290:	4680      	mov	r8, r0
 8007292:	d948      	bls.n	8007326 <_strtod_l+0xa86>
 8007294:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007296:	4b46      	ldr	r3, [pc, #280]	; (80073b0 <_strtod_l+0xb10>)
 8007298:	429a      	cmp	r2, r3
 800729a:	d103      	bne.n	80072a4 <_strtod_l+0xa04>
 800729c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800729e:	3301      	adds	r3, #1
 80072a0:	f43f ad3c 	beq.w	8006d1c <_strtod_l+0x47c>
 80072a4:	f04f 38ff 	mov.w	r8, #4294967295
 80072a8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80073b0 <_strtod_l+0xb10>
 80072ac:	4620      	mov	r0, r4
 80072ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80072b0:	f002 fbc6 	bl	8009a40 <_Bfree>
 80072b4:	4620      	mov	r0, r4
 80072b6:	9908      	ldr	r1, [sp, #32]
 80072b8:	f002 fbc2 	bl	8009a40 <_Bfree>
 80072bc:	4659      	mov	r1, fp
 80072be:	4620      	mov	r0, r4
 80072c0:	f002 fbbe 	bl	8009a40 <_Bfree>
 80072c4:	4631      	mov	r1, r6
 80072c6:	4620      	mov	r0, r4
 80072c8:	f002 fbba 	bl	8009a40 <_Bfree>
 80072cc:	e605      	b.n	8006eda <_strtod_l+0x63a>
 80072ce:	f1b8 0f01 	cmp.w	r8, #1
 80072d2:	d103      	bne.n	80072dc <_strtod_l+0xa3c>
 80072d4:	f1b9 0f00 	cmp.w	r9, #0
 80072d8:	f43f ad91 	beq.w	8006dfe <_strtod_l+0x55e>
 80072dc:	2200      	movs	r2, #0
 80072de:	4b39      	ldr	r3, [pc, #228]	; (80073c4 <_strtod_l+0xb24>)
 80072e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072e6:	e016      	b.n	8007316 <_strtod_l+0xa76>
 80072e8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072ea:	4f33      	ldr	r7, [pc, #204]	; (80073b8 <_strtod_l+0xb18>)
 80072ec:	e7a9      	b.n	8007242 <_strtod_l+0x9a2>
 80072ee:	4b32      	ldr	r3, [pc, #200]	; (80073b8 <_strtod_l+0xb18>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072f6:	f7f9 f8f9 	bl	80004ec <__aeabi_dmul>
 80072fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072fc:	4605      	mov	r5, r0
 80072fe:	460f      	mov	r7, r1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d09e      	beq.n	8007242 <_strtod_l+0x9a2>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800730c:	e79d      	b.n	800724a <_strtod_l+0x9aa>
 800730e:	2200      	movs	r2, #0
 8007310:	4b28      	ldr	r3, [pc, #160]	; (80073b4 <_strtod_l+0xb14>)
 8007312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007316:	4f27      	ldr	r7, [pc, #156]	; (80073b4 <_strtod_l+0xb14>)
 8007318:	e797      	b.n	800724a <_strtod_l+0x9aa>
 800731a:	2200      	movs	r2, #0
 800731c:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <_strtod_l+0xb24>)
 800731e:	4645      	mov	r5, r8
 8007320:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007324:	e7f7      	b.n	8007316 <_strtod_l+0xa76>
 8007326:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800732a:	9b05      	ldr	r3, [sp, #20]
 800732c:	46ca      	mov	sl, r9
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1bc      	bne.n	80072ac <_strtod_l+0xa0c>
 8007332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007336:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007338:	0d1b      	lsrs	r3, r3, #20
 800733a:	051b      	lsls	r3, r3, #20
 800733c:	429a      	cmp	r2, r3
 800733e:	d1b5      	bne.n	80072ac <_strtod_l+0xa0c>
 8007340:	4628      	mov	r0, r5
 8007342:	4639      	mov	r1, r7
 8007344:	f7f9 ff14 	bl	8001170 <__aeabi_d2lz>
 8007348:	f7f9 f8a2 	bl	8000490 <__aeabi_l2d>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4628      	mov	r0, r5
 8007352:	4639      	mov	r1, r7
 8007354:	f7f8 ff12 	bl	800017c <__aeabi_dsub>
 8007358:	460b      	mov	r3, r1
 800735a:	4602      	mov	r2, r0
 800735c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 8007360:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007366:	ea4a 0a08 	orr.w	sl, sl, r8
 800736a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800736e:	d06c      	beq.n	800744a <_strtod_l+0xbaa>
 8007370:	a309      	add	r3, pc, #36	; (adr r3, 8007398 <_strtod_l+0xaf8>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f7f9 fb2b 	bl	80009d0 <__aeabi_dcmplt>
 800737a:	2800      	cmp	r0, #0
 800737c:	f47f acd8 	bne.w	8006d30 <_strtod_l+0x490>
 8007380:	a307      	add	r3, pc, #28	; (adr r3, 80073a0 <_strtod_l+0xb00>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800738a:	f7f9 fb3f 	bl	8000a0c <__aeabi_dcmpgt>
 800738e:	2800      	cmp	r0, #0
 8007390:	d08c      	beq.n	80072ac <_strtod_l+0xa0c>
 8007392:	e4cd      	b.n	8006d30 <_strtod_l+0x490>
 8007394:	f3af 8000 	nop.w
 8007398:	94a03595 	.word	0x94a03595
 800739c:	3fdfffff 	.word	0x3fdfffff
 80073a0:	35afe535 	.word	0x35afe535
 80073a4:	3fe00000 	.word	0x3fe00000
 80073a8:	000fffff 	.word	0x000fffff
 80073ac:	7ff00000 	.word	0x7ff00000
 80073b0:	7fefffff 	.word	0x7fefffff
 80073b4:	3ff00000 	.word	0x3ff00000
 80073b8:	3fe00000 	.word	0x3fe00000
 80073bc:	7fe00000 	.word	0x7fe00000
 80073c0:	7c9fffff 	.word	0x7c9fffff
 80073c4:	bff00000 	.word	0xbff00000
 80073c8:	9b05      	ldr	r3, [sp, #20]
 80073ca:	b333      	cbz	r3, 800741a <_strtod_l+0xb7a>
 80073cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80073ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80073d2:	d822      	bhi.n	800741a <_strtod_l+0xb7a>
 80073d4:	a328      	add	r3, pc, #160	; (adr r3, 8007478 <_strtod_l+0xbd8>)
 80073d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073da:	4628      	mov	r0, r5
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 fb01 	bl	80009e4 <__aeabi_dcmple>
 80073e2:	b1a0      	cbz	r0, 800740e <_strtod_l+0xb6e>
 80073e4:	4639      	mov	r1, r7
 80073e6:	4628      	mov	r0, r5
 80073e8:	f7f9 fb58 	bl	8000a9c <__aeabi_d2uiz>
 80073ec:	2801      	cmp	r0, #1
 80073ee:	bf38      	it	cc
 80073f0:	2001      	movcc	r0, #1
 80073f2:	f7f9 f801 	bl	80003f8 <__aeabi_ui2d>
 80073f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f8:	4605      	mov	r5, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	bb03      	cbnz	r3, 8007440 <_strtod_l+0xba0>
 80073fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007402:	9014      	str	r0, [sp, #80]	; 0x50
 8007404:	9315      	str	r3, [sp, #84]	; 0x54
 8007406:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800740a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800740e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007410:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007412:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	9311      	str	r3, [sp, #68]	; 0x44
 800741a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800741c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800741e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 8007422:	f002 fe39 	bl	800a098 <__ulp>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	f7f9 f85d 	bl	80004ec <__aeabi_dmul>
 8007432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007436:	f7f8 fea3 	bl	8000180 <__adddf3>
 800743a:	4680      	mov	r8, r0
 800743c:	4689      	mov	r9, r1
 800743e:	e774      	b.n	800732a <_strtod_l+0xa8a>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007448:	e7dd      	b.n	8007406 <_strtod_l+0xb66>
 800744a:	a30d      	add	r3, pc, #52	; (adr r3, 8007480 <_strtod_l+0xbe0>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f7f9 fabe 	bl	80009d0 <__aeabi_dcmplt>
 8007454:	e79b      	b.n	800738e <_strtod_l+0xaee>
 8007456:	2300      	movs	r3, #0
 8007458:	930e      	str	r3, [sp, #56]	; 0x38
 800745a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800745c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	f7ff ba5b 	b.w	800691a <_strtod_l+0x7a>
 8007464:	2a65      	cmp	r2, #101	; 0x65
 8007466:	f43f ab52 	beq.w	8006b0e <_strtod_l+0x26e>
 800746a:	2a45      	cmp	r2, #69	; 0x45
 800746c:	f43f ab4f 	beq.w	8006b0e <_strtod_l+0x26e>
 8007470:	2301      	movs	r3, #1
 8007472:	f7ff bb87 	b.w	8006b84 <_strtod_l+0x2e4>
 8007476:	bf00      	nop
 8007478:	ffc00000 	.word	0xffc00000
 800747c:	41dfffff 	.word	0x41dfffff
 8007480:	94a03595 	.word	0x94a03595
 8007484:	3fcfffff 	.word	0x3fcfffff

08007488 <strtod>:
 8007488:	460a      	mov	r2, r1
 800748a:	4601      	mov	r1, r0
 800748c:	4802      	ldr	r0, [pc, #8]	; (8007498 <strtod+0x10>)
 800748e:	4b03      	ldr	r3, [pc, #12]	; (800749c <strtod+0x14>)
 8007490:	6800      	ldr	r0, [r0, #0]
 8007492:	f7ff ba05 	b.w	80068a0 <_strtod_l>
 8007496:	bf00      	nop
 8007498:	200001d4 	.word	0x200001d4
 800749c:	2000001c 	.word	0x2000001c

080074a0 <_strtol_l.constprop.0>:
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a6:	4686      	mov	lr, r0
 80074a8:	4690      	mov	r8, r2
 80074aa:	d001      	beq.n	80074b0 <_strtol_l.constprop.0+0x10>
 80074ac:	2b24      	cmp	r3, #36	; 0x24
 80074ae:	d906      	bls.n	80074be <_strtol_l.constprop.0+0x1e>
 80074b0:	f000 ff58 	bl	8008364 <__errno>
 80074b4:	2316      	movs	r3, #22
 80074b6:	6003      	str	r3, [r0, #0]
 80074b8:	2000      	movs	r0, #0
 80074ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074be:	460d      	mov	r5, r1
 80074c0:	4835      	ldr	r0, [pc, #212]	; (8007598 <_strtol_l.constprop.0+0xf8>)
 80074c2:	462a      	mov	r2, r5
 80074c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074c8:	5d06      	ldrb	r6, [r0, r4]
 80074ca:	f016 0608 	ands.w	r6, r6, #8
 80074ce:	d1f8      	bne.n	80074c2 <_strtol_l.constprop.0+0x22>
 80074d0:	2c2d      	cmp	r4, #45	; 0x2d
 80074d2:	d12e      	bne.n	8007532 <_strtol_l.constprop.0+0x92>
 80074d4:	2601      	movs	r6, #1
 80074d6:	782c      	ldrb	r4, [r5, #0]
 80074d8:	1c95      	adds	r5, r2, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d057      	beq.n	800758e <_strtol_l.constprop.0+0xee>
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d109      	bne.n	80074f6 <_strtol_l.constprop.0+0x56>
 80074e2:	2c30      	cmp	r4, #48	; 0x30
 80074e4:	d107      	bne.n	80074f6 <_strtol_l.constprop.0+0x56>
 80074e6:	782a      	ldrb	r2, [r5, #0]
 80074e8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80074ec:	2a58      	cmp	r2, #88	; 0x58
 80074ee:	d149      	bne.n	8007584 <_strtol_l.constprop.0+0xe4>
 80074f0:	2310      	movs	r3, #16
 80074f2:	786c      	ldrb	r4, [r5, #1]
 80074f4:	3502      	adds	r5, #2
 80074f6:	2200      	movs	r2, #0
 80074f8:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80074fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007500:	fbbc f9f3 	udiv	r9, ip, r3
 8007504:	4610      	mov	r0, r2
 8007506:	fb03 ca19 	mls	sl, r3, r9, ip
 800750a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800750e:	2f09      	cmp	r7, #9
 8007510:	d814      	bhi.n	800753c <_strtol_l.constprop.0+0x9c>
 8007512:	463c      	mov	r4, r7
 8007514:	42a3      	cmp	r3, r4
 8007516:	dd20      	ble.n	800755a <_strtol_l.constprop.0+0xba>
 8007518:	1c57      	adds	r7, r2, #1
 800751a:	d007      	beq.n	800752c <_strtol_l.constprop.0+0x8c>
 800751c:	4581      	cmp	r9, r0
 800751e:	d319      	bcc.n	8007554 <_strtol_l.constprop.0+0xb4>
 8007520:	d101      	bne.n	8007526 <_strtol_l.constprop.0+0x86>
 8007522:	45a2      	cmp	sl, r4
 8007524:	db16      	blt.n	8007554 <_strtol_l.constprop.0+0xb4>
 8007526:	2201      	movs	r2, #1
 8007528:	fb00 4003 	mla	r0, r0, r3, r4
 800752c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007530:	e7eb      	b.n	800750a <_strtol_l.constprop.0+0x6a>
 8007532:	2c2b      	cmp	r4, #43	; 0x2b
 8007534:	bf04      	itt	eq
 8007536:	782c      	ldrbeq	r4, [r5, #0]
 8007538:	1c95      	addeq	r5, r2, #2
 800753a:	e7ce      	b.n	80074da <_strtol_l.constprop.0+0x3a>
 800753c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007540:	2f19      	cmp	r7, #25
 8007542:	d801      	bhi.n	8007548 <_strtol_l.constprop.0+0xa8>
 8007544:	3c37      	subs	r4, #55	; 0x37
 8007546:	e7e5      	b.n	8007514 <_strtol_l.constprop.0+0x74>
 8007548:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800754c:	2f19      	cmp	r7, #25
 800754e:	d804      	bhi.n	800755a <_strtol_l.constprop.0+0xba>
 8007550:	3c57      	subs	r4, #87	; 0x57
 8007552:	e7df      	b.n	8007514 <_strtol_l.constprop.0+0x74>
 8007554:	f04f 32ff 	mov.w	r2, #4294967295
 8007558:	e7e8      	b.n	800752c <_strtol_l.constprop.0+0x8c>
 800755a:	1c53      	adds	r3, r2, #1
 800755c:	d108      	bne.n	8007570 <_strtol_l.constprop.0+0xd0>
 800755e:	2322      	movs	r3, #34	; 0x22
 8007560:	4660      	mov	r0, ip
 8007562:	f8ce 3000 	str.w	r3, [lr]
 8007566:	f1b8 0f00 	cmp.w	r8, #0
 800756a:	d0a6      	beq.n	80074ba <_strtol_l.constprop.0+0x1a>
 800756c:	1e69      	subs	r1, r5, #1
 800756e:	e006      	b.n	800757e <_strtol_l.constprop.0+0xde>
 8007570:	b106      	cbz	r6, 8007574 <_strtol_l.constprop.0+0xd4>
 8007572:	4240      	negs	r0, r0
 8007574:	f1b8 0f00 	cmp.w	r8, #0
 8007578:	d09f      	beq.n	80074ba <_strtol_l.constprop.0+0x1a>
 800757a:	2a00      	cmp	r2, #0
 800757c:	d1f6      	bne.n	800756c <_strtol_l.constprop.0+0xcc>
 800757e:	f8c8 1000 	str.w	r1, [r8]
 8007582:	e79a      	b.n	80074ba <_strtol_l.constprop.0+0x1a>
 8007584:	2430      	movs	r4, #48	; 0x30
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1b5      	bne.n	80074f6 <_strtol_l.constprop.0+0x56>
 800758a:	2308      	movs	r3, #8
 800758c:	e7b3      	b.n	80074f6 <_strtol_l.constprop.0+0x56>
 800758e:	2c30      	cmp	r4, #48	; 0x30
 8007590:	d0a9      	beq.n	80074e6 <_strtol_l.constprop.0+0x46>
 8007592:	230a      	movs	r3, #10
 8007594:	e7af      	b.n	80074f6 <_strtol_l.constprop.0+0x56>
 8007596:	bf00      	nop
 8007598:	0800b3e1 	.word	0x0800b3e1

0800759c <strtol>:
 800759c:	4613      	mov	r3, r2
 800759e:	460a      	mov	r2, r1
 80075a0:	4601      	mov	r1, r0
 80075a2:	4802      	ldr	r0, [pc, #8]	; (80075ac <strtol+0x10>)
 80075a4:	6800      	ldr	r0, [r0, #0]
 80075a6:	f7ff bf7b 	b.w	80074a0 <_strtol_l.constprop.0>
 80075aa:	bf00      	nop
 80075ac:	200001d4 	.word	0x200001d4

080075b0 <__cvt>:
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b6:	461f      	mov	r7, r3
 80075b8:	bfbb      	ittet	lt
 80075ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80075be:	461f      	movlt	r7, r3
 80075c0:	2300      	movge	r3, #0
 80075c2:	232d      	movlt	r3, #45	; 0x2d
 80075c4:	b088      	sub	sp, #32
 80075c6:	4614      	mov	r4, r2
 80075c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80075cc:	7013      	strb	r3, [r2, #0]
 80075ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80075d4:	f023 0820 	bic.w	r8, r3, #32
 80075d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80075dc:	d005      	beq.n	80075ea <__cvt+0x3a>
 80075de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80075e2:	d100      	bne.n	80075e6 <__cvt+0x36>
 80075e4:	3501      	adds	r5, #1
 80075e6:	2302      	movs	r3, #2
 80075e8:	e000      	b.n	80075ec <__cvt+0x3c>
 80075ea:	2303      	movs	r3, #3
 80075ec:	aa07      	add	r2, sp, #28
 80075ee:	9204      	str	r2, [sp, #16]
 80075f0:	aa06      	add	r2, sp, #24
 80075f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80075f6:	e9cd 3500 	strd	r3, r5, [sp]
 80075fa:	4622      	mov	r2, r4
 80075fc:	463b      	mov	r3, r7
 80075fe:	f000 ff93 	bl	8008528 <_dtoa_r>
 8007602:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007606:	4606      	mov	r6, r0
 8007608:	d102      	bne.n	8007610 <__cvt+0x60>
 800760a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800760c:	07db      	lsls	r3, r3, #31
 800760e:	d522      	bpl.n	8007656 <__cvt+0xa6>
 8007610:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007614:	eb06 0905 	add.w	r9, r6, r5
 8007618:	d110      	bne.n	800763c <__cvt+0x8c>
 800761a:	7833      	ldrb	r3, [r6, #0]
 800761c:	2b30      	cmp	r3, #48	; 0x30
 800761e:	d10a      	bne.n	8007636 <__cvt+0x86>
 8007620:	2200      	movs	r2, #0
 8007622:	2300      	movs	r3, #0
 8007624:	4620      	mov	r0, r4
 8007626:	4639      	mov	r1, r7
 8007628:	f7f9 f9c8 	bl	80009bc <__aeabi_dcmpeq>
 800762c:	b918      	cbnz	r0, 8007636 <__cvt+0x86>
 800762e:	f1c5 0501 	rsb	r5, r5, #1
 8007632:	f8ca 5000 	str.w	r5, [sl]
 8007636:	f8da 3000 	ldr.w	r3, [sl]
 800763a:	4499      	add	r9, r3
 800763c:	2200      	movs	r2, #0
 800763e:	2300      	movs	r3, #0
 8007640:	4620      	mov	r0, r4
 8007642:	4639      	mov	r1, r7
 8007644:	f7f9 f9ba 	bl	80009bc <__aeabi_dcmpeq>
 8007648:	b108      	cbz	r0, 800764e <__cvt+0x9e>
 800764a:	f8cd 901c 	str.w	r9, [sp, #28]
 800764e:	2230      	movs	r2, #48	; 0x30
 8007650:	9b07      	ldr	r3, [sp, #28]
 8007652:	454b      	cmp	r3, r9
 8007654:	d307      	bcc.n	8007666 <__cvt+0xb6>
 8007656:	4630      	mov	r0, r6
 8007658:	9b07      	ldr	r3, [sp, #28]
 800765a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800765c:	1b9b      	subs	r3, r3, r6
 800765e:	6013      	str	r3, [r2, #0]
 8007660:	b008      	add	sp, #32
 8007662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	9107      	str	r1, [sp, #28]
 800766a:	701a      	strb	r2, [r3, #0]
 800766c:	e7f0      	b.n	8007650 <__cvt+0xa0>

0800766e <__exponent>:
 800766e:	4603      	mov	r3, r0
 8007670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007672:	2900      	cmp	r1, #0
 8007674:	f803 2b02 	strb.w	r2, [r3], #2
 8007678:	bfb6      	itet	lt
 800767a:	222d      	movlt	r2, #45	; 0x2d
 800767c:	222b      	movge	r2, #43	; 0x2b
 800767e:	4249      	neglt	r1, r1
 8007680:	2909      	cmp	r1, #9
 8007682:	7042      	strb	r2, [r0, #1]
 8007684:	dd2a      	ble.n	80076dc <__exponent+0x6e>
 8007686:	f10d 0207 	add.w	r2, sp, #7
 800768a:	4617      	mov	r7, r2
 800768c:	260a      	movs	r6, #10
 800768e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007692:	4694      	mov	ip, r2
 8007694:	fb06 1415 	mls	r4, r6, r5, r1
 8007698:	3430      	adds	r4, #48	; 0x30
 800769a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800769e:	460c      	mov	r4, r1
 80076a0:	2c63      	cmp	r4, #99	; 0x63
 80076a2:	4629      	mov	r1, r5
 80076a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80076a8:	dcf1      	bgt.n	800768e <__exponent+0x20>
 80076aa:	3130      	adds	r1, #48	; 0x30
 80076ac:	f1ac 0402 	sub.w	r4, ip, #2
 80076b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80076b4:	4622      	mov	r2, r4
 80076b6:	1c41      	adds	r1, r0, #1
 80076b8:	42ba      	cmp	r2, r7
 80076ba:	d30a      	bcc.n	80076d2 <__exponent+0x64>
 80076bc:	f10d 0209 	add.w	r2, sp, #9
 80076c0:	eba2 020c 	sub.w	r2, r2, ip
 80076c4:	42bc      	cmp	r4, r7
 80076c6:	bf88      	it	hi
 80076c8:	2200      	movhi	r2, #0
 80076ca:	4413      	add	r3, r2
 80076cc:	1a18      	subs	r0, r3, r0
 80076ce:	b003      	add	sp, #12
 80076d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80076d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80076da:	e7ed      	b.n	80076b8 <__exponent+0x4a>
 80076dc:	2330      	movs	r3, #48	; 0x30
 80076de:	3130      	adds	r1, #48	; 0x30
 80076e0:	7083      	strb	r3, [r0, #2]
 80076e2:	70c1      	strb	r1, [r0, #3]
 80076e4:	1d03      	adds	r3, r0, #4
 80076e6:	e7f1      	b.n	80076cc <__exponent+0x5e>

080076e8 <_printf_float>:
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	b091      	sub	sp, #68	; 0x44
 80076ee:	460c      	mov	r4, r1
 80076f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80076f4:	4616      	mov	r6, r2
 80076f6:	461f      	mov	r7, r3
 80076f8:	4605      	mov	r5, r0
 80076fa:	f000 fde9 	bl	80082d0 <_localeconv_r>
 80076fe:	6803      	ldr	r3, [r0, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	9309      	str	r3, [sp, #36]	; 0x24
 8007704:	f7f8 fd2e 	bl	8000164 <strlen>
 8007708:	2300      	movs	r3, #0
 800770a:	930e      	str	r3, [sp, #56]	; 0x38
 800770c:	f8d8 3000 	ldr.w	r3, [r8]
 8007710:	900a      	str	r0, [sp, #40]	; 0x28
 8007712:	3307      	adds	r3, #7
 8007714:	f023 0307 	bic.w	r3, r3, #7
 8007718:	f103 0208 	add.w	r2, r3, #8
 800771c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007720:	f8d4 b000 	ldr.w	fp, [r4]
 8007724:	f8c8 2000 	str.w	r2, [r8]
 8007728:	e9d3 a800 	ldrd	sl, r8, [r3]
 800772c:	4652      	mov	r2, sl
 800772e:	4643      	mov	r3, r8
 8007730:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007734:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007738:	930b      	str	r3, [sp, #44]	; 0x2c
 800773a:	f04f 32ff 	mov.w	r2, #4294967295
 800773e:	4650      	mov	r0, sl
 8007740:	4b9c      	ldr	r3, [pc, #624]	; (80079b4 <_printf_float+0x2cc>)
 8007742:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007744:	f7f9 f96c 	bl	8000a20 <__aeabi_dcmpun>
 8007748:	bb70      	cbnz	r0, 80077a8 <_printf_float+0xc0>
 800774a:	f04f 32ff 	mov.w	r2, #4294967295
 800774e:	4650      	mov	r0, sl
 8007750:	4b98      	ldr	r3, [pc, #608]	; (80079b4 <_printf_float+0x2cc>)
 8007752:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007754:	f7f9 f946 	bl	80009e4 <__aeabi_dcmple>
 8007758:	bb30      	cbnz	r0, 80077a8 <_printf_float+0xc0>
 800775a:	2200      	movs	r2, #0
 800775c:	2300      	movs	r3, #0
 800775e:	4650      	mov	r0, sl
 8007760:	4641      	mov	r1, r8
 8007762:	f7f9 f935 	bl	80009d0 <__aeabi_dcmplt>
 8007766:	b110      	cbz	r0, 800776e <_printf_float+0x86>
 8007768:	232d      	movs	r3, #45	; 0x2d
 800776a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800776e:	4a92      	ldr	r2, [pc, #584]	; (80079b8 <_printf_float+0x2d0>)
 8007770:	4b92      	ldr	r3, [pc, #584]	; (80079bc <_printf_float+0x2d4>)
 8007772:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007776:	bf94      	ite	ls
 8007778:	4690      	movls	r8, r2
 800777a:	4698      	movhi	r8, r3
 800777c:	2303      	movs	r3, #3
 800777e:	f04f 0a00 	mov.w	sl, #0
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	f02b 0304 	bic.w	r3, fp, #4
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	4633      	mov	r3, r6
 800778c:	4621      	mov	r1, r4
 800778e:	4628      	mov	r0, r5
 8007790:	9700      	str	r7, [sp, #0]
 8007792:	aa0f      	add	r2, sp, #60	; 0x3c
 8007794:	f000 f9d6 	bl	8007b44 <_printf_common>
 8007798:	3001      	adds	r0, #1
 800779a:	f040 8090 	bne.w	80078be <_printf_float+0x1d6>
 800779e:	f04f 30ff 	mov.w	r0, #4294967295
 80077a2:	b011      	add	sp, #68	; 0x44
 80077a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a8:	4652      	mov	r2, sl
 80077aa:	4643      	mov	r3, r8
 80077ac:	4650      	mov	r0, sl
 80077ae:	4641      	mov	r1, r8
 80077b0:	f7f9 f936 	bl	8000a20 <__aeabi_dcmpun>
 80077b4:	b148      	cbz	r0, 80077ca <_printf_float+0xe2>
 80077b6:	f1b8 0f00 	cmp.w	r8, #0
 80077ba:	bfb8      	it	lt
 80077bc:	232d      	movlt	r3, #45	; 0x2d
 80077be:	4a80      	ldr	r2, [pc, #512]	; (80079c0 <_printf_float+0x2d8>)
 80077c0:	bfb8      	it	lt
 80077c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80077c6:	4b7f      	ldr	r3, [pc, #508]	; (80079c4 <_printf_float+0x2dc>)
 80077c8:	e7d3      	b.n	8007772 <_printf_float+0x8a>
 80077ca:	6863      	ldr	r3, [r4, #4]
 80077cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	d142      	bne.n	800785a <_printf_float+0x172>
 80077d4:	2306      	movs	r3, #6
 80077d6:	6063      	str	r3, [r4, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	9206      	str	r2, [sp, #24]
 80077dc:	aa0e      	add	r2, sp, #56	; 0x38
 80077de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80077e2:	aa0d      	add	r2, sp, #52	; 0x34
 80077e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80077e8:	9203      	str	r2, [sp, #12]
 80077ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80077ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80077f2:	6023      	str	r3, [r4, #0]
 80077f4:	6863      	ldr	r3, [r4, #4]
 80077f6:	4652      	mov	r2, sl
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	4628      	mov	r0, r5
 80077fc:	4643      	mov	r3, r8
 80077fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8007800:	f7ff fed6 	bl	80075b0 <__cvt>
 8007804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007806:	4680      	mov	r8, r0
 8007808:	2947      	cmp	r1, #71	; 0x47
 800780a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800780c:	d108      	bne.n	8007820 <_printf_float+0x138>
 800780e:	1cc8      	adds	r0, r1, #3
 8007810:	db02      	blt.n	8007818 <_printf_float+0x130>
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	4299      	cmp	r1, r3
 8007816:	dd40      	ble.n	800789a <_printf_float+0x1b2>
 8007818:	f1a9 0902 	sub.w	r9, r9, #2
 800781c:	fa5f f989 	uxtb.w	r9, r9
 8007820:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007824:	d81f      	bhi.n	8007866 <_printf_float+0x17e>
 8007826:	464a      	mov	r2, r9
 8007828:	3901      	subs	r1, #1
 800782a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800782e:	910d      	str	r1, [sp, #52]	; 0x34
 8007830:	f7ff ff1d 	bl	800766e <__exponent>
 8007834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007836:	4682      	mov	sl, r0
 8007838:	1813      	adds	r3, r2, r0
 800783a:	2a01      	cmp	r2, #1
 800783c:	6123      	str	r3, [r4, #16]
 800783e:	dc02      	bgt.n	8007846 <_printf_float+0x15e>
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	07d2      	lsls	r2, r2, #31
 8007844:	d501      	bpl.n	800784a <_printf_float+0x162>
 8007846:	3301      	adds	r3, #1
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800784e:	2b00      	cmp	r3, #0
 8007850:	d09b      	beq.n	800778a <_printf_float+0xa2>
 8007852:	232d      	movs	r3, #45	; 0x2d
 8007854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007858:	e797      	b.n	800778a <_printf_float+0xa2>
 800785a:	2947      	cmp	r1, #71	; 0x47
 800785c:	d1bc      	bne.n	80077d8 <_printf_float+0xf0>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1ba      	bne.n	80077d8 <_printf_float+0xf0>
 8007862:	2301      	movs	r3, #1
 8007864:	e7b7      	b.n	80077d6 <_printf_float+0xee>
 8007866:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800786a:	d118      	bne.n	800789e <_printf_float+0x1b6>
 800786c:	2900      	cmp	r1, #0
 800786e:	6863      	ldr	r3, [r4, #4]
 8007870:	dd0b      	ble.n	800788a <_printf_float+0x1a2>
 8007872:	6121      	str	r1, [r4, #16]
 8007874:	b913      	cbnz	r3, 800787c <_printf_float+0x194>
 8007876:	6822      	ldr	r2, [r4, #0]
 8007878:	07d0      	lsls	r0, r2, #31
 800787a:	d502      	bpl.n	8007882 <_printf_float+0x19a>
 800787c:	3301      	adds	r3, #1
 800787e:	440b      	add	r3, r1
 8007880:	6123      	str	r3, [r4, #16]
 8007882:	f04f 0a00 	mov.w	sl, #0
 8007886:	65a1      	str	r1, [r4, #88]	; 0x58
 8007888:	e7df      	b.n	800784a <_printf_float+0x162>
 800788a:	b913      	cbnz	r3, 8007892 <_printf_float+0x1aa>
 800788c:	6822      	ldr	r2, [r4, #0]
 800788e:	07d2      	lsls	r2, r2, #31
 8007890:	d501      	bpl.n	8007896 <_printf_float+0x1ae>
 8007892:	3302      	adds	r3, #2
 8007894:	e7f4      	b.n	8007880 <_printf_float+0x198>
 8007896:	2301      	movs	r3, #1
 8007898:	e7f2      	b.n	8007880 <_printf_float+0x198>
 800789a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800789e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078a0:	4299      	cmp	r1, r3
 80078a2:	db05      	blt.n	80078b0 <_printf_float+0x1c8>
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	6121      	str	r1, [r4, #16]
 80078a8:	07d8      	lsls	r0, r3, #31
 80078aa:	d5ea      	bpl.n	8007882 <_printf_float+0x19a>
 80078ac:	1c4b      	adds	r3, r1, #1
 80078ae:	e7e7      	b.n	8007880 <_printf_float+0x198>
 80078b0:	2900      	cmp	r1, #0
 80078b2:	bfcc      	ite	gt
 80078b4:	2201      	movgt	r2, #1
 80078b6:	f1c1 0202 	rsble	r2, r1, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	e7e0      	b.n	8007880 <_printf_float+0x198>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	055a      	lsls	r2, r3, #21
 80078c2:	d407      	bmi.n	80078d4 <_printf_float+0x1ec>
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	4642      	mov	r2, r8
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	d12b      	bne.n	800792a <_printf_float+0x242>
 80078d2:	e764      	b.n	800779e <_printf_float+0xb6>
 80078d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80078d8:	f240 80dd 	bls.w	8007a96 <_printf_float+0x3ae>
 80078dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	f7f9 f86a 	bl	80009bc <__aeabi_dcmpeq>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d033      	beq.n	8007954 <_printf_float+0x26c>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4631      	mov	r1, r6
 80078f0:	4628      	mov	r0, r5
 80078f2:	4a35      	ldr	r2, [pc, #212]	; (80079c8 <_printf_float+0x2e0>)
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f af51 	beq.w	800779e <_printf_float+0xb6>
 80078fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007900:	429a      	cmp	r2, r3
 8007902:	db02      	blt.n	800790a <_printf_float+0x222>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	07d8      	lsls	r0, r3, #31
 8007908:	d50f      	bpl.n	800792a <_printf_float+0x242>
 800790a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	f43f af42 	beq.w	800779e <_printf_float+0xb6>
 800791a:	f04f 0800 	mov.w	r8, #0
 800791e:	f104 091a 	add.w	r9, r4, #26
 8007922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007924:	3b01      	subs	r3, #1
 8007926:	4543      	cmp	r3, r8
 8007928:	dc09      	bgt.n	800793e <_printf_float+0x256>
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	079b      	lsls	r3, r3, #30
 800792e:	f100 8104 	bmi.w	8007b3a <_printf_float+0x452>
 8007932:	68e0      	ldr	r0, [r4, #12]
 8007934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007936:	4298      	cmp	r0, r3
 8007938:	bfb8      	it	lt
 800793a:	4618      	movlt	r0, r3
 800793c:	e731      	b.n	80077a2 <_printf_float+0xba>
 800793e:	2301      	movs	r3, #1
 8007940:	464a      	mov	r2, r9
 8007942:	4631      	mov	r1, r6
 8007944:	4628      	mov	r0, r5
 8007946:	47b8      	blx	r7
 8007948:	3001      	adds	r0, #1
 800794a:	f43f af28 	beq.w	800779e <_printf_float+0xb6>
 800794e:	f108 0801 	add.w	r8, r8, #1
 8007952:	e7e6      	b.n	8007922 <_printf_float+0x23a>
 8007954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007956:	2b00      	cmp	r3, #0
 8007958:	dc38      	bgt.n	80079cc <_printf_float+0x2e4>
 800795a:	2301      	movs	r3, #1
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	4a19      	ldr	r2, [pc, #100]	; (80079c8 <_printf_float+0x2e0>)
 8007962:	47b8      	blx	r7
 8007964:	3001      	adds	r0, #1
 8007966:	f43f af1a 	beq.w	800779e <_printf_float+0xb6>
 800796a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800796e:	4313      	orrs	r3, r2
 8007970:	d102      	bne.n	8007978 <_printf_float+0x290>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	07d9      	lsls	r1, r3, #31
 8007976:	d5d8      	bpl.n	800792a <_printf_float+0x242>
 8007978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797c:	4631      	mov	r1, r6
 800797e:	4628      	mov	r0, r5
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	f43f af0b 	beq.w	800779e <_printf_float+0xb6>
 8007988:	f04f 0900 	mov.w	r9, #0
 800798c:	f104 0a1a 	add.w	sl, r4, #26
 8007990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007992:	425b      	negs	r3, r3
 8007994:	454b      	cmp	r3, r9
 8007996:	dc01      	bgt.n	800799c <_printf_float+0x2b4>
 8007998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800799a:	e794      	b.n	80078c6 <_printf_float+0x1de>
 800799c:	2301      	movs	r3, #1
 800799e:	4652      	mov	r2, sl
 80079a0:	4631      	mov	r1, r6
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b8      	blx	r7
 80079a6:	3001      	adds	r0, #1
 80079a8:	f43f aef9 	beq.w	800779e <_printf_float+0xb6>
 80079ac:	f109 0901 	add.w	r9, r9, #1
 80079b0:	e7ee      	b.n	8007990 <_printf_float+0x2a8>
 80079b2:	bf00      	nop
 80079b4:	7fefffff 	.word	0x7fefffff
 80079b8:	0800b4e1 	.word	0x0800b4e1
 80079bc:	0800b4e5 	.word	0x0800b4e5
 80079c0:	0800b4e9 	.word	0x0800b4e9
 80079c4:	0800b4ed 	.word	0x0800b4ed
 80079c8:	0800b2a1 	.word	0x0800b2a1
 80079cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80079d0:	429a      	cmp	r2, r3
 80079d2:	bfa8      	it	ge
 80079d4:	461a      	movge	r2, r3
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	4691      	mov	r9, r2
 80079da:	dc37      	bgt.n	8007a4c <_printf_float+0x364>
 80079dc:	f04f 0b00 	mov.w	fp, #0
 80079e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079e4:	f104 021a 	add.w	r2, r4, #26
 80079e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80079ec:	ebaa 0309 	sub.w	r3, sl, r9
 80079f0:	455b      	cmp	r3, fp
 80079f2:	dc33      	bgt.n	8007a5c <_printf_float+0x374>
 80079f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80079f8:	429a      	cmp	r2, r3
 80079fa:	db3b      	blt.n	8007a74 <_printf_float+0x38c>
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	07da      	lsls	r2, r3, #31
 8007a00:	d438      	bmi.n	8007a74 <_printf_float+0x38c>
 8007a02:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007a06:	eba2 0903 	sub.w	r9, r2, r3
 8007a0a:	eba2 020a 	sub.w	r2, r2, sl
 8007a0e:	4591      	cmp	r9, r2
 8007a10:	bfa8      	it	ge
 8007a12:	4691      	movge	r9, r2
 8007a14:	f1b9 0f00 	cmp.w	r9, #0
 8007a18:	dc34      	bgt.n	8007a84 <_printf_float+0x39c>
 8007a1a:	f04f 0800 	mov.w	r8, #0
 8007a1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a22:	f104 0a1a 	add.w	sl, r4, #26
 8007a26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	eba3 0309 	sub.w	r3, r3, r9
 8007a30:	4543      	cmp	r3, r8
 8007a32:	f77f af7a 	ble.w	800792a <_printf_float+0x242>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f aeac 	beq.w	800779e <_printf_float+0xb6>
 8007a46:	f108 0801 	add.w	r8, r8, #1
 8007a4a:	e7ec      	b.n	8007a26 <_printf_float+0x33e>
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4642      	mov	r2, r8
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	d1c0      	bne.n	80079dc <_printf_float+0x2f4>
 8007a5a:	e6a0      	b.n	800779e <_printf_float+0xb6>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4628      	mov	r0, r5
 8007a62:	920b      	str	r2, [sp, #44]	; 0x2c
 8007a64:	47b8      	blx	r7
 8007a66:	3001      	adds	r0, #1
 8007a68:	f43f ae99 	beq.w	800779e <_printf_float+0xb6>
 8007a6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a6e:	f10b 0b01 	add.w	fp, fp, #1
 8007a72:	e7b9      	b.n	80079e8 <_printf_float+0x300>
 8007a74:	4631      	mov	r1, r6
 8007a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d1bf      	bne.n	8007a02 <_printf_float+0x31a>
 8007a82:	e68c      	b.n	800779e <_printf_float+0xb6>
 8007a84:	464b      	mov	r3, r9
 8007a86:	4631      	mov	r1, r6
 8007a88:	4628      	mov	r0, r5
 8007a8a:	eb08 020a 	add.w	r2, r8, sl
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	d1c2      	bne.n	8007a1a <_printf_float+0x332>
 8007a94:	e683      	b.n	800779e <_printf_float+0xb6>
 8007a96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a98:	2a01      	cmp	r2, #1
 8007a9a:	dc01      	bgt.n	8007aa0 <_printf_float+0x3b8>
 8007a9c:	07db      	lsls	r3, r3, #31
 8007a9e:	d539      	bpl.n	8007b14 <_printf_float+0x42c>
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4642      	mov	r2, r8
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b8      	blx	r7
 8007aaa:	3001      	adds	r0, #1
 8007aac:	f43f ae77 	beq.w	800779e <_printf_float+0xb6>
 8007ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f ae6f 	beq.w	800779e <_printf_float+0xb6>
 8007ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8007acc:	f7f8 ff76 	bl	80009bc <__aeabi_dcmpeq>
 8007ad0:	b9d8      	cbnz	r0, 8007b0a <_printf_float+0x422>
 8007ad2:	f109 33ff 	add.w	r3, r9, #4294967295
 8007ad6:	f108 0201 	add.w	r2, r8, #1
 8007ada:	4631      	mov	r1, r6
 8007adc:	4628      	mov	r0, r5
 8007ade:	47b8      	blx	r7
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d10e      	bne.n	8007b02 <_printf_float+0x41a>
 8007ae4:	e65b      	b.n	800779e <_printf_float+0xb6>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	464a      	mov	r2, r9
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	f43f ae54 	beq.w	800779e <_printf_float+0xb6>
 8007af6:	f108 0801 	add.w	r8, r8, #1
 8007afa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007afc:	3b01      	subs	r3, #1
 8007afe:	4543      	cmp	r3, r8
 8007b00:	dcf1      	bgt.n	8007ae6 <_printf_float+0x3fe>
 8007b02:	4653      	mov	r3, sl
 8007b04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b08:	e6de      	b.n	80078c8 <_printf_float+0x1e0>
 8007b0a:	f04f 0800 	mov.w	r8, #0
 8007b0e:	f104 091a 	add.w	r9, r4, #26
 8007b12:	e7f2      	b.n	8007afa <_printf_float+0x412>
 8007b14:	2301      	movs	r3, #1
 8007b16:	4642      	mov	r2, r8
 8007b18:	e7df      	b.n	8007ada <_printf_float+0x3f2>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	464a      	mov	r2, r9
 8007b1e:	4631      	mov	r1, r6
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b8      	blx	r7
 8007b24:	3001      	adds	r0, #1
 8007b26:	f43f ae3a 	beq.w	800779e <_printf_float+0xb6>
 8007b2a:	f108 0801 	add.w	r8, r8, #1
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b32:	1a5b      	subs	r3, r3, r1
 8007b34:	4543      	cmp	r3, r8
 8007b36:	dcf0      	bgt.n	8007b1a <_printf_float+0x432>
 8007b38:	e6fb      	b.n	8007932 <_printf_float+0x24a>
 8007b3a:	f04f 0800 	mov.w	r8, #0
 8007b3e:	f104 0919 	add.w	r9, r4, #25
 8007b42:	e7f4      	b.n	8007b2e <_printf_float+0x446>

08007b44 <_printf_common>:
 8007b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b48:	4616      	mov	r6, r2
 8007b4a:	4699      	mov	r9, r3
 8007b4c:	688a      	ldr	r2, [r1, #8]
 8007b4e:	690b      	ldr	r3, [r1, #16]
 8007b50:	4607      	mov	r7, r0
 8007b52:	4293      	cmp	r3, r2
 8007b54:	bfb8      	it	lt
 8007b56:	4613      	movlt	r3, r2
 8007b58:	6033      	str	r3, [r6, #0]
 8007b5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b5e:	460c      	mov	r4, r1
 8007b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b64:	b10a      	cbz	r2, 8007b6a <_printf_common+0x26>
 8007b66:	3301      	adds	r3, #1
 8007b68:	6033      	str	r3, [r6, #0]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	0699      	lsls	r1, r3, #26
 8007b6e:	bf42      	ittt	mi
 8007b70:	6833      	ldrmi	r3, [r6, #0]
 8007b72:	3302      	addmi	r3, #2
 8007b74:	6033      	strmi	r3, [r6, #0]
 8007b76:	6825      	ldr	r5, [r4, #0]
 8007b78:	f015 0506 	ands.w	r5, r5, #6
 8007b7c:	d106      	bne.n	8007b8c <_printf_common+0x48>
 8007b7e:	f104 0a19 	add.w	sl, r4, #25
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	6832      	ldr	r2, [r6, #0]
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	42ab      	cmp	r3, r5
 8007b8a:	dc2b      	bgt.n	8007be4 <_printf_common+0xa0>
 8007b8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b90:	1e13      	subs	r3, r2, #0
 8007b92:	6822      	ldr	r2, [r4, #0]
 8007b94:	bf18      	it	ne
 8007b96:	2301      	movne	r3, #1
 8007b98:	0692      	lsls	r2, r2, #26
 8007b9a:	d430      	bmi.n	8007bfe <_printf_common+0xba>
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ba4:	47c0      	blx	r8
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d023      	beq.n	8007bf2 <_printf_common+0xae>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	6922      	ldr	r2, [r4, #16]
 8007bae:	f003 0306 	and.w	r3, r3, #6
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	bf14      	ite	ne
 8007bb6:	2500      	movne	r5, #0
 8007bb8:	6833      	ldreq	r3, [r6, #0]
 8007bba:	f04f 0600 	mov.w	r6, #0
 8007bbe:	bf08      	it	eq
 8007bc0:	68e5      	ldreq	r5, [r4, #12]
 8007bc2:	f104 041a 	add.w	r4, r4, #26
 8007bc6:	bf08      	it	eq
 8007bc8:	1aed      	subeq	r5, r5, r3
 8007bca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007bce:	bf08      	it	eq
 8007bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	bfc4      	itt	gt
 8007bd8:	1a9b      	subgt	r3, r3, r2
 8007bda:	18ed      	addgt	r5, r5, r3
 8007bdc:	42b5      	cmp	r5, r6
 8007bde:	d11a      	bne.n	8007c16 <_printf_common+0xd2>
 8007be0:	2000      	movs	r0, #0
 8007be2:	e008      	b.n	8007bf6 <_printf_common+0xb2>
 8007be4:	2301      	movs	r3, #1
 8007be6:	4652      	mov	r2, sl
 8007be8:	4649      	mov	r1, r9
 8007bea:	4638      	mov	r0, r7
 8007bec:	47c0      	blx	r8
 8007bee:	3001      	adds	r0, #1
 8007bf0:	d103      	bne.n	8007bfa <_printf_common+0xb6>
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfa:	3501      	adds	r5, #1
 8007bfc:	e7c1      	b.n	8007b82 <_printf_common+0x3e>
 8007bfe:	2030      	movs	r0, #48	; 0x30
 8007c00:	18e1      	adds	r1, r4, r3
 8007c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c06:	1c5a      	adds	r2, r3, #1
 8007c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c0c:	4422      	add	r2, r4
 8007c0e:	3302      	adds	r3, #2
 8007c10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c14:	e7c2      	b.n	8007b9c <_printf_common+0x58>
 8007c16:	2301      	movs	r3, #1
 8007c18:	4622      	mov	r2, r4
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	47c0      	blx	r8
 8007c20:	3001      	adds	r0, #1
 8007c22:	d0e6      	beq.n	8007bf2 <_printf_common+0xae>
 8007c24:	3601      	adds	r6, #1
 8007c26:	e7d9      	b.n	8007bdc <_printf_common+0x98>

08007c28 <_printf_i>:
 8007c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c2c:	7e0f      	ldrb	r7, [r1, #24]
 8007c2e:	4691      	mov	r9, r2
 8007c30:	2f78      	cmp	r7, #120	; 0x78
 8007c32:	4680      	mov	r8, r0
 8007c34:	460c      	mov	r4, r1
 8007c36:	469a      	mov	sl, r3
 8007c38:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c3e:	d807      	bhi.n	8007c50 <_printf_i+0x28>
 8007c40:	2f62      	cmp	r7, #98	; 0x62
 8007c42:	d80a      	bhi.n	8007c5a <_printf_i+0x32>
 8007c44:	2f00      	cmp	r7, #0
 8007c46:	f000 80d5 	beq.w	8007df4 <_printf_i+0x1cc>
 8007c4a:	2f58      	cmp	r7, #88	; 0x58
 8007c4c:	f000 80c1 	beq.w	8007dd2 <_printf_i+0x1aa>
 8007c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c58:	e03a      	b.n	8007cd0 <_printf_i+0xa8>
 8007c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c5e:	2b15      	cmp	r3, #21
 8007c60:	d8f6      	bhi.n	8007c50 <_printf_i+0x28>
 8007c62:	a101      	add	r1, pc, #4	; (adr r1, 8007c68 <_printf_i+0x40>)
 8007c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c68:	08007cc1 	.word	0x08007cc1
 8007c6c:	08007cd5 	.word	0x08007cd5
 8007c70:	08007c51 	.word	0x08007c51
 8007c74:	08007c51 	.word	0x08007c51
 8007c78:	08007c51 	.word	0x08007c51
 8007c7c:	08007c51 	.word	0x08007c51
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007c51 	.word	0x08007c51
 8007c88:	08007c51 	.word	0x08007c51
 8007c8c:	08007c51 	.word	0x08007c51
 8007c90:	08007c51 	.word	0x08007c51
 8007c94:	08007ddb 	.word	0x08007ddb
 8007c98:	08007d01 	.word	0x08007d01
 8007c9c:	08007d95 	.word	0x08007d95
 8007ca0:	08007c51 	.word	0x08007c51
 8007ca4:	08007c51 	.word	0x08007c51
 8007ca8:	08007dfd 	.word	0x08007dfd
 8007cac:	08007c51 	.word	0x08007c51
 8007cb0:	08007d01 	.word	0x08007d01
 8007cb4:	08007c51 	.word	0x08007c51
 8007cb8:	08007c51 	.word	0x08007c51
 8007cbc:	08007d9d 	.word	0x08007d9d
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	602a      	str	r2, [r5, #0]
 8007cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0a0      	b.n	8007e16 <_printf_i+0x1ee>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	682b      	ldr	r3, [r5, #0]
 8007cd8:	0607      	lsls	r7, r0, #24
 8007cda:	f103 0104 	add.w	r1, r3, #4
 8007cde:	6029      	str	r1, [r5, #0]
 8007ce0:	d501      	bpl.n	8007ce6 <_printf_i+0xbe>
 8007ce2:	681e      	ldr	r6, [r3, #0]
 8007ce4:	e003      	b.n	8007cee <_printf_i+0xc6>
 8007ce6:	0646      	lsls	r6, r0, #25
 8007ce8:	d5fb      	bpl.n	8007ce2 <_printf_i+0xba>
 8007cea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cee:	2e00      	cmp	r6, #0
 8007cf0:	da03      	bge.n	8007cfa <_printf_i+0xd2>
 8007cf2:	232d      	movs	r3, #45	; 0x2d
 8007cf4:	4276      	negs	r6, r6
 8007cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cfa:	230a      	movs	r3, #10
 8007cfc:	4859      	ldr	r0, [pc, #356]	; (8007e64 <_printf_i+0x23c>)
 8007cfe:	e012      	b.n	8007d26 <_printf_i+0xfe>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	6820      	ldr	r0, [r4, #0]
 8007d04:	1d19      	adds	r1, r3, #4
 8007d06:	6029      	str	r1, [r5, #0]
 8007d08:	0605      	lsls	r5, r0, #24
 8007d0a:	d501      	bpl.n	8007d10 <_printf_i+0xe8>
 8007d0c:	681e      	ldr	r6, [r3, #0]
 8007d0e:	e002      	b.n	8007d16 <_printf_i+0xee>
 8007d10:	0641      	lsls	r1, r0, #25
 8007d12:	d5fb      	bpl.n	8007d0c <_printf_i+0xe4>
 8007d14:	881e      	ldrh	r6, [r3, #0]
 8007d16:	2f6f      	cmp	r7, #111	; 0x6f
 8007d18:	bf0c      	ite	eq
 8007d1a:	2308      	moveq	r3, #8
 8007d1c:	230a      	movne	r3, #10
 8007d1e:	4851      	ldr	r0, [pc, #324]	; (8007e64 <_printf_i+0x23c>)
 8007d20:	2100      	movs	r1, #0
 8007d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d26:	6865      	ldr	r5, [r4, #4]
 8007d28:	2d00      	cmp	r5, #0
 8007d2a:	bfa8      	it	ge
 8007d2c:	6821      	ldrge	r1, [r4, #0]
 8007d2e:	60a5      	str	r5, [r4, #8]
 8007d30:	bfa4      	itt	ge
 8007d32:	f021 0104 	bicge.w	r1, r1, #4
 8007d36:	6021      	strge	r1, [r4, #0]
 8007d38:	b90e      	cbnz	r6, 8007d3e <_printf_i+0x116>
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	d04b      	beq.n	8007dd6 <_printf_i+0x1ae>
 8007d3e:	4615      	mov	r5, r2
 8007d40:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d44:	fb03 6711 	mls	r7, r3, r1, r6
 8007d48:	5dc7      	ldrb	r7, [r0, r7]
 8007d4a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d4e:	4637      	mov	r7, r6
 8007d50:	42bb      	cmp	r3, r7
 8007d52:	460e      	mov	r6, r1
 8007d54:	d9f4      	bls.n	8007d40 <_printf_i+0x118>
 8007d56:	2b08      	cmp	r3, #8
 8007d58:	d10b      	bne.n	8007d72 <_printf_i+0x14a>
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	07de      	lsls	r6, r3, #31
 8007d5e:	d508      	bpl.n	8007d72 <_printf_i+0x14a>
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	6861      	ldr	r1, [r4, #4]
 8007d64:	4299      	cmp	r1, r3
 8007d66:	bfde      	ittt	le
 8007d68:	2330      	movle	r3, #48	; 0x30
 8007d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d72:	1b52      	subs	r2, r2, r5
 8007d74:	6122      	str	r2, [r4, #16]
 8007d76:	464b      	mov	r3, r9
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	f8cd a000 	str.w	sl, [sp]
 8007d80:	aa03      	add	r2, sp, #12
 8007d82:	f7ff fedf 	bl	8007b44 <_printf_common>
 8007d86:	3001      	adds	r0, #1
 8007d88:	d14a      	bne.n	8007e20 <_printf_i+0x1f8>
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	b004      	add	sp, #16
 8007d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	f043 0320 	orr.w	r3, r3, #32
 8007d9a:	6023      	str	r3, [r4, #0]
 8007d9c:	2778      	movs	r7, #120	; 0x78
 8007d9e:	4832      	ldr	r0, [pc, #200]	; (8007e68 <_printf_i+0x240>)
 8007da0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	6829      	ldr	r1, [r5, #0]
 8007da8:	061f      	lsls	r7, r3, #24
 8007daa:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dae:	d402      	bmi.n	8007db6 <_printf_i+0x18e>
 8007db0:	065f      	lsls	r7, r3, #25
 8007db2:	bf48      	it	mi
 8007db4:	b2b6      	uxthmi	r6, r6
 8007db6:	07df      	lsls	r7, r3, #31
 8007db8:	bf48      	it	mi
 8007dba:	f043 0320 	orrmi.w	r3, r3, #32
 8007dbe:	6029      	str	r1, [r5, #0]
 8007dc0:	bf48      	it	mi
 8007dc2:	6023      	strmi	r3, [r4, #0]
 8007dc4:	b91e      	cbnz	r6, 8007dce <_printf_i+0x1a6>
 8007dc6:	6823      	ldr	r3, [r4, #0]
 8007dc8:	f023 0320 	bic.w	r3, r3, #32
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	2310      	movs	r3, #16
 8007dd0:	e7a6      	b.n	8007d20 <_printf_i+0xf8>
 8007dd2:	4824      	ldr	r0, [pc, #144]	; (8007e64 <_printf_i+0x23c>)
 8007dd4:	e7e4      	b.n	8007da0 <_printf_i+0x178>
 8007dd6:	4615      	mov	r5, r2
 8007dd8:	e7bd      	b.n	8007d56 <_printf_i+0x12e>
 8007dda:	682b      	ldr	r3, [r5, #0]
 8007ddc:	6826      	ldr	r6, [r4, #0]
 8007dde:	1d18      	adds	r0, r3, #4
 8007de0:	6961      	ldr	r1, [r4, #20]
 8007de2:	6028      	str	r0, [r5, #0]
 8007de4:	0635      	lsls	r5, r6, #24
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	d501      	bpl.n	8007dee <_printf_i+0x1c6>
 8007dea:	6019      	str	r1, [r3, #0]
 8007dec:	e002      	b.n	8007df4 <_printf_i+0x1cc>
 8007dee:	0670      	lsls	r0, r6, #25
 8007df0:	d5fb      	bpl.n	8007dea <_printf_i+0x1c2>
 8007df2:	8019      	strh	r1, [r3, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	4615      	mov	r5, r2
 8007df8:	6123      	str	r3, [r4, #16]
 8007dfa:	e7bc      	b.n	8007d76 <_printf_i+0x14e>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	2100      	movs	r1, #0
 8007e00:	1d1a      	adds	r2, r3, #4
 8007e02:	602a      	str	r2, [r5, #0]
 8007e04:	681d      	ldr	r5, [r3, #0]
 8007e06:	6862      	ldr	r2, [r4, #4]
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f000 fadf 	bl	80083cc <memchr>
 8007e0e:	b108      	cbz	r0, 8007e14 <_printf_i+0x1ec>
 8007e10:	1b40      	subs	r0, r0, r5
 8007e12:	6060      	str	r0, [r4, #4]
 8007e14:	6863      	ldr	r3, [r4, #4]
 8007e16:	6123      	str	r3, [r4, #16]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e1e:	e7aa      	b.n	8007d76 <_printf_i+0x14e>
 8007e20:	462a      	mov	r2, r5
 8007e22:	4649      	mov	r1, r9
 8007e24:	4640      	mov	r0, r8
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	47d0      	blx	sl
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d0ad      	beq.n	8007d8a <_printf_i+0x162>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	079b      	lsls	r3, r3, #30
 8007e32:	d413      	bmi.n	8007e5c <_printf_i+0x234>
 8007e34:	68e0      	ldr	r0, [r4, #12]
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	4298      	cmp	r0, r3
 8007e3a:	bfb8      	it	lt
 8007e3c:	4618      	movlt	r0, r3
 8007e3e:	e7a6      	b.n	8007d8e <_printf_i+0x166>
 8007e40:	2301      	movs	r3, #1
 8007e42:	4632      	mov	r2, r6
 8007e44:	4649      	mov	r1, r9
 8007e46:	4640      	mov	r0, r8
 8007e48:	47d0      	blx	sl
 8007e4a:	3001      	adds	r0, #1
 8007e4c:	d09d      	beq.n	8007d8a <_printf_i+0x162>
 8007e4e:	3501      	adds	r5, #1
 8007e50:	68e3      	ldr	r3, [r4, #12]
 8007e52:	9903      	ldr	r1, [sp, #12]
 8007e54:	1a5b      	subs	r3, r3, r1
 8007e56:	42ab      	cmp	r3, r5
 8007e58:	dcf2      	bgt.n	8007e40 <_printf_i+0x218>
 8007e5a:	e7eb      	b.n	8007e34 <_printf_i+0x20c>
 8007e5c:	2500      	movs	r5, #0
 8007e5e:	f104 0619 	add.w	r6, r4, #25
 8007e62:	e7f5      	b.n	8007e50 <_printf_i+0x228>
 8007e64:	0800b4f1 	.word	0x0800b4f1
 8007e68:	0800b502 	.word	0x0800b502

08007e6c <std>:
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	b510      	push	{r4, lr}
 8007e70:	4604      	mov	r4, r0
 8007e72:	e9c0 3300 	strd	r3, r3, [r0]
 8007e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e7a:	6083      	str	r3, [r0, #8]
 8007e7c:	8181      	strh	r1, [r0, #12]
 8007e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8007e80:	81c2      	strh	r2, [r0, #14]
 8007e82:	6183      	str	r3, [r0, #24]
 8007e84:	4619      	mov	r1, r3
 8007e86:	2208      	movs	r2, #8
 8007e88:	305c      	adds	r0, #92	; 0x5c
 8007e8a:	f000 fa07 	bl	800829c <memset>
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <std+0x38>)
 8007e90:	6224      	str	r4, [r4, #32]
 8007e92:	6263      	str	r3, [r4, #36]	; 0x24
 8007e94:	4b04      	ldr	r3, [pc, #16]	; (8007ea8 <std+0x3c>)
 8007e96:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e98:	4b04      	ldr	r3, [pc, #16]	; (8007eac <std+0x40>)
 8007e9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e9c:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <std+0x44>)
 8007e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	bf00      	nop
 8007ea4:	080080ed 	.word	0x080080ed
 8007ea8:	0800810f 	.word	0x0800810f
 8007eac:	08008147 	.word	0x08008147
 8007eb0:	0800816b 	.word	0x0800816b

08007eb4 <stdio_exit_handler>:
 8007eb4:	4a02      	ldr	r2, [pc, #8]	; (8007ec0 <stdio_exit_handler+0xc>)
 8007eb6:	4903      	ldr	r1, [pc, #12]	; (8007ec4 <stdio_exit_handler+0x10>)
 8007eb8:	4803      	ldr	r0, [pc, #12]	; (8007ec8 <stdio_exit_handler+0x14>)
 8007eba:	f000 b869 	b.w	8007f90 <_fwalk_sglue>
 8007ebe:	bf00      	nop
 8007ec0:	20000010 	.word	0x20000010
 8007ec4:	0800a6c9 	.word	0x0800a6c9
 8007ec8:	20000188 	.word	0x20000188

08007ecc <cleanup_stdio>:
 8007ecc:	6841      	ldr	r1, [r0, #4]
 8007ece:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <cleanup_stdio+0x34>)
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	d001      	beq.n	8007edc <cleanup_stdio+0x10>
 8007ed8:	f002 fbf6 	bl	800a6c8 <_fflush_r>
 8007edc:	68a1      	ldr	r1, [r4, #8]
 8007ede:	4b09      	ldr	r3, [pc, #36]	; (8007f04 <cleanup_stdio+0x38>)
 8007ee0:	4299      	cmp	r1, r3
 8007ee2:	d002      	beq.n	8007eea <cleanup_stdio+0x1e>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f002 fbef 	bl	800a6c8 <_fflush_r>
 8007eea:	68e1      	ldr	r1, [r4, #12]
 8007eec:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <cleanup_stdio+0x3c>)
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	d004      	beq.n	8007efc <cleanup_stdio+0x30>
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef8:	f002 bbe6 	b.w	800a6c8 <_fflush_r>
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	bf00      	nop
 8007f00:	20000a5c 	.word	0x20000a5c
 8007f04:	20000ac4 	.word	0x20000ac4
 8007f08:	20000b2c 	.word	0x20000b2c

08007f0c <global_stdio_init.part.0>:
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	4b0b      	ldr	r3, [pc, #44]	; (8007f3c <global_stdio_init.part.0+0x30>)
 8007f10:	4c0b      	ldr	r4, [pc, #44]	; (8007f40 <global_stdio_init.part.0+0x34>)
 8007f12:	4a0c      	ldr	r2, [pc, #48]	; (8007f44 <global_stdio_init.part.0+0x38>)
 8007f14:	4620      	mov	r0, r4
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	2104      	movs	r1, #4
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f7ff ffa6 	bl	8007e6c <std>
 8007f20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f24:	2201      	movs	r2, #1
 8007f26:	2109      	movs	r1, #9
 8007f28:	f7ff ffa0 	bl	8007e6c <std>
 8007f2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f30:	2202      	movs	r2, #2
 8007f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f36:	2112      	movs	r1, #18
 8007f38:	f7ff bf98 	b.w	8007e6c <std>
 8007f3c:	20000b94 	.word	0x20000b94
 8007f40:	20000a5c 	.word	0x20000a5c
 8007f44:	08007eb5 	.word	0x08007eb5

08007f48 <__sfp_lock_acquire>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__sfp_lock_acquire+0x8>)
 8007f4a:	f000 ba35 	b.w	80083b8 <__retarget_lock_acquire_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20000b9d 	.word	0x20000b9d

08007f54 <__sfp_lock_release>:
 8007f54:	4801      	ldr	r0, [pc, #4]	; (8007f5c <__sfp_lock_release+0x8>)
 8007f56:	f000 ba30 	b.w	80083ba <__retarget_lock_release_recursive>
 8007f5a:	bf00      	nop
 8007f5c:	20000b9d 	.word	0x20000b9d

08007f60 <__sinit>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	4604      	mov	r4, r0
 8007f64:	f7ff fff0 	bl	8007f48 <__sfp_lock_acquire>
 8007f68:	6a23      	ldr	r3, [r4, #32]
 8007f6a:	b11b      	cbz	r3, 8007f74 <__sinit+0x14>
 8007f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f70:	f7ff bff0 	b.w	8007f54 <__sfp_lock_release>
 8007f74:	4b04      	ldr	r3, [pc, #16]	; (8007f88 <__sinit+0x28>)
 8007f76:	6223      	str	r3, [r4, #32]
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <__sinit+0x2c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1f5      	bne.n	8007f6c <__sinit+0xc>
 8007f80:	f7ff ffc4 	bl	8007f0c <global_stdio_init.part.0>
 8007f84:	e7f2      	b.n	8007f6c <__sinit+0xc>
 8007f86:	bf00      	nop
 8007f88:	08007ecd 	.word	0x08007ecd
 8007f8c:	20000b94 	.word	0x20000b94

08007f90 <_fwalk_sglue>:
 8007f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f94:	4607      	mov	r7, r0
 8007f96:	4688      	mov	r8, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8007fa4:	d505      	bpl.n	8007fb2 <_fwalk_sglue+0x22>
 8007fa6:	6824      	ldr	r4, [r4, #0]
 8007fa8:	2c00      	cmp	r4, #0
 8007faa:	d1f7      	bne.n	8007f9c <_fwalk_sglue+0xc>
 8007fac:	4630      	mov	r0, r6
 8007fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d907      	bls.n	8007fc8 <_fwalk_sglue+0x38>
 8007fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	d003      	beq.n	8007fc8 <_fwalk_sglue+0x38>
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	47c0      	blx	r8
 8007fc6:	4306      	orrs	r6, r0
 8007fc8:	3568      	adds	r5, #104	; 0x68
 8007fca:	e7e9      	b.n	8007fa0 <_fwalk_sglue+0x10>

08007fcc <_puts_r>:
 8007fcc:	6a03      	ldr	r3, [r0, #32]
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	460e      	mov	r6, r1
 8007fd4:	6884      	ldr	r4, [r0, #8]
 8007fd6:	b90b      	cbnz	r3, 8007fdc <_puts_r+0x10>
 8007fd8:	f7ff ffc2 	bl	8007f60 <__sinit>
 8007fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fde:	07db      	lsls	r3, r3, #31
 8007fe0:	d405      	bmi.n	8007fee <_puts_r+0x22>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	0598      	lsls	r0, r3, #22
 8007fe6:	d402      	bmi.n	8007fee <_puts_r+0x22>
 8007fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fea:	f000 f9e5 	bl	80083b8 <__retarget_lock_acquire_recursive>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	0719      	lsls	r1, r3, #28
 8007ff2:	d513      	bpl.n	800801c <_puts_r+0x50>
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	b18b      	cbz	r3, 800801c <_puts_r+0x50>
 8007ff8:	3e01      	subs	r6, #1
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008000:	3b01      	subs	r3, #1
 8008002:	60a3      	str	r3, [r4, #8]
 8008004:	b9e9      	cbnz	r1, 8008042 <_puts_r+0x76>
 8008006:	2b00      	cmp	r3, #0
 8008008:	da2e      	bge.n	8008068 <_puts_r+0x9c>
 800800a:	4622      	mov	r2, r4
 800800c:	210a      	movs	r1, #10
 800800e:	4628      	mov	r0, r5
 8008010:	f000 f8af 	bl	8008172 <__swbuf_r>
 8008014:	3001      	adds	r0, #1
 8008016:	d007      	beq.n	8008028 <_puts_r+0x5c>
 8008018:	250a      	movs	r5, #10
 800801a:	e007      	b.n	800802c <_puts_r+0x60>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 f8e4 	bl	80081ec <__swsetup_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0e7      	beq.n	8007ff8 <_puts_r+0x2c>
 8008028:	f04f 35ff 	mov.w	r5, #4294967295
 800802c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800802e:	07da      	lsls	r2, r3, #31
 8008030:	d405      	bmi.n	800803e <_puts_r+0x72>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	059b      	lsls	r3, r3, #22
 8008036:	d402      	bmi.n	800803e <_puts_r+0x72>
 8008038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800803a:	f000 f9be 	bl	80083ba <__retarget_lock_release_recursive>
 800803e:	4628      	mov	r0, r5
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	2b00      	cmp	r3, #0
 8008044:	da04      	bge.n	8008050 <_puts_r+0x84>
 8008046:	69a2      	ldr	r2, [r4, #24]
 8008048:	429a      	cmp	r2, r3
 800804a:	dc06      	bgt.n	800805a <_puts_r+0x8e>
 800804c:	290a      	cmp	r1, #10
 800804e:	d004      	beq.n	800805a <_puts_r+0x8e>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	6022      	str	r2, [r4, #0]
 8008056:	7019      	strb	r1, [r3, #0]
 8008058:	e7cf      	b.n	8007ffa <_puts_r+0x2e>
 800805a:	4622      	mov	r2, r4
 800805c:	4628      	mov	r0, r5
 800805e:	f000 f888 	bl	8008172 <__swbuf_r>
 8008062:	3001      	adds	r0, #1
 8008064:	d1c9      	bne.n	8007ffa <_puts_r+0x2e>
 8008066:	e7df      	b.n	8008028 <_puts_r+0x5c>
 8008068:	250a      	movs	r5, #10
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	701d      	strb	r5, [r3, #0]
 8008072:	e7db      	b.n	800802c <_puts_r+0x60>

08008074 <puts>:
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <puts+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f7ff bfa7 	b.w	8007fcc <_puts_r>
 800807e:	bf00      	nop
 8008080:	200001d4 	.word	0x200001d4

08008084 <sniprintf>:
 8008084:	b40c      	push	{r2, r3}
 8008086:	b530      	push	{r4, r5, lr}
 8008088:	4b17      	ldr	r3, [pc, #92]	; (80080e8 <sniprintf+0x64>)
 800808a:	1e0c      	subs	r4, r1, #0
 800808c:	681d      	ldr	r5, [r3, #0]
 800808e:	b09d      	sub	sp, #116	; 0x74
 8008090:	da08      	bge.n	80080a4 <sniprintf+0x20>
 8008092:	238b      	movs	r3, #139	; 0x8b
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	b01d      	add	sp, #116	; 0x74
 800809c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080a0:	b002      	add	sp, #8
 80080a2:	4770      	bx	lr
 80080a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80080a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80080ac:	bf0c      	ite	eq
 80080ae:	4623      	moveq	r3, r4
 80080b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	9307      	str	r3, [sp, #28]
 80080b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080bc:	9002      	str	r0, [sp, #8]
 80080be:	9006      	str	r0, [sp, #24]
 80080c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080c4:	4628      	mov	r0, r5
 80080c6:	ab21      	add	r3, sp, #132	; 0x84
 80080c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80080ca:	a902      	add	r1, sp, #8
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	f002 f97b 	bl	800a3c8 <_svfiprintf_r>
 80080d2:	1c43      	adds	r3, r0, #1
 80080d4:	bfbc      	itt	lt
 80080d6:	238b      	movlt	r3, #139	; 0x8b
 80080d8:	602b      	strlt	r3, [r5, #0]
 80080da:	2c00      	cmp	r4, #0
 80080dc:	d0dd      	beq.n	800809a <sniprintf+0x16>
 80080de:	2200      	movs	r2, #0
 80080e0:	9b02      	ldr	r3, [sp, #8]
 80080e2:	701a      	strb	r2, [r3, #0]
 80080e4:	e7d9      	b.n	800809a <sniprintf+0x16>
 80080e6:	bf00      	nop
 80080e8:	200001d4 	.word	0x200001d4

080080ec <__sread>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	460c      	mov	r4, r1
 80080f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f4:	f000 f912 	bl	800831c <_read_r>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	bfab      	itete	ge
 80080fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008100:	181b      	addge	r3, r3, r0
 8008102:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008106:	bfac      	ite	ge
 8008108:	6563      	strge	r3, [r4, #84]	; 0x54
 800810a:	81a3      	strhlt	r3, [r4, #12]
 800810c:	bd10      	pop	{r4, pc}

0800810e <__swrite>:
 800810e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008112:	461f      	mov	r7, r3
 8008114:	898b      	ldrh	r3, [r1, #12]
 8008116:	4605      	mov	r5, r0
 8008118:	05db      	lsls	r3, r3, #23
 800811a:	460c      	mov	r4, r1
 800811c:	4616      	mov	r6, r2
 800811e:	d505      	bpl.n	800812c <__swrite+0x1e>
 8008120:	2302      	movs	r3, #2
 8008122:	2200      	movs	r2, #0
 8008124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008128:	f000 f8e6 	bl	80082f8 <_lseek_r>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	4632      	mov	r2, r6
 8008130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	4628      	mov	r0, r5
 8008138:	463b      	mov	r3, r7
 800813a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	f000 b8fd 	b.w	8008340 <_write_r>

08008146 <__sseek>:
 8008146:	b510      	push	{r4, lr}
 8008148:	460c      	mov	r4, r1
 800814a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814e:	f000 f8d3 	bl	80082f8 <_lseek_r>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	bf15      	itete	ne
 8008158:	6560      	strne	r0, [r4, #84]	; 0x54
 800815a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800815e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008162:	81a3      	strheq	r3, [r4, #12]
 8008164:	bf18      	it	ne
 8008166:	81a3      	strhne	r3, [r4, #12]
 8008168:	bd10      	pop	{r4, pc}

0800816a <__sclose>:
 800816a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816e:	f000 b8b3 	b.w	80082d8 <_close_r>

08008172 <__swbuf_r>:
 8008172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008174:	460e      	mov	r6, r1
 8008176:	4614      	mov	r4, r2
 8008178:	4605      	mov	r5, r0
 800817a:	b118      	cbz	r0, 8008184 <__swbuf_r+0x12>
 800817c:	6a03      	ldr	r3, [r0, #32]
 800817e:	b90b      	cbnz	r3, 8008184 <__swbuf_r+0x12>
 8008180:	f7ff feee 	bl	8007f60 <__sinit>
 8008184:	69a3      	ldr	r3, [r4, #24]
 8008186:	60a3      	str	r3, [r4, #8]
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	071a      	lsls	r2, r3, #28
 800818c:	d525      	bpl.n	80081da <__swbuf_r+0x68>
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	b31b      	cbz	r3, 80081da <__swbuf_r+0x68>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	6922      	ldr	r2, [r4, #16]
 8008196:	b2f6      	uxtb	r6, r6
 8008198:	1a98      	subs	r0, r3, r2
 800819a:	6963      	ldr	r3, [r4, #20]
 800819c:	4637      	mov	r7, r6
 800819e:	4283      	cmp	r3, r0
 80081a0:	dc04      	bgt.n	80081ac <__swbuf_r+0x3a>
 80081a2:	4621      	mov	r1, r4
 80081a4:	4628      	mov	r0, r5
 80081a6:	f002 fa8f 	bl	800a6c8 <_fflush_r>
 80081aa:	b9e0      	cbnz	r0, 80081e6 <__swbuf_r+0x74>
 80081ac:	68a3      	ldr	r3, [r4, #8]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	60a3      	str	r3, [r4, #8]
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	1c5a      	adds	r2, r3, #1
 80081b6:	6022      	str	r2, [r4, #0]
 80081b8:	701e      	strb	r6, [r3, #0]
 80081ba:	6962      	ldr	r2, [r4, #20]
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	429a      	cmp	r2, r3
 80081c0:	d004      	beq.n	80081cc <__swbuf_r+0x5a>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	07db      	lsls	r3, r3, #31
 80081c6:	d506      	bpl.n	80081d6 <__swbuf_r+0x64>
 80081c8:	2e0a      	cmp	r6, #10
 80081ca:	d104      	bne.n	80081d6 <__swbuf_r+0x64>
 80081cc:	4621      	mov	r1, r4
 80081ce:	4628      	mov	r0, r5
 80081d0:	f002 fa7a 	bl	800a6c8 <_fflush_r>
 80081d4:	b938      	cbnz	r0, 80081e6 <__swbuf_r+0x74>
 80081d6:	4638      	mov	r0, r7
 80081d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f805 	bl	80081ec <__swsetup_r>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d0d5      	beq.n	8008192 <__swbuf_r+0x20>
 80081e6:	f04f 37ff 	mov.w	r7, #4294967295
 80081ea:	e7f4      	b.n	80081d6 <__swbuf_r+0x64>

080081ec <__swsetup_r>:
 80081ec:	b538      	push	{r3, r4, r5, lr}
 80081ee:	4b2a      	ldr	r3, [pc, #168]	; (8008298 <__swsetup_r+0xac>)
 80081f0:	4605      	mov	r5, r0
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	460c      	mov	r4, r1
 80081f6:	b118      	cbz	r0, 8008200 <__swsetup_r+0x14>
 80081f8:	6a03      	ldr	r3, [r0, #32]
 80081fa:	b90b      	cbnz	r3, 8008200 <__swsetup_r+0x14>
 80081fc:	f7ff feb0 	bl	8007f60 <__sinit>
 8008200:	89a3      	ldrh	r3, [r4, #12]
 8008202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008206:	0718      	lsls	r0, r3, #28
 8008208:	d422      	bmi.n	8008250 <__swsetup_r+0x64>
 800820a:	06d9      	lsls	r1, r3, #27
 800820c:	d407      	bmi.n	800821e <__swsetup_r+0x32>
 800820e:	2309      	movs	r3, #9
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008216:	f04f 30ff 	mov.w	r0, #4294967295
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	e034      	b.n	8008288 <__swsetup_r+0x9c>
 800821e:	0758      	lsls	r0, r3, #29
 8008220:	d512      	bpl.n	8008248 <__swsetup_r+0x5c>
 8008222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008224:	b141      	cbz	r1, 8008238 <__swsetup_r+0x4c>
 8008226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800822a:	4299      	cmp	r1, r3
 800822c:	d002      	beq.n	8008234 <__swsetup_r+0x48>
 800822e:	4628      	mov	r0, r5
 8008230:	f000 ff5e 	bl	80090f0 <_free_r>
 8008234:	2300      	movs	r3, #0
 8008236:	6363      	str	r3, [r4, #52]	; 0x34
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	2300      	movs	r3, #0
 8008242:	6063      	str	r3, [r4, #4]
 8008244:	6923      	ldr	r3, [r4, #16]
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f043 0308 	orr.w	r3, r3, #8
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	6923      	ldr	r3, [r4, #16]
 8008252:	b94b      	cbnz	r3, 8008268 <__swsetup_r+0x7c>
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800825a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825e:	d003      	beq.n	8008268 <__swsetup_r+0x7c>
 8008260:	4621      	mov	r1, r4
 8008262:	4628      	mov	r0, r5
 8008264:	f002 fa7d 	bl	800a762 <__smakebuf_r>
 8008268:	89a0      	ldrh	r0, [r4, #12]
 800826a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800826e:	f010 0301 	ands.w	r3, r0, #1
 8008272:	d00a      	beq.n	800828a <__swsetup_r+0x9e>
 8008274:	2300      	movs	r3, #0
 8008276:	60a3      	str	r3, [r4, #8]
 8008278:	6963      	ldr	r3, [r4, #20]
 800827a:	425b      	negs	r3, r3
 800827c:	61a3      	str	r3, [r4, #24]
 800827e:	6923      	ldr	r3, [r4, #16]
 8008280:	b943      	cbnz	r3, 8008294 <__swsetup_r+0xa8>
 8008282:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008286:	d1c4      	bne.n	8008212 <__swsetup_r+0x26>
 8008288:	bd38      	pop	{r3, r4, r5, pc}
 800828a:	0781      	lsls	r1, r0, #30
 800828c:	bf58      	it	pl
 800828e:	6963      	ldrpl	r3, [r4, #20]
 8008290:	60a3      	str	r3, [r4, #8]
 8008292:	e7f4      	b.n	800827e <__swsetup_r+0x92>
 8008294:	2000      	movs	r0, #0
 8008296:	e7f7      	b.n	8008288 <__swsetup_r+0x9c>
 8008298:	200001d4 	.word	0x200001d4

0800829c <memset>:
 800829c:	4603      	mov	r3, r0
 800829e:	4402      	add	r2, r0
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d100      	bne.n	80082a6 <memset+0xa>
 80082a4:	4770      	bx	lr
 80082a6:	f803 1b01 	strb.w	r1, [r3], #1
 80082aa:	e7f9      	b.n	80082a0 <memset+0x4>

080082ac <strncmp>:
 80082ac:	b510      	push	{r4, lr}
 80082ae:	b16a      	cbz	r2, 80082cc <strncmp+0x20>
 80082b0:	3901      	subs	r1, #1
 80082b2:	1884      	adds	r4, r0, r2
 80082b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80082bc:	429a      	cmp	r2, r3
 80082be:	d103      	bne.n	80082c8 <strncmp+0x1c>
 80082c0:	42a0      	cmp	r0, r4
 80082c2:	d001      	beq.n	80082c8 <strncmp+0x1c>
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d1f5      	bne.n	80082b4 <strncmp+0x8>
 80082c8:	1ad0      	subs	r0, r2, r3
 80082ca:	bd10      	pop	{r4, pc}
 80082cc:	4610      	mov	r0, r2
 80082ce:	e7fc      	b.n	80082ca <strncmp+0x1e>

080082d0 <_localeconv_r>:
 80082d0:	4800      	ldr	r0, [pc, #0]	; (80082d4 <_localeconv_r+0x4>)
 80082d2:	4770      	bx	lr
 80082d4:	2000010c 	.word	0x2000010c

080082d8 <_close_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	2300      	movs	r3, #0
 80082dc:	4d05      	ldr	r5, [pc, #20]	; (80082f4 <_close_r+0x1c>)
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	f7fa f9ac 	bl	8002640 <_close>
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d102      	bne.n	80082f2 <_close_r+0x1a>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	b103      	cbz	r3, 80082f2 <_close_r+0x1a>
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
 80082f4:	20000b98 	.word	0x20000b98

080082f8 <_lseek_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4604      	mov	r4, r0
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	2200      	movs	r2, #0
 8008302:	4d05      	ldr	r5, [pc, #20]	; (8008318 <_lseek_r+0x20>)
 8008304:	602a      	str	r2, [r5, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	f7fa f9a4 	bl	8002654 <_lseek>
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	d102      	bne.n	8008316 <_lseek_r+0x1e>
 8008310:	682b      	ldr	r3, [r5, #0]
 8008312:	b103      	cbz	r3, 8008316 <_lseek_r+0x1e>
 8008314:	6023      	str	r3, [r4, #0]
 8008316:	bd38      	pop	{r3, r4, r5, pc}
 8008318:	20000b98 	.word	0x20000b98

0800831c <_read_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4604      	mov	r4, r0
 8008320:	4608      	mov	r0, r1
 8008322:	4611      	mov	r1, r2
 8008324:	2200      	movs	r2, #0
 8008326:	4d05      	ldr	r5, [pc, #20]	; (800833c <_read_r+0x20>)
 8008328:	602a      	str	r2, [r5, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f7fa f96c 	bl	8002608 <_read>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_read_r+0x1e>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_read_r+0x1e>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000b98 	.word	0x20000b98

08008340 <_write_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	4604      	mov	r4, r0
 8008344:	4608      	mov	r0, r1
 8008346:	4611      	mov	r1, r2
 8008348:	2200      	movs	r2, #0
 800834a:	4d05      	ldr	r5, [pc, #20]	; (8008360 <_write_r+0x20>)
 800834c:	602a      	str	r2, [r5, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	f7fa f968 	bl	8002624 <_write>
 8008354:	1c43      	adds	r3, r0, #1
 8008356:	d102      	bne.n	800835e <_write_r+0x1e>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	b103      	cbz	r3, 800835e <_write_r+0x1e>
 800835c:	6023      	str	r3, [r4, #0]
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	20000b98 	.word	0x20000b98

08008364 <__errno>:
 8008364:	4b01      	ldr	r3, [pc, #4]	; (800836c <__errno+0x8>)
 8008366:	6818      	ldr	r0, [r3, #0]
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	200001d4 	.word	0x200001d4

08008370 <__libc_init_array>:
 8008370:	b570      	push	{r4, r5, r6, lr}
 8008372:	2600      	movs	r6, #0
 8008374:	4d0c      	ldr	r5, [pc, #48]	; (80083a8 <__libc_init_array+0x38>)
 8008376:	4c0d      	ldr	r4, [pc, #52]	; (80083ac <__libc_init_array+0x3c>)
 8008378:	1b64      	subs	r4, r4, r5
 800837a:	10a4      	asrs	r4, r4, #2
 800837c:	42a6      	cmp	r6, r4
 800837e:	d109      	bne.n	8008394 <__libc_init_array+0x24>
 8008380:	f002 fee0 	bl	800b144 <_init>
 8008384:	2600      	movs	r6, #0
 8008386:	4d0a      	ldr	r5, [pc, #40]	; (80083b0 <__libc_init_array+0x40>)
 8008388:	4c0a      	ldr	r4, [pc, #40]	; (80083b4 <__libc_init_array+0x44>)
 800838a:	1b64      	subs	r4, r4, r5
 800838c:	10a4      	asrs	r4, r4, #2
 800838e:	42a6      	cmp	r6, r4
 8008390:	d105      	bne.n	800839e <__libc_init_array+0x2e>
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	f855 3b04 	ldr.w	r3, [r5], #4
 8008398:	4798      	blx	r3
 800839a:	3601      	adds	r6, #1
 800839c:	e7ee      	b.n	800837c <__libc_init_array+0xc>
 800839e:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a2:	4798      	blx	r3
 80083a4:	3601      	adds	r6, #1
 80083a6:	e7f2      	b.n	800838e <__libc_init_array+0x1e>
 80083a8:	0800b828 	.word	0x0800b828
 80083ac:	0800b828 	.word	0x0800b828
 80083b0:	0800b828 	.word	0x0800b828
 80083b4:	0800b82c 	.word	0x0800b82c

080083b8 <__retarget_lock_acquire_recursive>:
 80083b8:	4770      	bx	lr

080083ba <__retarget_lock_release_recursive>:
 80083ba:	4770      	bx	lr

080083bc <strcpy>:
 80083bc:	4603      	mov	r3, r0
 80083be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083c2:	f803 2b01 	strb.w	r2, [r3], #1
 80083c6:	2a00      	cmp	r2, #0
 80083c8:	d1f9      	bne.n	80083be <strcpy+0x2>
 80083ca:	4770      	bx	lr

080083cc <memchr>:
 80083cc:	4603      	mov	r3, r0
 80083ce:	b510      	push	{r4, lr}
 80083d0:	b2c9      	uxtb	r1, r1
 80083d2:	4402      	add	r2, r0
 80083d4:	4293      	cmp	r3, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	d101      	bne.n	80083de <memchr+0x12>
 80083da:	2000      	movs	r0, #0
 80083dc:	e003      	b.n	80083e6 <memchr+0x1a>
 80083de:	7804      	ldrb	r4, [r0, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	428c      	cmp	r4, r1
 80083e4:	d1f6      	bne.n	80083d4 <memchr+0x8>
 80083e6:	bd10      	pop	{r4, pc}

080083e8 <memcpy>:
 80083e8:	440a      	add	r2, r1
 80083ea:	4291      	cmp	r1, r2
 80083ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80083f0:	d100      	bne.n	80083f4 <memcpy+0xc>
 80083f2:	4770      	bx	lr
 80083f4:	b510      	push	{r4, lr}
 80083f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fa:	4291      	cmp	r1, r2
 80083fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008400:	d1f9      	bne.n	80083f6 <memcpy+0xe>
 8008402:	bd10      	pop	{r4, pc}

08008404 <nan>:
 8008404:	2000      	movs	r0, #0
 8008406:	4901      	ldr	r1, [pc, #4]	; (800840c <nan+0x8>)
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	7ff80000 	.word	0x7ff80000

08008410 <quorem>:
 8008410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	6903      	ldr	r3, [r0, #16]
 8008416:	690c      	ldr	r4, [r1, #16]
 8008418:	4607      	mov	r7, r0
 800841a:	42a3      	cmp	r3, r4
 800841c:	db7f      	blt.n	800851e <quorem+0x10e>
 800841e:	3c01      	subs	r4, #1
 8008420:	f100 0514 	add.w	r5, r0, #20
 8008424:	f101 0814 	add.w	r8, r1, #20
 8008428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800842c:	9301      	str	r3, [sp, #4]
 800842e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008436:	3301      	adds	r3, #1
 8008438:	429a      	cmp	r2, r3
 800843a:	fbb2 f6f3 	udiv	r6, r2, r3
 800843e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008442:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008446:	d331      	bcc.n	80084ac <quorem+0x9c>
 8008448:	f04f 0e00 	mov.w	lr, #0
 800844c:	4640      	mov	r0, r8
 800844e:	46ac      	mov	ip, r5
 8008450:	46f2      	mov	sl, lr
 8008452:	f850 2b04 	ldr.w	r2, [r0], #4
 8008456:	b293      	uxth	r3, r2
 8008458:	fb06 e303 	mla	r3, r6, r3, lr
 800845c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008460:	0c1a      	lsrs	r2, r3, #16
 8008462:	b29b      	uxth	r3, r3
 8008464:	fb06 220e 	mla	r2, r6, lr, r2
 8008468:	ebaa 0303 	sub.w	r3, sl, r3
 800846c:	f8dc a000 	ldr.w	sl, [ip]
 8008470:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008474:	fa1f fa8a 	uxth.w	sl, sl
 8008478:	4453      	add	r3, sl
 800847a:	f8dc a000 	ldr.w	sl, [ip]
 800847e:	b292      	uxth	r2, r2
 8008480:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008488:	b29b      	uxth	r3, r3
 800848a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800848e:	4581      	cmp	r9, r0
 8008490:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008494:	f84c 3b04 	str.w	r3, [ip], #4
 8008498:	d2db      	bcs.n	8008452 <quorem+0x42>
 800849a:	f855 300b 	ldr.w	r3, [r5, fp]
 800849e:	b92b      	cbnz	r3, 80084ac <quorem+0x9c>
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	3b04      	subs	r3, #4
 80084a4:	429d      	cmp	r5, r3
 80084a6:	461a      	mov	r2, r3
 80084a8:	d32d      	bcc.n	8008506 <quorem+0xf6>
 80084aa:	613c      	str	r4, [r7, #16]
 80084ac:	4638      	mov	r0, r7
 80084ae:	f001 fd4b 	bl	8009f48 <__mcmp>
 80084b2:	2800      	cmp	r0, #0
 80084b4:	db23      	blt.n	80084fe <quorem+0xee>
 80084b6:	4629      	mov	r1, r5
 80084b8:	2000      	movs	r0, #0
 80084ba:	3601      	adds	r6, #1
 80084bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80084c0:	f8d1 c000 	ldr.w	ip, [r1]
 80084c4:	b293      	uxth	r3, r2
 80084c6:	1ac3      	subs	r3, r0, r3
 80084c8:	0c12      	lsrs	r2, r2, #16
 80084ca:	fa1f f08c 	uxth.w	r0, ip
 80084ce:	4403      	add	r3, r0
 80084d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80084d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084d8:	b29b      	uxth	r3, r3
 80084da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084de:	45c1      	cmp	r9, r8
 80084e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084e4:	f841 3b04 	str.w	r3, [r1], #4
 80084e8:	d2e8      	bcs.n	80084bc <quorem+0xac>
 80084ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084f2:	b922      	cbnz	r2, 80084fe <quorem+0xee>
 80084f4:	3b04      	subs	r3, #4
 80084f6:	429d      	cmp	r5, r3
 80084f8:	461a      	mov	r2, r3
 80084fa:	d30a      	bcc.n	8008512 <quorem+0x102>
 80084fc:	613c      	str	r4, [r7, #16]
 80084fe:	4630      	mov	r0, r6
 8008500:	b003      	add	sp, #12
 8008502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008506:	6812      	ldr	r2, [r2, #0]
 8008508:	3b04      	subs	r3, #4
 800850a:	2a00      	cmp	r2, #0
 800850c:	d1cd      	bne.n	80084aa <quorem+0x9a>
 800850e:	3c01      	subs	r4, #1
 8008510:	e7c8      	b.n	80084a4 <quorem+0x94>
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	3b04      	subs	r3, #4
 8008516:	2a00      	cmp	r2, #0
 8008518:	d1f0      	bne.n	80084fc <quorem+0xec>
 800851a:	3c01      	subs	r4, #1
 800851c:	e7eb      	b.n	80084f6 <quorem+0xe6>
 800851e:	2000      	movs	r0, #0
 8008520:	e7ee      	b.n	8008500 <quorem+0xf0>
 8008522:	0000      	movs	r0, r0
 8008524:	0000      	movs	r0, r0
	...

08008528 <_dtoa_r>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	4616      	mov	r6, r2
 800852e:	461f      	mov	r7, r3
 8008530:	69c4      	ldr	r4, [r0, #28]
 8008532:	b099      	sub	sp, #100	; 0x64
 8008534:	4605      	mov	r5, r0
 8008536:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800853a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800853e:	b974      	cbnz	r4, 800855e <_dtoa_r+0x36>
 8008540:	2010      	movs	r0, #16
 8008542:	f001 f977 	bl	8009834 <malloc>
 8008546:	4602      	mov	r2, r0
 8008548:	61e8      	str	r0, [r5, #28]
 800854a:	b920      	cbnz	r0, 8008556 <_dtoa_r+0x2e>
 800854c:	21ef      	movs	r1, #239	; 0xef
 800854e:	4bac      	ldr	r3, [pc, #688]	; (8008800 <_dtoa_r+0x2d8>)
 8008550:	48ac      	ldr	r0, [pc, #688]	; (8008804 <_dtoa_r+0x2dc>)
 8008552:	f002 f98f 	bl	800a874 <__assert_func>
 8008556:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800855a:	6004      	str	r4, [r0, #0]
 800855c:	60c4      	str	r4, [r0, #12]
 800855e:	69eb      	ldr	r3, [r5, #28]
 8008560:	6819      	ldr	r1, [r3, #0]
 8008562:	b151      	cbz	r1, 800857a <_dtoa_r+0x52>
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	2301      	movs	r3, #1
 8008568:	4093      	lsls	r3, r2
 800856a:	604a      	str	r2, [r1, #4]
 800856c:	608b      	str	r3, [r1, #8]
 800856e:	4628      	mov	r0, r5
 8008570:	f001 fa66 	bl	8009a40 <_Bfree>
 8008574:	2200      	movs	r2, #0
 8008576:	69eb      	ldr	r3, [r5, #28]
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	1e3b      	subs	r3, r7, #0
 800857c:	bfaf      	iteee	ge
 800857e:	2300      	movge	r3, #0
 8008580:	2201      	movlt	r2, #1
 8008582:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008586:	9305      	strlt	r3, [sp, #20]
 8008588:	bfa8      	it	ge
 800858a:	f8c8 3000 	strge.w	r3, [r8]
 800858e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008592:	4b9d      	ldr	r3, [pc, #628]	; (8008808 <_dtoa_r+0x2e0>)
 8008594:	bfb8      	it	lt
 8008596:	f8c8 2000 	strlt.w	r2, [r8]
 800859a:	ea33 0309 	bics.w	r3, r3, r9
 800859e:	d119      	bne.n	80085d4 <_dtoa_r+0xac>
 80085a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80085a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085a6:	6013      	str	r3, [r2, #0]
 80085a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085ac:	4333      	orrs	r3, r6
 80085ae:	f000 8589 	beq.w	80090c4 <_dtoa_r+0xb9c>
 80085b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085b4:	b953      	cbnz	r3, 80085cc <_dtoa_r+0xa4>
 80085b6:	4b95      	ldr	r3, [pc, #596]	; (800880c <_dtoa_r+0x2e4>)
 80085b8:	e023      	b.n	8008602 <_dtoa_r+0xda>
 80085ba:	4b95      	ldr	r3, [pc, #596]	; (8008810 <_dtoa_r+0x2e8>)
 80085bc:	9303      	str	r3, [sp, #12]
 80085be:	3308      	adds	r3, #8
 80085c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	9803      	ldr	r0, [sp, #12]
 80085c6:	b019      	add	sp, #100	; 0x64
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	4b8f      	ldr	r3, [pc, #572]	; (800880c <_dtoa_r+0x2e4>)
 80085ce:	9303      	str	r3, [sp, #12]
 80085d0:	3303      	adds	r3, #3
 80085d2:	e7f5      	b.n	80085c0 <_dtoa_r+0x98>
 80085d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80085dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085e0:	2200      	movs	r2, #0
 80085e2:	2300      	movs	r3, #0
 80085e4:	f7f8 f9ea 	bl	80009bc <__aeabi_dcmpeq>
 80085e8:	4680      	mov	r8, r0
 80085ea:	b160      	cbz	r0, 8008606 <_dtoa_r+0xde>
 80085ec:	2301      	movs	r3, #1
 80085ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 8562 	beq.w	80090be <_dtoa_r+0xb96>
 80085fa:	4b86      	ldr	r3, [pc, #536]	; (8008814 <_dtoa_r+0x2ec>)
 80085fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80085fe:	6013      	str	r3, [r2, #0]
 8008600:	3b01      	subs	r3, #1
 8008602:	9303      	str	r3, [sp, #12]
 8008604:	e7de      	b.n	80085c4 <_dtoa_r+0x9c>
 8008606:	ab16      	add	r3, sp, #88	; 0x58
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	ab17      	add	r3, sp, #92	; 0x5c
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	4628      	mov	r0, r5
 8008610:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008614:	f001 fda8 	bl	800a168 <__d2b>
 8008618:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800861c:	4682      	mov	sl, r0
 800861e:	2c00      	cmp	r4, #0
 8008620:	d07e      	beq.n	8008720 <_dtoa_r+0x1f8>
 8008622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008628:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800862c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008630:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008634:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008638:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800863c:	4619      	mov	r1, r3
 800863e:	2200      	movs	r2, #0
 8008640:	4b75      	ldr	r3, [pc, #468]	; (8008818 <_dtoa_r+0x2f0>)
 8008642:	f7f7 fd9b 	bl	800017c <__aeabi_dsub>
 8008646:	a368      	add	r3, pc, #416	; (adr r3, 80087e8 <_dtoa_r+0x2c0>)
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	f7f7 ff4e 	bl	80004ec <__aeabi_dmul>
 8008650:	a367      	add	r3, pc, #412	; (adr r3, 80087f0 <_dtoa_r+0x2c8>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	f7f7 fd93 	bl	8000180 <__adddf3>
 800865a:	4606      	mov	r6, r0
 800865c:	4620      	mov	r0, r4
 800865e:	460f      	mov	r7, r1
 8008660:	f7f7 feda 	bl	8000418 <__aeabi_i2d>
 8008664:	a364      	add	r3, pc, #400	; (adr r3, 80087f8 <_dtoa_r+0x2d0>)
 8008666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800866a:	f7f7 ff3f 	bl	80004ec <__aeabi_dmul>
 800866e:	4602      	mov	r2, r0
 8008670:	460b      	mov	r3, r1
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f7 fd83 	bl	8000180 <__adddf3>
 800867a:	4606      	mov	r6, r0
 800867c:	460f      	mov	r7, r1
 800867e:	f7f8 f9e5 	bl	8000a4c <__aeabi_d2iz>
 8008682:	2200      	movs	r2, #0
 8008684:	4683      	mov	fp, r0
 8008686:	2300      	movs	r3, #0
 8008688:	4630      	mov	r0, r6
 800868a:	4639      	mov	r1, r7
 800868c:	f7f8 f9a0 	bl	80009d0 <__aeabi_dcmplt>
 8008690:	b148      	cbz	r0, 80086a6 <_dtoa_r+0x17e>
 8008692:	4658      	mov	r0, fp
 8008694:	f7f7 fec0 	bl	8000418 <__aeabi_i2d>
 8008698:	4632      	mov	r2, r6
 800869a:	463b      	mov	r3, r7
 800869c:	f7f8 f98e 	bl	80009bc <__aeabi_dcmpeq>
 80086a0:	b908      	cbnz	r0, 80086a6 <_dtoa_r+0x17e>
 80086a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086a6:	f1bb 0f16 	cmp.w	fp, #22
 80086aa:	d857      	bhi.n	800875c <_dtoa_r+0x234>
 80086ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086b0:	4b5a      	ldr	r3, [pc, #360]	; (800881c <_dtoa_r+0x2f4>)
 80086b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	f7f8 f989 	bl	80009d0 <__aeabi_dcmplt>
 80086be:	2800      	cmp	r0, #0
 80086c0:	d04e      	beq.n	8008760 <_dtoa_r+0x238>
 80086c2:	2300      	movs	r3, #0
 80086c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80086ca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086cc:	1b1b      	subs	r3, r3, r4
 80086ce:	1e5a      	subs	r2, r3, #1
 80086d0:	bf46      	itte	mi
 80086d2:	f1c3 0901 	rsbmi	r9, r3, #1
 80086d6:	2300      	movmi	r3, #0
 80086d8:	f04f 0900 	movpl.w	r9, #0
 80086dc:	9209      	str	r2, [sp, #36]	; 0x24
 80086de:	bf48      	it	mi
 80086e0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80086e2:	f1bb 0f00 	cmp.w	fp, #0
 80086e6:	db3d      	blt.n	8008764 <_dtoa_r+0x23c>
 80086e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ea:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80086ee:	445b      	add	r3, fp
 80086f0:	9309      	str	r3, [sp, #36]	; 0x24
 80086f2:	2300      	movs	r3, #0
 80086f4:	930a      	str	r3, [sp, #40]	; 0x28
 80086f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086f8:	2b09      	cmp	r3, #9
 80086fa:	d867      	bhi.n	80087cc <_dtoa_r+0x2a4>
 80086fc:	2b05      	cmp	r3, #5
 80086fe:	bfc4      	itt	gt
 8008700:	3b04      	subgt	r3, #4
 8008702:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008706:	bfc8      	it	gt
 8008708:	2400      	movgt	r4, #0
 800870a:	f1a3 0302 	sub.w	r3, r3, #2
 800870e:	bfd8      	it	le
 8008710:	2401      	movle	r4, #1
 8008712:	2b03      	cmp	r3, #3
 8008714:	f200 8086 	bhi.w	8008824 <_dtoa_r+0x2fc>
 8008718:	e8df f003 	tbb	[pc, r3]
 800871c:	5637392c 	.word	0x5637392c
 8008720:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008724:	441c      	add	r4, r3
 8008726:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800872a:	2b20      	cmp	r3, #32
 800872c:	bfc1      	itttt	gt
 800872e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008732:	fa09 f903 	lslgt.w	r9, r9, r3
 8008736:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800873a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800873e:	bfd6      	itet	le
 8008740:	f1c3 0320 	rsble	r3, r3, #32
 8008744:	ea49 0003 	orrgt.w	r0, r9, r3
 8008748:	fa06 f003 	lslle.w	r0, r6, r3
 800874c:	f7f7 fe54 	bl	80003f8 <__aeabi_ui2d>
 8008750:	2201      	movs	r2, #1
 8008752:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008756:	3c01      	subs	r4, #1
 8008758:	9213      	str	r2, [sp, #76]	; 0x4c
 800875a:	e76f      	b.n	800863c <_dtoa_r+0x114>
 800875c:	2301      	movs	r3, #1
 800875e:	e7b3      	b.n	80086c8 <_dtoa_r+0x1a0>
 8008760:	900f      	str	r0, [sp, #60]	; 0x3c
 8008762:	e7b2      	b.n	80086ca <_dtoa_r+0x1a2>
 8008764:	f1cb 0300 	rsb	r3, fp, #0
 8008768:	930a      	str	r3, [sp, #40]	; 0x28
 800876a:	2300      	movs	r3, #0
 800876c:	eba9 090b 	sub.w	r9, r9, fp
 8008770:	930e      	str	r3, [sp, #56]	; 0x38
 8008772:	e7c0      	b.n	80086f6 <_dtoa_r+0x1ce>
 8008774:	2300      	movs	r3, #0
 8008776:	930b      	str	r3, [sp, #44]	; 0x2c
 8008778:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800877a:	2b00      	cmp	r3, #0
 800877c:	dc55      	bgt.n	800882a <_dtoa_r+0x302>
 800877e:	2301      	movs	r3, #1
 8008780:	461a      	mov	r2, r3
 8008782:	9306      	str	r3, [sp, #24]
 8008784:	9308      	str	r3, [sp, #32]
 8008786:	9223      	str	r2, [sp, #140]	; 0x8c
 8008788:	e00b      	b.n	80087a2 <_dtoa_r+0x27a>
 800878a:	2301      	movs	r3, #1
 800878c:	e7f3      	b.n	8008776 <_dtoa_r+0x24e>
 800878e:	2300      	movs	r3, #0
 8008790:	930b      	str	r3, [sp, #44]	; 0x2c
 8008792:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008794:	445b      	add	r3, fp
 8008796:	9306      	str	r3, [sp, #24]
 8008798:	3301      	adds	r3, #1
 800879a:	2b01      	cmp	r3, #1
 800879c:	9308      	str	r3, [sp, #32]
 800879e:	bfb8      	it	lt
 80087a0:	2301      	movlt	r3, #1
 80087a2:	2100      	movs	r1, #0
 80087a4:	2204      	movs	r2, #4
 80087a6:	69e8      	ldr	r0, [r5, #28]
 80087a8:	f102 0614 	add.w	r6, r2, #20
 80087ac:	429e      	cmp	r6, r3
 80087ae:	d940      	bls.n	8008832 <_dtoa_r+0x30a>
 80087b0:	6041      	str	r1, [r0, #4]
 80087b2:	4628      	mov	r0, r5
 80087b4:	f001 f904 	bl	80099c0 <_Balloc>
 80087b8:	9003      	str	r0, [sp, #12]
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d13c      	bne.n	8008838 <_dtoa_r+0x310>
 80087be:	4602      	mov	r2, r0
 80087c0:	f240 11af 	movw	r1, #431	; 0x1af
 80087c4:	4b16      	ldr	r3, [pc, #88]	; (8008820 <_dtoa_r+0x2f8>)
 80087c6:	e6c3      	b.n	8008550 <_dtoa_r+0x28>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e7e1      	b.n	8008790 <_dtoa_r+0x268>
 80087cc:	2401      	movs	r4, #1
 80087ce:	2300      	movs	r3, #0
 80087d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80087d2:	9322      	str	r3, [sp, #136]	; 0x88
 80087d4:	f04f 33ff 	mov.w	r3, #4294967295
 80087d8:	2200      	movs	r2, #0
 80087da:	9306      	str	r3, [sp, #24]
 80087dc:	9308      	str	r3, [sp, #32]
 80087de:	2312      	movs	r3, #18
 80087e0:	e7d1      	b.n	8008786 <_dtoa_r+0x25e>
 80087e2:	bf00      	nop
 80087e4:	f3af 8000 	nop.w
 80087e8:	636f4361 	.word	0x636f4361
 80087ec:	3fd287a7 	.word	0x3fd287a7
 80087f0:	8b60c8b3 	.word	0x8b60c8b3
 80087f4:	3fc68a28 	.word	0x3fc68a28
 80087f8:	509f79fb 	.word	0x509f79fb
 80087fc:	3fd34413 	.word	0x3fd34413
 8008800:	0800b528 	.word	0x0800b528
 8008804:	0800b53f 	.word	0x0800b53f
 8008808:	7ff00000 	.word	0x7ff00000
 800880c:	0800b524 	.word	0x0800b524
 8008810:	0800b51b 	.word	0x0800b51b
 8008814:	0800b2a2 	.word	0x0800b2a2
 8008818:	3ff80000 	.word	0x3ff80000
 800881c:	0800b690 	.word	0x0800b690
 8008820:	0800b597 	.word	0x0800b597
 8008824:	2301      	movs	r3, #1
 8008826:	930b      	str	r3, [sp, #44]	; 0x2c
 8008828:	e7d4      	b.n	80087d4 <_dtoa_r+0x2ac>
 800882a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800882c:	9306      	str	r3, [sp, #24]
 800882e:	9308      	str	r3, [sp, #32]
 8008830:	e7b7      	b.n	80087a2 <_dtoa_r+0x27a>
 8008832:	3101      	adds	r1, #1
 8008834:	0052      	lsls	r2, r2, #1
 8008836:	e7b7      	b.n	80087a8 <_dtoa_r+0x280>
 8008838:	69eb      	ldr	r3, [r5, #28]
 800883a:	9a03      	ldr	r2, [sp, #12]
 800883c:	601a      	str	r2, [r3, #0]
 800883e:	9b08      	ldr	r3, [sp, #32]
 8008840:	2b0e      	cmp	r3, #14
 8008842:	f200 80a8 	bhi.w	8008996 <_dtoa_r+0x46e>
 8008846:	2c00      	cmp	r4, #0
 8008848:	f000 80a5 	beq.w	8008996 <_dtoa_r+0x46e>
 800884c:	f1bb 0f00 	cmp.w	fp, #0
 8008850:	dd34      	ble.n	80088bc <_dtoa_r+0x394>
 8008852:	4b9a      	ldr	r3, [pc, #616]	; (8008abc <_dtoa_r+0x594>)
 8008854:	f00b 020f 	and.w	r2, fp, #15
 8008858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800885c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008860:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008864:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008868:	ea4f 142b 	mov.w	r4, fp, asr #4
 800886c:	d016      	beq.n	800889c <_dtoa_r+0x374>
 800886e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008872:	4b93      	ldr	r3, [pc, #588]	; (8008ac0 <_dtoa_r+0x598>)
 8008874:	2703      	movs	r7, #3
 8008876:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800887a:	f7f7 ff61 	bl	8000740 <__aeabi_ddiv>
 800887e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008882:	f004 040f 	and.w	r4, r4, #15
 8008886:	4e8e      	ldr	r6, [pc, #568]	; (8008ac0 <_dtoa_r+0x598>)
 8008888:	b954      	cbnz	r4, 80088a0 <_dtoa_r+0x378>
 800888a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800888e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008892:	f7f7 ff55 	bl	8000740 <__aeabi_ddiv>
 8008896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800889a:	e029      	b.n	80088f0 <_dtoa_r+0x3c8>
 800889c:	2702      	movs	r7, #2
 800889e:	e7f2      	b.n	8008886 <_dtoa_r+0x35e>
 80088a0:	07e1      	lsls	r1, r4, #31
 80088a2:	d508      	bpl.n	80088b6 <_dtoa_r+0x38e>
 80088a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80088a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088ac:	f7f7 fe1e 	bl	80004ec <__aeabi_dmul>
 80088b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088b4:	3701      	adds	r7, #1
 80088b6:	1064      	asrs	r4, r4, #1
 80088b8:	3608      	adds	r6, #8
 80088ba:	e7e5      	b.n	8008888 <_dtoa_r+0x360>
 80088bc:	f000 80a5 	beq.w	8008a0a <_dtoa_r+0x4e2>
 80088c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80088c4:	f1cb 0400 	rsb	r4, fp, #0
 80088c8:	4b7c      	ldr	r3, [pc, #496]	; (8008abc <_dtoa_r+0x594>)
 80088ca:	f004 020f 	and.w	r2, r4, #15
 80088ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fe09 	bl	80004ec <__aeabi_dmul>
 80088da:	2702      	movs	r7, #2
 80088dc:	2300      	movs	r3, #0
 80088de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e2:	4e77      	ldr	r6, [pc, #476]	; (8008ac0 <_dtoa_r+0x598>)
 80088e4:	1124      	asrs	r4, r4, #4
 80088e6:	2c00      	cmp	r4, #0
 80088e8:	f040 8084 	bne.w	80089f4 <_dtoa_r+0x4cc>
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1d2      	bne.n	8008896 <_dtoa_r+0x36e>
 80088f0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80088f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80088f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8087 	beq.w	8008a0e <_dtoa_r+0x4e6>
 8008900:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008904:	2200      	movs	r2, #0
 8008906:	4b6f      	ldr	r3, [pc, #444]	; (8008ac4 <_dtoa_r+0x59c>)
 8008908:	f7f8 f862 	bl	80009d0 <__aeabi_dcmplt>
 800890c:	2800      	cmp	r0, #0
 800890e:	d07e      	beq.n	8008a0e <_dtoa_r+0x4e6>
 8008910:	9b08      	ldr	r3, [sp, #32]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d07b      	beq.n	8008a0e <_dtoa_r+0x4e6>
 8008916:	9b06      	ldr	r3, [sp, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	dd38      	ble.n	800898e <_dtoa_r+0x466>
 800891c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008920:	2200      	movs	r2, #0
 8008922:	4b69      	ldr	r3, [pc, #420]	; (8008ac8 <_dtoa_r+0x5a0>)
 8008924:	f7f7 fde2 	bl	80004ec <__aeabi_dmul>
 8008928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800892c:	9c06      	ldr	r4, [sp, #24]
 800892e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8008932:	3701      	adds	r7, #1
 8008934:	4638      	mov	r0, r7
 8008936:	f7f7 fd6f 	bl	8000418 <__aeabi_i2d>
 800893a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800893e:	f7f7 fdd5 	bl	80004ec <__aeabi_dmul>
 8008942:	2200      	movs	r2, #0
 8008944:	4b61      	ldr	r3, [pc, #388]	; (8008acc <_dtoa_r+0x5a4>)
 8008946:	f7f7 fc1b 	bl	8000180 <__adddf3>
 800894a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800894e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008952:	9611      	str	r6, [sp, #68]	; 0x44
 8008954:	2c00      	cmp	r4, #0
 8008956:	d15d      	bne.n	8008a14 <_dtoa_r+0x4ec>
 8008958:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800895c:	2200      	movs	r2, #0
 800895e:	4b5c      	ldr	r3, [pc, #368]	; (8008ad0 <_dtoa_r+0x5a8>)
 8008960:	f7f7 fc0c 	bl	800017c <__aeabi_dsub>
 8008964:	4602      	mov	r2, r0
 8008966:	460b      	mov	r3, r1
 8008968:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800896c:	4633      	mov	r3, r6
 800896e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008970:	f7f8 f84c 	bl	8000a0c <__aeabi_dcmpgt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f040 8295 	bne.w	8008ea4 <_dtoa_r+0x97c>
 800897a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800897e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008980:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008984:	f7f8 f824 	bl	80009d0 <__aeabi_dcmplt>
 8008988:	2800      	cmp	r0, #0
 800898a:	f040 8289 	bne.w	8008ea0 <_dtoa_r+0x978>
 800898e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008992:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008996:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008998:	2b00      	cmp	r3, #0
 800899a:	f2c0 8151 	blt.w	8008c40 <_dtoa_r+0x718>
 800899e:	f1bb 0f0e 	cmp.w	fp, #14
 80089a2:	f300 814d 	bgt.w	8008c40 <_dtoa_r+0x718>
 80089a6:	4b45      	ldr	r3, [pc, #276]	; (8008abc <_dtoa_r+0x594>)
 80089a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80089ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80089b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80089b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f280 80da 	bge.w	8008b70 <_dtoa_r+0x648>
 80089bc:	9b08      	ldr	r3, [sp, #32]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f300 80d6 	bgt.w	8008b70 <_dtoa_r+0x648>
 80089c4:	f040 826b 	bne.w	8008e9e <_dtoa_r+0x976>
 80089c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089cc:	2200      	movs	r2, #0
 80089ce:	4b40      	ldr	r3, [pc, #256]	; (8008ad0 <_dtoa_r+0x5a8>)
 80089d0:	f7f7 fd8c 	bl	80004ec <__aeabi_dmul>
 80089d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d8:	f7f8 f80e 	bl	80009f8 <__aeabi_dcmpge>
 80089dc:	9c08      	ldr	r4, [sp, #32]
 80089de:	4626      	mov	r6, r4
 80089e0:	2800      	cmp	r0, #0
 80089e2:	f040 8241 	bne.w	8008e68 <_dtoa_r+0x940>
 80089e6:	2331      	movs	r3, #49	; 0x31
 80089e8:	9f03      	ldr	r7, [sp, #12]
 80089ea:	f10b 0b01 	add.w	fp, fp, #1
 80089ee:	f807 3b01 	strb.w	r3, [r7], #1
 80089f2:	e23d      	b.n	8008e70 <_dtoa_r+0x948>
 80089f4:	07e2      	lsls	r2, r4, #31
 80089f6:	d505      	bpl.n	8008a04 <_dtoa_r+0x4dc>
 80089f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089fc:	f7f7 fd76 	bl	80004ec <__aeabi_dmul>
 8008a00:	2301      	movs	r3, #1
 8008a02:	3701      	adds	r7, #1
 8008a04:	1064      	asrs	r4, r4, #1
 8008a06:	3608      	adds	r6, #8
 8008a08:	e76d      	b.n	80088e6 <_dtoa_r+0x3be>
 8008a0a:	2702      	movs	r7, #2
 8008a0c:	e770      	b.n	80088f0 <_dtoa_r+0x3c8>
 8008a0e:	46d8      	mov	r8, fp
 8008a10:	9c08      	ldr	r4, [sp, #32]
 8008a12:	e78f      	b.n	8008934 <_dtoa_r+0x40c>
 8008a14:	9903      	ldr	r1, [sp, #12]
 8008a16:	4b29      	ldr	r3, [pc, #164]	; (8008abc <_dtoa_r+0x594>)
 8008a18:	4421      	add	r1, r4
 8008a1a:	9112      	str	r1, [sp, #72]	; 0x48
 8008a1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a22:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008a26:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	d054      	beq.n	8008ad8 <_dtoa_r+0x5b0>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	4928      	ldr	r1, [pc, #160]	; (8008ad4 <_dtoa_r+0x5ac>)
 8008a32:	f7f7 fe85 	bl	8000740 <__aeabi_ddiv>
 8008a36:	463b      	mov	r3, r7
 8008a38:	4632      	mov	r2, r6
 8008a3a:	f7f7 fb9f 	bl	800017c <__aeabi_dsub>
 8008a3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a42:	9f03      	ldr	r7, [sp, #12]
 8008a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a48:	f7f8 f800 	bl	8000a4c <__aeabi_d2iz>
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	f7f7 fce3 	bl	8000418 <__aeabi_i2d>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a5a:	f7f7 fb8f 	bl	800017c <__aeabi_dsub>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	3430      	adds	r4, #48	; 0x30
 8008a64:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a6c:	f807 4b01 	strb.w	r4, [r7], #1
 8008a70:	f7f7 ffae 	bl	80009d0 <__aeabi_dcmplt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	d173      	bne.n	8008b60 <_dtoa_r+0x638>
 8008a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	4911      	ldr	r1, [pc, #68]	; (8008ac4 <_dtoa_r+0x59c>)
 8008a80:	f7f7 fb7c 	bl	800017c <__aeabi_dsub>
 8008a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a88:	f7f7 ffa2 	bl	80009d0 <__aeabi_dcmplt>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f040 80b6 	bne.w	8008bfe <_dtoa_r+0x6d6>
 8008a92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a94:	429f      	cmp	r7, r3
 8008a96:	f43f af7a 	beq.w	800898e <_dtoa_r+0x466>
 8008a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <_dtoa_r+0x5a0>)
 8008aa2:	f7f7 fd23 	bl	80004ec <__aeabi_dmul>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008aac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ab0:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <_dtoa_r+0x5a0>)
 8008ab2:	f7f7 fd1b 	bl	80004ec <__aeabi_dmul>
 8008ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008aba:	e7c3      	b.n	8008a44 <_dtoa_r+0x51c>
 8008abc:	0800b690 	.word	0x0800b690
 8008ac0:	0800b668 	.word	0x0800b668
 8008ac4:	3ff00000 	.word	0x3ff00000
 8008ac8:	40240000 	.word	0x40240000
 8008acc:	401c0000 	.word	0x401c0000
 8008ad0:	40140000 	.word	0x40140000
 8008ad4:	3fe00000 	.word	0x3fe00000
 8008ad8:	4630      	mov	r0, r6
 8008ada:	4639      	mov	r1, r7
 8008adc:	f7f7 fd06 	bl	80004ec <__aeabi_dmul>
 8008ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ae2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ae6:	9c03      	ldr	r4, [sp, #12]
 8008ae8:	9314      	str	r3, [sp, #80]	; 0x50
 8008aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008aee:	f7f7 ffad 	bl	8000a4c <__aeabi_d2iz>
 8008af2:	9015      	str	r0, [sp, #84]	; 0x54
 8008af4:	f7f7 fc90 	bl	8000418 <__aeabi_i2d>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b00:	f7f7 fb3c 	bl	800017c <__aeabi_dsub>
 8008b04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b06:	4606      	mov	r6, r0
 8008b08:	3330      	adds	r3, #48	; 0x30
 8008b0a:	f804 3b01 	strb.w	r3, [r4], #1
 8008b0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b10:	460f      	mov	r7, r1
 8008b12:	429c      	cmp	r4, r3
 8008b14:	f04f 0200 	mov.w	r2, #0
 8008b18:	d124      	bne.n	8008b64 <_dtoa_r+0x63c>
 8008b1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b1e:	4baf      	ldr	r3, [pc, #700]	; (8008ddc <_dtoa_r+0x8b4>)
 8008b20:	f7f7 fb2e 	bl	8000180 <__adddf3>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4630      	mov	r0, r6
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	f7f7 ff6e 	bl	8000a0c <__aeabi_dcmpgt>
 8008b30:	2800      	cmp	r0, #0
 8008b32:	d163      	bne.n	8008bfc <_dtoa_r+0x6d4>
 8008b34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b38:	2000      	movs	r0, #0
 8008b3a:	49a8      	ldr	r1, [pc, #672]	; (8008ddc <_dtoa_r+0x8b4>)
 8008b3c:	f7f7 fb1e 	bl	800017c <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	4630      	mov	r0, r6
 8008b46:	4639      	mov	r1, r7
 8008b48:	f7f7 ff42 	bl	80009d0 <__aeabi_dcmplt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f43f af1e 	beq.w	800898e <_dtoa_r+0x466>
 8008b52:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008b54:	1e7b      	subs	r3, r7, #1
 8008b56:	9314      	str	r3, [sp, #80]	; 0x50
 8008b58:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008b5c:	2b30      	cmp	r3, #48	; 0x30
 8008b5e:	d0f8      	beq.n	8008b52 <_dtoa_r+0x62a>
 8008b60:	46c3      	mov	fp, r8
 8008b62:	e03b      	b.n	8008bdc <_dtoa_r+0x6b4>
 8008b64:	4b9e      	ldr	r3, [pc, #632]	; (8008de0 <_dtoa_r+0x8b8>)
 8008b66:	f7f7 fcc1 	bl	80004ec <__aeabi_dmul>
 8008b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b6e:	e7bc      	b.n	8008aea <_dtoa_r+0x5c2>
 8008b70:	9f03      	ldr	r7, [sp, #12]
 8008b72:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fddf 	bl	8000740 <__aeabi_ddiv>
 8008b82:	f7f7 ff63 	bl	8000a4c <__aeabi_d2iz>
 8008b86:	4604      	mov	r4, r0
 8008b88:	f7f7 fc46 	bl	8000418 <__aeabi_i2d>
 8008b8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b90:	f7f7 fcac 	bl	80004ec <__aeabi_dmul>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4640      	mov	r0, r8
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	f7f7 faee 	bl	800017c <__aeabi_dsub>
 8008ba0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ba4:	f807 6b01 	strb.w	r6, [r7], #1
 8008ba8:	9e03      	ldr	r6, [sp, #12]
 8008baa:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008bae:	1bbe      	subs	r6, r7, r6
 8008bb0:	45b4      	cmp	ip, r6
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	d136      	bne.n	8008c26 <_dtoa_r+0x6fe>
 8008bb8:	f7f7 fae2 	bl	8000180 <__adddf3>
 8008bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	4689      	mov	r9, r1
 8008bc4:	f7f7 ff22 	bl	8000a0c <__aeabi_dcmpgt>
 8008bc8:	bb58      	cbnz	r0, 8008c22 <_dtoa_r+0x6fa>
 8008bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008bce:	4640      	mov	r0, r8
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	f7f7 fef3 	bl	80009bc <__aeabi_dcmpeq>
 8008bd6:	b108      	cbz	r0, 8008bdc <_dtoa_r+0x6b4>
 8008bd8:	07e3      	lsls	r3, r4, #31
 8008bda:	d422      	bmi.n	8008c22 <_dtoa_r+0x6fa>
 8008bdc:	4651      	mov	r1, sl
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 ff2e 	bl	8009a40 <_Bfree>
 8008be4:	2300      	movs	r3, #0
 8008be6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008be8:	703b      	strb	r3, [r7, #0]
 8008bea:	f10b 0301 	add.w	r3, fp, #1
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f43f ace6 	beq.w	80085c4 <_dtoa_r+0x9c>
 8008bf8:	601f      	str	r7, [r3, #0]
 8008bfa:	e4e3      	b.n	80085c4 <_dtoa_r+0x9c>
 8008bfc:	4627      	mov	r7, r4
 8008bfe:	463b      	mov	r3, r7
 8008c00:	461f      	mov	r7, r3
 8008c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c06:	2a39      	cmp	r2, #57	; 0x39
 8008c08:	d107      	bne.n	8008c1a <_dtoa_r+0x6f2>
 8008c0a:	9a03      	ldr	r2, [sp, #12]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d1f7      	bne.n	8008c00 <_dtoa_r+0x6d8>
 8008c10:	2230      	movs	r2, #48	; 0x30
 8008c12:	9903      	ldr	r1, [sp, #12]
 8008c14:	f108 0801 	add.w	r8, r8, #1
 8008c18:	700a      	strb	r2, [r1, #0]
 8008c1a:	781a      	ldrb	r2, [r3, #0]
 8008c1c:	3201      	adds	r2, #1
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	e79e      	b.n	8008b60 <_dtoa_r+0x638>
 8008c22:	46d8      	mov	r8, fp
 8008c24:	e7eb      	b.n	8008bfe <_dtoa_r+0x6d6>
 8008c26:	2200      	movs	r2, #0
 8008c28:	4b6d      	ldr	r3, [pc, #436]	; (8008de0 <_dtoa_r+0x8b8>)
 8008c2a:	f7f7 fc5f 	bl	80004ec <__aeabi_dmul>
 8008c2e:	2200      	movs	r2, #0
 8008c30:	2300      	movs	r3, #0
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	f7f7 fec1 	bl	80009bc <__aeabi_dcmpeq>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d09b      	beq.n	8008b76 <_dtoa_r+0x64e>
 8008c3e:	e7cd      	b.n	8008bdc <_dtoa_r+0x6b4>
 8008c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	f000 80c4 	beq.w	8008dd0 <_dtoa_r+0x8a8>
 8008c48:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008c4a:	2a01      	cmp	r2, #1
 8008c4c:	f300 80a8 	bgt.w	8008da0 <_dtoa_r+0x878>
 8008c50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	f000 80a0 	beq.w	8008d98 <_dtoa_r+0x870>
 8008c58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c5c:	464f      	mov	r7, r9
 8008c5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c62:	2101      	movs	r1, #1
 8008c64:	441a      	add	r2, r3
 8008c66:	4628      	mov	r0, r5
 8008c68:	4499      	add	r9, r3
 8008c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c6c:	f000 ffe8 	bl	8009c40 <__i2b>
 8008c70:	4606      	mov	r6, r0
 8008c72:	b15f      	cbz	r7, 8008c8c <_dtoa_r+0x764>
 8008c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	dd08      	ble.n	8008c8c <_dtoa_r+0x764>
 8008c7a:	42bb      	cmp	r3, r7
 8008c7c:	bfa8      	it	ge
 8008c7e:	463b      	movge	r3, r7
 8008c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c82:	eba9 0903 	sub.w	r9, r9, r3
 8008c86:	1aff      	subs	r7, r7, r3
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8e:	b1f3      	cbz	r3, 8008cce <_dtoa_r+0x7a6>
 8008c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 80a0 	beq.w	8008dd8 <_dtoa_r+0x8b0>
 8008c98:	2c00      	cmp	r4, #0
 8008c9a:	dd10      	ble.n	8008cbe <_dtoa_r+0x796>
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f001 f88b 	bl	8009dbc <__pow5mult>
 8008ca6:	4652      	mov	r2, sl
 8008ca8:	4601      	mov	r1, r0
 8008caa:	4606      	mov	r6, r0
 8008cac:	4628      	mov	r0, r5
 8008cae:	f000 ffdd 	bl	8009c6c <__multiply>
 8008cb2:	4680      	mov	r8, r0
 8008cb4:	4651      	mov	r1, sl
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f000 fec2 	bl	8009a40 <_Bfree>
 8008cbc:	46c2      	mov	sl, r8
 8008cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cc0:	1b1a      	subs	r2, r3, r4
 8008cc2:	d004      	beq.n	8008cce <_dtoa_r+0x7a6>
 8008cc4:	4651      	mov	r1, sl
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f001 f878 	bl	8009dbc <__pow5mult>
 8008ccc:	4682      	mov	sl, r0
 8008cce:	2101      	movs	r1, #1
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 ffb5 	bl	8009c40 <__i2b>
 8008cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cd8:	4604      	mov	r4, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f340 8082 	ble.w	8008de4 <_dtoa_r+0x8bc>
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	4601      	mov	r1, r0
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	f001 f869 	bl	8009dbc <__pow5mult>
 8008cea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cec:	4604      	mov	r4, r0
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	dd7b      	ble.n	8008dea <_dtoa_r+0x8c2>
 8008cf2:	f04f 0800 	mov.w	r8, #0
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cfc:	6918      	ldr	r0, [r3, #16]
 8008cfe:	f000 ff51 	bl	8009ba4 <__hi0bits>
 8008d02:	f1c0 0020 	rsb	r0, r0, #32
 8008d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d08:	4418      	add	r0, r3
 8008d0a:	f010 001f 	ands.w	r0, r0, #31
 8008d0e:	f000 8092 	beq.w	8008e36 <_dtoa_r+0x90e>
 8008d12:	f1c0 0320 	rsb	r3, r0, #32
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	f340 8085 	ble.w	8008e26 <_dtoa_r+0x8fe>
 8008d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1e:	f1c0 001c 	rsb	r0, r0, #28
 8008d22:	4403      	add	r3, r0
 8008d24:	4481      	add	r9, r0
 8008d26:	4407      	add	r7, r0
 8008d28:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2a:	f1b9 0f00 	cmp.w	r9, #0
 8008d2e:	dd05      	ble.n	8008d3c <_dtoa_r+0x814>
 8008d30:	4651      	mov	r1, sl
 8008d32:	464a      	mov	r2, r9
 8008d34:	4628      	mov	r0, r5
 8008d36:	f001 f89b 	bl	8009e70 <__lshift>
 8008d3a:	4682      	mov	sl, r0
 8008d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd05      	ble.n	8008d4e <_dtoa_r+0x826>
 8008d42:	4621      	mov	r1, r4
 8008d44:	461a      	mov	r2, r3
 8008d46:	4628      	mov	r0, r5
 8008d48:	f001 f892 	bl	8009e70 <__lshift>
 8008d4c:	4604      	mov	r4, r0
 8008d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d072      	beq.n	8008e3a <_dtoa_r+0x912>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4650      	mov	r0, sl
 8008d58:	f001 f8f6 	bl	8009f48 <__mcmp>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	da6c      	bge.n	8008e3a <_dtoa_r+0x912>
 8008d60:	2300      	movs	r3, #0
 8008d62:	4651      	mov	r1, sl
 8008d64:	220a      	movs	r2, #10
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 fe8c 	bl	8009a84 <__multadd>
 8008d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d6e:	4682      	mov	sl, r0
 8008d70:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 81ac 	beq.w	80090d2 <_dtoa_r+0xbaa>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4631      	mov	r1, r6
 8008d7e:	220a      	movs	r2, #10
 8008d80:	4628      	mov	r0, r5
 8008d82:	f000 fe7f 	bl	8009a84 <__multadd>
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	4606      	mov	r6, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f300 8093 	bgt.w	8008eb6 <_dtoa_r+0x98e>
 8008d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	dc59      	bgt.n	8008e4a <_dtoa_r+0x922>
 8008d96:	e08e      	b.n	8008eb6 <_dtoa_r+0x98e>
 8008d98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008d9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d9e:	e75d      	b.n	8008c5c <_dtoa_r+0x734>
 8008da0:	9b08      	ldr	r3, [sp, #32]
 8008da2:	1e5c      	subs	r4, r3, #1
 8008da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	bfbf      	itttt	lt
 8008daa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008dac:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8008dae:	1ae3      	sublt	r3, r4, r3
 8008db0:	18d2      	addlt	r2, r2, r3
 8008db2:	bfa8      	it	ge
 8008db4:	1b1c      	subge	r4, r3, r4
 8008db6:	9b08      	ldr	r3, [sp, #32]
 8008db8:	bfbe      	ittt	lt
 8008dba:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008dbc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8008dbe:	2400      	movlt	r4, #0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bfb5      	itete	lt
 8008dc4:	eba9 0703 	sublt.w	r7, r9, r3
 8008dc8:	464f      	movge	r7, r9
 8008dca:	2300      	movlt	r3, #0
 8008dcc:	9b08      	ldrge	r3, [sp, #32]
 8008dce:	e747      	b.n	8008c60 <_dtoa_r+0x738>
 8008dd0:	464f      	mov	r7, r9
 8008dd2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008dd4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008dd6:	e74c      	b.n	8008c72 <_dtoa_r+0x74a>
 8008dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008dda:	e773      	b.n	8008cc4 <_dtoa_r+0x79c>
 8008ddc:	3fe00000 	.word	0x3fe00000
 8008de0:	40240000 	.word	0x40240000
 8008de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	dc18      	bgt.n	8008e1c <_dtoa_r+0x8f4>
 8008dea:	9b04      	ldr	r3, [sp, #16]
 8008dec:	b9b3      	cbnz	r3, 8008e1c <_dtoa_r+0x8f4>
 8008dee:	9b05      	ldr	r3, [sp, #20]
 8008df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008df4:	b993      	cbnz	r3, 8008e1c <_dtoa_r+0x8f4>
 8008df6:	9b05      	ldr	r3, [sp, #20]
 8008df8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008dfc:	0d1b      	lsrs	r3, r3, #20
 8008dfe:	051b      	lsls	r3, r3, #20
 8008e00:	b17b      	cbz	r3, 8008e22 <_dtoa_r+0x8fa>
 8008e02:	f04f 0801 	mov.w	r8, #1
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	f109 0901 	add.w	r9, r9, #1
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f47f af6f 	bne.w	8008cf6 <_dtoa_r+0x7ce>
 8008e18:	2001      	movs	r0, #1
 8008e1a:	e774      	b.n	8008d06 <_dtoa_r+0x7de>
 8008e1c:	f04f 0800 	mov.w	r8, #0
 8008e20:	e7f6      	b.n	8008e10 <_dtoa_r+0x8e8>
 8008e22:	4698      	mov	r8, r3
 8008e24:	e7f4      	b.n	8008e10 <_dtoa_r+0x8e8>
 8008e26:	d080      	beq.n	8008d2a <_dtoa_r+0x802>
 8008e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e2a:	331c      	adds	r3, #28
 8008e2c:	441a      	add	r2, r3
 8008e2e:	4499      	add	r9, r3
 8008e30:	441f      	add	r7, r3
 8008e32:	9209      	str	r2, [sp, #36]	; 0x24
 8008e34:	e779      	b.n	8008d2a <_dtoa_r+0x802>
 8008e36:	4603      	mov	r3, r0
 8008e38:	e7f6      	b.n	8008e28 <_dtoa_r+0x900>
 8008e3a:	9b08      	ldr	r3, [sp, #32]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	dc34      	bgt.n	8008eaa <_dtoa_r+0x982>
 8008e40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	dd31      	ble.n	8008eaa <_dtoa_r+0x982>
 8008e46:	9b08      	ldr	r3, [sp, #32]
 8008e48:	9306      	str	r3, [sp, #24]
 8008e4a:	9b06      	ldr	r3, [sp, #24]
 8008e4c:	b963      	cbnz	r3, 8008e68 <_dtoa_r+0x940>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	2205      	movs	r2, #5
 8008e52:	4628      	mov	r0, r5
 8008e54:	f000 fe16 	bl	8009a84 <__multadd>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	f001 f873 	bl	8009f48 <__mcmp>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f73f adbf 	bgt.w	80089e6 <_dtoa_r+0x4be>
 8008e68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e6a:	9f03      	ldr	r7, [sp, #12]
 8008e6c:	ea6f 0b03 	mvn.w	fp, r3
 8008e70:	f04f 0800 	mov.w	r8, #0
 8008e74:	4621      	mov	r1, r4
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 fde2 	bl	8009a40 <_Bfree>
 8008e7c:	2e00      	cmp	r6, #0
 8008e7e:	f43f aead 	beq.w	8008bdc <_dtoa_r+0x6b4>
 8008e82:	f1b8 0f00 	cmp.w	r8, #0
 8008e86:	d005      	beq.n	8008e94 <_dtoa_r+0x96c>
 8008e88:	45b0      	cmp	r8, r6
 8008e8a:	d003      	beq.n	8008e94 <_dtoa_r+0x96c>
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 fdd6 	bl	8009a40 <_Bfree>
 8008e94:	4631      	mov	r1, r6
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 fdd2 	bl	8009a40 <_Bfree>
 8008e9c:	e69e      	b.n	8008bdc <_dtoa_r+0x6b4>
 8008e9e:	2400      	movs	r4, #0
 8008ea0:	4626      	mov	r6, r4
 8008ea2:	e7e1      	b.n	8008e68 <_dtoa_r+0x940>
 8008ea4:	46c3      	mov	fp, r8
 8008ea6:	4626      	mov	r6, r4
 8008ea8:	e59d      	b.n	80089e6 <_dtoa_r+0x4be>
 8008eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 80c8 	beq.w	8009042 <_dtoa_r+0xb1a>
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	9306      	str	r3, [sp, #24]
 8008eb6:	2f00      	cmp	r7, #0
 8008eb8:	dd05      	ble.n	8008ec6 <_dtoa_r+0x99e>
 8008eba:	4631      	mov	r1, r6
 8008ebc:	463a      	mov	r2, r7
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 ffd6 	bl	8009e70 <__lshift>
 8008ec4:	4606      	mov	r6, r0
 8008ec6:	f1b8 0f00 	cmp.w	r8, #0
 8008eca:	d05b      	beq.n	8008f84 <_dtoa_r+0xa5c>
 8008ecc:	4628      	mov	r0, r5
 8008ece:	6871      	ldr	r1, [r6, #4]
 8008ed0:	f000 fd76 	bl	80099c0 <_Balloc>
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	b928      	cbnz	r0, 8008ee4 <_dtoa_r+0x9bc>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008ede:	4b81      	ldr	r3, [pc, #516]	; (80090e4 <_dtoa_r+0xbbc>)
 8008ee0:	f7ff bb36 	b.w	8008550 <_dtoa_r+0x28>
 8008ee4:	6932      	ldr	r2, [r6, #16]
 8008ee6:	f106 010c 	add.w	r1, r6, #12
 8008eea:	3202      	adds	r2, #2
 8008eec:	0092      	lsls	r2, r2, #2
 8008eee:	300c      	adds	r0, #12
 8008ef0:	f7ff fa7a 	bl	80083e8 <memcpy>
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f000 ffb9 	bl	8009e70 <__lshift>
 8008efe:	46b0      	mov	r8, r6
 8008f00:	4606      	mov	r6, r0
 8008f02:	9b03      	ldr	r3, [sp, #12]
 8008f04:	9a03      	ldr	r2, [sp, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	9308      	str	r3, [sp, #32]
 8008f0a:	9b06      	ldr	r3, [sp, #24]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f10:	9b04      	ldr	r3, [sp, #16]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	930a      	str	r3, [sp, #40]	; 0x28
 8008f18:	9b08      	ldr	r3, [sp, #32]
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	4650      	mov	r0, sl
 8008f20:	9304      	str	r3, [sp, #16]
 8008f22:	f7ff fa75 	bl	8008410 <quorem>
 8008f26:	4641      	mov	r1, r8
 8008f28:	9006      	str	r0, [sp, #24]
 8008f2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f2e:	4650      	mov	r0, sl
 8008f30:	f001 f80a 	bl	8009f48 <__mcmp>
 8008f34:	4632      	mov	r2, r6
 8008f36:	9009      	str	r0, [sp, #36]	; 0x24
 8008f38:	4621      	mov	r1, r4
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f001 f820 	bl	8009f80 <__mdiff>
 8008f40:	68c2      	ldr	r2, [r0, #12]
 8008f42:	4607      	mov	r7, r0
 8008f44:	bb02      	cbnz	r2, 8008f88 <_dtoa_r+0xa60>
 8008f46:	4601      	mov	r1, r0
 8008f48:	4650      	mov	r0, sl
 8008f4a:	f000 fffd 	bl	8009f48 <__mcmp>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	4639      	mov	r1, r7
 8008f52:	4628      	mov	r0, r5
 8008f54:	920c      	str	r2, [sp, #48]	; 0x30
 8008f56:	f000 fd73 	bl	8009a40 <_Bfree>
 8008f5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008f5e:	9f08      	ldr	r7, [sp, #32]
 8008f60:	ea43 0102 	orr.w	r1, r3, r2
 8008f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f66:	4319      	orrs	r1, r3
 8008f68:	d110      	bne.n	8008f8c <_dtoa_r+0xa64>
 8008f6a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f6e:	d029      	beq.n	8008fc4 <_dtoa_r+0xa9c>
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dd02      	ble.n	8008f7c <_dtoa_r+0xa54>
 8008f76:	9b06      	ldr	r3, [sp, #24]
 8008f78:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008f7c:	9b04      	ldr	r3, [sp, #16]
 8008f7e:	f883 9000 	strb.w	r9, [r3]
 8008f82:	e777      	b.n	8008e74 <_dtoa_r+0x94c>
 8008f84:	4630      	mov	r0, r6
 8008f86:	e7ba      	b.n	8008efe <_dtoa_r+0x9d6>
 8008f88:	2201      	movs	r2, #1
 8008f8a:	e7e1      	b.n	8008f50 <_dtoa_r+0xa28>
 8008f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	db04      	blt.n	8008f9c <_dtoa_r+0xa74>
 8008f92:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008f94:	430b      	orrs	r3, r1
 8008f96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	d120      	bne.n	8008fde <_dtoa_r+0xab6>
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	dded      	ble.n	8008f7c <_dtoa_r+0xa54>
 8008fa0:	4651      	mov	r1, sl
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 ff63 	bl	8009e70 <__lshift>
 8008faa:	4621      	mov	r1, r4
 8008fac:	4682      	mov	sl, r0
 8008fae:	f000 ffcb 	bl	8009f48 <__mcmp>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	dc03      	bgt.n	8008fbe <_dtoa_r+0xa96>
 8008fb6:	d1e1      	bne.n	8008f7c <_dtoa_r+0xa54>
 8008fb8:	f019 0f01 	tst.w	r9, #1
 8008fbc:	d0de      	beq.n	8008f7c <_dtoa_r+0xa54>
 8008fbe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fc2:	d1d8      	bne.n	8008f76 <_dtoa_r+0xa4e>
 8008fc4:	2339      	movs	r3, #57	; 0x39
 8008fc6:	9a04      	ldr	r2, [sp, #16]
 8008fc8:	7013      	strb	r3, [r2, #0]
 8008fca:	463b      	mov	r3, r7
 8008fcc:	461f      	mov	r7, r3
 8008fce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	2a39      	cmp	r2, #57	; 0x39
 8008fd6:	d06b      	beq.n	80090b0 <_dtoa_r+0xb88>
 8008fd8:	3201      	adds	r2, #1
 8008fda:	701a      	strb	r2, [r3, #0]
 8008fdc:	e74a      	b.n	8008e74 <_dtoa_r+0x94c>
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	dd07      	ble.n	8008ff2 <_dtoa_r+0xaca>
 8008fe2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fe6:	d0ed      	beq.n	8008fc4 <_dtoa_r+0xa9c>
 8008fe8:	9a04      	ldr	r2, [sp, #16]
 8008fea:	f109 0301 	add.w	r3, r9, #1
 8008fee:	7013      	strb	r3, [r2, #0]
 8008ff0:	e740      	b.n	8008e74 <_dtoa_r+0x94c>
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ff6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d042      	beq.n	8009084 <_dtoa_r+0xb5c>
 8008ffe:	4651      	mov	r1, sl
 8009000:	2300      	movs	r3, #0
 8009002:	220a      	movs	r2, #10
 8009004:	4628      	mov	r0, r5
 8009006:	f000 fd3d 	bl	8009a84 <__multadd>
 800900a:	45b0      	cmp	r8, r6
 800900c:	4682      	mov	sl, r0
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	f04f 020a 	mov.w	r2, #10
 8009016:	4641      	mov	r1, r8
 8009018:	4628      	mov	r0, r5
 800901a:	d107      	bne.n	800902c <_dtoa_r+0xb04>
 800901c:	f000 fd32 	bl	8009a84 <__multadd>
 8009020:	4680      	mov	r8, r0
 8009022:	4606      	mov	r6, r0
 8009024:	9b08      	ldr	r3, [sp, #32]
 8009026:	3301      	adds	r3, #1
 8009028:	9308      	str	r3, [sp, #32]
 800902a:	e775      	b.n	8008f18 <_dtoa_r+0x9f0>
 800902c:	f000 fd2a 	bl	8009a84 <__multadd>
 8009030:	4631      	mov	r1, r6
 8009032:	4680      	mov	r8, r0
 8009034:	2300      	movs	r3, #0
 8009036:	220a      	movs	r2, #10
 8009038:	4628      	mov	r0, r5
 800903a:	f000 fd23 	bl	8009a84 <__multadd>
 800903e:	4606      	mov	r6, r0
 8009040:	e7f0      	b.n	8009024 <_dtoa_r+0xafc>
 8009042:	9b08      	ldr	r3, [sp, #32]
 8009044:	9306      	str	r3, [sp, #24]
 8009046:	9f03      	ldr	r7, [sp, #12]
 8009048:	4621      	mov	r1, r4
 800904a:	4650      	mov	r0, sl
 800904c:	f7ff f9e0 	bl	8008410 <quorem>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009056:	f807 9b01 	strb.w	r9, [r7], #1
 800905a:	1afa      	subs	r2, r7, r3
 800905c:	9b06      	ldr	r3, [sp, #24]
 800905e:	4293      	cmp	r3, r2
 8009060:	dd07      	ble.n	8009072 <_dtoa_r+0xb4a>
 8009062:	4651      	mov	r1, sl
 8009064:	2300      	movs	r3, #0
 8009066:	220a      	movs	r2, #10
 8009068:	4628      	mov	r0, r5
 800906a:	f000 fd0b 	bl	8009a84 <__multadd>
 800906e:	4682      	mov	sl, r0
 8009070:	e7ea      	b.n	8009048 <_dtoa_r+0xb20>
 8009072:	9b06      	ldr	r3, [sp, #24]
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	2b00      	cmp	r3, #0
 800907a:	bfcc      	ite	gt
 800907c:	461f      	movgt	r7, r3
 800907e:	2701      	movle	r7, #1
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	441f      	add	r7, r3
 8009084:	4651      	mov	r1, sl
 8009086:	2201      	movs	r2, #1
 8009088:	4628      	mov	r0, r5
 800908a:	f000 fef1 	bl	8009e70 <__lshift>
 800908e:	4621      	mov	r1, r4
 8009090:	4682      	mov	sl, r0
 8009092:	f000 ff59 	bl	8009f48 <__mcmp>
 8009096:	2800      	cmp	r0, #0
 8009098:	dc97      	bgt.n	8008fca <_dtoa_r+0xaa2>
 800909a:	d102      	bne.n	80090a2 <_dtoa_r+0xb7a>
 800909c:	f019 0f01 	tst.w	r9, #1
 80090a0:	d193      	bne.n	8008fca <_dtoa_r+0xaa2>
 80090a2:	463b      	mov	r3, r7
 80090a4:	461f      	mov	r7, r3
 80090a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090aa:	2a30      	cmp	r2, #48	; 0x30
 80090ac:	d0fa      	beq.n	80090a4 <_dtoa_r+0xb7c>
 80090ae:	e6e1      	b.n	8008e74 <_dtoa_r+0x94c>
 80090b0:	9a03      	ldr	r2, [sp, #12]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d18a      	bne.n	8008fcc <_dtoa_r+0xaa4>
 80090b6:	2331      	movs	r3, #49	; 0x31
 80090b8:	f10b 0b01 	add.w	fp, fp, #1
 80090bc:	e797      	b.n	8008fee <_dtoa_r+0xac6>
 80090be:	4b0a      	ldr	r3, [pc, #40]	; (80090e8 <_dtoa_r+0xbc0>)
 80090c0:	f7ff ba9f 	b.w	8008602 <_dtoa_r+0xda>
 80090c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f47f aa77 	bne.w	80085ba <_dtoa_r+0x92>
 80090cc:	4b07      	ldr	r3, [pc, #28]	; (80090ec <_dtoa_r+0xbc4>)
 80090ce:	f7ff ba98 	b.w	8008602 <_dtoa_r+0xda>
 80090d2:	9b06      	ldr	r3, [sp, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	dcb6      	bgt.n	8009046 <_dtoa_r+0xb1e>
 80090d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80090da:	2b02      	cmp	r3, #2
 80090dc:	f73f aeb5 	bgt.w	8008e4a <_dtoa_r+0x922>
 80090e0:	e7b1      	b.n	8009046 <_dtoa_r+0xb1e>
 80090e2:	bf00      	nop
 80090e4:	0800b597 	.word	0x0800b597
 80090e8:	0800b2a1 	.word	0x0800b2a1
 80090ec:	0800b51b 	.word	0x0800b51b

080090f0 <_free_r>:
 80090f0:	b538      	push	{r3, r4, r5, lr}
 80090f2:	4605      	mov	r5, r0
 80090f4:	2900      	cmp	r1, #0
 80090f6:	d040      	beq.n	800917a <_free_r+0x8a>
 80090f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090fc:	1f0c      	subs	r4, r1, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bfb8      	it	lt
 8009102:	18e4      	addlt	r4, r4, r3
 8009104:	f000 fc50 	bl	80099a8 <__malloc_lock>
 8009108:	4a1c      	ldr	r2, [pc, #112]	; (800917c <_free_r+0x8c>)
 800910a:	6813      	ldr	r3, [r2, #0]
 800910c:	b933      	cbnz	r3, 800911c <_free_r+0x2c>
 800910e:	6063      	str	r3, [r4, #4]
 8009110:	6014      	str	r4, [r2, #0]
 8009112:	4628      	mov	r0, r5
 8009114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009118:	f000 bc4c 	b.w	80099b4 <__malloc_unlock>
 800911c:	42a3      	cmp	r3, r4
 800911e:	d908      	bls.n	8009132 <_free_r+0x42>
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	1821      	adds	r1, r4, r0
 8009124:	428b      	cmp	r3, r1
 8009126:	bf01      	itttt	eq
 8009128:	6819      	ldreq	r1, [r3, #0]
 800912a:	685b      	ldreq	r3, [r3, #4]
 800912c:	1809      	addeq	r1, r1, r0
 800912e:	6021      	streq	r1, [r4, #0]
 8009130:	e7ed      	b.n	800910e <_free_r+0x1e>
 8009132:	461a      	mov	r2, r3
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	b10b      	cbz	r3, 800913c <_free_r+0x4c>
 8009138:	42a3      	cmp	r3, r4
 800913a:	d9fa      	bls.n	8009132 <_free_r+0x42>
 800913c:	6811      	ldr	r1, [r2, #0]
 800913e:	1850      	adds	r0, r2, r1
 8009140:	42a0      	cmp	r0, r4
 8009142:	d10b      	bne.n	800915c <_free_r+0x6c>
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	4401      	add	r1, r0
 8009148:	1850      	adds	r0, r2, r1
 800914a:	4283      	cmp	r3, r0
 800914c:	6011      	str	r1, [r2, #0]
 800914e:	d1e0      	bne.n	8009112 <_free_r+0x22>
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	4408      	add	r0, r1
 8009156:	6010      	str	r0, [r2, #0]
 8009158:	6053      	str	r3, [r2, #4]
 800915a:	e7da      	b.n	8009112 <_free_r+0x22>
 800915c:	d902      	bls.n	8009164 <_free_r+0x74>
 800915e:	230c      	movs	r3, #12
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	e7d6      	b.n	8009112 <_free_r+0x22>
 8009164:	6820      	ldr	r0, [r4, #0]
 8009166:	1821      	adds	r1, r4, r0
 8009168:	428b      	cmp	r3, r1
 800916a:	bf01      	itttt	eq
 800916c:	6819      	ldreq	r1, [r3, #0]
 800916e:	685b      	ldreq	r3, [r3, #4]
 8009170:	1809      	addeq	r1, r1, r0
 8009172:	6021      	streq	r1, [r4, #0]
 8009174:	6063      	str	r3, [r4, #4]
 8009176:	6054      	str	r4, [r2, #4]
 8009178:	e7cb      	b.n	8009112 <_free_r+0x22>
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	20000ba0 	.word	0x20000ba0

08009180 <rshift>:
 8009180:	6903      	ldr	r3, [r0, #16]
 8009182:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009186:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800918a:	f100 0414 	add.w	r4, r0, #20
 800918e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009192:	dd46      	ble.n	8009222 <rshift+0xa2>
 8009194:	f011 011f 	ands.w	r1, r1, #31
 8009198:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800919c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091a0:	d10c      	bne.n	80091bc <rshift+0x3c>
 80091a2:	4629      	mov	r1, r5
 80091a4:	f100 0710 	add.w	r7, r0, #16
 80091a8:	42b1      	cmp	r1, r6
 80091aa:	d335      	bcc.n	8009218 <rshift+0x98>
 80091ac:	1a9b      	subs	r3, r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	1eea      	subs	r2, r5, #3
 80091b2:	4296      	cmp	r6, r2
 80091b4:	bf38      	it	cc
 80091b6:	2300      	movcc	r3, #0
 80091b8:	4423      	add	r3, r4
 80091ba:	e015      	b.n	80091e8 <rshift+0x68>
 80091bc:	46a1      	mov	r9, r4
 80091be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091c2:	f1c1 0820 	rsb	r8, r1, #32
 80091c6:	40cf      	lsrs	r7, r1
 80091c8:	f105 0e04 	add.w	lr, r5, #4
 80091cc:	4576      	cmp	r6, lr
 80091ce:	46f4      	mov	ip, lr
 80091d0:	d816      	bhi.n	8009200 <rshift+0x80>
 80091d2:	1a9a      	subs	r2, r3, r2
 80091d4:	0092      	lsls	r2, r2, #2
 80091d6:	3a04      	subs	r2, #4
 80091d8:	3501      	adds	r5, #1
 80091da:	42ae      	cmp	r6, r5
 80091dc:	bf38      	it	cc
 80091de:	2200      	movcc	r2, #0
 80091e0:	18a3      	adds	r3, r4, r2
 80091e2:	50a7      	str	r7, [r4, r2]
 80091e4:	b107      	cbz	r7, 80091e8 <rshift+0x68>
 80091e6:	3304      	adds	r3, #4
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	eba3 0204 	sub.w	r2, r3, r4
 80091ee:	bf08      	it	eq
 80091f0:	2300      	moveq	r3, #0
 80091f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80091f6:	6102      	str	r2, [r0, #16]
 80091f8:	bf08      	it	eq
 80091fa:	6143      	streq	r3, [r0, #20]
 80091fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009200:	f8dc c000 	ldr.w	ip, [ip]
 8009204:	fa0c fc08 	lsl.w	ip, ip, r8
 8009208:	ea4c 0707 	orr.w	r7, ip, r7
 800920c:	f849 7b04 	str.w	r7, [r9], #4
 8009210:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009214:	40cf      	lsrs	r7, r1
 8009216:	e7d9      	b.n	80091cc <rshift+0x4c>
 8009218:	f851 cb04 	ldr.w	ip, [r1], #4
 800921c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009220:	e7c2      	b.n	80091a8 <rshift+0x28>
 8009222:	4623      	mov	r3, r4
 8009224:	e7e0      	b.n	80091e8 <rshift+0x68>

08009226 <__hexdig_fun>:
 8009226:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800922a:	2b09      	cmp	r3, #9
 800922c:	d802      	bhi.n	8009234 <__hexdig_fun+0xe>
 800922e:	3820      	subs	r0, #32
 8009230:	b2c0      	uxtb	r0, r0
 8009232:	4770      	bx	lr
 8009234:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009238:	2b05      	cmp	r3, #5
 800923a:	d801      	bhi.n	8009240 <__hexdig_fun+0x1a>
 800923c:	3847      	subs	r0, #71	; 0x47
 800923e:	e7f7      	b.n	8009230 <__hexdig_fun+0xa>
 8009240:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009244:	2b05      	cmp	r3, #5
 8009246:	d801      	bhi.n	800924c <__hexdig_fun+0x26>
 8009248:	3827      	subs	r0, #39	; 0x27
 800924a:	e7f1      	b.n	8009230 <__hexdig_fun+0xa>
 800924c:	2000      	movs	r0, #0
 800924e:	4770      	bx	lr

08009250 <__gethex>:
 8009250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	4681      	mov	r9, r0
 8009256:	468a      	mov	sl, r1
 8009258:	4617      	mov	r7, r2
 800925a:	680a      	ldr	r2, [r1, #0]
 800925c:	b085      	sub	sp, #20
 800925e:	f102 0b02 	add.w	fp, r2, #2
 8009262:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009266:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800926a:	9302      	str	r3, [sp, #8]
 800926c:	32fe      	adds	r2, #254	; 0xfe
 800926e:	eb02 030b 	add.w	r3, r2, fp
 8009272:	46d8      	mov	r8, fp
 8009274:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009278:	9301      	str	r3, [sp, #4]
 800927a:	2830      	cmp	r0, #48	; 0x30
 800927c:	d0f7      	beq.n	800926e <__gethex+0x1e>
 800927e:	f7ff ffd2 	bl	8009226 <__hexdig_fun>
 8009282:	4604      	mov	r4, r0
 8009284:	2800      	cmp	r0, #0
 8009286:	d138      	bne.n	80092fa <__gethex+0xaa>
 8009288:	2201      	movs	r2, #1
 800928a:	4640      	mov	r0, r8
 800928c:	49a7      	ldr	r1, [pc, #668]	; (800952c <__gethex+0x2dc>)
 800928e:	f7ff f80d 	bl	80082ac <strncmp>
 8009292:	4606      	mov	r6, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	d169      	bne.n	800936c <__gethex+0x11c>
 8009298:	f898 0001 	ldrb.w	r0, [r8, #1]
 800929c:	465d      	mov	r5, fp
 800929e:	f7ff ffc2 	bl	8009226 <__hexdig_fun>
 80092a2:	2800      	cmp	r0, #0
 80092a4:	d064      	beq.n	8009370 <__gethex+0x120>
 80092a6:	465a      	mov	r2, fp
 80092a8:	7810      	ldrb	r0, [r2, #0]
 80092aa:	4690      	mov	r8, r2
 80092ac:	2830      	cmp	r0, #48	; 0x30
 80092ae:	f102 0201 	add.w	r2, r2, #1
 80092b2:	d0f9      	beq.n	80092a8 <__gethex+0x58>
 80092b4:	f7ff ffb7 	bl	8009226 <__hexdig_fun>
 80092b8:	2301      	movs	r3, #1
 80092ba:	fab0 f480 	clz	r4, r0
 80092be:	465e      	mov	r6, fp
 80092c0:	0964      	lsrs	r4, r4, #5
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	4642      	mov	r2, r8
 80092c6:	4615      	mov	r5, r2
 80092c8:	7828      	ldrb	r0, [r5, #0]
 80092ca:	3201      	adds	r2, #1
 80092cc:	f7ff ffab 	bl	8009226 <__hexdig_fun>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1f8      	bne.n	80092c6 <__gethex+0x76>
 80092d4:	2201      	movs	r2, #1
 80092d6:	4628      	mov	r0, r5
 80092d8:	4994      	ldr	r1, [pc, #592]	; (800952c <__gethex+0x2dc>)
 80092da:	f7fe ffe7 	bl	80082ac <strncmp>
 80092de:	b978      	cbnz	r0, 8009300 <__gethex+0xb0>
 80092e0:	b946      	cbnz	r6, 80092f4 <__gethex+0xa4>
 80092e2:	1c6e      	adds	r6, r5, #1
 80092e4:	4632      	mov	r2, r6
 80092e6:	4615      	mov	r5, r2
 80092e8:	7828      	ldrb	r0, [r5, #0]
 80092ea:	3201      	adds	r2, #1
 80092ec:	f7ff ff9b 	bl	8009226 <__hexdig_fun>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d1f8      	bne.n	80092e6 <__gethex+0x96>
 80092f4:	1b73      	subs	r3, r6, r5
 80092f6:	009e      	lsls	r6, r3, #2
 80092f8:	e004      	b.n	8009304 <__gethex+0xb4>
 80092fa:	2400      	movs	r4, #0
 80092fc:	4626      	mov	r6, r4
 80092fe:	e7e1      	b.n	80092c4 <__gethex+0x74>
 8009300:	2e00      	cmp	r6, #0
 8009302:	d1f7      	bne.n	80092f4 <__gethex+0xa4>
 8009304:	782b      	ldrb	r3, [r5, #0]
 8009306:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800930a:	2b50      	cmp	r3, #80	; 0x50
 800930c:	d13d      	bne.n	800938a <__gethex+0x13a>
 800930e:	786b      	ldrb	r3, [r5, #1]
 8009310:	2b2b      	cmp	r3, #43	; 0x2b
 8009312:	d02f      	beq.n	8009374 <__gethex+0x124>
 8009314:	2b2d      	cmp	r3, #45	; 0x2d
 8009316:	d031      	beq.n	800937c <__gethex+0x12c>
 8009318:	f04f 0b00 	mov.w	fp, #0
 800931c:	1c69      	adds	r1, r5, #1
 800931e:	7808      	ldrb	r0, [r1, #0]
 8009320:	f7ff ff81 	bl	8009226 <__hexdig_fun>
 8009324:	1e42      	subs	r2, r0, #1
 8009326:	b2d2      	uxtb	r2, r2
 8009328:	2a18      	cmp	r2, #24
 800932a:	d82e      	bhi.n	800938a <__gethex+0x13a>
 800932c:	f1a0 0210 	sub.w	r2, r0, #16
 8009330:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009334:	f7ff ff77 	bl	8009226 <__hexdig_fun>
 8009338:	f100 3cff 	add.w	ip, r0, #4294967295
 800933c:	fa5f fc8c 	uxtb.w	ip, ip
 8009340:	f1bc 0f18 	cmp.w	ip, #24
 8009344:	d91d      	bls.n	8009382 <__gethex+0x132>
 8009346:	f1bb 0f00 	cmp.w	fp, #0
 800934a:	d000      	beq.n	800934e <__gethex+0xfe>
 800934c:	4252      	negs	r2, r2
 800934e:	4416      	add	r6, r2
 8009350:	f8ca 1000 	str.w	r1, [sl]
 8009354:	b1dc      	cbz	r4, 800938e <__gethex+0x13e>
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bf14      	ite	ne
 800935c:	f04f 0800 	movne.w	r8, #0
 8009360:	f04f 0806 	moveq.w	r8, #6
 8009364:	4640      	mov	r0, r8
 8009366:	b005      	add	sp, #20
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	4645      	mov	r5, r8
 800936e:	4626      	mov	r6, r4
 8009370:	2401      	movs	r4, #1
 8009372:	e7c7      	b.n	8009304 <__gethex+0xb4>
 8009374:	f04f 0b00 	mov.w	fp, #0
 8009378:	1ca9      	adds	r1, r5, #2
 800937a:	e7d0      	b.n	800931e <__gethex+0xce>
 800937c:	f04f 0b01 	mov.w	fp, #1
 8009380:	e7fa      	b.n	8009378 <__gethex+0x128>
 8009382:	230a      	movs	r3, #10
 8009384:	fb03 0002 	mla	r0, r3, r2, r0
 8009388:	e7d0      	b.n	800932c <__gethex+0xdc>
 800938a:	4629      	mov	r1, r5
 800938c:	e7e0      	b.n	8009350 <__gethex+0x100>
 800938e:	4621      	mov	r1, r4
 8009390:	eba5 0308 	sub.w	r3, r5, r8
 8009394:	3b01      	subs	r3, #1
 8009396:	2b07      	cmp	r3, #7
 8009398:	dc0a      	bgt.n	80093b0 <__gethex+0x160>
 800939a:	4648      	mov	r0, r9
 800939c:	f000 fb10 	bl	80099c0 <_Balloc>
 80093a0:	4604      	mov	r4, r0
 80093a2:	b940      	cbnz	r0, 80093b6 <__gethex+0x166>
 80093a4:	4602      	mov	r2, r0
 80093a6:	21e4      	movs	r1, #228	; 0xe4
 80093a8:	4b61      	ldr	r3, [pc, #388]	; (8009530 <__gethex+0x2e0>)
 80093aa:	4862      	ldr	r0, [pc, #392]	; (8009534 <__gethex+0x2e4>)
 80093ac:	f001 fa62 	bl	800a874 <__assert_func>
 80093b0:	3101      	adds	r1, #1
 80093b2:	105b      	asrs	r3, r3, #1
 80093b4:	e7ef      	b.n	8009396 <__gethex+0x146>
 80093b6:	2300      	movs	r3, #0
 80093b8:	469b      	mov	fp, r3
 80093ba:	f100 0a14 	add.w	sl, r0, #20
 80093be:	f8cd a004 	str.w	sl, [sp, #4]
 80093c2:	45a8      	cmp	r8, r5
 80093c4:	d344      	bcc.n	8009450 <__gethex+0x200>
 80093c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093ca:	4658      	mov	r0, fp
 80093cc:	f848 bb04 	str.w	fp, [r8], #4
 80093d0:	eba8 080a 	sub.w	r8, r8, sl
 80093d4:	ea4f 02a8 	mov.w	r2, r8, asr #2
 80093d8:	6122      	str	r2, [r4, #16]
 80093da:	ea4f 1842 	mov.w	r8, r2, lsl #5
 80093de:	f000 fbe1 	bl	8009ba4 <__hi0bits>
 80093e2:	683d      	ldr	r5, [r7, #0]
 80093e4:	eba8 0800 	sub.w	r8, r8, r0
 80093e8:	45a8      	cmp	r8, r5
 80093ea:	dd59      	ble.n	80094a0 <__gethex+0x250>
 80093ec:	eba8 0805 	sub.w	r8, r8, r5
 80093f0:	4641      	mov	r1, r8
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 ff5f 	bl	800a2b6 <__any_on>
 80093f8:	4683      	mov	fp, r0
 80093fa:	b1b8      	cbz	r0, 800942c <__gethex+0x1dc>
 80093fc:	f04f 0b01 	mov.w	fp, #1
 8009400:	f108 33ff 	add.w	r3, r8, #4294967295
 8009404:	1159      	asrs	r1, r3, #5
 8009406:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800940a:	f003 021f 	and.w	r2, r3, #31
 800940e:	fa0b f202 	lsl.w	r2, fp, r2
 8009412:	420a      	tst	r2, r1
 8009414:	d00a      	beq.n	800942c <__gethex+0x1dc>
 8009416:	455b      	cmp	r3, fp
 8009418:	dd06      	ble.n	8009428 <__gethex+0x1d8>
 800941a:	4620      	mov	r0, r4
 800941c:	f1a8 0102 	sub.w	r1, r8, #2
 8009420:	f000 ff49 	bl	800a2b6 <__any_on>
 8009424:	2800      	cmp	r0, #0
 8009426:	d138      	bne.n	800949a <__gethex+0x24a>
 8009428:	f04f 0b02 	mov.w	fp, #2
 800942c:	4641      	mov	r1, r8
 800942e:	4620      	mov	r0, r4
 8009430:	f7ff fea6 	bl	8009180 <rshift>
 8009434:	4446      	add	r6, r8
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	42b3      	cmp	r3, r6
 800943a:	da41      	bge.n	80094c0 <__gethex+0x270>
 800943c:	4621      	mov	r1, r4
 800943e:	4648      	mov	r0, r9
 8009440:	f000 fafe 	bl	8009a40 <_Bfree>
 8009444:	2300      	movs	r3, #0
 8009446:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009448:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	e789      	b.n	8009364 <__gethex+0x114>
 8009450:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009454:	2a2e      	cmp	r2, #46	; 0x2e
 8009456:	d014      	beq.n	8009482 <__gethex+0x232>
 8009458:	2b20      	cmp	r3, #32
 800945a:	d106      	bne.n	800946a <__gethex+0x21a>
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	f843 bb04 	str.w	fp, [r3], #4
 8009462:	f04f 0b00 	mov.w	fp, #0
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	465b      	mov	r3, fp
 800946a:	7828      	ldrb	r0, [r5, #0]
 800946c:	9303      	str	r3, [sp, #12]
 800946e:	f7ff feda 	bl	8009226 <__hexdig_fun>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	f000 000f 	and.w	r0, r0, #15
 8009478:	4098      	lsls	r0, r3
 800947a:	ea4b 0b00 	orr.w	fp, fp, r0
 800947e:	3304      	adds	r3, #4
 8009480:	e79f      	b.n	80093c2 <__gethex+0x172>
 8009482:	45a8      	cmp	r8, r5
 8009484:	d8e8      	bhi.n	8009458 <__gethex+0x208>
 8009486:	2201      	movs	r2, #1
 8009488:	4628      	mov	r0, r5
 800948a:	4928      	ldr	r1, [pc, #160]	; (800952c <__gethex+0x2dc>)
 800948c:	9303      	str	r3, [sp, #12]
 800948e:	f7fe ff0d 	bl	80082ac <strncmp>
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	2800      	cmp	r0, #0
 8009496:	d1df      	bne.n	8009458 <__gethex+0x208>
 8009498:	e793      	b.n	80093c2 <__gethex+0x172>
 800949a:	f04f 0b03 	mov.w	fp, #3
 800949e:	e7c5      	b.n	800942c <__gethex+0x1dc>
 80094a0:	da0b      	bge.n	80094ba <__gethex+0x26a>
 80094a2:	eba5 0808 	sub.w	r8, r5, r8
 80094a6:	4621      	mov	r1, r4
 80094a8:	4642      	mov	r2, r8
 80094aa:	4648      	mov	r0, r9
 80094ac:	f000 fce0 	bl	8009e70 <__lshift>
 80094b0:	4604      	mov	r4, r0
 80094b2:	eba6 0608 	sub.w	r6, r6, r8
 80094b6:	f100 0a14 	add.w	sl, r0, #20
 80094ba:	f04f 0b00 	mov.w	fp, #0
 80094be:	e7ba      	b.n	8009436 <__gethex+0x1e6>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	42b3      	cmp	r3, r6
 80094c4:	dd74      	ble.n	80095b0 <__gethex+0x360>
 80094c6:	1b9e      	subs	r6, r3, r6
 80094c8:	42b5      	cmp	r5, r6
 80094ca:	dc35      	bgt.n	8009538 <__gethex+0x2e8>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d023      	beq.n	800951a <__gethex+0x2ca>
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d025      	beq.n	8009522 <__gethex+0x2d2>
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d115      	bne.n	8009506 <__gethex+0x2b6>
 80094da:	42b5      	cmp	r5, r6
 80094dc:	d113      	bne.n	8009506 <__gethex+0x2b6>
 80094de:	2d01      	cmp	r5, #1
 80094e0:	d10b      	bne.n	80094fa <__gethex+0x2aa>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	9a02      	ldr	r2, [sp, #8]
 80094e6:	f04f 0862 	mov.w	r8, #98	; 0x62
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	2301      	movs	r3, #1
 80094ee:	6123      	str	r3, [r4, #16]
 80094f0:	f8ca 3000 	str.w	r3, [sl]
 80094f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094f6:	601c      	str	r4, [r3, #0]
 80094f8:	e734      	b.n	8009364 <__gethex+0x114>
 80094fa:	4620      	mov	r0, r4
 80094fc:	1e69      	subs	r1, r5, #1
 80094fe:	f000 feda 	bl	800a2b6 <__any_on>
 8009502:	2800      	cmp	r0, #0
 8009504:	d1ed      	bne.n	80094e2 <__gethex+0x292>
 8009506:	4621      	mov	r1, r4
 8009508:	4648      	mov	r0, r9
 800950a:	f000 fa99 	bl	8009a40 <_Bfree>
 800950e:	2300      	movs	r3, #0
 8009510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009512:	f04f 0850 	mov.w	r8, #80	; 0x50
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	e724      	b.n	8009364 <__gethex+0x114>
 800951a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1f2      	bne.n	8009506 <__gethex+0x2b6>
 8009520:	e7df      	b.n	80094e2 <__gethex+0x292>
 8009522:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1dc      	bne.n	80094e2 <__gethex+0x292>
 8009528:	e7ed      	b.n	8009506 <__gethex+0x2b6>
 800952a:	bf00      	nop
 800952c:	0800b389 	.word	0x0800b389
 8009530:	0800b597 	.word	0x0800b597
 8009534:	0800b5a8 	.word	0x0800b5a8
 8009538:	f106 38ff 	add.w	r8, r6, #4294967295
 800953c:	f1bb 0f00 	cmp.w	fp, #0
 8009540:	d133      	bne.n	80095aa <__gethex+0x35a>
 8009542:	f1b8 0f00 	cmp.w	r8, #0
 8009546:	d004      	beq.n	8009552 <__gethex+0x302>
 8009548:	4641      	mov	r1, r8
 800954a:	4620      	mov	r0, r4
 800954c:	f000 feb3 	bl	800a2b6 <__any_on>
 8009550:	4683      	mov	fp, r0
 8009552:	2301      	movs	r3, #1
 8009554:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009558:	f008 081f 	and.w	r8, r8, #31
 800955c:	fa03 f308 	lsl.w	r3, r3, r8
 8009560:	f04f 0802 	mov.w	r8, #2
 8009564:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009568:	4631      	mov	r1, r6
 800956a:	4213      	tst	r3, r2
 800956c:	4620      	mov	r0, r4
 800956e:	bf18      	it	ne
 8009570:	f04b 0b02 	orrne.w	fp, fp, #2
 8009574:	1bad      	subs	r5, r5, r6
 8009576:	f7ff fe03 	bl	8009180 <rshift>
 800957a:	687e      	ldr	r6, [r7, #4]
 800957c:	f1bb 0f00 	cmp.w	fp, #0
 8009580:	d04a      	beq.n	8009618 <__gethex+0x3c8>
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d016      	beq.n	80095b6 <__gethex+0x366>
 8009588:	2b03      	cmp	r3, #3
 800958a:	d018      	beq.n	80095be <__gethex+0x36e>
 800958c:	2b01      	cmp	r3, #1
 800958e:	d109      	bne.n	80095a4 <__gethex+0x354>
 8009590:	f01b 0f02 	tst.w	fp, #2
 8009594:	d006      	beq.n	80095a4 <__gethex+0x354>
 8009596:	f8da 3000 	ldr.w	r3, [sl]
 800959a:	ea4b 0b03 	orr.w	fp, fp, r3
 800959e:	f01b 0f01 	tst.w	fp, #1
 80095a2:	d10f      	bne.n	80095c4 <__gethex+0x374>
 80095a4:	f048 0810 	orr.w	r8, r8, #16
 80095a8:	e036      	b.n	8009618 <__gethex+0x3c8>
 80095aa:	f04f 0b01 	mov.w	fp, #1
 80095ae:	e7d0      	b.n	8009552 <__gethex+0x302>
 80095b0:	f04f 0801 	mov.w	r8, #1
 80095b4:	e7e2      	b.n	800957c <__gethex+0x32c>
 80095b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095b8:	f1c3 0301 	rsb	r3, r3, #1
 80095bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80095be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0ef      	beq.n	80095a4 <__gethex+0x354>
 80095c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095c8:	f104 0214 	add.w	r2, r4, #20
 80095cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	2300      	movs	r3, #0
 80095d4:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80095d8:	4694      	mov	ip, r2
 80095da:	f852 1b04 	ldr.w	r1, [r2], #4
 80095de:	f1b1 3fff 	cmp.w	r1, #4294967295
 80095e2:	d01e      	beq.n	8009622 <__gethex+0x3d2>
 80095e4:	3101      	adds	r1, #1
 80095e6:	f8cc 1000 	str.w	r1, [ip]
 80095ea:	f1b8 0f02 	cmp.w	r8, #2
 80095ee:	f104 0214 	add.w	r2, r4, #20
 80095f2:	d13d      	bne.n	8009670 <__gethex+0x420>
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	42ab      	cmp	r3, r5
 80095fa:	d10b      	bne.n	8009614 <__gethex+0x3c4>
 80095fc:	2301      	movs	r3, #1
 80095fe:	1169      	asrs	r1, r5, #5
 8009600:	f005 051f 	and.w	r5, r5, #31
 8009604:	fa03 f505 	lsl.w	r5, r3, r5
 8009608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800960c:	421d      	tst	r5, r3
 800960e:	bf18      	it	ne
 8009610:	f04f 0801 	movne.w	r8, #1
 8009614:	f048 0820 	orr.w	r8, r8, #32
 8009618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800961a:	601c      	str	r4, [r3, #0]
 800961c:	9b02      	ldr	r3, [sp, #8]
 800961e:	601e      	str	r6, [r3, #0]
 8009620:	e6a0      	b.n	8009364 <__gethex+0x114>
 8009622:	4290      	cmp	r0, r2
 8009624:	f842 3c04 	str.w	r3, [r2, #-4]
 8009628:	d8d6      	bhi.n	80095d8 <__gethex+0x388>
 800962a:	68a2      	ldr	r2, [r4, #8]
 800962c:	4593      	cmp	fp, r2
 800962e:	db17      	blt.n	8009660 <__gethex+0x410>
 8009630:	6861      	ldr	r1, [r4, #4]
 8009632:	4648      	mov	r0, r9
 8009634:	3101      	adds	r1, #1
 8009636:	f000 f9c3 	bl	80099c0 <_Balloc>
 800963a:	4682      	mov	sl, r0
 800963c:	b918      	cbnz	r0, 8009646 <__gethex+0x3f6>
 800963e:	4602      	mov	r2, r0
 8009640:	2184      	movs	r1, #132	; 0x84
 8009642:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <__gethex+0x45c>)
 8009644:	e6b1      	b.n	80093aa <__gethex+0x15a>
 8009646:	6922      	ldr	r2, [r4, #16]
 8009648:	f104 010c 	add.w	r1, r4, #12
 800964c:	3202      	adds	r2, #2
 800964e:	0092      	lsls	r2, r2, #2
 8009650:	300c      	adds	r0, #12
 8009652:	f7fe fec9 	bl	80083e8 <memcpy>
 8009656:	4621      	mov	r1, r4
 8009658:	4648      	mov	r0, r9
 800965a:	f000 f9f1 	bl	8009a40 <_Bfree>
 800965e:	4654      	mov	r4, sl
 8009660:	6922      	ldr	r2, [r4, #16]
 8009662:	1c51      	adds	r1, r2, #1
 8009664:	6121      	str	r1, [r4, #16]
 8009666:	2101      	movs	r1, #1
 8009668:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800966c:	6151      	str	r1, [r2, #20]
 800966e:	e7bc      	b.n	80095ea <__gethex+0x39a>
 8009670:	6921      	ldr	r1, [r4, #16]
 8009672:	4559      	cmp	r1, fp
 8009674:	dd0b      	ble.n	800968e <__gethex+0x43e>
 8009676:	2101      	movs	r1, #1
 8009678:	4620      	mov	r0, r4
 800967a:	f7ff fd81 	bl	8009180 <rshift>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	3601      	adds	r6, #1
 8009682:	42b3      	cmp	r3, r6
 8009684:	f6ff aeda 	blt.w	800943c <__gethex+0x1ec>
 8009688:	f04f 0801 	mov.w	r8, #1
 800968c:	e7c2      	b.n	8009614 <__gethex+0x3c4>
 800968e:	f015 051f 	ands.w	r5, r5, #31
 8009692:	d0f9      	beq.n	8009688 <__gethex+0x438>
 8009694:	9b01      	ldr	r3, [sp, #4]
 8009696:	f1c5 0520 	rsb	r5, r5, #32
 800969a:	441a      	add	r2, r3
 800969c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80096a0:	f000 fa80 	bl	8009ba4 <__hi0bits>
 80096a4:	42a8      	cmp	r0, r5
 80096a6:	dbe6      	blt.n	8009676 <__gethex+0x426>
 80096a8:	e7ee      	b.n	8009688 <__gethex+0x438>
 80096aa:	bf00      	nop
 80096ac:	0800b597 	.word	0x0800b597

080096b0 <L_shift>:
 80096b0:	f1c2 0208 	rsb	r2, r2, #8
 80096b4:	0092      	lsls	r2, r2, #2
 80096b6:	b570      	push	{r4, r5, r6, lr}
 80096b8:	f1c2 0620 	rsb	r6, r2, #32
 80096bc:	6843      	ldr	r3, [r0, #4]
 80096be:	6804      	ldr	r4, [r0, #0]
 80096c0:	fa03 f506 	lsl.w	r5, r3, r6
 80096c4:	432c      	orrs	r4, r5
 80096c6:	40d3      	lsrs	r3, r2
 80096c8:	6004      	str	r4, [r0, #0]
 80096ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80096ce:	4288      	cmp	r0, r1
 80096d0:	d3f4      	bcc.n	80096bc <L_shift+0xc>
 80096d2:	bd70      	pop	{r4, r5, r6, pc}

080096d4 <__match>:
 80096d4:	b530      	push	{r4, r5, lr}
 80096d6:	6803      	ldr	r3, [r0, #0]
 80096d8:	3301      	adds	r3, #1
 80096da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096de:	b914      	cbnz	r4, 80096e6 <__match+0x12>
 80096e0:	6003      	str	r3, [r0, #0]
 80096e2:	2001      	movs	r0, #1
 80096e4:	bd30      	pop	{r4, r5, pc}
 80096e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80096ee:	2d19      	cmp	r5, #25
 80096f0:	bf98      	it	ls
 80096f2:	3220      	addls	r2, #32
 80096f4:	42a2      	cmp	r2, r4
 80096f6:	d0f0      	beq.n	80096da <__match+0x6>
 80096f8:	2000      	movs	r0, #0
 80096fa:	e7f3      	b.n	80096e4 <__match+0x10>

080096fc <__hexnan>:
 80096fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	2500      	movs	r5, #0
 8009702:	680b      	ldr	r3, [r1, #0]
 8009704:	4682      	mov	sl, r0
 8009706:	115e      	asrs	r6, r3, #5
 8009708:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800970c:	f013 031f 	ands.w	r3, r3, #31
 8009710:	bf18      	it	ne
 8009712:	3604      	addne	r6, #4
 8009714:	1f37      	subs	r7, r6, #4
 8009716:	4690      	mov	r8, r2
 8009718:	46b9      	mov	r9, r7
 800971a:	463c      	mov	r4, r7
 800971c:	46ab      	mov	fp, r5
 800971e:	b087      	sub	sp, #28
 8009720:	6801      	ldr	r1, [r0, #0]
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	f846 5c04 	str.w	r5, [r6, #-4]
 8009728:	9502      	str	r5, [sp, #8]
 800972a:	784a      	ldrb	r2, [r1, #1]
 800972c:	1c4b      	adds	r3, r1, #1
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	b342      	cbz	r2, 8009784 <__hexnan+0x88>
 8009732:	4610      	mov	r0, r2
 8009734:	9105      	str	r1, [sp, #20]
 8009736:	9204      	str	r2, [sp, #16]
 8009738:	f7ff fd75 	bl	8009226 <__hexdig_fun>
 800973c:	2800      	cmp	r0, #0
 800973e:	d14f      	bne.n	80097e0 <__hexnan+0xe4>
 8009740:	9a04      	ldr	r2, [sp, #16]
 8009742:	9905      	ldr	r1, [sp, #20]
 8009744:	2a20      	cmp	r2, #32
 8009746:	d818      	bhi.n	800977a <__hexnan+0x7e>
 8009748:	9b02      	ldr	r3, [sp, #8]
 800974a:	459b      	cmp	fp, r3
 800974c:	dd13      	ble.n	8009776 <__hexnan+0x7a>
 800974e:	454c      	cmp	r4, r9
 8009750:	d206      	bcs.n	8009760 <__hexnan+0x64>
 8009752:	2d07      	cmp	r5, #7
 8009754:	dc04      	bgt.n	8009760 <__hexnan+0x64>
 8009756:	462a      	mov	r2, r5
 8009758:	4649      	mov	r1, r9
 800975a:	4620      	mov	r0, r4
 800975c:	f7ff ffa8 	bl	80096b0 <L_shift>
 8009760:	4544      	cmp	r4, r8
 8009762:	d950      	bls.n	8009806 <__hexnan+0x10a>
 8009764:	2300      	movs	r3, #0
 8009766:	f1a4 0904 	sub.w	r9, r4, #4
 800976a:	f844 3c04 	str.w	r3, [r4, #-4]
 800976e:	461d      	mov	r5, r3
 8009770:	464c      	mov	r4, r9
 8009772:	f8cd b008 	str.w	fp, [sp, #8]
 8009776:	9903      	ldr	r1, [sp, #12]
 8009778:	e7d7      	b.n	800972a <__hexnan+0x2e>
 800977a:	2a29      	cmp	r2, #41	; 0x29
 800977c:	d155      	bne.n	800982a <__hexnan+0x12e>
 800977e:	3102      	adds	r1, #2
 8009780:	f8ca 1000 	str.w	r1, [sl]
 8009784:	f1bb 0f00 	cmp.w	fp, #0
 8009788:	d04f      	beq.n	800982a <__hexnan+0x12e>
 800978a:	454c      	cmp	r4, r9
 800978c:	d206      	bcs.n	800979c <__hexnan+0xa0>
 800978e:	2d07      	cmp	r5, #7
 8009790:	dc04      	bgt.n	800979c <__hexnan+0xa0>
 8009792:	462a      	mov	r2, r5
 8009794:	4649      	mov	r1, r9
 8009796:	4620      	mov	r0, r4
 8009798:	f7ff ff8a 	bl	80096b0 <L_shift>
 800979c:	4544      	cmp	r4, r8
 800979e:	d934      	bls.n	800980a <__hexnan+0x10e>
 80097a0:	4623      	mov	r3, r4
 80097a2:	f1a8 0204 	sub.w	r2, r8, #4
 80097a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80097aa:	429f      	cmp	r7, r3
 80097ac:	f842 1f04 	str.w	r1, [r2, #4]!
 80097b0:	d2f9      	bcs.n	80097a6 <__hexnan+0xaa>
 80097b2:	1b3b      	subs	r3, r7, r4
 80097b4:	f023 0303 	bic.w	r3, r3, #3
 80097b8:	3304      	adds	r3, #4
 80097ba:	3e03      	subs	r6, #3
 80097bc:	3401      	adds	r4, #1
 80097be:	42a6      	cmp	r6, r4
 80097c0:	bf38      	it	cc
 80097c2:	2304      	movcc	r3, #4
 80097c4:	2200      	movs	r2, #0
 80097c6:	4443      	add	r3, r8
 80097c8:	f843 2b04 	str.w	r2, [r3], #4
 80097cc:	429f      	cmp	r7, r3
 80097ce:	d2fb      	bcs.n	80097c8 <__hexnan+0xcc>
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	b91b      	cbnz	r3, 80097dc <__hexnan+0xe0>
 80097d4:	4547      	cmp	r7, r8
 80097d6:	d126      	bne.n	8009826 <__hexnan+0x12a>
 80097d8:	2301      	movs	r3, #1
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	2005      	movs	r0, #5
 80097de:	e025      	b.n	800982c <__hexnan+0x130>
 80097e0:	3501      	adds	r5, #1
 80097e2:	2d08      	cmp	r5, #8
 80097e4:	f10b 0b01 	add.w	fp, fp, #1
 80097e8:	dd06      	ble.n	80097f8 <__hexnan+0xfc>
 80097ea:	4544      	cmp	r4, r8
 80097ec:	d9c3      	bls.n	8009776 <__hexnan+0x7a>
 80097ee:	2300      	movs	r3, #0
 80097f0:	2501      	movs	r5, #1
 80097f2:	f844 3c04 	str.w	r3, [r4, #-4]
 80097f6:	3c04      	subs	r4, #4
 80097f8:	6822      	ldr	r2, [r4, #0]
 80097fa:	f000 000f 	and.w	r0, r0, #15
 80097fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009802:	6020      	str	r0, [r4, #0]
 8009804:	e7b7      	b.n	8009776 <__hexnan+0x7a>
 8009806:	2508      	movs	r5, #8
 8009808:	e7b5      	b.n	8009776 <__hexnan+0x7a>
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d0df      	beq.n	80097d0 <__hexnan+0xd4>
 8009810:	f04f 32ff 	mov.w	r2, #4294967295
 8009814:	f1c3 0320 	rsb	r3, r3, #32
 8009818:	40da      	lsrs	r2, r3
 800981a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800981e:	4013      	ands	r3, r2
 8009820:	f846 3c04 	str.w	r3, [r6, #-4]
 8009824:	e7d4      	b.n	80097d0 <__hexnan+0xd4>
 8009826:	3f04      	subs	r7, #4
 8009828:	e7d2      	b.n	80097d0 <__hexnan+0xd4>
 800982a:	2004      	movs	r0, #4
 800982c:	b007      	add	sp, #28
 800982e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009834 <malloc>:
 8009834:	4b02      	ldr	r3, [pc, #8]	; (8009840 <malloc+0xc>)
 8009836:	4601      	mov	r1, r0
 8009838:	6818      	ldr	r0, [r3, #0]
 800983a:	f000 b823 	b.w	8009884 <_malloc_r>
 800983e:	bf00      	nop
 8009840:	200001d4 	.word	0x200001d4

08009844 <sbrk_aligned>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	4e0e      	ldr	r6, [pc, #56]	; (8009880 <sbrk_aligned+0x3c>)
 8009848:	460c      	mov	r4, r1
 800984a:	6831      	ldr	r1, [r6, #0]
 800984c:	4605      	mov	r5, r0
 800984e:	b911      	cbnz	r1, 8009856 <sbrk_aligned+0x12>
 8009850:	f001 f800 	bl	800a854 <_sbrk_r>
 8009854:	6030      	str	r0, [r6, #0]
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f000 fffb 	bl	800a854 <_sbrk_r>
 800985e:	1c43      	adds	r3, r0, #1
 8009860:	d00a      	beq.n	8009878 <sbrk_aligned+0x34>
 8009862:	1cc4      	adds	r4, r0, #3
 8009864:	f024 0403 	bic.w	r4, r4, #3
 8009868:	42a0      	cmp	r0, r4
 800986a:	d007      	beq.n	800987c <sbrk_aligned+0x38>
 800986c:	1a21      	subs	r1, r4, r0
 800986e:	4628      	mov	r0, r5
 8009870:	f000 fff0 	bl	800a854 <_sbrk_r>
 8009874:	3001      	adds	r0, #1
 8009876:	d101      	bne.n	800987c <sbrk_aligned+0x38>
 8009878:	f04f 34ff 	mov.w	r4, #4294967295
 800987c:	4620      	mov	r0, r4
 800987e:	bd70      	pop	{r4, r5, r6, pc}
 8009880:	20000ba4 	.word	0x20000ba4

08009884 <_malloc_r>:
 8009884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009888:	1ccd      	adds	r5, r1, #3
 800988a:	f025 0503 	bic.w	r5, r5, #3
 800988e:	3508      	adds	r5, #8
 8009890:	2d0c      	cmp	r5, #12
 8009892:	bf38      	it	cc
 8009894:	250c      	movcc	r5, #12
 8009896:	2d00      	cmp	r5, #0
 8009898:	4607      	mov	r7, r0
 800989a:	db01      	blt.n	80098a0 <_malloc_r+0x1c>
 800989c:	42a9      	cmp	r1, r5
 800989e:	d905      	bls.n	80098ac <_malloc_r+0x28>
 80098a0:	230c      	movs	r3, #12
 80098a2:	2600      	movs	r6, #0
 80098a4:	603b      	str	r3, [r7, #0]
 80098a6:	4630      	mov	r0, r6
 80098a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009980 <_malloc_r+0xfc>
 80098b0:	f000 f87a 	bl	80099a8 <__malloc_lock>
 80098b4:	f8d8 3000 	ldr.w	r3, [r8]
 80098b8:	461c      	mov	r4, r3
 80098ba:	bb5c      	cbnz	r4, 8009914 <_malloc_r+0x90>
 80098bc:	4629      	mov	r1, r5
 80098be:	4638      	mov	r0, r7
 80098c0:	f7ff ffc0 	bl	8009844 <sbrk_aligned>
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	4604      	mov	r4, r0
 80098c8:	d155      	bne.n	8009976 <_malloc_r+0xf2>
 80098ca:	f8d8 4000 	ldr.w	r4, [r8]
 80098ce:	4626      	mov	r6, r4
 80098d0:	2e00      	cmp	r6, #0
 80098d2:	d145      	bne.n	8009960 <_malloc_r+0xdc>
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	d048      	beq.n	800996a <_malloc_r+0xe6>
 80098d8:	6823      	ldr	r3, [r4, #0]
 80098da:	4631      	mov	r1, r6
 80098dc:	4638      	mov	r0, r7
 80098de:	eb04 0903 	add.w	r9, r4, r3
 80098e2:	f000 ffb7 	bl	800a854 <_sbrk_r>
 80098e6:	4581      	cmp	r9, r0
 80098e8:	d13f      	bne.n	800996a <_malloc_r+0xe6>
 80098ea:	6821      	ldr	r1, [r4, #0]
 80098ec:	4638      	mov	r0, r7
 80098ee:	1a6d      	subs	r5, r5, r1
 80098f0:	4629      	mov	r1, r5
 80098f2:	f7ff ffa7 	bl	8009844 <sbrk_aligned>
 80098f6:	3001      	adds	r0, #1
 80098f8:	d037      	beq.n	800996a <_malloc_r+0xe6>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	442b      	add	r3, r5
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	f8d8 3000 	ldr.w	r3, [r8]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d038      	beq.n	800997a <_malloc_r+0xf6>
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	42a2      	cmp	r2, r4
 800990c:	d12b      	bne.n	8009966 <_malloc_r+0xe2>
 800990e:	2200      	movs	r2, #0
 8009910:	605a      	str	r2, [r3, #4]
 8009912:	e00f      	b.n	8009934 <_malloc_r+0xb0>
 8009914:	6822      	ldr	r2, [r4, #0]
 8009916:	1b52      	subs	r2, r2, r5
 8009918:	d41f      	bmi.n	800995a <_malloc_r+0xd6>
 800991a:	2a0b      	cmp	r2, #11
 800991c:	d917      	bls.n	800994e <_malloc_r+0xca>
 800991e:	1961      	adds	r1, r4, r5
 8009920:	42a3      	cmp	r3, r4
 8009922:	6025      	str	r5, [r4, #0]
 8009924:	bf18      	it	ne
 8009926:	6059      	strne	r1, [r3, #4]
 8009928:	6863      	ldr	r3, [r4, #4]
 800992a:	bf08      	it	eq
 800992c:	f8c8 1000 	streq.w	r1, [r8]
 8009930:	5162      	str	r2, [r4, r5]
 8009932:	604b      	str	r3, [r1, #4]
 8009934:	4638      	mov	r0, r7
 8009936:	f104 060b 	add.w	r6, r4, #11
 800993a:	f000 f83b 	bl	80099b4 <__malloc_unlock>
 800993e:	f026 0607 	bic.w	r6, r6, #7
 8009942:	1d23      	adds	r3, r4, #4
 8009944:	1af2      	subs	r2, r6, r3
 8009946:	d0ae      	beq.n	80098a6 <_malloc_r+0x22>
 8009948:	1b9b      	subs	r3, r3, r6
 800994a:	50a3      	str	r3, [r4, r2]
 800994c:	e7ab      	b.n	80098a6 <_malloc_r+0x22>
 800994e:	42a3      	cmp	r3, r4
 8009950:	6862      	ldr	r2, [r4, #4]
 8009952:	d1dd      	bne.n	8009910 <_malloc_r+0x8c>
 8009954:	f8c8 2000 	str.w	r2, [r8]
 8009958:	e7ec      	b.n	8009934 <_malloc_r+0xb0>
 800995a:	4623      	mov	r3, r4
 800995c:	6864      	ldr	r4, [r4, #4]
 800995e:	e7ac      	b.n	80098ba <_malloc_r+0x36>
 8009960:	4634      	mov	r4, r6
 8009962:	6876      	ldr	r6, [r6, #4]
 8009964:	e7b4      	b.n	80098d0 <_malloc_r+0x4c>
 8009966:	4613      	mov	r3, r2
 8009968:	e7cc      	b.n	8009904 <_malloc_r+0x80>
 800996a:	230c      	movs	r3, #12
 800996c:	4638      	mov	r0, r7
 800996e:	603b      	str	r3, [r7, #0]
 8009970:	f000 f820 	bl	80099b4 <__malloc_unlock>
 8009974:	e797      	b.n	80098a6 <_malloc_r+0x22>
 8009976:	6025      	str	r5, [r4, #0]
 8009978:	e7dc      	b.n	8009934 <_malloc_r+0xb0>
 800997a:	605b      	str	r3, [r3, #4]
 800997c:	deff      	udf	#255	; 0xff
 800997e:	bf00      	nop
 8009980:	20000ba0 	.word	0x20000ba0

08009984 <__ascii_mbtowc>:
 8009984:	b082      	sub	sp, #8
 8009986:	b901      	cbnz	r1, 800998a <__ascii_mbtowc+0x6>
 8009988:	a901      	add	r1, sp, #4
 800998a:	b142      	cbz	r2, 800999e <__ascii_mbtowc+0x1a>
 800998c:	b14b      	cbz	r3, 80099a2 <__ascii_mbtowc+0x1e>
 800998e:	7813      	ldrb	r3, [r2, #0]
 8009990:	600b      	str	r3, [r1, #0]
 8009992:	7812      	ldrb	r2, [r2, #0]
 8009994:	1e10      	subs	r0, r2, #0
 8009996:	bf18      	it	ne
 8009998:	2001      	movne	r0, #1
 800999a:	b002      	add	sp, #8
 800999c:	4770      	bx	lr
 800999e:	4610      	mov	r0, r2
 80099a0:	e7fb      	b.n	800999a <__ascii_mbtowc+0x16>
 80099a2:	f06f 0001 	mvn.w	r0, #1
 80099a6:	e7f8      	b.n	800999a <__ascii_mbtowc+0x16>

080099a8 <__malloc_lock>:
 80099a8:	4801      	ldr	r0, [pc, #4]	; (80099b0 <__malloc_lock+0x8>)
 80099aa:	f7fe bd05 	b.w	80083b8 <__retarget_lock_acquire_recursive>
 80099ae:	bf00      	nop
 80099b0:	20000b9c 	.word	0x20000b9c

080099b4 <__malloc_unlock>:
 80099b4:	4801      	ldr	r0, [pc, #4]	; (80099bc <__malloc_unlock+0x8>)
 80099b6:	f7fe bd00 	b.w	80083ba <__retarget_lock_release_recursive>
 80099ba:	bf00      	nop
 80099bc:	20000b9c 	.word	0x20000b9c

080099c0 <_Balloc>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	69c6      	ldr	r6, [r0, #28]
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	b976      	cbnz	r6, 80099e8 <_Balloc+0x28>
 80099ca:	2010      	movs	r0, #16
 80099cc:	f7ff ff32 	bl	8009834 <malloc>
 80099d0:	4602      	mov	r2, r0
 80099d2:	61e0      	str	r0, [r4, #28]
 80099d4:	b920      	cbnz	r0, 80099e0 <_Balloc+0x20>
 80099d6:	216b      	movs	r1, #107	; 0x6b
 80099d8:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <_Balloc+0x78>)
 80099da:	4818      	ldr	r0, [pc, #96]	; (8009a3c <_Balloc+0x7c>)
 80099dc:	f000 ff4a 	bl	800a874 <__assert_func>
 80099e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e4:	6006      	str	r6, [r0, #0]
 80099e6:	60c6      	str	r6, [r0, #12]
 80099e8:	69e6      	ldr	r6, [r4, #28]
 80099ea:	68f3      	ldr	r3, [r6, #12]
 80099ec:	b183      	cbz	r3, 8009a10 <_Balloc+0x50>
 80099ee:	69e3      	ldr	r3, [r4, #28]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099f6:	b9b8      	cbnz	r0, 8009a28 <_Balloc+0x68>
 80099f8:	2101      	movs	r1, #1
 80099fa:	fa01 f605 	lsl.w	r6, r1, r5
 80099fe:	1d72      	adds	r2, r6, #5
 8009a00:	4620      	mov	r0, r4
 8009a02:	0092      	lsls	r2, r2, #2
 8009a04:	f000 ff54 	bl	800a8b0 <_calloc_r>
 8009a08:	b160      	cbz	r0, 8009a24 <_Balloc+0x64>
 8009a0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a0e:	e00e      	b.n	8009a2e <_Balloc+0x6e>
 8009a10:	2221      	movs	r2, #33	; 0x21
 8009a12:	2104      	movs	r1, #4
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 ff4b 	bl	800a8b0 <_calloc_r>
 8009a1a:	69e3      	ldr	r3, [r4, #28]
 8009a1c:	60f0      	str	r0, [r6, #12]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1e4      	bne.n	80099ee <_Balloc+0x2e>
 8009a24:	2000      	movs	r0, #0
 8009a26:	bd70      	pop	{r4, r5, r6, pc}
 8009a28:	6802      	ldr	r2, [r0, #0]
 8009a2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a34:	e7f7      	b.n	8009a26 <_Balloc+0x66>
 8009a36:	bf00      	nop
 8009a38:	0800b528 	.word	0x0800b528
 8009a3c:	0800b608 	.word	0x0800b608

08009a40 <_Bfree>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	69c6      	ldr	r6, [r0, #28]
 8009a44:	4605      	mov	r5, r0
 8009a46:	460c      	mov	r4, r1
 8009a48:	b976      	cbnz	r6, 8009a68 <_Bfree+0x28>
 8009a4a:	2010      	movs	r0, #16
 8009a4c:	f7ff fef2 	bl	8009834 <malloc>
 8009a50:	4602      	mov	r2, r0
 8009a52:	61e8      	str	r0, [r5, #28]
 8009a54:	b920      	cbnz	r0, 8009a60 <_Bfree+0x20>
 8009a56:	218f      	movs	r1, #143	; 0x8f
 8009a58:	4b08      	ldr	r3, [pc, #32]	; (8009a7c <_Bfree+0x3c>)
 8009a5a:	4809      	ldr	r0, [pc, #36]	; (8009a80 <_Bfree+0x40>)
 8009a5c:	f000 ff0a 	bl	800a874 <__assert_func>
 8009a60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a64:	6006      	str	r6, [r0, #0]
 8009a66:	60c6      	str	r6, [r0, #12]
 8009a68:	b13c      	cbz	r4, 8009a7a <_Bfree+0x3a>
 8009a6a:	69eb      	ldr	r3, [r5, #28]
 8009a6c:	6862      	ldr	r2, [r4, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a74:	6021      	str	r1, [r4, #0]
 8009a76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}
 8009a7c:	0800b528 	.word	0x0800b528
 8009a80:	0800b608 	.word	0x0800b608

08009a84 <__multadd>:
 8009a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a88:	4607      	mov	r7, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	461e      	mov	r6, r3
 8009a8e:	2000      	movs	r0, #0
 8009a90:	690d      	ldr	r5, [r1, #16]
 8009a92:	f101 0c14 	add.w	ip, r1, #20
 8009a96:	f8dc 3000 	ldr.w	r3, [ip]
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	b299      	uxth	r1, r3
 8009a9e:	fb02 6101 	mla	r1, r2, r1, r6
 8009aa2:	0c1e      	lsrs	r6, r3, #16
 8009aa4:	0c0b      	lsrs	r3, r1, #16
 8009aa6:	fb02 3306 	mla	r3, r2, r6, r3
 8009aaa:	b289      	uxth	r1, r1
 8009aac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ab0:	4285      	cmp	r5, r0
 8009ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ab6:	f84c 1b04 	str.w	r1, [ip], #4
 8009aba:	dcec      	bgt.n	8009a96 <__multadd+0x12>
 8009abc:	b30e      	cbz	r6, 8009b02 <__multadd+0x7e>
 8009abe:	68a3      	ldr	r3, [r4, #8]
 8009ac0:	42ab      	cmp	r3, r5
 8009ac2:	dc19      	bgt.n	8009af8 <__multadd+0x74>
 8009ac4:	6861      	ldr	r1, [r4, #4]
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	3101      	adds	r1, #1
 8009aca:	f7ff ff79 	bl	80099c0 <_Balloc>
 8009ace:	4680      	mov	r8, r0
 8009ad0:	b928      	cbnz	r0, 8009ade <__multadd+0x5a>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	21ba      	movs	r1, #186	; 0xba
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <__multadd+0x84>)
 8009ad8:	480c      	ldr	r0, [pc, #48]	; (8009b0c <__multadd+0x88>)
 8009ada:	f000 fecb 	bl	800a874 <__assert_func>
 8009ade:	6922      	ldr	r2, [r4, #16]
 8009ae0:	f104 010c 	add.w	r1, r4, #12
 8009ae4:	3202      	adds	r2, #2
 8009ae6:	0092      	lsls	r2, r2, #2
 8009ae8:	300c      	adds	r0, #12
 8009aea:	f7fe fc7d 	bl	80083e8 <memcpy>
 8009aee:	4621      	mov	r1, r4
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff ffa5 	bl	8009a40 <_Bfree>
 8009af6:	4644      	mov	r4, r8
 8009af8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009afc:	3501      	adds	r5, #1
 8009afe:	615e      	str	r6, [r3, #20]
 8009b00:	6125      	str	r5, [r4, #16]
 8009b02:	4620      	mov	r0, r4
 8009b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b08:	0800b597 	.word	0x0800b597
 8009b0c:	0800b608 	.word	0x0800b608

08009b10 <__s2b>:
 8009b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b14:	4615      	mov	r5, r2
 8009b16:	2209      	movs	r2, #9
 8009b18:	461f      	mov	r7, r3
 8009b1a:	3308      	adds	r3, #8
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b22:	4606      	mov	r6, r0
 8009b24:	2201      	movs	r2, #1
 8009b26:	2100      	movs	r1, #0
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	db09      	blt.n	8009b40 <__s2b+0x30>
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff ff47 	bl	80099c0 <_Balloc>
 8009b32:	b940      	cbnz	r0, 8009b46 <__s2b+0x36>
 8009b34:	4602      	mov	r2, r0
 8009b36:	21d3      	movs	r1, #211	; 0xd3
 8009b38:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <__s2b+0x8c>)
 8009b3a:	4819      	ldr	r0, [pc, #100]	; (8009ba0 <__s2b+0x90>)
 8009b3c:	f000 fe9a 	bl	800a874 <__assert_func>
 8009b40:	0052      	lsls	r2, r2, #1
 8009b42:	3101      	adds	r1, #1
 8009b44:	e7f0      	b.n	8009b28 <__s2b+0x18>
 8009b46:	9b08      	ldr	r3, [sp, #32]
 8009b48:	2d09      	cmp	r5, #9
 8009b4a:	6143      	str	r3, [r0, #20]
 8009b4c:	f04f 0301 	mov.w	r3, #1
 8009b50:	6103      	str	r3, [r0, #16]
 8009b52:	dd16      	ble.n	8009b82 <__s2b+0x72>
 8009b54:	f104 0909 	add.w	r9, r4, #9
 8009b58:	46c8      	mov	r8, r9
 8009b5a:	442c      	add	r4, r5
 8009b5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b60:	4601      	mov	r1, r0
 8009b62:	220a      	movs	r2, #10
 8009b64:	4630      	mov	r0, r6
 8009b66:	3b30      	subs	r3, #48	; 0x30
 8009b68:	f7ff ff8c 	bl	8009a84 <__multadd>
 8009b6c:	45a0      	cmp	r8, r4
 8009b6e:	d1f5      	bne.n	8009b5c <__s2b+0x4c>
 8009b70:	f1a5 0408 	sub.w	r4, r5, #8
 8009b74:	444c      	add	r4, r9
 8009b76:	1b2d      	subs	r5, r5, r4
 8009b78:	1963      	adds	r3, r4, r5
 8009b7a:	42bb      	cmp	r3, r7
 8009b7c:	db04      	blt.n	8009b88 <__s2b+0x78>
 8009b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b82:	2509      	movs	r5, #9
 8009b84:	340a      	adds	r4, #10
 8009b86:	e7f6      	b.n	8009b76 <__s2b+0x66>
 8009b88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b8c:	4601      	mov	r1, r0
 8009b8e:	220a      	movs	r2, #10
 8009b90:	4630      	mov	r0, r6
 8009b92:	3b30      	subs	r3, #48	; 0x30
 8009b94:	f7ff ff76 	bl	8009a84 <__multadd>
 8009b98:	e7ee      	b.n	8009b78 <__s2b+0x68>
 8009b9a:	bf00      	nop
 8009b9c:	0800b597 	.word	0x0800b597
 8009ba0:	0800b608 	.word	0x0800b608

08009ba4 <__hi0bits>:
 8009ba4:	0c02      	lsrs	r2, r0, #16
 8009ba6:	0412      	lsls	r2, r2, #16
 8009ba8:	4603      	mov	r3, r0
 8009baa:	b9ca      	cbnz	r2, 8009be0 <__hi0bits+0x3c>
 8009bac:	0403      	lsls	r3, r0, #16
 8009bae:	2010      	movs	r0, #16
 8009bb0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009bb4:	bf04      	itt	eq
 8009bb6:	021b      	lsleq	r3, r3, #8
 8009bb8:	3008      	addeq	r0, #8
 8009bba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009bbe:	bf04      	itt	eq
 8009bc0:	011b      	lsleq	r3, r3, #4
 8009bc2:	3004      	addeq	r0, #4
 8009bc4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009bc8:	bf04      	itt	eq
 8009bca:	009b      	lsleq	r3, r3, #2
 8009bcc:	3002      	addeq	r0, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	db05      	blt.n	8009bde <__hi0bits+0x3a>
 8009bd2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009bd6:	f100 0001 	add.w	r0, r0, #1
 8009bda:	bf08      	it	eq
 8009bdc:	2020      	moveq	r0, #32
 8009bde:	4770      	bx	lr
 8009be0:	2000      	movs	r0, #0
 8009be2:	e7e5      	b.n	8009bb0 <__hi0bits+0xc>

08009be4 <__lo0bits>:
 8009be4:	6803      	ldr	r3, [r0, #0]
 8009be6:	4602      	mov	r2, r0
 8009be8:	f013 0007 	ands.w	r0, r3, #7
 8009bec:	d00b      	beq.n	8009c06 <__lo0bits+0x22>
 8009bee:	07d9      	lsls	r1, r3, #31
 8009bf0:	d421      	bmi.n	8009c36 <__lo0bits+0x52>
 8009bf2:	0798      	lsls	r0, r3, #30
 8009bf4:	bf49      	itett	mi
 8009bf6:	085b      	lsrmi	r3, r3, #1
 8009bf8:	089b      	lsrpl	r3, r3, #2
 8009bfa:	2001      	movmi	r0, #1
 8009bfc:	6013      	strmi	r3, [r2, #0]
 8009bfe:	bf5c      	itt	pl
 8009c00:	2002      	movpl	r0, #2
 8009c02:	6013      	strpl	r3, [r2, #0]
 8009c04:	4770      	bx	lr
 8009c06:	b299      	uxth	r1, r3
 8009c08:	b909      	cbnz	r1, 8009c0e <__lo0bits+0x2a>
 8009c0a:	2010      	movs	r0, #16
 8009c0c:	0c1b      	lsrs	r3, r3, #16
 8009c0e:	b2d9      	uxtb	r1, r3
 8009c10:	b909      	cbnz	r1, 8009c16 <__lo0bits+0x32>
 8009c12:	3008      	adds	r0, #8
 8009c14:	0a1b      	lsrs	r3, r3, #8
 8009c16:	0719      	lsls	r1, r3, #28
 8009c18:	bf04      	itt	eq
 8009c1a:	091b      	lsreq	r3, r3, #4
 8009c1c:	3004      	addeq	r0, #4
 8009c1e:	0799      	lsls	r1, r3, #30
 8009c20:	bf04      	itt	eq
 8009c22:	089b      	lsreq	r3, r3, #2
 8009c24:	3002      	addeq	r0, #2
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d403      	bmi.n	8009c32 <__lo0bits+0x4e>
 8009c2a:	085b      	lsrs	r3, r3, #1
 8009c2c:	f100 0001 	add.w	r0, r0, #1
 8009c30:	d003      	beq.n	8009c3a <__lo0bits+0x56>
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	4770      	bx	lr
 8009c36:	2000      	movs	r0, #0
 8009c38:	4770      	bx	lr
 8009c3a:	2020      	movs	r0, #32
 8009c3c:	4770      	bx	lr
	...

08009c40 <__i2b>:
 8009c40:	b510      	push	{r4, lr}
 8009c42:	460c      	mov	r4, r1
 8009c44:	2101      	movs	r1, #1
 8009c46:	f7ff febb 	bl	80099c0 <_Balloc>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	b928      	cbnz	r0, 8009c5a <__i2b+0x1a>
 8009c4e:	f240 1145 	movw	r1, #325	; 0x145
 8009c52:	4b04      	ldr	r3, [pc, #16]	; (8009c64 <__i2b+0x24>)
 8009c54:	4804      	ldr	r0, [pc, #16]	; (8009c68 <__i2b+0x28>)
 8009c56:	f000 fe0d 	bl	800a874 <__assert_func>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	6144      	str	r4, [r0, #20]
 8009c5e:	6103      	str	r3, [r0, #16]
 8009c60:	bd10      	pop	{r4, pc}
 8009c62:	bf00      	nop
 8009c64:	0800b597 	.word	0x0800b597
 8009c68:	0800b608 	.word	0x0800b608

08009c6c <__multiply>:
 8009c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c70:	4691      	mov	r9, r2
 8009c72:	690a      	ldr	r2, [r1, #16]
 8009c74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c78:	460c      	mov	r4, r1
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	bfbe      	ittt	lt
 8009c7e:	460b      	movlt	r3, r1
 8009c80:	464c      	movlt	r4, r9
 8009c82:	4699      	movlt	r9, r3
 8009c84:	6927      	ldr	r7, [r4, #16]
 8009c86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c8a:	68a3      	ldr	r3, [r4, #8]
 8009c8c:	6861      	ldr	r1, [r4, #4]
 8009c8e:	eb07 060a 	add.w	r6, r7, sl
 8009c92:	42b3      	cmp	r3, r6
 8009c94:	b085      	sub	sp, #20
 8009c96:	bfb8      	it	lt
 8009c98:	3101      	addlt	r1, #1
 8009c9a:	f7ff fe91 	bl	80099c0 <_Balloc>
 8009c9e:	b930      	cbnz	r0, 8009cae <__multiply+0x42>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009ca6:	4b43      	ldr	r3, [pc, #268]	; (8009db4 <__multiply+0x148>)
 8009ca8:	4843      	ldr	r0, [pc, #268]	; (8009db8 <__multiply+0x14c>)
 8009caa:	f000 fde3 	bl	800a874 <__assert_func>
 8009cae:	f100 0514 	add.w	r5, r0, #20
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cba:	4543      	cmp	r3, r8
 8009cbc:	d321      	bcc.n	8009d02 <__multiply+0x96>
 8009cbe:	f104 0314 	add.w	r3, r4, #20
 8009cc2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009cc6:	f109 0314 	add.w	r3, r9, #20
 8009cca:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009cce:	9202      	str	r2, [sp, #8]
 8009cd0:	1b3a      	subs	r2, r7, r4
 8009cd2:	3a15      	subs	r2, #21
 8009cd4:	f022 0203 	bic.w	r2, r2, #3
 8009cd8:	3204      	adds	r2, #4
 8009cda:	f104 0115 	add.w	r1, r4, #21
 8009cde:	428f      	cmp	r7, r1
 8009ce0:	bf38      	it	cc
 8009ce2:	2204      	movcc	r2, #4
 8009ce4:	9201      	str	r2, [sp, #4]
 8009ce6:	9a02      	ldr	r2, [sp, #8]
 8009ce8:	9303      	str	r3, [sp, #12]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d80c      	bhi.n	8009d08 <__multiply+0x9c>
 8009cee:	2e00      	cmp	r6, #0
 8009cf0:	dd03      	ble.n	8009cfa <__multiply+0x8e>
 8009cf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d05a      	beq.n	8009db0 <__multiply+0x144>
 8009cfa:	6106      	str	r6, [r0, #16]
 8009cfc:	b005      	add	sp, #20
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d02:	f843 2b04 	str.w	r2, [r3], #4
 8009d06:	e7d8      	b.n	8009cba <__multiply+0x4e>
 8009d08:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d0c:	f1ba 0f00 	cmp.w	sl, #0
 8009d10:	d023      	beq.n	8009d5a <__multiply+0xee>
 8009d12:	46a9      	mov	r9, r5
 8009d14:	f04f 0c00 	mov.w	ip, #0
 8009d18:	f104 0e14 	add.w	lr, r4, #20
 8009d1c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d20:	f8d9 1000 	ldr.w	r1, [r9]
 8009d24:	fa1f fb82 	uxth.w	fp, r2
 8009d28:	b289      	uxth	r1, r1
 8009d2a:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d2e:	4461      	add	r1, ip
 8009d30:	f8d9 c000 	ldr.w	ip, [r9]
 8009d34:	0c12      	lsrs	r2, r2, #16
 8009d36:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009d3a:	fb0a c202 	mla	r2, sl, r2, ip
 8009d3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d42:	b289      	uxth	r1, r1
 8009d44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d48:	4577      	cmp	r7, lr
 8009d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d4e:	f849 1b04 	str.w	r1, [r9], #4
 8009d52:	d8e3      	bhi.n	8009d1c <__multiply+0xb0>
 8009d54:	9a01      	ldr	r2, [sp, #4]
 8009d56:	f845 c002 	str.w	ip, [r5, r2]
 8009d5a:	9a03      	ldr	r2, [sp, #12]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d62:	f1b9 0f00 	cmp.w	r9, #0
 8009d66:	d021      	beq.n	8009dac <__multiply+0x140>
 8009d68:	46ae      	mov	lr, r5
 8009d6a:	f04f 0a00 	mov.w	sl, #0
 8009d6e:	6829      	ldr	r1, [r5, #0]
 8009d70:	f104 0c14 	add.w	ip, r4, #20
 8009d74:	f8bc b000 	ldrh.w	fp, [ip]
 8009d78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d7c:	b289      	uxth	r1, r1
 8009d7e:	fb09 220b 	mla	r2, r9, fp, r2
 8009d82:	4452      	add	r2, sl
 8009d84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d88:	f84e 1b04 	str.w	r1, [lr], #4
 8009d8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d94:	f8be 1000 	ldrh.w	r1, [lr]
 8009d98:	4567      	cmp	r7, ip
 8009d9a:	fb09 110a 	mla	r1, r9, sl, r1
 8009d9e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009da2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009da6:	d8e5      	bhi.n	8009d74 <__multiply+0x108>
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	50a9      	str	r1, [r5, r2]
 8009dac:	3504      	adds	r5, #4
 8009dae:	e79a      	b.n	8009ce6 <__multiply+0x7a>
 8009db0:	3e01      	subs	r6, #1
 8009db2:	e79c      	b.n	8009cee <__multiply+0x82>
 8009db4:	0800b597 	.word	0x0800b597
 8009db8:	0800b608 	.word	0x0800b608

08009dbc <__pow5mult>:
 8009dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc0:	4615      	mov	r5, r2
 8009dc2:	f012 0203 	ands.w	r2, r2, #3
 8009dc6:	4606      	mov	r6, r0
 8009dc8:	460f      	mov	r7, r1
 8009dca:	d007      	beq.n	8009ddc <__pow5mult+0x20>
 8009dcc:	4c25      	ldr	r4, [pc, #148]	; (8009e64 <__pow5mult+0xa8>)
 8009dce:	3a01      	subs	r2, #1
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dd6:	f7ff fe55 	bl	8009a84 <__multadd>
 8009dda:	4607      	mov	r7, r0
 8009ddc:	10ad      	asrs	r5, r5, #2
 8009dde:	d03d      	beq.n	8009e5c <__pow5mult+0xa0>
 8009de0:	69f4      	ldr	r4, [r6, #28]
 8009de2:	b97c      	cbnz	r4, 8009e04 <__pow5mult+0x48>
 8009de4:	2010      	movs	r0, #16
 8009de6:	f7ff fd25 	bl	8009834 <malloc>
 8009dea:	4602      	mov	r2, r0
 8009dec:	61f0      	str	r0, [r6, #28]
 8009dee:	b928      	cbnz	r0, 8009dfc <__pow5mult+0x40>
 8009df0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009df4:	4b1c      	ldr	r3, [pc, #112]	; (8009e68 <__pow5mult+0xac>)
 8009df6:	481d      	ldr	r0, [pc, #116]	; (8009e6c <__pow5mult+0xb0>)
 8009df8:	f000 fd3c 	bl	800a874 <__assert_func>
 8009dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e00:	6004      	str	r4, [r0, #0]
 8009e02:	60c4      	str	r4, [r0, #12]
 8009e04:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e0c:	b94c      	cbnz	r4, 8009e22 <__pow5mult+0x66>
 8009e0e:	f240 2171 	movw	r1, #625	; 0x271
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff ff14 	bl	8009c40 <__i2b>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e20:	6003      	str	r3, [r0, #0]
 8009e22:	f04f 0900 	mov.w	r9, #0
 8009e26:	07eb      	lsls	r3, r5, #31
 8009e28:	d50a      	bpl.n	8009e40 <__pow5mult+0x84>
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	4622      	mov	r2, r4
 8009e2e:	4630      	mov	r0, r6
 8009e30:	f7ff ff1c 	bl	8009c6c <__multiply>
 8009e34:	4680      	mov	r8, r0
 8009e36:	4639      	mov	r1, r7
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7ff fe01 	bl	8009a40 <_Bfree>
 8009e3e:	4647      	mov	r7, r8
 8009e40:	106d      	asrs	r5, r5, #1
 8009e42:	d00b      	beq.n	8009e5c <__pow5mult+0xa0>
 8009e44:	6820      	ldr	r0, [r4, #0]
 8009e46:	b938      	cbnz	r0, 8009e58 <__pow5mult+0x9c>
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f7ff ff0d 	bl	8009c6c <__multiply>
 8009e52:	6020      	str	r0, [r4, #0]
 8009e54:	f8c0 9000 	str.w	r9, [r0]
 8009e58:	4604      	mov	r4, r0
 8009e5a:	e7e4      	b.n	8009e26 <__pow5mult+0x6a>
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e62:	bf00      	nop
 8009e64:	0800b758 	.word	0x0800b758
 8009e68:	0800b528 	.word	0x0800b528
 8009e6c:	0800b608 	.word	0x0800b608

08009e70 <__lshift>:
 8009e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e74:	460c      	mov	r4, r1
 8009e76:	4607      	mov	r7, r0
 8009e78:	4691      	mov	r9, r2
 8009e7a:	6923      	ldr	r3, [r4, #16]
 8009e7c:	6849      	ldr	r1, [r1, #4]
 8009e7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e88:	f108 0601 	add.w	r6, r8, #1
 8009e8c:	42b3      	cmp	r3, r6
 8009e8e:	db0b      	blt.n	8009ea8 <__lshift+0x38>
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7ff fd95 	bl	80099c0 <_Balloc>
 8009e96:	4605      	mov	r5, r0
 8009e98:	b948      	cbnz	r0, 8009eae <__lshift+0x3e>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ea0:	4b27      	ldr	r3, [pc, #156]	; (8009f40 <__lshift+0xd0>)
 8009ea2:	4828      	ldr	r0, [pc, #160]	; (8009f44 <__lshift+0xd4>)
 8009ea4:	f000 fce6 	bl	800a874 <__assert_func>
 8009ea8:	3101      	adds	r1, #1
 8009eaa:	005b      	lsls	r3, r3, #1
 8009eac:	e7ee      	b.n	8009e8c <__lshift+0x1c>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f100 0114 	add.w	r1, r0, #20
 8009eb4:	f100 0210 	add.w	r2, r0, #16
 8009eb8:	4618      	mov	r0, r3
 8009eba:	4553      	cmp	r3, sl
 8009ebc:	db33      	blt.n	8009f26 <__lshift+0xb6>
 8009ebe:	6920      	ldr	r0, [r4, #16]
 8009ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ec4:	f104 0314 	add.w	r3, r4, #20
 8009ec8:	f019 091f 	ands.w	r9, r9, #31
 8009ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ed0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ed4:	d02b      	beq.n	8009f2e <__lshift+0xbe>
 8009ed6:	468a      	mov	sl, r1
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f1c9 0e20 	rsb	lr, r9, #32
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ee4:	4310      	orrs	r0, r2
 8009ee6:	f84a 0b04 	str.w	r0, [sl], #4
 8009eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eee:	459c      	cmp	ip, r3
 8009ef0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ef4:	d8f3      	bhi.n	8009ede <__lshift+0x6e>
 8009ef6:	ebac 0304 	sub.w	r3, ip, r4
 8009efa:	3b15      	subs	r3, #21
 8009efc:	f023 0303 	bic.w	r3, r3, #3
 8009f00:	3304      	adds	r3, #4
 8009f02:	f104 0015 	add.w	r0, r4, #21
 8009f06:	4584      	cmp	ip, r0
 8009f08:	bf38      	it	cc
 8009f0a:	2304      	movcc	r3, #4
 8009f0c:	50ca      	str	r2, [r1, r3]
 8009f0e:	b10a      	cbz	r2, 8009f14 <__lshift+0xa4>
 8009f10:	f108 0602 	add.w	r6, r8, #2
 8009f14:	3e01      	subs	r6, #1
 8009f16:	4638      	mov	r0, r7
 8009f18:	4621      	mov	r1, r4
 8009f1a:	612e      	str	r6, [r5, #16]
 8009f1c:	f7ff fd90 	bl	8009a40 <_Bfree>
 8009f20:	4628      	mov	r0, r5
 8009f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f26:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	e7c5      	b.n	8009eba <__lshift+0x4a>
 8009f2e:	3904      	subs	r1, #4
 8009f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f34:	459c      	cmp	ip, r3
 8009f36:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f3a:	d8f9      	bhi.n	8009f30 <__lshift+0xc0>
 8009f3c:	e7ea      	b.n	8009f14 <__lshift+0xa4>
 8009f3e:	bf00      	nop
 8009f40:	0800b597 	.word	0x0800b597
 8009f44:	0800b608 	.word	0x0800b608

08009f48 <__mcmp>:
 8009f48:	4603      	mov	r3, r0
 8009f4a:	690a      	ldr	r2, [r1, #16]
 8009f4c:	6900      	ldr	r0, [r0, #16]
 8009f4e:	b530      	push	{r4, r5, lr}
 8009f50:	1a80      	subs	r0, r0, r2
 8009f52:	d10d      	bne.n	8009f70 <__mcmp+0x28>
 8009f54:	3314      	adds	r3, #20
 8009f56:	3114      	adds	r1, #20
 8009f58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f68:	4295      	cmp	r5, r2
 8009f6a:	d002      	beq.n	8009f72 <__mcmp+0x2a>
 8009f6c:	d304      	bcc.n	8009f78 <__mcmp+0x30>
 8009f6e:	2001      	movs	r0, #1
 8009f70:	bd30      	pop	{r4, r5, pc}
 8009f72:	42a3      	cmp	r3, r4
 8009f74:	d3f4      	bcc.n	8009f60 <__mcmp+0x18>
 8009f76:	e7fb      	b.n	8009f70 <__mcmp+0x28>
 8009f78:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7c:	e7f8      	b.n	8009f70 <__mcmp+0x28>
	...

08009f80 <__mdiff>:
 8009f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	460d      	mov	r5, r1
 8009f86:	4607      	mov	r7, r0
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	4614      	mov	r4, r2
 8009f8e:	f7ff ffdb 	bl	8009f48 <__mcmp>
 8009f92:	1e06      	subs	r6, r0, #0
 8009f94:	d111      	bne.n	8009fba <__mdiff+0x3a>
 8009f96:	4631      	mov	r1, r6
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff fd11 	bl	80099c0 <_Balloc>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	b928      	cbnz	r0, 8009fae <__mdiff+0x2e>
 8009fa2:	f240 2137 	movw	r1, #567	; 0x237
 8009fa6:	4b3a      	ldr	r3, [pc, #232]	; (800a090 <__mdiff+0x110>)
 8009fa8:	483a      	ldr	r0, [pc, #232]	; (800a094 <__mdiff+0x114>)
 8009faa:	f000 fc63 	bl	800a874 <__assert_func>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fba:	bfa4      	itt	ge
 8009fbc:	4623      	movge	r3, r4
 8009fbe:	462c      	movge	r4, r5
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	6861      	ldr	r1, [r4, #4]
 8009fc4:	bfa6      	itte	ge
 8009fc6:	461d      	movge	r5, r3
 8009fc8:	2600      	movge	r6, #0
 8009fca:	2601      	movlt	r6, #1
 8009fcc:	f7ff fcf8 	bl	80099c0 <_Balloc>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	b918      	cbnz	r0, 8009fdc <__mdiff+0x5c>
 8009fd4:	f240 2145 	movw	r1, #581	; 0x245
 8009fd8:	4b2d      	ldr	r3, [pc, #180]	; (800a090 <__mdiff+0x110>)
 8009fda:	e7e5      	b.n	8009fa8 <__mdiff+0x28>
 8009fdc:	f102 0814 	add.w	r8, r2, #20
 8009fe0:	46c2      	mov	sl, r8
 8009fe2:	f04f 0c00 	mov.w	ip, #0
 8009fe6:	6927      	ldr	r7, [r4, #16]
 8009fe8:	60c6      	str	r6, [r0, #12]
 8009fea:	692e      	ldr	r6, [r5, #16]
 8009fec:	f104 0014 	add.w	r0, r4, #20
 8009ff0:	f105 0914 	add.w	r9, r5, #20
 8009ff4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009ff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009ffc:	3410      	adds	r4, #16
 8009ffe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a002:	f859 3b04 	ldr.w	r3, [r9], #4
 800a006:	fa1f f18b 	uxth.w	r1, fp
 800a00a:	4461      	add	r1, ip
 800a00c:	fa1f fc83 	uxth.w	ip, r3
 800a010:	0c1b      	lsrs	r3, r3, #16
 800a012:	eba1 010c 	sub.w	r1, r1, ip
 800a016:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a01a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a01e:	b289      	uxth	r1, r1
 800a020:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a024:	454e      	cmp	r6, r9
 800a026:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a02a:	f84a 1b04 	str.w	r1, [sl], #4
 800a02e:	d8e6      	bhi.n	8009ffe <__mdiff+0x7e>
 800a030:	1b73      	subs	r3, r6, r5
 800a032:	3b15      	subs	r3, #21
 800a034:	f023 0303 	bic.w	r3, r3, #3
 800a038:	3515      	adds	r5, #21
 800a03a:	3304      	adds	r3, #4
 800a03c:	42ae      	cmp	r6, r5
 800a03e:	bf38      	it	cc
 800a040:	2304      	movcc	r3, #4
 800a042:	4418      	add	r0, r3
 800a044:	4443      	add	r3, r8
 800a046:	461e      	mov	r6, r3
 800a048:	4605      	mov	r5, r0
 800a04a:	4575      	cmp	r5, lr
 800a04c:	d30e      	bcc.n	800a06c <__mdiff+0xec>
 800a04e:	f10e 0103 	add.w	r1, lr, #3
 800a052:	1a09      	subs	r1, r1, r0
 800a054:	f021 0103 	bic.w	r1, r1, #3
 800a058:	3803      	subs	r0, #3
 800a05a:	4586      	cmp	lr, r0
 800a05c:	bf38      	it	cc
 800a05e:	2100      	movcc	r1, #0
 800a060:	440b      	add	r3, r1
 800a062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a066:	b189      	cbz	r1, 800a08c <__mdiff+0x10c>
 800a068:	6117      	str	r7, [r2, #16]
 800a06a:	e7a3      	b.n	8009fb4 <__mdiff+0x34>
 800a06c:	f855 8b04 	ldr.w	r8, [r5], #4
 800a070:	fa1f f188 	uxth.w	r1, r8
 800a074:	4461      	add	r1, ip
 800a076:	140c      	asrs	r4, r1, #16
 800a078:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a07c:	b289      	uxth	r1, r1
 800a07e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a082:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a086:	f846 1b04 	str.w	r1, [r6], #4
 800a08a:	e7de      	b.n	800a04a <__mdiff+0xca>
 800a08c:	3f01      	subs	r7, #1
 800a08e:	e7e8      	b.n	800a062 <__mdiff+0xe2>
 800a090:	0800b597 	.word	0x0800b597
 800a094:	0800b608 	.word	0x0800b608

0800a098 <__ulp>:
 800a098:	4b0e      	ldr	r3, [pc, #56]	; (800a0d4 <__ulp+0x3c>)
 800a09a:	400b      	ands	r3, r1
 800a09c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	dc08      	bgt.n	800a0b6 <__ulp+0x1e>
 800a0a4:	425b      	negs	r3, r3
 800a0a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a0aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a0ae:	da04      	bge.n	800a0ba <__ulp+0x22>
 800a0b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a0b4:	4113      	asrs	r3, r2
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	e008      	b.n	800a0cc <__ulp+0x34>
 800a0ba:	f1a2 0314 	sub.w	r3, r2, #20
 800a0be:	2b1e      	cmp	r3, #30
 800a0c0:	bfd6      	itet	le
 800a0c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a0c6:	2201      	movgt	r2, #1
 800a0c8:	40da      	lsrle	r2, r3
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	7ff00000 	.word	0x7ff00000

0800a0d8 <__b2d>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	6905      	ldr	r5, [r0, #16]
 800a0dc:	f100 0714 	add.w	r7, r0, #20
 800a0e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a0e4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a0e8:	1f2e      	subs	r6, r5, #4
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7ff fd5a 	bl	8009ba4 <__hi0bits>
 800a0f0:	f1c0 0220 	rsb	r2, r0, #32
 800a0f4:	280a      	cmp	r0, #10
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	f8df c068 	ldr.w	ip, [pc, #104]	; 800a164 <__b2d+0x8c>
 800a0fc:	600a      	str	r2, [r1, #0]
 800a0fe:	dc12      	bgt.n	800a126 <__b2d+0x4e>
 800a100:	f1c0 0e0b 	rsb	lr, r0, #11
 800a104:	fa24 f20e 	lsr.w	r2, r4, lr
 800a108:	42b7      	cmp	r7, r6
 800a10a:	ea42 010c 	orr.w	r1, r2, ip
 800a10e:	bf2c      	ite	cs
 800a110:	2200      	movcs	r2, #0
 800a112:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a116:	3315      	adds	r3, #21
 800a118:	fa04 f303 	lsl.w	r3, r4, r3
 800a11c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a120:	431a      	orrs	r2, r3
 800a122:	4610      	mov	r0, r2
 800a124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a126:	42b7      	cmp	r7, r6
 800a128:	bf2e      	itee	cs
 800a12a:	2200      	movcs	r2, #0
 800a12c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800a130:	f1a5 0608 	subcc.w	r6, r5, #8
 800a134:	3b0b      	subs	r3, #11
 800a136:	d012      	beq.n	800a15e <__b2d+0x86>
 800a138:	f1c3 0520 	rsb	r5, r3, #32
 800a13c:	fa22 f105 	lsr.w	r1, r2, r5
 800a140:	409c      	lsls	r4, r3
 800a142:	430c      	orrs	r4, r1
 800a144:	42be      	cmp	r6, r7
 800a146:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800a14a:	bf94      	ite	ls
 800a14c:	2400      	movls	r4, #0
 800a14e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a152:	409a      	lsls	r2, r3
 800a154:	40ec      	lsrs	r4, r5
 800a156:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a15a:	4322      	orrs	r2, r4
 800a15c:	e7e1      	b.n	800a122 <__b2d+0x4a>
 800a15e:	ea44 010c 	orr.w	r1, r4, ip
 800a162:	e7de      	b.n	800a122 <__b2d+0x4a>
 800a164:	3ff00000 	.word	0x3ff00000

0800a168 <__d2b>:
 800a168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a16a:	2101      	movs	r1, #1
 800a16c:	4617      	mov	r7, r2
 800a16e:	461c      	mov	r4, r3
 800a170:	9e08      	ldr	r6, [sp, #32]
 800a172:	f7ff fc25 	bl	80099c0 <_Balloc>
 800a176:	4605      	mov	r5, r0
 800a178:	b930      	cbnz	r0, 800a188 <__d2b+0x20>
 800a17a:	4602      	mov	r2, r0
 800a17c:	f240 310f 	movw	r1, #783	; 0x30f
 800a180:	4b22      	ldr	r3, [pc, #136]	; (800a20c <__d2b+0xa4>)
 800a182:	4823      	ldr	r0, [pc, #140]	; (800a210 <__d2b+0xa8>)
 800a184:	f000 fb76 	bl	800a874 <__assert_func>
 800a188:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a18c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a190:	bb24      	cbnz	r4, 800a1dc <__d2b+0x74>
 800a192:	2f00      	cmp	r7, #0
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	d026      	beq.n	800a1e6 <__d2b+0x7e>
 800a198:	4668      	mov	r0, sp
 800a19a:	9700      	str	r7, [sp, #0]
 800a19c:	f7ff fd22 	bl	8009be4 <__lo0bits>
 800a1a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1a4:	b1e8      	cbz	r0, 800a1e2 <__d2b+0x7a>
 800a1a6:	f1c0 0320 	rsb	r3, r0, #32
 800a1aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	40c2      	lsrs	r2, r0
 800a1b2:	616b      	str	r3, [r5, #20]
 800a1b4:	9201      	str	r2, [sp, #4]
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	bf14      	ite	ne
 800a1bc:	2102      	movne	r1, #2
 800a1be:	2101      	moveq	r1, #1
 800a1c0:	61ab      	str	r3, [r5, #24]
 800a1c2:	6129      	str	r1, [r5, #16]
 800a1c4:	b1bc      	cbz	r4, 800a1f6 <__d2b+0x8e>
 800a1c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a1ca:	4404      	add	r4, r0
 800a1cc:	6034      	str	r4, [r6, #0]
 800a1ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	6018      	str	r0, [r3, #0]
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	b003      	add	sp, #12
 800a1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1e0:	e7d7      	b.n	800a192 <__d2b+0x2a>
 800a1e2:	6169      	str	r1, [r5, #20]
 800a1e4:	e7e7      	b.n	800a1b6 <__d2b+0x4e>
 800a1e6:	a801      	add	r0, sp, #4
 800a1e8:	f7ff fcfc 	bl	8009be4 <__lo0bits>
 800a1ec:	9b01      	ldr	r3, [sp, #4]
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	616b      	str	r3, [r5, #20]
 800a1f2:	3020      	adds	r0, #32
 800a1f4:	e7e5      	b.n	800a1c2 <__d2b+0x5a>
 800a1f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1fa:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a1fe:	6030      	str	r0, [r6, #0]
 800a200:	6918      	ldr	r0, [r3, #16]
 800a202:	f7ff fccf 	bl	8009ba4 <__hi0bits>
 800a206:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a20a:	e7e2      	b.n	800a1d2 <__d2b+0x6a>
 800a20c:	0800b597 	.word	0x0800b597
 800a210:	0800b608 	.word	0x0800b608

0800a214 <__ratio>:
 800a214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a218:	4688      	mov	r8, r1
 800a21a:	4669      	mov	r1, sp
 800a21c:	4681      	mov	r9, r0
 800a21e:	f7ff ff5b 	bl	800a0d8 <__b2d>
 800a222:	460f      	mov	r7, r1
 800a224:	4604      	mov	r4, r0
 800a226:	460d      	mov	r5, r1
 800a228:	4640      	mov	r0, r8
 800a22a:	a901      	add	r1, sp, #4
 800a22c:	f7ff ff54 	bl	800a0d8 <__b2d>
 800a230:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a234:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a238:	468b      	mov	fp, r1
 800a23a:	eba3 0c02 	sub.w	ip, r3, r2
 800a23e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a242:	1a9b      	subs	r3, r3, r2
 800a244:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a248:	2b00      	cmp	r3, #0
 800a24a:	bfd5      	itete	le
 800a24c:	460a      	movle	r2, r1
 800a24e:	462a      	movgt	r2, r5
 800a250:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a254:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a258:	bfd8      	it	le
 800a25a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a25e:	465b      	mov	r3, fp
 800a260:	4602      	mov	r2, r0
 800a262:	4639      	mov	r1, r7
 800a264:	4620      	mov	r0, r4
 800a266:	f7f6 fa6b 	bl	8000740 <__aeabi_ddiv>
 800a26a:	b003      	add	sp, #12
 800a26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a270 <__copybits>:
 800a270:	3901      	subs	r1, #1
 800a272:	b570      	push	{r4, r5, r6, lr}
 800a274:	1149      	asrs	r1, r1, #5
 800a276:	6914      	ldr	r4, [r2, #16]
 800a278:	3101      	adds	r1, #1
 800a27a:	f102 0314 	add.w	r3, r2, #20
 800a27e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a282:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a286:	1f05      	subs	r5, r0, #4
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d30c      	bcc.n	800a2a6 <__copybits+0x36>
 800a28c:	1aa3      	subs	r3, r4, r2
 800a28e:	3b11      	subs	r3, #17
 800a290:	f023 0303 	bic.w	r3, r3, #3
 800a294:	3211      	adds	r2, #17
 800a296:	42a2      	cmp	r2, r4
 800a298:	bf88      	it	hi
 800a29a:	2300      	movhi	r3, #0
 800a29c:	4418      	add	r0, r3
 800a29e:	2300      	movs	r3, #0
 800a2a0:	4288      	cmp	r0, r1
 800a2a2:	d305      	bcc.n	800a2b0 <__copybits+0x40>
 800a2a4:	bd70      	pop	{r4, r5, r6, pc}
 800a2a6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2aa:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2ae:	e7eb      	b.n	800a288 <__copybits+0x18>
 800a2b0:	f840 3b04 	str.w	r3, [r0], #4
 800a2b4:	e7f4      	b.n	800a2a0 <__copybits+0x30>

0800a2b6 <__any_on>:
 800a2b6:	f100 0214 	add.w	r2, r0, #20
 800a2ba:	6900      	ldr	r0, [r0, #16]
 800a2bc:	114b      	asrs	r3, r1, #5
 800a2be:	4298      	cmp	r0, r3
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	db11      	blt.n	800a2e8 <__any_on+0x32>
 800a2c4:	dd0a      	ble.n	800a2dc <__any_on+0x26>
 800a2c6:	f011 011f 	ands.w	r1, r1, #31
 800a2ca:	d007      	beq.n	800a2dc <__any_on+0x26>
 800a2cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2d0:	fa24 f001 	lsr.w	r0, r4, r1
 800a2d4:	fa00 f101 	lsl.w	r1, r0, r1
 800a2d8:	428c      	cmp	r4, r1
 800a2da:	d10b      	bne.n	800a2f4 <__any_on+0x3e>
 800a2dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d803      	bhi.n	800a2ec <__any_on+0x36>
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	bd10      	pop	{r4, pc}
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	e7f7      	b.n	800a2dc <__any_on+0x26>
 800a2ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	d0f5      	beq.n	800a2e0 <__any_on+0x2a>
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	e7f6      	b.n	800a2e6 <__any_on+0x30>

0800a2f8 <__ascii_wctomb>:
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	4608      	mov	r0, r1
 800a2fc:	b141      	cbz	r1, 800a310 <__ascii_wctomb+0x18>
 800a2fe:	2aff      	cmp	r2, #255	; 0xff
 800a300:	d904      	bls.n	800a30c <__ascii_wctomb+0x14>
 800a302:	228a      	movs	r2, #138	; 0x8a
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	601a      	str	r2, [r3, #0]
 800a30a:	4770      	bx	lr
 800a30c:	2001      	movs	r0, #1
 800a30e:	700a      	strb	r2, [r1, #0]
 800a310:	4770      	bx	lr

0800a312 <__ssputs_r>:
 800a312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a316:	461f      	mov	r7, r3
 800a318:	688e      	ldr	r6, [r1, #8]
 800a31a:	4682      	mov	sl, r0
 800a31c:	42be      	cmp	r6, r7
 800a31e:	460c      	mov	r4, r1
 800a320:	4690      	mov	r8, r2
 800a322:	680b      	ldr	r3, [r1, #0]
 800a324:	d82c      	bhi.n	800a380 <__ssputs_r+0x6e>
 800a326:	898a      	ldrh	r2, [r1, #12]
 800a328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a32c:	d026      	beq.n	800a37c <__ssputs_r+0x6a>
 800a32e:	6965      	ldr	r5, [r4, #20]
 800a330:	6909      	ldr	r1, [r1, #16]
 800a332:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a336:	eba3 0901 	sub.w	r9, r3, r1
 800a33a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a33e:	1c7b      	adds	r3, r7, #1
 800a340:	444b      	add	r3, r9
 800a342:	106d      	asrs	r5, r5, #1
 800a344:	429d      	cmp	r5, r3
 800a346:	bf38      	it	cc
 800a348:	461d      	movcc	r5, r3
 800a34a:	0553      	lsls	r3, r2, #21
 800a34c:	d527      	bpl.n	800a39e <__ssputs_r+0x8c>
 800a34e:	4629      	mov	r1, r5
 800a350:	f7ff fa98 	bl	8009884 <_malloc_r>
 800a354:	4606      	mov	r6, r0
 800a356:	b360      	cbz	r0, 800a3b2 <__ssputs_r+0xa0>
 800a358:	464a      	mov	r2, r9
 800a35a:	6921      	ldr	r1, [r4, #16]
 800a35c:	f7fe f844 	bl	80083e8 <memcpy>
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	6126      	str	r6, [r4, #16]
 800a36e:	444e      	add	r6, r9
 800a370:	6026      	str	r6, [r4, #0]
 800a372:	463e      	mov	r6, r7
 800a374:	6165      	str	r5, [r4, #20]
 800a376:	eba5 0509 	sub.w	r5, r5, r9
 800a37a:	60a5      	str	r5, [r4, #8]
 800a37c:	42be      	cmp	r6, r7
 800a37e:	d900      	bls.n	800a382 <__ssputs_r+0x70>
 800a380:	463e      	mov	r6, r7
 800a382:	4632      	mov	r2, r6
 800a384:	4641      	mov	r1, r8
 800a386:	6820      	ldr	r0, [r4, #0]
 800a388:	f000 fa27 	bl	800a7da <memmove>
 800a38c:	2000      	movs	r0, #0
 800a38e:	68a3      	ldr	r3, [r4, #8]
 800a390:	1b9b      	subs	r3, r3, r6
 800a392:	60a3      	str	r3, [r4, #8]
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	4433      	add	r3, r6
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a39e:	462a      	mov	r2, r5
 800a3a0:	f000 fa9a 	bl	800a8d8 <_realloc_r>
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d1e0      	bne.n	800a36c <__ssputs_r+0x5a>
 800a3aa:	4650      	mov	r0, sl
 800a3ac:	6921      	ldr	r1, [r4, #16]
 800a3ae:	f7fe fe9f 	bl	80090f0 <_free_r>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	f8ca 3000 	str.w	r3, [sl]
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	e7e9      	b.n	800a39a <__ssputs_r+0x88>
	...

0800a3c8 <_svfiprintf_r>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	4698      	mov	r8, r3
 800a3ce:	898b      	ldrh	r3, [r1, #12]
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	061b      	lsls	r3, r3, #24
 800a3d4:	460d      	mov	r5, r1
 800a3d6:	4614      	mov	r4, r2
 800a3d8:	b09d      	sub	sp, #116	; 0x74
 800a3da:	d50e      	bpl.n	800a3fa <_svfiprintf_r+0x32>
 800a3dc:	690b      	ldr	r3, [r1, #16]
 800a3de:	b963      	cbnz	r3, 800a3fa <_svfiprintf_r+0x32>
 800a3e0:	2140      	movs	r1, #64	; 0x40
 800a3e2:	f7ff fa4f 	bl	8009884 <_malloc_r>
 800a3e6:	6028      	str	r0, [r5, #0]
 800a3e8:	6128      	str	r0, [r5, #16]
 800a3ea:	b920      	cbnz	r0, 800a3f6 <_svfiprintf_r+0x2e>
 800a3ec:	230c      	movs	r3, #12
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f4:	e0d0      	b.n	800a598 <_svfiprintf_r+0x1d0>
 800a3f6:	2340      	movs	r3, #64	; 0x40
 800a3f8:	616b      	str	r3, [r5, #20]
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3fe:	2320      	movs	r3, #32
 800a400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a404:	2330      	movs	r3, #48	; 0x30
 800a406:	f04f 0901 	mov.w	r9, #1
 800a40a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a40e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800a5b0 <_svfiprintf_r+0x1e8>
 800a412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a416:	4623      	mov	r3, r4
 800a418:	469a      	mov	sl, r3
 800a41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a41e:	b10a      	cbz	r2, 800a424 <_svfiprintf_r+0x5c>
 800a420:	2a25      	cmp	r2, #37	; 0x25
 800a422:	d1f9      	bne.n	800a418 <_svfiprintf_r+0x50>
 800a424:	ebba 0b04 	subs.w	fp, sl, r4
 800a428:	d00b      	beq.n	800a442 <_svfiprintf_r+0x7a>
 800a42a:	465b      	mov	r3, fp
 800a42c:	4622      	mov	r2, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ff6e 	bl	800a312 <__ssputs_r>
 800a436:	3001      	adds	r0, #1
 800a438:	f000 80a9 	beq.w	800a58e <_svfiprintf_r+0x1c6>
 800a43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a43e:	445a      	add	r2, fp
 800a440:	9209      	str	r2, [sp, #36]	; 0x24
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f000 80a1 	beq.w	800a58e <_svfiprintf_r+0x1c6>
 800a44c:	2300      	movs	r3, #0
 800a44e:	f04f 32ff 	mov.w	r2, #4294967295
 800a452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a456:	f10a 0a01 	add.w	sl, sl, #1
 800a45a:	9304      	str	r3, [sp, #16]
 800a45c:	9307      	str	r3, [sp, #28]
 800a45e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a462:	931a      	str	r3, [sp, #104]	; 0x68
 800a464:	4654      	mov	r4, sl
 800a466:	2205      	movs	r2, #5
 800a468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46c:	4850      	ldr	r0, [pc, #320]	; (800a5b0 <_svfiprintf_r+0x1e8>)
 800a46e:	f7fd ffad 	bl	80083cc <memchr>
 800a472:	9a04      	ldr	r2, [sp, #16]
 800a474:	b9d8      	cbnz	r0, 800a4ae <_svfiprintf_r+0xe6>
 800a476:	06d0      	lsls	r0, r2, #27
 800a478:	bf44      	itt	mi
 800a47a:	2320      	movmi	r3, #32
 800a47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a480:	0711      	lsls	r1, r2, #28
 800a482:	bf44      	itt	mi
 800a484:	232b      	movmi	r3, #43	; 0x2b
 800a486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a48a:	f89a 3000 	ldrb.w	r3, [sl]
 800a48e:	2b2a      	cmp	r3, #42	; 0x2a
 800a490:	d015      	beq.n	800a4be <_svfiprintf_r+0xf6>
 800a492:	4654      	mov	r4, sl
 800a494:	2000      	movs	r0, #0
 800a496:	f04f 0c0a 	mov.w	ip, #10
 800a49a:	9a07      	ldr	r2, [sp, #28]
 800a49c:	4621      	mov	r1, r4
 800a49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4a2:	3b30      	subs	r3, #48	; 0x30
 800a4a4:	2b09      	cmp	r3, #9
 800a4a6:	d94d      	bls.n	800a544 <_svfiprintf_r+0x17c>
 800a4a8:	b1b0      	cbz	r0, 800a4d8 <_svfiprintf_r+0x110>
 800a4aa:	9207      	str	r2, [sp, #28]
 800a4ac:	e014      	b.n	800a4d8 <_svfiprintf_r+0x110>
 800a4ae:	eba0 0308 	sub.w	r3, r0, r8
 800a4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	46a2      	mov	sl, r4
 800a4ba:	9304      	str	r3, [sp, #16]
 800a4bc:	e7d2      	b.n	800a464 <_svfiprintf_r+0x9c>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	1d19      	adds	r1, r3, #4
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	9103      	str	r1, [sp, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	bfbb      	ittet	lt
 800a4ca:	425b      	neglt	r3, r3
 800a4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a4d0:	9307      	strge	r3, [sp, #28]
 800a4d2:	9307      	strlt	r3, [sp, #28]
 800a4d4:	bfb8      	it	lt
 800a4d6:	9204      	strlt	r2, [sp, #16]
 800a4d8:	7823      	ldrb	r3, [r4, #0]
 800a4da:	2b2e      	cmp	r3, #46	; 0x2e
 800a4dc:	d10c      	bne.n	800a4f8 <_svfiprintf_r+0x130>
 800a4de:	7863      	ldrb	r3, [r4, #1]
 800a4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e2:	d134      	bne.n	800a54e <_svfiprintf_r+0x186>
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	3402      	adds	r4, #2
 800a4e8:	1d1a      	adds	r2, r3, #4
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	9203      	str	r2, [sp, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	bfb8      	it	lt
 800a4f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4f6:	9305      	str	r3, [sp, #20]
 800a4f8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a5b4 <_svfiprintf_r+0x1ec>
 800a4fc:	2203      	movs	r2, #3
 800a4fe:	4650      	mov	r0, sl
 800a500:	7821      	ldrb	r1, [r4, #0]
 800a502:	f7fd ff63 	bl	80083cc <memchr>
 800a506:	b138      	cbz	r0, 800a518 <_svfiprintf_r+0x150>
 800a508:	2240      	movs	r2, #64	; 0x40
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	eba0 000a 	sub.w	r0, r0, sl
 800a510:	4082      	lsls	r2, r0
 800a512:	4313      	orrs	r3, r2
 800a514:	3401      	adds	r4, #1
 800a516:	9304      	str	r3, [sp, #16]
 800a518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a51c:	2206      	movs	r2, #6
 800a51e:	4826      	ldr	r0, [pc, #152]	; (800a5b8 <_svfiprintf_r+0x1f0>)
 800a520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a524:	f7fd ff52 	bl	80083cc <memchr>
 800a528:	2800      	cmp	r0, #0
 800a52a:	d038      	beq.n	800a59e <_svfiprintf_r+0x1d6>
 800a52c:	4b23      	ldr	r3, [pc, #140]	; (800a5bc <_svfiprintf_r+0x1f4>)
 800a52e:	bb1b      	cbnz	r3, 800a578 <_svfiprintf_r+0x1b0>
 800a530:	9b03      	ldr	r3, [sp, #12]
 800a532:	3307      	adds	r3, #7
 800a534:	f023 0307 	bic.w	r3, r3, #7
 800a538:	3308      	adds	r3, #8
 800a53a:	9303      	str	r3, [sp, #12]
 800a53c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a53e:	4433      	add	r3, r6
 800a540:	9309      	str	r3, [sp, #36]	; 0x24
 800a542:	e768      	b.n	800a416 <_svfiprintf_r+0x4e>
 800a544:	460c      	mov	r4, r1
 800a546:	2001      	movs	r0, #1
 800a548:	fb0c 3202 	mla	r2, ip, r2, r3
 800a54c:	e7a6      	b.n	800a49c <_svfiprintf_r+0xd4>
 800a54e:	2300      	movs	r3, #0
 800a550:	f04f 0c0a 	mov.w	ip, #10
 800a554:	4619      	mov	r1, r3
 800a556:	3401      	adds	r4, #1
 800a558:	9305      	str	r3, [sp, #20]
 800a55a:	4620      	mov	r0, r4
 800a55c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a560:	3a30      	subs	r2, #48	; 0x30
 800a562:	2a09      	cmp	r2, #9
 800a564:	d903      	bls.n	800a56e <_svfiprintf_r+0x1a6>
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0c6      	beq.n	800a4f8 <_svfiprintf_r+0x130>
 800a56a:	9105      	str	r1, [sp, #20]
 800a56c:	e7c4      	b.n	800a4f8 <_svfiprintf_r+0x130>
 800a56e:	4604      	mov	r4, r0
 800a570:	2301      	movs	r3, #1
 800a572:	fb0c 2101 	mla	r1, ip, r1, r2
 800a576:	e7f0      	b.n	800a55a <_svfiprintf_r+0x192>
 800a578:	ab03      	add	r3, sp, #12
 800a57a:	9300      	str	r3, [sp, #0]
 800a57c:	462a      	mov	r2, r5
 800a57e:	4638      	mov	r0, r7
 800a580:	4b0f      	ldr	r3, [pc, #60]	; (800a5c0 <_svfiprintf_r+0x1f8>)
 800a582:	a904      	add	r1, sp, #16
 800a584:	f7fd f8b0 	bl	80076e8 <_printf_float>
 800a588:	1c42      	adds	r2, r0, #1
 800a58a:	4606      	mov	r6, r0
 800a58c:	d1d6      	bne.n	800a53c <_svfiprintf_r+0x174>
 800a58e:	89ab      	ldrh	r3, [r5, #12]
 800a590:	065b      	lsls	r3, r3, #25
 800a592:	f53f af2d 	bmi.w	800a3f0 <_svfiprintf_r+0x28>
 800a596:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a598:	b01d      	add	sp, #116	; 0x74
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	ab03      	add	r3, sp, #12
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	462a      	mov	r2, r5
 800a5a4:	4638      	mov	r0, r7
 800a5a6:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <_svfiprintf_r+0x1f8>)
 800a5a8:	a904      	add	r1, sp, #16
 800a5aa:	f7fd fb3d 	bl	8007c28 <_printf_i>
 800a5ae:	e7eb      	b.n	800a588 <_svfiprintf_r+0x1c0>
 800a5b0:	0800b764 	.word	0x0800b764
 800a5b4:	0800b76a 	.word	0x0800b76a
 800a5b8:	0800b76e 	.word	0x0800b76e
 800a5bc:	080076e9 	.word	0x080076e9
 800a5c0:	0800a313 	.word	0x0800a313

0800a5c4 <__sflush_r>:
 800a5c4:	898a      	ldrh	r2, [r1, #12]
 800a5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	0710      	lsls	r0, r2, #28
 800a5cc:	460c      	mov	r4, r1
 800a5ce:	d457      	bmi.n	800a680 <__sflush_r+0xbc>
 800a5d0:	684b      	ldr	r3, [r1, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dc04      	bgt.n	800a5e0 <__sflush_r+0x1c>
 800a5d6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	dc01      	bgt.n	800a5e0 <__sflush_r+0x1c>
 800a5dc:	2000      	movs	r0, #0
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5e2:	2e00      	cmp	r6, #0
 800a5e4:	d0fa      	beq.n	800a5dc <__sflush_r+0x18>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5ec:	682f      	ldr	r7, [r5, #0]
 800a5ee:	6a21      	ldr	r1, [r4, #32]
 800a5f0:	602b      	str	r3, [r5, #0]
 800a5f2:	d032      	beq.n	800a65a <__sflush_r+0x96>
 800a5f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	075a      	lsls	r2, r3, #29
 800a5fa:	d505      	bpl.n	800a608 <__sflush_r+0x44>
 800a5fc:	6863      	ldr	r3, [r4, #4]
 800a5fe:	1ac0      	subs	r0, r0, r3
 800a600:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a602:	b10b      	cbz	r3, 800a608 <__sflush_r+0x44>
 800a604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a606:	1ac0      	subs	r0, r0, r3
 800a608:	2300      	movs	r3, #0
 800a60a:	4602      	mov	r2, r0
 800a60c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a60e:	4628      	mov	r0, r5
 800a610:	6a21      	ldr	r1, [r4, #32]
 800a612:	47b0      	blx	r6
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	89a3      	ldrh	r3, [r4, #12]
 800a618:	d106      	bne.n	800a628 <__sflush_r+0x64>
 800a61a:	6829      	ldr	r1, [r5, #0]
 800a61c:	291d      	cmp	r1, #29
 800a61e:	d82b      	bhi.n	800a678 <__sflush_r+0xb4>
 800a620:	4a28      	ldr	r2, [pc, #160]	; (800a6c4 <__sflush_r+0x100>)
 800a622:	410a      	asrs	r2, r1
 800a624:	07d6      	lsls	r6, r2, #31
 800a626:	d427      	bmi.n	800a678 <__sflush_r+0xb4>
 800a628:	2200      	movs	r2, #0
 800a62a:	6062      	str	r2, [r4, #4]
 800a62c:	6922      	ldr	r2, [r4, #16]
 800a62e:	04d9      	lsls	r1, r3, #19
 800a630:	6022      	str	r2, [r4, #0]
 800a632:	d504      	bpl.n	800a63e <__sflush_r+0x7a>
 800a634:	1c42      	adds	r2, r0, #1
 800a636:	d101      	bne.n	800a63c <__sflush_r+0x78>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b903      	cbnz	r3, 800a63e <__sflush_r+0x7a>
 800a63c:	6560      	str	r0, [r4, #84]	; 0x54
 800a63e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a640:	602f      	str	r7, [r5, #0]
 800a642:	2900      	cmp	r1, #0
 800a644:	d0ca      	beq.n	800a5dc <__sflush_r+0x18>
 800a646:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a64a:	4299      	cmp	r1, r3
 800a64c:	d002      	beq.n	800a654 <__sflush_r+0x90>
 800a64e:	4628      	mov	r0, r5
 800a650:	f7fe fd4e 	bl	80090f0 <_free_r>
 800a654:	2000      	movs	r0, #0
 800a656:	6360      	str	r0, [r4, #52]	; 0x34
 800a658:	e7c1      	b.n	800a5de <__sflush_r+0x1a>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4628      	mov	r0, r5
 800a65e:	47b0      	blx	r6
 800a660:	1c41      	adds	r1, r0, #1
 800a662:	d1c8      	bne.n	800a5f6 <__sflush_r+0x32>
 800a664:	682b      	ldr	r3, [r5, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d0c5      	beq.n	800a5f6 <__sflush_r+0x32>
 800a66a:	2b1d      	cmp	r3, #29
 800a66c:	d001      	beq.n	800a672 <__sflush_r+0xae>
 800a66e:	2b16      	cmp	r3, #22
 800a670:	d101      	bne.n	800a676 <__sflush_r+0xb2>
 800a672:	602f      	str	r7, [r5, #0]
 800a674:	e7b2      	b.n	800a5dc <__sflush_r+0x18>
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	e7ae      	b.n	800a5de <__sflush_r+0x1a>
 800a680:	690f      	ldr	r7, [r1, #16]
 800a682:	2f00      	cmp	r7, #0
 800a684:	d0aa      	beq.n	800a5dc <__sflush_r+0x18>
 800a686:	0793      	lsls	r3, r2, #30
 800a688:	bf18      	it	ne
 800a68a:	2300      	movne	r3, #0
 800a68c:	680e      	ldr	r6, [r1, #0]
 800a68e:	bf08      	it	eq
 800a690:	694b      	ldreq	r3, [r1, #20]
 800a692:	1bf6      	subs	r6, r6, r7
 800a694:	600f      	str	r7, [r1, #0]
 800a696:	608b      	str	r3, [r1, #8]
 800a698:	2e00      	cmp	r6, #0
 800a69a:	dd9f      	ble.n	800a5dc <__sflush_r+0x18>
 800a69c:	4633      	mov	r3, r6
 800a69e:	463a      	mov	r2, r7
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	6a21      	ldr	r1, [r4, #32]
 800a6a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a6a8:	47e0      	blx	ip
 800a6aa:	2800      	cmp	r0, #0
 800a6ac:	dc06      	bgt.n	800a6bc <__sflush_r+0xf8>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	e790      	b.n	800a5de <__sflush_r+0x1a>
 800a6bc:	4407      	add	r7, r0
 800a6be:	1a36      	subs	r6, r6, r0
 800a6c0:	e7ea      	b.n	800a698 <__sflush_r+0xd4>
 800a6c2:	bf00      	nop
 800a6c4:	dfbffffe 	.word	0xdfbffffe

0800a6c8 <_fflush_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	690b      	ldr	r3, [r1, #16]
 800a6cc:	4605      	mov	r5, r0
 800a6ce:	460c      	mov	r4, r1
 800a6d0:	b913      	cbnz	r3, 800a6d8 <_fflush_r+0x10>
 800a6d2:	2500      	movs	r5, #0
 800a6d4:	4628      	mov	r0, r5
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	b118      	cbz	r0, 800a6e2 <_fflush_r+0x1a>
 800a6da:	6a03      	ldr	r3, [r0, #32]
 800a6dc:	b90b      	cbnz	r3, 800a6e2 <_fflush_r+0x1a>
 800a6de:	f7fd fc3f 	bl	8007f60 <__sinit>
 800a6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0f3      	beq.n	800a6d2 <_fflush_r+0xa>
 800a6ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6ec:	07d0      	lsls	r0, r2, #31
 800a6ee:	d404      	bmi.n	800a6fa <_fflush_r+0x32>
 800a6f0:	0599      	lsls	r1, r3, #22
 800a6f2:	d402      	bmi.n	800a6fa <_fflush_r+0x32>
 800a6f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6f6:	f7fd fe5f 	bl	80083b8 <__retarget_lock_acquire_recursive>
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	f7ff ff61 	bl	800a5c4 <__sflush_r>
 800a702:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a704:	4605      	mov	r5, r0
 800a706:	07da      	lsls	r2, r3, #31
 800a708:	d4e4      	bmi.n	800a6d4 <_fflush_r+0xc>
 800a70a:	89a3      	ldrh	r3, [r4, #12]
 800a70c:	059b      	lsls	r3, r3, #22
 800a70e:	d4e1      	bmi.n	800a6d4 <_fflush_r+0xc>
 800a710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a712:	f7fd fe52 	bl	80083ba <__retarget_lock_release_recursive>
 800a716:	e7dd      	b.n	800a6d4 <_fflush_r+0xc>

0800a718 <__swhatbuf_r>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	460c      	mov	r4, r1
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	4615      	mov	r5, r2
 800a722:	2900      	cmp	r1, #0
 800a724:	461e      	mov	r6, r3
 800a726:	b096      	sub	sp, #88	; 0x58
 800a728:	da0c      	bge.n	800a744 <__swhatbuf_r+0x2c>
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	2100      	movs	r1, #0
 800a72e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a732:	bf0c      	ite	eq
 800a734:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a738:	2340      	movne	r3, #64	; 0x40
 800a73a:	2000      	movs	r0, #0
 800a73c:	6031      	str	r1, [r6, #0]
 800a73e:	602b      	str	r3, [r5, #0]
 800a740:	b016      	add	sp, #88	; 0x58
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	466a      	mov	r2, sp
 800a746:	f000 f863 	bl	800a810 <_fstat_r>
 800a74a:	2800      	cmp	r0, #0
 800a74c:	dbed      	blt.n	800a72a <__swhatbuf_r+0x12>
 800a74e:	9901      	ldr	r1, [sp, #4]
 800a750:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a754:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a758:	4259      	negs	r1, r3
 800a75a:	4159      	adcs	r1, r3
 800a75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a760:	e7eb      	b.n	800a73a <__swhatbuf_r+0x22>

0800a762 <__smakebuf_r>:
 800a762:	898b      	ldrh	r3, [r1, #12]
 800a764:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a766:	079d      	lsls	r5, r3, #30
 800a768:	4606      	mov	r6, r0
 800a76a:	460c      	mov	r4, r1
 800a76c:	d507      	bpl.n	800a77e <__smakebuf_r+0x1c>
 800a76e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a772:	6023      	str	r3, [r4, #0]
 800a774:	6123      	str	r3, [r4, #16]
 800a776:	2301      	movs	r3, #1
 800a778:	6163      	str	r3, [r4, #20]
 800a77a:	b002      	add	sp, #8
 800a77c:	bd70      	pop	{r4, r5, r6, pc}
 800a77e:	466a      	mov	r2, sp
 800a780:	ab01      	add	r3, sp, #4
 800a782:	f7ff ffc9 	bl	800a718 <__swhatbuf_r>
 800a786:	9900      	ldr	r1, [sp, #0]
 800a788:	4605      	mov	r5, r0
 800a78a:	4630      	mov	r0, r6
 800a78c:	f7ff f87a 	bl	8009884 <_malloc_r>
 800a790:	b948      	cbnz	r0, 800a7a6 <__smakebuf_r+0x44>
 800a792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a796:	059a      	lsls	r2, r3, #22
 800a798:	d4ef      	bmi.n	800a77a <__smakebuf_r+0x18>
 800a79a:	f023 0303 	bic.w	r3, r3, #3
 800a79e:	f043 0302 	orr.w	r3, r3, #2
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	e7e3      	b.n	800a76e <__smakebuf_r+0xc>
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	6020      	str	r0, [r4, #0]
 800a7aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ae:	81a3      	strh	r3, [r4, #12]
 800a7b0:	9b00      	ldr	r3, [sp, #0]
 800a7b2:	6120      	str	r0, [r4, #16]
 800a7b4:	6163      	str	r3, [r4, #20]
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	b15b      	cbz	r3, 800a7d2 <__smakebuf_r+0x70>
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c0:	f000 f838 	bl	800a834 <_isatty_r>
 800a7c4:	b128      	cbz	r0, 800a7d2 <__smakebuf_r+0x70>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	f023 0303 	bic.w	r3, r3, #3
 800a7cc:	f043 0301 	orr.w	r3, r3, #1
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	89a3      	ldrh	r3, [r4, #12]
 800a7d4:	431d      	orrs	r5, r3
 800a7d6:	81a5      	strh	r5, [r4, #12]
 800a7d8:	e7cf      	b.n	800a77a <__smakebuf_r+0x18>

0800a7da <memmove>:
 800a7da:	4288      	cmp	r0, r1
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	eb01 0402 	add.w	r4, r1, r2
 800a7e2:	d902      	bls.n	800a7ea <memmove+0x10>
 800a7e4:	4284      	cmp	r4, r0
 800a7e6:	4623      	mov	r3, r4
 800a7e8:	d807      	bhi.n	800a7fa <memmove+0x20>
 800a7ea:	1e43      	subs	r3, r0, #1
 800a7ec:	42a1      	cmp	r1, r4
 800a7ee:	d008      	beq.n	800a802 <memmove+0x28>
 800a7f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7f8:	e7f8      	b.n	800a7ec <memmove+0x12>
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4402      	add	r2, r0
 800a7fe:	428a      	cmp	r2, r1
 800a800:	d100      	bne.n	800a804 <memmove+0x2a>
 800a802:	bd10      	pop	{r4, pc}
 800a804:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a808:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a80c:	e7f7      	b.n	800a7fe <memmove+0x24>
	...

0800a810 <_fstat_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	2300      	movs	r3, #0
 800a814:	4d06      	ldr	r5, [pc, #24]	; (800a830 <_fstat_r+0x20>)
 800a816:	4604      	mov	r4, r0
 800a818:	4608      	mov	r0, r1
 800a81a:	4611      	mov	r1, r2
 800a81c:	602b      	str	r3, [r5, #0]
 800a81e:	f7f7 ff12 	bl	8002646 <_fstat>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	d102      	bne.n	800a82c <_fstat_r+0x1c>
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	b103      	cbz	r3, 800a82c <_fstat_r+0x1c>
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	bd38      	pop	{r3, r4, r5, pc}
 800a82e:	bf00      	nop
 800a830:	20000b98 	.word	0x20000b98

0800a834 <_isatty_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	2300      	movs	r3, #0
 800a838:	4d05      	ldr	r5, [pc, #20]	; (800a850 <_isatty_r+0x1c>)
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	f7f7 ff06 	bl	8002650 <_isatty>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_isatty_r+0x1a>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_isatty_r+0x1a>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	20000b98 	.word	0x20000b98

0800a854 <_sbrk_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	2300      	movs	r3, #0
 800a858:	4d05      	ldr	r5, [pc, #20]	; (800a870 <_sbrk_r+0x1c>)
 800a85a:	4604      	mov	r4, r0
 800a85c:	4608      	mov	r0, r1
 800a85e:	602b      	str	r3, [r5, #0]
 800a860:	f7f7 fefa 	bl	8002658 <_sbrk>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d102      	bne.n	800a86e <_sbrk_r+0x1a>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	b103      	cbz	r3, 800a86e <_sbrk_r+0x1a>
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	20000b98 	.word	0x20000b98

0800a874 <__assert_func>:
 800a874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a876:	4614      	mov	r4, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	4b09      	ldr	r3, [pc, #36]	; (800a8a0 <__assert_func+0x2c>)
 800a87c:	4605      	mov	r5, r0
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	68d8      	ldr	r0, [r3, #12]
 800a882:	b14c      	cbz	r4, 800a898 <__assert_func+0x24>
 800a884:	4b07      	ldr	r3, [pc, #28]	; (800a8a4 <__assert_func+0x30>)
 800a886:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a88a:	9100      	str	r1, [sp, #0]
 800a88c:	462b      	mov	r3, r5
 800a88e:	4906      	ldr	r1, [pc, #24]	; (800a8a8 <__assert_func+0x34>)
 800a890:	f000 f852 	bl	800a938 <fiprintf>
 800a894:	f000 f862 	bl	800a95c <abort>
 800a898:	4b04      	ldr	r3, [pc, #16]	; (800a8ac <__assert_func+0x38>)
 800a89a:	461c      	mov	r4, r3
 800a89c:	e7f3      	b.n	800a886 <__assert_func+0x12>
 800a89e:	bf00      	nop
 800a8a0:	200001d4 	.word	0x200001d4
 800a8a4:	0800b775 	.word	0x0800b775
 800a8a8:	0800b782 	.word	0x0800b782
 800a8ac:	0800b364 	.word	0x0800b364

0800a8b0 <_calloc_r>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	fba1 5402 	umull	r5, r4, r1, r2
 800a8b6:	b934      	cbnz	r4, 800a8c6 <_calloc_r+0x16>
 800a8b8:	4629      	mov	r1, r5
 800a8ba:	f7fe ffe3 	bl	8009884 <_malloc_r>
 800a8be:	4606      	mov	r6, r0
 800a8c0:	b928      	cbnz	r0, 800a8ce <_calloc_r+0x1e>
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	220c      	movs	r2, #12
 800a8c8:	2600      	movs	r6, #0
 800a8ca:	6002      	str	r2, [r0, #0]
 800a8cc:	e7f9      	b.n	800a8c2 <_calloc_r+0x12>
 800a8ce:	462a      	mov	r2, r5
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	f7fd fce3 	bl	800829c <memset>
 800a8d6:	e7f4      	b.n	800a8c2 <_calloc_r+0x12>

0800a8d8 <_realloc_r>:
 800a8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8dc:	4680      	mov	r8, r0
 800a8de:	4614      	mov	r4, r2
 800a8e0:	460e      	mov	r6, r1
 800a8e2:	b921      	cbnz	r1, 800a8ee <_realloc_r+0x16>
 800a8e4:	4611      	mov	r1, r2
 800a8e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ea:	f7fe bfcb 	b.w	8009884 <_malloc_r>
 800a8ee:	b92a      	cbnz	r2, 800a8fc <_realloc_r+0x24>
 800a8f0:	f7fe fbfe 	bl	80090f0 <_free_r>
 800a8f4:	4625      	mov	r5, r4
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8fc:	f000 f835 	bl	800a96a <_malloc_usable_size_r>
 800a900:	4284      	cmp	r4, r0
 800a902:	4607      	mov	r7, r0
 800a904:	d802      	bhi.n	800a90c <_realloc_r+0x34>
 800a906:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a90a:	d812      	bhi.n	800a932 <_realloc_r+0x5a>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4640      	mov	r0, r8
 800a910:	f7fe ffb8 	bl	8009884 <_malloc_r>
 800a914:	4605      	mov	r5, r0
 800a916:	2800      	cmp	r0, #0
 800a918:	d0ed      	beq.n	800a8f6 <_realloc_r+0x1e>
 800a91a:	42bc      	cmp	r4, r7
 800a91c:	4622      	mov	r2, r4
 800a91e:	4631      	mov	r1, r6
 800a920:	bf28      	it	cs
 800a922:	463a      	movcs	r2, r7
 800a924:	f7fd fd60 	bl	80083e8 <memcpy>
 800a928:	4631      	mov	r1, r6
 800a92a:	4640      	mov	r0, r8
 800a92c:	f7fe fbe0 	bl	80090f0 <_free_r>
 800a930:	e7e1      	b.n	800a8f6 <_realloc_r+0x1e>
 800a932:	4635      	mov	r5, r6
 800a934:	e7df      	b.n	800a8f6 <_realloc_r+0x1e>
	...

0800a938 <fiprintf>:
 800a938:	b40e      	push	{r1, r2, r3}
 800a93a:	b503      	push	{r0, r1, lr}
 800a93c:	4601      	mov	r1, r0
 800a93e:	ab03      	add	r3, sp, #12
 800a940:	4805      	ldr	r0, [pc, #20]	; (800a958 <fiprintf+0x20>)
 800a942:	f853 2b04 	ldr.w	r2, [r3], #4
 800a946:	6800      	ldr	r0, [r0, #0]
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	f000 f83d 	bl	800a9c8 <_vfiprintf_r>
 800a94e:	b002      	add	sp, #8
 800a950:	f85d eb04 	ldr.w	lr, [sp], #4
 800a954:	b003      	add	sp, #12
 800a956:	4770      	bx	lr
 800a958:	200001d4 	.word	0x200001d4

0800a95c <abort>:
 800a95c:	2006      	movs	r0, #6
 800a95e:	b508      	push	{r3, lr}
 800a960:	f000 f974 	bl	800ac4c <raise>
 800a964:	2001      	movs	r0, #1
 800a966:	f7f7 fe49 	bl	80025fc <_exit>

0800a96a <_malloc_usable_size_r>:
 800a96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a96e:	1f18      	subs	r0, r3, #4
 800a970:	2b00      	cmp	r3, #0
 800a972:	bfbc      	itt	lt
 800a974:	580b      	ldrlt	r3, [r1, r0]
 800a976:	18c0      	addlt	r0, r0, r3
 800a978:	4770      	bx	lr

0800a97a <__sfputc_r>:
 800a97a:	6893      	ldr	r3, [r2, #8]
 800a97c:	b410      	push	{r4}
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	6093      	str	r3, [r2, #8]
 800a984:	da07      	bge.n	800a996 <__sfputc_r+0x1c>
 800a986:	6994      	ldr	r4, [r2, #24]
 800a988:	42a3      	cmp	r3, r4
 800a98a:	db01      	blt.n	800a990 <__sfputc_r+0x16>
 800a98c:	290a      	cmp	r1, #10
 800a98e:	d102      	bne.n	800a996 <__sfputc_r+0x1c>
 800a990:	bc10      	pop	{r4}
 800a992:	f7fd bbee 	b.w	8008172 <__swbuf_r>
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	1c58      	adds	r0, r3, #1
 800a99a:	6010      	str	r0, [r2, #0]
 800a99c:	7019      	strb	r1, [r3, #0]
 800a99e:	4608      	mov	r0, r1
 800a9a0:	bc10      	pop	{r4}
 800a9a2:	4770      	bx	lr

0800a9a4 <__sfputs_r>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	4614      	mov	r4, r2
 800a9ac:	18d5      	adds	r5, r2, r3
 800a9ae:	42ac      	cmp	r4, r5
 800a9b0:	d101      	bne.n	800a9b6 <__sfputs_r+0x12>
 800a9b2:	2000      	movs	r0, #0
 800a9b4:	e007      	b.n	800a9c6 <__sfputs_r+0x22>
 800a9b6:	463a      	mov	r2, r7
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9be:	f7ff ffdc 	bl	800a97a <__sfputc_r>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d1f3      	bne.n	800a9ae <__sfputs_r+0xa>
 800a9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9c8 <_vfiprintf_r>:
 800a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9cc:	460d      	mov	r5, r1
 800a9ce:	4614      	mov	r4, r2
 800a9d0:	4698      	mov	r8, r3
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	b09d      	sub	sp, #116	; 0x74
 800a9d6:	b118      	cbz	r0, 800a9e0 <_vfiprintf_r+0x18>
 800a9d8:	6a03      	ldr	r3, [r0, #32]
 800a9da:	b90b      	cbnz	r3, 800a9e0 <_vfiprintf_r+0x18>
 800a9dc:	f7fd fac0 	bl	8007f60 <__sinit>
 800a9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9e2:	07d9      	lsls	r1, r3, #31
 800a9e4:	d405      	bmi.n	800a9f2 <_vfiprintf_r+0x2a>
 800a9e6:	89ab      	ldrh	r3, [r5, #12]
 800a9e8:	059a      	lsls	r2, r3, #22
 800a9ea:	d402      	bmi.n	800a9f2 <_vfiprintf_r+0x2a>
 800a9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ee:	f7fd fce3 	bl	80083b8 <__retarget_lock_acquire_recursive>
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	071b      	lsls	r3, r3, #28
 800a9f6:	d501      	bpl.n	800a9fc <_vfiprintf_r+0x34>
 800a9f8:	692b      	ldr	r3, [r5, #16]
 800a9fa:	b99b      	cbnz	r3, 800aa24 <_vfiprintf_r+0x5c>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7fd fbf4 	bl	80081ec <__swsetup_r>
 800aa04:	b170      	cbz	r0, 800aa24 <_vfiprintf_r+0x5c>
 800aa06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa08:	07dc      	lsls	r4, r3, #31
 800aa0a:	d504      	bpl.n	800aa16 <_vfiprintf_r+0x4e>
 800aa0c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa10:	b01d      	add	sp, #116	; 0x74
 800aa12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa16:	89ab      	ldrh	r3, [r5, #12]
 800aa18:	0598      	lsls	r0, r3, #22
 800aa1a:	d4f7      	bmi.n	800aa0c <_vfiprintf_r+0x44>
 800aa1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1e:	f7fd fccc 	bl	80083ba <__retarget_lock_release_recursive>
 800aa22:	e7f3      	b.n	800aa0c <_vfiprintf_r+0x44>
 800aa24:	2300      	movs	r3, #0
 800aa26:	9309      	str	r3, [sp, #36]	; 0x24
 800aa28:	2320      	movs	r3, #32
 800aa2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa2e:	2330      	movs	r3, #48	; 0x30
 800aa30:	f04f 0901 	mov.w	r9, #1
 800aa34:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa38:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800abe8 <_vfiprintf_r+0x220>
 800aa3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa40:	4623      	mov	r3, r4
 800aa42:	469a      	mov	sl, r3
 800aa44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa48:	b10a      	cbz	r2, 800aa4e <_vfiprintf_r+0x86>
 800aa4a:	2a25      	cmp	r2, #37	; 0x25
 800aa4c:	d1f9      	bne.n	800aa42 <_vfiprintf_r+0x7a>
 800aa4e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa52:	d00b      	beq.n	800aa6c <_vfiprintf_r+0xa4>
 800aa54:	465b      	mov	r3, fp
 800aa56:	4622      	mov	r2, r4
 800aa58:	4629      	mov	r1, r5
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7ff ffa2 	bl	800a9a4 <__sfputs_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	f000 80a9 	beq.w	800abb8 <_vfiprintf_r+0x1f0>
 800aa66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa68:	445a      	add	r2, fp
 800aa6a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa6c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 80a1 	beq.w	800abb8 <_vfiprintf_r+0x1f0>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f04f 32ff 	mov.w	r2, #4294967295
 800aa7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa80:	f10a 0a01 	add.w	sl, sl, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	9307      	str	r3, [sp, #28]
 800aa88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa8c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa8e:	4654      	mov	r4, sl
 800aa90:	2205      	movs	r2, #5
 800aa92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa96:	4854      	ldr	r0, [pc, #336]	; (800abe8 <_vfiprintf_r+0x220>)
 800aa98:	f7fd fc98 	bl	80083cc <memchr>
 800aa9c:	9a04      	ldr	r2, [sp, #16]
 800aa9e:	b9d8      	cbnz	r0, 800aad8 <_vfiprintf_r+0x110>
 800aaa0:	06d1      	lsls	r1, r2, #27
 800aaa2:	bf44      	itt	mi
 800aaa4:	2320      	movmi	r3, #32
 800aaa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aaaa:	0713      	lsls	r3, r2, #28
 800aaac:	bf44      	itt	mi
 800aaae:	232b      	movmi	r3, #43	; 0x2b
 800aab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aab4:	f89a 3000 	ldrb.w	r3, [sl]
 800aab8:	2b2a      	cmp	r3, #42	; 0x2a
 800aaba:	d015      	beq.n	800aae8 <_vfiprintf_r+0x120>
 800aabc:	4654      	mov	r4, sl
 800aabe:	2000      	movs	r0, #0
 800aac0:	f04f 0c0a 	mov.w	ip, #10
 800aac4:	9a07      	ldr	r2, [sp, #28]
 800aac6:	4621      	mov	r1, r4
 800aac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aacc:	3b30      	subs	r3, #48	; 0x30
 800aace:	2b09      	cmp	r3, #9
 800aad0:	d94d      	bls.n	800ab6e <_vfiprintf_r+0x1a6>
 800aad2:	b1b0      	cbz	r0, 800ab02 <_vfiprintf_r+0x13a>
 800aad4:	9207      	str	r2, [sp, #28]
 800aad6:	e014      	b.n	800ab02 <_vfiprintf_r+0x13a>
 800aad8:	eba0 0308 	sub.w	r3, r0, r8
 800aadc:	fa09 f303 	lsl.w	r3, r9, r3
 800aae0:	4313      	orrs	r3, r2
 800aae2:	46a2      	mov	sl, r4
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	e7d2      	b.n	800aa8e <_vfiprintf_r+0xc6>
 800aae8:	9b03      	ldr	r3, [sp, #12]
 800aaea:	1d19      	adds	r1, r3, #4
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	9103      	str	r1, [sp, #12]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfbb      	ittet	lt
 800aaf4:	425b      	neglt	r3, r3
 800aaf6:	f042 0202 	orrlt.w	r2, r2, #2
 800aafa:	9307      	strge	r3, [sp, #28]
 800aafc:	9307      	strlt	r3, [sp, #28]
 800aafe:	bfb8      	it	lt
 800ab00:	9204      	strlt	r2, [sp, #16]
 800ab02:	7823      	ldrb	r3, [r4, #0]
 800ab04:	2b2e      	cmp	r3, #46	; 0x2e
 800ab06:	d10c      	bne.n	800ab22 <_vfiprintf_r+0x15a>
 800ab08:	7863      	ldrb	r3, [r4, #1]
 800ab0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab0c:	d134      	bne.n	800ab78 <_vfiprintf_r+0x1b0>
 800ab0e:	9b03      	ldr	r3, [sp, #12]
 800ab10:	3402      	adds	r4, #2
 800ab12:	1d1a      	adds	r2, r3, #4
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	9203      	str	r2, [sp, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	bfb8      	it	lt
 800ab1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab20:	9305      	str	r3, [sp, #20]
 800ab22:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800abec <_vfiprintf_r+0x224>
 800ab26:	2203      	movs	r2, #3
 800ab28:	4650      	mov	r0, sl
 800ab2a:	7821      	ldrb	r1, [r4, #0]
 800ab2c:	f7fd fc4e 	bl	80083cc <memchr>
 800ab30:	b138      	cbz	r0, 800ab42 <_vfiprintf_r+0x17a>
 800ab32:	2240      	movs	r2, #64	; 0x40
 800ab34:	9b04      	ldr	r3, [sp, #16]
 800ab36:	eba0 000a 	sub.w	r0, r0, sl
 800ab3a:	4082      	lsls	r2, r0
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	3401      	adds	r4, #1
 800ab40:	9304      	str	r3, [sp, #16]
 800ab42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab46:	2206      	movs	r2, #6
 800ab48:	4829      	ldr	r0, [pc, #164]	; (800abf0 <_vfiprintf_r+0x228>)
 800ab4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab4e:	f7fd fc3d 	bl	80083cc <memchr>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d03f      	beq.n	800abd6 <_vfiprintf_r+0x20e>
 800ab56:	4b27      	ldr	r3, [pc, #156]	; (800abf4 <_vfiprintf_r+0x22c>)
 800ab58:	bb1b      	cbnz	r3, 800aba2 <_vfiprintf_r+0x1da>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	3307      	adds	r3, #7
 800ab5e:	f023 0307 	bic.w	r3, r3, #7
 800ab62:	3308      	adds	r3, #8
 800ab64:	9303      	str	r3, [sp, #12]
 800ab66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab68:	443b      	add	r3, r7
 800ab6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab6c:	e768      	b.n	800aa40 <_vfiprintf_r+0x78>
 800ab6e:	460c      	mov	r4, r1
 800ab70:	2001      	movs	r0, #1
 800ab72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab76:	e7a6      	b.n	800aac6 <_vfiprintf_r+0xfe>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	f04f 0c0a 	mov.w	ip, #10
 800ab7e:	4619      	mov	r1, r3
 800ab80:	3401      	adds	r4, #1
 800ab82:	9305      	str	r3, [sp, #20]
 800ab84:	4620      	mov	r0, r4
 800ab86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8a:	3a30      	subs	r2, #48	; 0x30
 800ab8c:	2a09      	cmp	r2, #9
 800ab8e:	d903      	bls.n	800ab98 <_vfiprintf_r+0x1d0>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d0c6      	beq.n	800ab22 <_vfiprintf_r+0x15a>
 800ab94:	9105      	str	r1, [sp, #20]
 800ab96:	e7c4      	b.n	800ab22 <_vfiprintf_r+0x15a>
 800ab98:	4604      	mov	r4, r0
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba0:	e7f0      	b.n	800ab84 <_vfiprintf_r+0x1bc>
 800aba2:	ab03      	add	r3, sp, #12
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	462a      	mov	r2, r5
 800aba8:	4630      	mov	r0, r6
 800abaa:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <_vfiprintf_r+0x230>)
 800abac:	a904      	add	r1, sp, #16
 800abae:	f7fc fd9b 	bl	80076e8 <_printf_float>
 800abb2:	4607      	mov	r7, r0
 800abb4:	1c78      	adds	r0, r7, #1
 800abb6:	d1d6      	bne.n	800ab66 <_vfiprintf_r+0x19e>
 800abb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abba:	07d9      	lsls	r1, r3, #31
 800abbc:	d405      	bmi.n	800abca <_vfiprintf_r+0x202>
 800abbe:	89ab      	ldrh	r3, [r5, #12]
 800abc0:	059a      	lsls	r2, r3, #22
 800abc2:	d402      	bmi.n	800abca <_vfiprintf_r+0x202>
 800abc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abc6:	f7fd fbf8 	bl	80083ba <__retarget_lock_release_recursive>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	065b      	lsls	r3, r3, #25
 800abce:	f53f af1d 	bmi.w	800aa0c <_vfiprintf_r+0x44>
 800abd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd4:	e71c      	b.n	800aa10 <_vfiprintf_r+0x48>
 800abd6:	ab03      	add	r3, sp, #12
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	462a      	mov	r2, r5
 800abdc:	4630      	mov	r0, r6
 800abde:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <_vfiprintf_r+0x230>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	f7fd f821 	bl	8007c28 <_printf_i>
 800abe6:	e7e4      	b.n	800abb2 <_vfiprintf_r+0x1ea>
 800abe8:	0800b764 	.word	0x0800b764
 800abec:	0800b76a 	.word	0x0800b76a
 800abf0:	0800b76e 	.word	0x0800b76e
 800abf4:	080076e9 	.word	0x080076e9
 800abf8:	0800a9a5 	.word	0x0800a9a5

0800abfc <_raise_r>:
 800abfc:	291f      	cmp	r1, #31
 800abfe:	b538      	push	{r3, r4, r5, lr}
 800ac00:	4604      	mov	r4, r0
 800ac02:	460d      	mov	r5, r1
 800ac04:	d904      	bls.n	800ac10 <_raise_r+0x14>
 800ac06:	2316      	movs	r3, #22
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac12:	b112      	cbz	r2, 800ac1a <_raise_r+0x1e>
 800ac14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac18:	b94b      	cbnz	r3, 800ac2e <_raise_r+0x32>
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f000 f830 	bl	800ac80 <_getpid_r>
 800ac20:	462a      	mov	r2, r5
 800ac22:	4601      	mov	r1, r0
 800ac24:	4620      	mov	r0, r4
 800ac26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac2a:	f000 b817 	b.w	800ac5c <_kill_r>
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d00a      	beq.n	800ac48 <_raise_r+0x4c>
 800ac32:	1c59      	adds	r1, r3, #1
 800ac34:	d103      	bne.n	800ac3e <_raise_r+0x42>
 800ac36:	2316      	movs	r3, #22
 800ac38:	6003      	str	r3, [r0, #0]
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e7e7      	b.n	800ac0e <_raise_r+0x12>
 800ac3e:	2400      	movs	r4, #0
 800ac40:	4628      	mov	r0, r5
 800ac42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac46:	4798      	blx	r3
 800ac48:	2000      	movs	r0, #0
 800ac4a:	e7e0      	b.n	800ac0e <_raise_r+0x12>

0800ac4c <raise>:
 800ac4c:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <raise+0xc>)
 800ac4e:	4601      	mov	r1, r0
 800ac50:	6818      	ldr	r0, [r3, #0]
 800ac52:	f7ff bfd3 	b.w	800abfc <_raise_r>
 800ac56:	bf00      	nop
 800ac58:	200001d4 	.word	0x200001d4

0800ac5c <_kill_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	2300      	movs	r3, #0
 800ac60:	4d06      	ldr	r5, [pc, #24]	; (800ac7c <_kill_r+0x20>)
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	4611      	mov	r1, r2
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	f7f7 fcbf 	bl	80025ec <_kill>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	d102      	bne.n	800ac78 <_kill_r+0x1c>
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	b103      	cbz	r3, 800ac78 <_kill_r+0x1c>
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	bd38      	pop	{r3, r4, r5, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000b98 	.word	0x20000b98

0800ac80 <_getpid_r>:
 800ac80:	f7f7 bcb2 	b.w	80025e8 <_getpid>

0800ac84 <atan2>:
 800ac84:	f000 b800 	b.w	800ac88 <__ieee754_atan2>

0800ac88 <__ieee754_atan2>:
 800ac88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	4617      	mov	r7, r2
 800ac8e:	4692      	mov	sl, r2
 800ac90:	4699      	mov	r9, r3
 800ac92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac96:	427b      	negs	r3, r7
 800ac98:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ae18 <__ieee754_atan2+0x190>
 800ac9c:	433b      	orrs	r3, r7
 800ac9e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800aca2:	4543      	cmp	r3, r8
 800aca4:	4604      	mov	r4, r0
 800aca6:	460d      	mov	r5, r1
 800aca8:	d809      	bhi.n	800acbe <__ieee754_atan2+0x36>
 800acaa:	4246      	negs	r6, r0
 800acac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acb0:	4306      	orrs	r6, r0
 800acb2:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800acb6:	4546      	cmp	r6, r8
 800acb8:	468e      	mov	lr, r1
 800acba:	4683      	mov	fp, r0
 800acbc:	d908      	bls.n	800acd0 <__ieee754_atan2+0x48>
 800acbe:	4652      	mov	r2, sl
 800acc0:	464b      	mov	r3, r9
 800acc2:	4620      	mov	r0, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7f5 fa5b 	bl	8000180 <__adddf3>
 800acca:	4604      	mov	r4, r0
 800accc:	460d      	mov	r5, r1
 800acce:	e019      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800acd0:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800acd4:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800acd8:	433e      	orrs	r6, r7
 800acda:	d103      	bne.n	800ace4 <__ieee754_atan2+0x5c>
 800acdc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	f000 b8a2 	b.w	800ae28 <atan>
 800ace4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800ace8:	f006 0602 	and.w	r6, r6, #2
 800acec:	ea53 0b0b 	orrs.w	fp, r3, fp
 800acf0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800acf4:	d10a      	bne.n	800ad0c <__ieee754_atan2+0x84>
 800acf6:	2e02      	cmp	r6, #2
 800acf8:	d067      	beq.n	800adca <__ieee754_atan2+0x142>
 800acfa:	2e03      	cmp	r6, #3
 800acfc:	d102      	bne.n	800ad04 <__ieee754_atan2+0x7c>
 800acfe:	a53a      	add	r5, pc, #232	; (adr r5, 800ade8 <__ieee754_atan2+0x160>)
 800ad00:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad04:	4620      	mov	r0, r4
 800ad06:	4629      	mov	r1, r5
 800ad08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0c:	4317      	orrs	r7, r2
 800ad0e:	d106      	bne.n	800ad1e <__ieee754_atan2+0x96>
 800ad10:	f1be 0f00 	cmp.w	lr, #0
 800ad14:	da64      	bge.n	800ade0 <__ieee754_atan2+0x158>
 800ad16:	a536      	add	r5, pc, #216	; (adr r5, 800adf0 <__ieee754_atan2+0x168>)
 800ad18:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad1c:	e7f2      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800ad1e:	4542      	cmp	r2, r8
 800ad20:	d10f      	bne.n	800ad42 <__ieee754_atan2+0xba>
 800ad22:	4293      	cmp	r3, r2
 800ad24:	f106 36ff 	add.w	r6, r6, #4294967295
 800ad28:	d107      	bne.n	800ad3a <__ieee754_atan2+0xb2>
 800ad2a:	2e02      	cmp	r6, #2
 800ad2c:	d851      	bhi.n	800add2 <__ieee754_atan2+0x14a>
 800ad2e:	4b3b      	ldr	r3, [pc, #236]	; (800ae1c <__ieee754_atan2+0x194>)
 800ad30:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad34:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ad38:	e7e4      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800ad3a:	2e02      	cmp	r6, #2
 800ad3c:	d84d      	bhi.n	800adda <__ieee754_atan2+0x152>
 800ad3e:	4b38      	ldr	r3, [pc, #224]	; (800ae20 <__ieee754_atan2+0x198>)
 800ad40:	e7f6      	b.n	800ad30 <__ieee754_atan2+0xa8>
 800ad42:	4543      	cmp	r3, r8
 800ad44:	d0e4      	beq.n	800ad10 <__ieee754_atan2+0x88>
 800ad46:	1a9b      	subs	r3, r3, r2
 800ad48:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ad4c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ad50:	da21      	bge.n	800ad96 <__ieee754_atan2+0x10e>
 800ad52:	f1b9 0f00 	cmp.w	r9, #0
 800ad56:	da01      	bge.n	800ad5c <__ieee754_atan2+0xd4>
 800ad58:	323c      	adds	r2, #60	; 0x3c
 800ad5a:	db20      	blt.n	800ad9e <__ieee754_atan2+0x116>
 800ad5c:	4652      	mov	r2, sl
 800ad5e:	464b      	mov	r3, r9
 800ad60:	4620      	mov	r0, r4
 800ad62:	4629      	mov	r1, r5
 800ad64:	f7f5 fcec 	bl	8000740 <__aeabi_ddiv>
 800ad68:	f000 f9e8 	bl	800b13c <fabs>
 800ad6c:	f000 f85c 	bl	800ae28 <atan>
 800ad70:	4604      	mov	r4, r0
 800ad72:	460d      	mov	r5, r1
 800ad74:	2e01      	cmp	r6, #1
 800ad76:	d015      	beq.n	800ada4 <__ieee754_atan2+0x11c>
 800ad78:	2e02      	cmp	r6, #2
 800ad7a:	d017      	beq.n	800adac <__ieee754_atan2+0x124>
 800ad7c:	2e00      	cmp	r6, #0
 800ad7e:	d0c1      	beq.n	800ad04 <__ieee754_atan2+0x7c>
 800ad80:	a31d      	add	r3, pc, #116	; (adr r3, 800adf8 <__ieee754_atan2+0x170>)
 800ad82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad86:	4620      	mov	r0, r4
 800ad88:	4629      	mov	r1, r5
 800ad8a:	f7f5 f9f7 	bl	800017c <__aeabi_dsub>
 800ad8e:	a31c      	add	r3, pc, #112	; (adr r3, 800ae00 <__ieee754_atan2+0x178>)
 800ad90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad94:	e016      	b.n	800adc4 <__ieee754_atan2+0x13c>
 800ad96:	a51c      	add	r5, pc, #112	; (adr r5, 800ae08 <__ieee754_atan2+0x180>)
 800ad98:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ad9c:	e7ea      	b.n	800ad74 <__ieee754_atan2+0xec>
 800ad9e:	2400      	movs	r4, #0
 800ada0:	2500      	movs	r5, #0
 800ada2:	e7e7      	b.n	800ad74 <__ieee754_atan2+0xec>
 800ada4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ada8:	461d      	mov	r5, r3
 800adaa:	e7ab      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800adac:	a312      	add	r3, pc, #72	; (adr r3, 800adf8 <__ieee754_atan2+0x170>)
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	4620      	mov	r0, r4
 800adb4:	4629      	mov	r1, r5
 800adb6:	f7f5 f9e1 	bl	800017c <__aeabi_dsub>
 800adba:	4602      	mov	r2, r0
 800adbc:	460b      	mov	r3, r1
 800adbe:	a110      	add	r1, pc, #64	; (adr r1, 800ae00 <__ieee754_atan2+0x178>)
 800adc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc4:	f7f5 f9da 	bl	800017c <__aeabi_dsub>
 800adc8:	e77f      	b.n	800acca <__ieee754_atan2+0x42>
 800adca:	a50d      	add	r5, pc, #52	; (adr r5, 800ae00 <__ieee754_atan2+0x178>)
 800adcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800add0:	e798      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800add2:	a50f      	add	r5, pc, #60	; (adr r5, 800ae10 <__ieee754_atan2+0x188>)
 800add4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800add8:	e794      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800adda:	2400      	movs	r4, #0
 800addc:	2500      	movs	r5, #0
 800adde:	e791      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800ade0:	a509      	add	r5, pc, #36	; (adr r5, 800ae08 <__ieee754_atan2+0x180>)
 800ade2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ade6:	e78d      	b.n	800ad04 <__ieee754_atan2+0x7c>
 800ade8:	54442d18 	.word	0x54442d18
 800adec:	c00921fb 	.word	0xc00921fb
 800adf0:	54442d18 	.word	0x54442d18
 800adf4:	bff921fb 	.word	0xbff921fb
 800adf8:	33145c07 	.word	0x33145c07
 800adfc:	3ca1a626 	.word	0x3ca1a626
 800ae00:	54442d18 	.word	0x54442d18
 800ae04:	400921fb 	.word	0x400921fb
 800ae08:	54442d18 	.word	0x54442d18
 800ae0c:	3ff921fb 	.word	0x3ff921fb
 800ae10:	54442d18 	.word	0x54442d18
 800ae14:	3fe921fb 	.word	0x3fe921fb
 800ae18:	7ff00000 	.word	0x7ff00000
 800ae1c:	0800b7b8 	.word	0x0800b7b8
 800ae20:	0800b7d0 	.word	0x0800b7d0
 800ae24:	00000000 	.word	0x00000000

0800ae28 <atan>:
 800ae28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	4bb6      	ldr	r3, [pc, #728]	; (800b108 <atan+0x2e0>)
 800ae2e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ae32:	429e      	cmp	r6, r3
 800ae34:	4604      	mov	r4, r0
 800ae36:	460d      	mov	r5, r1
 800ae38:	468b      	mov	fp, r1
 800ae3a:	dd17      	ble.n	800ae6c <atan+0x44>
 800ae3c:	4bb3      	ldr	r3, [pc, #716]	; (800b10c <atan+0x2e4>)
 800ae3e:	429e      	cmp	r6, r3
 800ae40:	dc01      	bgt.n	800ae46 <atan+0x1e>
 800ae42:	d109      	bne.n	800ae58 <atan+0x30>
 800ae44:	b140      	cbz	r0, 800ae58 <atan+0x30>
 800ae46:	4622      	mov	r2, r4
 800ae48:	462b      	mov	r3, r5
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7f5 f997 	bl	8000180 <__adddf3>
 800ae52:	4604      	mov	r4, r0
 800ae54:	460d      	mov	r5, r1
 800ae56:	e005      	b.n	800ae64 <atan+0x3c>
 800ae58:	f1bb 0f00 	cmp.w	fp, #0
 800ae5c:	4cac      	ldr	r4, [pc, #688]	; (800b110 <atan+0x2e8>)
 800ae5e:	f300 8121 	bgt.w	800b0a4 <atan+0x27c>
 800ae62:	4dac      	ldr	r5, [pc, #688]	; (800b114 <atan+0x2ec>)
 800ae64:	4620      	mov	r0, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6c:	4baa      	ldr	r3, [pc, #680]	; (800b118 <atan+0x2f0>)
 800ae6e:	429e      	cmp	r6, r3
 800ae70:	dc11      	bgt.n	800ae96 <atan+0x6e>
 800ae72:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ae76:	429e      	cmp	r6, r3
 800ae78:	dc0a      	bgt.n	800ae90 <atan+0x68>
 800ae7a:	a38b      	add	r3, pc, #556	; (adr r3, 800b0a8 <atan+0x280>)
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f7f5 f97e 	bl	8000180 <__adddf3>
 800ae84:	2200      	movs	r2, #0
 800ae86:	4ba5      	ldr	r3, [pc, #660]	; (800b11c <atan+0x2f4>)
 800ae88:	f7f5 fdc0 	bl	8000a0c <__aeabi_dcmpgt>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d1e9      	bne.n	800ae64 <atan+0x3c>
 800ae90:	f04f 3aff 	mov.w	sl, #4294967295
 800ae94:	e027      	b.n	800aee6 <atan+0xbe>
 800ae96:	f000 f951 	bl	800b13c <fabs>
 800ae9a:	4ba1      	ldr	r3, [pc, #644]	; (800b120 <atan+0x2f8>)
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	429e      	cmp	r6, r3
 800aea0:	460d      	mov	r5, r1
 800aea2:	f300 80b8 	bgt.w	800b016 <atan+0x1ee>
 800aea6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800aeaa:	429e      	cmp	r6, r3
 800aeac:	f300 809c 	bgt.w	800afe8 <atan+0x1c0>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	f7f5 f964 	bl	8000180 <__adddf3>
 800aeb8:	2200      	movs	r2, #0
 800aeba:	4b98      	ldr	r3, [pc, #608]	; (800b11c <atan+0x2f4>)
 800aebc:	f7f5 f95e 	bl	800017c <__aeabi_dsub>
 800aec0:	2200      	movs	r2, #0
 800aec2:	4606      	mov	r6, r0
 800aec4:	460f      	mov	r7, r1
 800aec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aeca:	4620      	mov	r0, r4
 800aecc:	4629      	mov	r1, r5
 800aece:	f7f5 f957 	bl	8000180 <__adddf3>
 800aed2:	4602      	mov	r2, r0
 800aed4:	460b      	mov	r3, r1
 800aed6:	4630      	mov	r0, r6
 800aed8:	4639      	mov	r1, r7
 800aeda:	f7f5 fc31 	bl	8000740 <__aeabi_ddiv>
 800aede:	f04f 0a00 	mov.w	sl, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	460d      	mov	r5, r1
 800aee6:	4622      	mov	r2, r4
 800aee8:	462b      	mov	r3, r5
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 fafd 	bl	80004ec <__aeabi_dmul>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	4680      	mov	r8, r0
 800aef8:	4689      	mov	r9, r1
 800aefa:	f7f5 faf7 	bl	80004ec <__aeabi_dmul>
 800aefe:	a36c      	add	r3, pc, #432	; (adr r3, 800b0b0 <atan+0x288>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	4606      	mov	r6, r0
 800af06:	460f      	mov	r7, r1
 800af08:	f7f5 faf0 	bl	80004ec <__aeabi_dmul>
 800af0c:	a36a      	add	r3, pc, #424	; (adr r3, 800b0b8 <atan+0x290>)
 800af0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af12:	f7f5 f935 	bl	8000180 <__adddf3>
 800af16:	4632      	mov	r2, r6
 800af18:	463b      	mov	r3, r7
 800af1a:	f7f5 fae7 	bl	80004ec <__aeabi_dmul>
 800af1e:	a368      	add	r3, pc, #416	; (adr r3, 800b0c0 <atan+0x298>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	f7f5 f92c 	bl	8000180 <__adddf3>
 800af28:	4632      	mov	r2, r6
 800af2a:	463b      	mov	r3, r7
 800af2c:	f7f5 fade 	bl	80004ec <__aeabi_dmul>
 800af30:	a365      	add	r3, pc, #404	; (adr r3, 800b0c8 <atan+0x2a0>)
 800af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af36:	f7f5 f923 	bl	8000180 <__adddf3>
 800af3a:	4632      	mov	r2, r6
 800af3c:	463b      	mov	r3, r7
 800af3e:	f7f5 fad5 	bl	80004ec <__aeabi_dmul>
 800af42:	a363      	add	r3, pc, #396	; (adr r3, 800b0d0 <atan+0x2a8>)
 800af44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af48:	f7f5 f91a 	bl	8000180 <__adddf3>
 800af4c:	4632      	mov	r2, r6
 800af4e:	463b      	mov	r3, r7
 800af50:	f7f5 facc 	bl	80004ec <__aeabi_dmul>
 800af54:	a360      	add	r3, pc, #384	; (adr r3, 800b0d8 <atan+0x2b0>)
 800af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5a:	f7f5 f911 	bl	8000180 <__adddf3>
 800af5e:	4642      	mov	r2, r8
 800af60:	464b      	mov	r3, r9
 800af62:	f7f5 fac3 	bl	80004ec <__aeabi_dmul>
 800af66:	a35e      	add	r3, pc, #376	; (adr r3, 800b0e0 <atan+0x2b8>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	4680      	mov	r8, r0
 800af6e:	4689      	mov	r9, r1
 800af70:	4630      	mov	r0, r6
 800af72:	4639      	mov	r1, r7
 800af74:	f7f5 faba 	bl	80004ec <__aeabi_dmul>
 800af78:	a35b      	add	r3, pc, #364	; (adr r3, 800b0e8 <atan+0x2c0>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f7f5 f8fd 	bl	800017c <__aeabi_dsub>
 800af82:	4632      	mov	r2, r6
 800af84:	463b      	mov	r3, r7
 800af86:	f7f5 fab1 	bl	80004ec <__aeabi_dmul>
 800af8a:	a359      	add	r3, pc, #356	; (adr r3, 800b0f0 <atan+0x2c8>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f7f5 f8f4 	bl	800017c <__aeabi_dsub>
 800af94:	4632      	mov	r2, r6
 800af96:	463b      	mov	r3, r7
 800af98:	f7f5 faa8 	bl	80004ec <__aeabi_dmul>
 800af9c:	a356      	add	r3, pc, #344	; (adr r3, 800b0f8 <atan+0x2d0>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	f7f5 f8eb 	bl	800017c <__aeabi_dsub>
 800afa6:	4632      	mov	r2, r6
 800afa8:	463b      	mov	r3, r7
 800afaa:	f7f5 fa9f 	bl	80004ec <__aeabi_dmul>
 800afae:	a354      	add	r3, pc, #336	; (adr r3, 800b100 <atan+0x2d8>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 f8e2 	bl	800017c <__aeabi_dsub>
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	f7f5 fa96 	bl	80004ec <__aeabi_dmul>
 800afc0:	4602      	mov	r2, r0
 800afc2:	460b      	mov	r3, r1
 800afc4:	4640      	mov	r0, r8
 800afc6:	4649      	mov	r1, r9
 800afc8:	f7f5 f8da 	bl	8000180 <__adddf3>
 800afcc:	4622      	mov	r2, r4
 800afce:	462b      	mov	r3, r5
 800afd0:	f7f5 fa8c 	bl	80004ec <__aeabi_dmul>
 800afd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800afd8:	4602      	mov	r2, r0
 800afda:	460b      	mov	r3, r1
 800afdc:	d144      	bne.n	800b068 <atan+0x240>
 800afde:	4620      	mov	r0, r4
 800afe0:	4629      	mov	r1, r5
 800afe2:	f7f5 f8cb 	bl	800017c <__aeabi_dsub>
 800afe6:	e734      	b.n	800ae52 <atan+0x2a>
 800afe8:	2200      	movs	r2, #0
 800afea:	4b4c      	ldr	r3, [pc, #304]	; (800b11c <atan+0x2f4>)
 800afec:	f7f5 f8c6 	bl	800017c <__aeabi_dsub>
 800aff0:	2200      	movs	r2, #0
 800aff2:	4606      	mov	r6, r0
 800aff4:	460f      	mov	r7, r1
 800aff6:	4620      	mov	r0, r4
 800aff8:	4629      	mov	r1, r5
 800affa:	4b48      	ldr	r3, [pc, #288]	; (800b11c <atan+0x2f4>)
 800affc:	f7f5 f8c0 	bl	8000180 <__adddf3>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4630      	mov	r0, r6
 800b006:	4639      	mov	r1, r7
 800b008:	f7f5 fb9a 	bl	8000740 <__aeabi_ddiv>
 800b00c:	f04f 0a01 	mov.w	sl, #1
 800b010:	4604      	mov	r4, r0
 800b012:	460d      	mov	r5, r1
 800b014:	e767      	b.n	800aee6 <atan+0xbe>
 800b016:	4b43      	ldr	r3, [pc, #268]	; (800b124 <atan+0x2fc>)
 800b018:	429e      	cmp	r6, r3
 800b01a:	da1a      	bge.n	800b052 <atan+0x22a>
 800b01c:	2200      	movs	r2, #0
 800b01e:	4b42      	ldr	r3, [pc, #264]	; (800b128 <atan+0x300>)
 800b020:	f7f5 f8ac 	bl	800017c <__aeabi_dsub>
 800b024:	2200      	movs	r2, #0
 800b026:	4606      	mov	r6, r0
 800b028:	460f      	mov	r7, r1
 800b02a:	4620      	mov	r0, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	4b3e      	ldr	r3, [pc, #248]	; (800b128 <atan+0x300>)
 800b030:	f7f5 fa5c 	bl	80004ec <__aeabi_dmul>
 800b034:	2200      	movs	r2, #0
 800b036:	4b39      	ldr	r3, [pc, #228]	; (800b11c <atan+0x2f4>)
 800b038:	f7f5 f8a2 	bl	8000180 <__adddf3>
 800b03c:	4602      	mov	r2, r0
 800b03e:	460b      	mov	r3, r1
 800b040:	4630      	mov	r0, r6
 800b042:	4639      	mov	r1, r7
 800b044:	f7f5 fb7c 	bl	8000740 <__aeabi_ddiv>
 800b048:	f04f 0a02 	mov.w	sl, #2
 800b04c:	4604      	mov	r4, r0
 800b04e:	460d      	mov	r5, r1
 800b050:	e749      	b.n	800aee6 <atan+0xbe>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	2000      	movs	r0, #0
 800b058:	4934      	ldr	r1, [pc, #208]	; (800b12c <atan+0x304>)
 800b05a:	f7f5 fb71 	bl	8000740 <__aeabi_ddiv>
 800b05e:	f04f 0a03 	mov.w	sl, #3
 800b062:	4604      	mov	r4, r0
 800b064:	460d      	mov	r5, r1
 800b066:	e73e      	b.n	800aee6 <atan+0xbe>
 800b068:	4b31      	ldr	r3, [pc, #196]	; (800b130 <atan+0x308>)
 800b06a:	4e32      	ldr	r6, [pc, #200]	; (800b134 <atan+0x30c>)
 800b06c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 f882 	bl	800017c <__aeabi_dsub>
 800b078:	4622      	mov	r2, r4
 800b07a:	462b      	mov	r3, r5
 800b07c:	f7f5 f87e 	bl	800017c <__aeabi_dsub>
 800b080:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b08c:	f7f5 f876 	bl	800017c <__aeabi_dsub>
 800b090:	f1bb 0f00 	cmp.w	fp, #0
 800b094:	4604      	mov	r4, r0
 800b096:	460d      	mov	r5, r1
 800b098:	f6bf aee4 	bge.w	800ae64 <atan+0x3c>
 800b09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0a0:	461d      	mov	r5, r3
 800b0a2:	e6df      	b.n	800ae64 <atan+0x3c>
 800b0a4:	4d24      	ldr	r5, [pc, #144]	; (800b138 <atan+0x310>)
 800b0a6:	e6dd      	b.n	800ae64 <atan+0x3c>
 800b0a8:	8800759c 	.word	0x8800759c
 800b0ac:	7e37e43c 	.word	0x7e37e43c
 800b0b0:	e322da11 	.word	0xe322da11
 800b0b4:	3f90ad3a 	.word	0x3f90ad3a
 800b0b8:	24760deb 	.word	0x24760deb
 800b0bc:	3fa97b4b 	.word	0x3fa97b4b
 800b0c0:	a0d03d51 	.word	0xa0d03d51
 800b0c4:	3fb10d66 	.word	0x3fb10d66
 800b0c8:	c54c206e 	.word	0xc54c206e
 800b0cc:	3fb745cd 	.word	0x3fb745cd
 800b0d0:	920083ff 	.word	0x920083ff
 800b0d4:	3fc24924 	.word	0x3fc24924
 800b0d8:	5555550d 	.word	0x5555550d
 800b0dc:	3fd55555 	.word	0x3fd55555
 800b0e0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b0e4:	bfa2b444 	.word	0xbfa2b444
 800b0e8:	52defd9a 	.word	0x52defd9a
 800b0ec:	3fadde2d 	.word	0x3fadde2d
 800b0f0:	af749a6d 	.word	0xaf749a6d
 800b0f4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b0f8:	fe231671 	.word	0xfe231671
 800b0fc:	3fbc71c6 	.word	0x3fbc71c6
 800b100:	9998ebc4 	.word	0x9998ebc4
 800b104:	3fc99999 	.word	0x3fc99999
 800b108:	440fffff 	.word	0x440fffff
 800b10c:	7ff00000 	.word	0x7ff00000
 800b110:	54442d18 	.word	0x54442d18
 800b114:	bff921fb 	.word	0xbff921fb
 800b118:	3fdbffff 	.word	0x3fdbffff
 800b11c:	3ff00000 	.word	0x3ff00000
 800b120:	3ff2ffff 	.word	0x3ff2ffff
 800b124:	40038000 	.word	0x40038000
 800b128:	3ff80000 	.word	0x3ff80000
 800b12c:	bff00000 	.word	0xbff00000
 800b130:	0800b808 	.word	0x0800b808
 800b134:	0800b7e8 	.word	0x0800b7e8
 800b138:	3ff921fb 	.word	0x3ff921fb

0800b13c <fabs>:
 800b13c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b140:	4619      	mov	r1, r3
 800b142:	4770      	bx	lr

0800b144 <_init>:
 800b144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b146:	bf00      	nop
 800b148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14a:	bc08      	pop	{r3}
 800b14c:	469e      	mov	lr, r3
 800b14e:	4770      	bx	lr

0800b150 <_fini>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	bf00      	nop
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr
