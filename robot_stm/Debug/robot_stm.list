
robot_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d498  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800d5a8  0800d5a8  0000e5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9d0  0800d9d0  0000f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d9d0  0800d9d0  0000e9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9d8  0800d9d8  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9d8  0800d9d8  0000e9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9dc  0800d9dc  0000e9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d9e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  200001d4  0800dbb4  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00001100  20000978  0800dbb4  0000f978  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001657c  00000000  00000000  0000f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aa6  00000000  00000000  00025779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00029220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f79  00000000  00000000  0002a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc3a  00000000  00000000  0002b581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b44  00000000  00000000  000471bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095034  00000000  00000000  00060cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5d33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  000f5d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fc1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d590 	.word	0x0800d590

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800d590 	.word	0x0800d590

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001120:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001122:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <MX_ADC1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001126:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_ADC1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <MX_ADC1_Init+0x74>)
 800113a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800113e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001146:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_ADC1_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114c:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_ADC1_Init+0x74>)
 800114e:	f002 fbdd 	bl	800390c <HAL_ADC_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001158:	f000 fe27 	bl	8001daa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800115c:	2301      	movs	r3, #1
 800115e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001160:	2301      	movs	r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001164:	2307      	movs	r3, #7
 8001166:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_ADC1_Init+0x74>)
 800116e:	f002 fe2f 	bl	8003dd0 <HAL_ADC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001178:	f000 fe17 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200001f0 	.word	0x200001f0
 8001188:	40012400 	.word	0x40012400

0800118c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a18      	ldr	r2, [pc, #96]	@ (8001208 <HAL_ADC_MspInit+0x7c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d129      	bne.n	8001200 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_ADC_MspInit+0x80>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a16      	ldr	r2, [pc, #88]	@ (800120c <HAL_ADC_MspInit+0x80>)
 80011b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_ADC_MspInit+0x80>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <HAL_ADC_MspInit+0x80>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_ADC_MspInit+0x80>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_ADC_MspInit+0x80>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = BATTERY_VOLTAGE_Pin;
 80011dc:	2302      	movs	r3, #2
 80011de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	4619      	mov	r1, r3
 80011ea:	4809      	ldr	r0, [pc, #36]	@ (8001210 <HAL_ADC_MspInit+0x84>)
 80011ec:	f003 fb48 	bl	8004880 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2105      	movs	r1, #5
 80011f4:	2012      	movs	r0, #18
 80011f6:	f003 f85e 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011fa:	2012      	movs	r0, #18
 80011fc:	f003 f877 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40012400 	.word	0x40012400
 800120c:	40021000 	.word	0x40021000
 8001210:	40010800 	.word	0x40010800

08001214 <start_interface>:





static void start_interface(){
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(communication_interface.huart, communication_interface.receive_buffer, Rx_BUFFER_SIZE);
 8001218:	4b04      	ldr	r3, [pc, #16]	@ (800122c <start_interface+0x18>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2210      	movs	r2, #16
 800121e:	4904      	ldr	r1, [pc, #16]	@ (8001230 <start_interface+0x1c>)
 8001220:	4618      	mov	r0, r3
 8001222:	f008 f933 	bl	800948c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000220 	.word	0x20000220
 8001230:	20000224 	.word	0x20000224

08001234 <communication_interface_init>:



void communication_interface_init(UART_HandleTypeDef *huart, DMA_HandleTypeDef* hdma_usart_rx){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	__HAL_DMA_DISABLE_IT(hdma_usart_rx, DMA_IT_HT); //disable half transfer DMA interrupt
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0204 	bic.w	r2, r2, #4
 800124c:	601a      	str	r2, [r3, #0]

	communication_interface.huart = huart;
 800124e:	4a0a      	ldr	r2, [pc, #40]	@ (8001278 <communication_interface_init+0x44>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6013      	str	r3, [r2, #0]
	communication_interface.received_command_size = 0;
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <communication_interface_init+0x44>)
 8001256:	2200      	movs	r2, #0
 8001258:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
	communication_interface.command_received_flag = 0;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <communication_interface_init+0x44>)
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116

	communication_interface.uart_tx_ready = 1;
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <communication_interface_init+0x44>)
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	start_interface();
 800126c:	f7ff ffd2 	bl	8001214 <start_interface>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000220 	.word	0x20000220

0800127c <execute_command>:



void execute_command(){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
	if(communication_interface.command_received_flag &&
 8001282:	4b20      	ldr	r3, [pc, #128]	@ (8001304 <execute_command+0x88>)
 8001284:	f893 3116 	ldrb.w	r3, [r3, #278]	@ 0x116
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d030      	beq.n	80012f0 <execute_command+0x74>
			communication_interface.received_command_size >= 3 &&
 800128e:	4b1d      	ldr	r3, [pc, #116]	@ (8001304 <execute_command+0x88>)
 8001290:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
	if(communication_interface.command_received_flag &&
 8001294:	2b02      	cmp	r3, #2
 8001296:	d92b      	bls.n	80012f0 <execute_command+0x74>
			communication_interface.received_command_size <= 6 &&
 8001298:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <execute_command+0x88>)
 800129a:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
			communication_interface.received_command_size >= 3 &&
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d826      	bhi.n	80012f0 <execute_command+0x74>
			communication_interface.receive_buffer[0] == 0xAA){
 80012a2:	4b18      	ldr	r3, [pc, #96]	@ (8001304 <execute_command+0x88>)
 80012a4:	791b      	ldrb	r3, [r3, #4]
			communication_interface.received_command_size <= 6 &&
 80012a6:	2baa      	cmp	r3, #170	@ 0xaa
 80012a8:	d122      	bne.n	80012f0 <execute_command+0x74>
				uint8_t address = communication_interface.receive_buffer[1];
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <execute_command+0x88>)
 80012ac:	795b      	ldrb	r3, [r3, #5]
 80012ae:	71fb      	strb	r3, [r7, #7]
				if(address < REGISTER_MAP_SIZE){
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	2b1f      	cmp	r3, #31
 80012b4:	d81c      	bhi.n	80012f0 <execute_command+0x74>
					uint8_t size = communication_interface.received_command_size - 2;
 80012b6:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <execute_command+0x88>)
 80012b8:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3b02      	subs	r3, #2
 80012c0:	71bb      	strb	r3, [r7, #6]
					if(registerMap[address].ptr != NULL && registerMap[address].dataSize == size){
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4a10      	ldr	r2, [pc, #64]	@ (8001308 <execute_command+0x8c>)
 80012c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d010      	beq.n	80012f0 <execute_command+0x74>
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <execute_command+0x8c>)
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	791b      	ldrb	r3, [r3, #4]
 80012d8:	79ba      	ldrb	r2, [r7, #6]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d108      	bne.n	80012f0 <execute_command+0x74>
						memcpy(registerMap[address].ptr, communication_interface.receive_buffer+2, size);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <execute_command+0x8c>)
 80012e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80012e6:	4909      	ldr	r1, [pc, #36]	@ (800130c <execute_command+0x90>)
 80012e8:	79ba      	ldrb	r2, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f009 fe9d 	bl	800b02a <memcpy>
					}
				}
	}
	communication_interface.command_received_flag = 0;
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <execute_command+0x88>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
	start_interface();
 80012f8:	f7ff ff8c 	bl	8001214 <start_interface>
	return;
 80012fc:	bf00      	nop

}
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000220 	.word	0x20000220
 8001308:	20000338 	.word	0x20000338
 800130c:	20000226 	.word	0x20000226

08001310 <uart_send_buffer>:



void uart_send_buffer(uint16_t size){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
	if(communication_interface.uart_tx_ready){
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <uart_send_buffer+0x34>)
 800131c:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <uart_send_buffer+0x2c>
		communication_interface.uart_tx_ready = 0;
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <uart_send_buffer+0x34>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		HAL_UART_Transmit_DMA(communication_interface.huart, communication_interface.transmit_buffer, size);
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <uart_send_buffer+0x34>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	4904      	ldr	r1, [pc, #16]	@ (8001348 <uart_send_buffer+0x38>)
 8001336:	4618      	mov	r0, r3
 8001338:	f008 f838 	bl	80093ac <HAL_UART_Transmit_DMA>
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000220 	.word	0x20000220
 8001348:	20000234 	.word	0x20000234

0800134c <HAL_UARTEx_RxEventCallback>:
 * ###############################################
 */

// received UART command
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == communication_interface.huart->Instance)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x38>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d109      	bne.n	800137a <HAL_UARTEx_RxEventCallback+0x2e>
    {
    	communication_interface.command_received_flag = 1;
 8001366:	4b07      	ldr	r3, [pc, #28]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x38>)
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
    	communication_interface.received_command_size = Size;
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <HAL_UARTEx_RxEventCallback+0x38>)
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	f8a2 3114 	strh.w	r3, [r2, #276]	@ 0x114
    	start_interface();
 8001376:	f7ff ff4d 	bl	8001214 <start_interface>
    }
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000220 	.word	0x20000220

08001388 <HAL_UART_TxCpltCallback>:

// UART transmit ready
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == communication_interface.huart->Instance){
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_UART_TxCpltCallback+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d103      	bne.n	80013a6 <HAL_UART_TxCpltCallback+0x1e>
		communication_interface.uart_tx_ready = 1;
 800139e:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <HAL_UART_TxCpltCallback+0x28>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	}
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	20000220 	.word	0x20000220

080013b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_DMA_Init+0x58>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a13      	ldr	r2, [pc, #76]	@ (800140c <MX_DMA_Init+0x58>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6153      	str	r3, [r2, #20]
 80013c6:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_DMA_Init+0x58>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2103      	movs	r1, #3
 80013d6:	200e      	movs	r0, #14
 80013d8:	f002 ff6d 	bl	80042b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80013dc:	200e      	movs	r0, #14
 80013de:	f002 ff86 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2103      	movs	r1, #3
 80013e6:	200f      	movs	r0, #15
 80013e8:	f002 ff65 	bl	80042b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013ec:	200f      	movs	r0, #15
 80013ee:	f002 ff7e 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 1, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2101      	movs	r1, #1
 80013f6:	2011      	movs	r0, #17
 80013f8:	f002 ff5d 	bl	80042b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013fc:	2011      	movs	r0, #17
 80013fe:	f002 ff76 	bl	80042ee <HAL_NVIC_EnableIRQ>

}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40021000 	.word	0x40021000

08001410 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	4b40      	ldr	r3, [pc, #256]	@ (8001528 <MX_GPIO_Init+0x118>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a3f      	ldr	r2, [pc, #252]	@ (8001528 <MX_GPIO_Init+0x118>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <MX_GPIO_Init+0x118>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143c:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <MX_GPIO_Init+0x118>)
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	4a39      	ldr	r2, [pc, #228]	@ (8001528 <MX_GPIO_Init+0x118>)
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	6193      	str	r3, [r2, #24]
 8001448:	4b37      	ldr	r3, [pc, #220]	@ (8001528 <MX_GPIO_Init+0x118>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f003 0320 	and.w	r3, r3, #32
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <MX_GPIO_Init+0x118>)
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	4a33      	ldr	r2, [pc, #204]	@ (8001528 <MX_GPIO_Init+0x118>)
 800145a:	f043 0304 	orr.w	r3, r3, #4
 800145e:	6193      	str	r3, [r2, #24]
 8001460:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <MX_GPIO_Init+0x118>)
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146c:	4b2e      	ldr	r3, [pc, #184]	@ (8001528 <MX_GPIO_Init+0x118>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a2d      	ldr	r2, [pc, #180]	@ (8001528 <MX_GPIO_Init+0x118>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b2b      	ldr	r3, [pc, #172]	@ (8001528 <MX_GPIO_Init+0x118>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800148a:	4828      	ldr	r0, [pc, #160]	@ (800152c <MX_GPIO_Init+0x11c>)
 800148c:	f003 fb7c 	bl	8004b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR1_GPIO_Port, DIR1_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2108      	movs	r1, #8
 8001494:	4826      	ldr	r0, [pc, #152]	@ (8001530 <MX_GPIO_Init+0x120>)
 8001496:	f003 fb77 	bl	8004b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	4824      	ldr	r0, [pc, #144]	@ (8001530 <MX_GPIO_Init+0x120>)
 80014a0:	f003 fb72 	bl	8004b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR2_GPIO_Port, DIR2_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	4822      	ldr	r0, [pc, #136]	@ (8001534 <MX_GPIO_Init+0x124>)
 80014aa:	f003 fb6d 	bl	8004b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2302      	movs	r3, #2
 80014be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0310 	add.w	r3, r7, #16
 80014c4:	4619      	mov	r1, r3
 80014c6:	4819      	ldr	r0, [pc, #100]	@ (800152c <MX_GPIO_Init+0x11c>)
 80014c8:	f003 f9da 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin ENABLE_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|ENABLE_Pin;
 80014cc:	2388      	movs	r3, #136	@ 0x88
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2302      	movs	r3, #2
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4813      	ldr	r0, [pc, #76]	@ (8001530 <MX_GPIO_Init+0x120>)
 80014e4:	f003 f9cc 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR2_Pin */
  GPIO_InitStruct.Pin = DIR2_Pin;
 80014e8:	2302      	movs	r3, #2
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIR2_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	4619      	mov	r1, r3
 80014fe:	480d      	ldr	r0, [pc, #52]	@ (8001534 <MX_GPIO_Init+0x124>)
 8001500:	f003 f9be 	bl	8004880 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_STATE_Pin */
  GPIO_InitStruct.Pin = BLUE_STATE_Pin;
 8001504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001508:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_STATE_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_GPIO_Init+0x120>)
 800151a:	f003 f9b1 	bl	8004880 <HAL_GPIO_Init>

}
 800151e:	bf00      	nop
 8001520:	3720      	adds	r7, #32
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	40011000 	.word	0x40011000
 8001530:	40010800 	.word	0x40010800
 8001534:	40010c00 	.word	0x40010c00

08001538 <calculate_encoder_angle>:
volatile float encoder_angle;




void calculate_encoder_angle(){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
	static int16_t prev_angle;

	int16_t new_angle = ((uint16_t)encoder_data_buffer[0] << 8) | (uint16_t)encoder_data_buffer[1];
 800153e:	4b37      	ldr	r3, [pc, #220]	@ (800161c <calculate_encoder_angle+0xe4>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	b21b      	sxth	r3, r3
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	b21a      	sxth	r2, r3
 800154a:	4b34      	ldr	r3, [pc, #208]	@ (800161c <calculate_encoder_angle+0xe4>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	b21b      	sxth	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	80fb      	strh	r3, [r7, #6]

	if(prev_angle > 3600 && new_angle < 500){ //overflow
 8001556:	4b32      	ldr	r3, [pc, #200]	@ (8001620 <calculate_encoder_angle+0xe8>)
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8001560:	dd1c      	ble.n	800159c <calculate_encoder_angle+0x64>
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800156a:	da17      	bge.n	800159c <calculate_encoder_angle+0x64>
		encoder_angle += 4095 - prev_angle + new_angle;
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <calculate_encoder_angle+0xe8>)
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001576:	330f      	adds	r3, #15
 8001578:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800157c:	4413      	add	r3, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fbac 	bl	8000cdc <__aeabi_i2f>
 8001584:	4602      	mov	r2, r0
 8001586:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <calculate_encoder_angle+0xec>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	4610      	mov	r0, r2
 800158e:	f7ff faf1 	bl	8000b74 <__addsf3>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	4b23      	ldr	r3, [pc, #140]	@ (8001624 <calculate_encoder_angle+0xec>)
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e037      	b.n	800160c <calculate_encoder_angle+0xd4>
	}
	else if(prev_angle < 500 && new_angle > 3600){ //underflow
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <calculate_encoder_angle+0xe8>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015a6:	da1d      	bge.n	80015e4 <calculate_encoder_angle+0xac>
 80015a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ac:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 80015b0:	dd18      	ble.n	80015e4 <calculate_encoder_angle+0xac>
		encoder_angle += -prev_angle - (4095 - new_angle);
 80015b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <calculate_encoder_angle+0xe8>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	425a      	negs	r2, r3
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80015c2:	330f      	adds	r3, #15
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fb88 	bl	8000cdc <__aeabi_i2f>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <calculate_encoder_angle+0xec>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f7ff facd 	bl	8000b74 <__addsf3>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <calculate_encoder_angle+0xec>)
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	e013      	b.n	800160c <calculate_encoder_angle+0xd4>
	}
	else{
		encoder_angle += new_angle - prev_angle;
 80015e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <calculate_encoder_angle+0xe8>)
 80015ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff fb73 	bl	8000cdc <__aeabi_i2f>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <calculate_encoder_angle+0xec>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7ff fab8 	bl	8000b74 <__addsf3>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <calculate_encoder_angle+0xec>)
 800160a:	601a      	str	r2, [r3, #0]
	}

	prev_angle = new_angle;
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <calculate_encoder_angle+0xe8>)
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	8013      	strh	r3, [r2, #0]

}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000438 	.word	0x20000438
 8001620:	20000440 	.word	0x20000440
 8001624:	2000043c 	.word	0x2000043c

08001628 <saturation>:



void saturation(float min, float max, float* val){
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	if(*val > max) *val = max;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	68b8      	ldr	r0, [r7, #8]
 800163c:	f7ff fd40 	bl	80010c0 <__aeabi_fcmplt>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <saturation+0x24>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68ba      	ldr	r2, [r7, #8]
 800164a:	601a      	str	r2, [r3, #0]
	if(*val < min) *val = min;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fd52 	bl	80010fc <__aeabi_fcmpgt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <saturation+0x38>
}
 800165e:	e002      	b.n	8001666 <saturation+0x3e>
	if(*val < min) *val = min;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <MX_I2C1_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	@ (80016c4 <MX_I2C1_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <MX_I2C1_Init+0x50>)
 800167c:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <MX_I2C1_Init+0x58>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001680:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168c:	4b0c      	ldr	r3, [pc, #48]	@ (80016c0 <MX_I2C1_Init+0x50>)
 800168e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169a:	4b09      	ldr	r3, [pc, #36]	@ (80016c0 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <MX_I2C1_Init+0x50>)
 80016ae:	f003 fa9d 	bl	8004bec <HAL_I2C_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b8:	f000 fb77 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000444 	.word	0x20000444
 80016c4:	40005400 	.word	0x40005400
 80016c8:	000186a0 	.word	0x000186a0

080016cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016d0:	4b12      	ldr	r3, [pc, #72]	@ (800171c <MX_I2C2_Init+0x50>)
 80016d2:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <MX_I2C2_Init+0x54>)
 80016d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_I2C2_Init+0x50>)
 80016d8:	4a12      	ldr	r2, [pc, #72]	@ (8001724 <MX_I2C2_Init+0x58>)
 80016da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_I2C2_Init+0x50>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_I2C2_Init+0x50>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_I2C2_Init+0x50>)
 80016ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f0:	4b0a      	ldr	r3, [pc, #40]	@ (800171c <MX_I2C2_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_I2C2_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016fc:	4b07      	ldr	r3, [pc, #28]	@ (800171c <MX_I2C2_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_I2C2_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	@ (800171c <MX_I2C2_Init+0x50>)
 800170a:	f003 fa6f 	bl	8004bec <HAL_I2C_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001714:	f000 fb49 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000498 	.word	0x20000498
 8001720:	40005800 	.word	0x40005800
 8001724:	000186a0 	.word	0x000186a0

08001728 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	@ 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a42      	ldr	r2, [pc, #264]	@ (800184c <HAL_I2C_MspInit+0x124>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d14a      	bne.n	80017de <HAL_I2C_MspInit+0xb6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001748:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a40      	ldr	r2, [pc, #256]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b3e      	ldr	r3, [pc, #248]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001760:	23c0      	movs	r3, #192	@ 0xc0
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	2312      	movs	r3, #18
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4619      	mov	r1, r3
 8001772:	4838      	ldr	r0, [pc, #224]	@ (8001854 <HAL_I2C_MspInit+0x12c>)
 8001774:	f003 f884 	bl	8004880 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001778:	4b35      	ldr	r3, [pc, #212]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	4a34      	ldr	r2, [pc, #208]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 800177e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001782:	61d3      	str	r3, [r2, #28]
 8001784:	4b32      	ldr	r3, [pc, #200]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8001790:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 8001792:	4a32      	ldr	r2, [pc, #200]	@ (800185c <HAL_I2C_MspInit+0x134>)
 8001794:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001796:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 8001798:	2200      	movs	r2, #0
 800179a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	4b2e      	ldr	r3, [pc, #184]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017a4:	2280      	movs	r2, #128	@ 0x80
 80017a6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017b4:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ba:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80017c0:	4825      	ldr	r0, [pc, #148]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017c2:	f002 fdaf 	bl	8004324 <HAL_DMA_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80017cc:	f000 faed 	bl	8001daa <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80017d6:	4a20      	ldr	r2, [pc, #128]	@ (8001858 <HAL_I2C_MspInit+0x130>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80017dc:	e031      	b.n	8001842 <HAL_I2C_MspInit+0x11a>
  else if(i2cHandle->Instance==I2C2)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001860 <HAL_I2C_MspInit+0x138>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d12c      	bne.n	8001842 <HAL_I2C_MspInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e8:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a18      	ldr	r2, [pc, #96]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001800:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001806:	2312      	movs	r3, #18
 8001808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2303      	movs	r3, #3
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	4619      	mov	r1, r3
 8001814:	480f      	ldr	r0, [pc, #60]	@ (8001854 <HAL_I2C_MspInit+0x12c>)
 8001816:	f003 f833 	bl	8004880 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800181a:	4b0d      	ldr	r3, [pc, #52]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 8001820:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001824:	61d3      	str	r3, [r2, #28]
 8001826:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <HAL_I2C_MspInit+0x128>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	2100      	movs	r1, #0
 8001836:	2021      	movs	r0, #33	@ 0x21
 8001838:	f002 fd3d 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800183c:	2021      	movs	r0, #33	@ 0x21
 800183e:	f002 fd56 	bl	80042ee <HAL_NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40005400 	.word	0x40005400
 8001850:	40021000 	.word	0x40021000
 8001854:	40010c00 	.word	0x40010c00
 8001858:	200004ec 	.word	0x200004ec
 800185c:	40020080 	.word	0x40020080
 8001860:	40005800 	.word	0x40005800

08001864 <filter_init>:
 */

#include "low_pass_filter.h"


filter_typedef filter_init(float alpha){
 8001864:	b490      	push	{r4, r7}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	filter_typedef f = {alpha, 0, 1};
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	2301      	movs	r3, #1
 800187a:	753b      	strb	r3, [r7, #20]
	return f;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	461c      	mov	r4, r3
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001888:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bc90      	pop	{r4, r7}
 8001894:	4770      	bx	lr

08001896 <filter>:


float filter(filter_typedef* filter, float new_value){
 8001896:	b590      	push	{r4, r7, lr}
 8001898:	b085      	sub	sp, #20
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
	if(filter->reset){
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	7a1b      	ldrb	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d007      	beq.n	80018b8 <filter+0x22>
		filter->reset = 0;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	721a      	strb	r2, [r3, #8]
		filter->prev_value = new_value;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	605a      	str	r2, [r3, #4]
		return new_value;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	e021      	b.n	80018fc <filter+0x66>
	}
	else{
		float filtered_value = (filter->alpha) * new_value + (1 - filter->alpha) * filter->prev_value;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6839      	ldr	r1, [r7, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fa60 	bl	8000d84 <__aeabi_fmul>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461c      	mov	r4, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80018d2:	f7ff f94d 	bl	8000b70 <__aeabi_fsub>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f7ff fa4f 	bl	8000d84 <__aeabi_fmul>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff f942 	bl	8000b74 <__addsf3>
 80018f0:	4603      	mov	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]
		filter->prev_value = filtered_value;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	605a      	str	r2, [r3, #4]
		return filtered_value;
 80018fa:	68fb      	ldr	r3, [r7, #12]
	}
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	bd90      	pop	{r4, r7, pc}

08001904 <reset_filter>:


void reset_filter(filter_typedef* filter){
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	filter->reset = 1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	721a      	strb	r2, [r3, #8]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <__io_putchar>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


int __io_putchar(int ch)  //for printf
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d109      	bne.n	800193e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800192a:	230d      	movs	r3, #13
 800192c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart1, &ch2, 1, HAL_MAX_DELAY);
 800192e:	f107 010f 	add.w	r1, r7, #15
 8001932:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001936:	2201      	movs	r2, #1
 8001938:	4807      	ldr	r0, [pc, #28]	@ (8001958 <__io_putchar+0x3c>)
 800193a:	f007 fcab 	bl	8009294 <HAL_UART_Transmit>
    }
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800193e:	1d39      	adds	r1, r7, #4
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001944:	2201      	movs	r2, #1
 8001946:	4804      	ldr	r0, [pc, #16]	@ (8001958 <__io_putchar+0x3c>)
 8001948:	f007 fca4 	bl	8009294 <HAL_UART_Transmit>
    return 1;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000758 	.word	0x20000758

0800195c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	if(htim == stepper1.htim){
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d103      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x1a>
		stepper_update(&stepper1);
 800196e:	4810      	ldr	r0, [pc, #64]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001970:	f001 fa28 	bl	8002dc4 <stepper_update>
		//HAL_I2C_Mem_Read_IT(&hi2c2, 0x6C, 0x0C, 1, encoder_data_buffer, 2);  //encoder
	}
	else if(htim == &htim1){
		HAL_ADC_Start_IT(&hadc1);
	}
}
 8001974:	e017      	b.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x4a>
	else if(htim == stepper2.htim){
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	429a      	cmp	r2, r3
 800197e:	d103      	bne.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x2c>
		stepper_update(&stepper2);
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001982:	f001 fa1f 	bl	8002dc4 <stepper_update>
}
 8001986:	e00e      	b.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x4a>
	else if (htim == &htim4){
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d103      	bne.n	8001998 <HAL_TIM_PeriodElapsedCallback+0x3c>
		mpu_get_data_x_angle_DMA(&mpu);
 8001990:	480a      	ldr	r0, [pc, #40]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001992:	f000 fc6c 	bl	800226e <mpu_get_data_x_angle_DMA>
}
 8001996:	e006      	b.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x4a>
	else if(htim == &htim1){
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a09      	ldr	r2, [pc, #36]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d102      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x4a>
		HAL_ADC_Start_IT(&hadc1);
 80019a0:	4808      	ldr	r0, [pc, #32]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80019a2:	f002 f88b 	bl	8003abc <HAL_ADC_Start_IT>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000530 	.word	0x20000530
 80019b4:	2000055c 	.word	0x2000055c
 80019b8:	20000710 	.word	0x20000710
 80019bc:	20000588 	.word	0x20000588
 80019c0:	20000638 	.word	0x20000638
 80019c4:	200001f0 	.word	0x200001f0

080019c8 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1){
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a07      	ldr	r2, [pc, #28]	@ (80019f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d107      	bne.n	80019e8 <HAL_ADC_ConvCpltCallback+0x20>
		battery_voltage_update(HAL_ADC_GetValue(&hadc1));
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <HAL_ADC_ConvCpltCallback+0x28>)
 80019da:	f002 f925 	bl	8003c28 <HAL_ADC_GetValue>
 80019de:	4603      	mov	r3, r0
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 f834 	bl	8002a50 <battery_voltage_update>
	}
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200001f0 	.word	0x200001f0

080019f4 <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){   // DMA transfer complete mpu
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	if(hi2c == mpu.hi2c){
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_I2C_MemRxCpltCallback+0x3c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d10a      	bne.n	8001a1c <HAL_I2C_MemRxCpltCallback+0x28>
		DMA_transfer_complete_callback(&mpu);
 8001a06:	480a      	ldr	r0, [pc, #40]	@ (8001a30 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8001a08:	f000 fdd2 	bl	80025b0 <DMA_transfer_complete_callback>
		if(robot.control_enable) robot.data_ready = 1;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_I2C_MemRxCpltCallback+0x40>)
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <HAL_I2C_MemRxCpltCallback+0x34>
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_I2C_MemRxCpltCallback+0x40>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]

	}
	else if (hi2c == &hi2c2){  // encoder
		calculate_encoder_angle();
	}
}
 8001a1a:	e005      	b.n	8001a28 <HAL_I2C_MemRxCpltCallback+0x34>
	else if (hi2c == &hi2c2){  // encoder
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <HAL_I2C_MemRxCpltCallback+0x44>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_I2C_MemRxCpltCallback+0x34>
		calculate_encoder_angle();
 8001a24:	f7ff fd88 	bl	8001538 <calculate_encoder_angle>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000588 	.word	0x20000588
 8001a34:	200005d0 	.word	0x200005d0
 8001a38:	20000498 	.word	0x20000498
 8001a3c:	00000000 	.word	0x00000000

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a44:	b08a      	sub	sp, #40	@ 0x28
 8001a46:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a48:	f001 feda 	bl	8003800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4c:	f000 f952 	bl	8001cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a50:	f7ff fcde 	bl	8001410 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a54:	f7ff fcae 	bl	80013b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a58:	f7ff fe0a 	bl	8001670 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001a5c:	f001 fbd4 	bl	8003208 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a60:	f001 fc48 	bl	80032f4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a64:	f001 fdd2 	bl	800360c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001a68:	f7ff fe30 	bl	80016cc <MX_I2C2_Init>
  MX_TIM4_Init();
 8001a6c:	f001 fcb8 	bl	80033e0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001a70:	f7ff fb4e 	bl	8001110 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a74:	f001 fb76 	bl	8003164 <MX_TIM1_Init>
  /*##################################################
   * 			SETUP begin
   * ##################################################
   */

  robot_init();
 8001a78:	f000 fdfc 	bl	8002674 <robot_init>


  // stepper motor setup
   stepper_init(&stepper1, &htim2, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001a7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a80:	9304      	str	r3, [sp, #16]
 8001a82:	232d      	movs	r3, #45	@ 0x2d
 8001a84:	9303      	str	r3, [sp, #12]
 8001a86:	2308      	movs	r3, #8
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	4b81      	ldr	r3, [pc, #516]	@ (8001c90 <main+0x250>)
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	2380      	movs	r3, #128	@ 0x80
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	4b7f      	ldr	r3, [pc, #508]	@ (8001c90 <main+0x250>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	497f      	ldr	r1, [pc, #508]	@ (8001c94 <main+0x254>)
 8001a98:	487f      	ldr	r0, [pc, #508]	@ (8001c98 <main+0x258>)
 8001a9a:	f001 f86b 	bl	8002b74 <stepper_init>
 		  DIR1_GPIO_Port, DIR1_Pin, 45, -1);
   stepper_init(&stepper2, &htim3, TIM_CHANNEL_1, ENABLE_GPIO_Port, ENABLE_Pin,
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	9304      	str	r3, [sp, #16]
 8001aa2:	232d      	movs	r3, #45	@ 0x2d
 8001aa4:	9303      	str	r3, [sp, #12]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8001c9c <main+0x25c>)
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2380      	movs	r3, #128	@ 0x80
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4b77      	ldr	r3, [pc, #476]	@ (8001c90 <main+0x250>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	497a      	ldr	r1, [pc, #488]	@ (8001ca0 <main+0x260>)
 8001ab8:	487a      	ldr	r0, [pc, #488]	@ (8001ca4 <main+0x264>)
 8001aba:	f001 f85b 	bl	8002b74 <stepper_init>
 		  DIR2_GPIO_Port, DIR2_Pin, 45, 1);


   // MPU6050 setup
   mpu_init(&mpu, &hi2c1, 0xD0);
 8001abe:	22d0      	movs	r2, #208	@ 0xd0
 8001ac0:	4979      	ldr	r1, [pc, #484]	@ (8001ca8 <main+0x268>)
 8001ac2:	487a      	ldr	r0, [pc, #488]	@ (8001cac <main+0x26c>)
 8001ac4:	f000 face 	bl	8002064 <mpu_init>
   set_gyro_scale(&mpu, range_250);
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4878      	ldr	r0, [pc, #480]	@ (8001cac <main+0x26c>)
 8001acc:	f000 f9f6 	bl	8001ebc <set_gyro_scale>
   set_accelerometer_scale(&mpu, range_2g);
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	4876      	ldr	r0, [pc, #472]	@ (8001cac <main+0x26c>)
 8001ad4:	f000 fa40 	bl	8001f58 <set_accelerometer_scale>
   mpu_low_pass_filter(&mpu, Acc94Hz_Gyro98Hz);
 8001ad8:	2102      	movs	r1, #2
 8001ada:	4874      	ldr	r0, [pc, #464]	@ (8001cac <main+0x26c>)
 8001adc:	f000 fa8a 	bl	8001ff4 <mpu_low_pass_filter>

   HAL_Delay(1000); // gives time to leave the robot stable after turn on
 8001ae0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ae4:	f001 feee 	bl	80038c4 <HAL_Delay>
   mpu_gyro_calibration(&mpu);
 8001ae8:	4870      	ldr	r0, [pc, #448]	@ (8001cac <main+0x26c>)
 8001aea:	f000 fbd7 	bl	800229c <mpu_gyro_calibration>



   // communication protocol setup
   communication_interface_init(&huart1, &hdma_usart1_rx);
 8001aee:	4970      	ldr	r1, [pc, #448]	@ (8001cb0 <main+0x270>)
 8001af0:	4870      	ldr	r0, [pc, #448]	@ (8001cb4 <main+0x274>)
 8001af2:	f7ff fb9f 	bl	8001234 <communication_interface_init>

   registerMap[0].ptr = &robot.robot_enable;
 8001af6:	4b70      	ldr	r3, [pc, #448]	@ (8001cb8 <main+0x278>)
 8001af8:	4a70      	ldr	r2, [pc, #448]	@ (8001cbc <main+0x27c>)
 8001afa:	601a      	str	r2, [r3, #0]
   registerMap[0].dataSize = sizeof(robot.robot_enable);
 8001afc:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb8 <main+0x278>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	711a      	strb	r2, [r3, #4]

   registerMap[1].ptr = &robot.set_pos;
 8001b02:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb8 <main+0x278>)
 8001b04:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc0 <main+0x280>)
 8001b06:	609a      	str	r2, [r3, #8]
   registerMap[1].dataSize = sizeof(robot.set_pos);
 8001b08:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb8 <main+0x278>)
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	731a      	strb	r2, [r3, #12]

   registerMap[2].ptr = &robot.K1;
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cb8 <main+0x278>)
 8001b10:	4a6c      	ldr	r2, [pc, #432]	@ (8001cc4 <main+0x284>)
 8001b12:	611a      	str	r2, [r3, #16]
   registerMap[2].dataSize = sizeof(robot.K1);
 8001b14:	4b68      	ldr	r3, [pc, #416]	@ (8001cb8 <main+0x278>)
 8001b16:	2204      	movs	r2, #4
 8001b18:	751a      	strb	r2, [r3, #20]

   registerMap[3].ptr = &robot.K2;
 8001b1a:	4b67      	ldr	r3, [pc, #412]	@ (8001cb8 <main+0x278>)
 8001b1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc8 <main+0x288>)
 8001b1e:	619a      	str	r2, [r3, #24]
   registerMap[3].dataSize = sizeof(robot.K2);
 8001b20:	4b65      	ldr	r3, [pc, #404]	@ (8001cb8 <main+0x278>)
 8001b22:	2204      	movs	r2, #4
 8001b24:	771a      	strb	r2, [r3, #28]

   registerMap[4].ptr = &robot.K3;
 8001b26:	4b64      	ldr	r3, [pc, #400]	@ (8001cb8 <main+0x278>)
 8001b28:	4a68      	ldr	r2, [pc, #416]	@ (8001ccc <main+0x28c>)
 8001b2a:	621a      	str	r2, [r3, #32]
   registerMap[4].dataSize = sizeof(robot.K3);
 8001b2c:	4b62      	ldr	r3, [pc, #392]	@ (8001cb8 <main+0x278>)
 8001b2e:	2204      	movs	r2, #4
 8001b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

   registerMap[5].ptr = &robot.K4;
 8001b34:	4b60      	ldr	r3, [pc, #384]	@ (8001cb8 <main+0x278>)
 8001b36:	4a66      	ldr	r2, [pc, #408]	@ (8001cd0 <main+0x290>)
 8001b38:	629a      	str	r2, [r3, #40]	@ 0x28
   registerMap[5].dataSize = sizeof(robot.K4);
 8001b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001cb8 <main+0x278>)
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

   registerMap[6].ptr = &robot.K5;
 8001b42:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb8 <main+0x278>)
 8001b44:	4a63      	ldr	r2, [pc, #396]	@ (8001cd4 <main+0x294>)
 8001b46:	631a      	str	r2, [r3, #48]	@ 0x30
   registerMap[6].dataSize = sizeof(robot.K5);
 8001b48:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb8 <main+0x278>)
 8001b4a:	2204      	movs	r2, #4
 8001b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    * 			SETUP end
    * ##################################################
    */


   HAL_TIM_Base_Start_IT(&htim4);
 8001b50:	4861      	ldr	r0, [pc, #388]	@ (8001cd8 <main+0x298>)
 8001b52:	f006 fc45 	bl	80083e0 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim1);
 8001b56:	4861      	ldr	r0, [pc, #388]	@ (8001cdc <main+0x29c>)
 8001b58:	f006 fc42 	bl	80083e0 <HAL_TIM_Base_Start_IT>

   HAL_Delay(100);
 8001b5c:	2064      	movs	r0, #100	@ 0x64
 8001b5e:	f001 feb1 	bl	80038c4 <HAL_Delay>



   while (1)
  {
	if(robot.robot_enable){
 8001b62:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce0 <main+0x2a0>)
 8001b64:	785b      	ldrb	r3, [r3, #1]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d02e      	beq.n	8001bc8 <main+0x188>
		if(fabs(mpu.x_angle) < 0.05 && !robot.control_enable){
 8001b6a:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <main+0x26c>)
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fc58 	bl	8000428 <__aeabi_f2d>
 8001b78:	a341      	add	r3, pc, #260	@ (adr r3, 8001c80 <main+0x240>)
 8001b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7e:	f7fe ff1d 	bl	80009bc <__aeabi_dcmplt>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <main+0x154>
 8001b88:	4b55      	ldr	r3, [pc, #340]	@ (8001ce0 <main+0x2a0>)
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <main+0x154>
			robot_start();
 8001b90:	f000 ff06 	bl	80029a0 <robot_start>
		}
		if(fabs(mpu.x_angle)> 0.8 && robot.control_enable){
 8001b94:	4b45      	ldr	r3, [pc, #276]	@ (8001cac <main+0x26c>)
 8001b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fc43 	bl	8000428 <__aeabi_f2d>
 8001ba2:	a339      	add	r3, pc, #228	@ (adr r3, 8001c88 <main+0x248>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe ff26 	bl	80009f8 <__aeabi_dcmpgt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00f      	beq.n	8001bd2 <main+0x192>
 8001bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ce0 <main+0x2a0>)
 8001bb4:	789b      	ldrb	r3, [r3, #2]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00b      	beq.n	8001bd2 <main+0x192>
			robot_stop();
 8001bba:	f000 ff33 	bl	8002a24 <robot_stop>
			HAL_Delay(2000);
 8001bbe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001bc2:	f001 fe7f 	bl	80038c4 <HAL_Delay>
 8001bc6:	e004      	b.n	8001bd2 <main+0x192>
		}
  	}
   	else{
   		robot_stop();
 8001bc8:	f000 ff2c 	bl	8002a24 <robot_stop>
   		robot.control_enable = 0;
 8001bcc:	4b44      	ldr	r3, [pc, #272]	@ (8001ce0 <main+0x2a0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	709a      	strb	r2, [r3, #2]
   	}

	if(robot.robot_enable){
 8001bd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ce0 <main+0x2a0>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <main+0x1a8>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001be0:	4840      	ldr	r0, [pc, #256]	@ (8001ce4 <main+0x2a4>)
 8001be2:	f002 ffd1 	bl	8004b88 <HAL_GPIO_WritePin>
 8001be6:	e005      	b.n	8001bf4 <main+0x1b4>
	}
	else{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bee:	483d      	ldr	r0, [pc, #244]	@ (8001ce4 <main+0x2a4>)
 8001bf0:	f002 ffca 	bl	8004b88 <HAL_GPIO_WritePin>
	}

	if(robot.control_enable && robot.data_ready){
 8001bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce0 <main+0x2a0>)
 8001bf6:	789b      	ldrb	r3, [r3, #2]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d03b      	beq.n	8001c74 <main+0x234>
 8001bfc:	4b38      	ldr	r3, [pc, #224]	@ (8001ce0 <main+0x2a0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d037      	beq.n	8001c74 <main+0x234>
		control_step();
 8001c04:	f000 fd88 	bl	8002718 <control_step>

		//send data
		if(communication_interface.uart_tx_ready){
 8001c08:	4b37      	ldr	r3, [pc, #220]	@ (8001ce8 <main+0x2a8>)
 8001c0a:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d02f      	beq.n	8001c74 <main+0x234>
//		uint16_t size = snprintf((char*)communication_interface.transmit_buffer, Tx_BUFFER_SIZE,
//				"%.3f, %.3f, %.3f, %ld\r\n", mpu.x_angle, robot.d_angle, robot.speed_delta, HAL_GetTick());
		uint16_t size = snprintf((char*)communication_interface.transmit_buffer, Tx_BUFFER_SIZE,
				"%.3f,%.3f,%.3f,%0.3f\n", mpu.x_angle, robot.d_angle, robot.pos, robot.d_pos);
 8001c14:	4b25      	ldr	r3, [pc, #148]	@ (8001cac <main+0x26c>)
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
		uint16_t size = snprintf((char*)communication_interface.transmit_buffer, Tx_BUFFER_SIZE,
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc05 	bl	8000428 <__aeabi_f2d>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	460d      	mov	r5, r1
				"%.3f,%.3f,%.3f,%0.3f\n", mpu.x_angle, robot.d_angle, robot.pos, robot.d_pos);
 8001c22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce0 <main+0x2a0>)
 8001c24:	689b      	ldr	r3, [r3, #8]
		uint16_t size = snprintf((char*)communication_interface.transmit_buffer, Tx_BUFFER_SIZE,
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fbfe 	bl	8000428 <__aeabi_f2d>
 8001c2c:	4680      	mov	r8, r0
 8001c2e:	4689      	mov	r9, r1
				"%.3f,%.3f,%.3f,%0.3f\n", mpu.x_angle, robot.d_angle, robot.pos, robot.d_pos);
 8001c30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <main+0x2a0>)
 8001c32:	691b      	ldr	r3, [r3, #16]
		uint16_t size = snprintf((char*)communication_interface.transmit_buffer, Tx_BUFFER_SIZE,
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fbf7 	bl	8000428 <__aeabi_f2d>
 8001c3a:	4682      	mov	sl, r0
 8001c3c:	468b      	mov	fp, r1
				"%.3f,%.3f,%.3f,%0.3f\n", mpu.x_angle, robot.d_angle, robot.pos, robot.d_pos);
 8001c3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <main+0x2a0>)
 8001c40:	68db      	ldr	r3, [r3, #12]
		uint16_t size = snprintf((char*)communication_interface.transmit_buffer, Tx_BUFFER_SIZE,
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fbf0 	bl	8000428 <__aeabi_f2d>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001c50:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001c54:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c58:	e9cd 4500 	strd	r4, r5, [sp]
 8001c5c:	4a23      	ldr	r2, [pc, #140]	@ (8001cec <main+0x2ac>)
 8001c5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c62:	4823      	ldr	r0, [pc, #140]	@ (8001cf0 <main+0x2b0>)
 8001c64:	f009 f8da 	bl	800ae1c <sniprintf>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	80fb      	strh	r3, [r7, #6]
		uart_send_buffer(size);
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fb4e 	bl	8001310 <uart_send_buffer>
		}

	}

	execute_command();
 8001c74:	f7ff fb02 	bl	800127c <execute_command>
	if(robot.robot_enable){
 8001c78:	e773      	b.n	8001b62 <main+0x122>
 8001c7a:	bf00      	nop
 8001c7c:	f3af 8000 	nop.w
 8001c80:	9999999a 	.word	0x9999999a
 8001c84:	3fa99999 	.word	0x3fa99999
 8001c88:	9999999a 	.word	0x9999999a
 8001c8c:	3fe99999 	.word	0x3fe99999
 8001c90:	40010800 	.word	0x40010800
 8001c94:	20000680 	.word	0x20000680
 8001c98:	20000530 	.word	0x20000530
 8001c9c:	40010c00 	.word	0x40010c00
 8001ca0:	200006c8 	.word	0x200006c8
 8001ca4:	2000055c 	.word	0x2000055c
 8001ca8:	20000444 	.word	0x20000444
 8001cac:	20000588 	.word	0x20000588
 8001cb0:	200007a0 	.word	0x200007a0
 8001cb4:	20000758 	.word	0x20000758
 8001cb8:	20000338 	.word	0x20000338
 8001cbc:	200005d1 	.word	0x200005d1
 8001cc0:	200005f4 	.word	0x200005f4
 8001cc4:	20000604 	.word	0x20000604
 8001cc8:	20000608 	.word	0x20000608
 8001ccc:	2000060c 	.word	0x2000060c
 8001cd0:	20000610 	.word	0x20000610
 8001cd4:	20000614 	.word	0x20000614
 8001cd8:	20000710 	.word	0x20000710
 8001cdc:	20000638 	.word	0x20000638
 8001ce0:	200005d0 	.word	0x200005d0
 8001ce4:	40011000 	.word	0x40011000
 8001ce8:	20000220 	.word	0x20000220
 8001cec:	0800d5a8 	.word	0x0800d5a8
 8001cf0:	20000234 	.word	0x20000234

08001cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b094      	sub	sp, #80	@ 0x50
 8001cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cfe:	2228      	movs	r2, #40	@ 0x28
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f009 f903 	bl	800af0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d32:	2301      	movs	r3, #1
 8001d34:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d36:	2302      	movs	r3, #2
 8001d38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d40:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 fe32 	bl	80079b4 <HAL_RCC_OscConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d56:	f000 f828 	bl	8001daa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d6a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2102      	movs	r1, #2
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 f89e 	bl	8007eb8 <HAL_RCC_ClockConfig>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d82:	f000 f812 	bl	8001daa <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d86:	2302      	movs	r3, #2
 8001d88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 fa1e 	bl	80081d4 <HAL_RCCEx_PeriphCLKConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d9e:	f000 f804 	bl	8001daa <Error_Handler>
  }
}
 8001da2:	bf00      	nop
 8001da4:	3750      	adds	r7, #80	@ 0x50
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dae:	b672      	cpsid	i
}
 8001db0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001db2:	bf00      	nop
 8001db4:	e7fd      	b.n	8001db2 <Error_Handler+0x8>

08001db6 <mpu_write_reg>:
//*****************************************************************
//     			SETUP FUNCTIONS
//*****************************************************************

static void mpu_write_reg(mpu6050_typedef *mpu, uint8_t reg, uint8_t val)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b086      	sub	sp, #24
 8001dba:	af04      	add	r7, sp, #16
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	70fb      	strb	r3, [r7, #3]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->i2c_address, reg, 1, &val, 1, HAL_MAX_DELAY);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	1cbb      	adds	r3, r7, #2
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2301      	movs	r3, #1
 8001de4:	f003 f85a 	bl	8004e9c <HAL_I2C_Mem_Write>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <mpu_read_reg>:


static uint8_t mpu_read_reg(mpu6050_typedef *mpu, uint8_t reg)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af04      	add	r7, sp, #16
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, reg, 1, &tmp, 1, HAL_MAX_DELAY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	791b      	ldrb	r3, [r3, #4]
 8001e04:	4619      	mov	r1, r3
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	2301      	movs	r3, #1
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	f107 030f 	add.w	r3, r7, #15
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f003 f938 	bl	8005090 <HAL_I2C_Mem_Read>
	return tmp;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <mpu_reset>:


static void mpu_reset(mpu6050_typedef *mpu, uint8_t value)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001e36:	216b      	movs	r1, #107	@ 0x6b
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff ffd9 	bl	8001df0 <mpu_read_reg>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<7);
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e48:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 7);
 8001e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4e:	01db      	lsls	r3, r3, #7
 8001e50:	b25a      	sxtb	r2, r3
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b25b      	sxtb	r3, r3
 8001e5a:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	216b      	movs	r1, #107	@ 0x6b
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffa7 	bl	8001db6 <mpu_write_reg>
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <mpu_sleep_mode>:


static void mpu_sleep_mode(mpu6050_typedef *mpu, uint8_t value)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, PWR_MGMT_1);
 8001e7c:	216b      	movs	r1, #107	@ 0x6b
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffb6 	bl	8001df0 <mpu_read_reg>
 8001e84:	4603      	mov	r3, r0
 8001e86:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(1<<6);
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e8e:	73fb      	strb	r3, [r7, #15]
	tmp |= ((value & 0x1) << 6);
 8001e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e94:	019b      	lsls	r3, r3, #6
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e9c:	b25a      	sxtb	r2, r3
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	b25b      	sxtb	r3, r3
 8001ea6:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, PWR_MGMT_1, tmp);
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	216b      	movs	r1, #107	@ 0x6b
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff81 	bl	8001db6 <mpu_write_reg>
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <set_gyro_scale>:


void set_gyro_scale(mpu6050_typedef *mpu, gyro_range_typedef range)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, GYRO_CONFIG);
 8001ec8:	211b      	movs	r1, #27
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff90 	bl	8001df0 <mpu_read_reg>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001ed4:	7bfb      	ldrb	r3, [r7, #15]
 8001ed6:	f023 0318 	bic.w	r3, r3, #24
 8001eda:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	f003 0318 	and.w	r3, r3, #24
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, GYRO_CONFIG, tmp);
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	211b      	movs	r1, #27
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff ff5b 	bl	8001db6 <mpu_write_reg>

	switch (range){
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d81a      	bhi.n	8001f3c <set_gyro_scale+0x80>
 8001f06:	a201      	add	r2, pc, #4	@ (adr r2, 8001f0c <set_gyro_scale+0x50>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f1d 	.word	0x08001f1d
 8001f10:	08001f25 	.word	0x08001f25
 8001f14:	08001f2d 	.word	0x08001f2d
 8001f18:	08001f35 	.word	0x08001f35
	case range_250:
		mpu->gyro_scale = 0.007633;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f48 <set_gyro_scale+0x8c>)
 8001f20:	609a      	str	r2, [r3, #8]
		break;
 8001f22:	e00c      	b.n	8001f3e <set_gyro_scale+0x82>
	case range_500:
		mpu->gyro_scale = 0.015267;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <set_gyro_scale+0x90>)
 8001f28:	609a      	str	r2, [r3, #8]
		break;
 8001f2a:	e008      	b.n	8001f3e <set_gyro_scale+0x82>
	case range_1000:
		mpu->gyro_scale = 0.030487;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <set_gyro_scale+0x94>)
 8001f30:	609a      	str	r2, [r3, #8]
		break;
 8001f32:	e004      	b.n	8001f3e <set_gyro_scale+0x82>
	case range_2000:
		mpu->gyro_scale = 0.060975;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a07      	ldr	r2, [pc, #28]	@ (8001f54 <set_gyro_scale+0x98>)
 8001f38:	609a      	str	r2, [r3, #8]
		break;
 8001f3a:	e000      	b.n	8001f3e <set_gyro_scale+0x82>
	default:
		break;
 8001f3c:	bf00      	nop
	}
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	3bfa1e3f 	.word	0x3bfa1e3f
 8001f4c:	3c7a2270 	.word	0x3c7a2270
 8001f50:	3cf9bfdf 	.word	0x3cf9bfdf
 8001f54:	3d79c0ec 	.word	0x3d79c0ec

08001f58 <set_accelerometer_scale>:


void set_accelerometer_scale(mpu6050_typedef *mpu, accelerometer_range_typedef range)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, ACCEL_CONFIG);
 8001f64:	211c      	movs	r1, #28
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff42 	bl	8001df0 <mpu_read_reg>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
	tmp &= ~(3 << 3);
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	f023 0318 	bic.w	r3, r3, #24
 8001f76:	73fb      	strb	r3, [r7, #15]
	tmp |= (range & 0x3) << 3;
 8001f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	f003 0318 	and.w	r3, r3, #24
 8001f84:	b25a      	sxtb	r2, r3
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, ACCEL_CONFIG, tmp);
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	461a      	mov	r2, r3
 8001f94:	211c      	movs	r1, #28
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff0d 	bl	8001db6 <mpu_write_reg>

	switch (range)
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d81a      	bhi.n	8001fd8 <set_accelerometer_scale+0x80>
 8001fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <set_accelerometer_scale+0x50>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fc1 	.word	0x08001fc1
 8001fb0:	08001fc9 	.word	0x08001fc9
 8001fb4:	08001fd1 	.word	0x08001fd1
	{
	case range_2g:
		mpu->acc_scale = 0.000061;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <set_accelerometer_scale+0x8c>)
 8001fbc:	60da      	str	r2, [r3, #12]
		break;
 8001fbe:	e00c      	b.n	8001fda <set_accelerometer_scale+0x82>
	case range_4g:
		mpu->acc_scale = 0.000122;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <set_accelerometer_scale+0x90>)
 8001fc4:	60da      	str	r2, [r3, #12]
		break;
 8001fc6:	e008      	b.n	8001fda <set_accelerometer_scale+0x82>
	case range_8g:
		mpu->acc_scale = 0.000244;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <set_accelerometer_scale+0x94>)
 8001fcc:	60da      	str	r2, [r3, #12]
		break;
 8001fce:	e004      	b.n	8001fda <set_accelerometer_scale+0x82>
	case range_16g:
		mpu->acc_scale = 0.0004882;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a07      	ldr	r2, [pc, #28]	@ (8001ff0 <set_accelerometer_scale+0x98>)
 8001fd4:	60da      	str	r2, [r3, #12]
		break;
 8001fd6:	e000      	b.n	8001fda <set_accelerometer_scale+0x82>
	default:
		break;
 8001fd8:	bf00      	nop
	}
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	387fda40 	.word	0x387fda40
 8001fe8:	38ffda40 	.word	0x38ffda40
 8001fec:	397fda40 	.word	0x397fda40
 8001ff0:	39fff518 	.word	0x39fff518

08001ff4 <mpu_low_pass_filter>:


void mpu_low_pass_filter(mpu6050_typedef *mpu, low_pass_filter_typedef filter)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = mpu_read_reg(mpu, CONFIG);
 8002000:	211a      	movs	r1, #26
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fef4 	bl	8001df0 <mpu_read_reg>
 8002008:	4603      	mov	r3, r0
 800200a:	73fb      	strb	r3, [r7, #15]
	tmp &= ~ 7;
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	f023 0307 	bic.w	r3, r3, #7
 8002012:	73fb      	strb	r3, [r7, #15]
	tmp |= filter & 0x7;
 8002014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	b25a      	sxtb	r2, r3
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	4313      	orrs	r3, r2
 8002024:	b25b      	sxtb	r3, r3
 8002026:	73fb      	strb	r3, [r7, #15]
	mpu_write_reg(mpu, CONFIG, tmp);
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	461a      	mov	r2, r3
 800202c:	211a      	movs	r1, #26
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fec1 	bl	8001db6 <mpu_write_reg>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <mpu_who_am_i>:


HAL_StatusTypeDef mpu_who_am_i(mpu6050_typedef *mpu)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	uint8_t value = mpu_read_reg(mpu, WHO_AM_I);
 8002044:	2175      	movs	r1, #117	@ 0x75
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fed2 	bl	8001df0 <mpu_read_reg>
 800204c:	4603      	mov	r3, r0
 800204e:	73fb      	strb	r3, [r7, #15]
	if (value == 0x68){
 8002050:	7bfb      	ldrb	r3, [r7, #15]
 8002052:	2b68      	cmp	r3, #104	@ 0x68
 8002054:	d101      	bne.n	800205a <mpu_who_am_i+0x1e>
		return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <mpu_who_am_i+0x20>
	}
	else{
		return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
	}
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <mpu_init>:

void mpu_init(mpu6050_typedef* mpu, I2C_HandleTypeDef *hi2c, uint8_t i2c_address)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	4613      	mov	r3, r2
 8002070:	71fb      	strb	r3, [r7, #7]
	mpu->hi2c = hi2c;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	601a      	str	r2, [r3, #0]
	mpu->i2c_address = i2c_address;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	79fa      	ldrb	r2, [r7, #7]
 800207c:	711a      	strb	r2, [r3, #4]

	mpu_reset(mpu, 1);
 800207e:	2101      	movs	r1, #1
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f7ff fed2 	bl	8001e2a <mpu_reset>
	HAL_Delay(500);
 8002086:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800208a:	f001 fc1b 	bl	80038c4 <HAL_Delay>
	mpu_sleep_mode(mpu, 0);
 800208e:	2100      	movs	r1, #0
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff feed 	bl	8001e70 <mpu_sleep_mode>

	set_gyro_scale(mpu, range_250);
 8002096:	2100      	movs	r1, #0
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7ff ff0f 	bl	8001ebc <set_gyro_scale>
	set_accelerometer_scale(mpu, range_2g);
 800209e:	2100      	movs	r1, #0
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f7ff ff59 	bl	8001f58 <set_accelerometer_scale>

	mpu->gx_bias = 0;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
	mpu->gy_bias = 0;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	615a      	str	r2, [r3, #20]
	mpu->gz_bias = 0;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
	mpu->lst_update_x_angle_tick = HAL_GetTick();
 80020be:	f001 fbf7 	bl	80038b0 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	639a      	str	r2, [r3, #56]	@ 0x38

   if(mpu_who_am_i(mpu) != HAL_OK){
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f7ff ffb7 	bl	800203c <mpu_who_am_i>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <mpu_init+0x8e>
	  while(1){
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80020d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020d8:	4808      	ldr	r0, [pc, #32]	@ (80020fc <mpu_init+0x98>)
 80020da:	f002 fd6d 	bl	8004bb8 <HAL_GPIO_TogglePin>
		  mpu_init(mpu, &hi2c1, 0xD0);
 80020de:	22d0      	movs	r2, #208	@ 0xd0
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <mpu_init+0x9c>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff ffbe 	bl	8002064 <mpu_init>
		  HAL_Delay(100);
 80020e8:	2064      	movs	r0, #100	@ 0x64
 80020ea:	f001 fbeb 	bl	80038c4 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80020ee:	bf00      	nop
 80020f0:	e7f0      	b.n	80020d4 <mpu_init+0x70>
	  }
   }
}
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40011000 	.word	0x40011000
 8002100:	20000444 	.word	0x20000444

08002104 <mpu_get_data>:




void mpu_get_data(mpu6050_typedef *mpu)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	@ 0x28
 8002108:	af04      	add	r7, sp, #16
 800210a:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, data, 14, HAL_MAX_DELAY); // get all the data
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800211a:	9302      	str	r3, [sp, #8]
 800211c:	230e      	movs	r3, #14
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	2301      	movs	r3, #1
 8002128:	223b      	movs	r2, #59	@ 0x3b
 800212a:	f002 ffb1 	bl	8005090 <HAL_I2C_Mem_Read>

	mpu->ax = (int16_t)((int16_t)data[0] << 8 | data[1]) * mpu->acc_scale;
 800212e:	7a3b      	ldrb	r3, [r7, #8]
 8002130:	b21b      	sxth	r3, r3
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	7a7b      	ldrb	r3, [r7, #9]
 8002138:	b21b      	sxth	r3, r3
 800213a:	4313      	orrs	r3, r2
 800213c:	b21b      	sxth	r3, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fdcc 	bl	8000cdc <__aeabi_i2f>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4619      	mov	r1, r3
 800214c:	4610      	mov	r0, r2
 800214e:	f7fe fe19 	bl	8000d84 <__aeabi_fmul>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	61da      	str	r2, [r3, #28]
	mpu->ay = (int16_t)((int16_t)data[2] << 8 | data[3]) * mpu->acc_scale;
 800215a:	7abb      	ldrb	r3, [r7, #10]
 800215c:	b21b      	sxth	r3, r3
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	b21a      	sxth	r2, r3
 8002162:	7afb      	ldrb	r3, [r7, #11]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21b      	sxth	r3, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fdb6 	bl	8000cdc <__aeabi_i2f>
 8002170:	4602      	mov	r2, r0
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4619      	mov	r1, r3
 8002178:	4610      	mov	r0, r2
 800217a:	f7fe fe03 	bl	8000d84 <__aeabi_fmul>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	621a      	str	r2, [r3, #32]
	mpu->az = (int16_t)((int16_t)data[4] << 8 | data[5]) * mpu->acc_scale;
 8002186:	7b3b      	ldrb	r3, [r7, #12]
 8002188:	b21b      	sxth	r3, r3
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b21a      	sxth	r2, r3
 800218e:	7b7b      	ldrb	r3, [r7, #13]
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fda0 	bl	8000cdc <__aeabi_i2f>
 800219c:	4602      	mov	r2, r0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4610      	mov	r0, r2
 80021a6:	f7fe fded 	bl	8000d84 <__aeabi_fmul>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24

	mpu->gx = ((int16_t)((int16_t)data[8] << 8 | data[9]) * mpu->gyro_scale) - mpu->gx_bias;
 80021b2:	7c3b      	ldrb	r3, [r7, #16]
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	7c7b      	ldrb	r3, [r7, #17]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fd8a 	bl	8000cdc <__aeabi_i2f>
 80021c8:	4602      	mov	r2, r0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f7fe fdd7 	bl	8000d84 <__aeabi_fmul>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe fcc5 	bl	8000b70 <__aeabi_fsub>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;
 80021ee:	7cbb      	ldrb	r3, [r7, #18]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21b      	sxth	r3, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fd6c 	bl	8000cdc <__aeabi_i2f>
 8002204:	4602      	mov	r2, r0
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7fe fdb9 	bl	8000d84 <__aeabi_fmul>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f7fe fca7 	bl	8000b70 <__aeabi_fsub>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c
	mpu->gz = ((int16_t)((int16_t)data[12] << 8 | data[13]) * mpu->gyro_scale) - mpu->gz_bias;
 800222a:	7d3b      	ldrb	r3, [r7, #20]
 800222c:	b21b      	sxth	r3, r3
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	b21a      	sxth	r2, r3
 8002232:	7d7b      	ldrb	r3, [r7, #21]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21b      	sxth	r3, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fd4e 	bl	8000cdc <__aeabi_i2f>
 8002240:	4602      	mov	r2, r0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	4619      	mov	r1, r3
 8002248:	4610      	mov	r0, r2
 800224a:	f7fe fd9b 	bl	8000d84 <__aeabi_fmul>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4619      	mov	r1, r3
 8002258:	4610      	mov	r0, r2
 800225a:	f7fe fc89 	bl	8000b70 <__aeabi_fsub>
 800225e:	4603      	mov	r3, r0
 8002260:	461a      	mov	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002266:	bf00      	nop
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <mpu_get_data_x_angle_DMA>:
	mpu->gy = ((int16_t)((int16_t)data[10] << 8 | data[11]) * mpu->gyro_scale) - mpu->gy_bias;

}


void mpu_get_data_x_angle_DMA(mpu6050_typedef* mpu){
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af02      	add	r7, sp, #8
 8002274:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(mpu->hi2c, mpu->i2c_address, ACCEL_XOUT_H, 1, mpu->DMA_buffer, 12);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	791b      	ldrb	r3, [r3, #4]
 800227e:	4619      	mov	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	333c      	adds	r3, #60	@ 0x3c
 8002284:	220c      	movs	r2, #12
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2301      	movs	r3, #1
 800228c:	223b      	movs	r2, #59	@ 0x3b
 800228e:	f003 f973 	bl	8005578 <HAL_I2C_Mem_Read_DMA>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <mpu_gyro_calibration>:



void mpu_gyro_calibration(mpu6050_typedef *mpu)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022aa:	485e      	ldr	r0, [pc, #376]	@ (8002424 <mpu_gyro_calibration+0x188>)
 80022ac:	f002 fc6c 	bl	8004b88 <HAL_GPIO_WritePin>
	uint8_t counter = 100;
 80022b0:	2364      	movs	r3, #100	@ 0x64
 80022b2:	73fb      	strb	r3, [r7, #15]
	float gx_sum = 0;
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
	float gy_sum = 0;
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
	float gz_sum = 0;
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < counter; i++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	e060      	b.n	800238e <mpu_gyro_calibration+0xf2>
	{
		mpu_get_data(mpu);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff19 	bl	8002104 <mpu_get_data>
		if(fabs(mpu->gx) > 8 || fabs(mpu->gy) > 8 ||fabs(mpu->gz) > 8){
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022da:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe ff0c 	bl	80010fc <__aeabi_fcmpgt>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d117      	bne.n	800231a <mpu_gyro_calibration+0x7e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022f2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe ff00 	bl	80010fc <__aeabi_fcmpgt>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10b      	bne.n	800231a <mpu_gyro_calibration+0x7e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800230a:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fef4 	bl	80010fc <__aeabi_fcmpgt>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01b      	beq.n	8002352 <mpu_gyro_calibration+0xb6>
			i = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
			gx_sum = 0;
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	61fb      	str	r3, [r7, #28]
			gy_sum = 0;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
			gz_sum = 0;
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002336:	483b      	ldr	r0, [pc, #236]	@ (8002424 <mpu_gyro_calibration+0x188>)
 8002338:	f002 fc26 	bl	8004b88 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800233c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002340:	f001 fac0 	bl	80038c4 <HAL_Delay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800234a:	4836      	ldr	r0, [pc, #216]	@ (8002424 <mpu_gyro_calibration+0x188>)
 800234c:	f002 fc1c 	bl	8004b88 <HAL_GPIO_WritePin>
			continue;
 8002350:	e01a      	b.n	8002388 <mpu_gyro_calibration+0xec>
		}

		gx_sum += mpu->gx;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	4619      	mov	r1, r3
 8002358:	69f8      	ldr	r0, [r7, #28]
 800235a:	f7fe fc0b 	bl	8000b74 <__addsf3>
 800235e:	4603      	mov	r3, r0
 8002360:	61fb      	str	r3, [r7, #28]
		gy_sum += mpu->gy;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	4619      	mov	r1, r3
 8002368:	69b8      	ldr	r0, [r7, #24]
 800236a:	f7fe fc03 	bl	8000b74 <__addsf3>
 800236e:	4603      	mov	r3, r0
 8002370:	61bb      	str	r3, [r7, #24]
		gz_sum += mpu->gz;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4619      	mov	r1, r3
 8002378:	6978      	ldr	r0, [r7, #20]
 800237a:	f7fe fbfb 	bl	8000b74 <__addsf3>
 800237e:	4603      	mov	r3, r0
 8002380:	617b      	str	r3, [r7, #20]

		HAL_Delay(4);
 8002382:	2004      	movs	r0, #4
 8002384:	f001 fa9e 	bl	80038c4 <HAL_Delay>
	for(int i = 0; i < counter; i++)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	3301      	adds	r3, #1
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	429a      	cmp	r2, r3
 8002394:	db9a      	blt.n	80022cc <mpu_gyro_calibration+0x30>
	}
	// += instead of = is used in case of second calibration (bias is added in mpu_get_data)
	mpu->gx_bias += gx_sum / counter;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691c      	ldr	r4, [r3, #16]
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe fc9d 	bl	8000cdc <__aeabi_i2f>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4619      	mov	r1, r3
 80023a6:	69f8      	ldr	r0, [r7, #28]
 80023a8:	f7fe fda0 	bl	8000eec <__aeabi_fdiv>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7fe fbdf 	bl	8000b74 <__addsf3>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]
	mpu->gy_bias += gy_sum / counter;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695c      	ldr	r4, [r3, #20]
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fc89 	bl	8000cdc <__aeabi_i2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4619      	mov	r1, r3
 80023ce:	69b8      	ldr	r0, [r7, #24]
 80023d0:	f7fe fd8c 	bl	8000eec <__aeabi_fdiv>
 80023d4:	4603      	mov	r3, r0
 80023d6:	4619      	mov	r1, r3
 80023d8:	4620      	mov	r0, r4
 80023da:	f7fe fbcb 	bl	8000b74 <__addsf3>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	615a      	str	r2, [r3, #20]
	mpu->gz_bias += gz_sum / counter;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699c      	ldr	r4, [r3, #24]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fc75 	bl	8000cdc <__aeabi_i2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	4619      	mov	r1, r3
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7fe fd78 	bl	8000eec <__aeabi_fdiv>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4619      	mov	r1, r3
 8002400:	4620      	mov	r0, r4
 8002402:	f7fe fbb7 	bl	8000b74 <__addsf3>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	619a      	str	r2, [r3, #24]
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002414:	4803      	ldr	r0, [pc, #12]	@ (8002424 <mpu_gyro_calibration+0x188>)
 8002416:	f002 fbb7 	bl	8004b88 <HAL_GPIO_WritePin>
}
 800241a:	bf00      	nop
 800241c:	3724      	adds	r7, #36	@ 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	40011000 	.word	0x40011000

08002428 <mpu_get_acc_x_angle>:


float mpu_get_acc_x_angle(mpu6050_typedef *mpu)
{
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	return atan2(mpu->ax, mpu->az) + M_PI/2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fd fff7 	bl	8000428 <__aeabi_f2d>
 800243a:	4604      	mov	r4, r0
 800243c:	460d      	mov	r5, r1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	4618      	mov	r0, r3
 8002444:	f7fd fff0 	bl	8000428 <__aeabi_f2d>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4620      	mov	r0, r4
 800244e:	4629      	mov	r1, r5
 8002450:	f00a fe34 	bl	800d0bc <atan2>
 8002454:	a308      	add	r3, pc, #32	@ (adr r3, 8002478 <mpu_get_acc_x_angle+0x50>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	f7fd fe87 	bl	800016c <__adddf3>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f7fe fb2f 	bl	8000ac8 <__aeabi_d2f>
 800246a:	4603      	mov	r3, r0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bdb0      	pop	{r4, r5, r7, pc}
 8002474:	f3af 8000 	nop.w
 8002478:	54442d18 	.word	0x54442d18
 800247c:	3ff921fb 	.word	0x3ff921fb

08002480 <mpu_calc_x_angle>:


void mpu_calc_x_angle(mpu6050_typedef *mpu)
{
 8002480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002484:	b088      	sub	sp, #32
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
	float time_delta = (HAL_GetTick() - mpu->lst_update_x_angle_tick) / 1000.0;
 800248a:	f001 fa11 	bl	80038b0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd ffa4 	bl	80003e4 <__aeabi_ui2d>
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <mpu_calc_x_angle+0x128>)
 80024a2:	f7fe f943 	bl	800072c <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	f7fe fb0b 	bl	8000ac8 <__aeabi_d2f>
 80024b2:	4603      	mov	r3, r0
 80024b4:	61fb      	str	r3, [r7, #28]
	mpu->lst_update_x_angle_tick = HAL_GetTick();
 80024b6:	f001 f9fb 	bl	80038b0 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	639a      	str	r2, [r3, #56]	@ 0x38

	float acc_angle = mpu_get_acc_x_angle(mpu);
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f7ff ffb1 	bl	8002428 <mpu_get_acc_x_angle>
 80024c6:	61b8      	str	r0, [r7, #24]

	if(time_delta > 0.02){
 80024c8:	69f8      	ldr	r0, [r7, #28]
 80024ca:	f7fd ffad 	bl	8000428 <__aeabi_f2d>
 80024ce:	a332      	add	r3, pc, #200	@ (adr r3, 8002598 <mpu_calc_x_angle+0x118>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	f7fe fa90 	bl	80009f8 <__aeabi_dcmpgt>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <mpu_calc_x_angle+0x66>
		mpu->x_angle = acc_angle;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	635a      	str	r2, [r3, #52]	@ 0x34
	else{
		//complementary filter
		float alpha = 0.003;
		mpu->x_angle = alpha * acc_angle + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * time_delta));
	}
}
 80024e4:	e051      	b.n	800258a <mpu_calc_x_angle+0x10a>
		float alpha = 0.003;
 80024e6:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <mpu_calc_x_angle+0x12c>)
 80024e8:	617b      	str	r3, [r7, #20]
		mpu->x_angle = alpha * acc_angle + (1 - alpha) * (mpu->x_angle + (-mpu->gy * DEG2RAD * time_delta));
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	6978      	ldr	r0, [r7, #20]
 80024ee:	f7fe fc49 	bl	8000d84 <__aeabi_fmul>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd ff97 	bl	8000428 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	6979      	ldr	r1, [r7, #20]
 8002500:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8002504:	f7fe fb34 	bl	8000b70 <__aeabi_fsub>
 8002508:	4603      	mov	r3, r0
 800250a:	4618      	mov	r0, r3
 800250c:	f7fd ff8c 	bl	8000428 <__aeabi_f2d>
 8002510:	4680      	mov	r8, r0
 8002512:	4689      	mov	r9, r1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd ff85 	bl	8000428 <__aeabi_f2d>
 800251e:	4682      	mov	sl, r0
 8002520:	468b      	mov	fp, r1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800252a:	4618      	mov	r0, r3
 800252c:	f7fd ff7c 	bl	8000428 <__aeabi_f2d>
 8002530:	a31b      	add	r3, pc, #108	@ (adr r3, 80025a0 <mpu_calc_x_angle+0x120>)
 8002532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002536:	f7fd ffcf 	bl	80004d8 <__aeabi_dmul>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	e9c7 2300 	strd	r2, r3, [r7]
 8002542:	69f8      	ldr	r0, [r7, #28]
 8002544:	f7fd ff70 	bl	8000428 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002550:	f7fd ffc2 	bl	80004d8 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4650      	mov	r0, sl
 800255a:	4659      	mov	r1, fp
 800255c:	f7fd fe06 	bl	800016c <__adddf3>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4640      	mov	r0, r8
 8002566:	4649      	mov	r1, r9
 8002568:	f7fd ffb6 	bl	80004d8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4620      	mov	r0, r4
 8002572:	4629      	mov	r1, r5
 8002574:	f7fd fdfa 	bl	800016c <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe faa2 	bl	8000ac8 <__aeabi_d2f>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800258a:	bf00      	nop
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002594:	f3af 8000 	nop.w
 8002598:	47ae147b 	.word	0x47ae147b
 800259c:	3f947ae1 	.word	0x3f947ae1
 80025a0:	22d4405f 	.word	0x22d4405f
 80025a4:	3f91df47 	.word	0x3f91df47
 80025a8:	408f4000 	.word	0x408f4000
 80025ac:	3b449ba6 	.word	0x3b449ba6

080025b0 <DMA_transfer_complete_callback>:


void DMA_transfer_complete_callback(mpu6050_typedef* mpu){
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	mpu->ax = (int16_t)((int16_t)mpu->DMA_buffer[0] << 8 | mpu->DMA_buffer[1]) * mpu->acc_scale;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025be:	b21b      	sxth	r3, r3
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	b21a      	sxth	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	4313      	orrs	r3, r2
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fb83 	bl	8000cdc <__aeabi_i2f>
 80025d6:	4602      	mov	r2, r0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7fe fbd0 	bl	8000d84 <__aeabi_fmul>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	61da      	str	r2, [r3, #28]
	mpu->az = (int16_t)((int16_t)mpu->DMA_buffer[4] << 8 | mpu->DMA_buffer[5]) * mpu->acc_scale;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025f2:	b21b      	sxth	r3, r3
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	b21a      	sxth	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fe:	b21b      	sxth	r3, r3
 8002600:	4313      	orrs	r3, r2
 8002602:	b21b      	sxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fb69 	bl	8000cdc <__aeabi_i2f>
 800260a:	4602      	mov	r2, r0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4619      	mov	r1, r3
 8002612:	4610      	mov	r0, r2
 8002614:	f7fe fbb6 	bl	8000d84 <__aeabi_fmul>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	625a      	str	r2, [r3, #36]	@ 0x24
	mpu->gy = ((int16_t)((int16_t)mpu->DMA_buffer[10] << 8 | mpu->DMA_buffer[11]) * mpu->gyro_scale) - mpu->gy_bias;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8002626:	b21b      	sxth	r3, r3
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	b21a      	sxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8002632:	b21b      	sxth	r3, r3
 8002634:	4313      	orrs	r3, r2
 8002636:	b21b      	sxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fb4f 	bl	8000cdc <__aeabi_i2f>
 800263e:	4602      	mov	r2, r0
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4619      	mov	r1, r3
 8002646:	4610      	mov	r0, r2
 8002648:	f7fe fb9c 	bl	8000d84 <__aeabi_fmul>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	4619      	mov	r1, r3
 8002656:	4610      	mov	r0, r2
 8002658:	f7fe fa8a 	bl	8000b70 <__aeabi_fsub>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	@ 0x2c
	mpu_calc_x_angle(mpu);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff0b 	bl	8002480 <mpu_calc_x_angle>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <robot_init>:

robot_t robot;



void robot_init(){
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
	robot.data_ready = 0;
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <robot_init+0x84>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
	robot.robot_enable = 1;
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <robot_init+0x84>)
 8002682:	2201      	movs	r2, #1
 8002684:	705a      	strb	r2, [r3, #1]
	robot.control_enable = 0;
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <robot_init+0x84>)
 8002688:	2200      	movs	r2, #0
 800268a:	709a      	strb	r2, [r3, #2]

	robot.K1 = 2.013;
 800268c:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <robot_init+0x84>)
 800268e:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <robot_init+0x88>)
 8002690:	635a      	str	r2, [r3, #52]	@ 0x34
	robot.K2 = 0.2526;
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <robot_init+0x84>)
 8002694:	4a1a      	ldr	r2, [pc, #104]	@ (8002700 <robot_init+0x8c>)
 8002696:	639a      	str	r2, [r3, #56]	@ 0x38
	robot.K3 = -1.0544;
 8002698:	4b17      	ldr	r3, [pc, #92]	@ (80026f8 <robot_init+0x84>)
 800269a:	4a1a      	ldr	r2, [pc, #104]	@ (8002704 <robot_init+0x90>)
 800269c:	63da      	str	r2, [r3, #60]	@ 0x3c
	robot.K4 = -0.7421;
 800269e:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <robot_init+0x84>)
 80026a0:	4a19      	ldr	r2, [pc, #100]	@ (8002708 <robot_init+0x94>)
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
	robot.K5 = -0.1536;
 80026a4:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <robot_init+0x84>)
 80026a6:	4a19      	ldr	r2, [pc, #100]	@ (800270c <robot_init+0x98>)
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44

	robot.set_angle = -0.06;
 80026aa:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <robot_init+0x84>)
 80026ac:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <robot_init+0x9c>)
 80026ae:	621a      	str	r2, [r3, #32]
	robot.set_pos = 0;
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <robot_init+0x84>)
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	625a      	str	r2, [r3, #36]	@ 0x24
	robot.set_speed = 0;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <robot_init+0x84>)
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28

	robot.d_angle_filter = filter_init(0.8);
 80026c0:	4c0d      	ldr	r4, [pc, #52]	@ (80026f8 <robot_init+0x84>)
 80026c2:	463b      	mov	r3, r7
 80026c4:	4913      	ldr	r1, [pc, #76]	@ (8002714 <robot_init+0xa0>)
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f8cc 	bl	8001864 <filter_init>
 80026cc:	f104 034c 	add.w	r3, r4, #76	@ 0x4c
 80026d0:	463a      	mov	r2, r7
 80026d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80026d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	robot.d_pos_filter = filter_init(0.8);
 80026d8:	4c07      	ldr	r4, [pc, #28]	@ (80026f8 <robot_init+0x84>)
 80026da:	463b      	mov	r3, r7
 80026dc:	490d      	ldr	r1, [pc, #52]	@ (8002714 <robot_init+0xa0>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f8c0 	bl	8001864 <filter_init>
 80026e4:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 80026e8:	463a      	mov	r2, r7
 80026ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	200005d0 	.word	0x200005d0
 80026fc:	4000d4fe 	.word	0x4000d4fe
 8002700:	3e8154ca 	.word	0x3e8154ca
 8002704:	bf86f694 	.word	0xbf86f694
 8002708:	bf3dfa44 	.word	0xbf3dfa44
 800270c:	be1d4952 	.word	0xbe1d4952
 8002710:	bd75c28f 	.word	0xbd75c28f
 8002714:	3f4ccccd 	.word	0x3f4ccccd

08002718 <control_step>:


void control_step(){
 8002718:	b5b0      	push	{r4, r5, r7, lr}
 800271a:	af00      	add	r7, sp, #0
	robot.d_angle = (mpu.x_angle - robot.prev_angle) / TIME_DELTA;
 800271c:	4b94      	ldr	r3, [pc, #592]	@ (8002970 <control_step+0x258>)
 800271e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002720:	4a94      	ldr	r2, [pc, #592]	@ (8002974 <control_step+0x25c>)
 8002722:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fa22 	bl	8000b70 <__aeabi_fsub>
 800272c:	4603      	mov	r3, r0
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd fe7a 	bl	8000428 <__aeabi_f2d>
 8002734:	a388      	add	r3, pc, #544	@ (adr r3, 8002958 <control_step+0x240>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fd fff7 	bl	800072c <__aeabi_ddiv>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4610      	mov	r0, r2
 8002744:	4619      	mov	r1, r3
 8002746:	f7fe f9bf 	bl	8000ac8 <__aeabi_d2f>
 800274a:	4603      	mov	r3, r0
 800274c:	4a89      	ldr	r2, [pc, #548]	@ (8002974 <control_step+0x25c>)
 800274e:	6093      	str	r3, [r2, #8]
	robot.d_angle = filter(&robot.d_angle_filter, robot.d_angle);
 8002750:	4b88      	ldr	r3, [pc, #544]	@ (8002974 <control_step+0x25c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4619      	mov	r1, r3
 8002756:	4888      	ldr	r0, [pc, #544]	@ (8002978 <control_step+0x260>)
 8002758:	f7ff f89d 	bl	8001896 <filter>
 800275c:	4603      	mov	r3, r0
 800275e:	4a85      	ldr	r2, [pc, #532]	@ (8002974 <control_step+0x25c>)
 8002760:	6093      	str	r3, [r2, #8]
	robot.pos = stepper1.step_counter * STEP2METERS;
 8002762:	4b86      	ldr	r3, [pc, #536]	@ (800297c <control_step+0x264>)
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	4618      	mov	r0, r3
 8002768:	f7fd fe4c 	bl	8000404 <__aeabi_i2d>
 800276c:	a37c      	add	r3, pc, #496	@ (adr r3, 8002960 <control_step+0x248>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	f7fd feb1 	bl	80004d8 <__aeabi_dmul>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4610      	mov	r0, r2
 800277c:	4619      	mov	r1, r3
 800277e:	f7fe f9a3 	bl	8000ac8 <__aeabi_d2f>
 8002782:	4603      	mov	r3, r0
 8002784:	4a7b      	ldr	r2, [pc, #492]	@ (8002974 <control_step+0x25c>)
 8002786:	6113      	str	r3, [r2, #16]
	robot.d_pos = filter(&robot.d_pos_filter, (robot.pos - robot.prev_pos) / TIME_DELTA);
 8002788:	4b7a      	ldr	r3, [pc, #488]	@ (8002974 <control_step+0x25c>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	4a79      	ldr	r2, [pc, #484]	@ (8002974 <control_step+0x25c>)
 800278e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe f9ec 	bl	8000b70 <__aeabi_fsub>
 8002798:	4603      	mov	r3, r0
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fe44 	bl	8000428 <__aeabi_f2d>
 80027a0:	a36d      	add	r3, pc, #436	@ (adr r3, 8002958 <control_step+0x240>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ffc1 	bl	800072c <__aeabi_ddiv>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fe f989 	bl	8000ac8 <__aeabi_d2f>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4619      	mov	r1, r3
 80027ba:	4871      	ldr	r0, [pc, #452]	@ (8002980 <control_step+0x268>)
 80027bc:	f7ff f86b 	bl	8001896 <filter>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002974 <control_step+0x25c>)
 80027c4:	60d3      	str	r3, [r2, #12]
	robot.pos_error = robot.set_pos - robot.pos;
 80027c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002974 <control_step+0x25c>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002974 <control_step+0x25c>)
 80027cc:	6912      	ldr	r2, [r2, #16]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe f9cd 	bl	8000b70 <__aeabi_fsub>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	4b66      	ldr	r3, [pc, #408]	@ (8002974 <control_step+0x25c>)
 80027dc:	61da      	str	r2, [r3, #28]

	robot.pos_int -= robot.pos_error * TIME_DELTA;
 80027de:	4b65      	ldr	r3, [pc, #404]	@ (8002974 <control_step+0x25c>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fe20 	bl	8000428 <__aeabi_f2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	4b61      	ldr	r3, [pc, #388]	@ (8002974 <control_step+0x25c>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe19 	bl	8000428 <__aeabi_f2d>
 80027f6:	a358      	add	r3, pc, #352	@ (adr r3, 8002958 <control_step+0x240>)
 80027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fc:	f7fd fe6c 	bl	80004d8 <__aeabi_dmul>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4620      	mov	r0, r4
 8002806:	4629      	mov	r1, r5
 8002808:	f7fd fcae 	bl	8000168 <__aeabi_dsub>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f7fe f958 	bl	8000ac8 <__aeabi_d2f>
 8002818:	4603      	mov	r3, r0
 800281a:	4a56      	ldr	r2, [pc, #344]	@ (8002974 <control_step+0x25c>)
 800281c:	6153      	str	r3, [r2, #20]


	saturation(-0.3, 0.3, &robot.pos_error);
 800281e:	4a59      	ldr	r2, [pc, #356]	@ (8002984 <control_step+0x26c>)
 8002820:	4959      	ldr	r1, [pc, #356]	@ (8002988 <control_step+0x270>)
 8002822:	485a      	ldr	r0, [pc, #360]	@ (800298c <control_step+0x274>)
 8002824:	f7fe ff00 	bl	8001628 <saturation>

	robot.speed_delta = (robot.set_angle - mpu.x_angle) * robot.K1
 8002828:	4b52      	ldr	r3, [pc, #328]	@ (8002974 <control_step+0x25c>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4a50      	ldr	r2, [pc, #320]	@ (8002970 <control_step+0x258>)
 800282e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe f99c 	bl	8000b70 <__aeabi_fsub>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <control_step+0x25c>)
 800283e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f7fe fa9e 	bl	8000d84 <__aeabi_fmul>
 8002848:	4603      	mov	r3, r0
 800284a:	461c      	mov	r4, r3
			- robot.d_angle * robot.K2
 800284c:	4b49      	ldr	r3, [pc, #292]	@ (8002974 <control_step+0x25c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a48      	ldr	r2, [pc, #288]	@ (8002974 <control_step+0x25c>)
 8002852:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f7fe fa94 	bl	8000d84 <__aeabi_fmul>
 800285c:	4603      	mov	r3, r0
 800285e:	4619      	mov	r1, r3
 8002860:	4620      	mov	r0, r4
 8002862:	f7fe f985 	bl	8000b70 <__aeabi_fsub>
 8002866:	4603      	mov	r3, r0
 8002868:	461c      	mov	r4, r3
			+ robot.pos_error * robot.K3
 800286a:	4b42      	ldr	r3, [pc, #264]	@ (8002974 <control_step+0x25c>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	4a41      	ldr	r2, [pc, #260]	@ (8002974 <control_step+0x25c>)
 8002870:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002872:	4611      	mov	r1, r2
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fa85 	bl	8000d84 <__aeabi_fmul>
 800287a:	4603      	mov	r3, r0
 800287c:	4619      	mov	r1, r3
 800287e:	4620      	mov	r0, r4
 8002880:	f7fe f978 	bl	8000b74 <__addsf3>
 8002884:	4603      	mov	r3, r0
 8002886:	461c      	mov	r4, r3
			+ (robot.set_speed - robot.d_pos) * robot.K4
 8002888:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <control_step+0x25c>)
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	4a39      	ldr	r2, [pc, #228]	@ (8002974 <control_step+0x25c>)
 800288e:	68d2      	ldr	r2, [r2, #12]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe f96c 	bl	8000b70 <__aeabi_fsub>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	4b35      	ldr	r3, [pc, #212]	@ (8002974 <control_step+0x25c>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f7fe fa6e 	bl	8000d84 <__aeabi_fmul>
 80028a8:	4603      	mov	r3, r0
 80028aa:	4619      	mov	r1, r3
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7fe f961 	bl	8000b74 <__addsf3>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461c      	mov	r4, r3
			- robot.pos_int * robot.K5;
 80028b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002974 <control_step+0x25c>)
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002974 <control_step+0x25c>)
 80028bc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fa5f 	bl	8000d84 <__aeabi_fmul>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4619      	mov	r1, r3
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7fe f950 	bl	8000b70 <__aeabi_fsub>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461a      	mov	r2, r3
	robot.speed_delta = (robot.set_angle - mpu.x_angle) * robot.K1
 80028d4:	4b27      	ldr	r3, [pc, #156]	@ (8002974 <control_step+0x25c>)
 80028d6:	619a      	str	r2, [r3, #24]

	saturation(-0.35, 0.35, &robot.speed_delta);
 80028d8:	4a2d      	ldr	r2, [pc, #180]	@ (8002990 <control_step+0x278>)
 80028da:	492e      	ldr	r1, [pc, #184]	@ (8002994 <control_step+0x27c>)
 80028dc:	482e      	ldr	r0, [pc, #184]	@ (8002998 <control_step+0x280>)
 80028de:	f7fe fea3 	bl	8001628 <saturation>

	robot.speed += robot.speed_delta * METERS2RAD;
 80028e2:	4b24      	ldr	r3, [pc, #144]	@ (8002974 <control_step+0x25c>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fd9e 	bl	8000428 <__aeabi_f2d>
 80028ec:	4604      	mov	r4, r0
 80028ee:	460d      	mov	r5, r1
 80028f0:	4b20      	ldr	r3, [pc, #128]	@ (8002974 <control_step+0x25c>)
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fd97 	bl	8000428 <__aeabi_f2d>
 80028fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8002968 <control_step+0x250>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fdea 	bl	80004d8 <__aeabi_dmul>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fc2e 	bl	800016c <__adddf3>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f8d6 	bl	8000ac8 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	4a15      	ldr	r2, [pc, #84]	@ (8002974 <control_step+0x25c>)
 8002920:	6053      	str	r3, [r2, #4]

	stepper_set_speed(&stepper1, robot.speed);
 8002922:	4b14      	ldr	r3, [pc, #80]	@ (8002974 <control_step+0x25c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4619      	mov	r1, r3
 8002928:	4814      	ldr	r0, [pc, #80]	@ (800297c <control_step+0x264>)
 800292a:	f000 f9a1 	bl	8002c70 <stepper_set_speed>
	stepper_set_speed(&stepper2, robot.speed);
 800292e:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <control_step+0x25c>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4619      	mov	r1, r3
 8002934:	4819      	ldr	r0, [pc, #100]	@ (800299c <control_step+0x284>)
 8002936:	f000 f99b 	bl	8002c70 <stepper_set_speed>

	robot.data_ready = 0;
 800293a:	4b0e      	ldr	r3, [pc, #56]	@ (8002974 <control_step+0x25c>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]

	//reset prev values
	robot.prev_angle = mpu.x_angle;
 8002940:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <control_step+0x258>)
 8002942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002944:	4a0b      	ldr	r2, [pc, #44]	@ (8002974 <control_step+0x25c>)
 8002946:	62d3      	str	r3, [r2, #44]	@ 0x2c
	robot.prev_pos = robot.pos;
 8002948:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <control_step+0x25c>)
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	4a09      	ldr	r2, [pc, #36]	@ (8002974 <control_step+0x25c>)
 800294e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8002950:	bf00      	nop
 8002952:	bdb0      	pop	{r4, r5, r7, pc}
 8002954:	f3af 8000 	nop.w
 8002958:	47ae147b 	.word	0x47ae147b
 800295c:	3f847ae1 	.word	0x3f847ae1
 8002960:	97020fa5 	.word	0x97020fa5
 8002964:	3f1ee16c 	.word	0x3f1ee16c
 8002968:	226809d5 	.word	0x226809d5
 800296c:	4015386c 	.word	0x4015386c
 8002970:	20000588 	.word	0x20000588
 8002974:	200005d0 	.word	0x200005d0
 8002978:	2000061c 	.word	0x2000061c
 800297c:	20000530 	.word	0x20000530
 8002980:	20000628 	.word	0x20000628
 8002984:	200005ec 	.word	0x200005ec
 8002988:	3e99999a 	.word	0x3e99999a
 800298c:	be99999a 	.word	0xbe99999a
 8002990:	200005e8 	.word	0x200005e8
 8002994:	3eb33333 	.word	0x3eb33333
 8002998:	beb33333 	.word	0xbeb33333
 800299c:	2000055c 	.word	0x2000055c

080029a0 <robot_start>:


void robot_start(){
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
	stepper_enable(&stepper1, 1);
 80029a4:	2101      	movs	r1, #1
 80029a6:	481a      	ldr	r0, [pc, #104]	@ (8002a10 <robot_start+0x70>)
 80029a8:	f000 f92c 	bl	8002c04 <stepper_enable>
	stepper_enable(&stepper2, 1);
 80029ac:	2101      	movs	r1, #1
 80029ae:	4819      	ldr	r0, [pc, #100]	@ (8002a14 <robot_start+0x74>)
 80029b0:	f000 f928 	bl	8002c04 <stepper_enable>
	stepper1.step_counter = 0;
 80029b4:	4b16      	ldr	r3, [pc, #88]	@ (8002a10 <robot_start+0x70>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	619a      	str	r2, [r3, #24]
	stepper2.step_counter = 0;
 80029ba:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <robot_start+0x74>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]

	robot.control_enable = 1;
 80029c0:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <robot_start+0x78>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	709a      	strb	r2, [r3, #2]
	robot.speed = 0;
 80029c6:	4b14      	ldr	r3, [pc, #80]	@ (8002a18 <robot_start+0x78>)
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
	robot.prev_angle = 0;
 80029ce:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <robot_start+0x78>)
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	62da      	str	r2, [r3, #44]	@ 0x2c
	robot.prev_pos = 0;
 80029d6:	4b10      	ldr	r3, [pc, #64]	@ (8002a18 <robot_start+0x78>)
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
	robot.pos_int = 0;
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <robot_start+0x78>)
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]

	robot.set_pos = 0;
 80029e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a18 <robot_start+0x78>)
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	@ 0x24
	robot.set_speed = 0;
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <robot_start+0x78>)
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28
	robot.pos_error = 0;
 80029f6:	4b08      	ldr	r3, [pc, #32]	@ (8002a18 <robot_start+0x78>)
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	61da      	str	r2, [r3, #28]

	reset_filter(&robot.d_angle_filter);
 80029fe:	4807      	ldr	r0, [pc, #28]	@ (8002a1c <robot_start+0x7c>)
 8002a00:	f7fe ff80 	bl	8001904 <reset_filter>
	reset_filter(&robot.d_pos_filter);
 8002a04:	4806      	ldr	r0, [pc, #24]	@ (8002a20 <robot_start+0x80>)
 8002a06:	f7fe ff7d 	bl	8001904 <reset_filter>

}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000530 	.word	0x20000530
 8002a14:	2000055c 	.word	0x2000055c
 8002a18:	200005d0 	.word	0x200005d0
 8002a1c:	2000061c 	.word	0x2000061c
 8002a20:	20000628 	.word	0x20000628

08002a24 <robot_stop>:


void robot_stop(){
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
	stepper_enable(&stepper1, 0);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4806      	ldr	r0, [pc, #24]	@ (8002a44 <robot_stop+0x20>)
 8002a2c:	f000 f8ea 	bl	8002c04 <stepper_enable>
	stepper_enable(&stepper2, 0);
 8002a30:	2100      	movs	r1, #0
 8002a32:	4805      	ldr	r0, [pc, #20]	@ (8002a48 <robot_stop+0x24>)
 8002a34:	f000 f8e6 	bl	8002c04 <stepper_enable>
	robot.control_enable = 0;
 8002a38:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <robot_stop+0x28>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	709a      	strb	r2, [r3, #2]
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000530 	.word	0x20000530
 8002a48:	2000055c 	.word	0x2000055c
 8002a4c:	200005d0 	.word	0x200005d0

08002a50 <battery_voltage_update>:



void battery_voltage_update(uint16_t voltage){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
	robot.battery_voltage = voltage * 0.0045934;
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fd fcd1 	bl	8000404 <__aeabi_i2d>
 8002a62:	a31f      	add	r3, pc, #124	@ (adr r3, 8002ae0 <battery_voltage_update+0x90>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	f7fd fd36 	bl	80004d8 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
 8002a74:	f7fe f828 	bl	8000ac8 <__aeabi_d2f>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4a1f      	ldr	r2, [pc, #124]	@ (8002af8 <battery_voltage_update+0xa8>)
 8002a7c:	6493      	str	r3, [r2, #72]	@ 0x48
		if(robot.battery_voltage < 11.1){
 8002a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <battery_voltage_update+0xa8>)
 8002a80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fcd0 	bl	8000428 <__aeabi_f2d>
 8002a88:	a317      	add	r3, pc, #92	@ (adr r3, 8002ae8 <battery_voltage_update+0x98>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd ff95 	bl	80009bc <__aeabi_dcmplt>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d016      	beq.n	8002ac6 <battery_voltage_update+0x76>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a9c:	4817      	ldr	r0, [pc, #92]	@ (8002afc <battery_voltage_update+0xac>)
 8002a9e:	f002 f88b 	bl	8004bb8 <HAL_GPIO_TogglePin>
			if(robot.battery_voltage < 10.4){
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <battery_voltage_update+0xa8>)
 8002aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fcbe 	bl	8000428 <__aeabi_f2d>
 8002aac:	a310      	add	r3, pc, #64	@ (adr r3, 8002af0 <battery_voltage_update+0xa0>)
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	f7fd ff83 	bl	80009bc <__aeabi_dcmplt>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d100      	bne.n	8002abe <battery_voltage_update+0x6e>
		}
		else{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
			robot.robot_enable = 1;
		}
}
 8002abc:	e00c      	b.n	8002ad8 <battery_voltage_update+0x88>
				robot.robot_enable = 0;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <battery_voltage_update+0xa8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	705a      	strb	r2, [r3, #1]
}
 8002ac4:	e008      	b.n	8002ad8 <battery_voltage_update+0x88>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002acc:	480b      	ldr	r0, [pc, #44]	@ (8002afc <battery_voltage_update+0xac>)
 8002ace:	f002 f85b 	bl	8004b88 <HAL_GPIO_WritePin>
			robot.robot_enable = 1;
 8002ad2:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <battery_voltage_update+0xa8>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	705a      	strb	r2, [r3, #1]
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	6c706ba3 	.word	0x6c706ba3
 8002ae4:	3f72d087 	.word	0x3f72d087
 8002ae8:	33333333 	.word	0x33333333
 8002aec:	40263333 	.word	0x40263333
 8002af0:	cccccccd 	.word	0xcccccccd
 8002af4:	4024cccc 	.word	0x4024cccc
 8002af8:	200005d0 	.word	0x200005d0
 8002afc:	40011000 	.word	0x40011000

08002b00 <set_dir>:


extern volatile uint8_t spin_duration_ms;


static void set_dir(stepper_typedef *stepper, int8_t dir){
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	70fb      	strb	r3, [r7, #3]
	if(stepper->dir_polarity * dir == 1){
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002b12:	b25b      	sxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d110      	bne.n	8002b44 <set_dir+0x44>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_SET);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6918      	ldr	r0, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	8a9b      	ldrh	r3, [r3, #20]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f002 f82a 	bl	8004b88 <HAL_GPIO_WritePin>
		stepper->dir = stepper->dir_polarity;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002b3a:	b25a      	sxtb	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}
	else{
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
		stepper->dir = -stepper->dir_polarity;
	}
}
 8002b42:	e013      	b.n	8002b6c <set_dir+0x6c>
		HAL_GPIO_WritePin(stepper->DIR_Port, stepper->DIR_Pin, GPIO_PIN_RESET);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6918      	ldr	r0, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8a9b      	ldrh	r3, [r3, #20]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4619      	mov	r1, r3
 8002b52:	f002 f819 	bl	8004b88 <HAL_GPIO_WritePin>
		stepper->dir = -stepper->dir_polarity;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002b5c:	b25b      	sxtb	r3, r3
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	425b      	negs	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	b25a      	sxtb	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <stepper_init>:


//dir pin polarity : 1 or -1
void stepper_init(stepper_typedef *stepper, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_TypeDef *EN_Port, uint16_t EN_Pin,
		GPIO_TypeDef *DIR_Port, uint16_t DIR_Pin, unsigned int max_speed, int8_t dir_polarity)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
	stepper->htim = htim;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	601a      	str	r2, [r3, #0]
	stepper->Channel = Channel;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	605a      	str	r2, [r3, #4]

	stepper->EN_Port = EN_Port;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	609a      	str	r2, [r3, #8]
	stepper->EN_Pin = EN_Pin;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8b3a      	ldrh	r2, [r7, #24]
 8002b98:	819a      	strh	r2, [r3, #12]
	stepper->DIR_Port = DIR_Port;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	69fa      	ldr	r2, [r7, #28]
 8002b9e:	611a      	str	r2, [r3, #16]
	stepper->DIR_Pin = DIR_Pin;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8c3a      	ldrh	r2, [r7, #32]
 8002ba4:	829a      	strh	r2, [r3, #20]

	stepper->step_counter = 0;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
	stepper->on_off = 0;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	771a      	strb	r2, [r3, #28]
	stepper-> new_counter = 65000;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8002bb8:	621a      	str	r2, [r3, #32]

	stepper->dir_polarity = dir_polarity;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002bc0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	stepper->max_speed = max_speed;
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	82da      	strh	r2, [r3, #22]

	set_dir(stepper, 1);
 8002bcc:	2101      	movs	r1, #1
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff ff96 	bl	8002b00 <set_dir>
	stepper_enable(stepper, 0);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f814 	bl	8002c04 <stepper_enable>
	stepper_set_speed(stepper, 0);
 8002bdc:	f04f 0100 	mov.w	r1, #0
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f845 	bl	8002c70 <stepper_set_speed>
	stepper->speed = 0;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	625a      	str	r2, [r3, #36]	@ 0x24


	// start timer
	HAL_TIM_Base_Start_IT(htim);
 8002bee:	68b8      	ldr	r0, [r7, #8]
 8002bf0:	f005 fbf6 	bl	80083e0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(htim, Channel);
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	68b8      	ldr	r0, [r7, #8]
 8002bf8:	f005 fc9c 	bl	8008534 <HAL_TIM_PWM_Start>
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <stepper_enable>:



void stepper_enable(stepper_typedef *stepper, bool en)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
	if(en){
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00d      	beq.n	8002c32 <stepper_enable+0x2e>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_RESET);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6898      	ldr	r0, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	899b      	ldrh	r3, [r3, #12]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	4619      	mov	r1, r3
 8002c24:	f001 ffb0 	bl	8004b88 <HAL_GPIO_WritePin>
		stepper->enable = 1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		stepper_set_speed(stepper, 0);
		stepper->enable = 0;
		stepper->on_off = 0;
		stepper->speed = 0;
	}
}
 8002c30:	e018      	b.n	8002c64 <stepper_enable+0x60>
		HAL_GPIO_WritePin(stepper->EN_Port, stepper->EN_Pin, GPIO_PIN_SET);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6898      	ldr	r0, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	899b      	ldrh	r3, [r3, #12]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f001 ffa2 	bl	8004b88 <HAL_GPIO_WritePin>
		stepper_set_speed(stepper, 0);
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f811 	bl	8002c70 <stepper_set_speed>
		stepper->enable = 0;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		stepper->on_off = 0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
		stepper->speed = 0;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	0000      	movs	r0, r0
	...

08002c70 <stepper_set_speed>:



void stepper_set_speed(stepper_typedef *stepper, float speed)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
	saturation(-stepper->max_speed, stepper->max_speed, &speed);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8adb      	ldrh	r3, [r3, #22]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	425b      	negs	r3, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe f82a 	bl	8000cdc <__aeabi_i2f>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8adb      	ldrh	r3, [r3, #22]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe f81f 	bl	8000cd4 <__aeabi_ui2f>
 8002c96:	4601      	mov	r1, r0
 8002c98:	463b      	mov	r3, r7
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7fe fcc3 	bl	8001628 <saturation>
	stepper->speed = speed;
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	625a      	str	r2, [r3, #36]	@ 0x24
	if(fabs(speed) < 0.0628) {
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fbba 	bl	8000428 <__aeabi_f2d>
 8002cb4:	a33c      	add	r3, pc, #240	@ (adr r3, 8002da8 <stepper_set_speed+0x138>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fe7f 	bl	80009bc <__aeabi_dcmplt>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d031      	beq.n	8002d28 <stepper_set_speed+0xb8>
		stepper->on_off = 0;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	771a      	strb	r2, [r3, #28]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 0);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d105      	bne.n	8002cde <stepper_set_speed+0x6e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cdc:	e018      	b.n	8002d10 <stepper_set_speed+0xa0>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d105      	bne.n	8002cf2 <stepper_set_speed+0x82>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2300      	movs	r3, #0
 8002cee:	6393      	str	r3, [r2, #56]	@ 0x38
 8002cf0:	e00e      	b.n	8002d10 <stepper_set_speed+0xa0>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d105      	bne.n	8002d06 <stepper_set_speed+0x96>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2300      	movs	r3, #0
 8002d02:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002d04:	e004      	b.n	8002d10 <stepper_set_speed+0xa0>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, 1000);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d24:	60da      	str	r2, [r3, #12]
		return;
 8002d26:	e03b      	b.n	8002da0 <stepper_set_speed+0x130>
	}
	else{
		stepper->on_off = 1;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	771a      	strb	r2, [r3, #28]
		uint16_t counter = (2.0*3.14158/(fabs(speed)*1600.0)) * SEC2uSEC;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fb77 	bl	8000428 <__aeabi_f2d>
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <stepper_set_speed+0x150>)
 8002d40:	f7fd fbca 	bl	80004d8 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
 8002d48:	a119      	add	r1, pc, #100	@ (adr r1, 8002db0 <stepper_set_speed+0x140>)
 8002d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d4e:	f7fd fced 	bl	800072c <__aeabi_ddiv>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	a317      	add	r3, pc, #92	@ (adr r3, 8002db8 <stepper_set_speed+0x148>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fbba 	bl	80004d8 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fd fe8c 	bl	8000a88 <__aeabi_d2uiz>
 8002d70:	4603      	mov	r3, r0
 8002d72:	81fb      	strh	r3, [r7, #14]
		//uint16_t counter = 3926.
		stepper->new_counter = counter;
 8002d74:	89fa      	ldrh	r2, [r7, #14]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]

		if(speed > 0) set_dir(stepper, 1);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f04f 0100 	mov.w	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe f9bb 	bl	80010fc <__aeabi_fcmpgt>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <stepper_set_speed+0x126>
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff feb6 	bl	8002b00 <set_dir>
 8002d94:	e004      	b.n	8002da0 <stepper_set_speed+0x130>
		else set_dir(stepper, -1);
 8002d96:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff feb0 	bl	8002b00 <set_dir>
	}
}
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}
 8002da6:	bf00      	nop
 8002da8:	2a305532 	.word	0x2a305532
 8002dac:	3fb013a9 	.word	0x3fb013a9
 8002db0:	b1ee2435 	.word	0xb1ee2435
 8002db4:	401921f4 	.word	0x401921f4
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	412e8480 	.word	0x412e8480
 8002dc0:	40990000 	.word	0x40990000

08002dc4 <stepper_update>:


void stepper_update(stepper_typedef *stepper)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
	if(stepper->on_off){
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7f1b      	ldrb	r3, [r3, #28]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d036      	beq.n	8002e44 <stepper_update+0x80>
		stepper->step_counter += stepper->dir;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002ddc:	b25a      	sxtb	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	441a      	add	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	619a      	str	r2, [r3, #24]
		__HAL_TIM_SET_AUTORELOAD(stepper->htim, stepper->new_counter);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1a      	ldr	r2, [r3, #32]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 10);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <stepper_update+0x4e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	220a      	movs	r2, #10
 8002e0e:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8002e10:	e018      	b.n	8002e44 <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 10);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d105      	bne.n	8002e26 <stepper_update+0x62>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	230a      	movs	r3, #10
 8002e22:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002e24:	e00e      	b.n	8002e44 <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 10);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d105      	bne.n	8002e3a <stepper_update+0x76>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	230a      	movs	r3, #10
 8002e36:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002e38:	e004      	b.n	8002e44 <stepper_update+0x80>
		__HAL_TIM_SET_COMPARE(stepper->htim, stepper->Channel, 10);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	230a      	movs	r3, #10
 8002e42:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <HAL_MspInit+0x5c>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	4a14      	ldr	r2, [pc, #80]	@ (8002eac <HAL_MspInit+0x5c>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6193      	str	r3, [r2, #24]
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <HAL_MspInit+0x5c>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <HAL_MspInit+0x5c>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4a0e      	ldr	r2, [pc, #56]	@ (8002eac <HAL_MspInit+0x5c>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e78:	61d3      	str	r3, [r2, #28]
 8002e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <HAL_MspInit+0x5c>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002e86:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <HAL_MspInit+0x60>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <HAL_MspInit+0x60>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40010000 	.word	0x40010000

08002eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eb8:	bf00      	nop
 8002eba:	e7fd      	b.n	8002eb8 <NMI_Handler+0x4>

08002ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec0:	bf00      	nop
 8002ec2:	e7fd      	b.n	8002ec0 <HardFault_Handler+0x4>

08002ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <MemManage_Handler+0x4>

08002ecc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002edc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f04:	f000 fcc2 	bl	800388c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f10:	4802      	ldr	r0, [pc, #8]	@ (8002f1c <DMA1_Channel4_IRQHandler+0x10>)
 8002f12:	f001 fb75 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200007e4 	.word	0x200007e4

08002f20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002f24:	4802      	ldr	r0, [pc, #8]	@ (8002f30 <DMA1_Channel5_IRQHandler+0x10>)
 8002f26:	f001 fb6b 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200007a0 	.word	0x200007a0

08002f34 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002f38:	4802      	ldr	r0, [pc, #8]	@ (8002f44 <DMA1_Channel7_IRQHandler+0x10>)
 8002f3a:	f001 fb61 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	200004ec 	.word	0x200004ec

08002f48 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002f4c:	4802      	ldr	r0, [pc, #8]	@ (8002f58 <ADC1_2_IRQHandler+0x10>)
 8002f4e:	f000 fe77 	bl	8003c40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	200001f0 	.word	0x200001f0

08002f5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f60:	4802      	ldr	r0, [pc, #8]	@ (8002f6c <TIM1_UP_IRQHandler+0x10>)
 8002f62:	f005 fb89 	bl	8008678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000638 	.word	0x20000638

08002f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f74:	4802      	ldr	r0, [pc, #8]	@ (8002f80 <TIM2_IRQHandler+0x10>)
 8002f76:	f005 fb7f 	bl	8008678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000680 	.word	0x20000680

08002f84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f88:	4802      	ldr	r0, [pc, #8]	@ (8002f94 <TIM3_IRQHandler+0x10>)
 8002f8a:	f005 fb75 	bl	8008678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	200006c8 	.word	0x200006c8

08002f98 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f9c:	4802      	ldr	r0, [pc, #8]	@ (8002fa8 <TIM4_IRQHandler+0x10>)
 8002f9e:	f005 fb6b 	bl	8008678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000710 	.word	0x20000710

08002fac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002fb0:	4802      	ldr	r0, [pc, #8]	@ (8002fbc <I2C2_EV_IRQHandler+0x10>)
 8002fb2:	f002 fc67 	bl	8005884 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000498 	.word	0x20000498

08002fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fc4:	4802      	ldr	r0, [pc, #8]	@ (8002fd0 <USART1_IRQHandler+0x10>)
 8002fc6:	f006 fabb 	bl	8009540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000758 	.word	0x20000758

08002fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return 1;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr

08002fe2 <_kill>:

int _kill(int pid, int sig)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fec:	f007 ffe2 	bl	800afb4 <__errno>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2216      	movs	r2, #22
 8002ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_exit>:

void _exit (int status)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800300a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7ff ffe7 	bl	8002fe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <_exit+0x12>

08003018 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	e00a      	b.n	8003040 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800302a:	f3af 8000 	nop.w
 800302e:	4601      	mov	r1, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	60ba      	str	r2, [r7, #8]
 8003036:	b2ca      	uxtb	r2, r1
 8003038:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	3301      	adds	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	dbf0      	blt.n	800302a <_read+0x12>
  }

  return len;
 8003048:	687b      	ldr	r3, [r7, #4]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3718      	adds	r7, #24
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e009      	b.n	8003078 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	60ba      	str	r2, [r7, #8]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7fe fc55 	bl	800191c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	3301      	adds	r3, #1
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	429a      	cmp	r2, r3
 800307e:	dbf1      	blt.n	8003064 <_write+0x12>
  }
  return len;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <_close>:

int _close(int file)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003092:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030b0:	605a      	str	r2, [r3, #4]
  return 0;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <_isatty>:

int _isatty(int file)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bc80      	pop	{r7}
 80030e8:	4770      	bx	lr
	...

080030ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f4:	4a14      	ldr	r2, [pc, #80]	@ (8003148 <_sbrk+0x5c>)
 80030f6:	4b15      	ldr	r3, [pc, #84]	@ (800314c <_sbrk+0x60>)
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003100:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <_sbrk+0x64>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003108:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <_sbrk+0x64>)
 800310a:	4a12      	ldr	r2, [pc, #72]	@ (8003154 <_sbrk+0x68>)
 800310c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800310e:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d207      	bcs.n	800312c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800311c:	f007 ff4a 	bl	800afb4 <__errno>
 8003120:	4603      	mov	r3, r0
 8003122:	220c      	movs	r2, #12
 8003124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800312a:	e009      	b.n	8003140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <_sbrk+0x64>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4413      	add	r3, r2
 800313a:	4a05      	ldr	r2, [pc, #20]	@ (8003150 <_sbrk+0x64>)
 800313c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20005000 	.word	0x20005000
 800314c:	00001000 	.word	0x00001000
 8003150:	20000634 	.word	0x20000634
 8003154:	20000978 	.word	0x20000978

08003158 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800316a:	f107 0308 	add.w	r3, r7, #8
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	609a      	str	r2, [r3, #8]
 8003176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003178:	463b      	mov	r3, r7
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003180:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <MX_TIM1_Init+0x9c>)
 8003182:	4a20      	ldr	r2, [pc, #128]	@ (8003204 <MX_TIM1_Init+0xa0>)
 8003184:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 8003186:	4b1e      	ldr	r3, [pc, #120]	@ (8003200 <MX_TIM1_Init+0x9c>)
 8003188:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800318c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <MX_TIM1_Init+0x9c>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <MX_TIM1_Init+0x9c>)
 8003196:	f242 720f 	movw	r2, #9999	@ 0x270f
 800319a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800319c:	4b18      	ldr	r3, [pc, #96]	@ (8003200 <MX_TIM1_Init+0x9c>)
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <MX_TIM1_Init+0x9c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <MX_TIM1_Init+0x9c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031ae:	4814      	ldr	r0, [pc, #80]	@ (8003200 <MX_TIM1_Init+0x9c>)
 80031b0:	f005 f8c6 	bl	8008340 <HAL_TIM_Base_Init>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80031ba:	f7fe fdf6 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	4619      	mov	r1, r3
 80031ca:	480d      	ldr	r0, [pc, #52]	@ (8003200 <MX_TIM1_Init+0x9c>)
 80031cc:	f005 fc06 	bl	80089dc <HAL_TIM_ConfigClockSource>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80031d6:	f7fe fde8 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031e2:	463b      	mov	r3, r7
 80031e4:	4619      	mov	r1, r3
 80031e6:	4806      	ldr	r0, [pc, #24]	@ (8003200 <MX_TIM1_Init+0x9c>)
 80031e8:	f005 ff94 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80031f2:	f7fe fdda 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000638 	.word	0x20000638
 8003204:	40012c00 	.word	0x40012c00

08003208 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08e      	sub	sp, #56	@ 0x38
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800320e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321c:	f107 0320 	add.w	r3, r7, #32
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
 8003234:	615a      	str	r2, [r3, #20]
 8003236:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003238:	4b2d      	ldr	r3, [pc, #180]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 800323a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800323e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8003240:	4b2b      	ldr	r3, [pc, #172]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 8003242:	2247      	movs	r2, #71	@ 0x47
 8003244:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003246:	4b2a      	ldr	r3, [pc, #168]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800324c:	4b28      	ldr	r3, [pc, #160]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 800324e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003252:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003254:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325a:	4b25      	ldr	r3, [pc, #148]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 800325c:	2200      	movs	r2, #0
 800325e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003260:	4823      	ldr	r0, [pc, #140]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 8003262:	f005 f86d 	bl	8008340 <HAL_TIM_Base_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800326c:	f7fe fd9d 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003274:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003276:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800327a:	4619      	mov	r1, r3
 800327c:	481c      	ldr	r0, [pc, #112]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 800327e:	f005 fbad 	bl	80089dc <HAL_TIM_ConfigClockSource>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003288:	f7fe fd8f 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800328c:	4818      	ldr	r0, [pc, #96]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 800328e:	f005 f8f9 	bl	8008484 <HAL_TIM_PWM_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003298:	f7fe fd87 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800329c:	2300      	movs	r3, #0
 800329e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032a4:	f107 0320 	add.w	r3, r7, #32
 80032a8:	4619      	mov	r1, r3
 80032aa:	4811      	ldr	r0, [pc, #68]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 80032ac:	f005 ff32 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80032b6:	f7fe fd78 	bl	8001daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ba:	2360      	movs	r3, #96	@ 0x60
 80032bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032ca:	1d3b      	adds	r3, r7, #4
 80032cc:	2200      	movs	r2, #0
 80032ce:	4619      	mov	r1, r3
 80032d0:	4807      	ldr	r0, [pc, #28]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 80032d2:	f005 fac1 	bl	8008858 <HAL_TIM_PWM_ConfigChannel>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032dc:	f7fe fd65 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032e0:	4803      	ldr	r0, [pc, #12]	@ (80032f0 <MX_TIM2_Init+0xe8>)
 80032e2:	f000 f943 	bl	800356c <HAL_TIM_MspPostInit>

}
 80032e6:	bf00      	nop
 80032e8:	3738      	adds	r7, #56	@ 0x38
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000680 	.word	0x20000680

080032f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08e      	sub	sp, #56	@ 0x38
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003308:	f107 0320 	add.w	r3, r7, #32
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	60da      	str	r2, [r3, #12]
 800331e:	611a      	str	r2, [r3, #16]
 8003320:	615a      	str	r2, [r3, #20]
 8003322:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003324:	4b2c      	ldr	r3, [pc, #176]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003326:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <MX_TIM3_Init+0xe8>)
 8003328:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800332a:	4b2b      	ldr	r3, [pc, #172]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 800332c:	2247      	movs	r2, #71	@ 0x47
 800332e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003330:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003336:	4b28      	ldr	r3, [pc, #160]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003338:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800333c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800333e:	4b26      	ldr	r3, [pc, #152]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003344:	4b24      	ldr	r3, [pc, #144]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003346:	2200      	movs	r2, #0
 8003348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800334a:	4823      	ldr	r0, [pc, #140]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 800334c:	f004 fff8 	bl	8008340 <HAL_TIM_Base_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003356:	f7fe fd28 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800335a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800335e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003360:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003364:	4619      	mov	r1, r3
 8003366:	481c      	ldr	r0, [pc, #112]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003368:	f005 fb38 	bl	80089dc <HAL_TIM_ConfigClockSource>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8003372:	f7fe fd1a 	bl	8001daa <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003376:	4818      	ldr	r0, [pc, #96]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003378:	f005 f884 	bl	8008484 <HAL_TIM_PWM_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8003382:	f7fe fd12 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800338e:	f107 0320 	add.w	r3, r7, #32
 8003392:	4619      	mov	r1, r3
 8003394:	4810      	ldr	r0, [pc, #64]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 8003396:	f005 febd 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80033a0:	f7fe fd03 	bl	8001daa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033a4:	2360      	movs	r3, #96	@ 0x60
 80033a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033b4:	1d3b      	adds	r3, r7, #4
 80033b6:	2200      	movs	r2, #0
 80033b8:	4619      	mov	r1, r3
 80033ba:	4807      	ldr	r0, [pc, #28]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 80033bc:	f005 fa4c 	bl	8008858 <HAL_TIM_PWM_ConfigChannel>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80033c6:	f7fe fcf0 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033ca:	4803      	ldr	r0, [pc, #12]	@ (80033d8 <MX_TIM3_Init+0xe4>)
 80033cc:	f000 f8ce 	bl	800356c <HAL_TIM_MspPostInit>

}
 80033d0:	bf00      	nop
 80033d2:	3738      	adds	r7, #56	@ 0x38
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200006c8 	.word	0x200006c8
 80033dc:	40000400 	.word	0x40000400

080033e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033e6:	f107 0308 	add.w	r3, r7, #8
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f4:	463b      	mov	r3, r7
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003474 <MX_TIM4_Init+0x94>)
 80033fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003478 <MX_TIM4_Init+0x98>)
 8003400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8003402:	4b1c      	ldr	r3, [pc, #112]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003404:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8003408:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340a:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <MX_TIM4_Init+0x94>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8003410:	4b18      	ldr	r3, [pc, #96]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003412:	2263      	movs	r2, #99	@ 0x63
 8003414:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003416:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800341c:	4b15      	ldr	r3, [pc, #84]	@ (8003474 <MX_TIM4_Init+0x94>)
 800341e:	2200      	movs	r2, #0
 8003420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003422:	4814      	ldr	r0, [pc, #80]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003424:	f004 ff8c 	bl	8008340 <HAL_TIM_Base_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800342e:	f7fe fcbc 	bl	8001daa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003432:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003438:	f107 0308 	add.w	r3, r7, #8
 800343c:	4619      	mov	r1, r3
 800343e:	480d      	ldr	r0, [pc, #52]	@ (8003474 <MX_TIM4_Init+0x94>)
 8003440:	f005 facc 	bl	80089dc <HAL_TIM_ConfigClockSource>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800344a:	f7fe fcae 	bl	8001daa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003456:	463b      	mov	r3, r7
 8003458:	4619      	mov	r1, r3
 800345a:	4806      	ldr	r0, [pc, #24]	@ (8003474 <MX_TIM4_Init+0x94>)
 800345c:	f005 fe5a 	bl	8009114 <HAL_TIMEx_MasterConfigSynchronization>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003466:	f7fe fca0 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000710 	.word	0x20000710
 8003478:	40000800 	.word	0x40000800

0800347c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a34      	ldr	r2, [pc, #208]	@ (800355c <HAL_TIM_Base_MspInit+0xe0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d114      	bne.n	80034b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800348e:	4b34      	ldr	r3, [pc, #208]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	4a33      	ldr	r2, [pc, #204]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 8003494:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003498:	6193      	str	r3, [r2, #24]
 800349a:	4b31      	ldr	r3, [pc, #196]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a2:	617b      	str	r3, [r7, #20]
 80034a4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	2019      	movs	r0, #25
 80034ac:	f000 ff03 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034b0:	2019      	movs	r0, #25
 80034b2:	f000 ff1c 	bl	80042ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80034b6:	e04c      	b.n	8003552 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c0:	d114      	bne.n	80034ec <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034c2:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4a26      	ldr	r2, [pc, #152]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	61d3      	str	r3, [r2, #28]
 80034ce:	4b24      	ldr	r3, [pc, #144]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034da:	2200      	movs	r2, #0
 80034dc:	2100      	movs	r1, #0
 80034de:	201c      	movs	r0, #28
 80034e0:	f000 fee9 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034e4:	201c      	movs	r0, #28
 80034e6:	f000 ff02 	bl	80042ee <HAL_NVIC_EnableIRQ>
}
 80034ea:	e032      	b.n	8003552 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003564 <HAL_TIM_Base_MspInit+0xe8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d114      	bne.n	8003520 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034f6:	4b1a      	ldr	r3, [pc, #104]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	4a19      	ldr	r2, [pc, #100]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 80034fc:	f043 0302 	orr.w	r3, r3, #2
 8003500:	61d3      	str	r3, [r2, #28]
 8003502:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800350e:	2200      	movs	r2, #0
 8003510:	2100      	movs	r1, #0
 8003512:	201d      	movs	r0, #29
 8003514:	f000 fecf 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003518:	201d      	movs	r0, #29
 800351a:	f000 fee8 	bl	80042ee <HAL_NVIC_EnableIRQ>
}
 800351e:	e018      	b.n	8003552 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a10      	ldr	r2, [pc, #64]	@ (8003568 <HAL_TIM_Base_MspInit+0xec>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d113      	bne.n	8003552 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800352a:	4b0d      	ldr	r3, [pc, #52]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4a0c      	ldr	r2, [pc, #48]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	61d3      	str	r3, [r2, #28]
 8003536:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <HAL_TIM_Base_MspInit+0xe4>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2100      	movs	r1, #0
 8003546:	201e      	movs	r0, #30
 8003548:	f000 feb5 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800354c:	201e      	movs	r0, #30
 800354e:	f000 fece 	bl	80042ee <HAL_NVIC_EnableIRQ>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40000400 	.word	0x40000400
 8003568:	40000800 	.word	0x40000800

0800356c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358a:	d118      	bne.n	80035be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358c:	4b1c      	ldr	r3, [pc, #112]	@ (8003600 <HAL_TIM_MspPostInit+0x94>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	4a1b      	ldr	r2, [pc, #108]	@ (8003600 <HAL_TIM_MspPostInit+0x94>)
 8003592:	f043 0304 	orr.w	r3, r3, #4
 8003596:	6193      	str	r3, [r2, #24]
 8003598:	4b19      	ldr	r3, [pc, #100]	@ (8003600 <HAL_TIM_MspPostInit+0x94>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP1_Pin;
 80035a4:	2301      	movs	r3, #1
 80035a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2302      	movs	r3, #2
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	2302      	movs	r3, #2
 80035ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	4619      	mov	r1, r3
 80035b6:	4813      	ldr	r0, [pc, #76]	@ (8003604 <HAL_TIM_MspPostInit+0x98>)
 80035b8:	f001 f962 	bl	8004880 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035bc:	e01c      	b.n	80035f8 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM3)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a11      	ldr	r2, [pc, #68]	@ (8003608 <HAL_TIM_MspPostInit+0x9c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d117      	bne.n	80035f8 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003600 <HAL_TIM_MspPostInit+0x94>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003600 <HAL_TIM_MspPostInit+0x94>)
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	6193      	str	r3, [r2, #24]
 80035d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <HAL_TIM_MspPostInit+0x94>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	60bb      	str	r3, [r7, #8]
 80035de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP2_Pin;
 80035e0:	2340      	movs	r3, #64	@ 0x40
 80035e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e8:	2302      	movs	r3, #2
 80035ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80035ec:	f107 0310 	add.w	r3, r7, #16
 80035f0:	4619      	mov	r1, r3
 80035f2:	4804      	ldr	r0, [pc, #16]	@ (8003604 <HAL_TIM_MspPostInit+0x98>)
 80035f4:	f001 f944 	bl	8004880 <HAL_GPIO_Init>
}
 80035f8:	bf00      	nop
 80035fa:	3720      	adds	r7, #32
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	40010800 	.word	0x40010800
 8003608:	40000400 	.word	0x40000400

0800360c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 8003612:	4a12      	ldr	r2, [pc, #72]	@ (800365c <MX_USART1_UART_Init+0x50>)
 8003614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 8003618:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800361c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800361e:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003624:	4b0c      	ldr	r3, [pc, #48]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800362a:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 800362c:	2200      	movs	r2, #0
 800362e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003630:	4b09      	ldr	r3, [pc, #36]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 8003632:	220c      	movs	r2, #12
 8003634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003636:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 8003638:	2200      	movs	r2, #0
 800363a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 800363e:	2200      	movs	r2, #0
 8003640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003642:	4805      	ldr	r0, [pc, #20]	@ (8003658 <MX_USART1_UART_Init+0x4c>)
 8003644:	f005 fdd6 	bl	80091f4 <HAL_UART_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800364e:	f7fe fbac 	bl	8001daa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000758 	.word	0x20000758
 800365c:	40013800 	.word	0x40013800

08003660 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0310 	add.w	r3, r7, #16
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a47      	ldr	r2, [pc, #284]	@ (8003798 <HAL_UART_MspInit+0x138>)
 800367c:	4293      	cmp	r3, r2
 800367e:	f040 8086 	bne.w	800378e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003682:	4b46      	ldr	r3, [pc, #280]	@ (800379c <HAL_UART_MspInit+0x13c>)
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	4a45      	ldr	r2, [pc, #276]	@ (800379c <HAL_UART_MspInit+0x13c>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800368c:	6193      	str	r3, [r2, #24]
 800368e:	4b43      	ldr	r3, [pc, #268]	@ (800379c <HAL_UART_MspInit+0x13c>)
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369a:	4b40      	ldr	r3, [pc, #256]	@ (800379c <HAL_UART_MspInit+0x13c>)
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	4a3f      	ldr	r2, [pc, #252]	@ (800379c <HAL_UART_MspInit+0x13c>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6193      	str	r3, [r2, #24]
 80036a6:	4b3d      	ldr	r3, [pc, #244]	@ (800379c <HAL_UART_MspInit+0x13c>)
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036bc:	2303      	movs	r3, #3
 80036be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c0:	f107 0310 	add.w	r3, r7, #16
 80036c4:	4619      	mov	r1, r3
 80036c6:	4836      	ldr	r0, [pc, #216]	@ (80037a0 <HAL_UART_MspInit+0x140>)
 80036c8:	f001 f8da 	bl	8004880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 0310 	add.w	r3, r7, #16
 80036de:	4619      	mov	r1, r3
 80036e0:	482f      	ldr	r0, [pc, #188]	@ (80037a0 <HAL_UART_MspInit+0x140>)
 80036e2:	f001 f8cd 	bl	8004880 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80036e6:	4b2f      	ldr	r3, [pc, #188]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 80036e8:	4a2f      	ldr	r2, [pc, #188]	@ (80037a8 <HAL_UART_MspInit+0x148>)
 80036ea:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ec:	4b2d      	ldr	r3, [pc, #180]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036f2:	4b2c      	ldr	r3, [pc, #176]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036f8:	4b2a      	ldr	r3, [pc, #168]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036fe:	4b29      	ldr	r3, [pc, #164]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003704:	4b27      	ldr	r3, [pc, #156]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 8003706:	2200      	movs	r2, #0
 8003708:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800370a:	4b26      	ldr	r3, [pc, #152]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003710:	4b24      	ldr	r3, [pc, #144]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003716:	4823      	ldr	r0, [pc, #140]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 8003718:	f000 fe04 	bl	8004324 <HAL_DMA_Init>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8003722:	f7fe fb42 	bl	8001daa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1e      	ldr	r2, [pc, #120]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 800372a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800372c:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <HAL_UART_MspInit+0x144>)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 8003734:	4a1e      	ldr	r2, [pc, #120]	@ (80037b0 <HAL_UART_MspInit+0x150>)
 8003736:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003738:	4b1c      	ldr	r3, [pc, #112]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 800373a:	2210      	movs	r2, #16
 800373c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800373e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003744:	4b19      	ldr	r3, [pc, #100]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 8003746:	2280      	movs	r2, #128	@ 0x80
 8003748:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800374a:	4b18      	ldr	r3, [pc, #96]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003750:	4b16      	ldr	r3, [pc, #88]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 8003752:	2200      	movs	r2, #0
 8003754:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003756:	4b15      	ldr	r3, [pc, #84]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800375c:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003762:	4812      	ldr	r0, [pc, #72]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 8003764:	f000 fdde 	bl	8004324 <HAL_DMA_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800376e:	f7fe fb1c 	bl	8001daa <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a0d      	ldr	r2, [pc, #52]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 8003776:	639a      	str	r2, [r3, #56]	@ 0x38
 8003778:	4a0c      	ldr	r2, [pc, #48]	@ (80037ac <HAL_UART_MspInit+0x14c>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2103      	movs	r1, #3
 8003782:	2025      	movs	r0, #37	@ 0x25
 8003784:	f000 fd97 	bl	80042b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003788:	2025      	movs	r0, #37	@ 0x25
 800378a:	f000 fdb0 	bl	80042ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800378e:	bf00      	nop
 8003790:	3720      	adds	r7, #32
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40013800 	.word	0x40013800
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010800 	.word	0x40010800
 80037a4:	200007a0 	.word	0x200007a0
 80037a8:	40020058 	.word	0x40020058
 80037ac:	200007e4 	.word	0x200007e4
 80037b0:	40020044 	.word	0x40020044

080037b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80037b4:	f7ff fcd0 	bl	8003158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037b8:	480b      	ldr	r0, [pc, #44]	@ (80037e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80037ba:	490c      	ldr	r1, [pc, #48]	@ (80037ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80037bc:	4a0c      	ldr	r2, [pc, #48]	@ (80037f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80037be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c0:	e002      	b.n	80037c8 <LoopCopyDataInit>

080037c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037c6:	3304      	adds	r3, #4

080037c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037cc:	d3f9      	bcc.n	80037c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80037d0:	4c09      	ldr	r4, [pc, #36]	@ (80037f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037d4:	e001      	b.n	80037da <LoopFillZerobss>

080037d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d8:	3204      	adds	r2, #4

080037da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037dc:	d3fb      	bcc.n	80037d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037de:	f007 fbef 	bl	800afc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037e2:	f7fe f92d 	bl	8001a40 <main>
  bx lr
 80037e6:	4770      	bx	lr
  ldr r0, =_sdata
 80037e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80037f0:	0800d9e0 	.word	0x0800d9e0
  ldr r2, =_sbss
 80037f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80037f8:	20000978 	.word	0x20000978

080037fc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037fc:	e7fe      	b.n	80037fc <CAN1_RX1_IRQHandler>
	...

08003800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <HAL_Init+0x28>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a07      	ldr	r2, [pc, #28]	@ (8003828 <HAL_Init+0x28>)
 800380a:	f043 0310 	orr.w	r3, r3, #16
 800380e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003810:	2003      	movs	r0, #3
 8003812:	f000 fd45 	bl	80042a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003816:	2001      	movs	r0, #1
 8003818:	f000 f808 	bl	800382c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800381c:	f7ff fb18 	bl	8002e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40022000 	.word	0x40022000

0800382c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003834:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <HAL_InitTick+0x54>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <HAL_InitTick+0x58>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	4619      	mov	r1, r3
 800383e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003842:	fbb3 f3f1 	udiv	r3, r3, r1
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	4618      	mov	r0, r3
 800384c:	f000 fd5d 	bl	800430a <HAL_SYSTICK_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e00e      	b.n	8003878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b0f      	cmp	r3, #15
 800385e:	d80a      	bhi.n	8003876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003860:	2200      	movs	r2, #0
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003868:	f000 fd25 	bl	80042b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800386c:	4a06      	ldr	r2, [pc, #24]	@ (8003888 <HAL_InitTick+0x5c>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	20000000 	.word	0x20000000
 8003884:	20000008 	.word	0x20000008
 8003888:	20000004 	.word	0x20000004

0800388c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003890:	4b05      	ldr	r3, [pc, #20]	@ (80038a8 <HAL_IncTick+0x1c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_IncTick+0x20>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4413      	add	r3, r2
 800389c:	4a03      	ldr	r2, [pc, #12]	@ (80038ac <HAL_IncTick+0x20>)
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	20000008 	.word	0x20000008
 80038ac:	20000828 	.word	0x20000828

080038b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return uwTick;
 80038b4:	4b02      	ldr	r3, [pc, #8]	@ (80038c0 <HAL_GetTick+0x10>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr
 80038c0:	20000828 	.word	0x20000828

080038c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_GetTick>
 80038d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038dc:	d005      	beq.n	80038ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038de:	4b0a      	ldr	r3, [pc, #40]	@ (8003908 <HAL_Delay+0x44>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4413      	add	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ea:	bf00      	nop
 80038ec:	f7ff ffe0 	bl	80038b0 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d8f7      	bhi.n	80038ec <HAL_Delay+0x28>
  {
  }
}
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	20000008 	.word	0x20000008

0800390c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0be      	b.n	8003aac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fd fc1e 	bl	800118c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fb8f 	bl	8004074 <ADC_ConversionStop_Disable>
 8003956:	4603      	mov	r3, r0
 8003958:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	f040 8099 	bne.w	8003a9a <HAL_ADC_Init+0x18e>
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 8095 	bne.w	8003a9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003978:	f023 0302 	bic.w	r3, r3, #2
 800397c:	f043 0202 	orr.w	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800398c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	7b1b      	ldrb	r3, [r3, #12]
 8003992:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003994:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4313      	orrs	r3, r2
 800399a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a4:	d003      	beq.n	80039ae <HAL_ADC_Init+0xa2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_ADC_Init+0xa8>
 80039ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_Init+0xaa>
 80039b4:	2300      	movs	r3, #0
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7d1b      	ldrb	r3, [r3, #20]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d119      	bne.n	80039f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	7b1b      	ldrb	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d109      	bne.n	80039e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	035a      	lsls	r2, r3, #13
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e00b      	b.n	80039f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	4b28      	ldr	r3, [pc, #160]	@ (8003ab4 <HAL_ADC_Init+0x1a8>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a28:	d003      	beq.n	8003a32 <HAL_ADC_Init+0x126>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d104      	bne.n	8003a3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	051b      	lsls	r3, r3, #20
 8003a3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a42:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	4b18      	ldr	r3, [pc, #96]	@ (8003ab8 <HAL_ADC_Init+0x1ac>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d10b      	bne.n	8003a78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	f023 0303 	bic.w	r3, r3, #3
 8003a6e:	f043 0201 	orr.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a76:	e018      	b.n	8003aaa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7c:	f023 0312 	bic.w	r3, r3, #18
 8003a80:	f043 0210 	orr.w	r2, r3, #16
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a98:	e007      	b.n	8003aaa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9e:	f043 0210 	orr.w	r2, r3, #16
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	ffe1f7fd 	.word	0xffe1f7fd
 8003ab8:	ff1f0efe 	.word	0xff1f0efe

08003abc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_Start_IT+0x1a>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0a0      	b.n	8003c18 <HAL_ADC_Start_IT+0x15c>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fa6e 	bl	8003fc0 <ADC_Enable>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f040 808f 	bne.w	8003c0e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a45      	ldr	r2, [pc, #276]	@ (8003c20 <HAL_ADC_Start_IT+0x164>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d105      	bne.n	8003b1a <HAL_ADC_Start_IT+0x5e>
 8003b0e:	4b45      	ldr	r3, [pc, #276]	@ (8003c24 <HAL_ADC_Start_IT+0x168>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d115      	bne.n	8003b46 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b1e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d026      	beq.n	8003b82 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b44:	e01d      	b.n	8003b82 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a33      	ldr	r2, [pc, #204]	@ (8003c24 <HAL_ADC_Start_IT+0x168>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_ADC_Start_IT+0xaa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2f      	ldr	r2, [pc, #188]	@ (8003c20 <HAL_ADC_Start_IT+0x164>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10d      	bne.n	8003b82 <HAL_ADC_Start_IT+0xc6>
 8003b66:	4b2f      	ldr	r3, [pc, #188]	@ (8003c24 <HAL_ADC_Start_IT+0x168>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d006      	beq.n	8003b9c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b92:	f023 0206 	bic.w	r2, r3, #6
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b9a:	e002      	b.n	8003ba2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f06f 0202 	mvn.w	r2, #2
 8003bb2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0220 	orr.w	r2, r2, #32
 8003bc2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003bce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003bd2:	d113      	bne.n	8003bfc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003bd8:	4a11      	ldr	r2, [pc, #68]	@ (8003c20 <HAL_ADC_Start_IT+0x164>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d105      	bne.n	8003bea <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003bde:	4b11      	ldr	r3, [pc, #68]	@ (8003c24 <HAL_ADC_Start_IT+0x168>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d108      	bne.n	8003bfc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003bf8:	609a      	str	r2, [r3, #8]
 8003bfa:	e00c      	b.n	8003c16 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	e003      	b.n	8003c16 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40012800 	.word	0x40012800
 8003c24:	40012400 	.word	0x40012400

08003c28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr

08003c40 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03e      	beq.n	8003ce0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d039      	beq.n	8003ce0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003c8e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003c92:	d11d      	bne.n	8003cd0 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d119      	bne.n	8003cd0 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0220 	bic.w	r2, r2, #32
 8003caa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	f043 0201 	orr.w	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7fd fe79 	bl	80019c8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f06f 0212 	mvn.w	r2, #18
 8003cde:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d04d      	beq.n	8003d86 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d048      	beq.n	8003d86 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f003 0310 	and.w	r3, r3, #16
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8003d16:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8003d1a:	d012      	beq.n	8003d42 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d125      	bne.n	8003d76 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003d34:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003d38:	d11d      	bne.n	8003d76 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d50:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d105      	bne.n	8003d76 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	f043 0201 	orr.w	r2, r3, #1
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f9bd 	bl	80040f6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 020c 	mvn.w	r2, #12
 8003d84:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00d      	beq.n	8003db6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f809 	bl	8003dbe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0201 	mvn.w	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x20>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0dc      	b.n	8003faa <HAL_ADC_ConfigChannel+0x1da>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b06      	cmp	r3, #6
 8003dfe:	d81c      	bhi.n	8003e3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	3b05      	subs	r3, #5
 8003e12:	221f      	movs	r2, #31
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	4019      	ands	r1, r3
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	3b05      	subs	r3, #5
 8003e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e38:	e03c      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d81c      	bhi.n	8003e7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	3b23      	subs	r3, #35	@ 0x23
 8003e54:	221f      	movs	r2, #31
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	4019      	ands	r1, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6818      	ldr	r0, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685a      	ldr	r2, [r3, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3b23      	subs	r3, #35	@ 0x23
 8003e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e7a:	e01b      	b.n	8003eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3b41      	subs	r3, #65	@ 0x41
 8003e8e:	221f      	movs	r2, #31
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	4019      	ands	r1, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3b41      	subs	r3, #65	@ 0x41
 8003ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b09      	cmp	r3, #9
 8003eba:	d91c      	bls.n	8003ef6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68d9      	ldr	r1, [r3, #12]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	4413      	add	r3, r2
 8003ecc:	3b1e      	subs	r3, #30
 8003ece:	2207      	movs	r2, #7
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	4019      	ands	r1, r3
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	6898      	ldr	r0, [r3, #8]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3b1e      	subs	r3, #30
 8003ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	60da      	str	r2, [r3, #12]
 8003ef4:	e019      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6919      	ldr	r1, [r3, #16]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	2207      	movs	r2, #7
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	4019      	ands	r1, r3
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6898      	ldr	r0, [r3, #8]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d003      	beq.n	8003f3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f36:	2b11      	cmp	r3, #17
 8003f38:	d132      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d125      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d126      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003f60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d11a      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f6a:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a13      	ldr	r2, [pc, #76]	@ (8003fbc <HAL_ADC_ConfigChannel+0x1ec>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	0c9a      	lsrs	r2, r3, #18
 8003f76:	4613      	mov	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f80:	e002      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f9      	bne.n	8003f82 <HAL_ADC_ConfigChannel+0x1b2>
 8003f8e:	e007      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr
 8003fb4:	40012400 	.word	0x40012400
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	431bde83 	.word	0x431bde83

08003fc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d040      	beq.n	8004060 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f042 0201 	orr.w	r2, r2, #1
 8003fec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fee:	4b1f      	ldr	r3, [pc, #124]	@ (800406c <ADC_Enable+0xac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <ADC_Enable+0xb0>)
 8003ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003ffc:	e002      	b.n	8004004 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	3b01      	subs	r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f9      	bne.n	8003ffe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800400a:	f7ff fc51 	bl	80038b0 <HAL_GetTick>
 800400e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004010:	e01f      	b.n	8004052 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004012:	f7ff fc4d 	bl	80038b0 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d918      	bls.n	8004052 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b01      	cmp	r3, #1
 800402c:	d011      	beq.n	8004052 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004032:	f043 0210 	orr.w	r2, r3, #16
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403e:	f043 0201 	orr.w	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e007      	b.n	8004062 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b01      	cmp	r3, #1
 800405e:	d1d8      	bne.n	8004012 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000000 	.word	0x20000000
 8004070:	431bde83 	.word	0x431bde83

08004074 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d12e      	bne.n	80040ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800409e:	f7ff fc07 	bl	80038b0 <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80040a4:	e01b      	b.n	80040de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040a6:	f7ff fc03 	bl	80038b0 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d914      	bls.n	80040de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10d      	bne.n	80040de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c6:	f043 0210 	orr.w	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	f043 0201 	orr.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e007      	b.n	80040ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d0dc      	beq.n	80040a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004118:	4b0c      	ldr	r3, [pc, #48]	@ (800414c <__NVIC_SetPriorityGrouping+0x44>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004124:	4013      	ands	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800413a:	4a04      	ldr	r2, [pc, #16]	@ (800414c <__NVIC_SetPriorityGrouping+0x44>)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	60d3      	str	r3, [r2, #12]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	e000ed00 	.word	0xe000ed00

08004150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004154:	4b04      	ldr	r3, [pc, #16]	@ (8004168 <__NVIC_GetPriorityGrouping+0x18>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	f003 0307 	and.w	r3, r3, #7
}
 800415e:	4618      	mov	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	2b00      	cmp	r3, #0
 800417c:	db0b      	blt.n	8004196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	4906      	ldr	r1, [pc, #24]	@ (80041a0 <__NVIC_EnableIRQ+0x34>)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2001      	movs	r0, #1
 800418e:	fa00 f202 	lsl.w	r2, r0, r2
 8004192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	e000e100 	.word	0xe000e100

080041a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	db0a      	blt.n	80041ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	490c      	ldr	r1, [pc, #48]	@ (80041f0 <__NVIC_SetPriority+0x4c>)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	0112      	lsls	r2, r2, #4
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	440b      	add	r3, r1
 80041c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041cc:	e00a      	b.n	80041e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	b2da      	uxtb	r2, r3
 80041d2:	4908      	ldr	r1, [pc, #32]	@ (80041f4 <__NVIC_SetPriority+0x50>)
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	3b04      	subs	r3, #4
 80041dc:	0112      	lsls	r2, r2, #4
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	440b      	add	r3, r1
 80041e2:	761a      	strb	r2, [r3, #24]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc80      	pop	{r7}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e100 	.word	0xe000e100
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b089      	sub	sp, #36	@ 0x24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f1c3 0307 	rsb	r3, r3, #7
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf28      	it	cs
 8004216:	2304      	movcs	r3, #4
 8004218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3304      	adds	r3, #4
 800421e:	2b06      	cmp	r3, #6
 8004220:	d902      	bls.n	8004228 <NVIC_EncodePriority+0x30>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3b03      	subs	r3, #3
 8004226:	e000      	b.n	800422a <NVIC_EncodePriority+0x32>
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800422c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43da      	mvns	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	401a      	ands	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004240:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43d9      	mvns	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004250:	4313      	orrs	r3, r2
         );
}
 8004252:	4618      	mov	r0, r3
 8004254:	3724      	adds	r7, #36	@ 0x24
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3b01      	subs	r3, #1
 8004268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800426c:	d301      	bcc.n	8004272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800426e:	2301      	movs	r3, #1
 8004270:	e00f      	b.n	8004292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004272:	4a0a      	ldr	r2, [pc, #40]	@ (800429c <SysTick_Config+0x40>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3b01      	subs	r3, #1
 8004278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800427a:	210f      	movs	r1, #15
 800427c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004280:	f7ff ff90 	bl	80041a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004284:	4b05      	ldr	r3, [pc, #20]	@ (800429c <SysTick_Config+0x40>)
 8004286:	2200      	movs	r2, #0
 8004288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800428a:	4b04      	ldr	r3, [pc, #16]	@ (800429c <SysTick_Config+0x40>)
 800428c:	2207      	movs	r2, #7
 800428e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	e000e010 	.word	0xe000e010

080042a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff2d 	bl	8004108 <__NVIC_SetPriorityGrouping>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4603      	mov	r3, r0
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042c8:	f7ff ff42 	bl	8004150 <__NVIC_GetPriorityGrouping>
 80042cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	6978      	ldr	r0, [r7, #20]
 80042d4:	f7ff ff90 	bl	80041f8 <NVIC_EncodePriority>
 80042d8:	4602      	mov	r2, r0
 80042da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff ff5f 	bl	80041a4 <__NVIC_SetPriority>
}
 80042e6:	bf00      	nop
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff35 	bl	800416c <__NVIC_EnableIRQ>
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b082      	sub	sp, #8
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7ff ffa2 	bl	800425c <SysTick_Config>
 8004318:	4603      	mov	r3, r0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e043      	b.n	80043c2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	461a      	mov	r2, r3
 8004340:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <HAL_DMA_Init+0xa8>)
 8004342:	4413      	add	r3, r2
 8004344:	4a22      	ldr	r2, [pc, #136]	@ (80043d0 <HAL_DMA_Init+0xac>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	009a      	lsls	r2, r3, #2
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a1f      	ldr	r2, [pc, #124]	@ (80043d4 <HAL_DMA_Init+0xb0>)
 8004356:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800436e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004372:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800437c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004388:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004394:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	bffdfff8 	.word	0xbffdfff8
 80043d0:	cccccccd 	.word	0xcccccccd
 80043d4:	40020000 	.word	0x40020000

080043d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_DMA_Start_IT+0x20>
 80043f4:	2302      	movs	r3, #2
 80043f6:	e04b      	b.n	8004490 <HAL_DMA_Start_IT+0xb8>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d13a      	bne.n	8004482 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f9f8 	bl	8004826 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d008      	beq.n	8004450 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 020e 	orr.w	r2, r2, #14
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	e00f      	b.n	8004470 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0204 	bic.w	r2, r2, #4
 800445e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 020a 	orr.w	r2, r2, #10
 800446e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e005      	b.n	800448e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800448a:	2302      	movs	r3, #2
 800448c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800448e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d008      	beq.n	80044c2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2204      	movs	r2, #4
 80044b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e020      	b.n	8004504 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 020e 	bic.w	r2, r2, #14
 80044d0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ea:	2101      	movs	r1, #1
 80044ec:	fa01 f202 	lsl.w	r2, r1, r2
 80044f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004502:	7bfb      	ldrb	r3, [r7, #15]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
	...

08004510 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d005      	beq.n	8004534 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2204      	movs	r2, #4
 800452c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e051      	b.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 020e 	bic.w	r2, r2, #14
 8004542:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a22      	ldr	r2, [pc, #136]	@ (80045e4 <HAL_DMA_Abort_IT+0xd4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d029      	beq.n	80045b2 <HAL_DMA_Abort_IT+0xa2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a21      	ldr	r2, [pc, #132]	@ (80045e8 <HAL_DMA_Abort_IT+0xd8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d022      	beq.n	80045ae <HAL_DMA_Abort_IT+0x9e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ec <HAL_DMA_Abort_IT+0xdc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01a      	beq.n	80045a8 <HAL_DMA_Abort_IT+0x98>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1e      	ldr	r2, [pc, #120]	@ (80045f0 <HAL_DMA_Abort_IT+0xe0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d012      	beq.n	80045a2 <HAL_DMA_Abort_IT+0x92>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1c      	ldr	r2, [pc, #112]	@ (80045f4 <HAL_DMA_Abort_IT+0xe4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00a      	beq.n	800459c <HAL_DMA_Abort_IT+0x8c>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	@ (80045f8 <HAL_DMA_Abort_IT+0xe8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d102      	bne.n	8004596 <HAL_DMA_Abort_IT+0x86>
 8004590:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004594:	e00e      	b.n	80045b4 <HAL_DMA_Abort_IT+0xa4>
 8004596:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800459a:	e00b      	b.n	80045b4 <HAL_DMA_Abort_IT+0xa4>
 800459c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045a0:	e008      	b.n	80045b4 <HAL_DMA_Abort_IT+0xa4>
 80045a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045a6:	e005      	b.n	80045b4 <HAL_DMA_Abort_IT+0xa4>
 80045a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80045ac:	e002      	b.n	80045b4 <HAL_DMA_Abort_IT+0xa4>
 80045ae:	2310      	movs	r3, #16
 80045b0:	e000      	b.n	80045b4 <HAL_DMA_Abort_IT+0xa4>
 80045b2:	2301      	movs	r3, #1
 80045b4:	4a11      	ldr	r2, [pc, #68]	@ (80045fc <HAL_DMA_Abort_IT+0xec>)
 80045b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4798      	blx	r3
    } 
  }
  return status;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40020008 	.word	0x40020008
 80045e8:	4002001c 	.word	0x4002001c
 80045ec:	40020030 	.word	0x40020030
 80045f0:	40020044 	.word	0x40020044
 80045f4:	40020058 	.word	0x40020058
 80045f8:	4002006c 	.word	0x4002006c
 80045fc:	40020000 	.word	0x40020000

08004600 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	2204      	movs	r2, #4
 800461e:	409a      	lsls	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d04f      	beq.n	80046c8 <HAL_DMA_IRQHandler+0xc8>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d04a      	beq.n	80046c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0204 	bic.w	r2, r2, #4
 800464e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a66      	ldr	r2, [pc, #408]	@ (80047f0 <HAL_DMA_IRQHandler+0x1f0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d029      	beq.n	80046ae <HAL_DMA_IRQHandler+0xae>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a65      	ldr	r2, [pc, #404]	@ (80047f4 <HAL_DMA_IRQHandler+0x1f4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d022      	beq.n	80046aa <HAL_DMA_IRQHandler+0xaa>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a63      	ldr	r2, [pc, #396]	@ (80047f8 <HAL_DMA_IRQHandler+0x1f8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01a      	beq.n	80046a4 <HAL_DMA_IRQHandler+0xa4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a62      	ldr	r2, [pc, #392]	@ (80047fc <HAL_DMA_IRQHandler+0x1fc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d012      	beq.n	800469e <HAL_DMA_IRQHandler+0x9e>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a60      	ldr	r2, [pc, #384]	@ (8004800 <HAL_DMA_IRQHandler+0x200>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00a      	beq.n	8004698 <HAL_DMA_IRQHandler+0x98>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a5f      	ldr	r2, [pc, #380]	@ (8004804 <HAL_DMA_IRQHandler+0x204>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d102      	bne.n	8004692 <HAL_DMA_IRQHandler+0x92>
 800468c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004690:	e00e      	b.n	80046b0 <HAL_DMA_IRQHandler+0xb0>
 8004692:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004696:	e00b      	b.n	80046b0 <HAL_DMA_IRQHandler+0xb0>
 8004698:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800469c:	e008      	b.n	80046b0 <HAL_DMA_IRQHandler+0xb0>
 800469e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80046a2:	e005      	b.n	80046b0 <HAL_DMA_IRQHandler+0xb0>
 80046a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046a8:	e002      	b.n	80046b0 <HAL_DMA_IRQHandler+0xb0>
 80046aa:	2340      	movs	r3, #64	@ 0x40
 80046ac:	e000      	b.n	80046b0 <HAL_DMA_IRQHandler+0xb0>
 80046ae:	2304      	movs	r3, #4
 80046b0:	4a55      	ldr	r2, [pc, #340]	@ (8004808 <HAL_DMA_IRQHandler+0x208>)
 80046b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8094 	beq.w	80047e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80046c6:	e08e      	b.n	80047e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	2202      	movs	r2, #2
 80046ce:	409a      	lsls	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d056      	beq.n	8004786 <HAL_DMA_IRQHandler+0x186>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d051      	beq.n	8004786 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 020a 	bic.w	r2, r2, #10
 80046fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a38      	ldr	r2, [pc, #224]	@ (80047f0 <HAL_DMA_IRQHandler+0x1f0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d029      	beq.n	8004766 <HAL_DMA_IRQHandler+0x166>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a37      	ldr	r2, [pc, #220]	@ (80047f4 <HAL_DMA_IRQHandler+0x1f4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_IRQHandler+0x162>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a35      	ldr	r2, [pc, #212]	@ (80047f8 <HAL_DMA_IRQHandler+0x1f8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01a      	beq.n	800475c <HAL_DMA_IRQHandler+0x15c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a34      	ldr	r2, [pc, #208]	@ (80047fc <HAL_DMA_IRQHandler+0x1fc>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d012      	beq.n	8004756 <HAL_DMA_IRQHandler+0x156>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a32      	ldr	r2, [pc, #200]	@ (8004800 <HAL_DMA_IRQHandler+0x200>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00a      	beq.n	8004750 <HAL_DMA_IRQHandler+0x150>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a31      	ldr	r2, [pc, #196]	@ (8004804 <HAL_DMA_IRQHandler+0x204>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d102      	bne.n	800474a <HAL_DMA_IRQHandler+0x14a>
 8004744:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004748:	e00e      	b.n	8004768 <HAL_DMA_IRQHandler+0x168>
 800474a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800474e:	e00b      	b.n	8004768 <HAL_DMA_IRQHandler+0x168>
 8004750:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004754:	e008      	b.n	8004768 <HAL_DMA_IRQHandler+0x168>
 8004756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800475a:	e005      	b.n	8004768 <HAL_DMA_IRQHandler+0x168>
 800475c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004760:	e002      	b.n	8004768 <HAL_DMA_IRQHandler+0x168>
 8004762:	2320      	movs	r3, #32
 8004764:	e000      	b.n	8004768 <HAL_DMA_IRQHandler+0x168>
 8004766:	2302      	movs	r3, #2
 8004768:	4a27      	ldr	r2, [pc, #156]	@ (8004808 <HAL_DMA_IRQHandler+0x208>)
 800476a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d034      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004784:	e02f      	b.n	80047e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	2208      	movs	r2, #8
 800478c:	409a      	lsls	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d028      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x1e8>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d023      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 020e 	bic.w	r2, r2, #14
 80047ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	2101      	movs	r1, #1
 80047ba:	fa01 f202 	lsl.w	r2, r1, r2
 80047be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
    }
  }
  return;
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
}
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40020008 	.word	0x40020008
 80047f4:	4002001c 	.word	0x4002001c
 80047f8:	40020030 	.word	0x40020030
 80047fc:	40020044 	.word	0x40020044
 8004800:	40020058 	.word	0x40020058
 8004804:	4002006c 	.word	0x4002006c
 8004808:	40020000 	.word	0x40020000

0800480c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800481a:	b2db      	uxtb	r3, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b10      	cmp	r3, #16
 8004852:	d108      	bne.n	8004866 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004864:	e007      	b.n	8004876 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	60da      	str	r2, [r3, #12]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	bc80      	pop	{r7}
 800487e:	4770      	bx	lr

08004880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004880:	b480      	push	{r7}
 8004882:	b08b      	sub	sp, #44	@ 0x2c
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800488a:	2300      	movs	r3, #0
 800488c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800488e:	2300      	movs	r3, #0
 8004890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004892:	e169      	b.n	8004b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004894:	2201      	movs	r2, #1
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	f040 8158 	bne.w	8004b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	4a9a      	ldr	r2, [pc, #616]	@ (8004b20 <HAL_GPIO_Init+0x2a0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d05e      	beq.n	800497a <HAL_GPIO_Init+0xfa>
 80048bc:	4a98      	ldr	r2, [pc, #608]	@ (8004b20 <HAL_GPIO_Init+0x2a0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d875      	bhi.n	80049ae <HAL_GPIO_Init+0x12e>
 80048c2:	4a98      	ldr	r2, [pc, #608]	@ (8004b24 <HAL_GPIO_Init+0x2a4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d058      	beq.n	800497a <HAL_GPIO_Init+0xfa>
 80048c8:	4a96      	ldr	r2, [pc, #600]	@ (8004b24 <HAL_GPIO_Init+0x2a4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d86f      	bhi.n	80049ae <HAL_GPIO_Init+0x12e>
 80048ce:	4a96      	ldr	r2, [pc, #600]	@ (8004b28 <HAL_GPIO_Init+0x2a8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d052      	beq.n	800497a <HAL_GPIO_Init+0xfa>
 80048d4:	4a94      	ldr	r2, [pc, #592]	@ (8004b28 <HAL_GPIO_Init+0x2a8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d869      	bhi.n	80049ae <HAL_GPIO_Init+0x12e>
 80048da:	4a94      	ldr	r2, [pc, #592]	@ (8004b2c <HAL_GPIO_Init+0x2ac>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d04c      	beq.n	800497a <HAL_GPIO_Init+0xfa>
 80048e0:	4a92      	ldr	r2, [pc, #584]	@ (8004b2c <HAL_GPIO_Init+0x2ac>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d863      	bhi.n	80049ae <HAL_GPIO_Init+0x12e>
 80048e6:	4a92      	ldr	r2, [pc, #584]	@ (8004b30 <HAL_GPIO_Init+0x2b0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d046      	beq.n	800497a <HAL_GPIO_Init+0xfa>
 80048ec:	4a90      	ldr	r2, [pc, #576]	@ (8004b30 <HAL_GPIO_Init+0x2b0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d85d      	bhi.n	80049ae <HAL_GPIO_Init+0x12e>
 80048f2:	2b12      	cmp	r3, #18
 80048f4:	d82a      	bhi.n	800494c <HAL_GPIO_Init+0xcc>
 80048f6:	2b12      	cmp	r3, #18
 80048f8:	d859      	bhi.n	80049ae <HAL_GPIO_Init+0x12e>
 80048fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004900 <HAL_GPIO_Init+0x80>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	0800497b 	.word	0x0800497b
 8004904:	08004955 	.word	0x08004955
 8004908:	08004967 	.word	0x08004967
 800490c:	080049a9 	.word	0x080049a9
 8004910:	080049af 	.word	0x080049af
 8004914:	080049af 	.word	0x080049af
 8004918:	080049af 	.word	0x080049af
 800491c:	080049af 	.word	0x080049af
 8004920:	080049af 	.word	0x080049af
 8004924:	080049af 	.word	0x080049af
 8004928:	080049af 	.word	0x080049af
 800492c:	080049af 	.word	0x080049af
 8004930:	080049af 	.word	0x080049af
 8004934:	080049af 	.word	0x080049af
 8004938:	080049af 	.word	0x080049af
 800493c:	080049af 	.word	0x080049af
 8004940:	080049af 	.word	0x080049af
 8004944:	0800495d 	.word	0x0800495d
 8004948:	08004971 	.word	0x08004971
 800494c:	4a79      	ldr	r2, [pc, #484]	@ (8004b34 <HAL_GPIO_Init+0x2b4>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d013      	beq.n	800497a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004952:	e02c      	b.n	80049ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	623b      	str	r3, [r7, #32]
          break;
 800495a:	e029      	b.n	80049b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	623b      	str	r3, [r7, #32]
          break;
 8004964:	e024      	b.n	80049b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	3308      	adds	r3, #8
 800496c:	623b      	str	r3, [r7, #32]
          break;
 800496e:	e01f      	b.n	80049b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	330c      	adds	r3, #12
 8004976:	623b      	str	r3, [r7, #32]
          break;
 8004978:	e01a      	b.n	80049b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004982:	2304      	movs	r3, #4
 8004984:	623b      	str	r3, [r7, #32]
          break;
 8004986:	e013      	b.n	80049b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d105      	bne.n	800499c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004990:	2308      	movs	r3, #8
 8004992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	611a      	str	r2, [r3, #16]
          break;
 800499a:	e009      	b.n	80049b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800499c:	2308      	movs	r3, #8
 800499e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	615a      	str	r2, [r3, #20]
          break;
 80049a6:	e003      	b.n	80049b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80049a8:	2300      	movs	r3, #0
 80049aa:	623b      	str	r3, [r7, #32]
          break;
 80049ac:	e000      	b.n	80049b0 <HAL_GPIO_Init+0x130>
          break;
 80049ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2bff      	cmp	r3, #255	@ 0xff
 80049b4:	d801      	bhi.n	80049ba <HAL_GPIO_Init+0x13a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	e001      	b.n	80049be <HAL_GPIO_Init+0x13e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3304      	adds	r3, #4
 80049be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2bff      	cmp	r3, #255	@ 0xff
 80049c4:	d802      	bhi.n	80049cc <HAL_GPIO_Init+0x14c>
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	e002      	b.n	80049d2 <HAL_GPIO_Init+0x152>
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	3b08      	subs	r3, #8
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	210f      	movs	r1, #15
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	401a      	ands	r2, r3
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ec:	431a      	orrs	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80b1 	beq.w	8004b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004a00:	4b4d      	ldr	r3, [pc, #308]	@ (8004b38 <HAL_GPIO_Init+0x2b8>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	4a4c      	ldr	r2, [pc, #304]	@ (8004b38 <HAL_GPIO_Init+0x2b8>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6193      	str	r3, [r2, #24]
 8004a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004b38 <HAL_GPIO_Init+0x2b8>)
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004a18:	4a48      	ldr	r2, [pc, #288]	@ (8004b3c <HAL_GPIO_Init+0x2bc>)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	089b      	lsrs	r3, r3, #2
 8004a1e:	3302      	adds	r3, #2
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	220f      	movs	r2, #15
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	43db      	mvns	r3, r3
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a40      	ldr	r2, [pc, #256]	@ (8004b40 <HAL_GPIO_Init+0x2c0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <HAL_GPIO_Init+0x1ec>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a3f      	ldr	r2, [pc, #252]	@ (8004b44 <HAL_GPIO_Init+0x2c4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00d      	beq.n	8004a68 <HAL_GPIO_Init+0x1e8>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004b48 <HAL_GPIO_Init+0x2c8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <HAL_GPIO_Init+0x1e4>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a3d      	ldr	r2, [pc, #244]	@ (8004b4c <HAL_GPIO_Init+0x2cc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d101      	bne.n	8004a60 <HAL_GPIO_Init+0x1e0>
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e006      	b.n	8004a6e <HAL_GPIO_Init+0x1ee>
 8004a60:	2304      	movs	r3, #4
 8004a62:	e004      	b.n	8004a6e <HAL_GPIO_Init+0x1ee>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e002      	b.n	8004a6e <HAL_GPIO_Init+0x1ee>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <HAL_GPIO_Init+0x1ee>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a70:	f002 0203 	and.w	r2, r2, #3
 8004a74:	0092      	lsls	r2, r2, #2
 8004a76:	4093      	lsls	r3, r2
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004a7e:	492f      	ldr	r1, [pc, #188]	@ (8004b3c <HAL_GPIO_Init+0x2bc>)
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	3302      	adds	r3, #2
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d006      	beq.n	8004aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004a98:	4b2d      	ldr	r3, [pc, #180]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	492c      	ldr	r1, [pc, #176]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	608b      	str	r3, [r1, #8]
 8004aa4:	e006      	b.n	8004ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	4928      	ldr	r1, [pc, #160]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004ac0:	4b23      	ldr	r3, [pc, #140]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004ac2:	68da      	ldr	r2, [r3, #12]
 8004ac4:	4922      	ldr	r1, [pc, #136]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60cb      	str	r3, [r1, #12]
 8004acc:	e006      	b.n	8004adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004ace:	4b20      	ldr	r3, [pc, #128]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	491e      	ldr	r1, [pc, #120]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d006      	beq.n	8004af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004ae8:	4b19      	ldr	r3, [pc, #100]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4918      	ldr	r1, [pc, #96]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	604b      	str	r3, [r1, #4]
 8004af4:	e006      	b.n	8004b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004af6:	4b16      	ldr	r3, [pc, #88]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	43db      	mvns	r3, r3
 8004afe:	4914      	ldr	r1, [pc, #80]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d021      	beq.n	8004b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004b10:	4b0f      	ldr	r3, [pc, #60]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	490e      	ldr	r1, [pc, #56]	@ (8004b50 <HAL_GPIO_Init+0x2d0>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]
 8004b1c:	e021      	b.n	8004b62 <HAL_GPIO_Init+0x2e2>
 8004b1e:	bf00      	nop
 8004b20:	10320000 	.word	0x10320000
 8004b24:	10310000 	.word	0x10310000
 8004b28:	10220000 	.word	0x10220000
 8004b2c:	10210000 	.word	0x10210000
 8004b30:	10120000 	.word	0x10120000
 8004b34:	10110000 	.word	0x10110000
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40010000 	.word	0x40010000
 8004b40:	40010800 	.word	0x40010800
 8004b44:	40010c00 	.word	0x40010c00
 8004b48:	40011000 	.word	0x40011000
 8004b4c:	40011400 	.word	0x40011400
 8004b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	43db      	mvns	r3, r3
 8004b5c:	4909      	ldr	r1, [pc, #36]	@ (8004b84 <HAL_GPIO_Init+0x304>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	3301      	adds	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f47f ae8e 	bne.w	8004894 <HAL_GPIO_Init+0x14>
  }
}
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	372c      	adds	r7, #44	@ 0x2c
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr
 8004b84:	40010400 	.word	0x40010400

08004b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	807b      	strh	r3, [r7, #2]
 8004b94:	4613      	mov	r3, r2
 8004b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b98:	787b      	ldrb	r3, [r7, #1]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004ba4:	e003      	b.n	8004bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	041a      	lsls	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	611a      	str	r2, [r3, #16]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	041a      	lsls	r2, r3, #16
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	43d9      	mvns	r1, r3
 8004bd6:	887b      	ldrh	r3, [r7, #2]
 8004bd8:	400b      	ands	r3, r1
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	611a      	str	r2, [r3, #16]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr
	...

08004bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e12b      	b.n	8004e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fc fd88 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	@ 0x24
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c50:	f003 fa7a 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 8004c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4a81      	ldr	r2, [pc, #516]	@ (8004e60 <HAL_I2C_Init+0x274>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d807      	bhi.n	8004c70 <HAL_I2C_Init+0x84>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4a80      	ldr	r2, [pc, #512]	@ (8004e64 <HAL_I2C_Init+0x278>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	bf94      	ite	ls
 8004c68:	2301      	movls	r3, #1
 8004c6a:	2300      	movhi	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e006      	b.n	8004c7e <HAL_I2C_Init+0x92>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a7d      	ldr	r2, [pc, #500]	@ (8004e68 <HAL_I2C_Init+0x27c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	bf94      	ite	ls
 8004c78:	2301      	movls	r3, #1
 8004c7a:	2300      	movhi	r3, #0
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e0e7      	b.n	8004e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a78      	ldr	r2, [pc, #480]	@ (8004e6c <HAL_I2C_Init+0x280>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	0c9b      	lsrs	r3, r3, #18
 8004c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004e60 <HAL_I2C_Init+0x274>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d802      	bhi.n	8004cc0 <HAL_I2C_Init+0xd4>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	e009      	b.n	8004cd4 <HAL_I2C_Init+0xe8>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	4a69      	ldr	r2, [pc, #420]	@ (8004e70 <HAL_I2C_Init+0x284>)
 8004ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004ce6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	495c      	ldr	r1, [pc, #368]	@ (8004e60 <HAL_I2C_Init+0x274>)
 8004cf0:	428b      	cmp	r3, r1
 8004cf2:	d819      	bhi.n	8004d28 <HAL_I2C_Init+0x13c>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1e59      	subs	r1, r3, #1
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d02:	1c59      	adds	r1, r3, #1
 8004d04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d08:	400b      	ands	r3, r1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_I2C_Init+0x138>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1e59      	subs	r1, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d22:	e051      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004d24:	2304      	movs	r3, #4
 8004d26:	e04f      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d111      	bne.n	8004d54 <HAL_I2C_Init+0x168>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1e58      	subs	r0, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6859      	ldr	r1, [r3, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	005b      	lsls	r3, r3, #1
 8004d3c:	440b      	add	r3, r1
 8004d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d42:	3301      	adds	r3, #1
 8004d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	e012      	b.n	8004d7a <HAL_I2C_Init+0x18e>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1e58      	subs	r0, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6859      	ldr	r1, [r3, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	0099      	lsls	r1, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Init+0x196>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e022      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10e      	bne.n	8004da8 <HAL_I2C_Init+0x1bc>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e58      	subs	r0, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6859      	ldr	r1, [r3, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	440b      	add	r3, r1
 8004d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da6:	e00f      	b.n	8004dc8 <HAL_I2C_Init+0x1dc>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1e58      	subs	r0, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6859      	ldr	r1, [r3, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	0099      	lsls	r1, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	6809      	ldr	r1, [r1, #0]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69da      	ldr	r2, [r3, #28]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004df6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6911      	ldr	r1, [r2, #16]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	68d2      	ldr	r2, [r2, #12]
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695a      	ldr	r2, [r3, #20]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	000186a0 	.word	0x000186a0
 8004e64:	001e847f 	.word	0x001e847f
 8004e68:	003d08ff 	.word	0x003d08ff
 8004e6c:	431bde83 	.word	0x431bde83
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d103      	bne.n	8004e92 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  }
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr

08004e9c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	4603      	mov	r3, r0
 8004eac:	817b      	strh	r3, [r7, #10]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	813b      	strh	r3, [r7, #8]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eb6:	f7fe fcfb 	bl	80038b0 <HAL_GetTick>
 8004eba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	f040 80d9 	bne.w	800507c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	2319      	movs	r3, #25
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	496d      	ldr	r1, [pc, #436]	@ (8005088 <HAL_I2C_Mem_Write+0x1ec>)
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f002 faeb 	bl	80074b0 <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e0cc      	b.n	800507e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_I2C_Mem_Write+0x56>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e0c5      	b.n	800507e <HAL_I2C_Mem_Write+0x1e2>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d007      	beq.n	8004f18 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2221      	movs	r2, #33	@ 0x21
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2240      	movs	r2, #64	@ 0x40
 8004f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a3a      	ldr	r2, [r7, #32]
 8004f42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a4d      	ldr	r2, [pc, #308]	@ (800508c <HAL_I2C_Mem_Write+0x1f0>)
 8004f58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f5a:	88f8      	ldrh	r0, [r7, #6]
 8004f5c:	893a      	ldrh	r2, [r7, #8]
 8004f5e:	8979      	ldrh	r1, [r7, #10]
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	4603      	mov	r3, r0
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f001 ff64 	bl	8006e38 <I2C_RequestMemoryWrite>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d052      	beq.n	800501c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e081      	b.n	800507e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f002 fbb0 	bl	80076e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00d      	beq.n	8004fa6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d107      	bne.n	8004fa2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06b      	b.n	800507e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	781a      	ldrb	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d11b      	bne.n	800501c <HAL_I2C_Mem_Write+0x180>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d017      	beq.n	800501c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	781a      	ldrb	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1aa      	bne.n	8004f7a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f002 fba3 	bl	8007774 <I2C_WaitOnBTFFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005038:	2b04      	cmp	r3, #4
 800503a:	d107      	bne.n	800504c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800504a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e016      	b.n	800507e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2220      	movs	r2, #32
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	00100002 	.word	0x00100002
 800508c:	ffff0000 	.word	0xffff0000

08005090 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08c      	sub	sp, #48	@ 0x30
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	817b      	strh	r3, [r7, #10]
 80050a2:	460b      	mov	r3, r1
 80050a4:	813b      	strh	r3, [r7, #8]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050ae:	f7fe fbff 	bl	80038b0 <HAL_GetTick>
 80050b2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b20      	cmp	r3, #32
 80050be:	f040 8250 	bne.w	8005562 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	2319      	movs	r3, #25
 80050c8:	2201      	movs	r2, #1
 80050ca:	4982      	ldr	r1, [pc, #520]	@ (80052d4 <HAL_I2C_Mem_Read+0x244>)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f002 f9ef 	bl	80074b0 <I2C_WaitOnFlagUntilTimeout>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80050d8:	2302      	movs	r3, #2
 80050da:	e243      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_I2C_Mem_Read+0x5a>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e23c      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d007      	beq.n	8005110 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800511e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2222      	movs	r2, #34	@ 0x22
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2240      	movs	r2, #64	@ 0x40
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800513a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4a62      	ldr	r2, [pc, #392]	@ (80052d8 <HAL_I2C_Mem_Read+0x248>)
 8005150:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005152:	88f8      	ldrh	r0, [r7, #6]
 8005154:	893a      	ldrh	r2, [r7, #8]
 8005156:	8979      	ldrh	r1, [r7, #10]
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4603      	mov	r3, r0
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f001 fefe 	bl	8006f64 <I2C_RequestMemoryRead>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d001      	beq.n	8005172 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e1f8      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e1cc      	b.n	800553c <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d11e      	bne.n	80051e8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80051ba:	b672      	cpsid	i
}
 80051bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051be:	2300      	movs	r3, #0
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80051e4:	b662      	cpsie	i
}
 80051e6:	e035      	b.n	8005254 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d11e      	bne.n	800522e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005200:	b672      	cpsid	i
}
 8005202:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	617b      	str	r3, [r7, #20]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005228:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800522a:	b662      	cpsie	i
}
 800522c:	e012      	b.n	8005254 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800523c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	613b      	str	r3, [r7, #16]
 8005252:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005254:	e172      	b.n	800553c <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525a:	2b03      	cmp	r3, #3
 800525c:	f200 811f 	bhi.w	800549e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	2b01      	cmp	r3, #1
 8005266:	d123      	bne.n	80052b0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f002 fafb 	bl	8007868 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e173      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052ae:	e145      	b.n	800553c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d152      	bne.n	800535e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	2200      	movs	r2, #0
 80052c0:	4906      	ldr	r1, [pc, #24]	@ (80052dc <HAL_I2C_Mem_Read+0x24c>)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f002 f8f4 	bl	80074b0 <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e148      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
 80052d2:	bf00      	nop
 80052d4:	00100002 	.word	0x00100002
 80052d8:	ffff0000 	.word	0xffff0000
 80052dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80052e0:	b672      	cpsid	i
}
 80052e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531c:	b29b      	uxth	r3, r3
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005326:	b662      	cpsie	i
}
 8005328:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691a      	ldr	r2, [r3, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005352:	b29b      	uxth	r3, r3
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800535c:	e0ee      	b.n	800553c <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800535e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005364:	2200      	movs	r2, #0
 8005366:	4981      	ldr	r1, [pc, #516]	@ (800556c <HAL_I2C_Mem_Read+0x4dc>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f002 f8a1 	bl	80074b0 <I2C_WaitOnFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0f5      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005388:	b672      	cpsid	i
}
 800538a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a8:	3b01      	subs	r3, #1
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b01      	subs	r3, #1
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80053be:	4b6c      	ldr	r3, [pc, #432]	@ (8005570 <HAL_I2C_Mem_Read+0x4e0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	08db      	lsrs	r3, r3, #3
 80053c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005574 <HAL_I2C_Mem_Read+0x4e4>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	0a1a      	lsrs	r2, r3, #8
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	00da      	lsls	r2, r3, #3
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	3b01      	subs	r3, #1
 80053dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d118      	bne.n	8005416 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005406:	b662      	cpsie	i
}
 8005408:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e0a6      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d1d9      	bne.n	80053d8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	b2d2      	uxtb	r2, r2
 8005440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545c:	b29b      	uxth	r3, r3
 800545e:	3b01      	subs	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005466:	b662      	cpsie	i
}
 8005468:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691a      	ldr	r2, [r3, #16]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800549c:	e04e      	b.n	800553c <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f002 f9e0 	bl	8007868 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e058      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ce:	3b01      	subs	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d124      	bne.n	800553c <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d107      	bne.n	800550a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005508:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f ae88 	bne.w	8005256 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	e000      	b.n	8005564 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8005562:	2302      	movs	r3, #2
  }
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	@ 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	00010004 	.word	0x00010004
 8005570:	20000000 	.word	0x20000000
 8005574:	14f8b589 	.word	0x14f8b589

08005578 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	@ 0x30
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	4608      	mov	r0, r1
 8005582:	4611      	mov	r1, r2
 8005584:	461a      	mov	r2, r3
 8005586:	4603      	mov	r3, r0
 8005588:	817b      	strh	r3, [r7, #10]
 800558a:	460b      	mov	r3, r1
 800558c:	813b      	strh	r3, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005592:	f7fe f98d 	bl	80038b0 <HAL_GetTick>
 8005596:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b20      	cmp	r3, #32
 80055a6:	f040 8168 	bne.w	800587a <HAL_I2C_Mem_Read_DMA+0x302>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80055aa:	4b98      	ldr	r3, [pc, #608]	@ (800580c <HAL_I2C_Mem_Read_DMA+0x294>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	08db      	lsrs	r3, r3, #3
 80055b0:	4a97      	ldr	r2, [pc, #604]	@ (8005810 <HAL_I2C_Mem_Read_DMA+0x298>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	0a1a      	lsrs	r2, r3, #8
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009a      	lsls	r2, r3, #2
 80055c0:	4413      	add	r3, r2
 80055c2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d112      	bne.n	80055f6 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80055f2:	2302      	movs	r3, #2
 80055f4:	e142      	b.n	800587c <HAL_I2C_Mem_Read_DMA+0x304>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b02      	cmp	r3, #2
 8005602:	d0df      	beq.n	80055c4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_I2C_Mem_Read_DMA+0x9a>
 800560e:	2302      	movs	r3, #2
 8005610:	e134      	b.n	800587c <HAL_I2C_Mem_Read_DMA+0x304>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	2b01      	cmp	r3, #1
 8005626:	d007      	beq.n	8005638 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005646:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2222      	movs	r2, #34	@ 0x22
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2240      	movs	r2, #64	@ 0x40
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005668:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4a67      	ldr	r2, [pc, #412]	@ (8005814 <HAL_I2C_Mem_Read_DMA+0x29c>)
 8005678:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800567a:	897a      	ldrh	r2, [r7, #10]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005680:	893a      	ldrh	r2, [r7, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80c2 	beq.w	8005820 <HAL_I2C_Mem_Read_DMA+0x2a8>
    {
      if (hi2c->hdmarx != NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d024      	beq.n	80056ee <HAL_I2C_Mem_Read_DMA+0x176>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	4a5b      	ldr	r2, [pc, #364]	@ (8005818 <HAL_I2C_Mem_Read_DMA+0x2a0>)
 80056aa:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	4a5a      	ldr	r2, [pc, #360]	@ (800581c <HAL_I2C_Mem_Read_DMA+0x2a4>)
 80056b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	2200      	movs	r2, #0
 80056ba:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmarx->XferAbortCallback = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	2200      	movs	r2, #0
 80056c2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3310      	adds	r3, #16
 80056ce:	4619      	mov	r1, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d4:	461a      	mov	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056da:	f7fe fe7d 	bl	80043d8 <HAL_DMA_Start_IT>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80056e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d17b      	bne.n	80057e4 <HAL_I2C_Mem_Read_DMA+0x26c>
 80056ec:	e013      	b.n	8005716 <HAL_I2C_Mem_Read_DMA+0x19e>
        hi2c->State     = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e0b2      	b.n	800587c <HAL_I2C_Mem_Read_DMA+0x304>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005716:	88f8      	ldrh	r0, [r7, #6]
 8005718:	893a      	ldrh	r2, [r7, #8]
 800571a:	8979      	ldrh	r1, [r7, #10]
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	2323      	movs	r3, #35	@ 0x23
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	4603      	mov	r3, r0
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f001 fc1c 	bl	8006f64 <I2C_RequestMemoryRead>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d023      	beq.n	800577a <HAL_I2C_Mem_Read_DMA+0x202>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe feea 	bl	8004510 <HAL_DMA_Abort_IT>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	2200      	movs	r2, #0
 8005748:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005758:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0201 	bic.w	r2, r2, #1
 8005774:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e080      	b.n	800587c <HAL_I2C_Mem_Read_DMA+0x304>
        }

        if (hi2c->XferSize == 1U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	2b01      	cmp	r3, #1
 8005780:	d108      	bne.n	8005794 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e007      	b.n	80057a4 <HAL_I2C_Mem_Read_DMA+0x22c>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80057a2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	61bb      	str	r3, [r7, #24]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057d0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	e048      	b.n	8005876 <HAL_I2C_Mem_Read_DMA+0x2fe>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	f043 0210 	orr.w	r2, r3, #16
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e037      	b.n	800587c <HAL_I2C_Mem_Read_DMA+0x304>
 800580c:	20000000 	.word	0x20000000
 8005810:	14f8b589 	.word	0x14f8b589
 8005814:	ffff0000 	.word	0xffff0000
 8005818:	08007135 	.word	0x08007135
 800581c:	080072f3 	.word	0x080072f3
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005820:	88f8      	ldrh	r0, [r7, #6]
 8005822:	893a      	ldrh	r2, [r7, #8]
 8005824:	8979      	ldrh	r1, [r7, #10]
 8005826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005828:	9301      	str	r3, [sp, #4]
 800582a:	2323      	movs	r3, #35	@ 0x23
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	4603      	mov	r3, r0
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f001 fb97 	bl	8006f64 <I2C_RequestMemoryRead>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d001      	beq.n	8005840 <HAL_I2C_Mem_Read_DMA+0x2c8>
      {
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e01d      	b.n	800587c <HAL_I2C_Mem_Read_DMA+0x304>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005864:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	e000      	b.n	800587c <HAL_I2C_Mem_Read_DMA+0x304>
  }
  else
  {
    return HAL_BUSY;
 800587a:	2302      	movs	r3, #2
  }
}
 800587c:	4618      	mov	r0, r3
 800587e:	3728      	adds	r7, #40	@ 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d003      	beq.n	80058bc <HAL_I2C_EV_IRQHandler+0x38>
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b40      	cmp	r3, #64	@ 0x40
 80058b8:	f040 80c1 	bne.w	8005a3e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10d      	bne.n	80058f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80058dc:	d003      	beq.n	80058e6 <HAL_I2C_EV_IRQHandler+0x62>
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80058e4:	d101      	bne.n	80058ea <HAL_I2C_EV_IRQHandler+0x66>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <HAL_I2C_EV_IRQHandler+0x68>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	f000 8132 	beq.w	8005b56 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00c      	beq.n	8005916 <HAL_I2C_EV_IRQHandler+0x92>
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	0a5b      	lsrs	r3, r3, #9
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f002 f838 	bl	800797e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fce1 	bl	80062d6 <I2C_Master_SB>
 8005914:	e092      	b.n	8005a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	08db      	lsrs	r3, r3, #3
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0xb2>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	0a5b      	lsrs	r3, r3, #9
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fd56 	bl	80063e0 <I2C_Master_ADD10>
 8005934:	e082      	b.n	8005a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	085b      	lsrs	r3, r3, #1
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_I2C_EV_IRQHandler+0xd2>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	0a5b      	lsrs	r3, r3, #9
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fd6f 	bl	8006432 <I2C_Master_ADDR>
 8005954:	e072      	b.n	8005a3c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	089b      	lsrs	r3, r3, #2
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d03b      	beq.n	80059da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800596c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005970:	f000 80f3 	beq.w	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	09db      	lsrs	r3, r3, #7
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00f      	beq.n	80059a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	0a9b      	lsrs	r3, r3, #10
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d009      	beq.n	80059a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	089b      	lsrs	r3, r3, #2
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d103      	bne.n	80059a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f939 	bl	8005c10 <I2C_MasterTransmit_TXE>
 800599e:	e04d      	b.n	8005a3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 80d6 	beq.w	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	0a5b      	lsrs	r3, r3, #9
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80cf 	beq.w	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	2b21      	cmp	r3, #33	@ 0x21
 80059c0:	d103      	bne.n	80059ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f9c0 	bl	8005d48 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059c8:	e0c7      	b.n	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b40      	cmp	r3, #64	@ 0x40
 80059ce:	f040 80c4 	bne.w	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fa2e 	bl	8005e34 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059d8:	e0bf      	b.n	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059e8:	f000 80b7 	beq.w	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00f      	beq.n	8005a18 <HAL_I2C_EV_IRQHandler+0x194>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	0a9b      	lsrs	r3, r3, #10
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d009      	beq.n	8005a18 <HAL_I2C_EV_IRQHandler+0x194>
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	089b      	lsrs	r3, r3, #2
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d103      	bne.n	8005a18 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 faa7 	bl	8005f64 <I2C_MasterReceive_RXNE>
 8005a16:	e011      	b.n	8005a3c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	089b      	lsrs	r3, r3, #2
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 809a 	beq.w	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	0a5b      	lsrs	r3, r3, #9
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8093 	beq.w	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fb5d 	bl	80060f4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a3a:	e08e      	b.n	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a3c:	e08d      	b.n	8005b5a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d004      	beq.n	8005a50 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	61fb      	str	r3, [r7, #28]
 8005a4e:	e007      	b.n	8005a60 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d012      	beq.n	8005a92 <HAL_I2C_EV_IRQHandler+0x20e>
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	0a5b      	lsrs	r3, r3, #9
 8005a70:	f003 0301 	and.w	r3, r3, #1
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a88:	69b9      	ldr	r1, [r7, #24]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 ff28 	bl	80068e0 <I2C_Slave_ADDR>
 8005a90:	e066      	b.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	091b      	lsrs	r3, r3, #4
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_I2C_EV_IRQHandler+0x22e>
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	0a5b      	lsrs	r3, r3, #9
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d003      	beq.n	8005ab2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 ff62 	bl	8006974 <I2C_Slave_STOPF>
 8005ab0:	e056      	b.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	2b21      	cmp	r3, #33	@ 0x21
 8005ab6:	d002      	beq.n	8005abe <HAL_I2C_EV_IRQHandler+0x23a>
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2b29      	cmp	r3, #41	@ 0x29
 8005abc:	d125      	bne.n	8005b0a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	09db      	lsrs	r3, r3, #7
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00f      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0x266>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	0a9b      	lsrs	r3, r3, #10
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0x266>
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	089b      	lsrs	r3, r3, #2
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d103      	bne.n	8005aea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fe40 	bl	8006768 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005ae8:	e039      	b.n	8005b5e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	089b      	lsrs	r3, r3, #2
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d033      	beq.n	8005b5e <HAL_I2C_EV_IRQHandler+0x2da>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	0a5b      	lsrs	r3, r3, #9
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d02d      	beq.n	8005b5e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fe6d 	bl	80067e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b08:	e029      	b.n	8005b5e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	099b      	lsrs	r3, r3, #6
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00f      	beq.n	8005b36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	0a9b      	lsrs	r3, r3, #10
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d009      	beq.n	8005b36 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	089b      	lsrs	r3, r3, #2
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d103      	bne.n	8005b36 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fe77 	bl	8006822 <I2C_SlaveReceive_RXNE>
 8005b34:	e014      	b.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	089b      	lsrs	r3, r3, #2
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00e      	beq.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d008      	beq.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fea5 	bl	800689e <I2C_SlaveReceive_BTF>
 8005b54:	e004      	b.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005b56:	bf00      	nop
 8005b58:	e002      	b.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b5a:	bf00      	nop
 8005b5c:	e000      	b.n	8005b60 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b5e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr

08005b78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr

08005bec <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c1e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c26:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d150      	bne.n	8005cd8 <I2C_MasterTransmit_TXE+0xc8>
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b21      	cmp	r3, #33	@ 0x21
 8005c3a:	d14d      	bne.n	8005cd8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d01d      	beq.n	8005c7e <I2C_MasterTransmit_TXE+0x6e>
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d01a      	beq.n	8005c7e <I2C_MasterTransmit_TXE+0x6e>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c4e:	d016      	beq.n	8005c7e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c5e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2211      	movs	r2, #17
 8005c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff ff75 	bl	8005b66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c7c:	e060      	b.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c8c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c9c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2220      	movs	r2, #32
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b40      	cmp	r3, #64	@ 0x40
 8005cb6:	d107      	bne.n	8005cc8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff ff8a 	bl	8005bda <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cc6:	e03b      	b.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff ff48 	bl	8005b66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cd6:	e033      	b.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b21      	cmp	r3, #33	@ 0x21
 8005cdc:	d005      	beq.n	8005cea <I2C_MasterTransmit_TXE+0xda>
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	2b40      	cmp	r3, #64	@ 0x40
 8005ce2:	d12d      	bne.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b22      	cmp	r3, #34	@ 0x22
 8005ce8:	d12a      	bne.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d108      	bne.n	8005d06 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d02:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d04:	e01c      	b.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b40      	cmp	r3, #64	@ 0x40
 8005d10:	d103      	bne.n	8005d1a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f88e 	bl	8005e34 <I2C_MemoryTransmit_TXE_BTF>
}
 8005d18:	e012      	b.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1e:	781a      	ldrb	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	1c5a      	adds	r2, r3, #1
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	3b01      	subs	r3, #1
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005d3e:	e7ff      	b.n	8005d40 <I2C_MasterTransmit_TXE+0x130>
 8005d40:	bf00      	nop
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b21      	cmp	r3, #33	@ 0x21
 8005d60:	d164      	bne.n	8005e2c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d012      	beq.n	8005d92 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005d90:	e04c      	b.n	8005e2c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d01d      	beq.n	8005dd4 <I2C_MasterTransmit_BTF+0x8c>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d01a      	beq.n	8005dd4 <I2C_MasterTransmit_BTF+0x8c>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005da4:	d016      	beq.n	8005dd4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005db4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2211      	movs	r2, #17
 8005dba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff feca 	bl	8005b66 <HAL_I2C_MasterTxCpltCallback>
}
 8005dd2:	e02b      	b.n	8005e2c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005de2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005df2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b40      	cmp	r3, #64	@ 0x40
 8005e0c:	d107      	bne.n	8005e1e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fedf 	bl	8005bda <HAL_I2C_MemTxCpltCallback>
}
 8005e1c:	e006      	b.n	8005e2c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7ff fe9d 	bl	8005b66 <HAL_I2C_MasterTxCpltCallback>
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d11d      	bne.n	8005e88 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10b      	bne.n	8005e6c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005e6a:	e077      	b.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	121b      	asrs	r3, r3, #8
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e86:	e069      	b.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10b      	bne.n	8005ea8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ea6:	e059      	b.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d152      	bne.n	8005f56 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
 8005eb2:	2b22      	cmp	r3, #34	@ 0x22
 8005eb4:	d10d      	bne.n	8005ed2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ec4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ed0:	e044      	b.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d015      	beq.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	2b21      	cmp	r3, #33	@ 0x21
 8005ee0:	d112      	bne.n	8005f08 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee6:	781a      	ldrb	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3b01      	subs	r3, #1
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f06:	e029      	b.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d124      	bne.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b21      	cmp	r3, #33	@ 0x21
 8005f16:	d121      	bne.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fe43 	bl	8005bda <HAL_I2C_MemTxCpltCallback>
}
 8005f54:	e002      	b.n	8005f5c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fe ff8c 	bl	8004e74 <I2C_Flush_DR>
}
 8005f5c:	bf00      	nop
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b22      	cmp	r3, #34	@ 0x22
 8005f76:	f040 80b9 	bne.w	80060ec <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d921      	bls.n	8005fd2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	f040 8096 	bne.w	80060ec <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fce:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005fd0:	e08c      	b.n	80060ec <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d07f      	beq.n	80060da <I2C_MasterReceive_RXNE+0x176>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d002      	beq.n	8005fe6 <I2C_MasterReceive_RXNE+0x82>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d179      	bne.n	80060da <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 fc0c 	bl	8007804 <I2C_WaitOnSTOPRequestThroughIT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d14c      	bne.n	800608c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006000:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006010:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d10a      	bne.n	8006062 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fb fcca 	bl	80019f4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006060:	e044      	b.n	80060ec <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b08      	cmp	r3, #8
 800606e:	d002      	beq.n	8006076 <I2C_MasterReceive_RXNE+0x112>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b20      	cmp	r3, #32
 8006074:	d103      	bne.n	800607e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30
 800607c:	e002      	b.n	8006084 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2212      	movs	r2, #18
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff fd77 	bl	8005b78 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800608a:	e02f      	b.n	80060ec <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800609a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fd8a 	bl	8005bec <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060d8:	e008      	b.n	80060ec <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e8:	605a      	str	r2, [r3, #4]
}
 80060ea:	e7ff      	b.n	80060ec <I2C_MasterReceive_RXNE+0x188>
 80060ec:	bf00      	nop
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b04      	cmp	r3, #4
 800610a:	d11b      	bne.n	8006144 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800611a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691a      	ldr	r2, [r3, #16]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006142:	e0c4      	b.n	80062ce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b03      	cmp	r3, #3
 800614c:	d129      	bne.n	80061a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d00a      	beq.n	800617a <I2C_MasterReceive_BTF+0x86>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d007      	beq.n	800617a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006178:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	b2d2      	uxtb	r2, r2
 8006186:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	b29a      	uxth	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80061a0:	e095      	b.n	80062ce <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d17d      	bne.n	80062a8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d002      	beq.n	80061b8 <I2C_MasterReceive_BTF+0xc4>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d108      	bne.n	80061ca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e016      	b.n	80061f8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d002      	beq.n	80061d6 <I2C_MasterReceive_BTF+0xe2>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d108      	bne.n	80061e8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061e4:	601a      	str	r2, [r3, #0]
 80061e6:	e007      	b.n	80061f8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061f6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006252:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2220      	movs	r2, #32
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b40      	cmp	r3, #64	@ 0x40
 8006266:	d10a      	bne.n	800627e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fb fbbc 	bl	80019f4 <HAL_I2C_MemRxCpltCallback>
}
 800627c:	e027      	b.n	80062ce <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2b08      	cmp	r3, #8
 800628a:	d002      	beq.n	8006292 <I2C_MasterReceive_BTF+0x19e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b20      	cmp	r3, #32
 8006290:	d103      	bne.n	800629a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	631a      	str	r2, [r3, #48]	@ 0x30
 8006298:	e002      	b.n	80062a0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2212      	movs	r2, #18
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fc69 	bl	8005b78 <HAL_I2C_MasterRxCpltCallback>
}
 80062a6:	e012      	b.n	80062ce <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b40      	cmp	r3, #64	@ 0x40
 80062e8:	d117      	bne.n	800631a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006302:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006304:	e067      	b.n	80063d6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f043 0301 	orr.w	r3, r3, #1
 8006310:	b2da      	uxtb	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	611a      	str	r2, [r3, #16]
}
 8006318:	e05d      	b.n	80063d6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006322:	d133      	bne.n	800638c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b21      	cmp	r3, #33	@ 0x21
 800632e:	d109      	bne.n	8006344 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006340:	611a      	str	r2, [r3, #16]
 8006342:	e008      	b.n	8006356 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	b2da      	uxtb	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800635a:	2b00      	cmp	r3, #0
 800635c:	d004      	beq.n	8006368 <I2C_Master_SB+0x92>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d032      	beq.n	80063d6 <I2C_Master_SB+0x100>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	2b00      	cmp	r3, #0
 8006378:	d02d      	beq.n	80063d6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006388:	605a      	str	r2, [r3, #4]
}
 800638a:	e024      	b.n	80063d6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10e      	bne.n	80063b2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006398:	b29b      	uxth	r3, r3
 800639a:	11db      	asrs	r3, r3, #7
 800639c:	b2db      	uxtb	r3, r3
 800639e:	f003 0306 	and.w	r3, r3, #6
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	f063 030f 	orn	r3, r3, #15
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	611a      	str	r2, [r3, #16]
}
 80063b0:	e011      	b.n	80063d6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d10d      	bne.n	80063d6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063be:	b29b      	uxth	r3, r3
 80063c0:	11db      	asrs	r3, r3, #7
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 0306 	and.w	r3, r3, #6
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f063 030e 	orn	r3, r3, #14
 80063ce:	b2da      	uxtb	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	611a      	str	r2, [r3, #16]
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr

080063e0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d004      	beq.n	8006406 <I2C_Master_ADD10+0x26>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	d108      	bne.n	8006418 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <I2C_Master_ADD10+0x48>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006426:	605a      	str	r2, [r3, #4]
  }
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr

08006432 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006432:	b480      	push	{r7}
 8006434:	b091      	sub	sp, #68	@ 0x44
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006440:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006448:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800644e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b22      	cmp	r3, #34	@ 0x22
 800645a:	f040 8174 	bne.w	8006746 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10f      	bne.n	8006486 <I2C_Master_ADDR+0x54>
 8006466:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800646a:	2b40      	cmp	r3, #64	@ 0x40
 800646c:	d10b      	bne.n	8006486 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800646e:	2300      	movs	r3, #0
 8006470:	633b      	str	r3, [r7, #48]	@ 0x30
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	633b      	str	r3, [r7, #48]	@ 0x30
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	633b      	str	r3, [r7, #48]	@ 0x30
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	e16b      	b.n	800675e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648a:	2b00      	cmp	r3, #0
 800648c:	d11d      	bne.n	80064ca <I2C_Master_ADDR+0x98>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006496:	d118      	bne.n	80064ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006498:	2300      	movs	r3, #0
 800649a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80064c8:	e149      	b.n	800675e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d113      	bne.n	80064fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d4:	2300      	movs	r3, #0
 80064d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	e120      	b.n	800673e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b01      	cmp	r3, #1
 8006504:	f040 808a 	bne.w	800661c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800650e:	d137      	bne.n	8006580 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800651e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800652a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800652e:	d113      	bne.n	8006558 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800653e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006540:	2300      	movs	r3, #0
 8006542:	627b      	str	r3, [r7, #36]	@ 0x24
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	627b      	str	r3, [r7, #36]	@ 0x24
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	627b      	str	r3, [r7, #36]	@ 0x24
 8006554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006556:	e0f2      	b.n	800673e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006558:	2300      	movs	r3, #0
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	623b      	str	r3, [r7, #32]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	623b      	str	r3, [r7, #32]
 800656c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e0de      	b.n	800673e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006582:	2b08      	cmp	r3, #8
 8006584:	d02e      	beq.n	80065e4 <I2C_Master_ADDR+0x1b2>
 8006586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006588:	2b20      	cmp	r3, #32
 800658a:	d02b      	beq.n	80065e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800658c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658e:	2b12      	cmp	r3, #18
 8006590:	d102      	bne.n	8006598 <I2C_Master_ADDR+0x166>
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	2b01      	cmp	r3, #1
 8006596:	d125      	bne.n	80065e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800659a:	2b04      	cmp	r3, #4
 800659c:	d00e      	beq.n	80065bc <I2C_Master_ADDR+0x18a>
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d00b      	beq.n	80065bc <I2C_Master_ADDR+0x18a>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a6:	2b10      	cmp	r3, #16
 80065a8:	d008      	beq.n	80065bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065b8:	601a      	str	r2, [r3, #0]
 80065ba:	e007      	b.n	80065cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065cc:	2300      	movs	r3, #0
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	e0ac      	b.n	800673e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f4:	2300      	movs	r3, #0
 80065f6:	61bb      	str	r3, [r7, #24]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	61bb      	str	r3, [r7, #24]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	61bb      	str	r3, [r7, #24]
 8006608:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	e090      	b.n	800673e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b02      	cmp	r3, #2
 8006624:	d158      	bne.n	80066d8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	2b04      	cmp	r3, #4
 800662a:	d021      	beq.n	8006670 <I2C_Master_ADDR+0x23e>
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	2b02      	cmp	r3, #2
 8006630:	d01e      	beq.n	8006670 <I2C_Master_ADDR+0x23e>
 8006632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006634:	2b10      	cmp	r3, #16
 8006636:	d01b      	beq.n	8006670 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006646:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e012      	b.n	8006696 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800667e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a4:	d14b      	bne.n	800673e <I2C_Master_ADDR+0x30c>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066ac:	d00b      	beq.n	80066c6 <I2C_Master_ADDR+0x294>
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d008      	beq.n	80066c6 <I2C_Master_ADDR+0x294>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b6:	2b08      	cmp	r3, #8
 80066b8:	d005      	beq.n	80066c6 <I2C_Master_ADDR+0x294>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d002      	beq.n	80066c6 <I2C_Master_ADDR+0x294>
 80066c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c2:	2b20      	cmp	r3, #32
 80066c4:	d13b      	bne.n	800673e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e032      	b.n	800673e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066e6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066f6:	d117      	bne.n	8006728 <I2C_Master_ADDR+0x2f6>
 80066f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066fe:	d00b      	beq.n	8006718 <I2C_Master_ADDR+0x2e6>
 8006700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006702:	2b01      	cmp	r3, #1
 8006704:	d008      	beq.n	8006718 <I2C_Master_ADDR+0x2e6>
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	2b08      	cmp	r3, #8
 800670a:	d005      	beq.n	8006718 <I2C_Master_ADDR+0x2e6>
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	2b10      	cmp	r3, #16
 8006710:	d002      	beq.n	8006718 <I2C_Master_ADDR+0x2e6>
 8006712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006714:	2b20      	cmp	r3, #32
 8006716:	d107      	bne.n	8006728 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006726:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006744:	e00b      	b.n	800675e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	68bb      	ldr	r3, [r7, #8]
}
 800675c:	e7ff      	b.n	800675e <I2C_Master_ADDR+0x32c>
 800675e:	bf00      	nop
 8006760:	3744      	adds	r7, #68	@ 0x44
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006776:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d02b      	beq.n	80067da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d114      	bne.n	80067da <I2C_SlaveTransmit_TXE+0x72>
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
 80067b2:	2b29      	cmp	r3, #41	@ 0x29
 80067b4:	d111      	bne.n	80067da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2221      	movs	r2, #33	@ 0x21
 80067ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2228      	movs	r2, #40	@ 0x28
 80067d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff f9d8 	bl	8005b8a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80067e2:	b480      	push	{r7}
 80067e4:	b083      	sub	sp, #12
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d011      	beq.n	8006818 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800680e:	b29b      	uxth	r3, r3
 8006810:	3b01      	subs	r3, #1
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	bc80      	pop	{r7}
 8006820:	4770      	bx	lr

08006822 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006830:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02c      	beq.n	8006896 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d114      	bne.n	8006896 <I2C_SlaveReceive_RXNE+0x74>
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006870:	d111      	bne.n	8006896 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006880:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2222      	movs	r2, #34	@ 0x22
 8006886:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2228      	movs	r2, #40	@ 0x28
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff f983 	bl	8005b9c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d012      	beq.n	80068d6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	3b01      	subs	r3, #1
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr

080068e0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068fa:	2b28      	cmp	r3, #40	@ 0x28
 80068fc:	d127      	bne.n	800694e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800690c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	089b      	lsrs	r3, r3, #2
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800691a:	2301      	movs	r3, #1
 800691c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	09db      	lsrs	r3, r3, #7
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d103      	bne.n	8006932 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	81bb      	strh	r3, [r7, #12]
 8006930:	e002      	b.n	8006938 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006940:	89ba      	ldrh	r2, [r7, #12]
 8006942:	7bfb      	ldrb	r3, [r7, #15]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff f931 	bl	8005bae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800694c:	e00e      	b.n	800696c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	695b      	ldr	r3, [r3, #20]
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	60bb      	str	r3, [r7, #8]
 8006962:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006982:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006992:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006994:	2300      	movs	r3, #0
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d0:	d172      	bne.n	8006ab8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
 80069d4:	2b22      	cmp	r3, #34	@ 0x22
 80069d6:	d002      	beq.n	80069de <I2C_Slave_STOPF+0x6a>
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b2a      	cmp	r3, #42	@ 0x2a
 80069dc:	d135      	bne.n	8006a4a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fa:	f043 0204 	orr.w	r2, r3, #4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a10:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fd fef8 	bl	800480c <HAL_DMA_GetState>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d049      	beq.n	8006ab6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	4a69      	ldr	r2, [pc, #420]	@ (8006bcc <I2C_Slave_STOPF+0x258>)
 8006a28:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fd fd6e 	bl	8004510 <HAL_DMA_Abort_IT>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03d      	beq.n	8006ab6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a48:	e035      	b.n	8006ab6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	f043 0204 	orr.w	r2, r3, #4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fd fec2 	bl	800480c <HAL_DMA_GetState>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d014      	beq.n	8006ab8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a92:	4a4e      	ldr	r2, [pc, #312]	@ (8006bcc <I2C_Slave_STOPF+0x258>)
 8006a94:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fd fd38 	bl	8004510 <HAL_DMA_Abort_IT>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4798      	blx	r3
 8006ab4:	e000      	b.n	8006ab8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ab6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d03e      	beq.n	8006b40 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	d112      	bne.n	8006af6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	691a      	ldr	r2, [r3, #16]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ada:	b2d2      	uxtb	r2, r2
 8006adc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae2:	1c5a      	adds	r2, r3, #1
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	3b01      	subs	r3, #1
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b00:	2b40      	cmp	r3, #64	@ 0x40
 8006b02:	d112      	bne.n	8006b2a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	3b01      	subs	r3, #1
 8006b24:	b29a      	uxth	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b38:	f043 0204 	orr.w	r2, r3, #4
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f843 	bl	8006bd4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006b4e:	e039      	b.n	8006bc4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b54:	d109      	bne.n	8006b6a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2228      	movs	r2, #40	@ 0x28
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff f819 	bl	8005b9c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b28      	cmp	r3, #40	@ 0x28
 8006b74:	d111      	bne.n	8006b9a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a15      	ldr	r2, [pc, #84]	@ (8006bd0 <I2C_Slave_STOPF+0x25c>)
 8006b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff f818 	bl	8005bc8 <HAL_I2C_ListenCpltCallback>
}
 8006b98:	e014      	b.n	8006bc4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9e:	2b22      	cmp	r3, #34	@ 0x22
 8006ba0:	d002      	beq.n	8006ba8 <I2C_Slave_STOPF+0x234>
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b22      	cmp	r3, #34	@ 0x22
 8006ba6:	d10d      	bne.n	8006bc4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fe ffec 	bl	8005b9c <HAL_I2C_SlaveRxCpltCallback>
}
 8006bc4:	bf00      	nop
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	08007361 	.word	0x08007361
 8006bd0:	ffff0000 	.word	0xffff0000

08006bd4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bea:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b10      	cmp	r3, #16
 8006bf0:	d002      	beq.n	8006bf8 <I2C_ITError+0x24>
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	d10a      	bne.n	8006c0e <I2C_ITError+0x3a>
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	2b22      	cmp	r3, #34	@ 0x22
 8006bfc:	d107      	bne.n	8006c0e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c0c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c14:	2b28      	cmp	r3, #40	@ 0x28
 8006c16:	d107      	bne.n	8006c28 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2228      	movs	r2, #40	@ 0x28
 8006c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c26:	e015      	b.n	8006c54 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c36:	d00a      	beq.n	8006c4e <I2C_ITError+0x7a>
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b60      	cmp	r3, #96	@ 0x60
 8006c3c:	d007      	beq.n	8006c4e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c62:	d162      	bne.n	8006d2a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c72:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c78:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d020      	beq.n	8006cc4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c86:	4a6a      	ldr	r2, [pc, #424]	@ (8006e30 <I2C_ITError+0x25c>)
 8006c88:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd fc3e 	bl	8004510 <HAL_DMA_Abort_IT>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8089 	beq.w	8006dae <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0201 	bic.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4798      	blx	r3
 8006cc2:	e074      	b.n	8006dae <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc8:	4a59      	ldr	r2, [pc, #356]	@ (8006e30 <I2C_ITError+0x25c>)
 8006cca:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fd fc1d 	bl	8004510 <HAL_DMA_Abort_IT>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d068      	beq.n	8006dae <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce6:	2b40      	cmp	r3, #64	@ 0x40
 8006ce8:	d10b      	bne.n	8006d02 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	691a      	ldr	r2, [r3, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
 8006d28:	e041      	b.n	8006dae <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b60      	cmp	r3, #96	@ 0x60
 8006d34:	d125      	bne.n	8006d82 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2220      	movs	r2, #32
 8006d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4e:	2b40      	cmp	r3, #64	@ 0x40
 8006d50:	d10b      	bne.n	8006d6a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 0201 	bic.w	r2, r2, #1
 8006d78:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7fe ff3f 	bl	8005bfe <HAL_I2C_AbortCpltCallback>
 8006d80:	e015      	b.n	8006dae <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8c:	2b40      	cmp	r3, #64	@ 0x40
 8006d8e:	d10b      	bne.n	8006da8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fe ff1f 	bl	8005bec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10e      	bne.n	8006ddc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006dea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006df2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d113      	bne.n	8006e28 <I2C_ITError+0x254>
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b28      	cmp	r3, #40	@ 0x28
 8006e04:	d110      	bne.n	8006e28 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a0a      	ldr	r2, [pc, #40]	@ (8006e34 <I2C_ITError+0x260>)
 8006e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2220      	movs	r2, #32
 8006e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fe fed0 	bl	8005bc8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	08007361 	.word	0x08007361
 8006e34:	ffff0000 	.word	0xffff0000

08006e38 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b088      	sub	sp, #32
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4603      	mov	r3, r0
 8006e48:	817b      	strh	r3, [r7, #10]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	813b      	strh	r3, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fb1e 	bl	80074b0 <I2C_WaitOnFlagUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d00d      	beq.n	8006e96 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e88:	d103      	bne.n	8006e92 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e05f      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006e96:	897b      	ldrh	r3, [r7, #10]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ea4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	6a3a      	ldr	r2, [r7, #32]
 8006eaa:	492d      	ldr	r1, [pc, #180]	@ (8006f60 <I2C_RequestMemoryWrite+0x128>)
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fb79 	bl	80075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d001      	beq.n	8006ebc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e04c      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ed4:	6a39      	ldr	r1, [r7, #32]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 fc04 	bl	80076e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d107      	bne.n	8006efa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ef8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e02b      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d105      	bne.n	8006f10 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f04:	893b      	ldrh	r3, [r7, #8]
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	611a      	str	r2, [r3, #16]
 8006f0e:	e021      	b.n	8006f54 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f10:	893b      	ldrh	r3, [r7, #8]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f20:	6a39      	ldr	r1, [r7, #32]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 fbde 	bl	80076e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00d      	beq.n	8006f4a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	2b04      	cmp	r3, #4
 8006f34:	d107      	bne.n	8006f46 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f44:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e005      	b.n	8006f56 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f4a:	893b      	ldrh	r3, [r7, #8]
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	00010002 	.word	0x00010002

08006f64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af02      	add	r7, sp, #8
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	461a      	mov	r2, r3
 8006f72:	4603      	mov	r3, r0
 8006f74:	817b      	strh	r3, [r7, #10]
 8006f76:	460b      	mov	r3, r1
 8006f78:	813b      	strh	r3, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fa80 	bl	80074b0 <I2C_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00d      	beq.n	8006fd2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fc4:	d103      	bne.n	8006fce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e0aa      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fd2:	897b      	ldrh	r3, [r7, #10]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006fe0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	4952      	ldr	r1, [pc, #328]	@ (8007130 <I2C_RequestMemoryRead+0x1cc>)
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fadb 	bl	80075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e097      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800700e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007010:	6a39      	ldr	r1, [r7, #32]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 fb66 	bl	80076e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00d      	beq.n	800703a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	2b04      	cmp	r3, #4
 8007024:	d107      	bne.n	8007036 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007034:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e076      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d105      	bne.n	800704c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007040:	893b      	ldrh	r3, [r7, #8]
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	611a      	str	r2, [r3, #16]
 800704a:	e021      	b.n	8007090 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800704c:	893b      	ldrh	r3, [r7, #8]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b29b      	uxth	r3, r3
 8007052:	b2da      	uxtb	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800705a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800705c:	6a39      	ldr	r1, [r7, #32]
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 fb40 	bl	80076e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d00d      	beq.n	8007086 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706e:	2b04      	cmp	r3, #4
 8007070:	d107      	bne.n	8007082 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007080:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e050      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007086:	893b      	ldrh	r3, [r7, #8]
 8007088:	b2da      	uxtb	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007092:	6a39      	ldr	r1, [r7, #32]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fb25 	bl	80076e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d107      	bne.n	80070b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e035      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 f9e9 	bl	80074b0 <I2C_WaitOnFlagUntilTimeout>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00d      	beq.n	8007100 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f2:	d103      	bne.n	80070fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070fa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e013      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007100:	897b      	ldrh	r3, [r7, #10]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f043 0301 	orr.w	r3, r3, #1
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	6a3a      	ldr	r2, [r7, #32]
 8007114:	4906      	ldr	r1, [pc, #24]	@ (8007130 <I2C_RequestMemoryRead+0x1cc>)
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fa44 	bl	80075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e000      	b.n	8007128 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007126:	2300      	movs	r3, #0
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	00010002 	.word	0x00010002

08007134 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007148:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007150:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007156:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007166:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007174:	2200      	movs	r2, #0
 8007176:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d003      	beq.n	8007188 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	2200      	movs	r2, #0
 8007186:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8007188:	7cfb      	ldrb	r3, [r7, #19]
 800718a:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800718e:	2b21      	cmp	r3, #33	@ 0x21
 8007190:	d007      	beq.n	80071a2 <I2C_DMAXferCplt+0x6e>
 8007192:	7cfb      	ldrb	r3, [r7, #19]
 8007194:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8007198:	2b22      	cmp	r3, #34	@ 0x22
 800719a:	d131      	bne.n	8007200 <I2C_DMAXferCplt+0xcc>
 800719c:	7cbb      	ldrb	r3, [r7, #18]
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d12e      	bne.n	8007200 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071b0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2200      	movs	r2, #0
 80071b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071b8:	7cfb      	ldrb	r3, [r7, #19]
 80071ba:	2b29      	cmp	r3, #41	@ 0x29
 80071bc:	d10a      	bne.n	80071d4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2221      	movs	r2, #33	@ 0x21
 80071c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2228      	movs	r2, #40	@ 0x28
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071cc:	6978      	ldr	r0, [r7, #20]
 80071ce:	f7fe fcdc 	bl	8005b8a <HAL_I2C_SlaveTxCpltCallback>
 80071d2:	e00c      	b.n	80071ee <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80071d4:	7cfb      	ldrb	r3, [r7, #19]
 80071d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80071d8:	d109      	bne.n	80071ee <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2222      	movs	r2, #34	@ 0x22
 80071de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2228      	movs	r2, #40	@ 0x28
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80071e8:	6978      	ldr	r0, [r7, #20]
 80071ea:	f7fe fcd7 	bl	8005b9c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80071fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80071fe:	e074      	b.n	80072ea <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d06e      	beq.n	80072ea <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b01      	cmp	r3, #1
 8007214:	d107      	bne.n	8007226 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007224:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007234:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800723c:	d009      	beq.n	8007252 <I2C_DMAXferCplt+0x11e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b08      	cmp	r3, #8
 8007242:	d006      	beq.n	8007252 <I2C_DMAXferCplt+0x11e>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800724a:	d002      	beq.n	8007252 <I2C_DMAXferCplt+0x11e>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b20      	cmp	r3, #32
 8007250:	d107      	bne.n	8007262 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007260:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007270:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007280:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8007290:	6978      	ldr	r0, [r7, #20]
 8007292:	f7fe fcab 	bl	8005bec <HAL_I2C_ErrorCallback>
}
 8007296:	e028      	b.n	80072ea <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b40      	cmp	r3, #64	@ 0x40
 80072aa:	d10a      	bne.n	80072c2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2200      	movs	r2, #0
 80072b8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80072ba:	6978      	ldr	r0, [r7, #20]
 80072bc:	f7fa fb9a 	bl	80019f4 <HAL_I2C_MemRxCpltCallback>
}
 80072c0:	e013      	b.n	80072ea <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d002      	beq.n	80072d6 <I2C_DMAXferCplt+0x1a2>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b20      	cmp	r3, #32
 80072d4:	d103      	bne.n	80072de <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2200      	movs	r2, #0
 80072da:	631a      	str	r2, [r3, #48]	@ 0x30
 80072dc:	e002      	b.n	80072e4 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2212      	movs	r2, #18
 80072e2:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80072e4:	6978      	ldr	r0, [r7, #20]
 80072e6:	f7fe fc47 	bl	8005b78 <HAL_I2C_MasterRxCpltCallback>
}
 80072ea:	bf00      	nop
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800730c:	2200      	movs	r2, #0
 800730e:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731c:	2200      	movs	r2, #0
 800731e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800732e:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2220      	movs	r2, #32
 800733a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	f043 0210 	orr.w	r2, r3, #16
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7fe fc4a 	bl	8005bec <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007358:	bf00      	nop
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007370:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007378:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800737a:	4b4b      	ldr	r3, [pc, #300]	@ (80074a8 <I2C_DMAAbort+0x148>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	08db      	lsrs	r3, r3, #3
 8007380:	4a4a      	ldr	r2, [pc, #296]	@ (80074ac <I2C_DMAAbort+0x14c>)
 8007382:	fba2 2303 	umull	r2, r3, r2, r3
 8007386:	0a1a      	lsrs	r2, r3, #8
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	00da      	lsls	r2, r3, #3
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739e:	f043 0220 	orr.w	r2, r3, #32
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80073a6:	e00a      	b.n	80073be <I2C_DMAAbort+0x5e>
    }
    count--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073bc:	d0ea      	beq.n	8007394 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ca:	2200      	movs	r2, #0
 80073cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073da:	2200      	movs	r2, #0
 80073dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2200      	movs	r2, #0
 80073f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007400:	2200      	movs	r2, #0
 8007402:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007410:	2200      	movs	r2, #0
 8007412:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b60      	cmp	r3, #96	@ 0x60
 800742e:	d10e      	bne.n	800744e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	2220      	movs	r2, #32
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	2200      	movs	r2, #0
 8007444:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007446:	6978      	ldr	r0, [r7, #20]
 8007448:	f7fe fbd9 	bl	8005bfe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800744c:	e027      	b.n	800749e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800744e:	7cfb      	ldrb	r3, [r7, #19]
 8007450:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007454:	2b28      	cmp	r3, #40	@ 0x28
 8007456:	d117      	bne.n	8007488 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007476:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2228      	movs	r2, #40	@ 0x28
 8007482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007486:	e007      	b.n	8007498 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007498:	6978      	ldr	r0, [r7, #20]
 800749a:	f7fe fba7 	bl	8005bec <HAL_I2C_ErrorCallback>
}
 800749e:	bf00      	nop
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000000 	.word	0x20000000
 80074ac:	14f8b589 	.word	0x14f8b589

080074b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074c0:	e048      	b.n	8007554 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074c8:	d044      	beq.n	8007554 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fc f9f1 	bl	80038b0 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d139      	bne.n	8007554 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10d      	bne.n	8007506 <I2C_WaitOnFlagUntilTimeout+0x56>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	43da      	mvns	r2, r3
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	4013      	ands	r3, r2
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	bf0c      	ite	eq
 80074fc:	2301      	moveq	r3, #1
 80074fe:	2300      	movne	r3, #0
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	e00c      	b.n	8007520 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	43da      	mvns	r2, r3
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	4013      	ands	r3, r2
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	bf0c      	ite	eq
 8007518:	2301      	moveq	r3, #1
 800751a:	2300      	movne	r3, #0
 800751c:	b2db      	uxtb	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	429a      	cmp	r2, r3
 8007524:	d116      	bne.n	8007554 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007540:	f043 0220 	orr.w	r2, r3, #32
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e023      	b.n	800759c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	d10d      	bne.n	800757a <I2C_WaitOnFlagUntilTimeout+0xca>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	43da      	mvns	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	4013      	ands	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	461a      	mov	r2, r3
 8007578:	e00c      	b.n	8007594 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	43da      	mvns	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	4013      	ands	r3, r2
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	bf0c      	ite	eq
 800758c:	2301      	moveq	r3, #1
 800758e:	2300      	movne	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	461a      	mov	r2, r3
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	429a      	cmp	r2, r3
 8007598:	d093      	beq.n	80074c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075b2:	e071      	b.n	8007698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c2:	d123      	bne.n	800760c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f8:	f043 0204 	orr.w	r2, r3, #4
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e067      	b.n	80076dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007612:	d041      	beq.n	8007698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007614:	f7fc f94c 	bl	80038b0 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d302      	bcc.n	800762a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d136      	bne.n	8007698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d10c      	bne.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	43da      	mvns	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	e00b      	b.n	8007666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	43da      	mvns	r2, r3
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4013      	ands	r3, r2
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	bf14      	ite	ne
 8007660:	2301      	movne	r3, #1
 8007662:	2300      	moveq	r3, #0
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d016      	beq.n	8007698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e021      	b.n	80076dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	0c1b      	lsrs	r3, r3, #16
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d10c      	bne.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	43da      	mvns	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	4013      	ands	r3, r2
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	bf14      	ite	ne
 80076b4:	2301      	movne	r3, #1
 80076b6:	2300      	moveq	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	e00b      	b.n	80076d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	43da      	mvns	r2, r3
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4013      	ands	r3, r2
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bf14      	ite	ne
 80076ce:	2301      	movne	r3, #1
 80076d0:	2300      	moveq	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f47f af6d 	bne.w	80075b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076f0:	e034      	b.n	800775c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f915 	bl	8007922 <I2C_IsAcknowledgeFailed>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d001      	beq.n	8007702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e034      	b.n	800776c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007708:	d028      	beq.n	800775c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800770a:	f7fc f8d1 	bl	80038b0 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	429a      	cmp	r2, r3
 8007718:	d302      	bcc.n	8007720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d11d      	bne.n	800775c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772a:	2b80      	cmp	r3, #128	@ 0x80
 800772c:	d016      	beq.n	800775c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	f043 0220 	orr.w	r2, r3, #32
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e007      	b.n	800776c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007766:	2b80      	cmp	r3, #128	@ 0x80
 8007768:	d1c3      	bne.n	80076f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3710      	adds	r7, #16
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007780:	e034      	b.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f8cd 	bl	8007922 <I2C_IsAcknowledgeFailed>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e034      	b.n	80077fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007798:	d028      	beq.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779a:	f7fc f889 	bl	80038b0 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d302      	bcc.n	80077b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d11d      	bne.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695b      	ldr	r3, [r3, #20]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d016      	beq.n	80077ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d8:	f043 0220 	orr.w	r2, r3, #32
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e007      	b.n	80077fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	f003 0304 	and.w	r3, r3, #4
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d1c3      	bne.n	8007782 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800780c:	2300      	movs	r3, #0
 800780e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007810:	4b13      	ldr	r3, [pc, #76]	@ (8007860 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	08db      	lsrs	r3, r3, #3
 8007816:	4a13      	ldr	r2, [pc, #76]	@ (8007864 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	0a1a      	lsrs	r2, r3, #8
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3b01      	subs	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d107      	bne.n	8007842 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007836:	f043 0220 	orr.w	r2, r3, #32
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e008      	b.n	8007854 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800784c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007850:	d0e9      	beq.n	8007826 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	bc80      	pop	{r7}
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20000000 	.word	0x20000000
 8007864:	14f8b589 	.word	0x14f8b589

08007868 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007874:	e049      	b.n	800790a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b10      	cmp	r3, #16
 8007882:	d119      	bne.n	80078b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f06f 0210 	mvn.w	r2, #16
 800788c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e030      	b.n	800791a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078b8:	f7fb fffa 	bl	80038b0 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d302      	bcc.n	80078ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d11d      	bne.n	800790a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078d8:	2b40      	cmp	r3, #64	@ 0x40
 80078da:	d016      	beq.n	800790a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2220      	movs	r2, #32
 80078e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	f043 0220 	orr.w	r2, r3, #32
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e007      	b.n	800791a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007914:	2b40      	cmp	r3, #64	@ 0x40
 8007916:	d1ae      	bne.n	8007876 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007938:	d11b      	bne.n	8007972 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007942:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800795e:	f043 0204 	orr.w	r2, r3, #4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	bc80      	pop	{r7}
 800797c:	4770      	bx	lr

0800797e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800798e:	d103      	bne.n	8007998 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007996:	e007      	b.n	80079a8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80079a0:	d102      	bne.n	80079a8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2208      	movs	r2, #8
 80079a6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr
	...

080079b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e272      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8087 	beq.w	8007ae2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079d4:	4b92      	ldr	r3, [pc, #584]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f003 030c 	and.w	r3, r3, #12
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d00c      	beq.n	80079fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80079e0:	4b8f      	ldr	r3, [pc, #572]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f003 030c 	and.w	r3, r3, #12
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d112      	bne.n	8007a12 <HAL_RCC_OscConfig+0x5e>
 80079ec:	4b8c      	ldr	r3, [pc, #560]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f8:	d10b      	bne.n	8007a12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079fa:	4b89      	ldr	r3, [pc, #548]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d06c      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x12c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d168      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e24c      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a1a:	d106      	bne.n	8007a2a <HAL_RCC_OscConfig+0x76>
 8007a1c:	4b80      	ldr	r3, [pc, #512]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a7f      	ldr	r2, [pc, #508]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	e02e      	b.n	8007a88 <HAL_RCC_OscConfig+0xd4>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10c      	bne.n	8007a4c <HAL_RCC_OscConfig+0x98>
 8007a32:	4b7b      	ldr	r3, [pc, #492]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a7a      	ldr	r2, [pc, #488]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	4b78      	ldr	r3, [pc, #480]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a77      	ldr	r2, [pc, #476]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	e01d      	b.n	8007a88 <HAL_RCC_OscConfig+0xd4>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a54:	d10c      	bne.n	8007a70 <HAL_RCC_OscConfig+0xbc>
 8007a56:	4b72      	ldr	r3, [pc, #456]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a71      	ldr	r2, [pc, #452]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	4b6f      	ldr	r3, [pc, #444]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a6e      	ldr	r2, [pc, #440]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	e00b      	b.n	8007a88 <HAL_RCC_OscConfig+0xd4>
 8007a70:	4b6b      	ldr	r3, [pc, #428]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a6a      	ldr	r2, [pc, #424]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a7a:	6013      	str	r3, [r2, #0]
 8007a7c:	4b68      	ldr	r3, [pc, #416]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a67      	ldr	r2, [pc, #412]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007a82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d013      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a90:	f7fb ff0e 	bl	80038b0 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a98:	f7fb ff0a 	bl	80038b0 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b64      	cmp	r3, #100	@ 0x64
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e200      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <HAL_RCC_OscConfig+0xe4>
 8007ab6:	e014      	b.n	8007ae2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab8:	f7fb fefa 	bl	80038b0 <HAL_GetTick>
 8007abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007abe:	e008      	b.n	8007ad2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ac0:	f7fb fef6 	bl	80038b0 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	2b64      	cmp	r3, #100	@ 0x64
 8007acc:	d901      	bls.n	8007ad2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e1ec      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ad2:	4b53      	ldr	r3, [pc, #332]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1f0      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x10c>
 8007ade:	e000      	b.n	8007ae2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d063      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007aee:	4b4c      	ldr	r3, [pc, #304]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 030c 	and.w	r3, r3, #12
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00b      	beq.n	8007b12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007afa:	4b49      	ldr	r3, [pc, #292]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f003 030c 	and.w	r3, r3, #12
 8007b02:	2b08      	cmp	r3, #8
 8007b04:	d11c      	bne.n	8007b40 <HAL_RCC_OscConfig+0x18c>
 8007b06:	4b46      	ldr	r3, [pc, #280]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d116      	bne.n	8007b40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b12:	4b43      	ldr	r3, [pc, #268]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d005      	beq.n	8007b2a <HAL_RCC_OscConfig+0x176>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d001      	beq.n	8007b2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e1c0      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b2a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	695b      	ldr	r3, [r3, #20]
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	4939      	ldr	r1, [pc, #228]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b3e:	e03a      	b.n	8007bb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d020      	beq.n	8007b8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b48:	4b36      	ldr	r3, [pc, #216]	@ (8007c24 <HAL_RCC_OscConfig+0x270>)
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b4e:	f7fb feaf 	bl	80038b0 <HAL_GetTick>
 8007b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b54:	e008      	b.n	8007b68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b56:	f7fb feab 	bl	80038b0 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d901      	bls.n	8007b68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e1a1      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b68:	4b2d      	ldr	r3, [pc, #180]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d0f0      	beq.n	8007b56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b74:	4b2a      	ldr	r3, [pc, #168]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	00db      	lsls	r3, r3, #3
 8007b82:	4927      	ldr	r1, [pc, #156]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	600b      	str	r3, [r1, #0]
 8007b88:	e015      	b.n	8007bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b8a:	4b26      	ldr	r3, [pc, #152]	@ (8007c24 <HAL_RCC_OscConfig+0x270>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b90:	f7fb fe8e 	bl	80038b0 <HAL_GetTick>
 8007b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b96:	e008      	b.n	8007baa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b98:	f7fb fe8a 	bl	80038b0 <HAL_GetTick>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d901      	bls.n	8007baa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e180      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007baa:	4b1d      	ldr	r3, [pc, #116]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f0      	bne.n	8007b98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d03a      	beq.n	8007c38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d019      	beq.n	8007bfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bca:	4b17      	ldr	r3, [pc, #92]	@ (8007c28 <HAL_RCC_OscConfig+0x274>)
 8007bcc:	2201      	movs	r2, #1
 8007bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bd0:	f7fb fe6e 	bl	80038b0 <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bd8:	f7fb fe6a 	bl	80038b0 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e160      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bea:	4b0d      	ldr	r3, [pc, #52]	@ (8007c20 <HAL_RCC_OscConfig+0x26c>)
 8007bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0f0      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	f000 face 	bl	8008198 <RCC_Delay>
 8007bfc:	e01c      	b.n	8007c38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007c28 <HAL_RCC_OscConfig+0x274>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c04:	f7fb fe54 	bl	80038b0 <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c0a:	e00f      	b.n	8007c2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c0c:	f7fb fe50 	bl	80038b0 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d908      	bls.n	8007c2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e146      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
 8007c1e:	bf00      	nop
 8007c20:	40021000 	.word	0x40021000
 8007c24:	42420000 	.word	0x42420000
 8007c28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c2c:	4b92      	ldr	r3, [pc, #584]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e9      	bne.n	8007c0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80a6 	beq.w	8007d92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c4a:	4b8b      	ldr	r3, [pc, #556]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10d      	bne.n	8007c72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c56:	4b88      	ldr	r3, [pc, #544]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	4a87      	ldr	r2, [pc, #540]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	61d3      	str	r3, [r2, #28]
 8007c62:	4b85      	ldr	r3, [pc, #532]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6a:	60bb      	str	r3, [r7, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c72:	4b82      	ldr	r3, [pc, #520]	@ (8007e7c <HAL_RCC_OscConfig+0x4c8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d118      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8007e7c <HAL_RCC_OscConfig+0x4c8>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a7e      	ldr	r2, [pc, #504]	@ (8007e7c <HAL_RCC_OscConfig+0x4c8>)
 8007c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c8a:	f7fb fe11 	bl	80038b0 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c92:	f7fb fe0d 	bl	80038b0 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b64      	cmp	r3, #100	@ 0x64
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e103      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca4:	4b75      	ldr	r3, [pc, #468]	@ (8007e7c <HAL_RCC_OscConfig+0x4c8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d106      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x312>
 8007cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	6213      	str	r3, [r2, #32]
 8007cc4:	e02d      	b.n	8007d22 <HAL_RCC_OscConfig+0x36e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10c      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x334>
 8007cce:	4b6a      	ldr	r3, [pc, #424]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
 8007cd2:	4a69      	ldr	r2, [pc, #420]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	6213      	str	r3, [r2, #32]
 8007cda:	4b67      	ldr	r3, [pc, #412]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	4a66      	ldr	r2, [pc, #408]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007ce0:	f023 0304 	bic.w	r3, r3, #4
 8007ce4:	6213      	str	r3, [r2, #32]
 8007ce6:	e01c      	b.n	8007d22 <HAL_RCC_OscConfig+0x36e>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b05      	cmp	r3, #5
 8007cee:	d10c      	bne.n	8007d0a <HAL_RCC_OscConfig+0x356>
 8007cf0:	4b61      	ldr	r3, [pc, #388]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	4a60      	ldr	r2, [pc, #384]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cf6:	f043 0304 	orr.w	r3, r3, #4
 8007cfa:	6213      	str	r3, [r2, #32]
 8007cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007cfe:	6a1b      	ldr	r3, [r3, #32]
 8007d00:	4a5d      	ldr	r2, [pc, #372]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d02:	f043 0301 	orr.w	r3, r3, #1
 8007d06:	6213      	str	r3, [r2, #32]
 8007d08:	e00b      	b.n	8007d22 <HAL_RCC_OscConfig+0x36e>
 8007d0a:	4b5b      	ldr	r3, [pc, #364]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	4a5a      	ldr	r2, [pc, #360]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	6213      	str	r3, [r2, #32]
 8007d16:	4b58      	ldr	r3, [pc, #352]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	4a57      	ldr	r2, [pc, #348]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d1c:	f023 0304 	bic.w	r3, r3, #4
 8007d20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d015      	beq.n	8007d56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d2a:	f7fb fdc1 	bl	80038b0 <HAL_GetTick>
 8007d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d30:	e00a      	b.n	8007d48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d32:	f7fb fdbd 	bl	80038b0 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e0b1      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d48:	4b4b      	ldr	r3, [pc, #300]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0ee      	beq.n	8007d32 <HAL_RCC_OscConfig+0x37e>
 8007d54:	e014      	b.n	8007d80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d56:	f7fb fdab 	bl	80038b0 <HAL_GetTick>
 8007d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d5c:	e00a      	b.n	8007d74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d5e:	f7fb fda7 	bl	80038b0 <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d901      	bls.n	8007d74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e09b      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d74:	4b40      	ldr	r3, [pc, #256]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1ee      	bne.n	8007d5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d105      	bne.n	8007d92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d86:	4b3c      	ldr	r3, [pc, #240]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8087 	beq.w	8007eaa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d9c:	4b36      	ldr	r3, [pc, #216]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f003 030c 	and.w	r3, r3, #12
 8007da4:	2b08      	cmp	r3, #8
 8007da6:	d061      	beq.n	8007e6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	69db      	ldr	r3, [r3, #28]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d146      	bne.n	8007e3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007db0:	4b33      	ldr	r3, [pc, #204]	@ (8007e80 <HAL_RCC_OscConfig+0x4cc>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007db6:	f7fb fd7b 	bl	80038b0 <HAL_GetTick>
 8007dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007dbc:	e008      	b.n	8007dd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dbe:	f7fb fd77 	bl	80038b0 <HAL_GetTick>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d901      	bls.n	8007dd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e06d      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007dd0:	4b29      	ldr	r3, [pc, #164]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f0      	bne.n	8007dbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007de4:	d108      	bne.n	8007df8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007de6:	4b24      	ldr	r3, [pc, #144]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	4921      	ldr	r1, [pc, #132]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007df8:	4b1f      	ldr	r3, [pc, #124]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a19      	ldr	r1, [r3, #32]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	491b      	ldr	r1, [pc, #108]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e10:	4b1b      	ldr	r3, [pc, #108]	@ (8007e80 <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e16:	f7fb fd4b 	bl	80038b0 <HAL_GetTick>
 8007e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e1c:	e008      	b.n	8007e30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e1e:	f7fb fd47 	bl	80038b0 <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d901      	bls.n	8007e30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007e2c:	2303      	movs	r3, #3
 8007e2e:	e03d      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e30:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d0f0      	beq.n	8007e1e <HAL_RCC_OscConfig+0x46a>
 8007e3c:	e035      	b.n	8007eaa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e3e:	4b10      	ldr	r3, [pc, #64]	@ (8007e80 <HAL_RCC_OscConfig+0x4cc>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e44:	f7fb fd34 	bl	80038b0 <HAL_GetTick>
 8007e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e4c:	f7fb fd30 	bl	80038b0 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e026      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e5e:	4b06      	ldr	r3, [pc, #24]	@ (8007e78 <HAL_RCC_OscConfig+0x4c4>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1f0      	bne.n	8007e4c <HAL_RCC_OscConfig+0x498>
 8007e6a:	e01e      	b.n	8007eaa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	69db      	ldr	r3, [r3, #28]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d107      	bne.n	8007e84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e019      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
 8007e78:	40021000 	.word	0x40021000
 8007e7c:	40007000 	.word	0x40007000
 8007e80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e84:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb4 <HAL_RCC_OscConfig+0x500>)
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d106      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d001      	beq.n	8007eaa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40021000 	.word	0x40021000

08007eb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e0d0      	b.n	800806e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ecc:	4b6a      	ldr	r3, [pc, #424]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0307 	and.w	r3, r3, #7
 8007ed4:	683a      	ldr	r2, [r7, #0]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d910      	bls.n	8007efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eda:	4b67      	ldr	r3, [pc, #412]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f023 0207 	bic.w	r2, r3, #7
 8007ee2:	4965      	ldr	r1, [pc, #404]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eea:	4b63      	ldr	r3, [pc, #396]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d001      	beq.n	8007efc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e0b8      	b.n	800806e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d020      	beq.n	8007f4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f14:	4b59      	ldr	r3, [pc, #356]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4a58      	ldr	r2, [pc, #352]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007f1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d005      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f2c:	4b53      	ldr	r3, [pc, #332]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	4a52      	ldr	r2, [pc, #328]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007f36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f38:	4b50      	ldr	r3, [pc, #320]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	494d      	ldr	r1, [pc, #308]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d040      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d107      	bne.n	8007f6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f5e:	4b47      	ldr	r3, [pc, #284]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d115      	bne.n	8007f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e07f      	b.n	800806e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d107      	bne.n	8007f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f76:	4b41      	ldr	r3, [pc, #260]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e073      	b.n	800806e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f86:	4b3d      	ldr	r3, [pc, #244]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e06b      	b.n	800806e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f96:	4b39      	ldr	r3, [pc, #228]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f023 0203 	bic.w	r2, r3, #3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	4936      	ldr	r1, [pc, #216]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fa8:	f7fb fc82 	bl	80038b0 <HAL_GetTick>
 8007fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fae:	e00a      	b.n	8007fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fb0:	f7fb fc7e 	bl	80038b0 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e053      	b.n	800806e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc6:	4b2d      	ldr	r3, [pc, #180]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f003 020c 	and.w	r2, r3, #12
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d1eb      	bne.n	8007fb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fd8:	4b27      	ldr	r3, [pc, #156]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0307 	and.w	r3, r3, #7
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d210      	bcs.n	8008008 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe6:	4b24      	ldr	r3, [pc, #144]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f023 0207 	bic.w	r2, r3, #7
 8007fee:	4922      	ldr	r1, [pc, #136]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff6:	4b20      	ldr	r3, [pc, #128]	@ (8008078 <HAL_RCC_ClockConfig+0x1c0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0307 	and.w	r3, r3, #7
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d001      	beq.n	8008008 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e032      	b.n	800806e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d008      	beq.n	8008026 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008014:	4b19      	ldr	r3, [pc, #100]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	4916      	ldr	r1, [pc, #88]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8008022:	4313      	orrs	r3, r2
 8008024:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008032:	4b12      	ldr	r3, [pc, #72]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	490e      	ldr	r1, [pc, #56]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008046:	f000 f821 	bl	800808c <HAL_RCC_GetSysClockFreq>
 800804a:	4602      	mov	r2, r0
 800804c:	4b0b      	ldr	r3, [pc, #44]	@ (800807c <HAL_RCC_ClockConfig+0x1c4>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	091b      	lsrs	r3, r3, #4
 8008052:	f003 030f 	and.w	r3, r3, #15
 8008056:	490a      	ldr	r1, [pc, #40]	@ (8008080 <HAL_RCC_ClockConfig+0x1c8>)
 8008058:	5ccb      	ldrb	r3, [r1, r3]
 800805a:	fa22 f303 	lsr.w	r3, r2, r3
 800805e:	4a09      	ldr	r2, [pc, #36]	@ (8008084 <HAL_RCC_ClockConfig+0x1cc>)
 8008060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008062:	4b09      	ldr	r3, [pc, #36]	@ (8008088 <HAL_RCC_ClockConfig+0x1d0>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	f7fb fbe0 	bl	800382c <HAL_InitTick>

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	40022000 	.word	0x40022000
 800807c:	40021000 	.word	0x40021000
 8008080:	0800d5c0 	.word	0x0800d5c0
 8008084:	20000000 	.word	0x20000000
 8008088:	20000004 	.word	0x20000004

0800808c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	2300      	movs	r3, #0
 8008098:	60bb      	str	r3, [r7, #8]
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	2300      	movs	r3, #0
 80080a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80080a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008120 <HAL_RCC_GetSysClockFreq+0x94>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f003 030c 	and.w	r3, r3, #12
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d002      	beq.n	80080bc <HAL_RCC_GetSysClockFreq+0x30>
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d003      	beq.n	80080c2 <HAL_RCC_GetSysClockFreq+0x36>
 80080ba:	e027      	b.n	800810c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80080bc:	4b19      	ldr	r3, [pc, #100]	@ (8008124 <HAL_RCC_GetSysClockFreq+0x98>)
 80080be:	613b      	str	r3, [r7, #16]
      break;
 80080c0:	e027      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	0c9b      	lsrs	r3, r3, #18
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	4a17      	ldr	r2, [pc, #92]	@ (8008128 <HAL_RCC_GetSysClockFreq+0x9c>)
 80080cc:	5cd3      	ldrb	r3, [r2, r3]
 80080ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d010      	beq.n	80080fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80080da:	4b11      	ldr	r3, [pc, #68]	@ (8008120 <HAL_RCC_GetSysClockFreq+0x94>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	0c5b      	lsrs	r3, r3, #17
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	4a11      	ldr	r2, [pc, #68]	@ (800812c <HAL_RCC_GetSysClockFreq+0xa0>)
 80080e6:	5cd3      	ldrb	r3, [r2, r3]
 80080e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a0d      	ldr	r2, [pc, #52]	@ (8008124 <HAL_RCC_GetSysClockFreq+0x98>)
 80080ee:	fb03 f202 	mul.w	r2, r3, r2
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	e004      	b.n	8008106 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008130 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008100:	fb02 f303 	mul.w	r3, r2, r3
 8008104:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	613b      	str	r3, [r7, #16]
      break;
 800810a:	e002      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800810c:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <HAL_RCC_GetSysClockFreq+0x98>)
 800810e:	613b      	str	r3, [r7, #16]
      break;
 8008110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008112:	693b      	ldr	r3, [r7, #16]
}
 8008114:	4618      	mov	r0, r3
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	bc80      	pop	{r7}
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40021000 	.word	0x40021000
 8008124:	007a1200 	.word	0x007a1200
 8008128:	0800d5d8 	.word	0x0800d5d8
 800812c:	0800d5e8 	.word	0x0800d5e8
 8008130:	003d0900 	.word	0x003d0900

08008134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008134:	b480      	push	{r7}
 8008136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008138:	4b02      	ldr	r3, [pc, #8]	@ (8008144 <HAL_RCC_GetHCLKFreq+0x10>)
 800813a:	681b      	ldr	r3, [r3, #0]
}
 800813c:	4618      	mov	r0, r3
 800813e:	46bd      	mov	sp, r7
 8008140:	bc80      	pop	{r7}
 8008142:	4770      	bx	lr
 8008144:	20000000 	.word	0x20000000

08008148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800814c:	f7ff fff2 	bl	8008134 <HAL_RCC_GetHCLKFreq>
 8008150:	4602      	mov	r2, r0
 8008152:	4b05      	ldr	r3, [pc, #20]	@ (8008168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	0a1b      	lsrs	r3, r3, #8
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	4903      	ldr	r1, [pc, #12]	@ (800816c <HAL_RCC_GetPCLK1Freq+0x24>)
 800815e:	5ccb      	ldrb	r3, [r1, r3]
 8008160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008164:	4618      	mov	r0, r3
 8008166:	bd80      	pop	{r7, pc}
 8008168:	40021000 	.word	0x40021000
 800816c:	0800d5d0 	.word	0x0800d5d0

08008170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008174:	f7ff ffde 	bl	8008134 <HAL_RCC_GetHCLKFreq>
 8008178:	4602      	mov	r2, r0
 800817a:	4b05      	ldr	r3, [pc, #20]	@ (8008190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	0adb      	lsrs	r3, r3, #11
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	4903      	ldr	r1, [pc, #12]	@ (8008194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008186:	5ccb      	ldrb	r3, [r1, r3]
 8008188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800818c:	4618      	mov	r0, r3
 800818e:	bd80      	pop	{r7, pc}
 8008190:	40021000 	.word	0x40021000
 8008194:	0800d5d0 	.word	0x0800d5d0

08008198 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80081a0:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <RCC_Delay+0x34>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a0a      	ldr	r2, [pc, #40]	@ (80081d0 <RCC_Delay+0x38>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	0a5b      	lsrs	r3, r3, #9
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	fb02 f303 	mul.w	r3, r2, r3
 80081b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80081b4:	bf00      	nop
  }
  while (Delay --);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	1e5a      	subs	r2, r3, #1
 80081ba:	60fa      	str	r2, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1f9      	bne.n	80081b4 <RCC_Delay+0x1c>
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr
 80081cc:	20000000 	.word	0x20000000
 80081d0:	10624dd3 	.word	0x10624dd3

080081d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d07d      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081f4:	4b4f      	ldr	r3, [pc, #316]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80081f6:	69db      	ldr	r3, [r3, #28]
 80081f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d10d      	bne.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008200:	4b4c      	ldr	r3, [pc, #304]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	4a4b      	ldr	r2, [pc, #300]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800820a:	61d3      	str	r3, [r2, #28]
 800820c:	4b49      	ldr	r3, [pc, #292]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008214:	60bb      	str	r3, [r7, #8]
 8008216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008218:	2301      	movs	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800821c:	4b46      	ldr	r3, [pc, #280]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d118      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008228:	4b43      	ldr	r3, [pc, #268]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a42      	ldr	r2, [pc, #264]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800822e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008234:	f7fb fb3c 	bl	80038b0 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823a:	e008      	b.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800823c:	f7fb fb38 	bl	80038b0 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b64      	cmp	r3, #100	@ 0x64
 8008248:	d901      	bls.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e06d      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800824e:	4b3a      	ldr	r3, [pc, #232]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f0      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800825a:	4b36      	ldr	r3, [pc, #216]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008262:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d02e      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	429a      	cmp	r2, r3
 8008276:	d027      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008278:	4b2e      	ldr	r3, [pc, #184]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008280:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008282:	4b2e      	ldr	r3, [pc, #184]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008284:	2201      	movs	r2, #1
 8008286:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008288:	4b2c      	ldr	r3, [pc, #176]	@ (800833c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800828e:	4a29      	ldr	r2, [pc, #164]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d014      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800829e:	f7fb fb07 	bl	80038b0 <HAL_GetTick>
 80082a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a4:	e00a      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a6:	f7fb fb03 	bl	80038b0 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d901      	bls.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e036      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	f003 0302 	and.w	r3, r3, #2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0ee      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082ca:	6a1b      	ldr	r3, [r3, #32]
 80082cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4917      	ldr	r1, [pc, #92]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d105      	bne.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082e0:	4b14      	ldr	r3, [pc, #80]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082e2:	69db      	ldr	r3, [r3, #28]
 80082e4:	4a13      	ldr	r2, [pc, #76]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0302 	and.w	r3, r3, #2
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d008      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80082f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	490b      	ldr	r1, [pc, #44]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008306:	4313      	orrs	r3, r2
 8008308:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0310 	and.w	r3, r3, #16
 8008312:	2b00      	cmp	r3, #0
 8008314:	d008      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008316:	4b07      	ldr	r3, [pc, #28]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	4904      	ldr	r1, [pc, #16]	@ (8008334 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008324:	4313      	orrs	r3, r2
 8008326:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	40021000 	.word	0x40021000
 8008338:	40007000 	.word	0x40007000
 800833c:	42420440 	.word	0x42420440

08008340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e041      	b.n	80083d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b00      	cmp	r3, #0
 800835c:	d106      	bne.n	800836c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f7fb f888 	bl	800347c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3304      	adds	r3, #4
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f000 fc18 	bl	8008bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d001      	beq.n	80083f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e03a      	b.n	800846e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0201 	orr.w	r2, r2, #1
 800840e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a18      	ldr	r2, [pc, #96]	@ (8008478 <HAL_TIM_Base_Start_IT+0x98>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00e      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x58>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008422:	d009      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x58>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a14      	ldr	r2, [pc, #80]	@ (800847c <HAL_TIM_Base_Start_IT+0x9c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d004      	beq.n	8008438 <HAL_TIM_Base_Start_IT+0x58>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a13      	ldr	r2, [pc, #76]	@ (8008480 <HAL_TIM_Base_Start_IT+0xa0>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d111      	bne.n	800845c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2b06      	cmp	r3, #6
 8008448:	d010      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f042 0201 	orr.w	r2, r2, #1
 8008458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800845a:	e007      	b.n	800846c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0201 	orr.w	r2, r2, #1
 800846a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40000400 	.word	0x40000400
 8008480:	40000800 	.word	0x40000800

08008484 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e041      	b.n	800851a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f839 	bl	8008522 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2202      	movs	r2, #2
 80084b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	3304      	adds	r3, #4
 80084c0:	4619      	mov	r1, r3
 80084c2:	4610      	mov	r0, r2
 80084c4:	f000 fb76 	bl	8008bb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800852a:	bf00      	nop
 800852c:	370c      	adds	r7, #12
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <HAL_TIM_PWM_Start+0x24>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b01      	cmp	r3, #1
 800854e:	bf14      	ite	ne
 8008550:	2301      	movne	r3, #1
 8008552:	2300      	moveq	r3, #0
 8008554:	b2db      	uxtb	r3, r3
 8008556:	e022      	b.n	800859e <HAL_TIM_PWM_Start+0x6a>
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	2b04      	cmp	r3, #4
 800855c:	d109      	bne.n	8008572 <HAL_TIM_PWM_Start+0x3e>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b01      	cmp	r3, #1
 8008568:	bf14      	ite	ne
 800856a:	2301      	movne	r3, #1
 800856c:	2300      	moveq	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	e015      	b.n	800859e <HAL_TIM_PWM_Start+0x6a>
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b08      	cmp	r3, #8
 8008576:	d109      	bne.n	800858c <HAL_TIM_PWM_Start+0x58>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800857e:	b2db      	uxtb	r3, r3
 8008580:	2b01      	cmp	r3, #1
 8008582:	bf14      	ite	ne
 8008584:	2301      	movne	r3, #1
 8008586:	2300      	moveq	r3, #0
 8008588:	b2db      	uxtb	r3, r3
 800858a:	e008      	b.n	800859e <HAL_TIM_PWM_Start+0x6a>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b01      	cmp	r3, #1
 8008596:	bf14      	ite	ne
 8008598:	2301      	movne	r3, #1
 800859a:	2300      	moveq	r3, #0
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e05e      	b.n	8008664 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <HAL_TIM_PWM_Start+0x82>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085b4:	e013      	b.n	80085de <HAL_TIM_PWM_Start+0xaa>
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d104      	bne.n	80085c6 <HAL_TIM_PWM_Start+0x92>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085c4:	e00b      	b.n	80085de <HAL_TIM_PWM_Start+0xaa>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d104      	bne.n	80085d6 <HAL_TIM_PWM_Start+0xa2>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085d4:	e003      	b.n	80085de <HAL_TIM_PWM_Start+0xaa>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	6839      	ldr	r1, [r7, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f000 fd70 	bl	80090cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a1e      	ldr	r2, [pc, #120]	@ (800866c <HAL_TIM_PWM_Start+0x138>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d107      	bne.n	8008606 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008604:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a18      	ldr	r2, [pc, #96]	@ (800866c <HAL_TIM_PWM_Start+0x138>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00e      	beq.n	800862e <HAL_TIM_PWM_Start+0xfa>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008618:	d009      	beq.n	800862e <HAL_TIM_PWM_Start+0xfa>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a14      	ldr	r2, [pc, #80]	@ (8008670 <HAL_TIM_PWM_Start+0x13c>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d004      	beq.n	800862e <HAL_TIM_PWM_Start+0xfa>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a12      	ldr	r2, [pc, #72]	@ (8008674 <HAL_TIM_PWM_Start+0x140>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d111      	bne.n	8008652 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	f003 0307 	and.w	r3, r3, #7
 8008638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2b06      	cmp	r3, #6
 800863e:	d010      	beq.n	8008662 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f042 0201 	orr.w	r2, r2, #1
 800864e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008650:	e007      	b.n	8008662 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f042 0201 	orr.w	r2, r2, #1
 8008660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	40012c00 	.word	0x40012c00
 8008670:	40000400 	.word	0x40000400
 8008674:	40000800 	.word	0x40000800

08008678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	f003 0302 	and.w	r3, r3, #2
 8008696:	2b00      	cmp	r3, #0
 8008698:	d020      	beq.n	80086dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01b      	beq.n	80086dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f06f 0202 	mvn.w	r2, #2
 80086ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2201      	movs	r2, #1
 80086b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699b      	ldr	r3, [r3, #24]
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa5a 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 80086c8:	e005      	b.n	80086d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fa4d 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fa5c 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d020      	beq.n	8008728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d01b      	beq.n	8008728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f06f 0204 	mvn.w	r2, #4
 80086f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2202      	movs	r2, #2
 80086fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fa34 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 8008714:	e005      	b.n	8008722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa27 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fa36 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f003 0308 	and.w	r3, r3, #8
 800872e:	2b00      	cmp	r3, #0
 8008730:	d020      	beq.n	8008774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b00      	cmp	r3, #0
 800873a:	d01b      	beq.n	8008774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f06f 0208 	mvn.w	r2, #8
 8008744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2204      	movs	r2, #4
 800874a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa0e 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 8008760:	e005      	b.n	800876e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fa01 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa10 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b00      	cmp	r3, #0
 800877c:	d020      	beq.n	80087c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	d01b      	beq.n	80087c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f06f 0210 	mvn.w	r2, #16
 8008790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2208      	movs	r2, #8
 8008796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f9e8 	bl	8008b7c <HAL_TIM_IC_CaptureCallback>
 80087ac:	e005      	b.n	80087ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f9db 	bl	8008b6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9ea 	bl	8008b8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00c      	beq.n	80087e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d007      	beq.n	80087e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0201 	mvn.w	r2, #1
 80087dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7f9 f8bc 	bl	800195c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00c      	beq.n	8008808 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d007      	beq.n	8008808 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fced 	bl	80091e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00c      	beq.n	800882c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9ba 	bl	8008ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00c      	beq.n	8008850 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f003 0320 	and.w	r3, r3, #32
 800883c:	2b00      	cmp	r3, #0
 800883e:	d007      	beq.n	8008850 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f06f 0220 	mvn.w	r2, #32
 8008848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fcc0 	bl	80091d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b086      	sub	sp, #24
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008864:	2300      	movs	r3, #0
 8008866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800886e:	2b01      	cmp	r3, #1
 8008870:	d101      	bne.n	8008876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008872:	2302      	movs	r3, #2
 8008874:	e0ae      	b.n	80089d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b0c      	cmp	r3, #12
 8008882:	f200 809f 	bhi.w	80089c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008886:	a201      	add	r2, pc, #4	@ (adr r2, 800888c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888c:	080088c1 	.word	0x080088c1
 8008890:	080089c5 	.word	0x080089c5
 8008894:	080089c5 	.word	0x080089c5
 8008898:	080089c5 	.word	0x080089c5
 800889c:	08008901 	.word	0x08008901
 80088a0:	080089c5 	.word	0x080089c5
 80088a4:	080089c5 	.word	0x080089c5
 80088a8:	080089c5 	.word	0x080089c5
 80088ac:	08008943 	.word	0x08008943
 80088b0:	080089c5 	.word	0x080089c5
 80088b4:	080089c5 	.word	0x080089c5
 80088b8:	080089c5 	.word	0x080089c5
 80088bc:	08008983 	.word	0x08008983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f9e2 	bl	8008c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f042 0208 	orr.w	r2, r2, #8
 80088da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f022 0204 	bic.w	r2, r2, #4
 80088ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6999      	ldr	r1, [r3, #24]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	691a      	ldr	r2, [r3, #16]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	430a      	orrs	r2, r1
 80088fc:	619a      	str	r2, [r3, #24]
      break;
 80088fe:	e064      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 fa28 	bl	8008d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	021a      	lsls	r2, r3, #8
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	619a      	str	r2, [r3, #24]
      break;
 8008940:	e043      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fa71 	bl	8008e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f042 0208 	orr.w	r2, r2, #8
 800895c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0204 	bic.w	r2, r2, #4
 800896c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69d9      	ldr	r1, [r3, #28]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	61da      	str	r2, [r3, #28]
      break;
 8008980:	e023      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fabb 	bl	8008f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800899c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69d9      	ldr	r1, [r3, #28]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	021a      	lsls	r2, r3, #8
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	61da      	str	r2, [r3, #28]
      break;
 80089c2:	e002      	b.n	80089ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	75fb      	strb	r3, [r7, #23]
      break;
 80089c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3718      	adds	r7, #24
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_TIM_ConfigClockSource+0x1c>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e0b4      	b.n	8008b62 <HAL_TIM_ConfigClockSource+0x186>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2202      	movs	r2, #2
 8008a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a30:	d03e      	beq.n	8008ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8008a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a36:	f200 8087 	bhi.w	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a3e:	f000 8086 	beq.w	8008b4e <HAL_TIM_ConfigClockSource+0x172>
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a46:	d87f      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a48:	2b70      	cmp	r3, #112	@ 0x70
 8008a4a:	d01a      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0xa6>
 8008a4c:	2b70      	cmp	r3, #112	@ 0x70
 8008a4e:	d87b      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a50:	2b60      	cmp	r3, #96	@ 0x60
 8008a52:	d050      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0x11a>
 8008a54:	2b60      	cmp	r3, #96	@ 0x60
 8008a56:	d877      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a58:	2b50      	cmp	r3, #80	@ 0x50
 8008a5a:	d03c      	beq.n	8008ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8008a5c:	2b50      	cmp	r3, #80	@ 0x50
 8008a5e:	d873      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a60:	2b40      	cmp	r3, #64	@ 0x40
 8008a62:	d058      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x13a>
 8008a64:	2b40      	cmp	r3, #64	@ 0x40
 8008a66:	d86f      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a68:	2b30      	cmp	r3, #48	@ 0x30
 8008a6a:	d064      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a6c:	2b30      	cmp	r3, #48	@ 0x30
 8008a6e:	d86b      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a70:	2b20      	cmp	r3, #32
 8008a72:	d060      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	d867      	bhi.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d05c      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	d05a      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x15a>
 8008a80:	e062      	b.n	8008b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008a92:	f000 fafc 	bl	800908e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	609a      	str	r2, [r3, #8]
      break;
 8008aae:	e04f      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ac0:	f000 fae5 	bl	800908e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ad2:	609a      	str	r2, [r3, #8]
      break;
 8008ad4:	e03c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	f000 fa5c 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2150      	movs	r1, #80	@ 0x50
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fab3 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008af4:	e02c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b02:	461a      	mov	r2, r3
 8008b04:	f000 fa7a 	bl	8008ffc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2160      	movs	r1, #96	@ 0x60
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f000 faa3 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008b14:	e01c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 fa3c 	bl	8008fa0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2140      	movs	r1, #64	@ 0x40
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fa93 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008b34:	e00c      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4610      	mov	r0, r2
 8008b42:	f000 fa8a 	bl	800905a <TIM_ITRx_SetConfig>
      break;
 8008b46:	e003      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b4c:	e000      	b.n	8008b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bc80      	pop	{r7}
 8008b8c:	4770      	bx	lr

08008b8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bc80      	pop	{r7}
 8008b9e:	4770      	bx	lr

08008ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bc80      	pop	{r7}
 8008bb0:	4770      	bx	lr
	...

08008bb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8008c84 <TIM_Base_SetConfig+0xd0>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00b      	beq.n	8008be4 <TIM_Base_SetConfig+0x30>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd2:	d007      	beq.n	8008be4 <TIM_Base_SetConfig+0x30>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8008c88 <TIM_Base_SetConfig+0xd4>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d003      	beq.n	8008be4 <TIM_Base_SetConfig+0x30>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a2b      	ldr	r2, [pc, #172]	@ (8008c8c <TIM_Base_SetConfig+0xd8>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d108      	bne.n	8008bf6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a22      	ldr	r2, [pc, #136]	@ (8008c84 <TIM_Base_SetConfig+0xd0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00b      	beq.n	8008c16 <TIM_Base_SetConfig+0x62>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c04:	d007      	beq.n	8008c16 <TIM_Base_SetConfig+0x62>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a1f      	ldr	r2, [pc, #124]	@ (8008c88 <TIM_Base_SetConfig+0xd4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d003      	beq.n	8008c16 <TIM_Base_SetConfig+0x62>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1e      	ldr	r2, [pc, #120]	@ (8008c8c <TIM_Base_SetConfig+0xd8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d108      	bne.n	8008c28 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8008c84 <TIM_Base_SetConfig+0xd0>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d103      	bne.n	8008c5c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	691a      	ldr	r2, [r3, #16]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f023 0201 	bic.w	r2, r3, #1
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	611a      	str	r2, [r3, #16]
  }
}
 8008c7a:	bf00      	nop
 8008c7c:	3714      	adds	r7, #20
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr
 8008c84:	40012c00 	.word	0x40012c00
 8008c88:	40000400 	.word	0x40000400
 8008c8c:	40000800 	.word	0x40000800

08008c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	f023 0201 	bic.w	r2, r3, #1
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0303 	bic.w	r3, r3, #3
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f023 0302 	bic.w	r3, r3, #2
 8008cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8008d58 <TIM_OC1_SetConfig+0xc8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d10c      	bne.n	8008d06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	f023 0308 	bic.w	r3, r3, #8
 8008cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f023 0304 	bic.w	r3, r3, #4
 8008d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a13      	ldr	r2, [pc, #76]	@ (8008d58 <TIM_OC1_SetConfig+0xc8>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d111      	bne.n	8008d32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	621a      	str	r2, [r3, #32]
}
 8008d4c:	bf00      	nop
 8008d4e:	371c      	adds	r7, #28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bc80      	pop	{r7}
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40012c00 	.word	0x40012c00

08008d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	f023 0210 	bic.w	r2, r3, #16
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f023 0320 	bic.w	r3, r3, #32
 8008da6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a1d      	ldr	r2, [pc, #116]	@ (8008e2c <TIM_OC2_SetConfig+0xd0>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d10d      	bne.n	8008dd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	011b      	lsls	r3, r3, #4
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a14      	ldr	r2, [pc, #80]	@ (8008e2c <TIM_OC2_SetConfig+0xd0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d113      	bne.n	8008e08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008de6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	693a      	ldr	r2, [r7, #16]
 8008e0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	621a      	str	r2, [r3, #32]
}
 8008e22:	bf00      	nop
 8008e24:	371c      	adds	r7, #28
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bc80      	pop	{r7}
 8008e2a:	4770      	bx	lr
 8008e2c:	40012c00 	.word	0x40012c00

08008e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 0303 	bic.w	r3, r3, #3
 8008e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a1d      	ldr	r2, [pc, #116]	@ (8008f00 <TIM_OC3_SetConfig+0xd0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d10d      	bne.n	8008eaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	021b      	lsls	r3, r3, #8
 8008e9c:	697a      	ldr	r2, [r7, #20]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a14      	ldr	r2, [pc, #80]	@ (8008f00 <TIM_OC3_SetConfig+0xd0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d113      	bne.n	8008eda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	011b      	lsls	r3, r3, #4
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	011b      	lsls	r3, r3, #4
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	693a      	ldr	r2, [r7, #16]
 8008ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	621a      	str	r2, [r3, #32]
}
 8008ef4:	bf00      	nop
 8008ef6:	371c      	adds	r7, #28
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40012c00 	.word	0x40012c00

08008f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b087      	sub	sp, #28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	021b      	lsls	r3, r3, #8
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	031b      	lsls	r3, r3, #12
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8008f9c <TIM_OC4_SetConfig+0x98>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d109      	bne.n	8008f78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	019b      	lsls	r3, r3, #6
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	697a      	ldr	r2, [r7, #20]
 8008f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bc80      	pop	{r7}
 8008f9a:	4770      	bx	lr
 8008f9c:	40012c00 	.word	0x40012c00

08008fa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f023 0201 	bic.w	r2, r3, #1
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	699b      	ldr	r3, [r3, #24]
 8008fc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	011b      	lsls	r3, r3, #4
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f023 030a 	bic.w	r3, r3, #10
 8008fdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	f023 0210 	bic.w	r2, r3, #16
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	031b      	lsls	r3, r3, #12
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4313      	orrs	r3, r2
 8009030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009038:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	011b      	lsls	r3, r3, #4
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	4313      	orrs	r3, r2
 8009042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	621a      	str	r2, [r3, #32]
}
 8009050:	bf00      	nop
 8009052:	371c      	adds	r7, #28
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	f043 0307 	orr.w	r3, r3, #7
 800907c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	609a      	str	r2, [r3, #8]
}
 8009084:	bf00      	nop
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr

0800908e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800908e:	b480      	push	{r7}
 8009090:	b087      	sub	sp, #28
 8009092:	af00      	add	r7, sp, #0
 8009094:	60f8      	str	r0, [r7, #12]
 8009096:	60b9      	str	r1, [r7, #8]
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	021a      	lsls	r2, r3, #8
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	431a      	orrs	r2, r3
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	609a      	str	r2, [r3, #8]
}
 80090c2:	bf00      	nop
 80090c4:	371c      	adds	r7, #28
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bc80      	pop	{r7}
 80090ca:	4770      	bx	lr

080090cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	2201      	movs	r2, #1
 80090e0:	fa02 f303 	lsl.w	r3, r2, r3
 80090e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6a1a      	ldr	r2, [r3, #32]
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	43db      	mvns	r3, r3
 80090ee:	401a      	ands	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6a1a      	ldr	r2, [r3, #32]
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 031f 	and.w	r3, r3, #31
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	fa01 f303 	lsl.w	r3, r1, r3
 8009104:	431a      	orrs	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	621a      	str	r2, [r3, #32]
}
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009128:	2302      	movs	r3, #2
 800912a:	e046      	b.n	80091ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2202      	movs	r2, #2
 8009138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	4313      	orrs	r3, r2
 800915c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a16      	ldr	r2, [pc, #88]	@ (80091c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d00e      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009178:	d009      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a12      	ldr	r2, [pc, #72]	@ (80091c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d004      	beq.n	800918e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a10      	ldr	r2, [pc, #64]	@ (80091cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d10c      	bne.n	80091a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4313      	orrs	r3, r2
 800919e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68ba      	ldr	r2, [r7, #8]
 80091a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3714      	adds	r7, #20
 80091be:	46bd      	mov	sp, r7
 80091c0:	bc80      	pop	{r7}
 80091c2:	4770      	bx	lr
 80091c4:	40012c00 	.word	0x40012c00
 80091c8:	40000400 	.word	0x40000400
 80091cc:	40000800 	.word	0x40000800

080091d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	bc80      	pop	{r7}
 80091e0:	4770      	bx	lr

080091e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b083      	sub	sp, #12
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bc80      	pop	{r7}
 80091f2:	4770      	bx	lr

080091f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d101      	bne.n	8009206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	e042      	b.n	800928c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b00      	cmp	r3, #0
 8009210:	d106      	bne.n	8009220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7fa fa20 	bl	8003660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2224      	movs	r2, #36	@ 0x24
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 f845 	bl	800a2c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	691a      	ldr	r2, [r3, #16]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800924c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695a      	ldr	r2, [r3, #20]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800925c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68da      	ldr	r2, [r3, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800926c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2220      	movs	r2, #32
 8009280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	@ 0x28
 8009298:	af02      	add	r7, sp, #8
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	4613      	mov	r3, r2
 80092a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d175      	bne.n	80093a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <HAL_UART_Transmit+0x2c>
 80092ba:	88fb      	ldrh	r3, [r7, #6]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d101      	bne.n	80092c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e06e      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2221      	movs	r2, #33	@ 0x21
 80092ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092d2:	f7fa faed 	bl	80038b0 <HAL_GetTick>
 80092d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	88fa      	ldrh	r2, [r7, #6]
 80092dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	88fa      	ldrh	r2, [r7, #6]
 80092e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092ec:	d108      	bne.n	8009300 <HAL_UART_Transmit+0x6c>
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d104      	bne.n	8009300 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092f6:	2300      	movs	r3, #0
 80092f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	61bb      	str	r3, [r7, #24]
 80092fe:	e003      	b.n	8009308 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009304:	2300      	movs	r3, #0
 8009306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009308:	e02e      	b.n	8009368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2200      	movs	r2, #0
 8009312:	2180      	movs	r1, #128	@ 0x80
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fd22 	bl	8009d5e <UART_WaitOnFlagUntilTimeout>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e03a      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d10b      	bne.n	800934a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	881b      	ldrh	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009340:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009342:	69bb      	ldr	r3, [r7, #24]
 8009344:	3302      	adds	r3, #2
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	e007      	b.n	800935a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	781a      	ldrb	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	3301      	adds	r3, #1
 8009358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800935e:	b29b      	uxth	r3, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800936c:	b29b      	uxth	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1cb      	bne.n	800930a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2200      	movs	r2, #0
 800937a:	2140      	movs	r1, #64	@ 0x40
 800937c:	68f8      	ldr	r0, [r7, #12]
 800937e:	f000 fcee 	bl	8009d5e <UART_WaitOnFlagUntilTimeout>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e006      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2220      	movs	r2, #32
 8009398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	e000      	b.n	80093a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80093a0:	2302      	movs	r3, #2
  }
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08c      	sub	sp, #48	@ 0x30
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4613      	mov	r3, r2
 80093b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b20      	cmp	r3, #32
 80093c4:	d156      	bne.n	8009474 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <HAL_UART_Transmit_DMA+0x26>
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e04f      	b.n	8009476 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80093d6:	68ba      	ldr	r2, [r7, #8]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	88fa      	ldrh	r2, [r7, #6]
 80093e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	88fa      	ldrh	r2, [r7, #6]
 80093e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2221      	movs	r2, #33	@ 0x21
 80093f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	4a21      	ldr	r2, [pc, #132]	@ (8009480 <HAL_UART_Transmit_DMA+0xd4>)
 80093fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009402:	4a20      	ldr	r2, [pc, #128]	@ (8009484 <HAL_UART_Transmit_DMA+0xd8>)
 8009404:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940a:	4a1f      	ldr	r2, [pc, #124]	@ (8009488 <HAL_UART_Transmit_DMA+0xdc>)
 800940c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009412:	2200      	movs	r2, #0
 8009414:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8009416:	f107 0308 	add.w	r3, r7, #8
 800941a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	6819      	ldr	r1, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	3304      	adds	r3, #4
 800942a:	461a      	mov	r2, r3
 800942c:	88fb      	ldrh	r3, [r7, #6]
 800942e:	f7fa ffd3 	bl	80043d8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800943a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3314      	adds	r3, #20
 8009442:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	617b      	str	r3, [r7, #20]
   return(result);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3314      	adds	r3, #20
 800945a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800945c:	627a      	str	r2, [r7, #36]	@ 0x24
 800945e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6a39      	ldr	r1, [r7, #32]
 8009462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	61fb      	str	r3, [r7, #28]
   return(result);
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e5      	bne.n	800943c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	e000      	b.n	8009476 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009474:	2302      	movs	r3, #2
  }
}
 8009476:	4618      	mov	r0, r3
 8009478:	3730      	adds	r7, #48	@ 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	08009aad 	.word	0x08009aad
 8009484:	08009b47 	.word	0x08009b47
 8009488:	08009ccb 	.word	0x08009ccb

0800948c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08c      	sub	sp, #48	@ 0x30
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d146      	bne.n	8009534 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80094ac:	88fb      	ldrh	r3, [r7, #6]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	e03f      	b.n	8009536 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	461a      	mov	r2, r3
 80094c6:	68b9      	ldr	r1, [r7, #8]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f000 fca1 	bl	8009e10 <UART_Start_Receive_DMA>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d125      	bne.n	8009528 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094dc:	2300      	movs	r3, #0
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	613b      	str	r3, [r7, #16]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	613b      	str	r3, [r7, #16]
 80094f0:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	330c      	adds	r3, #12
 80094f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	617b      	str	r3, [r7, #20]
   return(result);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f043 0310 	orr.w	r3, r3, #16
 8009508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	330c      	adds	r3, #12
 8009510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009512:	627a      	str	r2, [r7, #36]	@ 0x24
 8009514:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009516:	6a39      	ldr	r1, [r7, #32]
 8009518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800951a:	e841 2300 	strex	r3, r2, [r1]
 800951e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1e5      	bne.n	80094f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8009526:	e002      	b.n	800952e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800952e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009532:	e000      	b.n	8009536 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8009534:	2302      	movs	r3, #2
  }
}
 8009536:	4618      	mov	r0, r3
 8009538:	3730      	adds	r7, #48	@ 0x30
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
	...

08009540 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b0ba      	sub	sp, #232	@ 0xe8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	695b      	ldr	r3, [r3, #20]
 8009562:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009566:	2300      	movs	r3, #0
 8009568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800956c:	2300      	movs	r3, #0
 800956e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800957e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10f      	bne.n	80095a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	d009      	beq.n	80095a6 <HAL_UART_IRQHandler+0x66>
 8009592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fdd4 	bl	800a14c <UART_Receive_IT>
      return;
 80095a4:	e25b      	b.n	8009a5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 80de 	beq.w	800976c <HAL_UART_IRQHandler+0x22c>
 80095b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d106      	bne.n	80095ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80d1 	beq.w	800976c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00b      	beq.n	80095ee <HAL_UART_IRQHandler+0xae>
 80095d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095e6:	f043 0201 	orr.w	r2, r3, #1
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095f2:	f003 0304 	and.w	r3, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <HAL_UART_IRQHandler+0xd2>
 80095fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800960a:	f043 0202 	orr.w	r2, r3, #2
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00b      	beq.n	8009636 <HAL_UART_IRQHandler+0xf6>
 800961e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800962e:	f043 0204 	orr.w	r2, r3, #4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800963a:	f003 0308 	and.w	r3, r3, #8
 800963e:	2b00      	cmp	r3, #0
 8009640:	d011      	beq.n	8009666 <HAL_UART_IRQHandler+0x126>
 8009642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800964e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800965e:	f043 0208 	orr.w	r2, r3, #8
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 81f2 	beq.w	8009a54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009674:	f003 0320 	and.w	r3, r3, #32
 8009678:	2b00      	cmp	r3, #0
 800967a:	d008      	beq.n	800968e <HAL_UART_IRQHandler+0x14e>
 800967c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fd5f 	bl	800a14c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	f003 0308 	and.w	r3, r3, #8
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d103      	bne.n	80096ba <HAL_UART_IRQHandler+0x17a>
 80096b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d04f      	beq.n	800975a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fc69 	bl	8009f92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d041      	beq.n	8009752 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3314      	adds	r3, #20
 80096d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80096e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3314      	adds	r3, #20
 80096f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80096fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80096fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1d9      	bne.n	80096ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d013      	beq.n	800974a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009726:	4a7e      	ldr	r2, [pc, #504]	@ (8009920 <HAL_UART_IRQHandler+0x3e0>)
 8009728:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972e:	4618      	mov	r0, r3
 8009730:	f7fa feee 	bl	8004510 <HAL_DMA_Abort_IT>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d016      	beq.n	8009768 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009748:	e00e      	b.n	8009768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f9a5 	bl	8009a9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009750:	e00a      	b.n	8009768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f9a1 	bl	8009a9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009758:	e006      	b.n	8009768 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f99d 	bl	8009a9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009766:	e175      	b.n	8009a54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009768:	bf00      	nop
    return;
 800976a:	e173      	b.n	8009a54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009770:	2b01      	cmp	r3, #1
 8009772:	f040 814f 	bne.w	8009a14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800977a:	f003 0310 	and.w	r3, r3, #16
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 8148 	beq.w	8009a14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009788:	f003 0310 	and.w	r3, r3, #16
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 8141 	beq.w	8009a14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009792:	2300      	movs	r3, #0
 8009794:	60bb      	str	r3, [r7, #8]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60bb      	str	r3, [r7, #8]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	60bb      	str	r3, [r7, #8]
 80097a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f000 80b6 	beq.w	8009924 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 8145 	beq.w	8009a58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097d6:	429a      	cmp	r2, r3
 80097d8:	f080 813e 	bcs.w	8009a58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	2b20      	cmp	r3, #32
 80097ec:	f000 8088 	beq.w	8009900 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	330c      	adds	r3, #12
 80097f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80097fe:	e853 3f00 	ldrex	r3, [r3]
 8009802:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009806:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800980a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800980e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	330c      	adds	r3, #12
 8009818:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800981c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009820:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009828:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1d9      	bne.n	80097f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3314      	adds	r3, #20
 8009842:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009844:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009846:	e853 3f00 	ldrex	r3, [r3]
 800984a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800984c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800984e:	f023 0301 	bic.w	r3, r3, #1
 8009852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3314      	adds	r3, #20
 800985c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009860:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009864:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009868:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800986c:	e841 2300 	strex	r3, r2, [r1]
 8009870:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009872:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009874:	2b00      	cmp	r3, #0
 8009876:	d1e1      	bne.n	800983c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3314      	adds	r3, #20
 800987e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800988a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800988e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	3314      	adds	r3, #20
 8009898:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800989c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800989e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098a2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098a4:	e841 2300 	strex	r3, r2, [r1]
 80098a8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d1e3      	bne.n	8009878 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2220      	movs	r2, #32
 80098b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	330c      	adds	r3, #12
 80098c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098d0:	f023 0310 	bic.w	r3, r3, #16
 80098d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	330c      	adds	r3, #12
 80098de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80098e2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80098e4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80098f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e3      	bne.n	80098be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fa fdcc 	bl	8004498 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800990e:	b29b      	uxth	r3, r3
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	b29b      	uxth	r3, r3
 8009914:	4619      	mov	r1, r3
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7f7 fd18 	bl	800134c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800991c:	e09c      	b.n	8009a58 <HAL_UART_IRQHandler+0x518>
 800991e:	bf00      	nop
 8009920:	0800a057 	.word	0x0800a057
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800992c:	b29b      	uxth	r3, r3
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009938:	b29b      	uxth	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 808e 	beq.w	8009a5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8089 	beq.w	8009a5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	330c      	adds	r3, #12
 8009950:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009954:	e853 3f00 	ldrex	r3, [r3]
 8009958:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800995a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800995c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009960:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	330c      	adds	r3, #12
 800996a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800996e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009970:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009972:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009974:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009976:	e841 2300 	strex	r3, r2, [r1]
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800997c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1e3      	bne.n	800994a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3314      	adds	r3, #20
 8009988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800998c:	e853 3f00 	ldrex	r3, [r3]
 8009990:	623b      	str	r3, [r7, #32]
   return(result);
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	f023 0301 	bic.w	r3, r3, #1
 8009998:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3314      	adds	r3, #20
 80099a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80099a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80099a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ae:	e841 2300 	strex	r3, r2, [r1]
 80099b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e3      	bne.n	8009982 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	330c      	adds	r3, #12
 80099ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f023 0310 	bic.w	r3, r3, #16
 80099de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	330c      	adds	r3, #12
 80099e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80099ec:	61fa      	str	r2, [r7, #28]
 80099ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	69b9      	ldr	r1, [r7, #24]
 80099f2:	69fa      	ldr	r2, [r7, #28]
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	617b      	str	r3, [r7, #20]
   return(result);
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e3      	bne.n	80099c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2202      	movs	r2, #2
 8009a04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7f7 fc9d 	bl	800134c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a12:	e023      	b.n	8009a5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <HAL_UART_IRQHandler+0x4f4>
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d003      	beq.n	8009a34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fb26 	bl	800a07e <UART_Transmit_IT>
    return;
 8009a32:	e014      	b.n	8009a5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00e      	beq.n	8009a5e <HAL_UART_IRQHandler+0x51e>
 8009a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 fb65 	bl	800a11c <UART_EndTransmit_IT>
    return;
 8009a52:	e004      	b.n	8009a5e <HAL_UART_IRQHandler+0x51e>
    return;
 8009a54:	bf00      	nop
 8009a56:	e002      	b.n	8009a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8009a58:	bf00      	nop
 8009a5a:	e000      	b.n	8009a5e <HAL_UART_IRQHandler+0x51e>
      return;
 8009a5c:	bf00      	nop
  }
}
 8009a5e:	37e8      	adds	r7, #232	@ 0xe8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bc80      	pop	{r7}
 8009a74:	4770      	bx	lr

08009a76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a76:	b480      	push	{r7}
 8009a78:	b083      	sub	sp, #12
 8009a7a:	af00      	add	r7, sp, #0
 8009a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a7e:	bf00      	nop
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bc80      	pop	{r7}
 8009a86:	4770      	bx	lr

08009a88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bc80      	pop	{r7}
 8009a98:	4770      	bx	lr

08009a9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a9a:	b480      	push	{r7}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009aa2:	bf00      	nop
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b090      	sub	sp, #64	@ 0x40
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d137      	bne.n	8009b38 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aca:	2200      	movs	r2, #0
 8009acc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3314      	adds	r3, #20
 8009ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	3314      	adds	r3, #20
 8009aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8009af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e5      	bne.n	8009ace <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	330c      	adds	r3, #12
 8009b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b18:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	330c      	adds	r3, #12
 8009b20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b22:	61fa      	str	r2, [r7, #28]
 8009b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	69b9      	ldr	r1, [r7, #24]
 8009b28:	69fa      	ldr	r2, [r7, #28]
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e5      	bne.n	8009b02 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b36:	e002      	b.n	8009b3e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009b38:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009b3a:	f7f7 fc25 	bl	8001388 <HAL_UART_TxCpltCallback>
}
 8009b3e:	bf00      	nop
 8009b40:	3740      	adds	r7, #64	@ 0x40
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff ff85 	bl	8009a64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b5a:	bf00      	nop
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b09c      	sub	sp, #112	@ 0x70
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b6e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d172      	bne.n	8009c64 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009b7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b80:	2200      	movs	r2, #0
 8009b82:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	330c      	adds	r3, #12
 8009b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b8e:	e853 3f00 	ldrex	r3, [r3]
 8009b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	330c      	adds	r3, #12
 8009ba2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009ba4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009ba6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009baa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bac:	e841 2300 	strex	r3, r2, [r1]
 8009bb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e5      	bne.n	8009b84 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3314      	adds	r3, #20
 8009bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc2:	e853 3f00 	ldrex	r3, [r3]
 8009bc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bca:	f023 0301 	bic.w	r3, r3, #1
 8009bce:	667b      	str	r3, [r7, #100]	@ 0x64
 8009bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3314      	adds	r3, #20
 8009bd6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009bd8:	647a      	str	r2, [r7, #68]	@ 0x44
 8009bda:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009bde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009be0:	e841 2300 	strex	r3, r2, [r1]
 8009be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d1e5      	bne.n	8009bb8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3314      	adds	r3, #20
 8009bf2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	e853 3f00 	ldrex	r3, [r3]
 8009bfa:	623b      	str	r3, [r7, #32]
   return(result);
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	3314      	adds	r3, #20
 8009c0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c14:	e841 2300 	strex	r3, r2, [r1]
 8009c18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1e5      	bne.n	8009bec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c22:	2220      	movs	r2, #32
 8009c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d119      	bne.n	8009c64 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	330c      	adds	r3, #12
 8009c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 0310 	bic.w	r3, r3, #16
 8009c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	330c      	adds	r3, #12
 8009c4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009c50:	61fa      	str	r2, [r7, #28]
 8009c52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	69b9      	ldr	r1, [r7, #24]
 8009c56:	69fa      	ldr	r2, [r7, #28]
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	617b      	str	r3, [r7, #20]
   return(result);
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e5      	bne.n	8009c30 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c66:	2200      	movs	r2, #0
 8009c68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d106      	bne.n	8009c80 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009c76:	4619      	mov	r1, r3
 8009c78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c7a:	f7f7 fb67 	bl	800134c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c7e:	e002      	b.n	8009c86 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009c80:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009c82:	f7ff fef8 	bl	8009a76 <HAL_UART_RxCpltCallback>
}
 8009c86:	bf00      	nop
 8009c88:	3770      	adds	r7, #112	@ 0x70
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c9a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d108      	bne.n	8009cbc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cae:	085b      	lsrs	r3, r3, #1
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7f7 fb49 	bl	800134c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cba:	e002      	b.n	8009cc2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7ff fee3 	bl	8009a88 <HAL_UART_RxHalfCpltCallback>
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b084      	sub	sp, #16
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cda:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	695b      	ldr	r3, [r3, #20]
 8009ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bf14      	ite	ne
 8009cea:	2301      	movne	r3, #1
 8009cec:	2300      	moveq	r3, #0
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	2b21      	cmp	r3, #33	@ 0x21
 8009cfc:	d108      	bne.n	8009d10 <UART_DMAError+0x46>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d005      	beq.n	8009d10 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009d0a:	68b8      	ldr	r0, [r7, #8]
 8009d0c:	f000 f91a 	bl	8009f44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	695b      	ldr	r3, [r3, #20]
 8009d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	bf14      	ite	ne
 8009d1e:	2301      	movne	r3, #1
 8009d20:	2300      	moveq	r3, #0
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	2b22      	cmp	r3, #34	@ 0x22
 8009d30:	d108      	bne.n	8009d44 <UART_DMAError+0x7a>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d005      	beq.n	8009d44 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009d3e:	68b8      	ldr	r0, [r7, #8]
 8009d40:	f000 f927 	bl	8009f92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d48:	f043 0210 	orr.w	r2, r3, #16
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d50:	68b8      	ldr	r0, [r7, #8]
 8009d52:	f7ff fea2 	bl	8009a9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b086      	sub	sp, #24
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d6e:	e03b      	b.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d76:	d037      	beq.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d78:	f7f9 fd9a 	bl	80038b0 <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	6a3a      	ldr	r2, [r7, #32]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d302      	bcc.n	8009d8e <UART_WaitOnFlagUntilTimeout+0x30>
 8009d88:	6a3b      	ldr	r3, [r7, #32]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e03a      	b.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f003 0304 	and.w	r3, r3, #4
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d023      	beq.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2b80      	cmp	r3, #128	@ 0x80
 8009da4:	d020      	beq.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2b40      	cmp	r3, #64	@ 0x40
 8009daa:	d01d      	beq.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 0308 	and.w	r3, r3, #8
 8009db6:	2b08      	cmp	r3, #8
 8009db8:	d116      	bne.n	8009de8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	617b      	str	r3, [r7, #20]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	617b      	str	r3, [r7, #20]
 8009dce:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f8de 	bl	8009f92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2208      	movs	r2, #8
 8009dda:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e00f      	b.n	8009e08 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	4013      	ands	r3, r2
 8009df2:	68ba      	ldr	r2, [r7, #8]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	bf0c      	ite	eq
 8009df8:	2301      	moveq	r3, #1
 8009dfa:	2300      	movne	r3, #0
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	461a      	mov	r2, r3
 8009e00:	79fb      	ldrb	r3, [r7, #7]
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d0b4      	beq.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b098      	sub	sp, #96	@ 0x60
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	88fa      	ldrh	r2, [r7, #6]
 8009e28:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2222      	movs	r2, #34	@ 0x22
 8009e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8009f38 <UART_Start_Receive_DMA+0x128>)
 8009e3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e44:	4a3d      	ldr	r2, [pc, #244]	@ (8009f3c <UART_Start_Receive_DMA+0x12c>)
 8009e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8009f40 <UART_Start_Receive_DMA+0x130>)
 8009e4e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e54:	2200      	movs	r2, #0
 8009e56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009e58:	f107 0308 	add.w	r3, r7, #8
 8009e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	f7fa fab2 	bl	80043d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009e74:	2300      	movs	r3, #0
 8009e76:	613b      	str	r3, [r7, #16]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	613b      	str	r3, [r7, #16]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	613b      	str	r3, [r7, #16]
 8009e88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d019      	beq.n	8009ec6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	330c      	adds	r3, #12
 8009e98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e9c:	e853 3f00 	ldrex	r3, [r3]
 8009ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	330c      	adds	r3, #12
 8009eb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009eb2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1e5      	bne.n	8009e92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	3314      	adds	r3, #20
 8009ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed0:	e853 3f00 	ldrex	r3, [r3]
 8009ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed8:	f043 0301 	orr.w	r3, r3, #1
 8009edc:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3314      	adds	r3, #20
 8009ee4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009ee6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e5      	bne.n	8009ec6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3314      	adds	r3, #20
 8009f00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	617b      	str	r3, [r7, #20]
   return(result);
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f10:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3314      	adds	r3, #20
 8009f18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009f1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f1e:	6a39      	ldr	r1, [r7, #32]
 8009f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f22:	e841 2300 	strex	r3, r2, [r1]
 8009f26:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e5      	bne.n	8009efa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3760      	adds	r7, #96	@ 0x60
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	08009b63 	.word	0x08009b63
 8009f3c:	08009c8f 	.word	0x08009c8f
 8009f40:	08009ccb 	.word	0x08009ccb

08009f44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b089      	sub	sp, #36	@ 0x24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	330c      	adds	r3, #12
 8009f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	e853 3f00 	ldrex	r3, [r3]
 8009f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f62:	61fb      	str	r3, [r7, #28]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	330c      	adds	r3, #12
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	61ba      	str	r2, [r7, #24]
 8009f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f70:	6979      	ldr	r1, [r7, #20]
 8009f72:	69ba      	ldr	r2, [r7, #24]
 8009f74:	e841 2300 	strex	r3, r2, [r1]
 8009f78:	613b      	str	r3, [r7, #16]
   return(result);
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e5      	bne.n	8009f4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009f88:	bf00      	nop
 8009f8a:	3724      	adds	r7, #36	@ 0x24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bc80      	pop	{r7}
 8009f90:	4770      	bx	lr

08009f92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f92:	b480      	push	{r7}
 8009f94:	b095      	sub	sp, #84	@ 0x54
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	330c      	adds	r3, #12
 8009fa0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	330c      	adds	r3, #12
 8009fb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fba:	643a      	str	r2, [r7, #64]	@ 0x40
 8009fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009fc0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e5      	bne.n	8009f9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3314      	adds	r3, #20
 8009fd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	f023 0301 	bic.w	r3, r3, #1
 8009fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3314      	adds	r3, #20
 8009fec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ff4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e5      	bne.n	8009fce <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a006:	2b01      	cmp	r3, #1
 800a008:	d119      	bne.n	800a03e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	330c      	adds	r3, #12
 800a010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	60bb      	str	r3, [r7, #8]
   return(result);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f023 0310 	bic.w	r3, r3, #16
 800a020:	647b      	str	r3, [r7, #68]	@ 0x44
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	330c      	adds	r3, #12
 800a028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a02a:	61ba      	str	r2, [r7, #24]
 800a02c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	6979      	ldr	r1, [r7, #20]
 800a030:	69ba      	ldr	r2, [r7, #24]
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	613b      	str	r3, [r7, #16]
   return(result);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1e5      	bne.n	800a00a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2220      	movs	r2, #32
 800a042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a04c:	bf00      	nop
 800a04e:	3754      	adds	r7, #84	@ 0x54
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr

0800a056 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b084      	sub	sp, #16
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a062:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7ff fd12 	bl	8009a9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a076:	bf00      	nop
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a07e:	b480      	push	{r7}
 800a080:	b085      	sub	sp, #20
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b21      	cmp	r3, #33	@ 0x21
 800a090:	d13e      	bne.n	800a110 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a09a:	d114      	bne.n	800a0c6 <UART_Transmit_IT+0x48>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d110      	bne.n	800a0c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	1c9a      	adds	r2, r3, #2
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	621a      	str	r2, [r3, #32]
 800a0c4:	e008      	b.n	800a0d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	1c59      	adds	r1, r3, #1
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	6211      	str	r1, [r2, #32]
 800a0d0:	781a      	ldrb	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10f      	bne.n	800a10c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a0fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68da      	ldr	r2, [r3, #12]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a10a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	e000      	b.n	800a112 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a110:	2302      	movs	r3, #2
  }
}
 800a112:	4618      	mov	r0, r3
 800a114:	3714      	adds	r7, #20
 800a116:	46bd      	mov	sp, r7
 800a118:	bc80      	pop	{r7}
 800a11a:	4770      	bx	lr

0800a11c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a132:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2220      	movs	r2, #32
 800a138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7f7 f923 	bl	8001388 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3708      	adds	r7, #8
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08c      	sub	sp, #48	@ 0x30
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	2b22      	cmp	r3, #34	@ 0x22
 800a15e:	f040 80ae 	bne.w	800a2be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a16a:	d117      	bne.n	800a19c <UART_Receive_IT+0x50>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d113      	bne.n	800a19c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	b29b      	uxth	r3, r3
 800a186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a18e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a194:	1c9a      	adds	r2, r3, #2
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	629a      	str	r2, [r3, #40]	@ 0x28
 800a19a:	e026      	b.n	800a1ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	689b      	ldr	r3, [r3, #8]
 800a1aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ae:	d007      	beq.n	800a1c0 <UART_Receive_IT+0x74>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <UART_Receive_IT+0x82>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d106      	bne.n	800a1ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ca:	701a      	strb	r2, [r3, #0]
 800a1cc:	e008      	b.n	800a1e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d15d      	bne.n	800a2ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f022 0220 	bic.w	r2, r2, #32
 800a20c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a21c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	695a      	ldr	r2, [r3, #20]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f022 0201 	bic.w	r2, r2, #1
 800a22c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2220      	movs	r2, #32
 800a232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a240:	2b01      	cmp	r3, #1
 800a242:	d135      	bne.n	800a2b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	330c      	adds	r3, #12
 800a250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	e853 3f00 	ldrex	r3, [r3]
 800a258:	613b      	str	r3, [r7, #16]
   return(result);
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	f023 0310 	bic.w	r3, r3, #16
 800a260:	627b      	str	r3, [r7, #36]	@ 0x24
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	330c      	adds	r3, #12
 800a268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a26a:	623a      	str	r2, [r7, #32]
 800a26c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26e:	69f9      	ldr	r1, [r7, #28]
 800a270:	6a3a      	ldr	r2, [r7, #32]
 800a272:	e841 2300 	strex	r3, r2, [r1]
 800a276:	61bb      	str	r3, [r7, #24]
   return(result);
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e5      	bne.n	800a24a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0310 	and.w	r3, r3, #16
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d10a      	bne.n	800a2a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a28c:	2300      	movs	r3, #0
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7f7 f84f 	bl	800134c <HAL_UARTEx_RxEventCallback>
 800a2ae:	e002      	b.n	800a2b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fbe0 	bl	8009a76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e002      	b.n	800a2c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	e000      	b.n	800a2c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a2be:	2302      	movs	r3, #2
  }
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3730      	adds	r7, #48	@ 0x30
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	691b      	ldr	r3, [r3, #16]
 800a2d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	68da      	ldr	r2, [r3, #12]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	430a      	orrs	r2, r1
 800a2e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	689a      	ldr	r2, [r3, #8]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	431a      	orrs	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800a302:	f023 030c 	bic.w	r3, r3, #12
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	6812      	ldr	r2, [r2, #0]
 800a30a:	68b9      	ldr	r1, [r7, #8]
 800a30c:	430b      	orrs	r3, r1
 800a30e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	699a      	ldr	r2, [r3, #24]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	430a      	orrs	r2, r1
 800a324:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a2c      	ldr	r2, [pc, #176]	@ (800a3dc <UART_SetConfig+0x114>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d103      	bne.n	800a338 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a330:	f7fd ff1e 	bl	8008170 <HAL_RCC_GetPCLK2Freq>
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	e002      	b.n	800a33e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a338:	f7fd ff06 	bl	8008148 <HAL_RCC_GetPCLK1Freq>
 800a33c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	4613      	mov	r3, r2
 800a342:	009b      	lsls	r3, r3, #2
 800a344:	4413      	add	r3, r2
 800a346:	009a      	lsls	r2, r3, #2
 800a348:	441a      	add	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	fbb2 f3f3 	udiv	r3, r2, r3
 800a354:	4a22      	ldr	r2, [pc, #136]	@ (800a3e0 <UART_SetConfig+0x118>)
 800a356:	fba2 2303 	umull	r2, r3, r2, r3
 800a35a:	095b      	lsrs	r3, r3, #5
 800a35c:	0119      	lsls	r1, r3, #4
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009a      	lsls	r2, r3, #2
 800a368:	441a      	add	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	fbb2 f2f3 	udiv	r2, r2, r3
 800a374:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e0 <UART_SetConfig+0x118>)
 800a376:	fba3 0302 	umull	r0, r3, r3, r2
 800a37a:	095b      	lsrs	r3, r3, #5
 800a37c:	2064      	movs	r0, #100	@ 0x64
 800a37e:	fb00 f303 	mul.w	r3, r0, r3
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	3332      	adds	r3, #50	@ 0x32
 800a388:	4a15      	ldr	r2, [pc, #84]	@ (800a3e0 <UART_SetConfig+0x118>)
 800a38a:	fba2 2303 	umull	r2, r3, r2, r3
 800a38e:	095b      	lsrs	r3, r3, #5
 800a390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a394:	4419      	add	r1, r3
 800a396:	68fa      	ldr	r2, [r7, #12]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009a      	lsls	r2, r3, #2
 800a3a0:	441a      	add	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	009b      	lsls	r3, r3, #2
 800a3a8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <UART_SetConfig+0x118>)
 800a3ae:	fba3 0302 	umull	r0, r3, r3, r2
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	2064      	movs	r0, #100	@ 0x64
 800a3b6:	fb00 f303 	mul.w	r3, r0, r3
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	011b      	lsls	r3, r3, #4
 800a3be:	3332      	adds	r3, #50	@ 0x32
 800a3c0:	4a07      	ldr	r2, [pc, #28]	@ (800a3e0 <UART_SetConfig+0x118>)
 800a3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c6:	095b      	lsrs	r3, r3, #5
 800a3c8:	f003 020f 	and.w	r2, r3, #15
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a3d4:	bf00      	nop
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	40013800 	.word	0x40013800
 800a3e0:	51eb851f 	.word	0x51eb851f

0800a3e4 <__cvt>:
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3ea:	461d      	mov	r5, r3
 800a3ec:	bfbb      	ittet	lt
 800a3ee:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a3f2:	461d      	movlt	r5, r3
 800a3f4:	2300      	movge	r3, #0
 800a3f6:	232d      	movlt	r3, #45	@ 0x2d
 800a3f8:	b088      	sub	sp, #32
 800a3fa:	4614      	mov	r4, r2
 800a3fc:	bfb8      	it	lt
 800a3fe:	4614      	movlt	r4, r2
 800a400:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a402:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a404:	7013      	strb	r3, [r2, #0]
 800a406:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a408:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a40c:	f023 0820 	bic.w	r8, r3, #32
 800a410:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a414:	d005      	beq.n	800a422 <__cvt+0x3e>
 800a416:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a41a:	d100      	bne.n	800a41e <__cvt+0x3a>
 800a41c:	3601      	adds	r6, #1
 800a41e:	2302      	movs	r3, #2
 800a420:	e000      	b.n	800a424 <__cvt+0x40>
 800a422:	2303      	movs	r3, #3
 800a424:	aa07      	add	r2, sp, #28
 800a426:	9204      	str	r2, [sp, #16]
 800a428:	aa06      	add	r2, sp, #24
 800a42a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a42e:	e9cd 3600 	strd	r3, r6, [sp]
 800a432:	4622      	mov	r2, r4
 800a434:	462b      	mov	r3, r5
 800a436:	f000 fe8f 	bl	800b158 <_dtoa_r>
 800a43a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a43e:	4607      	mov	r7, r0
 800a440:	d119      	bne.n	800a476 <__cvt+0x92>
 800a442:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a444:	07db      	lsls	r3, r3, #31
 800a446:	d50e      	bpl.n	800a466 <__cvt+0x82>
 800a448:	eb00 0906 	add.w	r9, r0, r6
 800a44c:	2200      	movs	r2, #0
 800a44e:	2300      	movs	r3, #0
 800a450:	4620      	mov	r0, r4
 800a452:	4629      	mov	r1, r5
 800a454:	f7f6 faa8 	bl	80009a8 <__aeabi_dcmpeq>
 800a458:	b108      	cbz	r0, 800a45e <__cvt+0x7a>
 800a45a:	f8cd 901c 	str.w	r9, [sp, #28]
 800a45e:	2230      	movs	r2, #48	@ 0x30
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	454b      	cmp	r3, r9
 800a464:	d31e      	bcc.n	800a4a4 <__cvt+0xc0>
 800a466:	4638      	mov	r0, r7
 800a468:	9b07      	ldr	r3, [sp, #28]
 800a46a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a46c:	1bdb      	subs	r3, r3, r7
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	b008      	add	sp, #32
 800a472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a476:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a47a:	eb00 0906 	add.w	r9, r0, r6
 800a47e:	d1e5      	bne.n	800a44c <__cvt+0x68>
 800a480:	7803      	ldrb	r3, [r0, #0]
 800a482:	2b30      	cmp	r3, #48	@ 0x30
 800a484:	d10a      	bne.n	800a49c <__cvt+0xb8>
 800a486:	2200      	movs	r2, #0
 800a488:	2300      	movs	r3, #0
 800a48a:	4620      	mov	r0, r4
 800a48c:	4629      	mov	r1, r5
 800a48e:	f7f6 fa8b 	bl	80009a8 <__aeabi_dcmpeq>
 800a492:	b918      	cbnz	r0, 800a49c <__cvt+0xb8>
 800a494:	f1c6 0601 	rsb	r6, r6, #1
 800a498:	f8ca 6000 	str.w	r6, [sl]
 800a49c:	f8da 3000 	ldr.w	r3, [sl]
 800a4a0:	4499      	add	r9, r3
 800a4a2:	e7d3      	b.n	800a44c <__cvt+0x68>
 800a4a4:	1c59      	adds	r1, r3, #1
 800a4a6:	9107      	str	r1, [sp, #28]
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	e7d9      	b.n	800a460 <__cvt+0x7c>

0800a4ac <__exponent>:
 800a4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ae:	2900      	cmp	r1, #0
 800a4b0:	bfb6      	itet	lt
 800a4b2:	232d      	movlt	r3, #45	@ 0x2d
 800a4b4:	232b      	movge	r3, #43	@ 0x2b
 800a4b6:	4249      	neglt	r1, r1
 800a4b8:	2909      	cmp	r1, #9
 800a4ba:	7002      	strb	r2, [r0, #0]
 800a4bc:	7043      	strb	r3, [r0, #1]
 800a4be:	dd29      	ble.n	800a514 <__exponent+0x68>
 800a4c0:	f10d 0307 	add.w	r3, sp, #7
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	270a      	movs	r7, #10
 800a4c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	fb07 1416 	mls	r4, r7, r6, r1
 800a4d2:	3430      	adds	r4, #48	@ 0x30
 800a4d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a4d8:	460c      	mov	r4, r1
 800a4da:	2c63      	cmp	r4, #99	@ 0x63
 800a4dc:	4631      	mov	r1, r6
 800a4de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a4e2:	dcf1      	bgt.n	800a4c8 <__exponent+0x1c>
 800a4e4:	3130      	adds	r1, #48	@ 0x30
 800a4e6:	1e94      	subs	r4, r2, #2
 800a4e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	1c41      	adds	r1, r0, #1
 800a4f0:	42ab      	cmp	r3, r5
 800a4f2:	d30a      	bcc.n	800a50a <__exponent+0x5e>
 800a4f4:	f10d 0309 	add.w	r3, sp, #9
 800a4f8:	1a9b      	subs	r3, r3, r2
 800a4fa:	42ac      	cmp	r4, r5
 800a4fc:	bf88      	it	hi
 800a4fe:	2300      	movhi	r3, #0
 800a500:	3302      	adds	r3, #2
 800a502:	4403      	add	r3, r0
 800a504:	1a18      	subs	r0, r3, r0
 800a506:	b003      	add	sp, #12
 800a508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a50e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a512:	e7ed      	b.n	800a4f0 <__exponent+0x44>
 800a514:	2330      	movs	r3, #48	@ 0x30
 800a516:	3130      	adds	r1, #48	@ 0x30
 800a518:	7083      	strb	r3, [r0, #2]
 800a51a:	70c1      	strb	r1, [r0, #3]
 800a51c:	1d03      	adds	r3, r0, #4
 800a51e:	e7f1      	b.n	800a504 <__exponent+0x58>

0800a520 <_printf_float>:
 800a520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a524:	b091      	sub	sp, #68	@ 0x44
 800a526:	460c      	mov	r4, r1
 800a528:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a52c:	4616      	mov	r6, r2
 800a52e:	461f      	mov	r7, r3
 800a530:	4605      	mov	r5, r0
 800a532:	f000 fcf5 	bl	800af20 <_localeconv_r>
 800a536:	6803      	ldr	r3, [r0, #0]
 800a538:	4618      	mov	r0, r3
 800a53a:	9308      	str	r3, [sp, #32]
 800a53c:	f7f5 fe08 	bl	8000150 <strlen>
 800a540:	2300      	movs	r3, #0
 800a542:	930e      	str	r3, [sp, #56]	@ 0x38
 800a544:	f8d8 3000 	ldr.w	r3, [r8]
 800a548:	9009      	str	r0, [sp, #36]	@ 0x24
 800a54a:	3307      	adds	r3, #7
 800a54c:	f023 0307 	bic.w	r3, r3, #7
 800a550:	f103 0208 	add.w	r2, r3, #8
 800a554:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a558:	f8d4 b000 	ldr.w	fp, [r4]
 800a55c:	f8c8 2000 	str.w	r2, [r8]
 800a560:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a564:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a56a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a572:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a576:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a57a:	4b9c      	ldr	r3, [pc, #624]	@ (800a7ec <_printf_float+0x2cc>)
 800a57c:	f7f6 fa46 	bl	8000a0c <__aeabi_dcmpun>
 800a580:	bb70      	cbnz	r0, 800a5e0 <_printf_float+0xc0>
 800a582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a58a:	4b98      	ldr	r3, [pc, #608]	@ (800a7ec <_printf_float+0x2cc>)
 800a58c:	f7f6 fa20 	bl	80009d0 <__aeabi_dcmple>
 800a590:	bb30      	cbnz	r0, 800a5e0 <_printf_float+0xc0>
 800a592:	2200      	movs	r2, #0
 800a594:	2300      	movs	r3, #0
 800a596:	4640      	mov	r0, r8
 800a598:	4649      	mov	r1, r9
 800a59a:	f7f6 fa0f 	bl	80009bc <__aeabi_dcmplt>
 800a59e:	b110      	cbz	r0, 800a5a6 <_printf_float+0x86>
 800a5a0:	232d      	movs	r3, #45	@ 0x2d
 800a5a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5a6:	4a92      	ldr	r2, [pc, #584]	@ (800a7f0 <_printf_float+0x2d0>)
 800a5a8:	4b92      	ldr	r3, [pc, #584]	@ (800a7f4 <_printf_float+0x2d4>)
 800a5aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5ae:	bf8c      	ite	hi
 800a5b0:	4690      	movhi	r8, r2
 800a5b2:	4698      	movls	r8, r3
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	f04f 0900 	mov.w	r9, #0
 800a5ba:	6123      	str	r3, [r4, #16]
 800a5bc:	f02b 0304 	bic.w	r3, fp, #4
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	4633      	mov	r3, r6
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	9700      	str	r7, [sp, #0]
 800a5ca:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a5cc:	f000 f9d4 	bl	800a978 <_printf_common>
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	f040 8090 	bne.w	800a6f6 <_printf_float+0x1d6>
 800a5d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5da:	b011      	add	sp, #68	@ 0x44
 800a5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e0:	4642      	mov	r2, r8
 800a5e2:	464b      	mov	r3, r9
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	4649      	mov	r1, r9
 800a5e8:	f7f6 fa10 	bl	8000a0c <__aeabi_dcmpun>
 800a5ec:	b148      	cbz	r0, 800a602 <_printf_float+0xe2>
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bfb8      	it	lt
 800a5f4:	232d      	movlt	r3, #45	@ 0x2d
 800a5f6:	4a80      	ldr	r2, [pc, #512]	@ (800a7f8 <_printf_float+0x2d8>)
 800a5f8:	bfb8      	it	lt
 800a5fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a5fe:	4b7f      	ldr	r3, [pc, #508]	@ (800a7fc <_printf_float+0x2dc>)
 800a600:	e7d3      	b.n	800a5aa <_printf_float+0x8a>
 800a602:	6863      	ldr	r3, [r4, #4]
 800a604:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	d13f      	bne.n	800a68c <_printf_float+0x16c>
 800a60c:	2306      	movs	r3, #6
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	9206      	str	r2, [sp, #24]
 800a61a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a61c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a620:	aa0d      	add	r2, sp, #52	@ 0x34
 800a622:	9203      	str	r2, [sp, #12]
 800a624:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a628:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a62c:	6863      	ldr	r3, [r4, #4]
 800a62e:	4642      	mov	r2, r8
 800a630:	9300      	str	r3, [sp, #0]
 800a632:	4628      	mov	r0, r5
 800a634:	464b      	mov	r3, r9
 800a636:	910a      	str	r1, [sp, #40]	@ 0x28
 800a638:	f7ff fed4 	bl	800a3e4 <__cvt>
 800a63c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a63e:	4680      	mov	r8, r0
 800a640:	2947      	cmp	r1, #71	@ 0x47
 800a642:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a644:	d128      	bne.n	800a698 <_printf_float+0x178>
 800a646:	1cc8      	adds	r0, r1, #3
 800a648:	db02      	blt.n	800a650 <_printf_float+0x130>
 800a64a:	6863      	ldr	r3, [r4, #4]
 800a64c:	4299      	cmp	r1, r3
 800a64e:	dd40      	ble.n	800a6d2 <_printf_float+0x1b2>
 800a650:	f1aa 0a02 	sub.w	sl, sl, #2
 800a654:	fa5f fa8a 	uxtb.w	sl, sl
 800a658:	4652      	mov	r2, sl
 800a65a:	3901      	subs	r1, #1
 800a65c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a660:	910d      	str	r1, [sp, #52]	@ 0x34
 800a662:	f7ff ff23 	bl	800a4ac <__exponent>
 800a666:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a668:	4681      	mov	r9, r0
 800a66a:	1813      	adds	r3, r2, r0
 800a66c:	2a01      	cmp	r2, #1
 800a66e:	6123      	str	r3, [r4, #16]
 800a670:	dc02      	bgt.n	800a678 <_printf_float+0x158>
 800a672:	6822      	ldr	r2, [r4, #0]
 800a674:	07d2      	lsls	r2, r2, #31
 800a676:	d501      	bpl.n	800a67c <_printf_float+0x15c>
 800a678:	3301      	adds	r3, #1
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a680:	2b00      	cmp	r3, #0
 800a682:	d09e      	beq.n	800a5c2 <_printf_float+0xa2>
 800a684:	232d      	movs	r3, #45	@ 0x2d
 800a686:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a68a:	e79a      	b.n	800a5c2 <_printf_float+0xa2>
 800a68c:	2947      	cmp	r1, #71	@ 0x47
 800a68e:	d1bf      	bne.n	800a610 <_printf_float+0xf0>
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1bd      	bne.n	800a610 <_printf_float+0xf0>
 800a694:	2301      	movs	r3, #1
 800a696:	e7ba      	b.n	800a60e <_printf_float+0xee>
 800a698:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a69c:	d9dc      	bls.n	800a658 <_printf_float+0x138>
 800a69e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6a2:	d118      	bne.n	800a6d6 <_printf_float+0x1b6>
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	6863      	ldr	r3, [r4, #4]
 800a6a8:	dd0b      	ble.n	800a6c2 <_printf_float+0x1a2>
 800a6aa:	6121      	str	r1, [r4, #16]
 800a6ac:	b913      	cbnz	r3, 800a6b4 <_printf_float+0x194>
 800a6ae:	6822      	ldr	r2, [r4, #0]
 800a6b0:	07d0      	lsls	r0, r2, #31
 800a6b2:	d502      	bpl.n	800a6ba <_printf_float+0x19a>
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	440b      	add	r3, r1
 800a6b8:	6123      	str	r3, [r4, #16]
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a6c0:	e7dc      	b.n	800a67c <_printf_float+0x15c>
 800a6c2:	b913      	cbnz	r3, 800a6ca <_printf_float+0x1aa>
 800a6c4:	6822      	ldr	r2, [r4, #0]
 800a6c6:	07d2      	lsls	r2, r2, #31
 800a6c8:	d501      	bpl.n	800a6ce <_printf_float+0x1ae>
 800a6ca:	3302      	adds	r3, #2
 800a6cc:	e7f4      	b.n	800a6b8 <_printf_float+0x198>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e7f2      	b.n	800a6b8 <_printf_float+0x198>
 800a6d2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a6d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	db05      	blt.n	800a6e8 <_printf_float+0x1c8>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	6121      	str	r1, [r4, #16]
 800a6e0:	07d8      	lsls	r0, r3, #31
 800a6e2:	d5ea      	bpl.n	800a6ba <_printf_float+0x19a>
 800a6e4:	1c4b      	adds	r3, r1, #1
 800a6e6:	e7e7      	b.n	800a6b8 <_printf_float+0x198>
 800a6e8:	2900      	cmp	r1, #0
 800a6ea:	bfcc      	ite	gt
 800a6ec:	2201      	movgt	r2, #1
 800a6ee:	f1c1 0202 	rsble	r2, r1, #2
 800a6f2:	4413      	add	r3, r2
 800a6f4:	e7e0      	b.n	800a6b8 <_printf_float+0x198>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	055a      	lsls	r2, r3, #21
 800a6fa:	d407      	bmi.n	800a70c <_printf_float+0x1ec>
 800a6fc:	6923      	ldr	r3, [r4, #16]
 800a6fe:	4642      	mov	r2, r8
 800a700:	4631      	mov	r1, r6
 800a702:	4628      	mov	r0, r5
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	d12b      	bne.n	800a762 <_printf_float+0x242>
 800a70a:	e764      	b.n	800a5d6 <_printf_float+0xb6>
 800a70c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a710:	f240 80dc 	bls.w	800a8cc <_printf_float+0x3ac>
 800a714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a718:	2200      	movs	r2, #0
 800a71a:	2300      	movs	r3, #0
 800a71c:	f7f6 f944 	bl	80009a8 <__aeabi_dcmpeq>
 800a720:	2800      	cmp	r0, #0
 800a722:	d033      	beq.n	800a78c <_printf_float+0x26c>
 800a724:	2301      	movs	r3, #1
 800a726:	4631      	mov	r1, r6
 800a728:	4628      	mov	r0, r5
 800a72a:	4a35      	ldr	r2, [pc, #212]	@ (800a800 <_printf_float+0x2e0>)
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	f43f af51 	beq.w	800a5d6 <_printf_float+0xb6>
 800a734:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a738:	4543      	cmp	r3, r8
 800a73a:	db02      	blt.n	800a742 <_printf_float+0x222>
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	07d8      	lsls	r0, r3, #31
 800a740:	d50f      	bpl.n	800a762 <_printf_float+0x242>
 800a742:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a746:	4631      	mov	r1, r6
 800a748:	4628      	mov	r0, r5
 800a74a:	47b8      	blx	r7
 800a74c:	3001      	adds	r0, #1
 800a74e:	f43f af42 	beq.w	800a5d6 <_printf_float+0xb6>
 800a752:	f04f 0900 	mov.w	r9, #0
 800a756:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a75a:	f104 0a1a 	add.w	sl, r4, #26
 800a75e:	45c8      	cmp	r8, r9
 800a760:	dc09      	bgt.n	800a776 <_printf_float+0x256>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	079b      	lsls	r3, r3, #30
 800a766:	f100 8102 	bmi.w	800a96e <_printf_float+0x44e>
 800a76a:	68e0      	ldr	r0, [r4, #12]
 800a76c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a76e:	4298      	cmp	r0, r3
 800a770:	bfb8      	it	lt
 800a772:	4618      	movlt	r0, r3
 800a774:	e731      	b.n	800a5da <_printf_float+0xba>
 800a776:	2301      	movs	r3, #1
 800a778:	4652      	mov	r2, sl
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	f43f af28 	beq.w	800a5d6 <_printf_float+0xb6>
 800a786:	f109 0901 	add.w	r9, r9, #1
 800a78a:	e7e8      	b.n	800a75e <_printf_float+0x23e>
 800a78c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dc38      	bgt.n	800a804 <_printf_float+0x2e4>
 800a792:	2301      	movs	r3, #1
 800a794:	4631      	mov	r1, r6
 800a796:	4628      	mov	r0, r5
 800a798:	4a19      	ldr	r2, [pc, #100]	@ (800a800 <_printf_float+0x2e0>)
 800a79a:	47b8      	blx	r7
 800a79c:	3001      	adds	r0, #1
 800a79e:	f43f af1a 	beq.w	800a5d6 <_printf_float+0xb6>
 800a7a2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a7a6:	ea59 0303 	orrs.w	r3, r9, r3
 800a7aa:	d102      	bne.n	800a7b2 <_printf_float+0x292>
 800a7ac:	6823      	ldr	r3, [r4, #0]
 800a7ae:	07d9      	lsls	r1, r3, #31
 800a7b0:	d5d7      	bpl.n	800a762 <_printf_float+0x242>
 800a7b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	47b8      	blx	r7
 800a7bc:	3001      	adds	r0, #1
 800a7be:	f43f af0a 	beq.w	800a5d6 <_printf_float+0xb6>
 800a7c2:	f04f 0a00 	mov.w	sl, #0
 800a7c6:	f104 0b1a 	add.w	fp, r4, #26
 800a7ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7cc:	425b      	negs	r3, r3
 800a7ce:	4553      	cmp	r3, sl
 800a7d0:	dc01      	bgt.n	800a7d6 <_printf_float+0x2b6>
 800a7d2:	464b      	mov	r3, r9
 800a7d4:	e793      	b.n	800a6fe <_printf_float+0x1de>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	465a      	mov	r2, fp
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b8      	blx	r7
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	f43f aef8 	beq.w	800a5d6 <_printf_float+0xb6>
 800a7e6:	f10a 0a01 	add.w	sl, sl, #1
 800a7ea:	e7ee      	b.n	800a7ca <_printf_float+0x2aa>
 800a7ec:	7fefffff 	.word	0x7fefffff
 800a7f0:	0800d5ee 	.word	0x0800d5ee
 800a7f4:	0800d5ea 	.word	0x0800d5ea
 800a7f8:	0800d5f6 	.word	0x0800d5f6
 800a7fc:	0800d5f2 	.word	0x0800d5f2
 800a800:	0800d5fa 	.word	0x0800d5fa
 800a804:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a806:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a80a:	4553      	cmp	r3, sl
 800a80c:	bfa8      	it	ge
 800a80e:	4653      	movge	r3, sl
 800a810:	2b00      	cmp	r3, #0
 800a812:	4699      	mov	r9, r3
 800a814:	dc36      	bgt.n	800a884 <_printf_float+0x364>
 800a816:	f04f 0b00 	mov.w	fp, #0
 800a81a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a81e:	f104 021a 	add.w	r2, r4, #26
 800a822:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a824:	930a      	str	r3, [sp, #40]	@ 0x28
 800a826:	eba3 0309 	sub.w	r3, r3, r9
 800a82a:	455b      	cmp	r3, fp
 800a82c:	dc31      	bgt.n	800a892 <_printf_float+0x372>
 800a82e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a830:	459a      	cmp	sl, r3
 800a832:	dc3a      	bgt.n	800a8aa <_printf_float+0x38a>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	07da      	lsls	r2, r3, #31
 800a838:	d437      	bmi.n	800a8aa <_printf_float+0x38a>
 800a83a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a83c:	ebaa 0903 	sub.w	r9, sl, r3
 800a840:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a842:	ebaa 0303 	sub.w	r3, sl, r3
 800a846:	4599      	cmp	r9, r3
 800a848:	bfa8      	it	ge
 800a84a:	4699      	movge	r9, r3
 800a84c:	f1b9 0f00 	cmp.w	r9, #0
 800a850:	dc33      	bgt.n	800a8ba <_printf_float+0x39a>
 800a852:	f04f 0800 	mov.w	r8, #0
 800a856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a85a:	f104 0b1a 	add.w	fp, r4, #26
 800a85e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a860:	ebaa 0303 	sub.w	r3, sl, r3
 800a864:	eba3 0309 	sub.w	r3, r3, r9
 800a868:	4543      	cmp	r3, r8
 800a86a:	f77f af7a 	ble.w	800a762 <_printf_float+0x242>
 800a86e:	2301      	movs	r3, #1
 800a870:	465a      	mov	r2, fp
 800a872:	4631      	mov	r1, r6
 800a874:	4628      	mov	r0, r5
 800a876:	47b8      	blx	r7
 800a878:	3001      	adds	r0, #1
 800a87a:	f43f aeac 	beq.w	800a5d6 <_printf_float+0xb6>
 800a87e:	f108 0801 	add.w	r8, r8, #1
 800a882:	e7ec      	b.n	800a85e <_printf_float+0x33e>
 800a884:	4642      	mov	r2, r8
 800a886:	4631      	mov	r1, r6
 800a888:	4628      	mov	r0, r5
 800a88a:	47b8      	blx	r7
 800a88c:	3001      	adds	r0, #1
 800a88e:	d1c2      	bne.n	800a816 <_printf_float+0x2f6>
 800a890:	e6a1      	b.n	800a5d6 <_printf_float+0xb6>
 800a892:	2301      	movs	r3, #1
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	920a      	str	r2, [sp, #40]	@ 0x28
 800a89a:	47b8      	blx	r7
 800a89c:	3001      	adds	r0, #1
 800a89e:	f43f ae9a 	beq.w	800a5d6 <_printf_float+0xb6>
 800a8a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8a4:	f10b 0b01 	add.w	fp, fp, #1
 800a8a8:	e7bb      	b.n	800a822 <_printf_float+0x302>
 800a8aa:	4631      	mov	r1, r6
 800a8ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	47b8      	blx	r7
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	d1c0      	bne.n	800a83a <_printf_float+0x31a>
 800a8b8:	e68d      	b.n	800a5d6 <_printf_float+0xb6>
 800a8ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8bc:	464b      	mov	r3, r9
 800a8be:	4631      	mov	r1, r6
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	4442      	add	r2, r8
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d1c3      	bne.n	800a852 <_printf_float+0x332>
 800a8ca:	e684      	b.n	800a5d6 <_printf_float+0xb6>
 800a8cc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a8d0:	f1ba 0f01 	cmp.w	sl, #1
 800a8d4:	dc01      	bgt.n	800a8da <_printf_float+0x3ba>
 800a8d6:	07db      	lsls	r3, r3, #31
 800a8d8:	d536      	bpl.n	800a948 <_printf_float+0x428>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	4642      	mov	r2, r8
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f43f ae76 	beq.w	800a5d6 <_printf_float+0xb6>
 800a8ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	47b8      	blx	r7
 800a8f4:	3001      	adds	r0, #1
 800a8f6:	f43f ae6e 	beq.w	800a5d6 <_printf_float+0xb6>
 800a8fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a8fe:	2200      	movs	r2, #0
 800a900:	2300      	movs	r3, #0
 800a902:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a906:	f7f6 f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800a90a:	b9c0      	cbnz	r0, 800a93e <_printf_float+0x41e>
 800a90c:	4653      	mov	r3, sl
 800a90e:	f108 0201 	add.w	r2, r8, #1
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	d10c      	bne.n	800a936 <_printf_float+0x416>
 800a91c:	e65b      	b.n	800a5d6 <_printf_float+0xb6>
 800a91e:	2301      	movs	r3, #1
 800a920:	465a      	mov	r2, fp
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	f43f ae54 	beq.w	800a5d6 <_printf_float+0xb6>
 800a92e:	f108 0801 	add.w	r8, r8, #1
 800a932:	45d0      	cmp	r8, sl
 800a934:	dbf3      	blt.n	800a91e <_printf_float+0x3fe>
 800a936:	464b      	mov	r3, r9
 800a938:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a93c:	e6e0      	b.n	800a700 <_printf_float+0x1e0>
 800a93e:	f04f 0800 	mov.w	r8, #0
 800a942:	f104 0b1a 	add.w	fp, r4, #26
 800a946:	e7f4      	b.n	800a932 <_printf_float+0x412>
 800a948:	2301      	movs	r3, #1
 800a94a:	4642      	mov	r2, r8
 800a94c:	e7e1      	b.n	800a912 <_printf_float+0x3f2>
 800a94e:	2301      	movs	r3, #1
 800a950:	464a      	mov	r2, r9
 800a952:	4631      	mov	r1, r6
 800a954:	4628      	mov	r0, r5
 800a956:	47b8      	blx	r7
 800a958:	3001      	adds	r0, #1
 800a95a:	f43f ae3c 	beq.w	800a5d6 <_printf_float+0xb6>
 800a95e:	f108 0801 	add.w	r8, r8, #1
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a966:	1a5b      	subs	r3, r3, r1
 800a968:	4543      	cmp	r3, r8
 800a96a:	dcf0      	bgt.n	800a94e <_printf_float+0x42e>
 800a96c:	e6fd      	b.n	800a76a <_printf_float+0x24a>
 800a96e:	f04f 0800 	mov.w	r8, #0
 800a972:	f104 0919 	add.w	r9, r4, #25
 800a976:	e7f4      	b.n	800a962 <_printf_float+0x442>

0800a978 <_printf_common>:
 800a978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a97c:	4616      	mov	r6, r2
 800a97e:	4698      	mov	r8, r3
 800a980:	688a      	ldr	r2, [r1, #8]
 800a982:	690b      	ldr	r3, [r1, #16]
 800a984:	4607      	mov	r7, r0
 800a986:	4293      	cmp	r3, r2
 800a988:	bfb8      	it	lt
 800a98a:	4613      	movlt	r3, r2
 800a98c:	6033      	str	r3, [r6, #0]
 800a98e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a992:	460c      	mov	r4, r1
 800a994:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a998:	b10a      	cbz	r2, 800a99e <_printf_common+0x26>
 800a99a:	3301      	adds	r3, #1
 800a99c:	6033      	str	r3, [r6, #0]
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	0699      	lsls	r1, r3, #26
 800a9a2:	bf42      	ittt	mi
 800a9a4:	6833      	ldrmi	r3, [r6, #0]
 800a9a6:	3302      	addmi	r3, #2
 800a9a8:	6033      	strmi	r3, [r6, #0]
 800a9aa:	6825      	ldr	r5, [r4, #0]
 800a9ac:	f015 0506 	ands.w	r5, r5, #6
 800a9b0:	d106      	bne.n	800a9c0 <_printf_common+0x48>
 800a9b2:	f104 0a19 	add.w	sl, r4, #25
 800a9b6:	68e3      	ldr	r3, [r4, #12]
 800a9b8:	6832      	ldr	r2, [r6, #0]
 800a9ba:	1a9b      	subs	r3, r3, r2
 800a9bc:	42ab      	cmp	r3, r5
 800a9be:	dc2b      	bgt.n	800aa18 <_printf_common+0xa0>
 800a9c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9c4:	6822      	ldr	r2, [r4, #0]
 800a9c6:	3b00      	subs	r3, #0
 800a9c8:	bf18      	it	ne
 800a9ca:	2301      	movne	r3, #1
 800a9cc:	0692      	lsls	r2, r2, #26
 800a9ce:	d430      	bmi.n	800aa32 <_printf_common+0xba>
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	4638      	mov	r0, r7
 800a9d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a9d8:	47c8      	blx	r9
 800a9da:	3001      	adds	r0, #1
 800a9dc:	d023      	beq.n	800aa26 <_printf_common+0xae>
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	6922      	ldr	r2, [r4, #16]
 800a9e2:	f003 0306 	and.w	r3, r3, #6
 800a9e6:	2b04      	cmp	r3, #4
 800a9e8:	bf14      	ite	ne
 800a9ea:	2500      	movne	r5, #0
 800a9ec:	6833      	ldreq	r3, [r6, #0]
 800a9ee:	f04f 0600 	mov.w	r6, #0
 800a9f2:	bf08      	it	eq
 800a9f4:	68e5      	ldreq	r5, [r4, #12]
 800a9f6:	f104 041a 	add.w	r4, r4, #26
 800a9fa:	bf08      	it	eq
 800a9fc:	1aed      	subeq	r5, r5, r3
 800a9fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa02:	bf08      	it	eq
 800aa04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	bfc4      	itt	gt
 800aa0c:	1a9b      	subgt	r3, r3, r2
 800aa0e:	18ed      	addgt	r5, r5, r3
 800aa10:	42b5      	cmp	r5, r6
 800aa12:	d11a      	bne.n	800aa4a <_printf_common+0xd2>
 800aa14:	2000      	movs	r0, #0
 800aa16:	e008      	b.n	800aa2a <_printf_common+0xb2>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	4641      	mov	r1, r8
 800aa1e:	4638      	mov	r0, r7
 800aa20:	47c8      	blx	r9
 800aa22:	3001      	adds	r0, #1
 800aa24:	d103      	bne.n	800aa2e <_printf_common+0xb6>
 800aa26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2e:	3501      	adds	r5, #1
 800aa30:	e7c1      	b.n	800a9b6 <_printf_common+0x3e>
 800aa32:	2030      	movs	r0, #48	@ 0x30
 800aa34:	18e1      	adds	r1, r4, r3
 800aa36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa3a:	1c5a      	adds	r2, r3, #1
 800aa3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa40:	4422      	add	r2, r4
 800aa42:	3302      	adds	r3, #2
 800aa44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa48:	e7c2      	b.n	800a9d0 <_printf_common+0x58>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4622      	mov	r2, r4
 800aa4e:	4641      	mov	r1, r8
 800aa50:	4638      	mov	r0, r7
 800aa52:	47c8      	blx	r9
 800aa54:	3001      	adds	r0, #1
 800aa56:	d0e6      	beq.n	800aa26 <_printf_common+0xae>
 800aa58:	3601      	adds	r6, #1
 800aa5a:	e7d9      	b.n	800aa10 <_printf_common+0x98>

0800aa5c <_printf_i>:
 800aa5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa60:	7e0f      	ldrb	r7, [r1, #24]
 800aa62:	4691      	mov	r9, r2
 800aa64:	2f78      	cmp	r7, #120	@ 0x78
 800aa66:	4680      	mov	r8, r0
 800aa68:	460c      	mov	r4, r1
 800aa6a:	469a      	mov	sl, r3
 800aa6c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa72:	d807      	bhi.n	800aa84 <_printf_i+0x28>
 800aa74:	2f62      	cmp	r7, #98	@ 0x62
 800aa76:	d80a      	bhi.n	800aa8e <_printf_i+0x32>
 800aa78:	2f00      	cmp	r7, #0
 800aa7a:	f000 80d1 	beq.w	800ac20 <_printf_i+0x1c4>
 800aa7e:	2f58      	cmp	r7, #88	@ 0x58
 800aa80:	f000 80b8 	beq.w	800abf4 <_printf_i+0x198>
 800aa84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa8c:	e03a      	b.n	800ab04 <_printf_i+0xa8>
 800aa8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa92:	2b15      	cmp	r3, #21
 800aa94:	d8f6      	bhi.n	800aa84 <_printf_i+0x28>
 800aa96:	a101      	add	r1, pc, #4	@ (adr r1, 800aa9c <_printf_i+0x40>)
 800aa98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa9c:	0800aaf5 	.word	0x0800aaf5
 800aaa0:	0800ab09 	.word	0x0800ab09
 800aaa4:	0800aa85 	.word	0x0800aa85
 800aaa8:	0800aa85 	.word	0x0800aa85
 800aaac:	0800aa85 	.word	0x0800aa85
 800aab0:	0800aa85 	.word	0x0800aa85
 800aab4:	0800ab09 	.word	0x0800ab09
 800aab8:	0800aa85 	.word	0x0800aa85
 800aabc:	0800aa85 	.word	0x0800aa85
 800aac0:	0800aa85 	.word	0x0800aa85
 800aac4:	0800aa85 	.word	0x0800aa85
 800aac8:	0800ac07 	.word	0x0800ac07
 800aacc:	0800ab33 	.word	0x0800ab33
 800aad0:	0800abc1 	.word	0x0800abc1
 800aad4:	0800aa85 	.word	0x0800aa85
 800aad8:	0800aa85 	.word	0x0800aa85
 800aadc:	0800ac29 	.word	0x0800ac29
 800aae0:	0800aa85 	.word	0x0800aa85
 800aae4:	0800ab33 	.word	0x0800ab33
 800aae8:	0800aa85 	.word	0x0800aa85
 800aaec:	0800aa85 	.word	0x0800aa85
 800aaf0:	0800abc9 	.word	0x0800abc9
 800aaf4:	6833      	ldr	r3, [r6, #0]
 800aaf6:	1d1a      	adds	r2, r3, #4
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6032      	str	r2, [r6, #0]
 800aafc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab04:	2301      	movs	r3, #1
 800ab06:	e09c      	b.n	800ac42 <_printf_i+0x1e6>
 800ab08:	6833      	ldr	r3, [r6, #0]
 800ab0a:	6820      	ldr	r0, [r4, #0]
 800ab0c:	1d19      	adds	r1, r3, #4
 800ab0e:	6031      	str	r1, [r6, #0]
 800ab10:	0606      	lsls	r6, r0, #24
 800ab12:	d501      	bpl.n	800ab18 <_printf_i+0xbc>
 800ab14:	681d      	ldr	r5, [r3, #0]
 800ab16:	e003      	b.n	800ab20 <_printf_i+0xc4>
 800ab18:	0645      	lsls	r5, r0, #25
 800ab1a:	d5fb      	bpl.n	800ab14 <_printf_i+0xb8>
 800ab1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab20:	2d00      	cmp	r5, #0
 800ab22:	da03      	bge.n	800ab2c <_printf_i+0xd0>
 800ab24:	232d      	movs	r3, #45	@ 0x2d
 800ab26:	426d      	negs	r5, r5
 800ab28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab2c:	230a      	movs	r3, #10
 800ab2e:	4858      	ldr	r0, [pc, #352]	@ (800ac90 <_printf_i+0x234>)
 800ab30:	e011      	b.n	800ab56 <_printf_i+0xfa>
 800ab32:	6821      	ldr	r1, [r4, #0]
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	0608      	lsls	r0, r1, #24
 800ab38:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab3c:	d402      	bmi.n	800ab44 <_printf_i+0xe8>
 800ab3e:	0649      	lsls	r1, r1, #25
 800ab40:	bf48      	it	mi
 800ab42:	b2ad      	uxthmi	r5, r5
 800ab44:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab46:	6033      	str	r3, [r6, #0]
 800ab48:	bf14      	ite	ne
 800ab4a:	230a      	movne	r3, #10
 800ab4c:	2308      	moveq	r3, #8
 800ab4e:	4850      	ldr	r0, [pc, #320]	@ (800ac90 <_printf_i+0x234>)
 800ab50:	2100      	movs	r1, #0
 800ab52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab56:	6866      	ldr	r6, [r4, #4]
 800ab58:	2e00      	cmp	r6, #0
 800ab5a:	60a6      	str	r6, [r4, #8]
 800ab5c:	db05      	blt.n	800ab6a <_printf_i+0x10e>
 800ab5e:	6821      	ldr	r1, [r4, #0]
 800ab60:	432e      	orrs	r6, r5
 800ab62:	f021 0104 	bic.w	r1, r1, #4
 800ab66:	6021      	str	r1, [r4, #0]
 800ab68:	d04b      	beq.n	800ac02 <_printf_i+0x1a6>
 800ab6a:	4616      	mov	r6, r2
 800ab6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab70:	fb03 5711 	mls	r7, r3, r1, r5
 800ab74:	5dc7      	ldrb	r7, [r0, r7]
 800ab76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab7a:	462f      	mov	r7, r5
 800ab7c:	42bb      	cmp	r3, r7
 800ab7e:	460d      	mov	r5, r1
 800ab80:	d9f4      	bls.n	800ab6c <_printf_i+0x110>
 800ab82:	2b08      	cmp	r3, #8
 800ab84:	d10b      	bne.n	800ab9e <_printf_i+0x142>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	07df      	lsls	r7, r3, #31
 800ab8a:	d508      	bpl.n	800ab9e <_printf_i+0x142>
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	6861      	ldr	r1, [r4, #4]
 800ab90:	4299      	cmp	r1, r3
 800ab92:	bfde      	ittt	le
 800ab94:	2330      	movle	r3, #48	@ 0x30
 800ab96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ab9e:	1b92      	subs	r2, r2, r6
 800aba0:	6122      	str	r2, [r4, #16]
 800aba2:	464b      	mov	r3, r9
 800aba4:	4621      	mov	r1, r4
 800aba6:	4640      	mov	r0, r8
 800aba8:	f8cd a000 	str.w	sl, [sp]
 800abac:	aa03      	add	r2, sp, #12
 800abae:	f7ff fee3 	bl	800a978 <_printf_common>
 800abb2:	3001      	adds	r0, #1
 800abb4:	d14a      	bne.n	800ac4c <_printf_i+0x1f0>
 800abb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abba:	b004      	add	sp, #16
 800abbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	f043 0320 	orr.w	r3, r3, #32
 800abc6:	6023      	str	r3, [r4, #0]
 800abc8:	2778      	movs	r7, #120	@ 0x78
 800abca:	4832      	ldr	r0, [pc, #200]	@ (800ac94 <_printf_i+0x238>)
 800abcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	6831      	ldr	r1, [r6, #0]
 800abd4:	061f      	lsls	r7, r3, #24
 800abd6:	f851 5b04 	ldr.w	r5, [r1], #4
 800abda:	d402      	bmi.n	800abe2 <_printf_i+0x186>
 800abdc:	065f      	lsls	r7, r3, #25
 800abde:	bf48      	it	mi
 800abe0:	b2ad      	uxthmi	r5, r5
 800abe2:	6031      	str	r1, [r6, #0]
 800abe4:	07d9      	lsls	r1, r3, #31
 800abe6:	bf44      	itt	mi
 800abe8:	f043 0320 	orrmi.w	r3, r3, #32
 800abec:	6023      	strmi	r3, [r4, #0]
 800abee:	b11d      	cbz	r5, 800abf8 <_printf_i+0x19c>
 800abf0:	2310      	movs	r3, #16
 800abf2:	e7ad      	b.n	800ab50 <_printf_i+0xf4>
 800abf4:	4826      	ldr	r0, [pc, #152]	@ (800ac90 <_printf_i+0x234>)
 800abf6:	e7e9      	b.n	800abcc <_printf_i+0x170>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	f023 0320 	bic.w	r3, r3, #32
 800abfe:	6023      	str	r3, [r4, #0]
 800ac00:	e7f6      	b.n	800abf0 <_printf_i+0x194>
 800ac02:	4616      	mov	r6, r2
 800ac04:	e7bd      	b.n	800ab82 <_printf_i+0x126>
 800ac06:	6833      	ldr	r3, [r6, #0]
 800ac08:	6825      	ldr	r5, [r4, #0]
 800ac0a:	1d18      	adds	r0, r3, #4
 800ac0c:	6961      	ldr	r1, [r4, #20]
 800ac0e:	6030      	str	r0, [r6, #0]
 800ac10:	062e      	lsls	r6, r5, #24
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	d501      	bpl.n	800ac1a <_printf_i+0x1be>
 800ac16:	6019      	str	r1, [r3, #0]
 800ac18:	e002      	b.n	800ac20 <_printf_i+0x1c4>
 800ac1a:	0668      	lsls	r0, r5, #25
 800ac1c:	d5fb      	bpl.n	800ac16 <_printf_i+0x1ba>
 800ac1e:	8019      	strh	r1, [r3, #0]
 800ac20:	2300      	movs	r3, #0
 800ac22:	4616      	mov	r6, r2
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	e7bc      	b.n	800aba2 <_printf_i+0x146>
 800ac28:	6833      	ldr	r3, [r6, #0]
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	1d1a      	adds	r2, r3, #4
 800ac2e:	6032      	str	r2, [r6, #0]
 800ac30:	681e      	ldr	r6, [r3, #0]
 800ac32:	6862      	ldr	r2, [r4, #4]
 800ac34:	4630      	mov	r0, r6
 800ac36:	f000 f9ea 	bl	800b00e <memchr>
 800ac3a:	b108      	cbz	r0, 800ac40 <_printf_i+0x1e4>
 800ac3c:	1b80      	subs	r0, r0, r6
 800ac3e:	6060      	str	r0, [r4, #4]
 800ac40:	6863      	ldr	r3, [r4, #4]
 800ac42:	6123      	str	r3, [r4, #16]
 800ac44:	2300      	movs	r3, #0
 800ac46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac4a:	e7aa      	b.n	800aba2 <_printf_i+0x146>
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	4649      	mov	r1, r9
 800ac50:	4640      	mov	r0, r8
 800ac52:	6923      	ldr	r3, [r4, #16]
 800ac54:	47d0      	blx	sl
 800ac56:	3001      	adds	r0, #1
 800ac58:	d0ad      	beq.n	800abb6 <_printf_i+0x15a>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	079b      	lsls	r3, r3, #30
 800ac5e:	d413      	bmi.n	800ac88 <_printf_i+0x22c>
 800ac60:	68e0      	ldr	r0, [r4, #12]
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	4298      	cmp	r0, r3
 800ac66:	bfb8      	it	lt
 800ac68:	4618      	movlt	r0, r3
 800ac6a:	e7a6      	b.n	800abba <_printf_i+0x15e>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	4632      	mov	r2, r6
 800ac70:	4649      	mov	r1, r9
 800ac72:	4640      	mov	r0, r8
 800ac74:	47d0      	blx	sl
 800ac76:	3001      	adds	r0, #1
 800ac78:	d09d      	beq.n	800abb6 <_printf_i+0x15a>
 800ac7a:	3501      	adds	r5, #1
 800ac7c:	68e3      	ldr	r3, [r4, #12]
 800ac7e:	9903      	ldr	r1, [sp, #12]
 800ac80:	1a5b      	subs	r3, r3, r1
 800ac82:	42ab      	cmp	r3, r5
 800ac84:	dcf2      	bgt.n	800ac6c <_printf_i+0x210>
 800ac86:	e7eb      	b.n	800ac60 <_printf_i+0x204>
 800ac88:	2500      	movs	r5, #0
 800ac8a:	f104 0619 	add.w	r6, r4, #25
 800ac8e:	e7f5      	b.n	800ac7c <_printf_i+0x220>
 800ac90:	0800d5fc 	.word	0x0800d5fc
 800ac94:	0800d60d 	.word	0x0800d60d

0800ac98 <std>:
 800ac98:	2300      	movs	r3, #0
 800ac9a:	b510      	push	{r4, lr}
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	e9c0 3300 	strd	r3, r3, [r0]
 800aca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aca6:	6083      	str	r3, [r0, #8]
 800aca8:	8181      	strh	r1, [r0, #12]
 800acaa:	6643      	str	r3, [r0, #100]	@ 0x64
 800acac:	81c2      	strh	r2, [r0, #14]
 800acae:	6183      	str	r3, [r0, #24]
 800acb0:	4619      	mov	r1, r3
 800acb2:	2208      	movs	r2, #8
 800acb4:	305c      	adds	r0, #92	@ 0x5c
 800acb6:	f000 f92a 	bl	800af0e <memset>
 800acba:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <std+0x58>)
 800acbc:	6224      	str	r4, [r4, #32]
 800acbe:	6263      	str	r3, [r4, #36]	@ 0x24
 800acc0:	4b0c      	ldr	r3, [pc, #48]	@ (800acf4 <std+0x5c>)
 800acc2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acc4:	4b0c      	ldr	r3, [pc, #48]	@ (800acf8 <std+0x60>)
 800acc6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acc8:	4b0c      	ldr	r3, [pc, #48]	@ (800acfc <std+0x64>)
 800acca:	6323      	str	r3, [r4, #48]	@ 0x30
 800accc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad00 <std+0x68>)
 800acce:	429c      	cmp	r4, r3
 800acd0:	d006      	beq.n	800ace0 <std+0x48>
 800acd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800acd6:	4294      	cmp	r4, r2
 800acd8:	d002      	beq.n	800ace0 <std+0x48>
 800acda:	33d0      	adds	r3, #208	@ 0xd0
 800acdc:	429c      	cmp	r4, r3
 800acde:	d105      	bne.n	800acec <std+0x54>
 800ace0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ace4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace8:	f000 b98e 	b.w	800b008 <__retarget_lock_init_recursive>
 800acec:	bd10      	pop	{r4, pc}
 800acee:	bf00      	nop
 800acf0:	0800ae89 	.word	0x0800ae89
 800acf4:	0800aeab 	.word	0x0800aeab
 800acf8:	0800aee3 	.word	0x0800aee3
 800acfc:	0800af07 	.word	0x0800af07
 800ad00:	2000082c 	.word	0x2000082c

0800ad04 <stdio_exit_handler>:
 800ad04:	4a02      	ldr	r2, [pc, #8]	@ (800ad10 <stdio_exit_handler+0xc>)
 800ad06:	4903      	ldr	r1, [pc, #12]	@ (800ad14 <stdio_exit_handler+0x10>)
 800ad08:	4803      	ldr	r0, [pc, #12]	@ (800ad18 <stdio_exit_handler+0x14>)
 800ad0a:	f000 b869 	b.w	800ade0 <_fwalk_sglue>
 800ad0e:	bf00      	nop
 800ad10:	2000000c 	.word	0x2000000c
 800ad14:	0800c9a1 	.word	0x0800c9a1
 800ad18:	2000001c 	.word	0x2000001c

0800ad1c <cleanup_stdio>:
 800ad1c:	6841      	ldr	r1, [r0, #4]
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	@ (800ad50 <cleanup_stdio+0x34>)
 800ad20:	b510      	push	{r4, lr}
 800ad22:	4299      	cmp	r1, r3
 800ad24:	4604      	mov	r4, r0
 800ad26:	d001      	beq.n	800ad2c <cleanup_stdio+0x10>
 800ad28:	f001 fe3a 	bl	800c9a0 <_fflush_r>
 800ad2c:	68a1      	ldr	r1, [r4, #8]
 800ad2e:	4b09      	ldr	r3, [pc, #36]	@ (800ad54 <cleanup_stdio+0x38>)
 800ad30:	4299      	cmp	r1, r3
 800ad32:	d002      	beq.n	800ad3a <cleanup_stdio+0x1e>
 800ad34:	4620      	mov	r0, r4
 800ad36:	f001 fe33 	bl	800c9a0 <_fflush_r>
 800ad3a:	68e1      	ldr	r1, [r4, #12]
 800ad3c:	4b06      	ldr	r3, [pc, #24]	@ (800ad58 <cleanup_stdio+0x3c>)
 800ad3e:	4299      	cmp	r1, r3
 800ad40:	d004      	beq.n	800ad4c <cleanup_stdio+0x30>
 800ad42:	4620      	mov	r0, r4
 800ad44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad48:	f001 be2a 	b.w	800c9a0 <_fflush_r>
 800ad4c:	bd10      	pop	{r4, pc}
 800ad4e:	bf00      	nop
 800ad50:	2000082c 	.word	0x2000082c
 800ad54:	20000894 	.word	0x20000894
 800ad58:	200008fc 	.word	0x200008fc

0800ad5c <global_stdio_init.part.0>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ad8c <global_stdio_init.part.0+0x30>)
 800ad60:	4c0b      	ldr	r4, [pc, #44]	@ (800ad90 <global_stdio_init.part.0+0x34>)
 800ad62:	4a0c      	ldr	r2, [pc, #48]	@ (800ad94 <global_stdio_init.part.0+0x38>)
 800ad64:	4620      	mov	r0, r4
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	2104      	movs	r1, #4
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f7ff ff94 	bl	800ac98 <std>
 800ad70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad74:	2201      	movs	r2, #1
 800ad76:	2109      	movs	r1, #9
 800ad78:	f7ff ff8e 	bl	800ac98 <std>
 800ad7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad80:	2202      	movs	r2, #2
 800ad82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad86:	2112      	movs	r1, #18
 800ad88:	f7ff bf86 	b.w	800ac98 <std>
 800ad8c:	20000964 	.word	0x20000964
 800ad90:	2000082c 	.word	0x2000082c
 800ad94:	0800ad05 	.word	0x0800ad05

0800ad98 <__sfp_lock_acquire>:
 800ad98:	4801      	ldr	r0, [pc, #4]	@ (800ada0 <__sfp_lock_acquire+0x8>)
 800ad9a:	f000 b936 	b.w	800b00a <__retarget_lock_acquire_recursive>
 800ad9e:	bf00      	nop
 800ada0:	2000096d 	.word	0x2000096d

0800ada4 <__sfp_lock_release>:
 800ada4:	4801      	ldr	r0, [pc, #4]	@ (800adac <__sfp_lock_release+0x8>)
 800ada6:	f000 b931 	b.w	800b00c <__retarget_lock_release_recursive>
 800adaa:	bf00      	nop
 800adac:	2000096d 	.word	0x2000096d

0800adb0 <__sinit>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	4604      	mov	r4, r0
 800adb4:	f7ff fff0 	bl	800ad98 <__sfp_lock_acquire>
 800adb8:	6a23      	ldr	r3, [r4, #32]
 800adba:	b11b      	cbz	r3, 800adc4 <__sinit+0x14>
 800adbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adc0:	f7ff bff0 	b.w	800ada4 <__sfp_lock_release>
 800adc4:	4b04      	ldr	r3, [pc, #16]	@ (800add8 <__sinit+0x28>)
 800adc6:	6223      	str	r3, [r4, #32]
 800adc8:	4b04      	ldr	r3, [pc, #16]	@ (800addc <__sinit+0x2c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1f5      	bne.n	800adbc <__sinit+0xc>
 800add0:	f7ff ffc4 	bl	800ad5c <global_stdio_init.part.0>
 800add4:	e7f2      	b.n	800adbc <__sinit+0xc>
 800add6:	bf00      	nop
 800add8:	0800ad1d 	.word	0x0800ad1d
 800addc:	20000964 	.word	0x20000964

0800ade0 <_fwalk_sglue>:
 800ade0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade4:	4607      	mov	r7, r0
 800ade6:	4688      	mov	r8, r1
 800ade8:	4614      	mov	r4, r2
 800adea:	2600      	movs	r6, #0
 800adec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adf0:	f1b9 0901 	subs.w	r9, r9, #1
 800adf4:	d505      	bpl.n	800ae02 <_fwalk_sglue+0x22>
 800adf6:	6824      	ldr	r4, [r4, #0]
 800adf8:	2c00      	cmp	r4, #0
 800adfa:	d1f7      	bne.n	800adec <_fwalk_sglue+0xc>
 800adfc:	4630      	mov	r0, r6
 800adfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae02:	89ab      	ldrh	r3, [r5, #12]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d907      	bls.n	800ae18 <_fwalk_sglue+0x38>
 800ae08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	d003      	beq.n	800ae18 <_fwalk_sglue+0x38>
 800ae10:	4629      	mov	r1, r5
 800ae12:	4638      	mov	r0, r7
 800ae14:	47c0      	blx	r8
 800ae16:	4306      	orrs	r6, r0
 800ae18:	3568      	adds	r5, #104	@ 0x68
 800ae1a:	e7e9      	b.n	800adf0 <_fwalk_sglue+0x10>

0800ae1c <sniprintf>:
 800ae1c:	b40c      	push	{r2, r3}
 800ae1e:	b530      	push	{r4, r5, lr}
 800ae20:	4b18      	ldr	r3, [pc, #96]	@ (800ae84 <sniprintf+0x68>)
 800ae22:	1e0c      	subs	r4, r1, #0
 800ae24:	681d      	ldr	r5, [r3, #0]
 800ae26:	b09d      	sub	sp, #116	@ 0x74
 800ae28:	da08      	bge.n	800ae3c <sniprintf+0x20>
 800ae2a:	238b      	movs	r3, #139	@ 0x8b
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae30:	602b      	str	r3, [r5, #0]
 800ae32:	b01d      	add	sp, #116	@ 0x74
 800ae34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae38:	b002      	add	sp, #8
 800ae3a:	4770      	bx	lr
 800ae3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ae40:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ae44:	f04f 0300 	mov.w	r3, #0
 800ae48:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ae4a:	bf0c      	ite	eq
 800ae4c:	4623      	moveq	r3, r4
 800ae4e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	9307      	str	r3, [sp, #28]
 800ae56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ae5a:	9002      	str	r0, [sp, #8]
 800ae5c:	9006      	str	r0, [sp, #24]
 800ae5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ae62:	4628      	mov	r0, r5
 800ae64:	ab21      	add	r3, sp, #132	@ 0x84
 800ae66:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ae68:	a902      	add	r1, sp, #8
 800ae6a:	9301      	str	r3, [sp, #4]
 800ae6c:	f001 fc1c 	bl	800c6a8 <_svfiprintf_r>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	bfbc      	itt	lt
 800ae74:	238b      	movlt	r3, #139	@ 0x8b
 800ae76:	602b      	strlt	r3, [r5, #0]
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	d0da      	beq.n	800ae32 <sniprintf+0x16>
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	9b02      	ldr	r3, [sp, #8]
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	e7d6      	b.n	800ae32 <sniprintf+0x16>
 800ae84:	20000018 	.word	0x20000018

0800ae88 <__sread>:
 800ae88:	b510      	push	{r4, lr}
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae90:	f000 f86c 	bl	800af6c <_read_r>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	bfab      	itete	ge
 800ae98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ae9c:	181b      	addge	r3, r3, r0
 800ae9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aea2:	bfac      	ite	ge
 800aea4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aea6:	81a3      	strhlt	r3, [r4, #12]
 800aea8:	bd10      	pop	{r4, pc}

0800aeaa <__swrite>:
 800aeaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeae:	461f      	mov	r7, r3
 800aeb0:	898b      	ldrh	r3, [r1, #12]
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	05db      	lsls	r3, r3, #23
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	4616      	mov	r6, r2
 800aeba:	d505      	bpl.n	800aec8 <__swrite+0x1e>
 800aebc:	2302      	movs	r3, #2
 800aebe:	2200      	movs	r2, #0
 800aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec4:	f000 f840 	bl	800af48 <_lseek_r>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	4632      	mov	r2, r6
 800aecc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	4628      	mov	r0, r5
 800aed4:	463b      	mov	r3, r7
 800aed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aede:	f000 b857 	b.w	800af90 <_write_r>

0800aee2 <__sseek>:
 800aee2:	b510      	push	{r4, lr}
 800aee4:	460c      	mov	r4, r1
 800aee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeea:	f000 f82d 	bl	800af48 <_lseek_r>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	bf15      	itete	ne
 800aef4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aef6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aefa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aefe:	81a3      	strheq	r3, [r4, #12]
 800af00:	bf18      	it	ne
 800af02:	81a3      	strhne	r3, [r4, #12]
 800af04:	bd10      	pop	{r4, pc}

0800af06 <__sclose>:
 800af06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0a:	f000 b80d 	b.w	800af28 <_close_r>

0800af0e <memset>:
 800af0e:	4603      	mov	r3, r0
 800af10:	4402      	add	r2, r0
 800af12:	4293      	cmp	r3, r2
 800af14:	d100      	bne.n	800af18 <memset+0xa>
 800af16:	4770      	bx	lr
 800af18:	f803 1b01 	strb.w	r1, [r3], #1
 800af1c:	e7f9      	b.n	800af12 <memset+0x4>
	...

0800af20 <_localeconv_r>:
 800af20:	4800      	ldr	r0, [pc, #0]	@ (800af24 <_localeconv_r+0x4>)
 800af22:	4770      	bx	lr
 800af24:	20000158 	.word	0x20000158

0800af28 <_close_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	2300      	movs	r3, #0
 800af2c:	4d05      	ldr	r5, [pc, #20]	@ (800af44 <_close_r+0x1c>)
 800af2e:	4604      	mov	r4, r0
 800af30:	4608      	mov	r0, r1
 800af32:	602b      	str	r3, [r5, #0]
 800af34:	f7f8 f8a9 	bl	800308a <_close>
 800af38:	1c43      	adds	r3, r0, #1
 800af3a:	d102      	bne.n	800af42 <_close_r+0x1a>
 800af3c:	682b      	ldr	r3, [r5, #0]
 800af3e:	b103      	cbz	r3, 800af42 <_close_r+0x1a>
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	bd38      	pop	{r3, r4, r5, pc}
 800af44:	20000968 	.word	0x20000968

0800af48 <_lseek_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4604      	mov	r4, r0
 800af4c:	4608      	mov	r0, r1
 800af4e:	4611      	mov	r1, r2
 800af50:	2200      	movs	r2, #0
 800af52:	4d05      	ldr	r5, [pc, #20]	@ (800af68 <_lseek_r+0x20>)
 800af54:	602a      	str	r2, [r5, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	f7f8 f8bb 	bl	80030d2 <_lseek>
 800af5c:	1c43      	adds	r3, r0, #1
 800af5e:	d102      	bne.n	800af66 <_lseek_r+0x1e>
 800af60:	682b      	ldr	r3, [r5, #0]
 800af62:	b103      	cbz	r3, 800af66 <_lseek_r+0x1e>
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	bd38      	pop	{r3, r4, r5, pc}
 800af68:	20000968 	.word	0x20000968

0800af6c <_read_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	4611      	mov	r1, r2
 800af74:	2200      	movs	r2, #0
 800af76:	4d05      	ldr	r5, [pc, #20]	@ (800af8c <_read_r+0x20>)
 800af78:	602a      	str	r2, [r5, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	f7f8 f84c 	bl	8003018 <_read>
 800af80:	1c43      	adds	r3, r0, #1
 800af82:	d102      	bne.n	800af8a <_read_r+0x1e>
 800af84:	682b      	ldr	r3, [r5, #0]
 800af86:	b103      	cbz	r3, 800af8a <_read_r+0x1e>
 800af88:	6023      	str	r3, [r4, #0]
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	20000968 	.word	0x20000968

0800af90 <_write_r>:
 800af90:	b538      	push	{r3, r4, r5, lr}
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	4611      	mov	r1, r2
 800af98:	2200      	movs	r2, #0
 800af9a:	4d05      	ldr	r5, [pc, #20]	@ (800afb0 <_write_r+0x20>)
 800af9c:	602a      	str	r2, [r5, #0]
 800af9e:	461a      	mov	r2, r3
 800afa0:	f7f8 f857 	bl	8003052 <_write>
 800afa4:	1c43      	adds	r3, r0, #1
 800afa6:	d102      	bne.n	800afae <_write_r+0x1e>
 800afa8:	682b      	ldr	r3, [r5, #0]
 800afaa:	b103      	cbz	r3, 800afae <_write_r+0x1e>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd38      	pop	{r3, r4, r5, pc}
 800afb0:	20000968 	.word	0x20000968

0800afb4 <__errno>:
 800afb4:	4b01      	ldr	r3, [pc, #4]	@ (800afbc <__errno+0x8>)
 800afb6:	6818      	ldr	r0, [r3, #0]
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	20000018 	.word	0x20000018

0800afc0 <__libc_init_array>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	2600      	movs	r6, #0
 800afc4:	4d0c      	ldr	r5, [pc, #48]	@ (800aff8 <__libc_init_array+0x38>)
 800afc6:	4c0d      	ldr	r4, [pc, #52]	@ (800affc <__libc_init_array+0x3c>)
 800afc8:	1b64      	subs	r4, r4, r5
 800afca:	10a4      	asrs	r4, r4, #2
 800afcc:	42a6      	cmp	r6, r4
 800afce:	d109      	bne.n	800afe4 <__libc_init_array+0x24>
 800afd0:	f002 fade 	bl	800d590 <_init>
 800afd4:	2600      	movs	r6, #0
 800afd6:	4d0a      	ldr	r5, [pc, #40]	@ (800b000 <__libc_init_array+0x40>)
 800afd8:	4c0a      	ldr	r4, [pc, #40]	@ (800b004 <__libc_init_array+0x44>)
 800afda:	1b64      	subs	r4, r4, r5
 800afdc:	10a4      	asrs	r4, r4, #2
 800afde:	42a6      	cmp	r6, r4
 800afe0:	d105      	bne.n	800afee <__libc_init_array+0x2e>
 800afe2:	bd70      	pop	{r4, r5, r6, pc}
 800afe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe8:	4798      	blx	r3
 800afea:	3601      	adds	r6, #1
 800afec:	e7ee      	b.n	800afcc <__libc_init_array+0xc>
 800afee:	f855 3b04 	ldr.w	r3, [r5], #4
 800aff2:	4798      	blx	r3
 800aff4:	3601      	adds	r6, #1
 800aff6:	e7f2      	b.n	800afde <__libc_init_array+0x1e>
 800aff8:	0800d9d8 	.word	0x0800d9d8
 800affc:	0800d9d8 	.word	0x0800d9d8
 800b000:	0800d9d8 	.word	0x0800d9d8
 800b004:	0800d9dc 	.word	0x0800d9dc

0800b008 <__retarget_lock_init_recursive>:
 800b008:	4770      	bx	lr

0800b00a <__retarget_lock_acquire_recursive>:
 800b00a:	4770      	bx	lr

0800b00c <__retarget_lock_release_recursive>:
 800b00c:	4770      	bx	lr

0800b00e <memchr>:
 800b00e:	4603      	mov	r3, r0
 800b010:	b510      	push	{r4, lr}
 800b012:	b2c9      	uxtb	r1, r1
 800b014:	4402      	add	r2, r0
 800b016:	4293      	cmp	r3, r2
 800b018:	4618      	mov	r0, r3
 800b01a:	d101      	bne.n	800b020 <memchr+0x12>
 800b01c:	2000      	movs	r0, #0
 800b01e:	e003      	b.n	800b028 <memchr+0x1a>
 800b020:	7804      	ldrb	r4, [r0, #0]
 800b022:	3301      	adds	r3, #1
 800b024:	428c      	cmp	r4, r1
 800b026:	d1f6      	bne.n	800b016 <memchr+0x8>
 800b028:	bd10      	pop	{r4, pc}

0800b02a <memcpy>:
 800b02a:	440a      	add	r2, r1
 800b02c:	4291      	cmp	r1, r2
 800b02e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b032:	d100      	bne.n	800b036 <memcpy+0xc>
 800b034:	4770      	bx	lr
 800b036:	b510      	push	{r4, lr}
 800b038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03c:	4291      	cmp	r1, r2
 800b03e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b042:	d1f9      	bne.n	800b038 <memcpy+0xe>
 800b044:	bd10      	pop	{r4, pc}

0800b046 <quorem>:
 800b046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	6903      	ldr	r3, [r0, #16]
 800b04c:	690c      	ldr	r4, [r1, #16]
 800b04e:	4607      	mov	r7, r0
 800b050:	42a3      	cmp	r3, r4
 800b052:	db7e      	blt.n	800b152 <quorem+0x10c>
 800b054:	3c01      	subs	r4, #1
 800b056:	00a3      	lsls	r3, r4, #2
 800b058:	f100 0514 	add.w	r5, r0, #20
 800b05c:	f101 0814 	add.w	r8, r1, #20
 800b060:	9300      	str	r3, [sp, #0]
 800b062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b066:	9301      	str	r3, [sp, #4]
 800b068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b06c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b070:	3301      	adds	r3, #1
 800b072:	429a      	cmp	r2, r3
 800b074:	fbb2 f6f3 	udiv	r6, r2, r3
 800b078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b07c:	d32e      	bcc.n	800b0dc <quorem+0x96>
 800b07e:	f04f 0a00 	mov.w	sl, #0
 800b082:	46c4      	mov	ip, r8
 800b084:	46ae      	mov	lr, r5
 800b086:	46d3      	mov	fp, sl
 800b088:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b08c:	b298      	uxth	r0, r3
 800b08e:	fb06 a000 	mla	r0, r6, r0, sl
 800b092:	0c1b      	lsrs	r3, r3, #16
 800b094:	0c02      	lsrs	r2, r0, #16
 800b096:	fb06 2303 	mla	r3, r6, r3, r2
 800b09a:	f8de 2000 	ldr.w	r2, [lr]
 800b09e:	b280      	uxth	r0, r0
 800b0a0:	b292      	uxth	r2, r2
 800b0a2:	1a12      	subs	r2, r2, r0
 800b0a4:	445a      	add	r2, fp
 800b0a6:	f8de 0000 	ldr.w	r0, [lr]
 800b0aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b0b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b0b8:	b292      	uxth	r2, r2
 800b0ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b0be:	45e1      	cmp	r9, ip
 800b0c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b0c8:	d2de      	bcs.n	800b088 <quorem+0x42>
 800b0ca:	9b00      	ldr	r3, [sp, #0]
 800b0cc:	58eb      	ldr	r3, [r5, r3]
 800b0ce:	b92b      	cbnz	r3, 800b0dc <quorem+0x96>
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	3b04      	subs	r3, #4
 800b0d4:	429d      	cmp	r5, r3
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	d32f      	bcc.n	800b13a <quorem+0xf4>
 800b0da:	613c      	str	r4, [r7, #16]
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f001 f97f 	bl	800c3e0 <__mcmp>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	db25      	blt.n	800b132 <quorem+0xec>
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0ee:	f8d1 c000 	ldr.w	ip, [r1]
 800b0f2:	fa1f fe82 	uxth.w	lr, r2
 800b0f6:	fa1f f38c 	uxth.w	r3, ip
 800b0fa:	eba3 030e 	sub.w	r3, r3, lr
 800b0fe:	4403      	add	r3, r0
 800b100:	0c12      	lsrs	r2, r2, #16
 800b102:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b106:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b110:	45c1      	cmp	r9, r8
 800b112:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b116:	f841 3b04 	str.w	r3, [r1], #4
 800b11a:	d2e6      	bcs.n	800b0ea <quorem+0xa4>
 800b11c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b124:	b922      	cbnz	r2, 800b130 <quorem+0xea>
 800b126:	3b04      	subs	r3, #4
 800b128:	429d      	cmp	r5, r3
 800b12a:	461a      	mov	r2, r3
 800b12c:	d30b      	bcc.n	800b146 <quorem+0x100>
 800b12e:	613c      	str	r4, [r7, #16]
 800b130:	3601      	adds	r6, #1
 800b132:	4630      	mov	r0, r6
 800b134:	b003      	add	sp, #12
 800b136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13a:	6812      	ldr	r2, [r2, #0]
 800b13c:	3b04      	subs	r3, #4
 800b13e:	2a00      	cmp	r2, #0
 800b140:	d1cb      	bne.n	800b0da <quorem+0x94>
 800b142:	3c01      	subs	r4, #1
 800b144:	e7c6      	b.n	800b0d4 <quorem+0x8e>
 800b146:	6812      	ldr	r2, [r2, #0]
 800b148:	3b04      	subs	r3, #4
 800b14a:	2a00      	cmp	r2, #0
 800b14c:	d1ef      	bne.n	800b12e <quorem+0xe8>
 800b14e:	3c01      	subs	r4, #1
 800b150:	e7ea      	b.n	800b128 <quorem+0xe2>
 800b152:	2000      	movs	r0, #0
 800b154:	e7ee      	b.n	800b134 <quorem+0xee>
	...

0800b158 <_dtoa_r>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	4614      	mov	r4, r2
 800b15e:	461d      	mov	r5, r3
 800b160:	69c7      	ldr	r7, [r0, #28]
 800b162:	b097      	sub	sp, #92	@ 0x5c
 800b164:	4681      	mov	r9, r0
 800b166:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b16a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b16c:	b97f      	cbnz	r7, 800b18e <_dtoa_r+0x36>
 800b16e:	2010      	movs	r0, #16
 800b170:	f000 fe0e 	bl	800bd90 <malloc>
 800b174:	4602      	mov	r2, r0
 800b176:	f8c9 001c 	str.w	r0, [r9, #28]
 800b17a:	b920      	cbnz	r0, 800b186 <_dtoa_r+0x2e>
 800b17c:	21ef      	movs	r1, #239	@ 0xef
 800b17e:	4bac      	ldr	r3, [pc, #688]	@ (800b430 <_dtoa_r+0x2d8>)
 800b180:	48ac      	ldr	r0, [pc, #688]	@ (800b434 <_dtoa_r+0x2dc>)
 800b182:	f001 fc5f 	bl	800ca44 <__assert_func>
 800b186:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b18a:	6007      	str	r7, [r0, #0]
 800b18c:	60c7      	str	r7, [r0, #12]
 800b18e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	b159      	cbz	r1, 800b1ae <_dtoa_r+0x56>
 800b196:	685a      	ldr	r2, [r3, #4]
 800b198:	2301      	movs	r3, #1
 800b19a:	4093      	lsls	r3, r2
 800b19c:	604a      	str	r2, [r1, #4]
 800b19e:	608b      	str	r3, [r1, #8]
 800b1a0:	4648      	mov	r0, r9
 800b1a2:	f000 feeb 	bl	800bf7c <_Bfree>
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	1e2b      	subs	r3, r5, #0
 800b1b0:	bfaf      	iteee	ge
 800b1b2:	2300      	movge	r3, #0
 800b1b4:	2201      	movlt	r2, #1
 800b1b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b1ba:	9307      	strlt	r3, [sp, #28]
 800b1bc:	bfa8      	it	ge
 800b1be:	6033      	strge	r3, [r6, #0]
 800b1c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800b1c4:	4b9c      	ldr	r3, [pc, #624]	@ (800b438 <_dtoa_r+0x2e0>)
 800b1c6:	bfb8      	it	lt
 800b1c8:	6032      	strlt	r2, [r6, #0]
 800b1ca:	ea33 0308 	bics.w	r3, r3, r8
 800b1ce:	d112      	bne.n	800b1f6 <_dtoa_r+0x9e>
 800b1d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b1dc:	4323      	orrs	r3, r4
 800b1de:	f000 855e 	beq.w	800bc9e <_dtoa_r+0xb46>
 800b1e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b1e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b43c <_dtoa_r+0x2e4>
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	f000 8560 	beq.w	800bcae <_dtoa_r+0xb56>
 800b1ee:	f10a 0303 	add.w	r3, sl, #3
 800b1f2:	f000 bd5a 	b.w	800bcaa <_dtoa_r+0xb52>
 800b1f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b1fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b202:	2200      	movs	r2, #0
 800b204:	2300      	movs	r3, #0
 800b206:	f7f5 fbcf 	bl	80009a8 <__aeabi_dcmpeq>
 800b20a:	4607      	mov	r7, r0
 800b20c:	b158      	cbz	r0, 800b226 <_dtoa_r+0xce>
 800b20e:	2301      	movs	r3, #1
 800b210:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b216:	b113      	cbz	r3, 800b21e <_dtoa_r+0xc6>
 800b218:	4b89      	ldr	r3, [pc, #548]	@ (800b440 <_dtoa_r+0x2e8>)
 800b21a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800b444 <_dtoa_r+0x2ec>
 800b222:	f000 bd44 	b.w	800bcae <_dtoa_r+0xb56>
 800b226:	ab14      	add	r3, sp, #80	@ 0x50
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	ab15      	add	r3, sp, #84	@ 0x54
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	4648      	mov	r0, r9
 800b230:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b234:	f001 f984 	bl	800c540 <__d2b>
 800b238:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b23c:	9003      	str	r0, [sp, #12]
 800b23e:	2e00      	cmp	r6, #0
 800b240:	d078      	beq.n	800b334 <_dtoa_r+0x1dc>
 800b242:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b248:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b24c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b250:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b254:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b258:	9712      	str	r7, [sp, #72]	@ 0x48
 800b25a:	4619      	mov	r1, r3
 800b25c:	2200      	movs	r2, #0
 800b25e:	4b7a      	ldr	r3, [pc, #488]	@ (800b448 <_dtoa_r+0x2f0>)
 800b260:	f7f4 ff82 	bl	8000168 <__aeabi_dsub>
 800b264:	a36c      	add	r3, pc, #432	@ (adr r3, 800b418 <_dtoa_r+0x2c0>)
 800b266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26a:	f7f5 f935 	bl	80004d8 <__aeabi_dmul>
 800b26e:	a36c      	add	r3, pc, #432	@ (adr r3, 800b420 <_dtoa_r+0x2c8>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f4 ff7a 	bl	800016c <__adddf3>
 800b278:	4604      	mov	r4, r0
 800b27a:	4630      	mov	r0, r6
 800b27c:	460d      	mov	r5, r1
 800b27e:	f7f5 f8c1 	bl	8000404 <__aeabi_i2d>
 800b282:	a369      	add	r3, pc, #420	@ (adr r3, 800b428 <_dtoa_r+0x2d0>)
 800b284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b288:	f7f5 f926 	bl	80004d8 <__aeabi_dmul>
 800b28c:	4602      	mov	r2, r0
 800b28e:	460b      	mov	r3, r1
 800b290:	4620      	mov	r0, r4
 800b292:	4629      	mov	r1, r5
 800b294:	f7f4 ff6a 	bl	800016c <__adddf3>
 800b298:	4604      	mov	r4, r0
 800b29a:	460d      	mov	r5, r1
 800b29c:	f7f5 fbcc 	bl	8000a38 <__aeabi_d2iz>
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 fb87 	bl	80009bc <__aeabi_dcmplt>
 800b2ae:	b140      	cbz	r0, 800b2c2 <_dtoa_r+0x16a>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7f5 f8a7 	bl	8000404 <__aeabi_i2d>
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	f7f5 fb75 	bl	80009a8 <__aeabi_dcmpeq>
 800b2be:	b900      	cbnz	r0, 800b2c2 <_dtoa_r+0x16a>
 800b2c0:	3f01      	subs	r7, #1
 800b2c2:	2f16      	cmp	r7, #22
 800b2c4:	d854      	bhi.n	800b370 <_dtoa_r+0x218>
 800b2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2ca:	4b60      	ldr	r3, [pc, #384]	@ (800b44c <_dtoa_r+0x2f4>)
 800b2cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	f7f5 fb72 	bl	80009bc <__aeabi_dcmplt>
 800b2d8:	2800      	cmp	r0, #0
 800b2da:	d04b      	beq.n	800b374 <_dtoa_r+0x21c>
 800b2dc:	2300      	movs	r3, #0
 800b2de:	3f01      	subs	r7, #1
 800b2e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2e4:	1b9b      	subs	r3, r3, r6
 800b2e6:	1e5a      	subs	r2, r3, #1
 800b2e8:	bf49      	itett	mi
 800b2ea:	f1c3 0301 	rsbmi	r3, r3, #1
 800b2ee:	2300      	movpl	r3, #0
 800b2f0:	9304      	strmi	r3, [sp, #16]
 800b2f2:	2300      	movmi	r3, #0
 800b2f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2f6:	bf54      	ite	pl
 800b2f8:	9304      	strpl	r3, [sp, #16]
 800b2fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b2fc:	2f00      	cmp	r7, #0
 800b2fe:	db3b      	blt.n	800b378 <_dtoa_r+0x220>
 800b300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b302:	970e      	str	r7, [sp, #56]	@ 0x38
 800b304:	443b      	add	r3, r7
 800b306:	9309      	str	r3, [sp, #36]	@ 0x24
 800b308:	2300      	movs	r3, #0
 800b30a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b30c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b30e:	2b09      	cmp	r3, #9
 800b310:	d865      	bhi.n	800b3de <_dtoa_r+0x286>
 800b312:	2b05      	cmp	r3, #5
 800b314:	bfc4      	itt	gt
 800b316:	3b04      	subgt	r3, #4
 800b318:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b31a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b31c:	bfc8      	it	gt
 800b31e:	2400      	movgt	r4, #0
 800b320:	f1a3 0302 	sub.w	r3, r3, #2
 800b324:	bfd8      	it	le
 800b326:	2401      	movle	r4, #1
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d864      	bhi.n	800b3f6 <_dtoa_r+0x29e>
 800b32c:	e8df f003 	tbb	[pc, r3]
 800b330:	2c385553 	.word	0x2c385553
 800b334:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b338:	441e      	add	r6, r3
 800b33a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b33e:	2b20      	cmp	r3, #32
 800b340:	bfc1      	itttt	gt
 800b342:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b346:	fa08 f803 	lslgt.w	r8, r8, r3
 800b34a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b34e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b352:	bfd6      	itet	le
 800b354:	f1c3 0320 	rsble	r3, r3, #32
 800b358:	ea48 0003 	orrgt.w	r0, r8, r3
 800b35c:	fa04 f003 	lslle.w	r0, r4, r3
 800b360:	f7f5 f840 	bl	80003e4 <__aeabi_ui2d>
 800b364:	2201      	movs	r2, #1
 800b366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b36a:	3e01      	subs	r6, #1
 800b36c:	9212      	str	r2, [sp, #72]	@ 0x48
 800b36e:	e774      	b.n	800b25a <_dtoa_r+0x102>
 800b370:	2301      	movs	r3, #1
 800b372:	e7b5      	b.n	800b2e0 <_dtoa_r+0x188>
 800b374:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b376:	e7b4      	b.n	800b2e2 <_dtoa_r+0x18a>
 800b378:	9b04      	ldr	r3, [sp, #16]
 800b37a:	1bdb      	subs	r3, r3, r7
 800b37c:	9304      	str	r3, [sp, #16]
 800b37e:	427b      	negs	r3, r7
 800b380:	930a      	str	r3, [sp, #40]	@ 0x28
 800b382:	2300      	movs	r3, #0
 800b384:	930e      	str	r3, [sp, #56]	@ 0x38
 800b386:	e7c1      	b.n	800b30c <_dtoa_r+0x1b4>
 800b388:	2301      	movs	r3, #1
 800b38a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b38c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b38e:	eb07 0b03 	add.w	fp, r7, r3
 800b392:	f10b 0301 	add.w	r3, fp, #1
 800b396:	2b01      	cmp	r3, #1
 800b398:	9308      	str	r3, [sp, #32]
 800b39a:	bfb8      	it	lt
 800b39c:	2301      	movlt	r3, #1
 800b39e:	e006      	b.n	800b3ae <_dtoa_r+0x256>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	dd28      	ble.n	800b3fc <_dtoa_r+0x2a4>
 800b3aa:	469b      	mov	fp, r3
 800b3ac:	9308      	str	r3, [sp, #32]
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	2204      	movs	r2, #4
 800b3b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b3b6:	f102 0514 	add.w	r5, r2, #20
 800b3ba:	429d      	cmp	r5, r3
 800b3bc:	d926      	bls.n	800b40c <_dtoa_r+0x2b4>
 800b3be:	6041      	str	r1, [r0, #4]
 800b3c0:	4648      	mov	r0, r9
 800b3c2:	f000 fd9b 	bl	800befc <_Balloc>
 800b3c6:	4682      	mov	sl, r0
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d143      	bne.n	800b454 <_dtoa_r+0x2fc>
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3d2:	4b1f      	ldr	r3, [pc, #124]	@ (800b450 <_dtoa_r+0x2f8>)
 800b3d4:	e6d4      	b.n	800b180 <_dtoa_r+0x28>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e7e3      	b.n	800b3a2 <_dtoa_r+0x24a>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e7d5      	b.n	800b38a <_dtoa_r+0x232>
 800b3de:	2401      	movs	r4, #1
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3e4:	9320      	str	r3, [sp, #128]	@ 0x80
 800b3e6:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2312      	movs	r3, #18
 800b3ee:	f8cd b020 	str.w	fp, [sp, #32]
 800b3f2:	9221      	str	r2, [sp, #132]	@ 0x84
 800b3f4:	e7db      	b.n	800b3ae <_dtoa_r+0x256>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3fa:	e7f4      	b.n	800b3e6 <_dtoa_r+0x28e>
 800b3fc:	f04f 0b01 	mov.w	fp, #1
 800b400:	465b      	mov	r3, fp
 800b402:	f8cd b020 	str.w	fp, [sp, #32]
 800b406:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800b40a:	e7d0      	b.n	800b3ae <_dtoa_r+0x256>
 800b40c:	3101      	adds	r1, #1
 800b40e:	0052      	lsls	r2, r2, #1
 800b410:	e7d1      	b.n	800b3b6 <_dtoa_r+0x25e>
 800b412:	bf00      	nop
 800b414:	f3af 8000 	nop.w
 800b418:	636f4361 	.word	0x636f4361
 800b41c:	3fd287a7 	.word	0x3fd287a7
 800b420:	8b60c8b3 	.word	0x8b60c8b3
 800b424:	3fc68a28 	.word	0x3fc68a28
 800b428:	509f79fb 	.word	0x509f79fb
 800b42c:	3fd34413 	.word	0x3fd34413
 800b430:	0800d62b 	.word	0x0800d62b
 800b434:	0800d642 	.word	0x0800d642
 800b438:	7ff00000 	.word	0x7ff00000
 800b43c:	0800d627 	.word	0x0800d627
 800b440:	0800d5fb 	.word	0x0800d5fb
 800b444:	0800d5fa 	.word	0x0800d5fa
 800b448:	3ff80000 	.word	0x3ff80000
 800b44c:	0800d790 	.word	0x0800d790
 800b450:	0800d69a 	.word	0x0800d69a
 800b454:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b458:	6018      	str	r0, [r3, #0]
 800b45a:	9b08      	ldr	r3, [sp, #32]
 800b45c:	2b0e      	cmp	r3, #14
 800b45e:	f200 80a1 	bhi.w	800b5a4 <_dtoa_r+0x44c>
 800b462:	2c00      	cmp	r4, #0
 800b464:	f000 809e 	beq.w	800b5a4 <_dtoa_r+0x44c>
 800b468:	2f00      	cmp	r7, #0
 800b46a:	dd33      	ble.n	800b4d4 <_dtoa_r+0x37c>
 800b46c:	4b9c      	ldr	r3, [pc, #624]	@ (800b6e0 <_dtoa_r+0x588>)
 800b46e:	f007 020f 	and.w	r2, r7, #15
 800b472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b476:	05f8      	lsls	r0, r7, #23
 800b478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b47c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800b480:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b484:	d516      	bpl.n	800b4b4 <_dtoa_r+0x35c>
 800b486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b48a:	4b96      	ldr	r3, [pc, #600]	@ (800b6e4 <_dtoa_r+0x58c>)
 800b48c:	2603      	movs	r6, #3
 800b48e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b492:	f7f5 f94b 	bl	800072c <__aeabi_ddiv>
 800b496:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b49a:	f004 040f 	and.w	r4, r4, #15
 800b49e:	4d91      	ldr	r5, [pc, #580]	@ (800b6e4 <_dtoa_r+0x58c>)
 800b4a0:	b954      	cbnz	r4, 800b4b8 <_dtoa_r+0x360>
 800b4a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4aa:	f7f5 f93f 	bl	800072c <__aeabi_ddiv>
 800b4ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4b2:	e028      	b.n	800b506 <_dtoa_r+0x3ae>
 800b4b4:	2602      	movs	r6, #2
 800b4b6:	e7f2      	b.n	800b49e <_dtoa_r+0x346>
 800b4b8:	07e1      	lsls	r1, r4, #31
 800b4ba:	d508      	bpl.n	800b4ce <_dtoa_r+0x376>
 800b4bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b4c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b4c4:	f7f5 f808 	bl	80004d8 <__aeabi_dmul>
 800b4c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4cc:	3601      	adds	r6, #1
 800b4ce:	1064      	asrs	r4, r4, #1
 800b4d0:	3508      	adds	r5, #8
 800b4d2:	e7e5      	b.n	800b4a0 <_dtoa_r+0x348>
 800b4d4:	f000 80af 	beq.w	800b636 <_dtoa_r+0x4de>
 800b4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b4dc:	427c      	negs	r4, r7
 800b4de:	4b80      	ldr	r3, [pc, #512]	@ (800b6e0 <_dtoa_r+0x588>)
 800b4e0:	f004 020f 	and.w	r2, r4, #15
 800b4e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f4 fff4 	bl	80004d8 <__aeabi_dmul>
 800b4f0:	2602      	movs	r6, #2
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b4f8:	4d7a      	ldr	r5, [pc, #488]	@ (800b6e4 <_dtoa_r+0x58c>)
 800b4fa:	1124      	asrs	r4, r4, #4
 800b4fc:	2c00      	cmp	r4, #0
 800b4fe:	f040 808f 	bne.w	800b620 <_dtoa_r+0x4c8>
 800b502:	2b00      	cmp	r3, #0
 800b504:	d1d3      	bne.n	800b4ae <_dtoa_r+0x356>
 800b506:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b50a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8094 	beq.w	800b63a <_dtoa_r+0x4e2>
 800b512:	2200      	movs	r2, #0
 800b514:	4620      	mov	r0, r4
 800b516:	4629      	mov	r1, r5
 800b518:	4b73      	ldr	r3, [pc, #460]	@ (800b6e8 <_dtoa_r+0x590>)
 800b51a:	f7f5 fa4f 	bl	80009bc <__aeabi_dcmplt>
 800b51e:	2800      	cmp	r0, #0
 800b520:	f000 808b 	beq.w	800b63a <_dtoa_r+0x4e2>
 800b524:	9b08      	ldr	r3, [sp, #32]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 8087 	beq.w	800b63a <_dtoa_r+0x4e2>
 800b52c:	f1bb 0f00 	cmp.w	fp, #0
 800b530:	dd34      	ble.n	800b59c <_dtoa_r+0x444>
 800b532:	4620      	mov	r0, r4
 800b534:	2200      	movs	r2, #0
 800b536:	4629      	mov	r1, r5
 800b538:	4b6c      	ldr	r3, [pc, #432]	@ (800b6ec <_dtoa_r+0x594>)
 800b53a:	f7f4 ffcd 	bl	80004d8 <__aeabi_dmul>
 800b53e:	465c      	mov	r4, fp
 800b540:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b544:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b548:	3601      	adds	r6, #1
 800b54a:	4630      	mov	r0, r6
 800b54c:	f7f4 ff5a 	bl	8000404 <__aeabi_i2d>
 800b550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b554:	f7f4 ffc0 	bl	80004d8 <__aeabi_dmul>
 800b558:	2200      	movs	r2, #0
 800b55a:	4b65      	ldr	r3, [pc, #404]	@ (800b6f0 <_dtoa_r+0x598>)
 800b55c:	f7f4 fe06 	bl	800016c <__adddf3>
 800b560:	4605      	mov	r5, r0
 800b562:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b566:	2c00      	cmp	r4, #0
 800b568:	d16a      	bne.n	800b640 <_dtoa_r+0x4e8>
 800b56a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b56e:	2200      	movs	r2, #0
 800b570:	4b60      	ldr	r3, [pc, #384]	@ (800b6f4 <_dtoa_r+0x59c>)
 800b572:	f7f4 fdf9 	bl	8000168 <__aeabi_dsub>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b57e:	462a      	mov	r2, r5
 800b580:	4633      	mov	r3, r6
 800b582:	f7f5 fa39 	bl	80009f8 <__aeabi_dcmpgt>
 800b586:	2800      	cmp	r0, #0
 800b588:	f040 8298 	bne.w	800babc <_dtoa_r+0x964>
 800b58c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b590:	462a      	mov	r2, r5
 800b592:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b596:	f7f5 fa11 	bl	80009bc <__aeabi_dcmplt>
 800b59a:	bb38      	cbnz	r0, 800b5ec <_dtoa_r+0x494>
 800b59c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b5a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b5a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f2c0 8157 	blt.w	800b85a <_dtoa_r+0x702>
 800b5ac:	2f0e      	cmp	r7, #14
 800b5ae:	f300 8154 	bgt.w	800b85a <_dtoa_r+0x702>
 800b5b2:	4b4b      	ldr	r3, [pc, #300]	@ (800b6e0 <_dtoa_r+0x588>)
 800b5b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b5b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b5c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f280 80e5 	bge.w	800b792 <_dtoa_r+0x63a>
 800b5c8:	9b08      	ldr	r3, [sp, #32]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f300 80e1 	bgt.w	800b792 <_dtoa_r+0x63a>
 800b5d0:	d10c      	bne.n	800b5ec <_dtoa_r+0x494>
 800b5d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4b46      	ldr	r3, [pc, #280]	@ (800b6f4 <_dtoa_r+0x59c>)
 800b5da:	f7f4 ff7d 	bl	80004d8 <__aeabi_dmul>
 800b5de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5e2:	f7f5 f9ff 	bl	80009e4 <__aeabi_dcmpge>
 800b5e6:	2800      	cmp	r0, #0
 800b5e8:	f000 8266 	beq.w	800bab8 <_dtoa_r+0x960>
 800b5ec:	2400      	movs	r4, #0
 800b5ee:	4625      	mov	r5, r4
 800b5f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5f2:	4656      	mov	r6, sl
 800b5f4:	ea6f 0803 	mvn.w	r8, r3
 800b5f8:	2700      	movs	r7, #0
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	4648      	mov	r0, r9
 800b5fe:	f000 fcbd 	bl	800bf7c <_Bfree>
 800b602:	2d00      	cmp	r5, #0
 800b604:	f000 80bd 	beq.w	800b782 <_dtoa_r+0x62a>
 800b608:	b12f      	cbz	r7, 800b616 <_dtoa_r+0x4be>
 800b60a:	42af      	cmp	r7, r5
 800b60c:	d003      	beq.n	800b616 <_dtoa_r+0x4be>
 800b60e:	4639      	mov	r1, r7
 800b610:	4648      	mov	r0, r9
 800b612:	f000 fcb3 	bl	800bf7c <_Bfree>
 800b616:	4629      	mov	r1, r5
 800b618:	4648      	mov	r0, r9
 800b61a:	f000 fcaf 	bl	800bf7c <_Bfree>
 800b61e:	e0b0      	b.n	800b782 <_dtoa_r+0x62a>
 800b620:	07e2      	lsls	r2, r4, #31
 800b622:	d505      	bpl.n	800b630 <_dtoa_r+0x4d8>
 800b624:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b628:	f7f4 ff56 	bl	80004d8 <__aeabi_dmul>
 800b62c:	2301      	movs	r3, #1
 800b62e:	3601      	adds	r6, #1
 800b630:	1064      	asrs	r4, r4, #1
 800b632:	3508      	adds	r5, #8
 800b634:	e762      	b.n	800b4fc <_dtoa_r+0x3a4>
 800b636:	2602      	movs	r6, #2
 800b638:	e765      	b.n	800b506 <_dtoa_r+0x3ae>
 800b63a:	46b8      	mov	r8, r7
 800b63c:	9c08      	ldr	r4, [sp, #32]
 800b63e:	e784      	b.n	800b54a <_dtoa_r+0x3f2>
 800b640:	4b27      	ldr	r3, [pc, #156]	@ (800b6e0 <_dtoa_r+0x588>)
 800b642:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b644:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b648:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b64c:	4454      	add	r4, sl
 800b64e:	2900      	cmp	r1, #0
 800b650:	d054      	beq.n	800b6fc <_dtoa_r+0x5a4>
 800b652:	2000      	movs	r0, #0
 800b654:	4928      	ldr	r1, [pc, #160]	@ (800b6f8 <_dtoa_r+0x5a0>)
 800b656:	f7f5 f869 	bl	800072c <__aeabi_ddiv>
 800b65a:	4633      	mov	r3, r6
 800b65c:	462a      	mov	r2, r5
 800b65e:	f7f4 fd83 	bl	8000168 <__aeabi_dsub>
 800b662:	4656      	mov	r6, sl
 800b664:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b668:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b66c:	f7f5 f9e4 	bl	8000a38 <__aeabi_d2iz>
 800b670:	4605      	mov	r5, r0
 800b672:	f7f4 fec7 	bl	8000404 <__aeabi_i2d>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b67e:	f7f4 fd73 	bl	8000168 <__aeabi_dsub>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	3530      	adds	r5, #48	@ 0x30
 800b688:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b68c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b690:	f806 5b01 	strb.w	r5, [r6], #1
 800b694:	f7f5 f992 	bl	80009bc <__aeabi_dcmplt>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d172      	bne.n	800b782 <_dtoa_r+0x62a>
 800b69c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	4911      	ldr	r1, [pc, #68]	@ (800b6e8 <_dtoa_r+0x590>)
 800b6a4:	f7f4 fd60 	bl	8000168 <__aeabi_dsub>
 800b6a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6ac:	f7f5 f986 	bl	80009bc <__aeabi_dcmplt>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	f040 80b4 	bne.w	800b81e <_dtoa_r+0x6c6>
 800b6b6:	42a6      	cmp	r6, r4
 800b6b8:	f43f af70 	beq.w	800b59c <_dtoa_r+0x444>
 800b6bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6ec <_dtoa_r+0x594>)
 800b6c4:	f7f4 ff08 	bl	80004d8 <__aeabi_dmul>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b6d2:	4b06      	ldr	r3, [pc, #24]	@ (800b6ec <_dtoa_r+0x594>)
 800b6d4:	f7f4 ff00 	bl	80004d8 <__aeabi_dmul>
 800b6d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6dc:	e7c4      	b.n	800b668 <_dtoa_r+0x510>
 800b6de:	bf00      	nop
 800b6e0:	0800d790 	.word	0x0800d790
 800b6e4:	0800d768 	.word	0x0800d768
 800b6e8:	3ff00000 	.word	0x3ff00000
 800b6ec:	40240000 	.word	0x40240000
 800b6f0:	401c0000 	.word	0x401c0000
 800b6f4:	40140000 	.word	0x40140000
 800b6f8:	3fe00000 	.word	0x3fe00000
 800b6fc:	4631      	mov	r1, r6
 800b6fe:	4628      	mov	r0, r5
 800b700:	f7f4 feea 	bl	80004d8 <__aeabi_dmul>
 800b704:	4656      	mov	r6, sl
 800b706:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b70a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b70c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b710:	f7f5 f992 	bl	8000a38 <__aeabi_d2iz>
 800b714:	4605      	mov	r5, r0
 800b716:	f7f4 fe75 	bl	8000404 <__aeabi_i2d>
 800b71a:	4602      	mov	r2, r0
 800b71c:	460b      	mov	r3, r1
 800b71e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b722:	f7f4 fd21 	bl	8000168 <__aeabi_dsub>
 800b726:	4602      	mov	r2, r0
 800b728:	460b      	mov	r3, r1
 800b72a:	3530      	adds	r5, #48	@ 0x30
 800b72c:	f806 5b01 	strb.w	r5, [r6], #1
 800b730:	42a6      	cmp	r6, r4
 800b732:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b736:	f04f 0200 	mov.w	r2, #0
 800b73a:	d124      	bne.n	800b786 <_dtoa_r+0x62e>
 800b73c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b740:	4bae      	ldr	r3, [pc, #696]	@ (800b9fc <_dtoa_r+0x8a4>)
 800b742:	f7f4 fd13 	bl	800016c <__adddf3>
 800b746:	4602      	mov	r2, r0
 800b748:	460b      	mov	r3, r1
 800b74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b74e:	f7f5 f953 	bl	80009f8 <__aeabi_dcmpgt>
 800b752:	2800      	cmp	r0, #0
 800b754:	d163      	bne.n	800b81e <_dtoa_r+0x6c6>
 800b756:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b75a:	2000      	movs	r0, #0
 800b75c:	49a7      	ldr	r1, [pc, #668]	@ (800b9fc <_dtoa_r+0x8a4>)
 800b75e:	f7f4 fd03 	bl	8000168 <__aeabi_dsub>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b76a:	f7f5 f927 	bl	80009bc <__aeabi_dcmplt>
 800b76e:	2800      	cmp	r0, #0
 800b770:	f43f af14 	beq.w	800b59c <_dtoa_r+0x444>
 800b774:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b776:	1e73      	subs	r3, r6, #1
 800b778:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b77a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b77e:	2b30      	cmp	r3, #48	@ 0x30
 800b780:	d0f8      	beq.n	800b774 <_dtoa_r+0x61c>
 800b782:	4647      	mov	r7, r8
 800b784:	e03b      	b.n	800b7fe <_dtoa_r+0x6a6>
 800b786:	4b9e      	ldr	r3, [pc, #632]	@ (800ba00 <_dtoa_r+0x8a8>)
 800b788:	f7f4 fea6 	bl	80004d8 <__aeabi_dmul>
 800b78c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b790:	e7bc      	b.n	800b70c <_dtoa_r+0x5b4>
 800b792:	4656      	mov	r6, sl
 800b794:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800b798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b79c:	4620      	mov	r0, r4
 800b79e:	4629      	mov	r1, r5
 800b7a0:	f7f4 ffc4 	bl	800072c <__aeabi_ddiv>
 800b7a4:	f7f5 f948 	bl	8000a38 <__aeabi_d2iz>
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	f7f4 fe2b 	bl	8000404 <__aeabi_i2d>
 800b7ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7b2:	f7f4 fe91 	bl	80004d8 <__aeabi_dmul>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	4629      	mov	r1, r5
 800b7be:	f7f4 fcd3 	bl	8000168 <__aeabi_dsub>
 800b7c2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b7c6:	9d08      	ldr	r5, [sp, #32]
 800b7c8:	f806 4b01 	strb.w	r4, [r6], #1
 800b7cc:	eba6 040a 	sub.w	r4, r6, sl
 800b7d0:	42a5      	cmp	r5, r4
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	d133      	bne.n	800b840 <_dtoa_r+0x6e8>
 800b7d8:	f7f4 fcc8 	bl	800016c <__adddf3>
 800b7dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	f7f5 f908 	bl	80009f8 <__aeabi_dcmpgt>
 800b7e8:	b9c0      	cbnz	r0, 800b81c <_dtoa_r+0x6c4>
 800b7ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	4629      	mov	r1, r5
 800b7f2:	f7f5 f8d9 	bl	80009a8 <__aeabi_dcmpeq>
 800b7f6:	b110      	cbz	r0, 800b7fe <_dtoa_r+0x6a6>
 800b7f8:	f018 0f01 	tst.w	r8, #1
 800b7fc:	d10e      	bne.n	800b81c <_dtoa_r+0x6c4>
 800b7fe:	4648      	mov	r0, r9
 800b800:	9903      	ldr	r1, [sp, #12]
 800b802:	f000 fbbb 	bl	800bf7c <_Bfree>
 800b806:	2300      	movs	r3, #0
 800b808:	7033      	strb	r3, [r6, #0]
 800b80a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b80c:	3701      	adds	r7, #1
 800b80e:	601f      	str	r7, [r3, #0]
 800b810:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 824b 	beq.w	800bcae <_dtoa_r+0xb56>
 800b818:	601e      	str	r6, [r3, #0]
 800b81a:	e248      	b.n	800bcae <_dtoa_r+0xb56>
 800b81c:	46b8      	mov	r8, r7
 800b81e:	4633      	mov	r3, r6
 800b820:	461e      	mov	r6, r3
 800b822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b826:	2a39      	cmp	r2, #57	@ 0x39
 800b828:	d106      	bne.n	800b838 <_dtoa_r+0x6e0>
 800b82a:	459a      	cmp	sl, r3
 800b82c:	d1f8      	bne.n	800b820 <_dtoa_r+0x6c8>
 800b82e:	2230      	movs	r2, #48	@ 0x30
 800b830:	f108 0801 	add.w	r8, r8, #1
 800b834:	f88a 2000 	strb.w	r2, [sl]
 800b838:	781a      	ldrb	r2, [r3, #0]
 800b83a:	3201      	adds	r2, #1
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	e7a0      	b.n	800b782 <_dtoa_r+0x62a>
 800b840:	2200      	movs	r2, #0
 800b842:	4b6f      	ldr	r3, [pc, #444]	@ (800ba00 <_dtoa_r+0x8a8>)
 800b844:	f7f4 fe48 	bl	80004d8 <__aeabi_dmul>
 800b848:	2200      	movs	r2, #0
 800b84a:	2300      	movs	r3, #0
 800b84c:	4604      	mov	r4, r0
 800b84e:	460d      	mov	r5, r1
 800b850:	f7f5 f8aa 	bl	80009a8 <__aeabi_dcmpeq>
 800b854:	2800      	cmp	r0, #0
 800b856:	d09f      	beq.n	800b798 <_dtoa_r+0x640>
 800b858:	e7d1      	b.n	800b7fe <_dtoa_r+0x6a6>
 800b85a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b85c:	2a00      	cmp	r2, #0
 800b85e:	f000 80ea 	beq.w	800ba36 <_dtoa_r+0x8de>
 800b862:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b864:	2a01      	cmp	r2, #1
 800b866:	f300 80cd 	bgt.w	800ba04 <_dtoa_r+0x8ac>
 800b86a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b86c:	2a00      	cmp	r2, #0
 800b86e:	f000 80c1 	beq.w	800b9f4 <_dtoa_r+0x89c>
 800b872:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b876:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b878:	9e04      	ldr	r6, [sp, #16]
 800b87a:	9a04      	ldr	r2, [sp, #16]
 800b87c:	2101      	movs	r1, #1
 800b87e:	441a      	add	r2, r3
 800b880:	9204      	str	r2, [sp, #16]
 800b882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b884:	4648      	mov	r0, r9
 800b886:	441a      	add	r2, r3
 800b888:	9209      	str	r2, [sp, #36]	@ 0x24
 800b88a:	f000 fc2b 	bl	800c0e4 <__i2b>
 800b88e:	4605      	mov	r5, r0
 800b890:	b166      	cbz	r6, 800b8ac <_dtoa_r+0x754>
 800b892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b894:	2b00      	cmp	r3, #0
 800b896:	dd09      	ble.n	800b8ac <_dtoa_r+0x754>
 800b898:	42b3      	cmp	r3, r6
 800b89a:	bfa8      	it	ge
 800b89c:	4633      	movge	r3, r6
 800b89e:	9a04      	ldr	r2, [sp, #16]
 800b8a0:	1af6      	subs	r6, r6, r3
 800b8a2:	1ad2      	subs	r2, r2, r3
 800b8a4:	9204      	str	r2, [sp, #16]
 800b8a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8a8:	1ad3      	subs	r3, r2, r3
 800b8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8ae:	b30b      	cbz	r3, 800b8f4 <_dtoa_r+0x79c>
 800b8b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 80c6 	beq.w	800ba44 <_dtoa_r+0x8ec>
 800b8b8:	2c00      	cmp	r4, #0
 800b8ba:	f000 80c0 	beq.w	800ba3e <_dtoa_r+0x8e6>
 800b8be:	4629      	mov	r1, r5
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	4648      	mov	r0, r9
 800b8c4:	f000 fcc6 	bl	800c254 <__pow5mult>
 800b8c8:	9a03      	ldr	r2, [sp, #12]
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	4648      	mov	r0, r9
 800b8d0:	f000 fc1e 	bl	800c110 <__multiply>
 800b8d4:	9903      	ldr	r1, [sp, #12]
 800b8d6:	4680      	mov	r8, r0
 800b8d8:	4648      	mov	r0, r9
 800b8da:	f000 fb4f 	bl	800bf7c <_Bfree>
 800b8de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8e0:	1b1b      	subs	r3, r3, r4
 800b8e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8e4:	f000 80b1 	beq.w	800ba4a <_dtoa_r+0x8f2>
 800b8e8:	4641      	mov	r1, r8
 800b8ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	f000 fcb1 	bl	800c254 <__pow5mult>
 800b8f2:	9003      	str	r0, [sp, #12]
 800b8f4:	2101      	movs	r1, #1
 800b8f6:	4648      	mov	r0, r9
 800b8f8:	f000 fbf4 	bl	800c0e4 <__i2b>
 800b8fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8fe:	4604      	mov	r4, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	f000 81d8 	beq.w	800bcb6 <_dtoa_r+0xb5e>
 800b906:	461a      	mov	r2, r3
 800b908:	4601      	mov	r1, r0
 800b90a:	4648      	mov	r0, r9
 800b90c:	f000 fca2 	bl	800c254 <__pow5mult>
 800b910:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b912:	4604      	mov	r4, r0
 800b914:	2b01      	cmp	r3, #1
 800b916:	f300 809f 	bgt.w	800ba58 <_dtoa_r+0x900>
 800b91a:	9b06      	ldr	r3, [sp, #24]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f040 8097 	bne.w	800ba50 <_dtoa_r+0x8f8>
 800b922:	9b07      	ldr	r3, [sp, #28]
 800b924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f040 8093 	bne.w	800ba54 <_dtoa_r+0x8fc>
 800b92e:	9b07      	ldr	r3, [sp, #28]
 800b930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b934:	0d1b      	lsrs	r3, r3, #20
 800b936:	051b      	lsls	r3, r3, #20
 800b938:	b133      	cbz	r3, 800b948 <_dtoa_r+0x7f0>
 800b93a:	9b04      	ldr	r3, [sp, #16]
 800b93c:	3301      	adds	r3, #1
 800b93e:	9304      	str	r3, [sp, #16]
 800b940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b942:	3301      	adds	r3, #1
 800b944:	9309      	str	r3, [sp, #36]	@ 0x24
 800b946:	2301      	movs	r3, #1
 800b948:	930a      	str	r3, [sp, #40]	@ 0x28
 800b94a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 81b8 	beq.w	800bcc2 <_dtoa_r+0xb6a>
 800b952:	6923      	ldr	r3, [r4, #16]
 800b954:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b958:	6918      	ldr	r0, [r3, #16]
 800b95a:	f000 fb77 	bl	800c04c <__hi0bits>
 800b95e:	f1c0 0020 	rsb	r0, r0, #32
 800b962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b964:	4418      	add	r0, r3
 800b966:	f010 001f 	ands.w	r0, r0, #31
 800b96a:	f000 8082 	beq.w	800ba72 <_dtoa_r+0x91a>
 800b96e:	f1c0 0320 	rsb	r3, r0, #32
 800b972:	2b04      	cmp	r3, #4
 800b974:	dd73      	ble.n	800ba5e <_dtoa_r+0x906>
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	f1c0 001c 	rsb	r0, r0, #28
 800b97c:	4403      	add	r3, r0
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b982:	4406      	add	r6, r0
 800b984:	4403      	add	r3, r0
 800b986:	9309      	str	r3, [sp, #36]	@ 0x24
 800b988:	9b04      	ldr	r3, [sp, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	dd05      	ble.n	800b99a <_dtoa_r+0x842>
 800b98e:	461a      	mov	r2, r3
 800b990:	4648      	mov	r0, r9
 800b992:	9903      	ldr	r1, [sp, #12]
 800b994:	f000 fcb8 	bl	800c308 <__lshift>
 800b998:	9003      	str	r0, [sp, #12]
 800b99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	dd05      	ble.n	800b9ac <_dtoa_r+0x854>
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	4648      	mov	r0, r9
 800b9a6:	f000 fcaf 	bl	800c308 <__lshift>
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d061      	beq.n	800ba76 <_dtoa_r+0x91e>
 800b9b2:	4621      	mov	r1, r4
 800b9b4:	9803      	ldr	r0, [sp, #12]
 800b9b6:	f000 fd13 	bl	800c3e0 <__mcmp>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	da5b      	bge.n	800ba76 <_dtoa_r+0x91e>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	220a      	movs	r2, #10
 800b9c2:	4648      	mov	r0, r9
 800b9c4:	9903      	ldr	r1, [sp, #12]
 800b9c6:	f000 fafb 	bl	800bfc0 <__multadd>
 800b9ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9cc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b9d0:	9003      	str	r0, [sp, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 8177 	beq.w	800bcc6 <_dtoa_r+0xb6e>
 800b9d8:	4629      	mov	r1, r5
 800b9da:	2300      	movs	r3, #0
 800b9dc:	220a      	movs	r2, #10
 800b9de:	4648      	mov	r0, r9
 800b9e0:	f000 faee 	bl	800bfc0 <__multadd>
 800b9e4:	f1bb 0f00 	cmp.w	fp, #0
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	dc6f      	bgt.n	800bacc <_dtoa_r+0x974>
 800b9ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	dc49      	bgt.n	800ba86 <_dtoa_r+0x92e>
 800b9f2:	e06b      	b.n	800bacc <_dtoa_r+0x974>
 800b9f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9fa:	e73c      	b.n	800b876 <_dtoa_r+0x71e>
 800b9fc:	3fe00000 	.word	0x3fe00000
 800ba00:	40240000 	.word	0x40240000
 800ba04:	9b08      	ldr	r3, [sp, #32]
 800ba06:	1e5c      	subs	r4, r3, #1
 800ba08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba0a:	42a3      	cmp	r3, r4
 800ba0c:	db09      	blt.n	800ba22 <_dtoa_r+0x8ca>
 800ba0e:	1b1c      	subs	r4, r3, r4
 800ba10:	9b08      	ldr	r3, [sp, #32]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f6bf af30 	bge.w	800b878 <_dtoa_r+0x720>
 800ba18:	9b04      	ldr	r3, [sp, #16]
 800ba1a:	9a08      	ldr	r2, [sp, #32]
 800ba1c:	1a9e      	subs	r6, r3, r2
 800ba1e:	2300      	movs	r3, #0
 800ba20:	e72b      	b.n	800b87a <_dtoa_r+0x722>
 800ba22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba26:	1ae3      	subs	r3, r4, r3
 800ba28:	441a      	add	r2, r3
 800ba2a:	940a      	str	r4, [sp, #40]	@ 0x28
 800ba2c:	9e04      	ldr	r6, [sp, #16]
 800ba2e:	2400      	movs	r4, #0
 800ba30:	9b08      	ldr	r3, [sp, #32]
 800ba32:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba34:	e721      	b.n	800b87a <_dtoa_r+0x722>
 800ba36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba38:	9e04      	ldr	r6, [sp, #16]
 800ba3a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ba3c:	e728      	b.n	800b890 <_dtoa_r+0x738>
 800ba3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ba42:	e751      	b.n	800b8e8 <_dtoa_r+0x790>
 800ba44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba46:	9903      	ldr	r1, [sp, #12]
 800ba48:	e750      	b.n	800b8ec <_dtoa_r+0x794>
 800ba4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba4e:	e751      	b.n	800b8f4 <_dtoa_r+0x79c>
 800ba50:	2300      	movs	r3, #0
 800ba52:	e779      	b.n	800b948 <_dtoa_r+0x7f0>
 800ba54:	9b06      	ldr	r3, [sp, #24]
 800ba56:	e777      	b.n	800b948 <_dtoa_r+0x7f0>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba5c:	e779      	b.n	800b952 <_dtoa_r+0x7fa>
 800ba5e:	d093      	beq.n	800b988 <_dtoa_r+0x830>
 800ba60:	9a04      	ldr	r2, [sp, #16]
 800ba62:	331c      	adds	r3, #28
 800ba64:	441a      	add	r2, r3
 800ba66:	9204      	str	r2, [sp, #16]
 800ba68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba6a:	441e      	add	r6, r3
 800ba6c:	441a      	add	r2, r3
 800ba6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba70:	e78a      	b.n	800b988 <_dtoa_r+0x830>
 800ba72:	4603      	mov	r3, r0
 800ba74:	e7f4      	b.n	800ba60 <_dtoa_r+0x908>
 800ba76:	9b08      	ldr	r3, [sp, #32]
 800ba78:	46b8      	mov	r8, r7
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	dc20      	bgt.n	800bac0 <_dtoa_r+0x968>
 800ba7e:	469b      	mov	fp, r3
 800ba80:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	dd1e      	ble.n	800bac4 <_dtoa_r+0x96c>
 800ba86:	f1bb 0f00 	cmp.w	fp, #0
 800ba8a:	f47f adb1 	bne.w	800b5f0 <_dtoa_r+0x498>
 800ba8e:	4621      	mov	r1, r4
 800ba90:	465b      	mov	r3, fp
 800ba92:	2205      	movs	r2, #5
 800ba94:	4648      	mov	r0, r9
 800ba96:	f000 fa93 	bl	800bfc0 <__multadd>
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	4604      	mov	r4, r0
 800ba9e:	9803      	ldr	r0, [sp, #12]
 800baa0:	f000 fc9e 	bl	800c3e0 <__mcmp>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	f77f ada3 	ble.w	800b5f0 <_dtoa_r+0x498>
 800baaa:	4656      	mov	r6, sl
 800baac:	2331      	movs	r3, #49	@ 0x31
 800baae:	f108 0801 	add.w	r8, r8, #1
 800bab2:	f806 3b01 	strb.w	r3, [r6], #1
 800bab6:	e59f      	b.n	800b5f8 <_dtoa_r+0x4a0>
 800bab8:	46b8      	mov	r8, r7
 800baba:	9c08      	ldr	r4, [sp, #32]
 800babc:	4625      	mov	r5, r4
 800babe:	e7f4      	b.n	800baaa <_dtoa_r+0x952>
 800bac0:	f8dd b020 	ldr.w	fp, [sp, #32]
 800bac4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 8101 	beq.w	800bcce <_dtoa_r+0xb76>
 800bacc:	2e00      	cmp	r6, #0
 800bace:	dd05      	ble.n	800badc <_dtoa_r+0x984>
 800bad0:	4629      	mov	r1, r5
 800bad2:	4632      	mov	r2, r6
 800bad4:	4648      	mov	r0, r9
 800bad6:	f000 fc17 	bl	800c308 <__lshift>
 800bada:	4605      	mov	r5, r0
 800badc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d05c      	beq.n	800bb9c <_dtoa_r+0xa44>
 800bae2:	4648      	mov	r0, r9
 800bae4:	6869      	ldr	r1, [r5, #4]
 800bae6:	f000 fa09 	bl	800befc <_Balloc>
 800baea:	4606      	mov	r6, r0
 800baec:	b928      	cbnz	r0, 800bafa <_dtoa_r+0x9a2>
 800baee:	4602      	mov	r2, r0
 800baf0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800baf4:	4b80      	ldr	r3, [pc, #512]	@ (800bcf8 <_dtoa_r+0xba0>)
 800baf6:	f7ff bb43 	b.w	800b180 <_dtoa_r+0x28>
 800bafa:	692a      	ldr	r2, [r5, #16]
 800bafc:	f105 010c 	add.w	r1, r5, #12
 800bb00:	3202      	adds	r2, #2
 800bb02:	0092      	lsls	r2, r2, #2
 800bb04:	300c      	adds	r0, #12
 800bb06:	f7ff fa90 	bl	800b02a <memcpy>
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	4631      	mov	r1, r6
 800bb0e:	4648      	mov	r0, r9
 800bb10:	f000 fbfa 	bl	800c308 <__lshift>
 800bb14:	462f      	mov	r7, r5
 800bb16:	4605      	mov	r5, r0
 800bb18:	f10a 0301 	add.w	r3, sl, #1
 800bb1c:	9304      	str	r3, [sp, #16]
 800bb1e:	eb0a 030b 	add.w	r3, sl, fp
 800bb22:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb24:	9b06      	ldr	r3, [sp, #24]
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb2c:	9b04      	ldr	r3, [sp, #16]
 800bb2e:	4621      	mov	r1, r4
 800bb30:	9803      	ldr	r0, [sp, #12]
 800bb32:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bb36:	f7ff fa86 	bl	800b046 <quorem>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	3330      	adds	r3, #48	@ 0x30
 800bb40:	9006      	str	r0, [sp, #24]
 800bb42:	9803      	ldr	r0, [sp, #12]
 800bb44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb46:	f000 fc4b 	bl	800c3e0 <__mcmp>
 800bb4a:	462a      	mov	r2, r5
 800bb4c:	9008      	str	r0, [sp, #32]
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4648      	mov	r0, r9
 800bb52:	f000 fc61 	bl	800c418 <__mdiff>
 800bb56:	68c2      	ldr	r2, [r0, #12]
 800bb58:	4606      	mov	r6, r0
 800bb5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb5c:	bb02      	cbnz	r2, 800bba0 <_dtoa_r+0xa48>
 800bb5e:	4601      	mov	r1, r0
 800bb60:	9803      	ldr	r0, [sp, #12]
 800bb62:	f000 fc3d 	bl	800c3e0 <__mcmp>
 800bb66:	4602      	mov	r2, r0
 800bb68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4648      	mov	r0, r9
 800bb6e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800bb72:	f000 fa03 	bl	800bf7c <_Bfree>
 800bb76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bb78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bb7a:	9e04      	ldr	r6, [sp, #16]
 800bb7c:	ea42 0103 	orr.w	r1, r2, r3
 800bb80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb82:	4319      	orrs	r1, r3
 800bb84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb86:	d10d      	bne.n	800bba4 <_dtoa_r+0xa4c>
 800bb88:	2b39      	cmp	r3, #57	@ 0x39
 800bb8a:	d027      	beq.n	800bbdc <_dtoa_r+0xa84>
 800bb8c:	9a08      	ldr	r2, [sp, #32]
 800bb8e:	2a00      	cmp	r2, #0
 800bb90:	dd01      	ble.n	800bb96 <_dtoa_r+0xa3e>
 800bb92:	9b06      	ldr	r3, [sp, #24]
 800bb94:	3331      	adds	r3, #49	@ 0x31
 800bb96:	f88b 3000 	strb.w	r3, [fp]
 800bb9a:	e52e      	b.n	800b5fa <_dtoa_r+0x4a2>
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	e7b9      	b.n	800bb14 <_dtoa_r+0x9bc>
 800bba0:	2201      	movs	r2, #1
 800bba2:	e7e2      	b.n	800bb6a <_dtoa_r+0xa12>
 800bba4:	9908      	ldr	r1, [sp, #32]
 800bba6:	2900      	cmp	r1, #0
 800bba8:	db04      	blt.n	800bbb4 <_dtoa_r+0xa5c>
 800bbaa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800bbac:	4301      	orrs	r1, r0
 800bbae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbb0:	4301      	orrs	r1, r0
 800bbb2:	d120      	bne.n	800bbf6 <_dtoa_r+0xa9e>
 800bbb4:	2a00      	cmp	r2, #0
 800bbb6:	ddee      	ble.n	800bb96 <_dtoa_r+0xa3e>
 800bbb8:	2201      	movs	r2, #1
 800bbba:	9903      	ldr	r1, [sp, #12]
 800bbbc:	4648      	mov	r0, r9
 800bbbe:	9304      	str	r3, [sp, #16]
 800bbc0:	f000 fba2 	bl	800c308 <__lshift>
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	9003      	str	r0, [sp, #12]
 800bbc8:	f000 fc0a 	bl	800c3e0 <__mcmp>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	9b04      	ldr	r3, [sp, #16]
 800bbd0:	dc02      	bgt.n	800bbd8 <_dtoa_r+0xa80>
 800bbd2:	d1e0      	bne.n	800bb96 <_dtoa_r+0xa3e>
 800bbd4:	07da      	lsls	r2, r3, #31
 800bbd6:	d5de      	bpl.n	800bb96 <_dtoa_r+0xa3e>
 800bbd8:	2b39      	cmp	r3, #57	@ 0x39
 800bbda:	d1da      	bne.n	800bb92 <_dtoa_r+0xa3a>
 800bbdc:	2339      	movs	r3, #57	@ 0x39
 800bbde:	f88b 3000 	strb.w	r3, [fp]
 800bbe2:	4633      	mov	r3, r6
 800bbe4:	461e      	mov	r6, r3
 800bbe6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbea:	3b01      	subs	r3, #1
 800bbec:	2a39      	cmp	r2, #57	@ 0x39
 800bbee:	d04e      	beq.n	800bc8e <_dtoa_r+0xb36>
 800bbf0:	3201      	adds	r2, #1
 800bbf2:	701a      	strb	r2, [r3, #0]
 800bbf4:	e501      	b.n	800b5fa <_dtoa_r+0x4a2>
 800bbf6:	2a00      	cmp	r2, #0
 800bbf8:	dd03      	ble.n	800bc02 <_dtoa_r+0xaaa>
 800bbfa:	2b39      	cmp	r3, #57	@ 0x39
 800bbfc:	d0ee      	beq.n	800bbdc <_dtoa_r+0xa84>
 800bbfe:	3301      	adds	r3, #1
 800bc00:	e7c9      	b.n	800bb96 <_dtoa_r+0xa3e>
 800bc02:	9a04      	ldr	r2, [sp, #16]
 800bc04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bc0a:	428a      	cmp	r2, r1
 800bc0c:	d028      	beq.n	800bc60 <_dtoa_r+0xb08>
 800bc0e:	2300      	movs	r3, #0
 800bc10:	220a      	movs	r2, #10
 800bc12:	9903      	ldr	r1, [sp, #12]
 800bc14:	4648      	mov	r0, r9
 800bc16:	f000 f9d3 	bl	800bfc0 <__multadd>
 800bc1a:	42af      	cmp	r7, r5
 800bc1c:	9003      	str	r0, [sp, #12]
 800bc1e:	f04f 0300 	mov.w	r3, #0
 800bc22:	f04f 020a 	mov.w	r2, #10
 800bc26:	4639      	mov	r1, r7
 800bc28:	4648      	mov	r0, r9
 800bc2a:	d107      	bne.n	800bc3c <_dtoa_r+0xae4>
 800bc2c:	f000 f9c8 	bl	800bfc0 <__multadd>
 800bc30:	4607      	mov	r7, r0
 800bc32:	4605      	mov	r5, r0
 800bc34:	9b04      	ldr	r3, [sp, #16]
 800bc36:	3301      	adds	r3, #1
 800bc38:	9304      	str	r3, [sp, #16]
 800bc3a:	e777      	b.n	800bb2c <_dtoa_r+0x9d4>
 800bc3c:	f000 f9c0 	bl	800bfc0 <__multadd>
 800bc40:	4629      	mov	r1, r5
 800bc42:	4607      	mov	r7, r0
 800bc44:	2300      	movs	r3, #0
 800bc46:	220a      	movs	r2, #10
 800bc48:	4648      	mov	r0, r9
 800bc4a:	f000 f9b9 	bl	800bfc0 <__multadd>
 800bc4e:	4605      	mov	r5, r0
 800bc50:	e7f0      	b.n	800bc34 <_dtoa_r+0xadc>
 800bc52:	f1bb 0f00 	cmp.w	fp, #0
 800bc56:	bfcc      	ite	gt
 800bc58:	465e      	movgt	r6, fp
 800bc5a:	2601      	movle	r6, #1
 800bc5c:	2700      	movs	r7, #0
 800bc5e:	4456      	add	r6, sl
 800bc60:	2201      	movs	r2, #1
 800bc62:	9903      	ldr	r1, [sp, #12]
 800bc64:	4648      	mov	r0, r9
 800bc66:	9304      	str	r3, [sp, #16]
 800bc68:	f000 fb4e 	bl	800c308 <__lshift>
 800bc6c:	4621      	mov	r1, r4
 800bc6e:	9003      	str	r0, [sp, #12]
 800bc70:	f000 fbb6 	bl	800c3e0 <__mcmp>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	dcb4      	bgt.n	800bbe2 <_dtoa_r+0xa8a>
 800bc78:	d102      	bne.n	800bc80 <_dtoa_r+0xb28>
 800bc7a:	9b04      	ldr	r3, [sp, #16]
 800bc7c:	07db      	lsls	r3, r3, #31
 800bc7e:	d4b0      	bmi.n	800bbe2 <_dtoa_r+0xa8a>
 800bc80:	4633      	mov	r3, r6
 800bc82:	461e      	mov	r6, r3
 800bc84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc88:	2a30      	cmp	r2, #48	@ 0x30
 800bc8a:	d0fa      	beq.n	800bc82 <_dtoa_r+0xb2a>
 800bc8c:	e4b5      	b.n	800b5fa <_dtoa_r+0x4a2>
 800bc8e:	459a      	cmp	sl, r3
 800bc90:	d1a8      	bne.n	800bbe4 <_dtoa_r+0xa8c>
 800bc92:	2331      	movs	r3, #49	@ 0x31
 800bc94:	f108 0801 	add.w	r8, r8, #1
 800bc98:	f88a 3000 	strb.w	r3, [sl]
 800bc9c:	e4ad      	b.n	800b5fa <_dtoa_r+0x4a2>
 800bc9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bca0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bcfc <_dtoa_r+0xba4>
 800bca4:	b11b      	cbz	r3, 800bcae <_dtoa_r+0xb56>
 800bca6:	f10a 0308 	add.w	r3, sl, #8
 800bcaa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	4650      	mov	r0, sl
 800bcb0:	b017      	add	sp, #92	@ 0x5c
 800bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	f77f ae2e 	ble.w	800b91a <_dtoa_r+0x7c2>
 800bcbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcc0:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	e64d      	b.n	800b962 <_dtoa_r+0x80a>
 800bcc6:	f1bb 0f00 	cmp.w	fp, #0
 800bcca:	f77f aed9 	ble.w	800ba80 <_dtoa_r+0x928>
 800bcce:	4656      	mov	r6, sl
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	9803      	ldr	r0, [sp, #12]
 800bcd4:	f7ff f9b7 	bl	800b046 <quorem>
 800bcd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bcdc:	f806 3b01 	strb.w	r3, [r6], #1
 800bce0:	eba6 020a 	sub.w	r2, r6, sl
 800bce4:	4593      	cmp	fp, r2
 800bce6:	ddb4      	ble.n	800bc52 <_dtoa_r+0xafa>
 800bce8:	2300      	movs	r3, #0
 800bcea:	220a      	movs	r2, #10
 800bcec:	4648      	mov	r0, r9
 800bcee:	9903      	ldr	r1, [sp, #12]
 800bcf0:	f000 f966 	bl	800bfc0 <__multadd>
 800bcf4:	9003      	str	r0, [sp, #12]
 800bcf6:	e7eb      	b.n	800bcd0 <_dtoa_r+0xb78>
 800bcf8:	0800d69a 	.word	0x0800d69a
 800bcfc:	0800d61e 	.word	0x0800d61e

0800bd00 <_free_r>:
 800bd00:	b538      	push	{r3, r4, r5, lr}
 800bd02:	4605      	mov	r5, r0
 800bd04:	2900      	cmp	r1, #0
 800bd06:	d040      	beq.n	800bd8a <_free_r+0x8a>
 800bd08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd0c:	1f0c      	subs	r4, r1, #4
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	bfb8      	it	lt
 800bd12:	18e4      	addlt	r4, r4, r3
 800bd14:	f000 f8e6 	bl	800bee4 <__malloc_lock>
 800bd18:	4a1c      	ldr	r2, [pc, #112]	@ (800bd8c <_free_r+0x8c>)
 800bd1a:	6813      	ldr	r3, [r2, #0]
 800bd1c:	b933      	cbnz	r3, 800bd2c <_free_r+0x2c>
 800bd1e:	6063      	str	r3, [r4, #4]
 800bd20:	6014      	str	r4, [r2, #0]
 800bd22:	4628      	mov	r0, r5
 800bd24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd28:	f000 b8e2 	b.w	800bef0 <__malloc_unlock>
 800bd2c:	42a3      	cmp	r3, r4
 800bd2e:	d908      	bls.n	800bd42 <_free_r+0x42>
 800bd30:	6820      	ldr	r0, [r4, #0]
 800bd32:	1821      	adds	r1, r4, r0
 800bd34:	428b      	cmp	r3, r1
 800bd36:	bf01      	itttt	eq
 800bd38:	6819      	ldreq	r1, [r3, #0]
 800bd3a:	685b      	ldreq	r3, [r3, #4]
 800bd3c:	1809      	addeq	r1, r1, r0
 800bd3e:	6021      	streq	r1, [r4, #0]
 800bd40:	e7ed      	b.n	800bd1e <_free_r+0x1e>
 800bd42:	461a      	mov	r2, r3
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	b10b      	cbz	r3, 800bd4c <_free_r+0x4c>
 800bd48:	42a3      	cmp	r3, r4
 800bd4a:	d9fa      	bls.n	800bd42 <_free_r+0x42>
 800bd4c:	6811      	ldr	r1, [r2, #0]
 800bd4e:	1850      	adds	r0, r2, r1
 800bd50:	42a0      	cmp	r0, r4
 800bd52:	d10b      	bne.n	800bd6c <_free_r+0x6c>
 800bd54:	6820      	ldr	r0, [r4, #0]
 800bd56:	4401      	add	r1, r0
 800bd58:	1850      	adds	r0, r2, r1
 800bd5a:	4283      	cmp	r3, r0
 800bd5c:	6011      	str	r1, [r2, #0]
 800bd5e:	d1e0      	bne.n	800bd22 <_free_r+0x22>
 800bd60:	6818      	ldr	r0, [r3, #0]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	4408      	add	r0, r1
 800bd66:	6010      	str	r0, [r2, #0]
 800bd68:	6053      	str	r3, [r2, #4]
 800bd6a:	e7da      	b.n	800bd22 <_free_r+0x22>
 800bd6c:	d902      	bls.n	800bd74 <_free_r+0x74>
 800bd6e:	230c      	movs	r3, #12
 800bd70:	602b      	str	r3, [r5, #0]
 800bd72:	e7d6      	b.n	800bd22 <_free_r+0x22>
 800bd74:	6820      	ldr	r0, [r4, #0]
 800bd76:	1821      	adds	r1, r4, r0
 800bd78:	428b      	cmp	r3, r1
 800bd7a:	bf01      	itttt	eq
 800bd7c:	6819      	ldreq	r1, [r3, #0]
 800bd7e:	685b      	ldreq	r3, [r3, #4]
 800bd80:	1809      	addeq	r1, r1, r0
 800bd82:	6021      	streq	r1, [r4, #0]
 800bd84:	6063      	str	r3, [r4, #4]
 800bd86:	6054      	str	r4, [r2, #4]
 800bd88:	e7cb      	b.n	800bd22 <_free_r+0x22>
 800bd8a:	bd38      	pop	{r3, r4, r5, pc}
 800bd8c:	20000974 	.word	0x20000974

0800bd90 <malloc>:
 800bd90:	4b02      	ldr	r3, [pc, #8]	@ (800bd9c <malloc+0xc>)
 800bd92:	4601      	mov	r1, r0
 800bd94:	6818      	ldr	r0, [r3, #0]
 800bd96:	f000 b825 	b.w	800bde4 <_malloc_r>
 800bd9a:	bf00      	nop
 800bd9c:	20000018 	.word	0x20000018

0800bda0 <sbrk_aligned>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	4e0f      	ldr	r6, [pc, #60]	@ (800bde0 <sbrk_aligned+0x40>)
 800bda4:	460c      	mov	r4, r1
 800bda6:	6831      	ldr	r1, [r6, #0]
 800bda8:	4605      	mov	r5, r0
 800bdaa:	b911      	cbnz	r1, 800bdb2 <sbrk_aligned+0x12>
 800bdac:	f000 fe3a 	bl	800ca24 <_sbrk_r>
 800bdb0:	6030      	str	r0, [r6, #0]
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f000 fe35 	bl	800ca24 <_sbrk_r>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	d103      	bne.n	800bdc6 <sbrk_aligned+0x26>
 800bdbe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	bd70      	pop	{r4, r5, r6, pc}
 800bdc6:	1cc4      	adds	r4, r0, #3
 800bdc8:	f024 0403 	bic.w	r4, r4, #3
 800bdcc:	42a0      	cmp	r0, r4
 800bdce:	d0f8      	beq.n	800bdc2 <sbrk_aligned+0x22>
 800bdd0:	1a21      	subs	r1, r4, r0
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 fe26 	bl	800ca24 <_sbrk_r>
 800bdd8:	3001      	adds	r0, #1
 800bdda:	d1f2      	bne.n	800bdc2 <sbrk_aligned+0x22>
 800bddc:	e7ef      	b.n	800bdbe <sbrk_aligned+0x1e>
 800bdde:	bf00      	nop
 800bde0:	20000970 	.word	0x20000970

0800bde4 <_malloc_r>:
 800bde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde8:	1ccd      	adds	r5, r1, #3
 800bdea:	f025 0503 	bic.w	r5, r5, #3
 800bdee:	3508      	adds	r5, #8
 800bdf0:	2d0c      	cmp	r5, #12
 800bdf2:	bf38      	it	cc
 800bdf4:	250c      	movcc	r5, #12
 800bdf6:	2d00      	cmp	r5, #0
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	db01      	blt.n	800be00 <_malloc_r+0x1c>
 800bdfc:	42a9      	cmp	r1, r5
 800bdfe:	d904      	bls.n	800be0a <_malloc_r+0x26>
 800be00:	230c      	movs	r3, #12
 800be02:	6033      	str	r3, [r6, #0]
 800be04:	2000      	movs	r0, #0
 800be06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bee0 <_malloc_r+0xfc>
 800be0e:	f000 f869 	bl	800bee4 <__malloc_lock>
 800be12:	f8d8 3000 	ldr.w	r3, [r8]
 800be16:	461c      	mov	r4, r3
 800be18:	bb44      	cbnz	r4, 800be6c <_malloc_r+0x88>
 800be1a:	4629      	mov	r1, r5
 800be1c:	4630      	mov	r0, r6
 800be1e:	f7ff ffbf 	bl	800bda0 <sbrk_aligned>
 800be22:	1c43      	adds	r3, r0, #1
 800be24:	4604      	mov	r4, r0
 800be26:	d158      	bne.n	800beda <_malloc_r+0xf6>
 800be28:	f8d8 4000 	ldr.w	r4, [r8]
 800be2c:	4627      	mov	r7, r4
 800be2e:	2f00      	cmp	r7, #0
 800be30:	d143      	bne.n	800beba <_malloc_r+0xd6>
 800be32:	2c00      	cmp	r4, #0
 800be34:	d04b      	beq.n	800bece <_malloc_r+0xea>
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	4639      	mov	r1, r7
 800be3a:	4630      	mov	r0, r6
 800be3c:	eb04 0903 	add.w	r9, r4, r3
 800be40:	f000 fdf0 	bl	800ca24 <_sbrk_r>
 800be44:	4581      	cmp	r9, r0
 800be46:	d142      	bne.n	800bece <_malloc_r+0xea>
 800be48:	6821      	ldr	r1, [r4, #0]
 800be4a:	4630      	mov	r0, r6
 800be4c:	1a6d      	subs	r5, r5, r1
 800be4e:	4629      	mov	r1, r5
 800be50:	f7ff ffa6 	bl	800bda0 <sbrk_aligned>
 800be54:	3001      	adds	r0, #1
 800be56:	d03a      	beq.n	800bece <_malloc_r+0xea>
 800be58:	6823      	ldr	r3, [r4, #0]
 800be5a:	442b      	add	r3, r5
 800be5c:	6023      	str	r3, [r4, #0]
 800be5e:	f8d8 3000 	ldr.w	r3, [r8]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	bb62      	cbnz	r2, 800bec0 <_malloc_r+0xdc>
 800be66:	f8c8 7000 	str.w	r7, [r8]
 800be6a:	e00f      	b.n	800be8c <_malloc_r+0xa8>
 800be6c:	6822      	ldr	r2, [r4, #0]
 800be6e:	1b52      	subs	r2, r2, r5
 800be70:	d420      	bmi.n	800beb4 <_malloc_r+0xd0>
 800be72:	2a0b      	cmp	r2, #11
 800be74:	d917      	bls.n	800bea6 <_malloc_r+0xc2>
 800be76:	1961      	adds	r1, r4, r5
 800be78:	42a3      	cmp	r3, r4
 800be7a:	6025      	str	r5, [r4, #0]
 800be7c:	bf18      	it	ne
 800be7e:	6059      	strne	r1, [r3, #4]
 800be80:	6863      	ldr	r3, [r4, #4]
 800be82:	bf08      	it	eq
 800be84:	f8c8 1000 	streq.w	r1, [r8]
 800be88:	5162      	str	r2, [r4, r5]
 800be8a:	604b      	str	r3, [r1, #4]
 800be8c:	4630      	mov	r0, r6
 800be8e:	f000 f82f 	bl	800bef0 <__malloc_unlock>
 800be92:	f104 000b 	add.w	r0, r4, #11
 800be96:	1d23      	adds	r3, r4, #4
 800be98:	f020 0007 	bic.w	r0, r0, #7
 800be9c:	1ac2      	subs	r2, r0, r3
 800be9e:	bf1c      	itt	ne
 800bea0:	1a1b      	subne	r3, r3, r0
 800bea2:	50a3      	strne	r3, [r4, r2]
 800bea4:	e7af      	b.n	800be06 <_malloc_r+0x22>
 800bea6:	6862      	ldr	r2, [r4, #4]
 800bea8:	42a3      	cmp	r3, r4
 800beaa:	bf0c      	ite	eq
 800beac:	f8c8 2000 	streq.w	r2, [r8]
 800beb0:	605a      	strne	r2, [r3, #4]
 800beb2:	e7eb      	b.n	800be8c <_malloc_r+0xa8>
 800beb4:	4623      	mov	r3, r4
 800beb6:	6864      	ldr	r4, [r4, #4]
 800beb8:	e7ae      	b.n	800be18 <_malloc_r+0x34>
 800beba:	463c      	mov	r4, r7
 800bebc:	687f      	ldr	r7, [r7, #4]
 800bebe:	e7b6      	b.n	800be2e <_malloc_r+0x4a>
 800bec0:	461a      	mov	r2, r3
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	42a3      	cmp	r3, r4
 800bec6:	d1fb      	bne.n	800bec0 <_malloc_r+0xdc>
 800bec8:	2300      	movs	r3, #0
 800beca:	6053      	str	r3, [r2, #4]
 800becc:	e7de      	b.n	800be8c <_malloc_r+0xa8>
 800bece:	230c      	movs	r3, #12
 800bed0:	4630      	mov	r0, r6
 800bed2:	6033      	str	r3, [r6, #0]
 800bed4:	f000 f80c 	bl	800bef0 <__malloc_unlock>
 800bed8:	e794      	b.n	800be04 <_malloc_r+0x20>
 800beda:	6005      	str	r5, [r0, #0]
 800bedc:	e7d6      	b.n	800be8c <_malloc_r+0xa8>
 800bede:	bf00      	nop
 800bee0:	20000974 	.word	0x20000974

0800bee4 <__malloc_lock>:
 800bee4:	4801      	ldr	r0, [pc, #4]	@ (800beec <__malloc_lock+0x8>)
 800bee6:	f7ff b890 	b.w	800b00a <__retarget_lock_acquire_recursive>
 800beea:	bf00      	nop
 800beec:	2000096c 	.word	0x2000096c

0800bef0 <__malloc_unlock>:
 800bef0:	4801      	ldr	r0, [pc, #4]	@ (800bef8 <__malloc_unlock+0x8>)
 800bef2:	f7ff b88b 	b.w	800b00c <__retarget_lock_release_recursive>
 800bef6:	bf00      	nop
 800bef8:	2000096c 	.word	0x2000096c

0800befc <_Balloc>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	69c6      	ldr	r6, [r0, #28]
 800bf00:	4604      	mov	r4, r0
 800bf02:	460d      	mov	r5, r1
 800bf04:	b976      	cbnz	r6, 800bf24 <_Balloc+0x28>
 800bf06:	2010      	movs	r0, #16
 800bf08:	f7ff ff42 	bl	800bd90 <malloc>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	61e0      	str	r0, [r4, #28]
 800bf10:	b920      	cbnz	r0, 800bf1c <_Balloc+0x20>
 800bf12:	216b      	movs	r1, #107	@ 0x6b
 800bf14:	4b17      	ldr	r3, [pc, #92]	@ (800bf74 <_Balloc+0x78>)
 800bf16:	4818      	ldr	r0, [pc, #96]	@ (800bf78 <_Balloc+0x7c>)
 800bf18:	f000 fd94 	bl	800ca44 <__assert_func>
 800bf1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf20:	6006      	str	r6, [r0, #0]
 800bf22:	60c6      	str	r6, [r0, #12]
 800bf24:	69e6      	ldr	r6, [r4, #28]
 800bf26:	68f3      	ldr	r3, [r6, #12]
 800bf28:	b183      	cbz	r3, 800bf4c <_Balloc+0x50>
 800bf2a:	69e3      	ldr	r3, [r4, #28]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf32:	b9b8      	cbnz	r0, 800bf64 <_Balloc+0x68>
 800bf34:	2101      	movs	r1, #1
 800bf36:	fa01 f605 	lsl.w	r6, r1, r5
 800bf3a:	1d72      	adds	r2, r6, #5
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	0092      	lsls	r2, r2, #2
 800bf40:	f000 fd9e 	bl	800ca80 <_calloc_r>
 800bf44:	b160      	cbz	r0, 800bf60 <_Balloc+0x64>
 800bf46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf4a:	e00e      	b.n	800bf6a <_Balloc+0x6e>
 800bf4c:	2221      	movs	r2, #33	@ 0x21
 800bf4e:	2104      	movs	r1, #4
 800bf50:	4620      	mov	r0, r4
 800bf52:	f000 fd95 	bl	800ca80 <_calloc_r>
 800bf56:	69e3      	ldr	r3, [r4, #28]
 800bf58:	60f0      	str	r0, [r6, #12]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d1e4      	bne.n	800bf2a <_Balloc+0x2e>
 800bf60:	2000      	movs	r0, #0
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	6802      	ldr	r2, [r0, #0]
 800bf66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf70:	e7f7      	b.n	800bf62 <_Balloc+0x66>
 800bf72:	bf00      	nop
 800bf74:	0800d62b 	.word	0x0800d62b
 800bf78:	0800d6ab 	.word	0x0800d6ab

0800bf7c <_Bfree>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	69c6      	ldr	r6, [r0, #28]
 800bf80:	4605      	mov	r5, r0
 800bf82:	460c      	mov	r4, r1
 800bf84:	b976      	cbnz	r6, 800bfa4 <_Bfree+0x28>
 800bf86:	2010      	movs	r0, #16
 800bf88:	f7ff ff02 	bl	800bd90 <malloc>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	61e8      	str	r0, [r5, #28]
 800bf90:	b920      	cbnz	r0, 800bf9c <_Bfree+0x20>
 800bf92:	218f      	movs	r1, #143	@ 0x8f
 800bf94:	4b08      	ldr	r3, [pc, #32]	@ (800bfb8 <_Bfree+0x3c>)
 800bf96:	4809      	ldr	r0, [pc, #36]	@ (800bfbc <_Bfree+0x40>)
 800bf98:	f000 fd54 	bl	800ca44 <__assert_func>
 800bf9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfa0:	6006      	str	r6, [r0, #0]
 800bfa2:	60c6      	str	r6, [r0, #12]
 800bfa4:	b13c      	cbz	r4, 800bfb6 <_Bfree+0x3a>
 800bfa6:	69eb      	ldr	r3, [r5, #28]
 800bfa8:	6862      	ldr	r2, [r4, #4]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfb0:	6021      	str	r1, [r4, #0]
 800bfb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	0800d62b 	.word	0x0800d62b
 800bfbc:	0800d6ab 	.word	0x0800d6ab

0800bfc0 <__multadd>:
 800bfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc4:	4607      	mov	r7, r0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	461e      	mov	r6, r3
 800bfca:	2000      	movs	r0, #0
 800bfcc:	690d      	ldr	r5, [r1, #16]
 800bfce:	f101 0c14 	add.w	ip, r1, #20
 800bfd2:	f8dc 3000 	ldr.w	r3, [ip]
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	b299      	uxth	r1, r3
 800bfda:	fb02 6101 	mla	r1, r2, r1, r6
 800bfde:	0c1e      	lsrs	r6, r3, #16
 800bfe0:	0c0b      	lsrs	r3, r1, #16
 800bfe2:	fb02 3306 	mla	r3, r2, r6, r3
 800bfe6:	b289      	uxth	r1, r1
 800bfe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfec:	4285      	cmp	r5, r0
 800bfee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bff2:	f84c 1b04 	str.w	r1, [ip], #4
 800bff6:	dcec      	bgt.n	800bfd2 <__multadd+0x12>
 800bff8:	b30e      	cbz	r6, 800c03e <__multadd+0x7e>
 800bffa:	68a3      	ldr	r3, [r4, #8]
 800bffc:	42ab      	cmp	r3, r5
 800bffe:	dc19      	bgt.n	800c034 <__multadd+0x74>
 800c000:	6861      	ldr	r1, [r4, #4]
 800c002:	4638      	mov	r0, r7
 800c004:	3101      	adds	r1, #1
 800c006:	f7ff ff79 	bl	800befc <_Balloc>
 800c00a:	4680      	mov	r8, r0
 800c00c:	b928      	cbnz	r0, 800c01a <__multadd+0x5a>
 800c00e:	4602      	mov	r2, r0
 800c010:	21ba      	movs	r1, #186	@ 0xba
 800c012:	4b0c      	ldr	r3, [pc, #48]	@ (800c044 <__multadd+0x84>)
 800c014:	480c      	ldr	r0, [pc, #48]	@ (800c048 <__multadd+0x88>)
 800c016:	f000 fd15 	bl	800ca44 <__assert_func>
 800c01a:	6922      	ldr	r2, [r4, #16]
 800c01c:	f104 010c 	add.w	r1, r4, #12
 800c020:	3202      	adds	r2, #2
 800c022:	0092      	lsls	r2, r2, #2
 800c024:	300c      	adds	r0, #12
 800c026:	f7ff f800 	bl	800b02a <memcpy>
 800c02a:	4621      	mov	r1, r4
 800c02c:	4638      	mov	r0, r7
 800c02e:	f7ff ffa5 	bl	800bf7c <_Bfree>
 800c032:	4644      	mov	r4, r8
 800c034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c038:	3501      	adds	r5, #1
 800c03a:	615e      	str	r6, [r3, #20]
 800c03c:	6125      	str	r5, [r4, #16]
 800c03e:	4620      	mov	r0, r4
 800c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c044:	0800d69a 	.word	0x0800d69a
 800c048:	0800d6ab 	.word	0x0800d6ab

0800c04c <__hi0bits>:
 800c04c:	4603      	mov	r3, r0
 800c04e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c052:	bf3a      	itte	cc
 800c054:	0403      	lslcc	r3, r0, #16
 800c056:	2010      	movcc	r0, #16
 800c058:	2000      	movcs	r0, #0
 800c05a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c05e:	bf3c      	itt	cc
 800c060:	021b      	lslcc	r3, r3, #8
 800c062:	3008      	addcc	r0, #8
 800c064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c068:	bf3c      	itt	cc
 800c06a:	011b      	lslcc	r3, r3, #4
 800c06c:	3004      	addcc	r0, #4
 800c06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c072:	bf3c      	itt	cc
 800c074:	009b      	lslcc	r3, r3, #2
 800c076:	3002      	addcc	r0, #2
 800c078:	2b00      	cmp	r3, #0
 800c07a:	db05      	blt.n	800c088 <__hi0bits+0x3c>
 800c07c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c080:	f100 0001 	add.w	r0, r0, #1
 800c084:	bf08      	it	eq
 800c086:	2020      	moveq	r0, #32
 800c088:	4770      	bx	lr

0800c08a <__lo0bits>:
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	4602      	mov	r2, r0
 800c08e:	f013 0007 	ands.w	r0, r3, #7
 800c092:	d00b      	beq.n	800c0ac <__lo0bits+0x22>
 800c094:	07d9      	lsls	r1, r3, #31
 800c096:	d421      	bmi.n	800c0dc <__lo0bits+0x52>
 800c098:	0798      	lsls	r0, r3, #30
 800c09a:	bf49      	itett	mi
 800c09c:	085b      	lsrmi	r3, r3, #1
 800c09e:	089b      	lsrpl	r3, r3, #2
 800c0a0:	2001      	movmi	r0, #1
 800c0a2:	6013      	strmi	r3, [r2, #0]
 800c0a4:	bf5c      	itt	pl
 800c0a6:	2002      	movpl	r0, #2
 800c0a8:	6013      	strpl	r3, [r2, #0]
 800c0aa:	4770      	bx	lr
 800c0ac:	b299      	uxth	r1, r3
 800c0ae:	b909      	cbnz	r1, 800c0b4 <__lo0bits+0x2a>
 800c0b0:	2010      	movs	r0, #16
 800c0b2:	0c1b      	lsrs	r3, r3, #16
 800c0b4:	b2d9      	uxtb	r1, r3
 800c0b6:	b909      	cbnz	r1, 800c0bc <__lo0bits+0x32>
 800c0b8:	3008      	adds	r0, #8
 800c0ba:	0a1b      	lsrs	r3, r3, #8
 800c0bc:	0719      	lsls	r1, r3, #28
 800c0be:	bf04      	itt	eq
 800c0c0:	091b      	lsreq	r3, r3, #4
 800c0c2:	3004      	addeq	r0, #4
 800c0c4:	0799      	lsls	r1, r3, #30
 800c0c6:	bf04      	itt	eq
 800c0c8:	089b      	lsreq	r3, r3, #2
 800c0ca:	3002      	addeq	r0, #2
 800c0cc:	07d9      	lsls	r1, r3, #31
 800c0ce:	d403      	bmi.n	800c0d8 <__lo0bits+0x4e>
 800c0d0:	085b      	lsrs	r3, r3, #1
 800c0d2:	f100 0001 	add.w	r0, r0, #1
 800c0d6:	d003      	beq.n	800c0e0 <__lo0bits+0x56>
 800c0d8:	6013      	str	r3, [r2, #0]
 800c0da:	4770      	bx	lr
 800c0dc:	2000      	movs	r0, #0
 800c0de:	4770      	bx	lr
 800c0e0:	2020      	movs	r0, #32
 800c0e2:	4770      	bx	lr

0800c0e4 <__i2b>:
 800c0e4:	b510      	push	{r4, lr}
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	f7ff ff07 	bl	800befc <_Balloc>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	b928      	cbnz	r0, 800c0fe <__i2b+0x1a>
 800c0f2:	f240 1145 	movw	r1, #325	@ 0x145
 800c0f6:	4b04      	ldr	r3, [pc, #16]	@ (800c108 <__i2b+0x24>)
 800c0f8:	4804      	ldr	r0, [pc, #16]	@ (800c10c <__i2b+0x28>)
 800c0fa:	f000 fca3 	bl	800ca44 <__assert_func>
 800c0fe:	2301      	movs	r3, #1
 800c100:	6144      	str	r4, [r0, #20]
 800c102:	6103      	str	r3, [r0, #16]
 800c104:	bd10      	pop	{r4, pc}
 800c106:	bf00      	nop
 800c108:	0800d69a 	.word	0x0800d69a
 800c10c:	0800d6ab 	.word	0x0800d6ab

0800c110 <__multiply>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	4617      	mov	r7, r2
 800c116:	690a      	ldr	r2, [r1, #16]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	4689      	mov	r9, r1
 800c11c:	429a      	cmp	r2, r3
 800c11e:	bfa2      	ittt	ge
 800c120:	463b      	movge	r3, r7
 800c122:	460f      	movge	r7, r1
 800c124:	4699      	movge	r9, r3
 800c126:	693d      	ldr	r5, [r7, #16]
 800c128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	6879      	ldr	r1, [r7, #4]
 800c130:	eb05 060a 	add.w	r6, r5, sl
 800c134:	42b3      	cmp	r3, r6
 800c136:	b085      	sub	sp, #20
 800c138:	bfb8      	it	lt
 800c13a:	3101      	addlt	r1, #1
 800c13c:	f7ff fede 	bl	800befc <_Balloc>
 800c140:	b930      	cbnz	r0, 800c150 <__multiply+0x40>
 800c142:	4602      	mov	r2, r0
 800c144:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c148:	4b40      	ldr	r3, [pc, #256]	@ (800c24c <__multiply+0x13c>)
 800c14a:	4841      	ldr	r0, [pc, #260]	@ (800c250 <__multiply+0x140>)
 800c14c:	f000 fc7a 	bl	800ca44 <__assert_func>
 800c150:	f100 0414 	add.w	r4, r0, #20
 800c154:	4623      	mov	r3, r4
 800c156:	2200      	movs	r2, #0
 800c158:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c15c:	4573      	cmp	r3, lr
 800c15e:	d320      	bcc.n	800c1a2 <__multiply+0x92>
 800c160:	f107 0814 	add.w	r8, r7, #20
 800c164:	f109 0114 	add.w	r1, r9, #20
 800c168:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c16c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c170:	9302      	str	r3, [sp, #8]
 800c172:	1beb      	subs	r3, r5, r7
 800c174:	3b15      	subs	r3, #21
 800c176:	f023 0303 	bic.w	r3, r3, #3
 800c17a:	3304      	adds	r3, #4
 800c17c:	3715      	adds	r7, #21
 800c17e:	42bd      	cmp	r5, r7
 800c180:	bf38      	it	cc
 800c182:	2304      	movcc	r3, #4
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	9b02      	ldr	r3, [sp, #8]
 800c188:	9103      	str	r1, [sp, #12]
 800c18a:	428b      	cmp	r3, r1
 800c18c:	d80c      	bhi.n	800c1a8 <__multiply+0x98>
 800c18e:	2e00      	cmp	r6, #0
 800c190:	dd03      	ble.n	800c19a <__multiply+0x8a>
 800c192:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c196:	2b00      	cmp	r3, #0
 800c198:	d055      	beq.n	800c246 <__multiply+0x136>
 800c19a:	6106      	str	r6, [r0, #16]
 800c19c:	b005      	add	sp, #20
 800c19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1a2:	f843 2b04 	str.w	r2, [r3], #4
 800c1a6:	e7d9      	b.n	800c15c <__multiply+0x4c>
 800c1a8:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1ac:	f1ba 0f00 	cmp.w	sl, #0
 800c1b0:	d01f      	beq.n	800c1f2 <__multiply+0xe2>
 800c1b2:	46c4      	mov	ip, r8
 800c1b4:	46a1      	mov	r9, r4
 800c1b6:	2700      	movs	r7, #0
 800c1b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1bc:	f8d9 3000 	ldr.w	r3, [r9]
 800c1c0:	fa1f fb82 	uxth.w	fp, r2
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	fb0a 330b 	mla	r3, sl, fp, r3
 800c1ca:	443b      	add	r3, r7
 800c1cc:	f8d9 7000 	ldr.w	r7, [r9]
 800c1d0:	0c12      	lsrs	r2, r2, #16
 800c1d2:	0c3f      	lsrs	r7, r7, #16
 800c1d4:	fb0a 7202 	mla	r2, sl, r2, r7
 800c1d8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1e2:	4565      	cmp	r5, ip
 800c1e4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c1e8:	f849 3b04 	str.w	r3, [r9], #4
 800c1ec:	d8e4      	bhi.n	800c1b8 <__multiply+0xa8>
 800c1ee:	9b01      	ldr	r3, [sp, #4]
 800c1f0:	50e7      	str	r7, [r4, r3]
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	3104      	adds	r1, #4
 800c1f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1fa:	f1b9 0f00 	cmp.w	r9, #0
 800c1fe:	d020      	beq.n	800c242 <__multiply+0x132>
 800c200:	4647      	mov	r7, r8
 800c202:	46a4      	mov	ip, r4
 800c204:	f04f 0a00 	mov.w	sl, #0
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	f8b7 b000 	ldrh.w	fp, [r7]
 800c20e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c212:	b29b      	uxth	r3, r3
 800c214:	fb09 220b 	mla	r2, r9, fp, r2
 800c218:	4452      	add	r2, sl
 800c21a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c21e:	f84c 3b04 	str.w	r3, [ip], #4
 800c222:	f857 3b04 	ldr.w	r3, [r7], #4
 800c226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c22a:	f8bc 3000 	ldrh.w	r3, [ip]
 800c22e:	42bd      	cmp	r5, r7
 800c230:	fb09 330a 	mla	r3, r9, sl, r3
 800c234:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c23c:	d8e5      	bhi.n	800c20a <__multiply+0xfa>
 800c23e:	9a01      	ldr	r2, [sp, #4]
 800c240:	50a3      	str	r3, [r4, r2]
 800c242:	3404      	adds	r4, #4
 800c244:	e79f      	b.n	800c186 <__multiply+0x76>
 800c246:	3e01      	subs	r6, #1
 800c248:	e7a1      	b.n	800c18e <__multiply+0x7e>
 800c24a:	bf00      	nop
 800c24c:	0800d69a 	.word	0x0800d69a
 800c250:	0800d6ab 	.word	0x0800d6ab

0800c254 <__pow5mult>:
 800c254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c258:	4615      	mov	r5, r2
 800c25a:	f012 0203 	ands.w	r2, r2, #3
 800c25e:	4607      	mov	r7, r0
 800c260:	460e      	mov	r6, r1
 800c262:	d007      	beq.n	800c274 <__pow5mult+0x20>
 800c264:	4c25      	ldr	r4, [pc, #148]	@ (800c2fc <__pow5mult+0xa8>)
 800c266:	3a01      	subs	r2, #1
 800c268:	2300      	movs	r3, #0
 800c26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c26e:	f7ff fea7 	bl	800bfc0 <__multadd>
 800c272:	4606      	mov	r6, r0
 800c274:	10ad      	asrs	r5, r5, #2
 800c276:	d03d      	beq.n	800c2f4 <__pow5mult+0xa0>
 800c278:	69fc      	ldr	r4, [r7, #28]
 800c27a:	b97c      	cbnz	r4, 800c29c <__pow5mult+0x48>
 800c27c:	2010      	movs	r0, #16
 800c27e:	f7ff fd87 	bl	800bd90 <malloc>
 800c282:	4602      	mov	r2, r0
 800c284:	61f8      	str	r0, [r7, #28]
 800c286:	b928      	cbnz	r0, 800c294 <__pow5mult+0x40>
 800c288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c28c:	4b1c      	ldr	r3, [pc, #112]	@ (800c300 <__pow5mult+0xac>)
 800c28e:	481d      	ldr	r0, [pc, #116]	@ (800c304 <__pow5mult+0xb0>)
 800c290:	f000 fbd8 	bl	800ca44 <__assert_func>
 800c294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c298:	6004      	str	r4, [r0, #0]
 800c29a:	60c4      	str	r4, [r0, #12]
 800c29c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2a4:	b94c      	cbnz	r4, 800c2ba <__pow5mult+0x66>
 800c2a6:	f240 2171 	movw	r1, #625	@ 0x271
 800c2aa:	4638      	mov	r0, r7
 800c2ac:	f7ff ff1a 	bl	800c0e4 <__i2b>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2b8:	6003      	str	r3, [r0, #0]
 800c2ba:	f04f 0900 	mov.w	r9, #0
 800c2be:	07eb      	lsls	r3, r5, #31
 800c2c0:	d50a      	bpl.n	800c2d8 <__pow5mult+0x84>
 800c2c2:	4631      	mov	r1, r6
 800c2c4:	4622      	mov	r2, r4
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	f7ff ff22 	bl	800c110 <__multiply>
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	f7ff fe53 	bl	800bf7c <_Bfree>
 800c2d6:	4646      	mov	r6, r8
 800c2d8:	106d      	asrs	r5, r5, #1
 800c2da:	d00b      	beq.n	800c2f4 <__pow5mult+0xa0>
 800c2dc:	6820      	ldr	r0, [r4, #0]
 800c2de:	b938      	cbnz	r0, 800c2f0 <__pow5mult+0x9c>
 800c2e0:	4622      	mov	r2, r4
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	4638      	mov	r0, r7
 800c2e6:	f7ff ff13 	bl	800c110 <__multiply>
 800c2ea:	6020      	str	r0, [r4, #0]
 800c2ec:	f8c0 9000 	str.w	r9, [r0]
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	e7e4      	b.n	800c2be <__pow5mult+0x6a>
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2fa:	bf00      	nop
 800c2fc:	0800d75c 	.word	0x0800d75c
 800c300:	0800d62b 	.word	0x0800d62b
 800c304:	0800d6ab 	.word	0x0800d6ab

0800c308 <__lshift>:
 800c308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c30c:	460c      	mov	r4, r1
 800c30e:	4607      	mov	r7, r0
 800c310:	4691      	mov	r9, r2
 800c312:	6923      	ldr	r3, [r4, #16]
 800c314:	6849      	ldr	r1, [r1, #4]
 800c316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c320:	f108 0601 	add.w	r6, r8, #1
 800c324:	42b3      	cmp	r3, r6
 800c326:	db0b      	blt.n	800c340 <__lshift+0x38>
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff fde7 	bl	800befc <_Balloc>
 800c32e:	4605      	mov	r5, r0
 800c330:	b948      	cbnz	r0, 800c346 <__lshift+0x3e>
 800c332:	4602      	mov	r2, r0
 800c334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c338:	4b27      	ldr	r3, [pc, #156]	@ (800c3d8 <__lshift+0xd0>)
 800c33a:	4828      	ldr	r0, [pc, #160]	@ (800c3dc <__lshift+0xd4>)
 800c33c:	f000 fb82 	bl	800ca44 <__assert_func>
 800c340:	3101      	adds	r1, #1
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	e7ee      	b.n	800c324 <__lshift+0x1c>
 800c346:	2300      	movs	r3, #0
 800c348:	f100 0114 	add.w	r1, r0, #20
 800c34c:	f100 0210 	add.w	r2, r0, #16
 800c350:	4618      	mov	r0, r3
 800c352:	4553      	cmp	r3, sl
 800c354:	db33      	blt.n	800c3be <__lshift+0xb6>
 800c356:	6920      	ldr	r0, [r4, #16]
 800c358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c35c:	f104 0314 	add.w	r3, r4, #20
 800c360:	f019 091f 	ands.w	r9, r9, #31
 800c364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c36c:	d02b      	beq.n	800c3c6 <__lshift+0xbe>
 800c36e:	468a      	mov	sl, r1
 800c370:	2200      	movs	r2, #0
 800c372:	f1c9 0e20 	rsb	lr, r9, #32
 800c376:	6818      	ldr	r0, [r3, #0]
 800c378:	fa00 f009 	lsl.w	r0, r0, r9
 800c37c:	4310      	orrs	r0, r2
 800c37e:	f84a 0b04 	str.w	r0, [sl], #4
 800c382:	f853 2b04 	ldr.w	r2, [r3], #4
 800c386:	459c      	cmp	ip, r3
 800c388:	fa22 f20e 	lsr.w	r2, r2, lr
 800c38c:	d8f3      	bhi.n	800c376 <__lshift+0x6e>
 800c38e:	ebac 0304 	sub.w	r3, ip, r4
 800c392:	3b15      	subs	r3, #21
 800c394:	f023 0303 	bic.w	r3, r3, #3
 800c398:	3304      	adds	r3, #4
 800c39a:	f104 0015 	add.w	r0, r4, #21
 800c39e:	4560      	cmp	r0, ip
 800c3a0:	bf88      	it	hi
 800c3a2:	2304      	movhi	r3, #4
 800c3a4:	50ca      	str	r2, [r1, r3]
 800c3a6:	b10a      	cbz	r2, 800c3ac <__lshift+0xa4>
 800c3a8:	f108 0602 	add.w	r6, r8, #2
 800c3ac:	3e01      	subs	r6, #1
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	4621      	mov	r1, r4
 800c3b2:	612e      	str	r6, [r5, #16]
 800c3b4:	f7ff fde2 	bl	800bf7c <_Bfree>
 800c3b8:	4628      	mov	r0, r5
 800c3ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3be:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	e7c5      	b.n	800c352 <__lshift+0x4a>
 800c3c6:	3904      	subs	r1, #4
 800c3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3cc:	459c      	cmp	ip, r3
 800c3ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3d2:	d8f9      	bhi.n	800c3c8 <__lshift+0xc0>
 800c3d4:	e7ea      	b.n	800c3ac <__lshift+0xa4>
 800c3d6:	bf00      	nop
 800c3d8:	0800d69a 	.word	0x0800d69a
 800c3dc:	0800d6ab 	.word	0x0800d6ab

0800c3e0 <__mcmp>:
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	690a      	ldr	r2, [r1, #16]
 800c3e4:	6900      	ldr	r0, [r0, #16]
 800c3e6:	b530      	push	{r4, r5, lr}
 800c3e8:	1a80      	subs	r0, r0, r2
 800c3ea:	d10e      	bne.n	800c40a <__mcmp+0x2a>
 800c3ec:	3314      	adds	r3, #20
 800c3ee:	3114      	adds	r1, #20
 800c3f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c400:	4295      	cmp	r5, r2
 800c402:	d003      	beq.n	800c40c <__mcmp+0x2c>
 800c404:	d205      	bcs.n	800c412 <__mcmp+0x32>
 800c406:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c40a:	bd30      	pop	{r4, r5, pc}
 800c40c:	42a3      	cmp	r3, r4
 800c40e:	d3f3      	bcc.n	800c3f8 <__mcmp+0x18>
 800c410:	e7fb      	b.n	800c40a <__mcmp+0x2a>
 800c412:	2001      	movs	r0, #1
 800c414:	e7f9      	b.n	800c40a <__mcmp+0x2a>
	...

0800c418 <__mdiff>:
 800c418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	4689      	mov	r9, r1
 800c41e:	4606      	mov	r6, r0
 800c420:	4611      	mov	r1, r2
 800c422:	4648      	mov	r0, r9
 800c424:	4614      	mov	r4, r2
 800c426:	f7ff ffdb 	bl	800c3e0 <__mcmp>
 800c42a:	1e05      	subs	r5, r0, #0
 800c42c:	d112      	bne.n	800c454 <__mdiff+0x3c>
 800c42e:	4629      	mov	r1, r5
 800c430:	4630      	mov	r0, r6
 800c432:	f7ff fd63 	bl	800befc <_Balloc>
 800c436:	4602      	mov	r2, r0
 800c438:	b928      	cbnz	r0, 800c446 <__mdiff+0x2e>
 800c43a:	f240 2137 	movw	r1, #567	@ 0x237
 800c43e:	4b3e      	ldr	r3, [pc, #248]	@ (800c538 <__mdiff+0x120>)
 800c440:	483e      	ldr	r0, [pc, #248]	@ (800c53c <__mdiff+0x124>)
 800c442:	f000 faff 	bl	800ca44 <__assert_func>
 800c446:	2301      	movs	r3, #1
 800c448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c44c:	4610      	mov	r0, r2
 800c44e:	b003      	add	sp, #12
 800c450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c454:	bfbc      	itt	lt
 800c456:	464b      	movlt	r3, r9
 800c458:	46a1      	movlt	r9, r4
 800c45a:	4630      	mov	r0, r6
 800c45c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c460:	bfba      	itte	lt
 800c462:	461c      	movlt	r4, r3
 800c464:	2501      	movlt	r5, #1
 800c466:	2500      	movge	r5, #0
 800c468:	f7ff fd48 	bl	800befc <_Balloc>
 800c46c:	4602      	mov	r2, r0
 800c46e:	b918      	cbnz	r0, 800c478 <__mdiff+0x60>
 800c470:	f240 2145 	movw	r1, #581	@ 0x245
 800c474:	4b30      	ldr	r3, [pc, #192]	@ (800c538 <__mdiff+0x120>)
 800c476:	e7e3      	b.n	800c440 <__mdiff+0x28>
 800c478:	f100 0b14 	add.w	fp, r0, #20
 800c47c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c480:	f109 0310 	add.w	r3, r9, #16
 800c484:	60c5      	str	r5, [r0, #12]
 800c486:	f04f 0c00 	mov.w	ip, #0
 800c48a:	f109 0514 	add.w	r5, r9, #20
 800c48e:	46d9      	mov	r9, fp
 800c490:	6926      	ldr	r6, [r4, #16]
 800c492:	f104 0e14 	add.w	lr, r4, #20
 800c496:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c49a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c49e:	9301      	str	r3, [sp, #4]
 800c4a0:	9b01      	ldr	r3, [sp, #4]
 800c4a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4aa:	b281      	uxth	r1, r0
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	fa1f f38a 	uxth.w	r3, sl
 800c4b2:	1a5b      	subs	r3, r3, r1
 800c4b4:	0c00      	lsrs	r0, r0, #16
 800c4b6:	4463      	add	r3, ip
 800c4b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c4bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4c6:	4576      	cmp	r6, lr
 800c4c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4cc:	f849 3b04 	str.w	r3, [r9], #4
 800c4d0:	d8e6      	bhi.n	800c4a0 <__mdiff+0x88>
 800c4d2:	1b33      	subs	r3, r6, r4
 800c4d4:	3b15      	subs	r3, #21
 800c4d6:	f023 0303 	bic.w	r3, r3, #3
 800c4da:	3415      	adds	r4, #21
 800c4dc:	3304      	adds	r3, #4
 800c4de:	42a6      	cmp	r6, r4
 800c4e0:	bf38      	it	cc
 800c4e2:	2304      	movcc	r3, #4
 800c4e4:	441d      	add	r5, r3
 800c4e6:	445b      	add	r3, fp
 800c4e8:	461e      	mov	r6, r3
 800c4ea:	462c      	mov	r4, r5
 800c4ec:	4544      	cmp	r4, r8
 800c4ee:	d30e      	bcc.n	800c50e <__mdiff+0xf6>
 800c4f0:	f108 0103 	add.w	r1, r8, #3
 800c4f4:	1b49      	subs	r1, r1, r5
 800c4f6:	f021 0103 	bic.w	r1, r1, #3
 800c4fa:	3d03      	subs	r5, #3
 800c4fc:	45a8      	cmp	r8, r5
 800c4fe:	bf38      	it	cc
 800c500:	2100      	movcc	r1, #0
 800c502:	440b      	add	r3, r1
 800c504:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c508:	b199      	cbz	r1, 800c532 <__mdiff+0x11a>
 800c50a:	6117      	str	r7, [r2, #16]
 800c50c:	e79e      	b.n	800c44c <__mdiff+0x34>
 800c50e:	46e6      	mov	lr, ip
 800c510:	f854 1b04 	ldr.w	r1, [r4], #4
 800c514:	fa1f fc81 	uxth.w	ip, r1
 800c518:	44f4      	add	ip, lr
 800c51a:	0c08      	lsrs	r0, r1, #16
 800c51c:	4471      	add	r1, lr
 800c51e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c522:	b289      	uxth	r1, r1
 800c524:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c52c:	f846 1b04 	str.w	r1, [r6], #4
 800c530:	e7dc      	b.n	800c4ec <__mdiff+0xd4>
 800c532:	3f01      	subs	r7, #1
 800c534:	e7e6      	b.n	800c504 <__mdiff+0xec>
 800c536:	bf00      	nop
 800c538:	0800d69a 	.word	0x0800d69a
 800c53c:	0800d6ab 	.word	0x0800d6ab

0800c540 <__d2b>:
 800c540:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c544:	2101      	movs	r1, #1
 800c546:	4690      	mov	r8, r2
 800c548:	4699      	mov	r9, r3
 800c54a:	9e08      	ldr	r6, [sp, #32]
 800c54c:	f7ff fcd6 	bl	800befc <_Balloc>
 800c550:	4604      	mov	r4, r0
 800c552:	b930      	cbnz	r0, 800c562 <__d2b+0x22>
 800c554:	4602      	mov	r2, r0
 800c556:	f240 310f 	movw	r1, #783	@ 0x30f
 800c55a:	4b23      	ldr	r3, [pc, #140]	@ (800c5e8 <__d2b+0xa8>)
 800c55c:	4823      	ldr	r0, [pc, #140]	@ (800c5ec <__d2b+0xac>)
 800c55e:	f000 fa71 	bl	800ca44 <__assert_func>
 800c562:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c566:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c56a:	b10d      	cbz	r5, 800c570 <__d2b+0x30>
 800c56c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	f1b8 0300 	subs.w	r3, r8, #0
 800c576:	d024      	beq.n	800c5c2 <__d2b+0x82>
 800c578:	4668      	mov	r0, sp
 800c57a:	9300      	str	r3, [sp, #0]
 800c57c:	f7ff fd85 	bl	800c08a <__lo0bits>
 800c580:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c584:	b1d8      	cbz	r0, 800c5be <__d2b+0x7e>
 800c586:	f1c0 0320 	rsb	r3, r0, #32
 800c58a:	fa02 f303 	lsl.w	r3, r2, r3
 800c58e:	430b      	orrs	r3, r1
 800c590:	40c2      	lsrs	r2, r0
 800c592:	6163      	str	r3, [r4, #20]
 800c594:	9201      	str	r2, [sp, #4]
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bf0c      	ite	eq
 800c59c:	2201      	moveq	r2, #1
 800c59e:	2202      	movne	r2, #2
 800c5a0:	61a3      	str	r3, [r4, #24]
 800c5a2:	6122      	str	r2, [r4, #16]
 800c5a4:	b1ad      	cbz	r5, 800c5d2 <__d2b+0x92>
 800c5a6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c5aa:	4405      	add	r5, r0
 800c5ac:	6035      	str	r5, [r6, #0]
 800c5ae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c5b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b4:	6018      	str	r0, [r3, #0]
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	b002      	add	sp, #8
 800c5ba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c5be:	6161      	str	r1, [r4, #20]
 800c5c0:	e7e9      	b.n	800c596 <__d2b+0x56>
 800c5c2:	a801      	add	r0, sp, #4
 800c5c4:	f7ff fd61 	bl	800c08a <__lo0bits>
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	6163      	str	r3, [r4, #20]
 800c5ce:	3020      	adds	r0, #32
 800c5d0:	e7e7      	b.n	800c5a2 <__d2b+0x62>
 800c5d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c5d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5da:	6030      	str	r0, [r6, #0]
 800c5dc:	6918      	ldr	r0, [r3, #16]
 800c5de:	f7ff fd35 	bl	800c04c <__hi0bits>
 800c5e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5e6:	e7e4      	b.n	800c5b2 <__d2b+0x72>
 800c5e8:	0800d69a 	.word	0x0800d69a
 800c5ec:	0800d6ab 	.word	0x0800d6ab

0800c5f0 <__ssputs_r>:
 800c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f4:	461f      	mov	r7, r3
 800c5f6:	688e      	ldr	r6, [r1, #8]
 800c5f8:	4682      	mov	sl, r0
 800c5fa:	42be      	cmp	r6, r7
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	4690      	mov	r8, r2
 800c600:	680b      	ldr	r3, [r1, #0]
 800c602:	d82d      	bhi.n	800c660 <__ssputs_r+0x70>
 800c604:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c608:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c60c:	d026      	beq.n	800c65c <__ssputs_r+0x6c>
 800c60e:	6965      	ldr	r5, [r4, #20]
 800c610:	6909      	ldr	r1, [r1, #16]
 800c612:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c616:	eba3 0901 	sub.w	r9, r3, r1
 800c61a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c61e:	1c7b      	adds	r3, r7, #1
 800c620:	444b      	add	r3, r9
 800c622:	106d      	asrs	r5, r5, #1
 800c624:	429d      	cmp	r5, r3
 800c626:	bf38      	it	cc
 800c628:	461d      	movcc	r5, r3
 800c62a:	0553      	lsls	r3, r2, #21
 800c62c:	d527      	bpl.n	800c67e <__ssputs_r+0x8e>
 800c62e:	4629      	mov	r1, r5
 800c630:	f7ff fbd8 	bl	800bde4 <_malloc_r>
 800c634:	4606      	mov	r6, r0
 800c636:	b360      	cbz	r0, 800c692 <__ssputs_r+0xa2>
 800c638:	464a      	mov	r2, r9
 800c63a:	6921      	ldr	r1, [r4, #16]
 800c63c:	f7fe fcf5 	bl	800b02a <memcpy>
 800c640:	89a3      	ldrh	r3, [r4, #12]
 800c642:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c64a:	81a3      	strh	r3, [r4, #12]
 800c64c:	6126      	str	r6, [r4, #16]
 800c64e:	444e      	add	r6, r9
 800c650:	6026      	str	r6, [r4, #0]
 800c652:	463e      	mov	r6, r7
 800c654:	6165      	str	r5, [r4, #20]
 800c656:	eba5 0509 	sub.w	r5, r5, r9
 800c65a:	60a5      	str	r5, [r4, #8]
 800c65c:	42be      	cmp	r6, r7
 800c65e:	d900      	bls.n	800c662 <__ssputs_r+0x72>
 800c660:	463e      	mov	r6, r7
 800c662:	4632      	mov	r2, r6
 800c664:	4641      	mov	r1, r8
 800c666:	6820      	ldr	r0, [r4, #0]
 800c668:	f000 f9c2 	bl	800c9f0 <memmove>
 800c66c:	2000      	movs	r0, #0
 800c66e:	68a3      	ldr	r3, [r4, #8]
 800c670:	1b9b      	subs	r3, r3, r6
 800c672:	60a3      	str	r3, [r4, #8]
 800c674:	6823      	ldr	r3, [r4, #0]
 800c676:	4433      	add	r3, r6
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c67e:	462a      	mov	r2, r5
 800c680:	f000 fa24 	bl	800cacc <_realloc_r>
 800c684:	4606      	mov	r6, r0
 800c686:	2800      	cmp	r0, #0
 800c688:	d1e0      	bne.n	800c64c <__ssputs_r+0x5c>
 800c68a:	4650      	mov	r0, sl
 800c68c:	6921      	ldr	r1, [r4, #16]
 800c68e:	f7ff fb37 	bl	800bd00 <_free_r>
 800c692:	230c      	movs	r3, #12
 800c694:	f8ca 3000 	str.w	r3, [sl]
 800c698:	89a3      	ldrh	r3, [r4, #12]
 800c69a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6a2:	81a3      	strh	r3, [r4, #12]
 800c6a4:	e7e9      	b.n	800c67a <__ssputs_r+0x8a>
	...

0800c6a8 <_svfiprintf_r>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	4698      	mov	r8, r3
 800c6ae:	898b      	ldrh	r3, [r1, #12]
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	061b      	lsls	r3, r3, #24
 800c6b4:	460d      	mov	r5, r1
 800c6b6:	4614      	mov	r4, r2
 800c6b8:	b09d      	sub	sp, #116	@ 0x74
 800c6ba:	d510      	bpl.n	800c6de <_svfiprintf_r+0x36>
 800c6bc:	690b      	ldr	r3, [r1, #16]
 800c6be:	b973      	cbnz	r3, 800c6de <_svfiprintf_r+0x36>
 800c6c0:	2140      	movs	r1, #64	@ 0x40
 800c6c2:	f7ff fb8f 	bl	800bde4 <_malloc_r>
 800c6c6:	6028      	str	r0, [r5, #0]
 800c6c8:	6128      	str	r0, [r5, #16]
 800c6ca:	b930      	cbnz	r0, 800c6da <_svfiprintf_r+0x32>
 800c6cc:	230c      	movs	r3, #12
 800c6ce:	603b      	str	r3, [r7, #0]
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6d4:	b01d      	add	sp, #116	@ 0x74
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	2340      	movs	r3, #64	@ 0x40
 800c6dc:	616b      	str	r3, [r5, #20]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6e2:	2320      	movs	r3, #32
 800c6e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c6e8:	2330      	movs	r3, #48	@ 0x30
 800c6ea:	f04f 0901 	mov.w	r9, #1
 800c6ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c88c <_svfiprintf_r+0x1e4>
 800c6f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c6fa:	4623      	mov	r3, r4
 800c6fc:	469a      	mov	sl, r3
 800c6fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c702:	b10a      	cbz	r2, 800c708 <_svfiprintf_r+0x60>
 800c704:	2a25      	cmp	r2, #37	@ 0x25
 800c706:	d1f9      	bne.n	800c6fc <_svfiprintf_r+0x54>
 800c708:	ebba 0b04 	subs.w	fp, sl, r4
 800c70c:	d00b      	beq.n	800c726 <_svfiprintf_r+0x7e>
 800c70e:	465b      	mov	r3, fp
 800c710:	4622      	mov	r2, r4
 800c712:	4629      	mov	r1, r5
 800c714:	4638      	mov	r0, r7
 800c716:	f7ff ff6b 	bl	800c5f0 <__ssputs_r>
 800c71a:	3001      	adds	r0, #1
 800c71c:	f000 80a7 	beq.w	800c86e <_svfiprintf_r+0x1c6>
 800c720:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c722:	445a      	add	r2, fp
 800c724:	9209      	str	r2, [sp, #36]	@ 0x24
 800c726:	f89a 3000 	ldrb.w	r3, [sl]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f000 809f 	beq.w	800c86e <_svfiprintf_r+0x1c6>
 800c730:	2300      	movs	r3, #0
 800c732:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c73a:	f10a 0a01 	add.w	sl, sl, #1
 800c73e:	9304      	str	r3, [sp, #16]
 800c740:	9307      	str	r3, [sp, #28]
 800c742:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c746:	931a      	str	r3, [sp, #104]	@ 0x68
 800c748:	4654      	mov	r4, sl
 800c74a:	2205      	movs	r2, #5
 800c74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c750:	484e      	ldr	r0, [pc, #312]	@ (800c88c <_svfiprintf_r+0x1e4>)
 800c752:	f7fe fc5c 	bl	800b00e <memchr>
 800c756:	9a04      	ldr	r2, [sp, #16]
 800c758:	b9d8      	cbnz	r0, 800c792 <_svfiprintf_r+0xea>
 800c75a:	06d0      	lsls	r0, r2, #27
 800c75c:	bf44      	itt	mi
 800c75e:	2320      	movmi	r3, #32
 800c760:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c764:	0711      	lsls	r1, r2, #28
 800c766:	bf44      	itt	mi
 800c768:	232b      	movmi	r3, #43	@ 0x2b
 800c76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c76e:	f89a 3000 	ldrb.w	r3, [sl]
 800c772:	2b2a      	cmp	r3, #42	@ 0x2a
 800c774:	d015      	beq.n	800c7a2 <_svfiprintf_r+0xfa>
 800c776:	4654      	mov	r4, sl
 800c778:	2000      	movs	r0, #0
 800c77a:	f04f 0c0a 	mov.w	ip, #10
 800c77e:	9a07      	ldr	r2, [sp, #28]
 800c780:	4621      	mov	r1, r4
 800c782:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c786:	3b30      	subs	r3, #48	@ 0x30
 800c788:	2b09      	cmp	r3, #9
 800c78a:	d94b      	bls.n	800c824 <_svfiprintf_r+0x17c>
 800c78c:	b1b0      	cbz	r0, 800c7bc <_svfiprintf_r+0x114>
 800c78e:	9207      	str	r2, [sp, #28]
 800c790:	e014      	b.n	800c7bc <_svfiprintf_r+0x114>
 800c792:	eba0 0308 	sub.w	r3, r0, r8
 800c796:	fa09 f303 	lsl.w	r3, r9, r3
 800c79a:	4313      	orrs	r3, r2
 800c79c:	46a2      	mov	sl, r4
 800c79e:	9304      	str	r3, [sp, #16]
 800c7a0:	e7d2      	b.n	800c748 <_svfiprintf_r+0xa0>
 800c7a2:	9b03      	ldr	r3, [sp, #12]
 800c7a4:	1d19      	adds	r1, r3, #4
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	9103      	str	r1, [sp, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	bfbb      	ittet	lt
 800c7ae:	425b      	neglt	r3, r3
 800c7b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c7b4:	9307      	strge	r3, [sp, #28]
 800c7b6:	9307      	strlt	r3, [sp, #28]
 800c7b8:	bfb8      	it	lt
 800c7ba:	9204      	strlt	r2, [sp, #16]
 800c7bc:	7823      	ldrb	r3, [r4, #0]
 800c7be:	2b2e      	cmp	r3, #46	@ 0x2e
 800c7c0:	d10a      	bne.n	800c7d8 <_svfiprintf_r+0x130>
 800c7c2:	7863      	ldrb	r3, [r4, #1]
 800c7c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7c6:	d132      	bne.n	800c82e <_svfiprintf_r+0x186>
 800c7c8:	9b03      	ldr	r3, [sp, #12]
 800c7ca:	3402      	adds	r4, #2
 800c7cc:	1d1a      	adds	r2, r3, #4
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	9203      	str	r2, [sp, #12]
 800c7d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c7d6:	9305      	str	r3, [sp, #20]
 800c7d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c890 <_svfiprintf_r+0x1e8>
 800c7dc:	2203      	movs	r2, #3
 800c7de:	4650      	mov	r0, sl
 800c7e0:	7821      	ldrb	r1, [r4, #0]
 800c7e2:	f7fe fc14 	bl	800b00e <memchr>
 800c7e6:	b138      	cbz	r0, 800c7f8 <_svfiprintf_r+0x150>
 800c7e8:	2240      	movs	r2, #64	@ 0x40
 800c7ea:	9b04      	ldr	r3, [sp, #16]
 800c7ec:	eba0 000a 	sub.w	r0, r0, sl
 800c7f0:	4082      	lsls	r2, r0
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	3401      	adds	r4, #1
 800c7f6:	9304      	str	r3, [sp, #16]
 800c7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fc:	2206      	movs	r2, #6
 800c7fe:	4825      	ldr	r0, [pc, #148]	@ (800c894 <_svfiprintf_r+0x1ec>)
 800c800:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c804:	f7fe fc03 	bl	800b00e <memchr>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d036      	beq.n	800c87a <_svfiprintf_r+0x1d2>
 800c80c:	4b22      	ldr	r3, [pc, #136]	@ (800c898 <_svfiprintf_r+0x1f0>)
 800c80e:	bb1b      	cbnz	r3, 800c858 <_svfiprintf_r+0x1b0>
 800c810:	9b03      	ldr	r3, [sp, #12]
 800c812:	3307      	adds	r3, #7
 800c814:	f023 0307 	bic.w	r3, r3, #7
 800c818:	3308      	adds	r3, #8
 800c81a:	9303      	str	r3, [sp, #12]
 800c81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c81e:	4433      	add	r3, r6
 800c820:	9309      	str	r3, [sp, #36]	@ 0x24
 800c822:	e76a      	b.n	800c6fa <_svfiprintf_r+0x52>
 800c824:	460c      	mov	r4, r1
 800c826:	2001      	movs	r0, #1
 800c828:	fb0c 3202 	mla	r2, ip, r2, r3
 800c82c:	e7a8      	b.n	800c780 <_svfiprintf_r+0xd8>
 800c82e:	2300      	movs	r3, #0
 800c830:	f04f 0c0a 	mov.w	ip, #10
 800c834:	4619      	mov	r1, r3
 800c836:	3401      	adds	r4, #1
 800c838:	9305      	str	r3, [sp, #20]
 800c83a:	4620      	mov	r0, r4
 800c83c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c840:	3a30      	subs	r2, #48	@ 0x30
 800c842:	2a09      	cmp	r2, #9
 800c844:	d903      	bls.n	800c84e <_svfiprintf_r+0x1a6>
 800c846:	2b00      	cmp	r3, #0
 800c848:	d0c6      	beq.n	800c7d8 <_svfiprintf_r+0x130>
 800c84a:	9105      	str	r1, [sp, #20]
 800c84c:	e7c4      	b.n	800c7d8 <_svfiprintf_r+0x130>
 800c84e:	4604      	mov	r4, r0
 800c850:	2301      	movs	r3, #1
 800c852:	fb0c 2101 	mla	r1, ip, r1, r2
 800c856:	e7f0      	b.n	800c83a <_svfiprintf_r+0x192>
 800c858:	ab03      	add	r3, sp, #12
 800c85a:	9300      	str	r3, [sp, #0]
 800c85c:	462a      	mov	r2, r5
 800c85e:	4638      	mov	r0, r7
 800c860:	4b0e      	ldr	r3, [pc, #56]	@ (800c89c <_svfiprintf_r+0x1f4>)
 800c862:	a904      	add	r1, sp, #16
 800c864:	f7fd fe5c 	bl	800a520 <_printf_float>
 800c868:	1c42      	adds	r2, r0, #1
 800c86a:	4606      	mov	r6, r0
 800c86c:	d1d6      	bne.n	800c81c <_svfiprintf_r+0x174>
 800c86e:	89ab      	ldrh	r3, [r5, #12]
 800c870:	065b      	lsls	r3, r3, #25
 800c872:	f53f af2d 	bmi.w	800c6d0 <_svfiprintf_r+0x28>
 800c876:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c878:	e72c      	b.n	800c6d4 <_svfiprintf_r+0x2c>
 800c87a:	ab03      	add	r3, sp, #12
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	462a      	mov	r2, r5
 800c880:	4638      	mov	r0, r7
 800c882:	4b06      	ldr	r3, [pc, #24]	@ (800c89c <_svfiprintf_r+0x1f4>)
 800c884:	a904      	add	r1, sp, #16
 800c886:	f7fe f8e9 	bl	800aa5c <_printf_i>
 800c88a:	e7ed      	b.n	800c868 <_svfiprintf_r+0x1c0>
 800c88c:	0800d704 	.word	0x0800d704
 800c890:	0800d70a 	.word	0x0800d70a
 800c894:	0800d70e 	.word	0x0800d70e
 800c898:	0800a521 	.word	0x0800a521
 800c89c:	0800c5f1 	.word	0x0800c5f1

0800c8a0 <__sflush_r>:
 800c8a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a6:	0716      	lsls	r6, r2, #28
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	d454      	bmi.n	800c958 <__sflush_r+0xb8>
 800c8ae:	684b      	ldr	r3, [r1, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dc02      	bgt.n	800c8ba <__sflush_r+0x1a>
 800c8b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dd48      	ble.n	800c94c <__sflush_r+0xac>
 800c8ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8bc:	2e00      	cmp	r6, #0
 800c8be:	d045      	beq.n	800c94c <__sflush_r+0xac>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c8c6:	682f      	ldr	r7, [r5, #0]
 800c8c8:	6a21      	ldr	r1, [r4, #32]
 800c8ca:	602b      	str	r3, [r5, #0]
 800c8cc:	d030      	beq.n	800c930 <__sflush_r+0x90>
 800c8ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	0759      	lsls	r1, r3, #29
 800c8d4:	d505      	bpl.n	800c8e2 <__sflush_r+0x42>
 800c8d6:	6863      	ldr	r3, [r4, #4]
 800c8d8:	1ad2      	subs	r2, r2, r3
 800c8da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c8dc:	b10b      	cbz	r3, 800c8e2 <__sflush_r+0x42>
 800c8de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c8e0:	1ad2      	subs	r2, r2, r3
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c8e8:	6a21      	ldr	r1, [r4, #32]
 800c8ea:	47b0      	blx	r6
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	d106      	bne.n	800c900 <__sflush_r+0x60>
 800c8f2:	6829      	ldr	r1, [r5, #0]
 800c8f4:	291d      	cmp	r1, #29
 800c8f6:	d82b      	bhi.n	800c950 <__sflush_r+0xb0>
 800c8f8:	4a28      	ldr	r2, [pc, #160]	@ (800c99c <__sflush_r+0xfc>)
 800c8fa:	40ca      	lsrs	r2, r1
 800c8fc:	07d6      	lsls	r6, r2, #31
 800c8fe:	d527      	bpl.n	800c950 <__sflush_r+0xb0>
 800c900:	2200      	movs	r2, #0
 800c902:	6062      	str	r2, [r4, #4]
 800c904:	6922      	ldr	r2, [r4, #16]
 800c906:	04d9      	lsls	r1, r3, #19
 800c908:	6022      	str	r2, [r4, #0]
 800c90a:	d504      	bpl.n	800c916 <__sflush_r+0x76>
 800c90c:	1c42      	adds	r2, r0, #1
 800c90e:	d101      	bne.n	800c914 <__sflush_r+0x74>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b903      	cbnz	r3, 800c916 <__sflush_r+0x76>
 800c914:	6560      	str	r0, [r4, #84]	@ 0x54
 800c916:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c918:	602f      	str	r7, [r5, #0]
 800c91a:	b1b9      	cbz	r1, 800c94c <__sflush_r+0xac>
 800c91c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c920:	4299      	cmp	r1, r3
 800c922:	d002      	beq.n	800c92a <__sflush_r+0x8a>
 800c924:	4628      	mov	r0, r5
 800c926:	f7ff f9eb 	bl	800bd00 <_free_r>
 800c92a:	2300      	movs	r3, #0
 800c92c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c92e:	e00d      	b.n	800c94c <__sflush_r+0xac>
 800c930:	2301      	movs	r3, #1
 800c932:	4628      	mov	r0, r5
 800c934:	47b0      	blx	r6
 800c936:	4602      	mov	r2, r0
 800c938:	1c50      	adds	r0, r2, #1
 800c93a:	d1c9      	bne.n	800c8d0 <__sflush_r+0x30>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0c6      	beq.n	800c8d0 <__sflush_r+0x30>
 800c942:	2b1d      	cmp	r3, #29
 800c944:	d001      	beq.n	800c94a <__sflush_r+0xaa>
 800c946:	2b16      	cmp	r3, #22
 800c948:	d11d      	bne.n	800c986 <__sflush_r+0xe6>
 800c94a:	602f      	str	r7, [r5, #0]
 800c94c:	2000      	movs	r0, #0
 800c94e:	e021      	b.n	800c994 <__sflush_r+0xf4>
 800c950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c954:	b21b      	sxth	r3, r3
 800c956:	e01a      	b.n	800c98e <__sflush_r+0xee>
 800c958:	690f      	ldr	r7, [r1, #16]
 800c95a:	2f00      	cmp	r7, #0
 800c95c:	d0f6      	beq.n	800c94c <__sflush_r+0xac>
 800c95e:	0793      	lsls	r3, r2, #30
 800c960:	bf18      	it	ne
 800c962:	2300      	movne	r3, #0
 800c964:	680e      	ldr	r6, [r1, #0]
 800c966:	bf08      	it	eq
 800c968:	694b      	ldreq	r3, [r1, #20]
 800c96a:	1bf6      	subs	r6, r6, r7
 800c96c:	600f      	str	r7, [r1, #0]
 800c96e:	608b      	str	r3, [r1, #8]
 800c970:	2e00      	cmp	r6, #0
 800c972:	ddeb      	ble.n	800c94c <__sflush_r+0xac>
 800c974:	4633      	mov	r3, r6
 800c976:	463a      	mov	r2, r7
 800c978:	4628      	mov	r0, r5
 800c97a:	6a21      	ldr	r1, [r4, #32]
 800c97c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c980:	47e0      	blx	ip
 800c982:	2800      	cmp	r0, #0
 800c984:	dc07      	bgt.n	800c996 <__sflush_r+0xf6>
 800c986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c98e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c992:	81a3      	strh	r3, [r4, #12]
 800c994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c996:	4407      	add	r7, r0
 800c998:	1a36      	subs	r6, r6, r0
 800c99a:	e7e9      	b.n	800c970 <__sflush_r+0xd0>
 800c99c:	20400001 	.word	0x20400001

0800c9a0 <_fflush_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	690b      	ldr	r3, [r1, #16]
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	b913      	cbnz	r3, 800c9b0 <_fflush_r+0x10>
 800c9aa:	2500      	movs	r5, #0
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	bd38      	pop	{r3, r4, r5, pc}
 800c9b0:	b118      	cbz	r0, 800c9ba <_fflush_r+0x1a>
 800c9b2:	6a03      	ldr	r3, [r0, #32]
 800c9b4:	b90b      	cbnz	r3, 800c9ba <_fflush_r+0x1a>
 800c9b6:	f7fe f9fb 	bl	800adb0 <__sinit>
 800c9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0f3      	beq.n	800c9aa <_fflush_r+0xa>
 800c9c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c9c4:	07d0      	lsls	r0, r2, #31
 800c9c6:	d404      	bmi.n	800c9d2 <_fflush_r+0x32>
 800c9c8:	0599      	lsls	r1, r3, #22
 800c9ca:	d402      	bmi.n	800c9d2 <_fflush_r+0x32>
 800c9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ce:	f7fe fb1c 	bl	800b00a <__retarget_lock_acquire_recursive>
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	f7ff ff63 	bl	800c8a0 <__sflush_r>
 800c9da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c9dc:	4605      	mov	r5, r0
 800c9de:	07da      	lsls	r2, r3, #31
 800c9e0:	d4e4      	bmi.n	800c9ac <_fflush_r+0xc>
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	059b      	lsls	r3, r3, #22
 800c9e6:	d4e1      	bmi.n	800c9ac <_fflush_r+0xc>
 800c9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c9ea:	f7fe fb0f 	bl	800b00c <__retarget_lock_release_recursive>
 800c9ee:	e7dd      	b.n	800c9ac <_fflush_r+0xc>

0800c9f0 <memmove>:
 800c9f0:	4288      	cmp	r0, r1
 800c9f2:	b510      	push	{r4, lr}
 800c9f4:	eb01 0402 	add.w	r4, r1, r2
 800c9f8:	d902      	bls.n	800ca00 <memmove+0x10>
 800c9fa:	4284      	cmp	r4, r0
 800c9fc:	4623      	mov	r3, r4
 800c9fe:	d807      	bhi.n	800ca10 <memmove+0x20>
 800ca00:	1e43      	subs	r3, r0, #1
 800ca02:	42a1      	cmp	r1, r4
 800ca04:	d008      	beq.n	800ca18 <memmove+0x28>
 800ca06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca0e:	e7f8      	b.n	800ca02 <memmove+0x12>
 800ca10:	4601      	mov	r1, r0
 800ca12:	4402      	add	r2, r0
 800ca14:	428a      	cmp	r2, r1
 800ca16:	d100      	bne.n	800ca1a <memmove+0x2a>
 800ca18:	bd10      	pop	{r4, pc}
 800ca1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca22:	e7f7      	b.n	800ca14 <memmove+0x24>

0800ca24 <_sbrk_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	2300      	movs	r3, #0
 800ca28:	4d05      	ldr	r5, [pc, #20]	@ (800ca40 <_sbrk_r+0x1c>)
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	602b      	str	r3, [r5, #0]
 800ca30:	f7f6 fb5c 	bl	80030ec <_sbrk>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	d102      	bne.n	800ca3e <_sbrk_r+0x1a>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	b103      	cbz	r3, 800ca3e <_sbrk_r+0x1a>
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	20000968 	.word	0x20000968

0800ca44 <__assert_func>:
 800ca44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca46:	4614      	mov	r4, r2
 800ca48:	461a      	mov	r2, r3
 800ca4a:	4b09      	ldr	r3, [pc, #36]	@ (800ca70 <__assert_func+0x2c>)
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68d8      	ldr	r0, [r3, #12]
 800ca52:	b14c      	cbz	r4, 800ca68 <__assert_func+0x24>
 800ca54:	4b07      	ldr	r3, [pc, #28]	@ (800ca74 <__assert_func+0x30>)
 800ca56:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca5a:	9100      	str	r1, [sp, #0]
 800ca5c:	462b      	mov	r3, r5
 800ca5e:	4906      	ldr	r1, [pc, #24]	@ (800ca78 <__assert_func+0x34>)
 800ca60:	f000 f870 	bl	800cb44 <fiprintf>
 800ca64:	f000 f880 	bl	800cb68 <abort>
 800ca68:	4b04      	ldr	r3, [pc, #16]	@ (800ca7c <__assert_func+0x38>)
 800ca6a:	461c      	mov	r4, r3
 800ca6c:	e7f3      	b.n	800ca56 <__assert_func+0x12>
 800ca6e:	bf00      	nop
 800ca70:	20000018 	.word	0x20000018
 800ca74:	0800d71f 	.word	0x0800d71f
 800ca78:	0800d72c 	.word	0x0800d72c
 800ca7c:	0800d75a 	.word	0x0800d75a

0800ca80 <_calloc_r>:
 800ca80:	b570      	push	{r4, r5, r6, lr}
 800ca82:	fba1 5402 	umull	r5, r4, r1, r2
 800ca86:	b934      	cbnz	r4, 800ca96 <_calloc_r+0x16>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	f7ff f9ab 	bl	800bde4 <_malloc_r>
 800ca8e:	4606      	mov	r6, r0
 800ca90:	b928      	cbnz	r0, 800ca9e <_calloc_r+0x1e>
 800ca92:	4630      	mov	r0, r6
 800ca94:	bd70      	pop	{r4, r5, r6, pc}
 800ca96:	220c      	movs	r2, #12
 800ca98:	2600      	movs	r6, #0
 800ca9a:	6002      	str	r2, [r0, #0]
 800ca9c:	e7f9      	b.n	800ca92 <_calloc_r+0x12>
 800ca9e:	462a      	mov	r2, r5
 800caa0:	4621      	mov	r1, r4
 800caa2:	f7fe fa34 	bl	800af0e <memset>
 800caa6:	e7f4      	b.n	800ca92 <_calloc_r+0x12>

0800caa8 <__ascii_mbtowc>:
 800caa8:	b082      	sub	sp, #8
 800caaa:	b901      	cbnz	r1, 800caae <__ascii_mbtowc+0x6>
 800caac:	a901      	add	r1, sp, #4
 800caae:	b142      	cbz	r2, 800cac2 <__ascii_mbtowc+0x1a>
 800cab0:	b14b      	cbz	r3, 800cac6 <__ascii_mbtowc+0x1e>
 800cab2:	7813      	ldrb	r3, [r2, #0]
 800cab4:	600b      	str	r3, [r1, #0]
 800cab6:	7812      	ldrb	r2, [r2, #0]
 800cab8:	1e10      	subs	r0, r2, #0
 800caba:	bf18      	it	ne
 800cabc:	2001      	movne	r0, #1
 800cabe:	b002      	add	sp, #8
 800cac0:	4770      	bx	lr
 800cac2:	4610      	mov	r0, r2
 800cac4:	e7fb      	b.n	800cabe <__ascii_mbtowc+0x16>
 800cac6:	f06f 0001 	mvn.w	r0, #1
 800caca:	e7f8      	b.n	800cabe <__ascii_mbtowc+0x16>

0800cacc <_realloc_r>:
 800cacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad0:	4607      	mov	r7, r0
 800cad2:	4614      	mov	r4, r2
 800cad4:	460d      	mov	r5, r1
 800cad6:	b921      	cbnz	r1, 800cae2 <_realloc_r+0x16>
 800cad8:	4611      	mov	r1, r2
 800cada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cade:	f7ff b981 	b.w	800bde4 <_malloc_r>
 800cae2:	b92a      	cbnz	r2, 800caf0 <_realloc_r+0x24>
 800cae4:	f7ff f90c 	bl	800bd00 <_free_r>
 800cae8:	4625      	mov	r5, r4
 800caea:	4628      	mov	r0, r5
 800caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf0:	f000 f841 	bl	800cb76 <_malloc_usable_size_r>
 800caf4:	4284      	cmp	r4, r0
 800caf6:	4606      	mov	r6, r0
 800caf8:	d802      	bhi.n	800cb00 <_realloc_r+0x34>
 800cafa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cafe:	d8f4      	bhi.n	800caea <_realloc_r+0x1e>
 800cb00:	4621      	mov	r1, r4
 800cb02:	4638      	mov	r0, r7
 800cb04:	f7ff f96e 	bl	800bde4 <_malloc_r>
 800cb08:	4680      	mov	r8, r0
 800cb0a:	b908      	cbnz	r0, 800cb10 <_realloc_r+0x44>
 800cb0c:	4645      	mov	r5, r8
 800cb0e:	e7ec      	b.n	800caea <_realloc_r+0x1e>
 800cb10:	42b4      	cmp	r4, r6
 800cb12:	4622      	mov	r2, r4
 800cb14:	4629      	mov	r1, r5
 800cb16:	bf28      	it	cs
 800cb18:	4632      	movcs	r2, r6
 800cb1a:	f7fe fa86 	bl	800b02a <memcpy>
 800cb1e:	4629      	mov	r1, r5
 800cb20:	4638      	mov	r0, r7
 800cb22:	f7ff f8ed 	bl	800bd00 <_free_r>
 800cb26:	e7f1      	b.n	800cb0c <_realloc_r+0x40>

0800cb28 <__ascii_wctomb>:
 800cb28:	4603      	mov	r3, r0
 800cb2a:	4608      	mov	r0, r1
 800cb2c:	b141      	cbz	r1, 800cb40 <__ascii_wctomb+0x18>
 800cb2e:	2aff      	cmp	r2, #255	@ 0xff
 800cb30:	d904      	bls.n	800cb3c <__ascii_wctomb+0x14>
 800cb32:	228a      	movs	r2, #138	@ 0x8a
 800cb34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	4770      	bx	lr
 800cb3c:	2001      	movs	r0, #1
 800cb3e:	700a      	strb	r2, [r1, #0]
 800cb40:	4770      	bx	lr
	...

0800cb44 <fiprintf>:
 800cb44:	b40e      	push	{r1, r2, r3}
 800cb46:	b503      	push	{r0, r1, lr}
 800cb48:	4601      	mov	r1, r0
 800cb4a:	ab03      	add	r3, sp, #12
 800cb4c:	4805      	ldr	r0, [pc, #20]	@ (800cb64 <fiprintf+0x20>)
 800cb4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb52:	6800      	ldr	r0, [r0, #0]
 800cb54:	9301      	str	r3, [sp, #4]
 800cb56:	f000 f83d 	bl	800cbd4 <_vfiprintf_r>
 800cb5a:	b002      	add	sp, #8
 800cb5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb60:	b003      	add	sp, #12
 800cb62:	4770      	bx	lr
 800cb64:	20000018 	.word	0x20000018

0800cb68 <abort>:
 800cb68:	2006      	movs	r0, #6
 800cb6a:	b508      	push	{r3, lr}
 800cb6c:	f000 fa06 	bl	800cf7c <raise>
 800cb70:	2001      	movs	r0, #1
 800cb72:	f7f6 fa46 	bl	8003002 <_exit>

0800cb76 <_malloc_usable_size_r>:
 800cb76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb7a:	1f18      	subs	r0, r3, #4
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	bfbc      	itt	lt
 800cb80:	580b      	ldrlt	r3, [r1, r0]
 800cb82:	18c0      	addlt	r0, r0, r3
 800cb84:	4770      	bx	lr

0800cb86 <__sfputc_r>:
 800cb86:	6893      	ldr	r3, [r2, #8]
 800cb88:	b410      	push	{r4}
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	6093      	str	r3, [r2, #8]
 800cb90:	da07      	bge.n	800cba2 <__sfputc_r+0x1c>
 800cb92:	6994      	ldr	r4, [r2, #24]
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	db01      	blt.n	800cb9c <__sfputc_r+0x16>
 800cb98:	290a      	cmp	r1, #10
 800cb9a:	d102      	bne.n	800cba2 <__sfputc_r+0x1c>
 800cb9c:	bc10      	pop	{r4}
 800cb9e:	f000 b931 	b.w	800ce04 <__swbuf_r>
 800cba2:	6813      	ldr	r3, [r2, #0]
 800cba4:	1c58      	adds	r0, r3, #1
 800cba6:	6010      	str	r0, [r2, #0]
 800cba8:	7019      	strb	r1, [r3, #0]
 800cbaa:	4608      	mov	r0, r1
 800cbac:	bc10      	pop	{r4}
 800cbae:	4770      	bx	lr

0800cbb0 <__sfputs_r>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	4614      	mov	r4, r2
 800cbb8:	18d5      	adds	r5, r2, r3
 800cbba:	42ac      	cmp	r4, r5
 800cbbc:	d101      	bne.n	800cbc2 <__sfputs_r+0x12>
 800cbbe:	2000      	movs	r0, #0
 800cbc0:	e007      	b.n	800cbd2 <__sfputs_r+0x22>
 800cbc2:	463a      	mov	r2, r7
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbca:	f7ff ffdc 	bl	800cb86 <__sfputc_r>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d1f3      	bne.n	800cbba <__sfputs_r+0xa>
 800cbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbd4 <_vfiprintf_r>:
 800cbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd8:	460d      	mov	r5, r1
 800cbda:	4614      	mov	r4, r2
 800cbdc:	4698      	mov	r8, r3
 800cbde:	4606      	mov	r6, r0
 800cbe0:	b09d      	sub	sp, #116	@ 0x74
 800cbe2:	b118      	cbz	r0, 800cbec <_vfiprintf_r+0x18>
 800cbe4:	6a03      	ldr	r3, [r0, #32]
 800cbe6:	b90b      	cbnz	r3, 800cbec <_vfiprintf_r+0x18>
 800cbe8:	f7fe f8e2 	bl	800adb0 <__sinit>
 800cbec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cbee:	07d9      	lsls	r1, r3, #31
 800cbf0:	d405      	bmi.n	800cbfe <_vfiprintf_r+0x2a>
 800cbf2:	89ab      	ldrh	r3, [r5, #12]
 800cbf4:	059a      	lsls	r2, r3, #22
 800cbf6:	d402      	bmi.n	800cbfe <_vfiprintf_r+0x2a>
 800cbf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cbfa:	f7fe fa06 	bl	800b00a <__retarget_lock_acquire_recursive>
 800cbfe:	89ab      	ldrh	r3, [r5, #12]
 800cc00:	071b      	lsls	r3, r3, #28
 800cc02:	d501      	bpl.n	800cc08 <_vfiprintf_r+0x34>
 800cc04:	692b      	ldr	r3, [r5, #16]
 800cc06:	b99b      	cbnz	r3, 800cc30 <_vfiprintf_r+0x5c>
 800cc08:	4629      	mov	r1, r5
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f000 f938 	bl	800ce80 <__swsetup_r>
 800cc10:	b170      	cbz	r0, 800cc30 <_vfiprintf_r+0x5c>
 800cc12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc14:	07dc      	lsls	r4, r3, #31
 800cc16:	d504      	bpl.n	800cc22 <_vfiprintf_r+0x4e>
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc1c:	b01d      	add	sp, #116	@ 0x74
 800cc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc22:	89ab      	ldrh	r3, [r5, #12]
 800cc24:	0598      	lsls	r0, r3, #22
 800cc26:	d4f7      	bmi.n	800cc18 <_vfiprintf_r+0x44>
 800cc28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc2a:	f7fe f9ef 	bl	800b00c <__retarget_lock_release_recursive>
 800cc2e:	e7f3      	b.n	800cc18 <_vfiprintf_r+0x44>
 800cc30:	2300      	movs	r3, #0
 800cc32:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc34:	2320      	movs	r3, #32
 800cc36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc3a:	2330      	movs	r3, #48	@ 0x30
 800cc3c:	f04f 0901 	mov.w	r9, #1
 800cc40:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cdf0 <_vfiprintf_r+0x21c>
 800cc48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc4c:	4623      	mov	r3, r4
 800cc4e:	469a      	mov	sl, r3
 800cc50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc54:	b10a      	cbz	r2, 800cc5a <_vfiprintf_r+0x86>
 800cc56:	2a25      	cmp	r2, #37	@ 0x25
 800cc58:	d1f9      	bne.n	800cc4e <_vfiprintf_r+0x7a>
 800cc5a:	ebba 0b04 	subs.w	fp, sl, r4
 800cc5e:	d00b      	beq.n	800cc78 <_vfiprintf_r+0xa4>
 800cc60:	465b      	mov	r3, fp
 800cc62:	4622      	mov	r2, r4
 800cc64:	4629      	mov	r1, r5
 800cc66:	4630      	mov	r0, r6
 800cc68:	f7ff ffa2 	bl	800cbb0 <__sfputs_r>
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	f000 80a7 	beq.w	800cdc0 <_vfiprintf_r+0x1ec>
 800cc72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc74:	445a      	add	r2, fp
 800cc76:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc78:	f89a 3000 	ldrb.w	r3, [sl]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f000 809f 	beq.w	800cdc0 <_vfiprintf_r+0x1ec>
 800cc82:	2300      	movs	r3, #0
 800cc84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cc88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc8c:	f10a 0a01 	add.w	sl, sl, #1
 800cc90:	9304      	str	r3, [sp, #16]
 800cc92:	9307      	str	r3, [sp, #28]
 800cc94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cc98:	931a      	str	r3, [sp, #104]	@ 0x68
 800cc9a:	4654      	mov	r4, sl
 800cc9c:	2205      	movs	r2, #5
 800cc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca2:	4853      	ldr	r0, [pc, #332]	@ (800cdf0 <_vfiprintf_r+0x21c>)
 800cca4:	f7fe f9b3 	bl	800b00e <memchr>
 800cca8:	9a04      	ldr	r2, [sp, #16]
 800ccaa:	b9d8      	cbnz	r0, 800cce4 <_vfiprintf_r+0x110>
 800ccac:	06d1      	lsls	r1, r2, #27
 800ccae:	bf44      	itt	mi
 800ccb0:	2320      	movmi	r3, #32
 800ccb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccb6:	0713      	lsls	r3, r2, #28
 800ccb8:	bf44      	itt	mi
 800ccba:	232b      	movmi	r3, #43	@ 0x2b
 800ccbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccc0:	f89a 3000 	ldrb.w	r3, [sl]
 800ccc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccc6:	d015      	beq.n	800ccf4 <_vfiprintf_r+0x120>
 800ccc8:	4654      	mov	r4, sl
 800ccca:	2000      	movs	r0, #0
 800cccc:	f04f 0c0a 	mov.w	ip, #10
 800ccd0:	9a07      	ldr	r2, [sp, #28]
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccd8:	3b30      	subs	r3, #48	@ 0x30
 800ccda:	2b09      	cmp	r3, #9
 800ccdc:	d94b      	bls.n	800cd76 <_vfiprintf_r+0x1a2>
 800ccde:	b1b0      	cbz	r0, 800cd0e <_vfiprintf_r+0x13a>
 800cce0:	9207      	str	r2, [sp, #28]
 800cce2:	e014      	b.n	800cd0e <_vfiprintf_r+0x13a>
 800cce4:	eba0 0308 	sub.w	r3, r0, r8
 800cce8:	fa09 f303 	lsl.w	r3, r9, r3
 800ccec:	4313      	orrs	r3, r2
 800ccee:	46a2      	mov	sl, r4
 800ccf0:	9304      	str	r3, [sp, #16]
 800ccf2:	e7d2      	b.n	800cc9a <_vfiprintf_r+0xc6>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	1d19      	adds	r1, r3, #4
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	9103      	str	r1, [sp, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	bfbb      	ittet	lt
 800cd00:	425b      	neglt	r3, r3
 800cd02:	f042 0202 	orrlt.w	r2, r2, #2
 800cd06:	9307      	strge	r3, [sp, #28]
 800cd08:	9307      	strlt	r3, [sp, #28]
 800cd0a:	bfb8      	it	lt
 800cd0c:	9204      	strlt	r2, [sp, #16]
 800cd0e:	7823      	ldrb	r3, [r4, #0]
 800cd10:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd12:	d10a      	bne.n	800cd2a <_vfiprintf_r+0x156>
 800cd14:	7863      	ldrb	r3, [r4, #1]
 800cd16:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd18:	d132      	bne.n	800cd80 <_vfiprintf_r+0x1ac>
 800cd1a:	9b03      	ldr	r3, [sp, #12]
 800cd1c:	3402      	adds	r4, #2
 800cd1e:	1d1a      	adds	r2, r3, #4
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	9203      	str	r2, [sp, #12]
 800cd24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd28:	9305      	str	r3, [sp, #20]
 800cd2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cdf4 <_vfiprintf_r+0x220>
 800cd2e:	2203      	movs	r2, #3
 800cd30:	4650      	mov	r0, sl
 800cd32:	7821      	ldrb	r1, [r4, #0]
 800cd34:	f7fe f96b 	bl	800b00e <memchr>
 800cd38:	b138      	cbz	r0, 800cd4a <_vfiprintf_r+0x176>
 800cd3a:	2240      	movs	r2, #64	@ 0x40
 800cd3c:	9b04      	ldr	r3, [sp, #16]
 800cd3e:	eba0 000a 	sub.w	r0, r0, sl
 800cd42:	4082      	lsls	r2, r0
 800cd44:	4313      	orrs	r3, r2
 800cd46:	3401      	adds	r4, #1
 800cd48:	9304      	str	r3, [sp, #16]
 800cd4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd4e:	2206      	movs	r2, #6
 800cd50:	4829      	ldr	r0, [pc, #164]	@ (800cdf8 <_vfiprintf_r+0x224>)
 800cd52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd56:	f7fe f95a 	bl	800b00e <memchr>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	d03f      	beq.n	800cdde <_vfiprintf_r+0x20a>
 800cd5e:	4b27      	ldr	r3, [pc, #156]	@ (800cdfc <_vfiprintf_r+0x228>)
 800cd60:	bb1b      	cbnz	r3, 800cdaa <_vfiprintf_r+0x1d6>
 800cd62:	9b03      	ldr	r3, [sp, #12]
 800cd64:	3307      	adds	r3, #7
 800cd66:	f023 0307 	bic.w	r3, r3, #7
 800cd6a:	3308      	adds	r3, #8
 800cd6c:	9303      	str	r3, [sp, #12]
 800cd6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd70:	443b      	add	r3, r7
 800cd72:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd74:	e76a      	b.n	800cc4c <_vfiprintf_r+0x78>
 800cd76:	460c      	mov	r4, r1
 800cd78:	2001      	movs	r0, #1
 800cd7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd7e:	e7a8      	b.n	800ccd2 <_vfiprintf_r+0xfe>
 800cd80:	2300      	movs	r3, #0
 800cd82:	f04f 0c0a 	mov.w	ip, #10
 800cd86:	4619      	mov	r1, r3
 800cd88:	3401      	adds	r4, #1
 800cd8a:	9305      	str	r3, [sp, #20]
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd92:	3a30      	subs	r2, #48	@ 0x30
 800cd94:	2a09      	cmp	r2, #9
 800cd96:	d903      	bls.n	800cda0 <_vfiprintf_r+0x1cc>
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d0c6      	beq.n	800cd2a <_vfiprintf_r+0x156>
 800cd9c:	9105      	str	r1, [sp, #20]
 800cd9e:	e7c4      	b.n	800cd2a <_vfiprintf_r+0x156>
 800cda0:	4604      	mov	r4, r0
 800cda2:	2301      	movs	r3, #1
 800cda4:	fb0c 2101 	mla	r1, ip, r1, r2
 800cda8:	e7f0      	b.n	800cd8c <_vfiprintf_r+0x1b8>
 800cdaa:	ab03      	add	r3, sp, #12
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	462a      	mov	r2, r5
 800cdb0:	4630      	mov	r0, r6
 800cdb2:	4b13      	ldr	r3, [pc, #76]	@ (800ce00 <_vfiprintf_r+0x22c>)
 800cdb4:	a904      	add	r1, sp, #16
 800cdb6:	f7fd fbb3 	bl	800a520 <_printf_float>
 800cdba:	4607      	mov	r7, r0
 800cdbc:	1c78      	adds	r0, r7, #1
 800cdbe:	d1d6      	bne.n	800cd6e <_vfiprintf_r+0x19a>
 800cdc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdc2:	07d9      	lsls	r1, r3, #31
 800cdc4:	d405      	bmi.n	800cdd2 <_vfiprintf_r+0x1fe>
 800cdc6:	89ab      	ldrh	r3, [r5, #12]
 800cdc8:	059a      	lsls	r2, r3, #22
 800cdca:	d402      	bmi.n	800cdd2 <_vfiprintf_r+0x1fe>
 800cdcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdce:	f7fe f91d 	bl	800b00c <__retarget_lock_release_recursive>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	065b      	lsls	r3, r3, #25
 800cdd6:	f53f af1f 	bmi.w	800cc18 <_vfiprintf_r+0x44>
 800cdda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cddc:	e71e      	b.n	800cc1c <_vfiprintf_r+0x48>
 800cdde:	ab03      	add	r3, sp, #12
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	462a      	mov	r2, r5
 800cde4:	4630      	mov	r0, r6
 800cde6:	4b06      	ldr	r3, [pc, #24]	@ (800ce00 <_vfiprintf_r+0x22c>)
 800cde8:	a904      	add	r1, sp, #16
 800cdea:	f7fd fe37 	bl	800aa5c <_printf_i>
 800cdee:	e7e4      	b.n	800cdba <_vfiprintf_r+0x1e6>
 800cdf0:	0800d704 	.word	0x0800d704
 800cdf4:	0800d70a 	.word	0x0800d70a
 800cdf8:	0800d70e 	.word	0x0800d70e
 800cdfc:	0800a521 	.word	0x0800a521
 800ce00:	0800cbb1 	.word	0x0800cbb1

0800ce04 <__swbuf_r>:
 800ce04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce06:	460e      	mov	r6, r1
 800ce08:	4614      	mov	r4, r2
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	b118      	cbz	r0, 800ce16 <__swbuf_r+0x12>
 800ce0e:	6a03      	ldr	r3, [r0, #32]
 800ce10:	b90b      	cbnz	r3, 800ce16 <__swbuf_r+0x12>
 800ce12:	f7fd ffcd 	bl	800adb0 <__sinit>
 800ce16:	69a3      	ldr	r3, [r4, #24]
 800ce18:	60a3      	str	r3, [r4, #8]
 800ce1a:	89a3      	ldrh	r3, [r4, #12]
 800ce1c:	071a      	lsls	r2, r3, #28
 800ce1e:	d501      	bpl.n	800ce24 <__swbuf_r+0x20>
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	b943      	cbnz	r3, 800ce36 <__swbuf_r+0x32>
 800ce24:	4621      	mov	r1, r4
 800ce26:	4628      	mov	r0, r5
 800ce28:	f000 f82a 	bl	800ce80 <__swsetup_r>
 800ce2c:	b118      	cbz	r0, 800ce36 <__swbuf_r+0x32>
 800ce2e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ce32:	4638      	mov	r0, r7
 800ce34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce36:	6823      	ldr	r3, [r4, #0]
 800ce38:	6922      	ldr	r2, [r4, #16]
 800ce3a:	b2f6      	uxtb	r6, r6
 800ce3c:	1a98      	subs	r0, r3, r2
 800ce3e:	6963      	ldr	r3, [r4, #20]
 800ce40:	4637      	mov	r7, r6
 800ce42:	4283      	cmp	r3, r0
 800ce44:	dc05      	bgt.n	800ce52 <__swbuf_r+0x4e>
 800ce46:	4621      	mov	r1, r4
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f7ff fda9 	bl	800c9a0 <_fflush_r>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d1ed      	bne.n	800ce2e <__swbuf_r+0x2a>
 800ce52:	68a3      	ldr	r3, [r4, #8]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	60a3      	str	r3, [r4, #8]
 800ce58:	6823      	ldr	r3, [r4, #0]
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	6022      	str	r2, [r4, #0]
 800ce5e:	701e      	strb	r6, [r3, #0]
 800ce60:	6962      	ldr	r2, [r4, #20]
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d004      	beq.n	800ce72 <__swbuf_r+0x6e>
 800ce68:	89a3      	ldrh	r3, [r4, #12]
 800ce6a:	07db      	lsls	r3, r3, #31
 800ce6c:	d5e1      	bpl.n	800ce32 <__swbuf_r+0x2e>
 800ce6e:	2e0a      	cmp	r6, #10
 800ce70:	d1df      	bne.n	800ce32 <__swbuf_r+0x2e>
 800ce72:	4621      	mov	r1, r4
 800ce74:	4628      	mov	r0, r5
 800ce76:	f7ff fd93 	bl	800c9a0 <_fflush_r>
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d0d9      	beq.n	800ce32 <__swbuf_r+0x2e>
 800ce7e:	e7d6      	b.n	800ce2e <__swbuf_r+0x2a>

0800ce80 <__swsetup_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4b29      	ldr	r3, [pc, #164]	@ (800cf28 <__swsetup_r+0xa8>)
 800ce84:	4605      	mov	r5, r0
 800ce86:	6818      	ldr	r0, [r3, #0]
 800ce88:	460c      	mov	r4, r1
 800ce8a:	b118      	cbz	r0, 800ce94 <__swsetup_r+0x14>
 800ce8c:	6a03      	ldr	r3, [r0, #32]
 800ce8e:	b90b      	cbnz	r3, 800ce94 <__swsetup_r+0x14>
 800ce90:	f7fd ff8e 	bl	800adb0 <__sinit>
 800ce94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce98:	0719      	lsls	r1, r3, #28
 800ce9a:	d422      	bmi.n	800cee2 <__swsetup_r+0x62>
 800ce9c:	06da      	lsls	r2, r3, #27
 800ce9e:	d407      	bmi.n	800ceb0 <__swsetup_r+0x30>
 800cea0:	2209      	movs	r2, #9
 800cea2:	602a      	str	r2, [r5, #0]
 800cea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ceac:	81a3      	strh	r3, [r4, #12]
 800ceae:	e033      	b.n	800cf18 <__swsetup_r+0x98>
 800ceb0:	0758      	lsls	r0, r3, #29
 800ceb2:	d512      	bpl.n	800ceda <__swsetup_r+0x5a>
 800ceb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceb6:	b141      	cbz	r1, 800ceca <__swsetup_r+0x4a>
 800ceb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cebc:	4299      	cmp	r1, r3
 800cebe:	d002      	beq.n	800cec6 <__swsetup_r+0x46>
 800cec0:	4628      	mov	r0, r5
 800cec2:	f7fe ff1d 	bl	800bd00 <_free_r>
 800cec6:	2300      	movs	r3, #0
 800cec8:	6363      	str	r3, [r4, #52]	@ 0x34
 800ceca:	89a3      	ldrh	r3, [r4, #12]
 800cecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ced0:	81a3      	strh	r3, [r4, #12]
 800ced2:	2300      	movs	r3, #0
 800ced4:	6063      	str	r3, [r4, #4]
 800ced6:	6923      	ldr	r3, [r4, #16]
 800ced8:	6023      	str	r3, [r4, #0]
 800ceda:	89a3      	ldrh	r3, [r4, #12]
 800cedc:	f043 0308 	orr.w	r3, r3, #8
 800cee0:	81a3      	strh	r3, [r4, #12]
 800cee2:	6923      	ldr	r3, [r4, #16]
 800cee4:	b94b      	cbnz	r3, 800cefa <__swsetup_r+0x7a>
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ceec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cef0:	d003      	beq.n	800cefa <__swsetup_r+0x7a>
 800cef2:	4621      	mov	r1, r4
 800cef4:	4628      	mov	r0, r5
 800cef6:	f000 f882 	bl	800cffe <__smakebuf_r>
 800cefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cefe:	f013 0201 	ands.w	r2, r3, #1
 800cf02:	d00a      	beq.n	800cf1a <__swsetup_r+0x9a>
 800cf04:	2200      	movs	r2, #0
 800cf06:	60a2      	str	r2, [r4, #8]
 800cf08:	6962      	ldr	r2, [r4, #20]
 800cf0a:	4252      	negs	r2, r2
 800cf0c:	61a2      	str	r2, [r4, #24]
 800cf0e:	6922      	ldr	r2, [r4, #16]
 800cf10:	b942      	cbnz	r2, 800cf24 <__swsetup_r+0xa4>
 800cf12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cf16:	d1c5      	bne.n	800cea4 <__swsetup_r+0x24>
 800cf18:	bd38      	pop	{r3, r4, r5, pc}
 800cf1a:	0799      	lsls	r1, r3, #30
 800cf1c:	bf58      	it	pl
 800cf1e:	6962      	ldrpl	r2, [r4, #20]
 800cf20:	60a2      	str	r2, [r4, #8]
 800cf22:	e7f4      	b.n	800cf0e <__swsetup_r+0x8e>
 800cf24:	2000      	movs	r0, #0
 800cf26:	e7f7      	b.n	800cf18 <__swsetup_r+0x98>
 800cf28:	20000018 	.word	0x20000018

0800cf2c <_raise_r>:
 800cf2c:	291f      	cmp	r1, #31
 800cf2e:	b538      	push	{r3, r4, r5, lr}
 800cf30:	4605      	mov	r5, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	d904      	bls.n	800cf40 <_raise_r+0x14>
 800cf36:	2316      	movs	r3, #22
 800cf38:	6003      	str	r3, [r0, #0]
 800cf3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf3e:	bd38      	pop	{r3, r4, r5, pc}
 800cf40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf42:	b112      	cbz	r2, 800cf4a <_raise_r+0x1e>
 800cf44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf48:	b94b      	cbnz	r3, 800cf5e <_raise_r+0x32>
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	f000 f830 	bl	800cfb0 <_getpid_r>
 800cf50:	4622      	mov	r2, r4
 800cf52:	4601      	mov	r1, r0
 800cf54:	4628      	mov	r0, r5
 800cf56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf5a:	f000 b817 	b.w	800cf8c <_kill_r>
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d00a      	beq.n	800cf78 <_raise_r+0x4c>
 800cf62:	1c59      	adds	r1, r3, #1
 800cf64:	d103      	bne.n	800cf6e <_raise_r+0x42>
 800cf66:	2316      	movs	r3, #22
 800cf68:	6003      	str	r3, [r0, #0]
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	e7e7      	b.n	800cf3e <_raise_r+0x12>
 800cf6e:	2100      	movs	r1, #0
 800cf70:	4620      	mov	r0, r4
 800cf72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf76:	4798      	blx	r3
 800cf78:	2000      	movs	r0, #0
 800cf7a:	e7e0      	b.n	800cf3e <_raise_r+0x12>

0800cf7c <raise>:
 800cf7c:	4b02      	ldr	r3, [pc, #8]	@ (800cf88 <raise+0xc>)
 800cf7e:	4601      	mov	r1, r0
 800cf80:	6818      	ldr	r0, [r3, #0]
 800cf82:	f7ff bfd3 	b.w	800cf2c <_raise_r>
 800cf86:	bf00      	nop
 800cf88:	20000018 	.word	0x20000018

0800cf8c <_kill_r>:
 800cf8c:	b538      	push	{r3, r4, r5, lr}
 800cf8e:	2300      	movs	r3, #0
 800cf90:	4d06      	ldr	r5, [pc, #24]	@ (800cfac <_kill_r+0x20>)
 800cf92:	4604      	mov	r4, r0
 800cf94:	4608      	mov	r0, r1
 800cf96:	4611      	mov	r1, r2
 800cf98:	602b      	str	r3, [r5, #0]
 800cf9a:	f7f6 f822 	bl	8002fe2 <_kill>
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	d102      	bne.n	800cfa8 <_kill_r+0x1c>
 800cfa2:	682b      	ldr	r3, [r5, #0]
 800cfa4:	b103      	cbz	r3, 800cfa8 <_kill_r+0x1c>
 800cfa6:	6023      	str	r3, [r4, #0]
 800cfa8:	bd38      	pop	{r3, r4, r5, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000968 	.word	0x20000968

0800cfb0 <_getpid_r>:
 800cfb0:	f7f6 b810 	b.w	8002fd4 <_getpid>

0800cfb4 <__swhatbuf_r>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfbc:	4615      	mov	r5, r2
 800cfbe:	2900      	cmp	r1, #0
 800cfc0:	461e      	mov	r6, r3
 800cfc2:	b096      	sub	sp, #88	@ 0x58
 800cfc4:	da0c      	bge.n	800cfe0 <__swhatbuf_r+0x2c>
 800cfc6:	89a3      	ldrh	r3, [r4, #12]
 800cfc8:	2100      	movs	r1, #0
 800cfca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cfce:	bf14      	ite	ne
 800cfd0:	2340      	movne	r3, #64	@ 0x40
 800cfd2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	6031      	str	r1, [r6, #0]
 800cfda:	602b      	str	r3, [r5, #0]
 800cfdc:	b016      	add	sp, #88	@ 0x58
 800cfde:	bd70      	pop	{r4, r5, r6, pc}
 800cfe0:	466a      	mov	r2, sp
 800cfe2:	f000 f849 	bl	800d078 <_fstat_r>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	dbed      	blt.n	800cfc6 <__swhatbuf_r+0x12>
 800cfea:	9901      	ldr	r1, [sp, #4]
 800cfec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cff0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cff4:	4259      	negs	r1, r3
 800cff6:	4159      	adcs	r1, r3
 800cff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cffc:	e7eb      	b.n	800cfd6 <__swhatbuf_r+0x22>

0800cffe <__smakebuf_r>:
 800cffe:	898b      	ldrh	r3, [r1, #12]
 800d000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d002:	079d      	lsls	r5, r3, #30
 800d004:	4606      	mov	r6, r0
 800d006:	460c      	mov	r4, r1
 800d008:	d507      	bpl.n	800d01a <__smakebuf_r+0x1c>
 800d00a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d00e:	6023      	str	r3, [r4, #0]
 800d010:	6123      	str	r3, [r4, #16]
 800d012:	2301      	movs	r3, #1
 800d014:	6163      	str	r3, [r4, #20]
 800d016:	b003      	add	sp, #12
 800d018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d01a:	466a      	mov	r2, sp
 800d01c:	ab01      	add	r3, sp, #4
 800d01e:	f7ff ffc9 	bl	800cfb4 <__swhatbuf_r>
 800d022:	9f00      	ldr	r7, [sp, #0]
 800d024:	4605      	mov	r5, r0
 800d026:	4639      	mov	r1, r7
 800d028:	4630      	mov	r0, r6
 800d02a:	f7fe fedb 	bl	800bde4 <_malloc_r>
 800d02e:	b948      	cbnz	r0, 800d044 <__smakebuf_r+0x46>
 800d030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d034:	059a      	lsls	r2, r3, #22
 800d036:	d4ee      	bmi.n	800d016 <__smakebuf_r+0x18>
 800d038:	f023 0303 	bic.w	r3, r3, #3
 800d03c:	f043 0302 	orr.w	r3, r3, #2
 800d040:	81a3      	strh	r3, [r4, #12]
 800d042:	e7e2      	b.n	800d00a <__smakebuf_r+0xc>
 800d044:	89a3      	ldrh	r3, [r4, #12]
 800d046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	9b01      	ldr	r3, [sp, #4]
 800d052:	6020      	str	r0, [r4, #0]
 800d054:	b15b      	cbz	r3, 800d06e <__smakebuf_r+0x70>
 800d056:	4630      	mov	r0, r6
 800d058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d05c:	f000 f81e 	bl	800d09c <_isatty_r>
 800d060:	b128      	cbz	r0, 800d06e <__smakebuf_r+0x70>
 800d062:	89a3      	ldrh	r3, [r4, #12]
 800d064:	f023 0303 	bic.w	r3, r3, #3
 800d068:	f043 0301 	orr.w	r3, r3, #1
 800d06c:	81a3      	strh	r3, [r4, #12]
 800d06e:	89a3      	ldrh	r3, [r4, #12]
 800d070:	431d      	orrs	r5, r3
 800d072:	81a5      	strh	r5, [r4, #12]
 800d074:	e7cf      	b.n	800d016 <__smakebuf_r+0x18>
	...

0800d078 <_fstat_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	2300      	movs	r3, #0
 800d07c:	4d06      	ldr	r5, [pc, #24]	@ (800d098 <_fstat_r+0x20>)
 800d07e:	4604      	mov	r4, r0
 800d080:	4608      	mov	r0, r1
 800d082:	4611      	mov	r1, r2
 800d084:	602b      	str	r3, [r5, #0]
 800d086:	f7f6 f80b 	bl	80030a0 <_fstat>
 800d08a:	1c43      	adds	r3, r0, #1
 800d08c:	d102      	bne.n	800d094 <_fstat_r+0x1c>
 800d08e:	682b      	ldr	r3, [r5, #0]
 800d090:	b103      	cbz	r3, 800d094 <_fstat_r+0x1c>
 800d092:	6023      	str	r3, [r4, #0]
 800d094:	bd38      	pop	{r3, r4, r5, pc}
 800d096:	bf00      	nop
 800d098:	20000968 	.word	0x20000968

0800d09c <_isatty_r>:
 800d09c:	b538      	push	{r3, r4, r5, lr}
 800d09e:	2300      	movs	r3, #0
 800d0a0:	4d05      	ldr	r5, [pc, #20]	@ (800d0b8 <_isatty_r+0x1c>)
 800d0a2:	4604      	mov	r4, r0
 800d0a4:	4608      	mov	r0, r1
 800d0a6:	602b      	str	r3, [r5, #0]
 800d0a8:	f7f6 f809 	bl	80030be <_isatty>
 800d0ac:	1c43      	adds	r3, r0, #1
 800d0ae:	d102      	bne.n	800d0b6 <_isatty_r+0x1a>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	b103      	cbz	r3, 800d0b6 <_isatty_r+0x1a>
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	20000968 	.word	0x20000968

0800d0bc <atan2>:
 800d0bc:	f000 b800 	b.w	800d0c0 <__ieee754_atan2>

0800d0c0 <__ieee754_atan2>:
 800d0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c4:	4617      	mov	r7, r2
 800d0c6:	4690      	mov	r8, r2
 800d0c8:	4699      	mov	r9, r3
 800d0ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d0ce:	427b      	negs	r3, r7
 800d0d0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800d258 <__ieee754_atan2+0x198>
 800d0d4:	433b      	orrs	r3, r7
 800d0d6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d0da:	4553      	cmp	r3, sl
 800d0dc:	4604      	mov	r4, r0
 800d0de:	460d      	mov	r5, r1
 800d0e0:	d809      	bhi.n	800d0f6 <__ieee754_atan2+0x36>
 800d0e2:	4246      	negs	r6, r0
 800d0e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d0e8:	4306      	orrs	r6, r0
 800d0ea:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800d0ee:	4556      	cmp	r6, sl
 800d0f0:	468e      	mov	lr, r1
 800d0f2:	4683      	mov	fp, r0
 800d0f4:	d908      	bls.n	800d108 <__ieee754_atan2+0x48>
 800d0f6:	4642      	mov	r2, r8
 800d0f8:	464b      	mov	r3, r9
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	f7f3 f835 	bl	800016c <__adddf3>
 800d102:	4604      	mov	r4, r0
 800d104:	460d      	mov	r5, r1
 800d106:	e016      	b.n	800d136 <__ieee754_atan2+0x76>
 800d108:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800d10c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800d110:	433e      	orrs	r6, r7
 800d112:	d103      	bne.n	800d11c <__ieee754_atan2+0x5c>
 800d114:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d118:	f000 b8a6 	b.w	800d268 <atan>
 800d11c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800d120:	f006 0602 	and.w	r6, r6, #2
 800d124:	ea53 0b0b 	orrs.w	fp, r3, fp
 800d128:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800d12c:	d107      	bne.n	800d13e <__ieee754_atan2+0x7e>
 800d12e:	2e02      	cmp	r6, #2
 800d130:	d064      	beq.n	800d1fc <__ieee754_atan2+0x13c>
 800d132:	2e03      	cmp	r6, #3
 800d134:	d066      	beq.n	800d204 <__ieee754_atan2+0x144>
 800d136:	4620      	mov	r0, r4
 800d138:	4629      	mov	r1, r5
 800d13a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13e:	4317      	orrs	r7, r2
 800d140:	d106      	bne.n	800d150 <__ieee754_atan2+0x90>
 800d142:	f1be 0f00 	cmp.w	lr, #0
 800d146:	db68      	blt.n	800d21a <__ieee754_atan2+0x15a>
 800d148:	a537      	add	r5, pc, #220	@ (adr r5, 800d228 <__ieee754_atan2+0x168>)
 800d14a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d14e:	e7f2      	b.n	800d136 <__ieee754_atan2+0x76>
 800d150:	4552      	cmp	r2, sl
 800d152:	d10f      	bne.n	800d174 <__ieee754_atan2+0xb4>
 800d154:	4293      	cmp	r3, r2
 800d156:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800d15a:	d107      	bne.n	800d16c <__ieee754_atan2+0xac>
 800d15c:	2e02      	cmp	r6, #2
 800d15e:	d855      	bhi.n	800d20c <__ieee754_atan2+0x14c>
 800d160:	4b3e      	ldr	r3, [pc, #248]	@ (800d25c <__ieee754_atan2+0x19c>)
 800d162:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d166:	e9d3 4500 	ldrd	r4, r5, [r3]
 800d16a:	e7e4      	b.n	800d136 <__ieee754_atan2+0x76>
 800d16c:	2e02      	cmp	r6, #2
 800d16e:	d851      	bhi.n	800d214 <__ieee754_atan2+0x154>
 800d170:	4b3b      	ldr	r3, [pc, #236]	@ (800d260 <__ieee754_atan2+0x1a0>)
 800d172:	e7f6      	b.n	800d162 <__ieee754_atan2+0xa2>
 800d174:	4553      	cmp	r3, sl
 800d176:	d0e4      	beq.n	800d142 <__ieee754_atan2+0x82>
 800d178:	1a9b      	subs	r3, r3, r2
 800d17a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d17e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d182:	da21      	bge.n	800d1c8 <__ieee754_atan2+0x108>
 800d184:	f1b9 0f00 	cmp.w	r9, #0
 800d188:	da01      	bge.n	800d18e <__ieee754_atan2+0xce>
 800d18a:	323c      	adds	r2, #60	@ 0x3c
 800d18c:	db20      	blt.n	800d1d0 <__ieee754_atan2+0x110>
 800d18e:	4642      	mov	r2, r8
 800d190:	464b      	mov	r3, r9
 800d192:	4620      	mov	r0, r4
 800d194:	4629      	mov	r1, r5
 800d196:	f7f3 fac9 	bl	800072c <__aeabi_ddiv>
 800d19a:	f000 f9f5 	bl	800d588 <fabs>
 800d19e:	f000 f863 	bl	800d268 <atan>
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	460d      	mov	r5, r1
 800d1a6:	2e01      	cmp	r6, #1
 800d1a8:	d015      	beq.n	800d1d6 <__ieee754_atan2+0x116>
 800d1aa:	2e02      	cmp	r6, #2
 800d1ac:	d017      	beq.n	800d1de <__ieee754_atan2+0x11e>
 800d1ae:	2e00      	cmp	r6, #0
 800d1b0:	d0c1      	beq.n	800d136 <__ieee754_atan2+0x76>
 800d1b2:	a31f      	add	r3, pc, #124	@ (adr r3, 800d230 <__ieee754_atan2+0x170>)
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	f7f2 ffd4 	bl	8000168 <__aeabi_dsub>
 800d1c0:	a31d      	add	r3, pc, #116	@ (adr r3, 800d238 <__ieee754_atan2+0x178>)
 800d1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c6:	e016      	b.n	800d1f6 <__ieee754_atan2+0x136>
 800d1c8:	a517      	add	r5, pc, #92	@ (adr r5, 800d228 <__ieee754_atan2+0x168>)
 800d1ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d1ce:	e7ea      	b.n	800d1a6 <__ieee754_atan2+0xe6>
 800d1d0:	2400      	movs	r4, #0
 800d1d2:	2500      	movs	r5, #0
 800d1d4:	e7e7      	b.n	800d1a6 <__ieee754_atan2+0xe6>
 800d1d6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800d1da:	461d      	mov	r5, r3
 800d1dc:	e7ab      	b.n	800d136 <__ieee754_atan2+0x76>
 800d1de:	a314      	add	r3, pc, #80	@ (adr r3, 800d230 <__ieee754_atan2+0x170>)
 800d1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4629      	mov	r1, r5
 800d1e8:	f7f2 ffbe 	bl	8000168 <__aeabi_dsub>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	a111      	add	r1, pc, #68	@ (adr r1, 800d238 <__ieee754_atan2+0x178>)
 800d1f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f6:	f7f2 ffb7 	bl	8000168 <__aeabi_dsub>
 800d1fa:	e782      	b.n	800d102 <__ieee754_atan2+0x42>
 800d1fc:	a50e      	add	r5, pc, #56	@ (adr r5, 800d238 <__ieee754_atan2+0x178>)
 800d1fe:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d202:	e798      	b.n	800d136 <__ieee754_atan2+0x76>
 800d204:	a50e      	add	r5, pc, #56	@ (adr r5, 800d240 <__ieee754_atan2+0x180>)
 800d206:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d20a:	e794      	b.n	800d136 <__ieee754_atan2+0x76>
 800d20c:	a50e      	add	r5, pc, #56	@ (adr r5, 800d248 <__ieee754_atan2+0x188>)
 800d20e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d212:	e790      	b.n	800d136 <__ieee754_atan2+0x76>
 800d214:	2400      	movs	r4, #0
 800d216:	2500      	movs	r5, #0
 800d218:	e78d      	b.n	800d136 <__ieee754_atan2+0x76>
 800d21a:	a50d      	add	r5, pc, #52	@ (adr r5, 800d250 <__ieee754_atan2+0x190>)
 800d21c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d220:	e789      	b.n	800d136 <__ieee754_atan2+0x76>
 800d222:	bf00      	nop
 800d224:	f3af 8000 	nop.w
 800d228:	54442d18 	.word	0x54442d18
 800d22c:	3ff921fb 	.word	0x3ff921fb
 800d230:	33145c07 	.word	0x33145c07
 800d234:	3ca1a626 	.word	0x3ca1a626
 800d238:	54442d18 	.word	0x54442d18
 800d23c:	400921fb 	.word	0x400921fb
 800d240:	54442d18 	.word	0x54442d18
 800d244:	c00921fb 	.word	0xc00921fb
 800d248:	54442d18 	.word	0x54442d18
 800d24c:	3fe921fb 	.word	0x3fe921fb
 800d250:	54442d18 	.word	0x54442d18
 800d254:	bff921fb 	.word	0xbff921fb
 800d258:	7ff00000 	.word	0x7ff00000
 800d25c:	0800d978 	.word	0x0800d978
 800d260:	0800d960 	.word	0x0800d960
 800d264:	00000000 	.word	0x00000000

0800d268 <atan>:
 800d268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d26c:	4bbc      	ldr	r3, [pc, #752]	@ (800d560 <atan+0x2f8>)
 800d26e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800d272:	429e      	cmp	r6, r3
 800d274:	4604      	mov	r4, r0
 800d276:	460d      	mov	r5, r1
 800d278:	468b      	mov	fp, r1
 800d27a:	d918      	bls.n	800d2ae <atan+0x46>
 800d27c:	4bb9      	ldr	r3, [pc, #740]	@ (800d564 <atan+0x2fc>)
 800d27e:	429e      	cmp	r6, r3
 800d280:	d801      	bhi.n	800d286 <atan+0x1e>
 800d282:	d109      	bne.n	800d298 <atan+0x30>
 800d284:	b140      	cbz	r0, 800d298 <atan+0x30>
 800d286:	4622      	mov	r2, r4
 800d288:	462b      	mov	r3, r5
 800d28a:	4620      	mov	r0, r4
 800d28c:	4629      	mov	r1, r5
 800d28e:	f7f2 ff6d 	bl	800016c <__adddf3>
 800d292:	4604      	mov	r4, r0
 800d294:	460d      	mov	r5, r1
 800d296:	e006      	b.n	800d2a6 <atan+0x3e>
 800d298:	f1bb 0f00 	cmp.w	fp, #0
 800d29c:	f340 8123 	ble.w	800d4e6 <atan+0x27e>
 800d2a0:	a593      	add	r5, pc, #588	@ (adr r5, 800d4f0 <atan+0x288>)
 800d2a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ae:	4bae      	ldr	r3, [pc, #696]	@ (800d568 <atan+0x300>)
 800d2b0:	429e      	cmp	r6, r3
 800d2b2:	d811      	bhi.n	800d2d8 <atan+0x70>
 800d2b4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d2b8:	429e      	cmp	r6, r3
 800d2ba:	d80a      	bhi.n	800d2d2 <atan+0x6a>
 800d2bc:	a38e      	add	r3, pc, #568	@ (adr r3, 800d4f8 <atan+0x290>)
 800d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c2:	f7f2 ff53 	bl	800016c <__adddf3>
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	4ba8      	ldr	r3, [pc, #672]	@ (800d56c <atan+0x304>)
 800d2ca:	f7f3 fb95 	bl	80009f8 <__aeabi_dcmpgt>
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d1e9      	bne.n	800d2a6 <atan+0x3e>
 800d2d2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d2d6:	e027      	b.n	800d328 <atan+0xc0>
 800d2d8:	f000 f956 	bl	800d588 <fabs>
 800d2dc:	4ba4      	ldr	r3, [pc, #656]	@ (800d570 <atan+0x308>)
 800d2de:	4604      	mov	r4, r0
 800d2e0:	429e      	cmp	r6, r3
 800d2e2:	460d      	mov	r5, r1
 800d2e4:	f200 80b8 	bhi.w	800d458 <atan+0x1f0>
 800d2e8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d2ec:	429e      	cmp	r6, r3
 800d2ee:	f200 809c 	bhi.w	800d42a <atan+0x1c2>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	f7f2 ff39 	bl	800016c <__adddf3>
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	4b9b      	ldr	r3, [pc, #620]	@ (800d56c <atan+0x304>)
 800d2fe:	f7f2 ff33 	bl	8000168 <__aeabi_dsub>
 800d302:	2200      	movs	r2, #0
 800d304:	4606      	mov	r6, r0
 800d306:	460f      	mov	r7, r1
 800d308:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d30c:	4620      	mov	r0, r4
 800d30e:	4629      	mov	r1, r5
 800d310:	f7f2 ff2c 	bl	800016c <__adddf3>
 800d314:	4602      	mov	r2, r0
 800d316:	460b      	mov	r3, r1
 800d318:	4630      	mov	r0, r6
 800d31a:	4639      	mov	r1, r7
 800d31c:	f7f3 fa06 	bl	800072c <__aeabi_ddiv>
 800d320:	f04f 0a00 	mov.w	sl, #0
 800d324:	4604      	mov	r4, r0
 800d326:	460d      	mov	r5, r1
 800d328:	4622      	mov	r2, r4
 800d32a:	462b      	mov	r3, r5
 800d32c:	4620      	mov	r0, r4
 800d32e:	4629      	mov	r1, r5
 800d330:	f7f3 f8d2 	bl	80004d8 <__aeabi_dmul>
 800d334:	4602      	mov	r2, r0
 800d336:	460b      	mov	r3, r1
 800d338:	4680      	mov	r8, r0
 800d33a:	4689      	mov	r9, r1
 800d33c:	f7f3 f8cc 	bl	80004d8 <__aeabi_dmul>
 800d340:	a36f      	add	r3, pc, #444	@ (adr r3, 800d500 <atan+0x298>)
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	4606      	mov	r6, r0
 800d348:	460f      	mov	r7, r1
 800d34a:	f7f3 f8c5 	bl	80004d8 <__aeabi_dmul>
 800d34e:	a36e      	add	r3, pc, #440	@ (adr r3, 800d508 <atan+0x2a0>)
 800d350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d354:	f7f2 ff0a 	bl	800016c <__adddf3>
 800d358:	4632      	mov	r2, r6
 800d35a:	463b      	mov	r3, r7
 800d35c:	f7f3 f8bc 	bl	80004d8 <__aeabi_dmul>
 800d360:	a36b      	add	r3, pc, #428	@ (adr r3, 800d510 <atan+0x2a8>)
 800d362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d366:	f7f2 ff01 	bl	800016c <__adddf3>
 800d36a:	4632      	mov	r2, r6
 800d36c:	463b      	mov	r3, r7
 800d36e:	f7f3 f8b3 	bl	80004d8 <__aeabi_dmul>
 800d372:	a369      	add	r3, pc, #420	@ (adr r3, 800d518 <atan+0x2b0>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	f7f2 fef8 	bl	800016c <__adddf3>
 800d37c:	4632      	mov	r2, r6
 800d37e:	463b      	mov	r3, r7
 800d380:	f7f3 f8aa 	bl	80004d8 <__aeabi_dmul>
 800d384:	a366      	add	r3, pc, #408	@ (adr r3, 800d520 <atan+0x2b8>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	f7f2 feef 	bl	800016c <__adddf3>
 800d38e:	4632      	mov	r2, r6
 800d390:	463b      	mov	r3, r7
 800d392:	f7f3 f8a1 	bl	80004d8 <__aeabi_dmul>
 800d396:	a364      	add	r3, pc, #400	@ (adr r3, 800d528 <atan+0x2c0>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	f7f2 fee6 	bl	800016c <__adddf3>
 800d3a0:	4642      	mov	r2, r8
 800d3a2:	464b      	mov	r3, r9
 800d3a4:	f7f3 f898 	bl	80004d8 <__aeabi_dmul>
 800d3a8:	a361      	add	r3, pc, #388	@ (adr r3, 800d530 <atan+0x2c8>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	4680      	mov	r8, r0
 800d3b0:	4689      	mov	r9, r1
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f3 f88f 	bl	80004d8 <__aeabi_dmul>
 800d3ba:	a35f      	add	r3, pc, #380	@ (adr r3, 800d538 <atan+0x2d0>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f7f2 fed2 	bl	8000168 <__aeabi_dsub>
 800d3c4:	4632      	mov	r2, r6
 800d3c6:	463b      	mov	r3, r7
 800d3c8:	f7f3 f886 	bl	80004d8 <__aeabi_dmul>
 800d3cc:	a35c      	add	r3, pc, #368	@ (adr r3, 800d540 <atan+0x2d8>)
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f2 fec9 	bl	8000168 <__aeabi_dsub>
 800d3d6:	4632      	mov	r2, r6
 800d3d8:	463b      	mov	r3, r7
 800d3da:	f7f3 f87d 	bl	80004d8 <__aeabi_dmul>
 800d3de:	a35a      	add	r3, pc, #360	@ (adr r3, 800d548 <atan+0x2e0>)
 800d3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e4:	f7f2 fec0 	bl	8000168 <__aeabi_dsub>
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	463b      	mov	r3, r7
 800d3ec:	f7f3 f874 	bl	80004d8 <__aeabi_dmul>
 800d3f0:	a357      	add	r3, pc, #348	@ (adr r3, 800d550 <atan+0x2e8>)
 800d3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f6:	f7f2 feb7 	bl	8000168 <__aeabi_dsub>
 800d3fa:	4632      	mov	r2, r6
 800d3fc:	463b      	mov	r3, r7
 800d3fe:	f7f3 f86b 	bl	80004d8 <__aeabi_dmul>
 800d402:	4602      	mov	r2, r0
 800d404:	460b      	mov	r3, r1
 800d406:	4640      	mov	r0, r8
 800d408:	4649      	mov	r1, r9
 800d40a:	f7f2 feaf 	bl	800016c <__adddf3>
 800d40e:	4622      	mov	r2, r4
 800d410:	462b      	mov	r3, r5
 800d412:	f7f3 f861 	bl	80004d8 <__aeabi_dmul>
 800d416:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800d41a:	4602      	mov	r2, r0
 800d41c:	460b      	mov	r3, r1
 800d41e:	d144      	bne.n	800d4aa <atan+0x242>
 800d420:	4620      	mov	r0, r4
 800d422:	4629      	mov	r1, r5
 800d424:	f7f2 fea0 	bl	8000168 <__aeabi_dsub>
 800d428:	e733      	b.n	800d292 <atan+0x2a>
 800d42a:	2200      	movs	r2, #0
 800d42c:	4b4f      	ldr	r3, [pc, #316]	@ (800d56c <atan+0x304>)
 800d42e:	f7f2 fe9b 	bl	8000168 <__aeabi_dsub>
 800d432:	2200      	movs	r2, #0
 800d434:	4606      	mov	r6, r0
 800d436:	460f      	mov	r7, r1
 800d438:	4620      	mov	r0, r4
 800d43a:	4629      	mov	r1, r5
 800d43c:	4b4b      	ldr	r3, [pc, #300]	@ (800d56c <atan+0x304>)
 800d43e:	f7f2 fe95 	bl	800016c <__adddf3>
 800d442:	4602      	mov	r2, r0
 800d444:	460b      	mov	r3, r1
 800d446:	4630      	mov	r0, r6
 800d448:	4639      	mov	r1, r7
 800d44a:	f7f3 f96f 	bl	800072c <__aeabi_ddiv>
 800d44e:	f04f 0a01 	mov.w	sl, #1
 800d452:	4604      	mov	r4, r0
 800d454:	460d      	mov	r5, r1
 800d456:	e767      	b.n	800d328 <atan+0xc0>
 800d458:	4b46      	ldr	r3, [pc, #280]	@ (800d574 <atan+0x30c>)
 800d45a:	429e      	cmp	r6, r3
 800d45c:	d21a      	bcs.n	800d494 <atan+0x22c>
 800d45e:	2200      	movs	r2, #0
 800d460:	4b45      	ldr	r3, [pc, #276]	@ (800d578 <atan+0x310>)
 800d462:	f7f2 fe81 	bl	8000168 <__aeabi_dsub>
 800d466:	2200      	movs	r2, #0
 800d468:	4606      	mov	r6, r0
 800d46a:	460f      	mov	r7, r1
 800d46c:	4620      	mov	r0, r4
 800d46e:	4629      	mov	r1, r5
 800d470:	4b41      	ldr	r3, [pc, #260]	@ (800d578 <atan+0x310>)
 800d472:	f7f3 f831 	bl	80004d8 <__aeabi_dmul>
 800d476:	2200      	movs	r2, #0
 800d478:	4b3c      	ldr	r3, [pc, #240]	@ (800d56c <atan+0x304>)
 800d47a:	f7f2 fe77 	bl	800016c <__adddf3>
 800d47e:	4602      	mov	r2, r0
 800d480:	460b      	mov	r3, r1
 800d482:	4630      	mov	r0, r6
 800d484:	4639      	mov	r1, r7
 800d486:	f7f3 f951 	bl	800072c <__aeabi_ddiv>
 800d48a:	f04f 0a02 	mov.w	sl, #2
 800d48e:	4604      	mov	r4, r0
 800d490:	460d      	mov	r5, r1
 800d492:	e749      	b.n	800d328 <atan+0xc0>
 800d494:	4602      	mov	r2, r0
 800d496:	460b      	mov	r3, r1
 800d498:	2000      	movs	r0, #0
 800d49a:	4938      	ldr	r1, [pc, #224]	@ (800d57c <atan+0x314>)
 800d49c:	f7f3 f946 	bl	800072c <__aeabi_ddiv>
 800d4a0:	f04f 0a03 	mov.w	sl, #3
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	e73e      	b.n	800d328 <atan+0xc0>
 800d4aa:	4b35      	ldr	r3, [pc, #212]	@ (800d580 <atan+0x318>)
 800d4ac:	4e35      	ldr	r6, [pc, #212]	@ (800d584 <atan+0x31c>)
 800d4ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f2 fe57 	bl	8000168 <__aeabi_dsub>
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	462b      	mov	r3, r5
 800d4be:	f7f2 fe53 	bl	8000168 <__aeabi_dsub>
 800d4c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d4ce:	f7f2 fe4b 	bl	8000168 <__aeabi_dsub>
 800d4d2:	f1bb 0f00 	cmp.w	fp, #0
 800d4d6:	4604      	mov	r4, r0
 800d4d8:	460d      	mov	r5, r1
 800d4da:	f6bf aee4 	bge.w	800d2a6 <atan+0x3e>
 800d4de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d4e2:	461d      	mov	r5, r3
 800d4e4:	e6df      	b.n	800d2a6 <atan+0x3e>
 800d4e6:	a51c      	add	r5, pc, #112	@ (adr r5, 800d558 <atan+0x2f0>)
 800d4e8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d4ec:	e6db      	b.n	800d2a6 <atan+0x3e>
 800d4ee:	bf00      	nop
 800d4f0:	54442d18 	.word	0x54442d18
 800d4f4:	3ff921fb 	.word	0x3ff921fb
 800d4f8:	8800759c 	.word	0x8800759c
 800d4fc:	7e37e43c 	.word	0x7e37e43c
 800d500:	e322da11 	.word	0xe322da11
 800d504:	3f90ad3a 	.word	0x3f90ad3a
 800d508:	24760deb 	.word	0x24760deb
 800d50c:	3fa97b4b 	.word	0x3fa97b4b
 800d510:	a0d03d51 	.word	0xa0d03d51
 800d514:	3fb10d66 	.word	0x3fb10d66
 800d518:	c54c206e 	.word	0xc54c206e
 800d51c:	3fb745cd 	.word	0x3fb745cd
 800d520:	920083ff 	.word	0x920083ff
 800d524:	3fc24924 	.word	0x3fc24924
 800d528:	5555550d 	.word	0x5555550d
 800d52c:	3fd55555 	.word	0x3fd55555
 800d530:	2c6a6c2f 	.word	0x2c6a6c2f
 800d534:	bfa2b444 	.word	0xbfa2b444
 800d538:	52defd9a 	.word	0x52defd9a
 800d53c:	3fadde2d 	.word	0x3fadde2d
 800d540:	af749a6d 	.word	0xaf749a6d
 800d544:	3fb3b0f2 	.word	0x3fb3b0f2
 800d548:	fe231671 	.word	0xfe231671
 800d54c:	3fbc71c6 	.word	0x3fbc71c6
 800d550:	9998ebc4 	.word	0x9998ebc4
 800d554:	3fc99999 	.word	0x3fc99999
 800d558:	54442d18 	.word	0x54442d18
 800d55c:	bff921fb 	.word	0xbff921fb
 800d560:	440fffff 	.word	0x440fffff
 800d564:	7ff00000 	.word	0x7ff00000
 800d568:	3fdbffff 	.word	0x3fdbffff
 800d56c:	3ff00000 	.word	0x3ff00000
 800d570:	3ff2ffff 	.word	0x3ff2ffff
 800d574:	40038000 	.word	0x40038000
 800d578:	3ff80000 	.word	0x3ff80000
 800d57c:	bff00000 	.word	0xbff00000
 800d580:	0800d990 	.word	0x0800d990
 800d584:	0800d9b0 	.word	0x0800d9b0

0800d588 <fabs>:
 800d588:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d58c:	4619      	mov	r1, r3
 800d58e:	4770      	bx	lr

0800d590 <_init>:
 800d590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d592:	bf00      	nop
 800d594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d596:	bc08      	pop	{r3}
 800d598:	469e      	mov	lr, r3
 800d59a:	4770      	bx	lr

0800d59c <_fini>:
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	bf00      	nop
 800d5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5a2:	bc08      	pop	{r3}
 800d5a4:	469e      	mov	lr, r3
 800d5a6:	4770      	bx	lr
